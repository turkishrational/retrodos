     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/04/2024 - Retro DOS v4.1 (Previous: 27/12/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E95617                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [8808]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [EC06]                  		dw strategy
   940 0000002B [F706]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [EC06]                  		dw strategy
   946 0000003D [1807]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [EC06]                  		dw strategy
   952 0000004F [FC06]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [EC06]                  		dw strategy
   958 00000061 [3007]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [EC06]                  		dw strategy
   967 00000073 [3507]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [EC06]                  		dw strategy
   985 00000083 [1807]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [EC06]                  		dw strategy
   991 00000095 [0307]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [EC06]                  		dw strategy
   997 000000A7 [0A07]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [EC06]                  		dw strategy
  1011 000000C0 [1107]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [EC06]                  		dw strategy
  1017 000000D2 [1E07]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [EC06]                  		dw strategy
  1027 000000E4 [2407]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [EC06]                  		dw strategy
  1033 000000F6 [2A07]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275                                  ; 22/12/2023
  1276                                  %if 0
  1277                                  sm92:		db 3			; .spf
  1278                                  		db 9			; .spt
  1279                                  		db 112	; 70h		; .cdire
  1280                                  		dw 1440	; 2*9*80	; .csec
  1281                                  		db 2			; .spau
  1282                                  		db 2			; .chead
  1283                                  %endif
  1284                                  
  1285 000004DE 00                      keyrd_func:	db 0			
  1286 000004DF 01                      keysts_func:	db 1			
  1287 000004E0 00                      printdev:	db 0			; printer device index
  1288                                  
  1289                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1290 000004E1 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1291                                  
  1292 000004E9 0000                    daycnt:		dw 0			
  1293 000004EB 00                      t_switch:	db 0			; flag for updating daycnt
  1294 000004EC 00                      havecmosclock:	db 0			
  1295 000004ED 13                      base_century:	db 19			
  1296 000004EE 50                      base_year:	db 80			
  1297 000004EF 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1297 000004F8 1F1E1F             
  1298 000004FB [F314]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1299 000004FD 7000                    		dw 70h ; 17/10/2022	
  1300 000004FF [2214]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1301 00000501 7000                    		dw 70h ; 17/10/2022
  1302 00000503 00                      set_id_flag:	db 0			; flag for getbp routine
  1303 00000504 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1304 0000050D 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1305 00000516 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1305 0000051F 202000             
  1306                                  
  1307                                  ; 22/12/2023
  1308                                  saved_word:
  1309 00000522 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1310 00000524 0000                    start_sec_h:	dw 0			; starting sector number high word
  1311                                  ; 22/12/2023
  1312                                  ;saved_word:	dw 0			; tempory saving place for a word
  1313 00000526 0000                    multrk_flag:	dw 0			
  1314 00000528 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1315 00000529 0000                    vretry_cnt:	dw 0			
  1316 0000052B 0000                    soft_ecc_cnt:	dw 0			
  1317 0000052D 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1318 0000052E 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1319                                  
  1320                                  ; variables for msdioctl.asm module
  1321                                  
  1322                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1323                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1324                                  ;	n	bytes per sector
  1325                                  ;      ---	----------------
  1326                                  ;	0	      128
  1327                                  ;	1	      256
  1328                                  ;	2	      512
  1329                                  ;	3	     1024
  1330                                  
  1331                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1332                                  ;					; we support (was 40 in dos 3.2)
  1333                                  
  1334 00000530 2400                    sectorspertrack: dw 36			
  1335 00000532 00000102                tracktable:	db 0, 0, 1, 2		
  1336 00000536 00000202                		db 0, 0, 2, 2
  1337 0000053A 00000302                		db 0, 0, 3, 2
  1338 0000053E 00000402                		db 0, 0, 4, 2
  1339 00000542 00000502                		db 0, 0, 5, 2
  1340 00000546 00000602                		db 0, 0, 6, 2
  1341 0000054A 00000702                		db 0, 0, 7, 2
  1342 0000054E 00000802                		db 0, 0, 8, 2
  1343 00000552 00000902                		db 0, 0, 9, 2
  1344 00000556 00000A02                		db 0, 0, 10, 2
  1345 0000055A 00000B02                		db 0, 0, 11, 2
  1346 0000055E 00000C02                		db 0, 0, 12, 2
  1347 00000562 00000D02                		db 0, 0, 13, 2
  1348 00000566 00000E02                		db 0, 0, 14, 2
  1349 0000056A 00000F02                		db 0, 0, 15, 2
  1350 0000056E 00001002                		db 0, 0, 16, 2
  1351 00000572 00001102                		db 0, 0, 17, 2
  1352 00000576 00001202                		db 0, 0, 18, 2
  1353 0000057A 00001302                		db 0, 0, 19, 2
  1354 0000057E 00001402                		db 0, 0, 20, 2
  1355 00000582 00001502                		db 0, 0, 21, 2
  1356 00000586 00001602                		db 0, 0, 22, 2
  1357 0000058A 00001702                		db 0, 0, 23, 2
  1358 0000058E 00001802                		db 0, 0, 24, 2
  1359 00000592 00001902                		db 0, 0, 25, 2
  1360 00000596 00001A02                		db 0, 0, 26, 2
  1361 0000059A 00001B02                		db 0, 0, 27, 2
  1362 0000059E 00001C02                		db 0, 0, 28, 2
  1363 000005A2 00001D02                		db 0, 0, 29, 2
  1364 000005A6 00001E02                		db 0, 0, 30, 2
  1365 000005AA 00001F02                		db 0, 0, 31, 2
  1366 000005AE 00002002                		db 0, 0, 32, 2
  1367 000005B2 00002102                		db 0, 0, 33, 2
  1368 000005B6 00002202                		db 0, 0, 34, 2
  1369 000005BA 00002302                		db 0, 0, 35, 2
  1370 000005BE 00002402                		db 0, 0, 36, 2
  1371 000005C2 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1372                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1373                                  					; times	((4*63)	- 144) db 0
  1374                                  
  1375                                  ;-----------------------------------------------------------------------------
  1376                                  
  1377                                  ; this is a real ugly place to put this
  1378                                  ; it should really go in the bds
  1379                                  
  1380 0000062E 00                      mediatype:	db 0			
  1381 0000062F 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1382                                  					; type for format call
  1383 00000630 00                      had_format_error: db 0			; 1 if the previous format operation
  1384                                  					; failed.
  1385                                  
  1386                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1387                                  ; the one passed by "new roms" before we perform a format operation. the old
  1388                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1389                                  ; this table does not contain the previously saved dpt.
  1390                                  		
  1391 00000631 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1392 00000635 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1393 00000636 00                      secondary_model_byte: db 0
  1394                                  		
  1395 00000637 00                      int19sem:	db 0			; indicate that all int 19
  1396                                  					; initialization is complete
  1397                                  		
  1398                                  ;; we assume the following remain contiguous and their order doesn't change
  1399                                  ;i19_lst:
  1400                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1401                                  ;	public	int19old&aa
  1402                                  ;		db	aa&h	; store the number as a byte
  1403                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1404                                  ;	endm
  1405                                  
  1406                                  ; 21/10/2022
  1407                                  
  1408 00000638 02                      i19_lst:	db 2			
  1409                                  					; Int19old&aa
  1410 00000639 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1411 0000063D 08                      		db 8
  1412 0000063E FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1413 00000642 09                      		db 9
  1414 00000643 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1415 00000647 0A                      		db 0Ah
  1416 00000648 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1417 0000064C 0B                      		db 0Bh
  1418 0000064D FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1419 00000651 0C                      		db 0Ch
  1420 00000652 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1421 00000656 0D                      		db 0Dh
  1422 00000657 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1423 0000065B 0E                      		db 0Eh
  1424 0000065C FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1425 00000660 70                      		db 70h
  1426 00000661 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1427 00000665 72                      		db 72h
  1428 00000666 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1429 0000066A 73                      		db 73h
  1430 0000066B FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1431 0000066F 74                      		db 74h
  1432 00000670 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1433 00000674 76                      		db 76h
  1434 00000675 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1435 00000679 77                      		db 77h
  1436 0000067A FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1437                                  
  1438                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1439                                  
  1440                                  ;-----------------------------------------------------------------------------
  1441                                  
  1442 0000067E [5403]                  dskdrvs:	dw fdrive1	
  1443 00000680 [B803]                  		dw fdrive2
  1444 00000682 [1C04]                  		dw fdrive3
  1445 00000684 [8004]                  		dw fdrive4
  1446                                  
  1447                                  ;M011 -- made all hard drive stuff variable
  1448                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1449 00000686 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1450                                  
  1451                                  ;-----------------------------------------------------------------------------
  1452                                  
  1453                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1454                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1455                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1456                                  
  1457                                  ;variables for dynamic relocatable modules
  1458                                  ;these should be stay resident.
  1459                                  
  1460 000006B2 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1461                                  					; for p12 machine
  1462                                  
  1463                                  ; data structures for real-time date and time
  1464                                  			
  1465 000006B6 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1466                                  
  1467 000006BA 0000                    month_table:	dw 0			; january
  1468 000006BC 1F00                    		dw 31			; february
  1469 000006BE 3B00                    		dw 59
  1470 000006C0 5A00                    		dw 90
  1471 000006C2 7800                    		dw 120
  1472 000006C4 9700                    		dw 151
  1473 000006C6 B500                    		dw 181
  1474 000006C8 D400                    		dw 212
  1475 000006CA F300                    		dw 243
  1476 000006CC 1101                    		dw 273
  1477 000006CE 3001                    		dw 304
  1478 000006D0 4E01                    		dw 334			; december
  1479                                  
  1480 000006D2 0000                    daycnt2:	dw 0			
  1481 000006D4 00                      feb29:		db 0			; february 29 in a leap	year flag
  1482                                  
  1483                                  ;-----------------------------------------------------------------------------
  1484                                  ;
  1485                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1486                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1487                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1488                                  
  1489                                  ; ----------------------------------------------------------------------------
  1490                                  
  1491                                  ;************************************************************************
  1492                                  ;*									*
  1493                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1494                                  ;*	  are plugged in by seg_reinit.					*
  1495                                  ;*									*
  1496                                  ;************************************************************************
  1497                                  
  1498                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1499                                  ; BIOSCODE_SEGMENT equ 2C7h
  1500                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1501                                  
  1502                                  ; 01/10/2022 - Erdogan Tan
  1503                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1504                                  ;  addresses, they will be changed to table labels later)
  1505                                  
  1506                                  ; 09/12/2022
  1507                                  %if 0
  1508                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1509                                  					; at 2C7h:43h =	70h:25B3h
  1510                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1511                                  					; at 2C7h:396h = 70h:2906h
  1512                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1513                                  					; at 2C7h:1302h	= 70h:3872h
  1514                                  i13x:		dw 154Bh, 2C7h		; i13z
  1515                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1516                                  %endif
  1517                                  
  1518                                  ; 09/12/2022
  1519 000006D5 [4300]9902              cdev:		dw chardev_entry, IOSYSCODESEG
  1520 000006D9 [8B03]9902              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1521 000006DD [7612]9902              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1522 000006E1 [A114]9902              i13x:		dw i13z, IOSYSCODESEG
  1523                                  
  1524                                  end_BC_entries:	; 15/10/2022
  1525                                  
  1526                                  ;************************************************************************
  1527                                  ;*									*
  1528                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1529                                  ;*									*
  1530                                  ;************************************************************************
  1531                                  
  1532                                  cbreak:					
  1533 000006E5 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1534                                  					; indicate break key set
  1535                                  intret:					
  1536 000006EB CF                      		iret
  1537                                  
  1538                                  ; =============== S U B	R O U T	I N E ========================================
  1539                                  
  1540                                  
  1541                                  ;************************************************************************
  1542                                  ;*									*
  1543                                  ;*	strategy - store es:bx (device driver request packet)		*
  1544                                  ;*		     away at [ptrsav] for next driver function call	*
  1545                                  ;*									*
  1546                                  ;************************************************************************
  1547                                  
  1548                                  strategy:	; proc far		
  1549 000006EC 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1550                                  					; away at [ptrsav] for next driver function call
  1551 000006F1 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1552 000006F6 CB                      		retf
  1553                                  
  1554                                  ; ----------------------------------------------------------------------------
  1555                                  
  1556                                  ;************************************************************************
  1557                                  ;*									*
  1558                                  ;*	device driver entry points. these are the initial		*
  1559                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1560                                  ;*	  in the case of our resident drivers, they'll just		*
  1561                                  ;*	  stick a fake return address on the stack which		*
  1562                                  ;*	  points to dispatch tables and possibly some unit		*
  1563                                  ;*	  numbers, and then call through a common entry point		*
  1564                                  ;*	  which can take care of a20 switching				*
  1565                                  ;*									*
  1566                                  ;************************************************************************
  1567                                  
  1568                                  ; 01/10/2022 - Erdogan Tan
  1569                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1570                                  ;  addresses, they will be changed to table labels later)
  1571                                  
  1572                                  ; 09/12/2022
  1573                                  
  1574                                  con_entry:				
  1575 000006F7 E84000                  		call	cdev_entry
  1576                                  ; ----------------------------------------------------------------------------
  1577                                  		;dw 0E4h		; con_table
  1578 000006FA [E300]                  		dw con_table	
  1579                                  					; 2C7h:0E4h = 70h:2654h
  1580                                  ; ----------------------------------------------------------------------------
  1581                                  
  1582                                  prn0_entry:				
  1583 000006FC E83B00                  		call	cdev_entry
  1584                                  ; ----------------------------------------------------------------------------
  1585                                  		;dw 0FBh		; prn_table
  1586 000006FF [FA00]                  		dw prn_table
  1587                                  					; 2C7h:0FBh = 70h:266Bh
  1588 00000701 0000                    		db 0, 0
  1589                                  ; ----------------------------------------------------------------------------
  1590                                  
  1591                                  prn1_entry:				
  1592 00000703 E83400                  		call	cdev_entry
  1593                                  ; ----------------------------------------------------------------------------
  1594                                  		;dw 0FBh		; prn_table
  1595 00000706 [FA00]                  		dw prn_table
  1596                                  					; 2C7h:0FBh = 70h:266Bh
  1597 00000708 0001                    		db 0, 1
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  
  1600                                  prn2_entry:				
  1601 0000070A E82D00                  		call	cdev_entry
  1602                                  ; ----------------------------------------------------------------------------
  1603                                  		;dw 0FBh		; prn_table
  1604 0000070D [FA00]                  		dw prn_table
  1605                                  					; 2C7h:0FBh = 70h:266Bh
  1606 0000070F 0102                    		db 1, 2
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  
  1609                                  prn3_entry:				
  1610 00000711 E82600                  		call	cdev_entry
  1611                                  ; ----------------------------------------------------------------------------
  1612                                  		;dw 0FBh		; prn_table
  1613 00000714 [FA00]                  		dw prn_table
  1614                                  					; 2C7h:0FBh = 70h:266Bh
  1615 00000716 0203                    		db 2, 3
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  
  1618                                  aux0_entry:				
  1619 00000718 E81F00                  		call	cdev_entry
  1620                                  ; ----------------------------------------------------------------------------
  1621                                  		;dw 130h		; aux_table
  1622 0000071B [2F01]                  		dw aux_table
  1623                                  					; 2C7h:130h = 70h:26A0h
  1624 0000071D 00                      		db 0
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  
  1627                                  aux1_entry:				
  1628 0000071E E81900                  		call	cdev_entry
  1629                                  ; ----------------------------------------------------------------------------
  1630                                  		;dw 130h		; aux_table
  1631 00000721 [2F01]                  		dw aux_table
  1632                                  					; 2C7h:130h = 70h:26A0h
  1633 00000723 01                      		db 1
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  
  1636                                  aux2_entry:				
  1637 00000724 E81300                  		call	cdev_entry
  1638                                  ; ----------------------------------------------------------------------------
  1639                                  		;dw 130h		; aux_table
  1640 00000727 [2F01]                  		dw aux_table
  1641                                  					; 2C7h:130h = 70h:26A0h
  1642 00000729 02                      		db 2
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  
  1645                                  aux3_entry:				
  1646 0000072A E80D00                  		call	cdev_entry
  1647                                  ; ----------------------------------------------------------------------------
  1648                                  		;dw 130h		; aux_table
  1649 0000072D [2F01]                  		dw aux_table
  1650                                  					; 2C7h:130h = 70h:26A0h
  1651 0000072F 03                      		db 3
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  
  1654                                  tim_entry:				
  1655 00000730 E80700                  		call	cdev_entry
  1656                                  ; ----------------------------------------------------------------------------
  1657                                  		;dw 147h		; tim_table
  1658 00000733 [4601]                  		dw tim_table
  1659                                  					; 2C7h:147h = 70h:26B7h
  1660                                  ; ----------------------------------------------------------------------------
  1661                                  
  1662                                  ; 15/10/2022
  1663                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1664                                  ; 09/12/2022
  1665                                  DSKTBL equ dsktbl
  1666                                  
  1667                                  dsk_entry:				
  1668 00000735 E80200                  		call	cdev_entry
  1669                                  ; ----------------------------------------------------------------------------
  1670                                  		;dw 4A2h		; dsktbl
  1671 00000738 [9104]                  		dw DSKTBL		; 09/12/2022
  1672                                  					; 2C7h:4A2h = 70h:2A12h
  1673                                  
  1674                                  ; =============== S U B	R O U T	I N E ========================================
  1675                                  
  1676                                  ;************************************************************************
  1677                                  ;*									*
  1678                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1679                                  ;*	This code assumes that if Segment of Device request packet is	*
  1680                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1681                                  ;*	A20 is already on.						*
  1682                                  ;*									*
  1683                                  ;************************************************************************
  1684                                  
  1685                                  cdev_entry:	; proc near		
  1686 0000073A 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1687 00000740 740D                    		jz	short ce_enter_codeseg
  1688                                  				; optimized for DOS in HMA
  1689 00000742 50                      		push	ax
  1690 00000743 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1691 00000747 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1692 0000074C 58                      		pop	ax
  1693 0000074D 7505                    		jnz	short not_from_dos
  1694                                  				; jump is coded this way to fall thru
  1695                                  				; in 99.99% of the cases
  1696                                  ce_enter_codeseg:
  1697 0000074F 2EFF2E[D506]            		jmp	far [cs:cdev]			
  1698                                  		;jmp	dword ptr cs:cdev
  1699                                  ;-----------------------------------------------------------------------------
  1700                                  
  1701                                  not_from_dos:				
  1702 00000754 E86200                  		call	EnsureA20On
  1703 00000757 EBF6                    		jmp	short ce_enter_codeseg
  1704                                  
  1705                                  ;************************************************************************
  1706                                  ;*									*
  1707                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1708                                  ;*	   character in al on the display using int 10h ttywrite	*
  1709                                  ;*									*
  1710                                  ;************************************************************************
  1711                                  
  1712                                  outchr:					
  1713 00000759 50                      		push	ax		; int 29h handler
  1714 0000075A 56                      		push	si
  1715 0000075B 57                      		push	di
  1716 0000075C 55                      		push	bp
  1717 0000075D 53                      		push	bx
  1718 0000075E B40E                    		mov	ah, 0Eh
  1719 00000760 BB0700                  		mov	bx, 7
  1720 00000763 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1721                                  					; AL = character, BH = display page (alpha modes)
  1722                                  					; BL = foreground color	(graphics modes)
  1723 00000765 5B                      		pop	bx
  1724 00000766 5D                      		pop	bp
  1725 00000767 5F                      		pop	di
  1726 00000768 5E                      		pop	si
  1727 00000769 58                      		pop	ax
  1728 0000076A CF                      		iret
  1729                                  ;-----------------------------------------------------------------------------
  1730                                  
  1731                                  ;************************************************************************
  1732                                  ;*									*
  1733                                  ;*	block13 - our int13 hooker					*
  1734                                  ;*									*
  1735                                  ;************************************************************************
  1736                                  
  1737                                  block13:				
  1738 0000076B 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1739 00000771 7408                    		jz	short skipa20
  1740 00000773 E85400                  		call	IsA20Off	; A20 Off?
  1741 00000776 7503                    		jnz	short skipa20
  1742 00000778 E84300                  		call	EnableA20	; assure a20 enabled
  1743                                  
  1744                                  skipa20:				
  1745 0000077B 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1746 00000780 9C                      		pushf			; fake interrupt
  1747 00000781 2EFF1E[E106]            		call	far [cs:i13x]
  1748                                  		;call	dword ptr cs:i13x
  1749                                  					; call through Bios_Code entry table
  1750 00000786 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1751 0000078B CA0200                  		retf	2
  1752                                  
  1753                                  ; =============== S U B	R O U T	I N E =======================================
  1754                                  
  1755                                  ; the int13 hook calls back here to call-through to the ROM
  1756                                  ; this is necessary because some people have extended their
  1757                                  ; ROM BIOSs to use ds as a parameter/result register and
  1758                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1759                                  
  1760                                  call_orig13:	; proc far		
  1761 0000078E 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1762 00000792 9C                      		pushf			; simulate an int13
  1763 00000793 2EFF1E[B400]            		call	far [cs:Orig13]
  1764                                  		;call	cs:Orig13
  1765 00000798 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1766 0000079D 0E                      		push	cs
  1767 0000079E 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1768                                  
  1769 0000079F 9C                      		pushf
  1770                                  		; 10/12/2022
  1771                                  		; ds = cs
  1772 000007A0 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1773                                  		;cmp	byte [cs:inHMA], 0
  1774 000007A5 7408                    		jz	short corig13_popf_retf
  1775 000007A7 E82000                  		call	IsA20Off
  1776 000007AA 7503                    		jnz	short corig13_popf_retf
  1777 000007AC E80F00                  		call	EnableA20
  1778                                  corig13_popf_retf:			
  1779 000007AF 9D                      		popf
  1780 000007B0 CB                      		retf
  1781                                  
  1782                                  ;-----------------------------------------------------------------------------
  1783                                  
  1784                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1785                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1786                                  
  1787 000007B1 9000FFFF                HiMem:		dd 0FFFF0090h		
  1788 000007B5 80000000                LoMem:		dd 80h
  1789                                  
  1790                                  ; ----------------------------------------------------------------------------			
  1791                                  
  1792                                  ; =============== S U B	R O U T	I N E ========================================
  1793                                  
  1794                                  
  1795                                  ;************************************************************************
  1796                                  ;*									*
  1797                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1798                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1799                                  ;*									*
  1800                                  ;************************************************************************
  1801                                  
  1802                                  EnsureA20On:	; proc near		
  1803 000007B9 E80E00                  		call	IsA20Off
  1804                                  		;jz	short EnableA20
  1805                                  		;retn
  1806                                  		; 18/12/2022
  1807 000007BC 750B                    		jnz	short A20On_retn	
  1808                                  
  1809                                  ; =============== S U B	R O U T	I N E ========================================
  1810                                  
  1811                                  
  1812                                  EnableA20:	; proc near		
  1813 000007BE 50                      		push	ax
  1814 000007BF 53                      		push	bx
  1815 000007C0 B405                    		mov	ah, 5	 ; local enable a20
  1816                                  		;call	cs:xms
  1817 000007C2 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1818 000007C7 5B                      		pop	bx
  1819 000007C8 58                      		pop	ax
  1820                                  A20On_retn:	; 18/12/2022	
  1821 000007C9 C3                      		retn
  1822                                  
  1823                                  ; =============== S U B	R O U T	I N E ========================================
  1824                                  
  1825                                  
  1826                                  IsA20Off:	; proc near		
  1827 000007CA 1E                      		push	ds
  1828 000007CB 06                      		push	es
  1829 000007CC 51                      		push	cx
  1830 000007CD 56                      		push	si
  1831 000007CE 57                      		push	di
  1832 000007CF 2EC536[B107]            		lds	si, [cs:HiMem]
  1833 000007D4 2EC43E[B507]            		les	di, [cs:LoMem]
  1834 000007D9 B90800                  		mov	cx, 8
  1835 000007DC F3A7                    		repe cmpsw
  1836 000007DE 5F                      		pop	di
  1837 000007DF 5E                      		pop	si
  1838 000007E0 59                      		pop	cx
  1839 000007E1 07                      		pop	es
  1840 000007E2 1F                      		pop	ds
  1841 000007E3 C3                      		retn
  1842                                  
  1843                                  ; ----------------------------------------------------------------------------
  1844                                  
  1845                                  DisableA20:
  1846 000007E4 50                      		push	ax
  1847 000007E5 53                      		push	bx
  1848 000007E6 B406                    		mov	ah, 6		; local disable A20
  1849 000007E8 2EFF1E[0E00]            		call	far [cs:xms]
  1850                                  		;call	cs:xms
  1851 000007ED 5B                      		pop	bx
  1852 000007EE 58                      		pop	ax
  1853 000007EF C3                      		retn
  1854                                  
  1855                                  ; ----------------------------------------------------------------------------
  1856                                  
  1857                                  ;************************************************************************
  1858                                  ;*									*
  1859                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1860                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1861                                  ;*									*
  1862                                  ;************************************************************************
  1863                                  
  1864                                  int19:					
  1865 000007F0 0E                      		push	cs
  1866 000007F1 1F                      		pop	ds
  1867 000007F2 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1868 000007F6 B90500                  		mov	cx, 5		; NUMROMVECTORS
  1869                                  		;mov	si, offset RomVectors
  1870 000007F9 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1871                                  next_int:				
  1872 000007FC AC                      		lodsb			; get int number
  1873 000007FD 98                      		cbw			; assume < 128
  1874 000007FE D1E0                    		shl	ax, 1
  1875 00000800 D1E0                    		shl	ax, 1		; int *	4
  1876 00000802 89C7                    		mov	di, ax
  1877 00000804 AD                      		lodsw
  1878 00000805 AB                      		stosw
  1879 00000806 AD                      		lodsw
  1880 00000807 AB                      		stosw			; install the saved vector
  1881 00000808 E2F2                    		loop	next_int
  1882 0000080A 803E[3706]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1883 0000080F 7422                    		jz	short doint19
  1884 00000811 BE[3806]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1885                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1886 00000814 B90E00                  		mov	cx, 14		; num_i19
  1887                                  
  1888                                  i19_restore_loop:			
  1889 00000817 AC                      		lodsb			; get interrupt	number
  1890 00000818 98                      		cbw			; assume < 128
  1891 00000819 89C7                    		mov	di, ax
  1892 0000081B AD                      		lodsw			; get original vector offset
  1893 0000081C 89C3                    		mov	bx, ax		; save it
  1894 0000081E AD                      		lodsw
  1895 0000081F 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1896 00000822 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1897 00000824 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1898 00000827 7408                    		jz	short i19_restor_1
  1899 00000829 01FF                    		add	di, di
  1900 0000082B 01FF                    		add	di, di
  1901 0000082D 93                      		xchg	ax, bx
  1902 0000082E AB                      		stosw
  1903 0000082F 93                      		xchg	ax, bx
  1904 00000830 AB                      		stosw			; put the vector back
  1905                                  
  1906                                  i19_restor_1:				
  1907 00000831 E2E4                    		loop	i19_restore_loop
  1908                                  
  1909                                  doint19:				
  1910 00000833 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1911 00000838 7403                    		jz	short SkipVDisk
  1912 0000083A E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1913                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1914                                  					; the memory above 1MB during a	warm boot.
  1915                                  SkipVDisk:				
  1916 0000083D CD19                    		int	19h		; DISK BOOT
  1917                                  					; causes reboot	of disk	system
  1918                                  
  1919                                  ; =============== S U B	R O U T	I N E ========================================
  1920                                  
  1921                                  ;-----------------------------------------------------------------------------
  1922                                  ;
  1923                                  ; procedure : int15
  1924                                  ;
  1925                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1926                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1927                                  ;		is running high, it Erases the VDISK header
  1928                                  ;		present at 1MB boundary
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------
  1931                                  
  1932                                  ; 16/10/2022
  1933                                  ;DELKEY		equ	53h
  1934                                  ;ROMDATASEG	equ	40h
  1935                                  KBFLAG		equ	17h
  1936                                  ;CTRLSTATE	equ	04h
  1937                                  ;ALTSTATE	equ	08h
  1938                                  
  1939                                  Int15:		; proc near		
  1940                                  		;cmp	ax, 4F00h+DELKEY
  1941 0000083F 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1942 00000842 7405                    		jz	short int15_1
  1943 00000844 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1944                                  		;jmp	cs:Old15
  1945                                  ; ----------------------------------------------------------------------------
  1946                                  
  1947                                  int15_1:				
  1948 00000849 1E                      		push	ds
  1949 0000084A 50                      		push	ax
  1950 0000084B B84000                  		mov	ax, 40h		; ROMDATASEG
  1951 0000084E 8ED8                    		mov	ds, ax
  1952                                  		;mov	al, ds:17h	; [KBFLAG]
  1953                                  		; 16/10/2022
  1954 00000850 A01700                  		mov	al, [KBFLAG]
  1955 00000853 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1956 00000855 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1957 00000857 750C                    		jnz	short int15_2
  1958 00000859 0E                      		push	cs
  1959 0000085A 1F                      		pop	ds
  1960 0000085B 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1961 00000860 7403                    		jz	short int15_2
  1962 00000862 E80800                  		call	EraseVDiskHead
  1963                                  int15_2:				
  1964 00000865 58                      		pop	ax
  1965 00000866 1F                      		pop	ds
  1966 00000867 F9                      		stc
  1967 00000868 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1968                                  		;jmp	cs:Old15
  1969                                  
  1970                                  ; =============== S U B	R O U T	I N E ========================================
  1971                                  
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  ;
  1974                                  ; procedure : EraseVDiskHead
  1975                                  ;
  1976                                  ;		Erases the VDisk Header present in the 1MB boundary
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------
  1979                                  
  1980                                  EraseVDiskHead:	; proc near		
  1981 0000086D 50                      		push	ax
  1982 0000086E 51                      		push	cx
  1983 0000086F 57                      		push	di
  1984 00000870 06                      		push	es
  1985 00000871 E845FF                  		call	EnsureA20On
  1986 00000874 B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1987 00000877 8EC0                    		mov	es, ax
  1988 00000879 BF1000                  		mov	di, 10h		; point	to VDISK header
  1989 0000087C B91000                  		mov	cx, 10h		; size of vdisk	header
  1990 0000087F 31C0                    		xor	ax, ax
  1991 00000881 F3AB                    		rep stosw		; clear	it
  1992 00000883 07                      		pop	es
  1993 00000884 5F                      		pop	di
  1994 00000885 59                      		pop	cx
  1995 00000886 58                      		pop	ax
  1996 00000887 C3                      		retn
  1997                                  
  1998                                  ; ----------------------------------------------------------------------------
  1999                                  
  2000                                  ;************************************************************************
  2001                                  ;*									*
  2002                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2003                                  ;*	  it returns through one of the three functions that follow.	*
  2004                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2005                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2006                                  ;*									*
  2007                                  ;************************************************************************
  2008                                  
  2009                                  int_2f:		
  2010 00000888 2EFF2E[DD06]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2011                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2012                                  
  2013                                  ; ----------------------------------------------------------------------------
  2014                                  
  2015                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2016                                  ; note:  is it really necessary to transiton out and then back in?
  2017                                  ;	 It's not as if this is a really speed critical function.
  2018                                  ;	 might as well do whatever's most compact.
  2019                                  
  2020                                  i2f_dskentry:				
  2021 0000088D E9A5FE                  		jmp	dsk_entry
  2022                                  
  2023                                  ; ----------------------------------------------------------------------------
  2024                                  
  2025                                  ;************************************************************************
  2026                                  ;*									*
  2027                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2028                                  ;*		is done. presently does nothing. affects no		*
  2029                                  ;*		registers!						*
  2030                                  ;*									*
  2031                                  ;************************************************************************
  2032                                  
  2033                                  ; 09/12/2022
  2034                                  ; re_init_:
  2035                                  re_init:				; called back by sysinit after
  2036 00000890 CB                      		retf			; a bunch of stuff is done.
  2037                                  					; presently does nothing
  2038                                  
  2039                                  ; ----------------------------------------------------------------------------
  2040                                  
  2041                                  ;SR; WIN386 support
  2042                                  
  2043                                  ; WIN386 instance data structure
  2044                                  ;
  2045                                  ; Here is a Win386 startup info structure which we set up and to which
  2046                                  ; we return a pointer when Win386 initializes.
  2047                                  
  2048 00000891 0300                    Win386_SI:	db 3, 0			; SI_Version
  2049                                  					; Startup Info for Win386
  2050 00000893 00000000                SI_Next:	dd 0			; pointer to next info structure
  2051 00000897 00000000                		dd 0			; a field we don't need
  2052 0000089B 00000000                		dd 0			; another field	we don't need
  2053 0000089F [A308]                  SI_Instance:	dw Instance_Table
  2054 000008A1 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2055                                  
  2056                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2057                                  ; areas. Note that the address and size of the hardware stacks must
  2058                                  ; be calculated and inserted at boot time.
  2059                                  
  2060 000008A3 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2061 000008A7 0200                    		dw 2			; ... 2	bytes
  2062 000008A9 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2063 000008AD 1400                    		dw 14h			; ... 14H bytes
  2064 000008AF [0C00]                  		dw altah		; a con	device buffer...
  2065 000008B1 7000                    		dw 70h			; Bios_Data segment
  2066 000008B3 0100                    		dw 1			; ... 1 byte
  2067                                  
  2068                                  NextStack:
  2069                                  
  2070                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2071                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2072                                  ;	That's just fine as long as these are the last items
  2073                                  ;	in the instance list since the first item is initialized
  2074                                  ;	to 0000 at load time.
  2075                                  
  2076 000008B5 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2077 000008B9 0200                    		dw 2			; ... 2 bytes
  2078 000008BB 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2079 000008BF 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2080 000008C1 00000000                		dd 0			; terminate the	instance table
  2081                                  
  2082                                  					;SR;
  2083 000008C5 00                      IsWin386:	db 0			; Flag to indicate whether
  2084                                  					; Win386 is running or not
  2085                                  ;-----------------------------------------------------------------------------
  2086                                  
  2087                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2088                                  ;when we call it including checking of A20. The code being only about 
  2089                                  ;30 bytes, we might as well put it in BIOS_DATA
  2090                                  
  2091                                  V86_Crit_SetFocus:			
  2092 000008C6 57                      		push	di
  2093 000008C7 06                      		push	es
  2094 000008C8 53                      		push	bx
  2095 000008C9 50                      		push	ax
  2096 000008CA 31FF                    		xor	di, di
  2097 000008CC 8EC7                    		mov	es, di
  2098 000008CE BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2099 000008D1 B88416                  		mov	ax, 1684h	; Get API entry	point
  2100 000008D4 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2101                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2102                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2103 000008D6 8CC0                    		mov	ax, es
  2104 000008D8 09F8                    		or	ax, di
  2105 000008DA 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2106                                  					; Set up stack frame to	simulate a call.
  2107 000008DC 0E                      		push	cs
  2108                                  		;;mov	ax,offset Skip
  2109                                  		;mov	ax,Skip
  2110                                  		;push	ax
  2111                                  		; 08/10/2023
  2112 000008DD 68[E608]                		push	Skip
  2113 000008E0 06                      		push	es
  2114 000008E1 57                      		push	di		; API far call address
  2115 000008E2 B80100                  		mov	ax, 1		; SetFocus function number
  2116 000008E5 CB                      		retf			; do the call
  2117                                  ;-----------------------------------------------------------------------------
  2118                                  
  2119                                  Skip:					
  2120 000008E6 58                      		pop	ax
  2121 000008E7 5B                      		pop	bx
  2122 000008E8 07                      		pop	es
  2123 000008E9 5F                      		pop	di
  2124 000008EA CB                      		retf
  2125                                  
  2126                                  ;End WIN386 support
  2127                                  
  2128                                  ; ----------------------------------------------------------------------------
  2129                                  
  2130                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2131                                  
  2132                                  ; 09/12/2022
  2133                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2134                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2135                                  ; (followings are in sysinit segment)
  2136                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2137                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2138                                  ;DEVICELIST	equ 273h
  2139                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2140                                  ;MEMORYSIZE	equ 292h	
  2141                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2142                                  ;DEFAULTDRIVE	equ 296h
  2143                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2144                                  ;;currentdoslocation equ 271h
  2145                                  ;CURRENTDOSLOCATION equ 271h
  2146                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2147                                  ;SYSINITSTART	equ 267h
  2148                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2149                                  ; 18/10/2022
  2150                                  ;toomanydrivesflag equ 3FFh 
  2151                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2152                                  
  2153                                  ; ----------------------------------------------------------------------------
  2154                                  
  2155 000008EB FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2156                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2157                                  					; (procedure in	SYSINIT	segment)
  2158                                  ; 17/10/2022
  2159 000008ED [160A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2160 000008EF 3304                    		dw SYSINITSEG	
  2161                                  
  2162                                  ;SR;
  2163                                  ; A communication block has been setup between the DOS and the BIOS. All
  2164                                  ;the data starting from SysinitPresent will be part of the data block. 
  2165                                  ;Right now, this is the only data being communicated. It can be expanded 
  2166                                  ;later to add more stuff
  2167                                  
  2168 000008F1 00                      SysinitPresent:	db 0			
  2169 000008F2 0000                    endfloppy:	db 0, 0
  2170                                  
  2171                                  ; ----------------------------------------------------------------------------			
  2172                                  
  2173                                  ; Bios_Data ends
  2174                                  	
  2175                                  ; Possibly disposable BIOS data
  2176                                  ; This data follows the	regular	BIOS data,
  2177                                  ; and is part of the same group.
  2178                                  
  2179 000008F4 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2179 000008FD 202000             
  2180                                  					; null volume id
  2181 00000900 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2181 00000909 202000             
  2182                                  					; vid scratch buffer
  2183 0000090C 80                      harddrv:	db 80h			
  2184                                  
  2185                                  end96tpi:
  2186                                  
  2187                                  ;;*********************************************************************
  2188                                  ;;memory allocation for bdss
  2189                                  ;;*********************************************************************
  2190                                  ;
  2191                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2192                                  ;
  2193                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2194                                  ;
  2195                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2196                                  
  2197 0000090D FFFF                    bdss:		dw 0FFFFh		
  2198 0000090F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000918 0210000000F8       
  2199 0000091E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000927 000000000000000003 
  2200 00000930 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 00000939 00000000000000     
  2201 00000940 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 00000949 000000000000000000 
  2202 00000952 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 0000095B 4E414D45           
  2203 0000095F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 00000968 46415431           
  2204 0000096C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 00000971 FFFF                    		dw 0FFFFh
  2206 00000973 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 0000097C 0210000000F8       
  2207 00000982 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 0000098B 000000000000000003 
  2208 00000994 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 0000099D 00000000000000     
  2209 000009A4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 000009AD 000000000000000000 
  2210 000009B6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 000009BF 4E414D45           
  2211 000009C3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 000009CC 46415431           
  2212 000009D0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 000009D5 FFFF                    		dw 0FFFFh
  2214 000009D7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 000009E0 0210000000F8       
  2215 000009E6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 000009EF 000000000000000003 
  2216 000009F8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A01 00000000000000     
  2217 00000A08 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A11 000000000000000000 
  2218 00000A1A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A23 4E414D45           
  2219 00000A27 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A30 46415431           
  2220 00000A34 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000A39 FFFF                    		dw 0FFFFh
  2222 00000A3B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000A44 0210000000F8       
  2223 00000A4A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000A53 000000000000000003 
  2224 00000A5C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000A65 00000000000000     
  2225 00000A6C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000A75 000000000000000000 
  2226 00000A7E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000A87 4E414D45           
  2227 00000A8B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000A94 46415431           
  2228 00000A98 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000A9D FFFF                    		dw 0FFFFh
  2230 00000A9F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000AA8 0210000000F8       
  2231 00000AAE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000AB7 000000000000000003 
  2232 00000AC0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000AC9 00000000000000     
  2233 00000AD0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000AD9 000000000000000000 
  2234 00000AE2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000AEB 4E414D45           
  2235 00000AEF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000AF8 46415431           
  2236 00000AFC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B01 FFFF                    		dw 0FFFFh
  2238 00000B03 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B0C 0210000000F8       
  2239 00000B12 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B1B 000000000000000003 
  2240 00000B24 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B2D 00000000000000     
  2241 00000B34 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000B3D 000000000000000000 
  2242 00000B46 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000B4F 4E414D45           
  2243 00000B53 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000B5C 46415431           
  2244 00000B60 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000B65 FFFF                    		dw 0FFFFh
  2246 00000B67 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000B70 0210000000F8       
  2247 00000B76 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000B7F 000000000000000003 
  2248 00000B88 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000B91 00000000000000     
  2249 00000B98 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000BA1 000000000000000000 
  2250 00000BAA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000BB3 4E414D45           
  2251 00000BB7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000BC0 46415431           
  2252 00000BC4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000BC9 FFFF                    		dw 0FFFFh
  2254 00000BCB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000BD4 0210000000F8       
  2255 00000BDA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000BE3 000000000000000003 
  2256 00000BEC 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000BF5 00000000000000     
  2257 00000BFC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C05 000000000000000000 
  2258 00000C0E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C17 4E414D45           
  2259 00000C1B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C24 46415431           
  2260 00000C28 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C2D FFFF                    		dw 0FFFFh
  2262 00000C2F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000C38 0210000000F8       
  2263 00000C3E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000C47 000000000000000003 
  2264 00000C50 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000C59 00000000000000     
  2265 00000C60 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000C69 000000000000000000 
  2266 00000C72 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000C7B 4E414D45           
  2267 00000C7F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000C88 46415431           
  2268 00000C8C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000C91 FFFF                    		dw 0FFFFh
  2270 00000C93 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000C9C 0210000000F8       
  2271 00000CA2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000CAB 000000000000000003 
  2272 00000CB4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000CBD 00000000000000     
  2273 00000CC4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000CCD 000000000000000000 
  2274 00000CD6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000CDF 4E414D45           
  2275 00000CE3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000CEC 46415431           
  2276 00000CF0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000CF5 FFFF                    		dw 0FFFFh
  2278 00000CF7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D00 0210000000F8       
  2279 00000D06 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D0F 000000000000000003 
  2280 00000D18 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D21 00000000000000     
  2281 00000D28 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D31 000000000000000000 
  2282 00000D3A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000D43 4E414D45           
  2283 00000D47 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000D50 46415431           
  2284 00000D54 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000D59 FFFF                    		dw 0FFFFh
  2286 00000D5B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000D64 0210000000F8       
  2287 00000D6A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000D73 000000000000000003 
  2288 00000D7C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000D85 00000000000000     
  2289 00000D8C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000D95 000000000000000000 
  2290 00000D9E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000DA7 4E414D45           
  2291 00000DAB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000DB4 46415431           
  2292 00000DB8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000DBD FFFF                    		dw 0FFFFh
  2294 00000DBF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000DC8 0210000000F8       
  2295 00000DCE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000DD7 000000000000000003 
  2296 00000DE0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000DE9 00000000000000     
  2297 00000DF0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000DF9 000000000000000000 
  2298 00000E02 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E0B 4E414D45           
  2299 00000E0F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E18 46415431           
  2300 00000E1C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E21 FFFF                    		dw 0FFFFh
  2302 00000E23 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E2C 0210000000F8       
  2303 00000E32 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000E3B 000000000000000003 
  2304 00000E44 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000E4D 00000000000000     
  2305 00000E54 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000E5D 000000000000000000 
  2306 00000E66 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000E6F 4E414D45           
  2307 00000E73 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000E7C 46415431           
  2308 00000E80 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000E85 FFFF                    		dw 0FFFFh
  2310 00000E87 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000E90 0210000000F8       
  2311 00000E96 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000E9F 000000000000000003 
  2312 00000EA8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000EB1 00000000000000     
  2313 00000EB8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000EC1 000000000000000000 
  2314 00000ECA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000ED3 4E414D45           
  2315 00000ED7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000EE0 46415431           
  2316 00000EE4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000EE9 FFFF                    		dw 0FFFFh
  2318 00000EEB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000EF4 0210000000F8       
  2319 00000EFA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F03 000000000000000003 
  2320 00000F0C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F15 00000000000000     
  2321 00000F1C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F25 000000000000000000 
  2322 00000F2E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000F37 4E414D45           
  2323 00000F3B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000F44 46415431           
  2324 00000F48 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000F4D FFFF                    		dw 0FFFFh
  2326 00000F4F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000F58 0210000000F8       
  2327 00000F5E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000F67 000000000000000003 
  2328 00000F70 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000F79 00000000000000     
  2329 00000F80 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000F89 000000000000000000 
  2330 00000F92 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00000F9B 4E414D45           
  2331 00000F9F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00000FA8 46415431           
  2332 00000FAC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 00000FB1 FFFF                    		dw 0FFFFh
  2334 00000FB3 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 00000FBC 0210000000F8       
  2335 00000FC2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00000FCB 000000000000000003 
  2336 00000FD4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 00000FDD 00000000000000     
  2337 00000FE4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 00000FED 000000000000000000 
  2338 00000FF6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 00000FFF 4E414D45           
  2339 00001003 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000100C 46415431           
  2340 00001010 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001015 FFFF                    		dw 0FFFFh
  2342 00001017 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 00001020 0210000000F8       
  2343 00001026 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000102F 000000000000000003 
  2344 00001038 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 00001041 00000000000000     
  2345 00001048 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 00001051 000000000000000000 
  2346 0000105A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 00001063 4E414D45           
  2347 00001067 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 00001070 46415431           
  2348 00001074 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 00001079 FFFF                    		dw 0FFFFh
  2350 0000107B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 00001084 0210000000F8       
  2351 0000108A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001093 000000000000000003 
  2352 0000109C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 000010A5 00000000000000     
  2353 000010AC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 000010B5 000000000000000000 
  2354 000010BE 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 000010C7 4E414D45           
  2355 000010CB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 000010D4 46415431           
  2356 000010D8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 000010DD FFFF                    		dw 0FFFFh
  2358 000010DF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 000010E8 0210000000F8       
  2359 000010EE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 000010F7 000000000000000003 
  2360 00001100 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001109 00000000000000     
  2361 00001110 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001119 000000000000000000 
  2362 00001122 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 0000112B 4E414D45           
  2363 0000112F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 00001138 46415431           
  2364 0000113C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 00001141 FFFF                    		dw 0FFFFh
  2366 00001143 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 0000114C 0210000000F8       
  2367 00001152 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 0000115B 000000000000000003 
  2368 00001164 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 0000116D 00000000000000     
  2369 00001174 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 0000117D 000000000000000000 
  2370 00001186 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 0000118F 4E414D45           
  2371 00001193 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000119C 46415431           
  2372 000011A0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 000011A5 FFFF                    		dw 0FFFFh
  2374 000011A7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 000011B0 0210000000F8       
  2375 000011B6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 000011BF 000000000000000003 
  2376 000011C8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 000011D1 00000000000000     
  2377 000011D8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 000011E1 000000000000000000 
  2378 000011EA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 000011F3 4E414D45           
  2379 000011F7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 00001200 46415431           
  2380 00001204 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001209 FFFF                    		dw 0FFFFh
  2382 0000120B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001214 0210000000F8       
  2383 0000121A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001223 000000000000000003 
  2384 0000122C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 00001235 00000000000000     
  2385 0000123C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 00001245 000000000000000000 
  2386 0000124E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 00001257 4E414D45           
  2387 0000125B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 00001264 46415431           
  2388 00001268 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 0000126D FFFF                    		dw 0FFFFh
  2390 0000126F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2390 00001278 0210000000F8       
  2391 0000127E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2391 00001287 000000000000000003 
  2392 00001290 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2392 00001299 00000000000000     
  2393 000012A0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2393 000012A9 000000000000000000 
  2394 000012B2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2394 000012BB 4E414D45           
  2395 000012BF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2395 000012C8 46415431           
  2396 000012CC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2397 000012D1 00                      		db 0
  2398                                  
  2399                                  ;---------------------------------------------------------------------------
  2400                                  ; Possibly disposable data, goes at end of data group
  2401                                  ;***************************************************************************
  2402                                  
  2403                                  ; Possibly disposable data, goes at end of data group
  2404                                  
  2405                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2406                                  ;
  2407                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2408                                  ;		(dl) = drive number (80h or 81h).
  2409                                  ;		(dh) = head number.
  2410                                  ;		(ch) = cylinder number.
  2411                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2412                                  ;		(al) = number of sectors.
  2413                                  ;		(es:bx) = address of read buffer.
  2414                                  ;		for more on register contents see rom bios listing.
  2415                                  ;		stack set up for return by an iret.
  2416                                  ;
  2417                                  ;	exit:	(ah) = status of current operation.
  2418                                  ;		(cy) = 1 if failed, 0 if successful.
  2419                                  ;		for other register contents see rom bios listing.
  2420                                  ;
  2421                                  ;	uses:	
  2422                                  ;
  2423                                  ;
  2424                                  ;	warning: uses old13 vector for non-read calls.
  2425                                  ;		does direct calls to the at rom.
  2426                                  ;		does segment arithmatic.
  2427                                  ;
  2428                                  ;	effects: performs disk i/o operation.
  2429                                  
  2430                                  ; 16/10/2022
  2431                                  ; 28/05/2019
  2432                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2433                                  
  2434                                  ;* offsets into cmd_block for registers
  2435                                  
  2436                                  pre_comp equ 0	;write pre-compensation
  2437                                  sec_cnt	 equ 1	;sector count
  2438                                  sec_num	 equ 2	;sector number
  2439                                  cyl_low	 equ 3	;cylinder number, low part
  2440                                  cyl_high equ 4	;cylinder number, high part
  2441                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2442                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2443                                  cmd_reg  equ 6	;command register
  2444                                  
  2445                                  ; 01/10/2022
  2446                                  disk_status1	equ 74h
  2447                                  hf_num		equ 75h
  2448                                  control_byte	equ 76h
  2449                                  
  2450                                  ibm_disk_io:				
  2451 000012D2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2452 000012D5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2453 000012D7 80FC02                  		cmp	ah, 2
  2454 000012DA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2455 000012DC 80FC0A                  		cmp	ah, 0Ah
  2456 000012DF 7405                    		jz	short atd2	; and call 0Ah (read long).
  2457                                  atd1:
  2458 000012E1 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2459                                  		;jmp	cs:Old13	; use rom int 13h handler
  2460                                  ;-----------------------------------------------------------------------------
  2461                                  
  2462                                  atd2:					
  2463 000012E6 53                      		push	bx
  2464 000012E7 51                      		push	cx
  2465 000012E8 52                      		push	dx
  2466 000012E9 57                      		push	di
  2467 000012EA 1E                      		push	ds
  2468 000012EB 06                      		push	es
  2469 000012EC 50                      		push	ax
  2470 000012ED B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2471                                  					; establish bios segment addressing
  2472 000012F0 8ED8                    		mov	ds, ax
  2473                                  		; 16/10/2022
  2474 000012F2 C606740000              		mov	byte [disk_status1], 0
  2475                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2476                                  					; initially no error code.
  2477 000012F7 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2478 000012FA 3A167500                		cmp	dl, [hf_num]
  2479                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2480 000012FE 7207                    		jb	short atd3	; disk number in range
  2481                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2482 00001300 C606740001              		mov	byte [disk_status1], 1
  2483 00001305 EB20                    		jmp	short atd4	; disk number out of range error,
  2484                                  					; return
  2485                                  ; ----------------------------------------------------------------------------
  2486                                  
  2487                                  atd3:					
  2488 00001307 53                      		push	bx
  2489 00001308 8CC0                    		mov	ax, es
  2490 0000130A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2491 0000130D 01D8                    		add	ax, bx
  2492 0000130F 8EC0                    		mov	es, ax
  2493 00001311 5B                      		pop	bx
  2494 00001312 83E30F                  		and	bx, 0Fh
  2495 00001315 0E                      		push	cs
  2496 00001316 E8DF00                  		call	check_dma
  2497 00001319 720C                    		jb	short atd4	; abort if dma across segment boundary
  2498 0000131B 58                      		pop	ax
  2499 0000131C 50                      		push	ax
  2500 0000131D E81A00                  		call	setcmd		; set up command block for disk op
  2501 00001320 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2502 00001323 EE                      		out	dx, al		; write out command modifier
  2503 00001324 E86B00                  		call	docmd		; carry out command
  2504                                  ; ----------------------------------------------------------------------------
  2505                                  
  2506                                  atd4:	
  2507                                  
  2508                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2509                                  ;	      and save a couple bytes while were at it.
  2510                                  				
  2511 00001327 58                      		pop	ax
  2512                                  		;mov	ah, ds:74h	; [disk_status1]
  2513 00001328 8A267400                		mov	ah, [disk_status1]
  2514 0000132C 08E4                    		or	ah, ah
  2515 0000132E 7401                    		jz	short atd5
  2516 00001330 F9                      		stc
  2517                                  atd5:					
  2518 00001331 07                      		pop	es
  2519 00001332 1F                      		pop	ds
  2520 00001333 5F                      		pop	di
  2521 00001334 5A                      		pop	dx
  2522 00001335 59                      		pop	cx
  2523 00001336 5B                      		pop	bx
  2524 00001337 CA0200                  		retf	2		; far return, dropping flags
  2525                                  
  2526                                  ; =============== S U B	R O U T	I N E ========================================
  2527                                  
  2528                                  ;***	setcmd - set up cmd_block for the disk operation
  2529                                  ;
  2530                                  ;	entry:	(ds) = bios data segment.
  2531                                  ;		(es:bx) in seg:000x form.
  2532                                  ;		other registers as in int 13h call
  2533                                  ;	
  2534                                  ;	exit:	cmd_block set up for disk read call.
  2535                                  ;		control_byte set up for disk operation.
  2536                                  ;		(al) = control byte modifier
  2537                                  ;
  2538                                  ;	sets the fields of cmd_block using the register contents
  2539                                  ;	and the contents of the disk parameter block for the given drive.
  2540                                  ;
  2541                                  ;	warning: (ax) destroyed.
  2542                                  ;		does direct calls to the at rom.
  2543                                  
  2544                                  setcmd:		; proc near		
  2545                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2546                                  		; 16/10/2022
  2547 0000133A A24300                  		mov	[cmd_block+sec_cnt], al
  2548                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2549 0000133D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2550 00001342 80FC02                  		cmp	ah, 2
  2551 00001345 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2552 00001347 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2553                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2554                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2555                                  setc1:					
  2556 0000134C 88C8                    		mov	al, cl
  2557 0000134E 243F                    		and	al, 3Fh		; mask sector number
  2558                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2559                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2560 00001350 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2561 00001353 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2562 00001357 88C8                    		mov	al, cl
  2563 00001359 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2564                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2565 0000135C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2566 0000135F 89D0                    		mov	ax, dx
  2567 00001361 C0E004                  		shl	al, 4		; drive	number
  2568 00001364 80E40F                  		and	ah, 0Fh
  2569 00001367 08E0                    		or	al, ah		; head number
  2570 00001369 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2571                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2572 0000136B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2573 0000136E 06                      		push	es
  2574 0000136F 53                      		push	bx
  2575 00001370 0E                      		push	cs
  2576 00001371 E85C00                  		call	get_vec
  2577 00001374 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2578                                  			 		; write pre-comp from disk parameters
  2579 00001378 C1E802                  		shr	ax, 2
  2580                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2581 0000137B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2582                                  					; only use low part
  2583 0000137E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2584                                  					; control byte modifier
  2585 00001382 5B                      		pop	bx
  2586 00001383 07                      		pop	es
  2587                                  		;mov	ah, ds:76h	; [control_byte]
  2588 00001384 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2589 00001388 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2590 0000138B 08C4                    		or	ah, al
  2591                                  		;mov	ds:76h,	ah
  2592 0000138D 88267600                		mov	[control_byte], ah ; mov [76h],al
  2593 00001391 C3                      		retn
  2594                                  
  2595                                  ; =============== S U B	R O U T	I N E ========================================
  2596                                  
  2597                                  ;***	docmd - carry out read operation to at hard disk
  2598                                  ;
  2599                                  ;	entry:	(es:bx) = address for read in data.
  2600                                  ;		cmd_block set up for disk read.
  2601                                  ;
  2602                                  ;	exit:	buffer at (es:bx) contains data read.
  2603                                  ;		disk_status1 set to error code (0 if success).
  2604                                  ;
  2605                                  ;	
  2606                                  ;
  2607                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2608                                  ;		no check is made for dma boundary overrun.
  2609                                  ;
  2610                                  ;	effects: programs disk controller.
  2611                                  ;		performs disk input.
  2612                                  
  2613                                  docmd:		; proc near		
  2614 00001392 89DF                    		mov	di, bx
  2615 00001394 0E                      		push	cs
  2616 00001395 E84000                  		call	command
  2617 00001398 7535                    		jnz	short doc3
  2618                                  doc1:					
  2619 0000139A 0E                      		push	cs
  2620 0000139B E84200                  		call	waitt		; wait for controller to complete read
  2621 0000139E 752F                    		jnz	short doc3
  2622 000013A0 B90001                  		mov	cx, 256		; 256 words per sector
  2623 000013A3 BAF001                  		mov	dx, 1F0h	; hf_port
  2624 000013A6 FC                      		cld			; string op goes up
  2625 000013A7 FA                      		cli			; disable interrupts
  2626                                  					; (bug was forgetting this)
  2627                                  
  2628                                  ;	M062 -- some of these old machines have intermittent failures
  2629                                  ;		when the read is done at full speed. Instead of using
  2630                                  ;		a string rep instruction, we'll use a loop. There is
  2631                                  ;		a slight performance hit, but it only affects these
  2632                                  ;		very old machines with an exact date code match, and
  2633                                  ;		it makes said machines more reliable
  2634                                  ;
  2635                                  ;M062	repz	insw		;read in sector
  2636                                  
  2637                                  rsct_loop:				
  2638 000013A8 6D                      		insw
  2639 000013A9 E2FD                    		loop	rsct_loop
  2640 000013AB FB                      		sti
  2641                                  		; 16/10/2022
  2642 000013AC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2643                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2644                                  					; (ds =	40h)
  2645 000013B1 7410                    		jz	short doc2	; no ecc bytes to read.
  2646 000013B3 0E                      		push	cs
  2647 000013B4 E83100                  		call	wait_drq	; wait for controller to complete read
  2648 000013B7 7216                    		jb	short doc3
  2649 000013B9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2650 000013BC BAF001                  		mov	dx, 1F0h	; hf_port
  2651 000013BF FA                      		cli
  2652 000013C0 F36C                    		rep insb		; read in ecc
  2653 000013C2 FB                      		sti
  2654                                  doc2:					
  2655 000013C3 0E                      		push	cs
  2656 000013C4 E82900                  		call	check_status
  2657 000013C7 7506                    		jnz	short doc3	; operation failed
  2658                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2659 000013C9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2660 000013CD 75CB                    		jnz	short doc1	; loop while more sectors to read
  2661                                  doc3:					
  2662 000013CF C3                      		retn
  2663                                  
  2664                                  ; =============== S U B	R O U T	I N E ========================================
  2665                                  
  2666                                  ;***	define where the rom routines are actually located
  2667                                  ;	   in the buggy old AT BIOS that we might need to
  2668                                  ;	   install a special level of int13 handler for
  2669                                  
  2670                                  ; 16/10/2022
  2671                                  
  2672                                  romsegment 	equ 0F000h  ; segment
  2673                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2674                                  romwait		equ 2E7Fh   ; offset in romsegment
  2675                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2676                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2677                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2678                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2679                                  romfret		equ 0FF65h  ; far return in rom	
  2680                                  
  2681                                  ;***	get_vec - get pointer to hard disk parameters.
  2682                                  ;
  2683                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2684                                  ;
  2685                                  ;	exit:	(es:bx) = address of disk parameters table.
  2686                                  ;
  2687                                  ;	uses:	ax for segment computation.
  2688                                  ;
  2689                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2690                                  ;	or 70h (disk 1).
  2691                                  ;	
  2692                                  ;	warning: (ax) destroyed.
  2693                                  ;		this does a direct call to the at rom.
  2694                                  
  2695                                  get_vec:	; proc near		
  2696                                  		;push	0FF65h		; romfret ; far	return in rom
  2697                                  		;jmp	far ptr	0F000h:2F8Eh
  2698                                  		; 16/10/2022
  2699 000013D0 6865FF                  		push	romfret		; far return in rom
  2700 000013D3 EA8E2F00F0              		jmp	romsegment:romget_vec
  2701                                  
  2702                                  ; =============== S U B	R O U T	I N E ========================================
  2703                                  
  2704                                  ;***	command - send contents of cmd_block to disk controller.
  2705                                  ;
  2706                                  ;	entry:	control_byte 
  2707                                  ;		cmd_block - set up with values for hard disk controller.
  2708                                  ;
  2709                                  ;	exit:	disk_status1 = error code.
  2710                                  ;		nz if error, zr for no error.
  2711                                  ;
  2712                                  ;
  2713                                  ;	warning: (ax), (cx), (dx) destroyed.
  2714                                  ;		does a direct call to the at rom.
  2715                                  ;
  2716                                  ;	effects: programs disk controller.
  2717                                  
  2718                                  command:	; proc near		
  2719                                  		;push	0FF65h		; romfret ; far	return in rom
  2720                                  		;jmp	far ptr	0F000h:2E1Eh
  2721                                  		; 16/10/2022
  2722 000013D8 6865FF                  		push	romfret		; far return in rom
  2723 000013DB EA1E2E00F0              		jmp	romsegment:romcommand
  2724                                  
  2725                                  ; =============== S U B	R O U T	I N E ========================================
  2726                                  
  2727                                  ;***	waitt - wait for disk interrupt
  2728                                  ;
  2729                                  ;	entry:	nothing.
  2730                                  ;
  2731                                  ;	exit:	disk_status1 = error code.
  2732                                  ;		nz if error, zr if no error.
  2733                                  ;
  2734                                  ;
  2735                                  ;	warning: (ax), (bl), (cx) destroyed.
  2736                                  ;		does a direct call to the at rom.
  2737                                  ;		
  2738                                  ;	effects: calls int 15h, function 9000h.
  2739                                  
  2740                                  waitt:		; proc near		
  2741                                  		;push	0FF65h		; romfret ; far	return in rom
  2742                                  		;jmp	far ptr	0F000h:2E7Fh
  2743                                  		; 16/10/2022
  2744 000013E0 6865FF                  		push	romfret		; far return in rom
  2745 000013E3 EA7F2E00F0              		jmp	romsegment:romwait
  2746                                  
  2747                                  ; =============== S U B	R O U T	I N E ========================================
  2748                                  
  2749                                  ;***	wait_drq - wait for data request.
  2750                                  ;
  2751                                  ;	entry:	nothing.
  2752                                  ;
  2753                                  ;	exit:	disk_status1 = error code.
  2754                                  ;		cy if error, nc if no error.
  2755                                  ;
  2756                                  ;	warning: (al), (cx), (dx) destroyed.
  2757                                  ;		does a direct call to the at rom.
  2758                                  
  2759                                  wait_drq:	; proc near		
  2760                                  		;push	0FF65h		; romfret ; far	return in rom
  2761                                  		;jmp	far ptr	0F000h:2EE2h
  2762                                  		; 16/10/2022
  2763 000013E8 6865FF                  		push	romfret		; far return in rom
  2764 000013EB EAE22E00F0              		jmp	romsegment:romwait_drq
  2765                                  
  2766                                  ; =============== S U B	R O U T	I N E ========================================
  2767                                  
  2768                                  ;***	check_status - check hard disk status.
  2769                                  ;
  2770                                  ;	entry:	nothing.
  2771                                  ;
  2772                                  ;	exit:	disk_status1 = error code.
  2773                                  ;		nz if error, zr if no error.
  2774                                  ;
  2775                                  ;	warning: (ax), (cx), (dx) destroyed.
  2776                                  ;		does a direct call to the at rom.
  2777                                  
  2778                                  check_status:	; proc near		
  2779                                  		;push	0FF65h		; romfret ; far	return in rom
  2780                                  		;jmp	far ptr	0F000h:2EF8h
  2781                                  		; 16/10/2022
  2782 000013F0 6865FF                  		push	romfret		; far return in rom
  2783 000013F3 EAF82E00F0              		jmp	romsegment:romcheck_status
  2784                                  
  2785                                  ; =============== S U B	R O U T	I N E ========================================
  2786                                  
  2787                                  ;***	check_dma - check for dma overrun 64k segment.
  2788                                  ;
  2789                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2790                                  ;		cmd_block set up for operation.
  2791                                  ;
  2792                                  ;	exit:	disk_status1 - error code.
  2793                                  ;		cy if error, nc if no error.
  2794                                  ;
  2795                                  ;	warning: does a direct call to the at rom.
  2796                                  
  2797                                  check_dma:	; proc near		
  2798                                  		;push	0FF65h		; romfret ; far	return in rom
  2799                                  		;jmp	far ptr	0F000h:2F69h
  2800                                  		; 16/10/2022
  2801 000013F8 6865FF                  		push	romfret		; far return in rom
  2802 000013FB EA692F00F0              		jmp	romsegment:romcheck_dma
  2803                                  
  2804                                  ;-----------------------------------------------------------------------------
  2805                                  
  2806                                  endatrom:
  2807                                  
  2808                                  ; ----------------------------------------------------------------------------
  2809                                  
  2810                                  ;; M015 -- begin changes
  2811                                  ;;
  2812                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2813                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2814                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2815                                  ;; If our init code detects this error, it will install this
  2816                                  ;; special Int13 hook through the same mechanism that was set
  2817                                  ;; up for the IBM patch above. This code is also dynamically
  2818                                  ;; relocated by MSINIT.
  2819                                  
  2820                                  compaq_disk_io:
  2821 00001400 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2822                                  					;
  2823                                  					; the following	label defines the end of the at	rom patch.
  2824                                  					; this is used at configuration	time.
  2825                                  					;
  2826                                  					; warning!!!
  2827                                  					; this code will be dynamically	relocated by msinit
  2828 00001403 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2829                                  no_hookit:				
  2830                                  		;jmp	cs:Old13
  2831                                  		; 16/10/2022
  2832 00001405 2EFF2E[0601]            		jmp	far [cs:Old13]
  2833                                  
  2834                                  ; ----------------------------------------------------------------------------
  2835                                  
  2836                                  mebbe_hookit:				
  2837 0000140A 80FA80                  		cmp	dl, 80h
  2838 0000140D 72F6                    		jb	short no_hookit
  2839 0000140F 1E                      		push	ds
  2840 00001410 50                      		push	ax
  2841 00001411 B84000                  		mov	ax, 40h
  2842 00001414 8ED8                    		mov	ds, ax
  2843 00001416 58                      		pop	ax
  2844 00001417 9C                      		pushf
  2845                                  		;call	cs:Old13
  2846                                  		; 16/10/2022
  2847 00001418 2EFF1E[0601]            		call	far [cs:Old13]
  2848 0000141D 1F                      		pop	ds
  2849 0000141E CA0200                  		retf	2
  2850                                  
  2851                                  ; ----------------------------------------------------------------------------
  2852                                  
  2853 00001421 00                      end_compaq_i13hook: db 0			
  2854                                  
  2855                                  ; =============== S U B	R O U T	I N E ========================================
  2856                                  
  2857                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2858                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2859                                  
  2860                                  daycnt_to_day:	; proc far
  2861                                  
  2862                                  ; entry: [daycnt] = number of days since 1-1-80
  2863                                  ;
  2864                                  ; return: ch - century in bcd
  2865                                  ;	  cl - year in bcd
  2866                                  ;	  dh - month in bcd
  2867                                  ;	  dl - day in bcd
  2868                                  
  2869                                  		; 16/10/2022		
  2870 00001422 2EFF36[E904]            		push	word [cs:daycnt] ; save daycnt
  2871 00001427 2E813E[E904]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2872                                  					; # days from 1-1-1980 to 1-1-2000
  2873 0000142E 730E                    		jnb	short century20
  2874 00001430 2EC606[ED04]13          		mov	byte [cs:base_century], 19
  2875 00001436 2EC606[EE04]50          		mov	byte [cs:base_year], 80
  2876 0000143C EB13                    		jmp	short years
  2877                                  ; ----------------------------------------------------------------------------
  2878                                  		
  2879                                  century20:				
  2880 0000143E 2EC606[ED04]14          		mov	byte [cs:base_century], 20
  2881 00001444 2EC606[EE04]00          		mov	byte [cs:base_year], 0
  2882 0000144A 2E812E[E904]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2883                                  					; adjust daycnt
  2884                                  years:					
  2885 00001451 31D2                    		xor	dx, dx
  2886 00001453 2EA1[E904]              		mov	ax, [cs:daycnt]
  2887 00001457 BBB505                  		mov	bx, 1461	; (366+365*3)
  2888                                  					; # of days in a Leap year block
  2889 0000145A F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2890 0000145C 2E8916[E904]            		mov	[cs:daycnt], dx	; save daycnt left
  2891 00001461 B304                    		mov	bl, 4
  2892 00001463 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2893 00001465 2E0006[EE04]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2894 0000146A 2EFF06[E904]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2895 0000146F 2E813E[E904]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2896 00001476 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2897 00001478 2EFE06[EE04]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2898 0000147D 2E812E[E904]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2899 00001484 B90300                  		mov	cx, 3		; And next three years are normal
  2900                                  regularyear:				
  2901 00001487 2E813E[E904]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2902 0000148E 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2903 00001490 2EFE06[EE04]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2904 00001495 2E812E[E904]6D01        		sub	word [cs:daycnt], 365	;   }
  2905 0000149C E2E9                    		loop	regularyear	; }
  2906                                  					;
  2907                                  					; should never fall through loop
  2908                                  leapyear:				
  2909 0000149E 2EC606[F004]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2910                                  					; change month table.
  2911                                  yeardone:				
  2912 000014A4 31DB                    		xor	bx, bx
  2913 000014A6 31D2                    		xor	dx, dx
  2914 000014A8 2EA1[E904]              		mov	ax, [cs:daycnt]
  2915                                  		;mov	si, offset month_tab
  2916 000014AC BE[EF04]                		mov	si, month_tab	; 19/10/2022
  2917 000014AF B90C00                  		mov	cx, 12
  2918                                  months:					
  2919 000014B2 FEC3                    		inc	bl
  2920                                  
  2921                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2922                                  		;mov	dl, [cs:si]
  2923                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2924                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2925                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2926                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2927                                  		
  2928 000014B4 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2929 000014B6 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2930                                  					; dh=0
  2931 000014B8 7605                    		jbe	short month_done
  2932 000014BA 46                      		inc	si		; next month
  2933 000014BB 29D0                    		sub	ax, dx		; adjust daycnt
  2934 000014BD E2F3                    		loop	months		;
  2935                                  					; should never fall through loop
  2936                                  month_done:				
  2937 000014BF 2EC606[F004]1C          		mov	byte [cs:month_tab+1], 28
  2938                                  					; restore month table value
  2939 000014C5 88DA                    		mov	dl, bl
  2940 000014C7 2E8A36[EE04]            		mov	dh, [cs:base_year]
  2941 000014CC 2E8A0E[ED04]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2942 000014D1 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2943                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2944                                  					; dl = bcd day,	al = month
  2945 000014D6 86D0                    		xchg	dl, al
  2946 000014D8 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2947                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2948 000014DD 86F0                    		xchg	dh, al
  2949 000014DF 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2950                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2951 000014E4 86C8                    		xchg	cl, al
  2952 000014E6 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2953                                  		;call	cs:bintobcd	; ch = bcd century
  2954 000014EB 88C5                    		mov	ch, al
  2955 000014ED 2E8F06[E904]            		pop	word [cs:daycnt] ; restore original value
  2956 000014F2 CB                      		retf
  2957                                  
  2958                                  enddaycnttoday:	
  2959                                  
  2960                                  ; =============== S U B	R O U T	I N E ========================================
  2961                                  
  2962                                  bin_to_bcd:	; proc far		; real time clock support
  2963                                  
  2964                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2965                                  ;into a bcd value in al. ah destroyed.	
  2966                                  		
  2967 000014F3 51                      		push	cx		
  2968 000014F4 D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2969 000014F6 B104                    		mov	cl, 4
  2970 000014F8 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2971 000014FA 08E0                    		or	al, ah
  2972 000014FC 59                      		pop	cx
  2973 000014FD CB                      		retf
  2974                                  
  2975                                  ; ----------------------------------------------------------------------------
  2976                                  
  2977                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2978                                  ; resume facility. the system clock needs to be reset after resume.
  2979                                  
  2980                                  ; the following routine is executed at resume time when the system
  2981                                  ; powered on after suspension. it reads the real time clock and
  2982                                  ; resets the system time and date, and then irets.
  2983                                  
  2984                                  ; warning!!! this code will be dynamically relocated by msinit.
  2985                                  
  2986                                  int6c:					
  2987 000014FE 0E                      		push	cs
  2988 000014FF 1F                      		pop	ds
  2989 00001500 8F06[B206]              		pop	word [int6c_ret_addr]	; pop off return address
  2990 00001504 8F06[B406]              		pop	word [int6c_ret_addr+2]
  2991 00001508 9D                      		popf
  2992 00001509 E81300                  		call	read_real_date	; get the date from the clock
  2993 0000150C FA                      		cli
  2994 0000150D 8936[E904]              		mov	[daycnt], si	; update dos copy of date
  2995 00001511 FB                      		sti
  2996 00001512 E8CB00                  		call	read_real_time	; get the time from the	rtc
  2997 00001515 FA                      		cli
  2998 00001516 B401                    		mov	ah, 1
  2999 00001518 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3000                                  					; CX:DX	= clock	count
  3001                                  					; Return: time of day set
  3002 0000151A FB                      		sti
  3003                                  		;jmp	int6c_ret_addr	; long jump
  3004                                  		; 16/10/2022
  3005 0000151B FF2E[B206]              		jmp	far [int6c_ret_addr] ; long jump
  3006                                  
  3007                                  ; =============== S U B	R O U T	I N E ========================================
  3008                                  
  3009                                  ;   read_real_date reads real-time clock for date and returns the number
  3010                                  ;   of days elapsed since 1-1-80 in si
  3011                                  
  3012                                  read_real_date:	; proc near		
  3013 0000151F 50                      		push	ax
  3014 00001520 51                      		push	cx
  3015 00001521 52                      		push	dx
  3016 00001522 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3017 00001524 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3018                                  					; Return: CX:DX	= clock	count
  3019                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3020                                  					; midnight
  3021                                  					; Otherwise, AL	> 0
  3022 00001526 5A                      		pop	dx
  3023 00001527 59                      		pop	cx
  3024 00001528 58                      		pop	ax
  3025 00001529 50                      		push	ax
  3026 0000152A 53                      		push	bx
  3027 0000152B 51                      		push	cx
  3028 0000152C 52                      		push	dx
  3029 0000152D 2EC706[D206]0100        		mov	word [cs:daycnt2], 1
  3030                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3031 00001534 B404                    		mov	ah, 4
  3032 00001536 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3033                                  					; Return: DL = day in BCD
  3034                                  					; DH = month in	BCD
  3035                                  					; CL = year in BCD
  3036                                  					; CH = century (19h or 20h)
  3037 00001538 7303                    		jnb	short read_ok
  3038 0000153A E99300                  		jmp	r_d_ret
  3039                                  ;-----------------------------------------------------------------------------
  3040                                  
  3041                                  read_ok:				
  3042 0000153D 882E[B606]              		mov	[bin_date_time], ch
  3043 00001541 880E[B706]              		mov	[bin_date_time+1], cl
  3044 00001545 8836[B806]              		mov	[bin_date_time+2], dh
  3045 00001549 8816[B906]              		mov	[bin_date_time+3], dl
  3046 0000154D 2EC706[D206]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3047 00001554 E84201                  		call	bcd_verify	; verify bcd values in range
  3048 00001557 7277                    		jb	short r_d_ret	;  some	value out of range
  3049 00001559 2EC706[D206]0300        		mov	word [cs:daycnt2], 3
  3050 00001560 E8E600                  		call	date_verify
  3051 00001563 726B                    		jb	short r_d_ret
  3052 00001565 2EC706[D206]0000        		mov	word [cs:daycnt2], 0
  3053 0000156C E8AA00                  		call	in_bin
  3054 0000156F A0[B706]                		mov	al, [bin_date_time+1]
  3055 00001572 98                      		cbw
  3056 00001573 803E[B606]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3057 00001578 7503                    		jnz	short century_19 ; no
  3058 0000157A 83C064                  		add	ax, 100		; add in a century
  3059                                  
  3060                                  century_19:				
  3061 0000157D 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3062 00001580 B104                    		mov	cl, 4		; leap year every 4
  3063 00001582 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3064 00001584 88E3                    		mov	bl, ah		; save odd years
  3065 00001586 98                      		cbw			; zero ah
  3066 00001587 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3067                                  					; # of days in leap year blocks
  3068 0000158A F7E1                    		mul	cx
  3069 0000158C 2EA3[D206]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3070 00001590 88D8                    		mov	al, bl		; get odd years	count
  3071 00001592 98                      		cbw
  3072 00001593 09C0                    		or	ax, ax
  3073 00001595 740C                    		jz	short leap_year
  3074 00001597 B96D01                  		mov	cx, 365		; days in year
  3075 0000159A F7E1                    		mul	cx
  3076 0000159C 2E0106[D206]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3077 000015A1 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3078                                  					; possibly account for a leap day
  3079                                  ;-----------------------------------------------------------------------------
  3080                                  
  3081                                  leap_year:				
  3082 000015A3 803E[B806]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3083 000015A8 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3084                                  leap_adjustment:			
  3085 000015AA 2EFF06[D206]            		inc	word [cs:daycnt2] ; account for leap day
  3086                                  no_leap_adjustment:			
  3087 000015AF 8A0E[B906]              		mov	cl, [bin_date_time+3] ; get days of month
  3088 000015B3 30ED                    		xor	ch, ch
  3089 000015B5 49                      		dec	cx		; because of offset from day 1,	not day	0
  3090 000015B6 2E010E[D206]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3091 000015BB 8A0E[B806]              		mov	cl, [bin_date_time+2] ; get month
  3092 000015BF 30ED                    		xor	ch, ch
  3093 000015C1 49                      		dec	cx		; january starts at offset 0
  3094 000015C2 D1E1                    		shl	cx, 1		; word offset
  3095 000015C4 BE[BA06]                		mov	si, month_table
  3096 000015C7 01CE                    		add	si, cx
  3097                                  		; 16/10/2022
  3098                                  		; ds must be same with cs here, if so..
  3099                                  		; what for cs: prefixes are used !?)
  3100                                  		; mov	ax, [cs:si]
  3101                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3102 000015C9 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3103                                  					; get #	days in	previous months
  3104 000015CB 2E0106[D206]            		add	[cs:daycnt2], ax
  3105                                  r_d_ret:				
  3106 000015D0 2E8B36[D206]            		mov	si, [cs:daycnt2]
  3107 000015D5 5A                      		pop	dx
  3108 000015D6 59                      		pop	cx
  3109 000015D7 5B                      		pop	bx
  3110 000015D8 58                      		pop	ax
  3111 000015D9 C3                      		retn
  3112                                  
  3113                                  ;-----------------------------------------------------------------------------
  3114                                  
  3115                                  r_t_retj:				
  3116 000015DA 31C9                    		xor	cx, cx
  3117 000015DC 31D2                    		xor	dx, dx
  3118 000015DE EB38                    		jmp	short r_t_ret
  3119                                  
  3120                                  ; =============== S U B	R O U T	I N E ========================================
  3121                                  
  3122                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3123                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3124                                  
  3125                                  read_real_time:	; proc near		
  3126 000015E0 B402                    		mov	ah, 2
  3127 000015E2 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3128                                  					; Return: CH = hours in	BCD
  3129                                  					; CL = minutes in BCD
  3130                                  					; DH = seconds in BCD
  3131 000015E4 72F4                    		jb	short r_t_retj
  3132 000015E6 882E[B606]              		mov	[bin_date_time], ch ; hours
  3133 000015EA 880E[B706]              		mov	[bin_date_time+1], cl ; minutes
  3134 000015EE 8836[B806]              		mov	[bin_date_time+2], dh ; seconds
  3135 000015F2 C606[B906]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3136 000015F7 E89F00                  		call	bcd_verify
  3137 000015FA 72DE                    		jb	short r_t_retj
  3138 000015FC E88500                  		call	time_verify
  3139 000015FF 72D9                    		jb	short r_t_retj
  3140 00001601 E81500                  		call	in_bin		; from bcd to bin
  3141 00001604 8A2E[B606]              		mov	ch, [bin_date_time]
  3142 00001608 8A0E[B706]              		mov	cl, [bin_date_time+1]
  3143 0000160C 8A36[B806]              		mov	dh, [bin_date_time+2]
  3144 00001610 8A16[B906]              		mov	dl, [bin_date_time+3]
  3145                                  		; 16/10/2022
  3146                                  		; 17/09/2022
  3147                                  		; 31/05/2019
  3148 00001614 FF1E[D906]              		call	far [ttticks] 
  3149                                  		;call	dword ptr ttticks ; note: indirect far call
  3150                                  					; cx:dx	= number of ticks
  3151                                  					; (at 18.2 ticks per sec.)
  3152                                  r_t_ret:				
  3153 00001618 C3                      		retn
  3154                                  
  3155                                  ; =============== S U B	R O U T	I N E =======================================
  3156                                  
  3157                                  ;   in_bin converts bin_date_time values from bcd to bin
  3158                                  
  3159                                  in_bin:		; proc near		
  3160 00001619 A0[B606]                		mov	al, [bin_date_time] ; century or hours
  3161 0000161C E81F00                  		call	bcd_to_bin
  3162 0000161F A2[B606]                		mov	[bin_date_time], al
  3163 00001622 A0[B706]                		mov	al, [bin_date_time+1] ; years or minutes
  3164 00001625 E81600                  		call	bcd_to_bin
  3165 00001628 A2[B706]                		mov	[bin_date_time+1], al
  3166 0000162B A0[B806]                		mov	al, [bin_date_time+2] ; months or seconds
  3167 0000162E E80D00                  		call	bcd_to_bin
  3168 00001631 A2[B806]                		mov	[bin_date_time+2], al
  3169 00001634 A0[B906]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3170 00001637 E80400                  		call	bcd_to_bin
  3171 0000163A A2[B906]                		mov	[bin_date_time+3], al
  3172 0000163D C3                      		retn
  3173                                  
  3174                                  ; =============== S U B	R O U T	I N E =======================================
  3175                                  
  3176                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3177                                  ;   a binary representation in al
  3178                                  ;   ah is destroyed
  3179                                  
  3180                                  bcd_to_bin:	; proc near		
  3181 0000163E 88C4                    		mov	ah, al
  3182 00001640 240F                    		and	al, 0Fh
  3183 00001642 B104                    		mov	cl, 4
  3184 00001644 D2EC                    		shr	ah, cl
  3185 00001646 D50A                    		aad
  3186 00001648 C3                      		retn
  3187                                  
  3188                                  ; =============== S U B	R O U T	I N E ========================================
  3189                                  
  3190                                  ;   date_verify loosely checks bcd date values to be in range
  3191                                  ;   in bin_date_time
  3192                                  
  3193                                  date_verify:	; proc near		
  3194 00001649 803E[B606]20            		cmp	byte [bin_date_time], 20h ; century check
  3195 0000164E 7732                    		ja	short date_error
  3196 00001650 740E                    		jz	short century_20 ; jmp in 21th century
  3197 00001652 803E[B606]19            		cmp	byte [bin_date_time], 19h ; century check
  3198                                  		;jb	short date_error
  3199                                  		; 12/12/2022
  3200 00001657 722A                    		jb	short date_err2
  3201 00001659 803E[B706]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3202                                  		;jb	short date_error
  3203                                  		; 12/12/2022
  3204 0000165E 7223                    		jb	short date_err2
  3205                                  century_20:				
  3206 00001660 803E[B706]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3207 00001665 771B                    		ja	short date_error
  3208 00001667 803E[B806]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3209 0000166C 7714                    		ja	short date_error
  3210 0000166E 803E[B806]00            		cmp	byte [bin_date_time+2], 0
  3211                                  		;jbe	short date_error
  3212 00001673 760D                    		jna	short date_error
  3213 00001675 803E[B906]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3214 0000167A 7706                    		ja	short date_error
  3215                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3216                                  		;;jbe	short date_error
  3217                                  		;jna	short date_error
  3218                                  		; 12/12/2022
  3219                                  		; cf=0
  3220                                  		;clc
  3221                                  		; 12/12/2022
  3222 0000167C 803E[B906]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3223 00001681 C3                      		retn
  3224                                  ;-----------------------------------------------------------------------------
  3225                                  
  3226                                  date_error:				
  3227 00001682 F9                      		stc
  3228                                  date_err2:
  3229 00001683 C3                      		retn
  3230                                  
  3231                                  ; =============== S U B	R O U T	I N E ========================================
  3232                                  
  3233                                  ; time_verify very loosely checks bcd date values to be in range
  3234                                  ; in bin_date_time
  3235                                  
  3236                                  time_verify:	; proc near		
  3237 00001684 803E[B606]24            		cmp	byte [bin_date_time], 24h ; hour check
  3238 00001689 770C                    		ja	short time_error
  3239 0000168B 803E[B706]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3240 00001690 7705                    		ja	short time_error
  3241                                  		; 12/12/2022h
  3242                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3243                                  		;ja	short time_error
  3244                                  		;clc
  3245                                  		;retn
  3246                                  		; 12/12/2022
  3247 00001692 803E[B806]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3248                                  time_error:
  3249                                  bv_error:	
  3250 00001697 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3251 00001698 C3                      		retn
  3252                                  
  3253                                  ; ----------------------------------------------------------------------------
  3254                                  
  3255                                  ;time_error:				
  3256                                  		;stc
  3257                                  		;retn
  3258                                  
  3259                                  ; =============== S U B	R O U T	I N E ========================================
  3260                                  
  3261                                  ;   bcd_verify checks values in bin_date_time to be valid
  3262                                  ;   bcd numerals.  carry set if any nibble out of range
  3263                                  
  3264                                  bcd_verify:	; proc near		
  3265 00001699 B90400                  		mov	cx, 4		; 4 bytes to check
  3266 0000169C BB[B606]                		mov	bx, bin_date_time
  3267                                  bv_loop:				
  3268 0000169F 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3269 000016A1 88C4                    		mov	ah, al
  3270 000016A3 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3271                                  					; is 1's place in range?
  3272 000016A6 3C0A                    		cmp	al, 10
  3273 000016A8 77ED                    		ja	short bv_error	; jmp out of range
  3274 000016AA D0EC                    		shr	ah, 1
  3275 000016AC D0EC                    		shr	ah, 1
  3276 000016AE D0EC                    		shr	ah, 1
  3277 000016B0 D0EC                    		shr	ah, 1
  3278 000016B2 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3279 000016B5 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3280 000016B8 77DD                    		ja	short bv_error	; jmp out of range
  3281 000016BA 43                      		inc	bx		; next byte
  3282 000016BB 49                      		dec	cx
  3283 000016BC 75E1                    		jnz	short bv_loop
  3284 000016BE F8                      		clc			; set success flag
  3285 000016BF C3                      		retn
  3286                                  ; ----------------------------------------------------------------------------
  3287                                  
  3288                                  		; 12/12/2022
  3289                                  ;bv_error:				
  3290                                  		;stc			; set error flag
  3291                                  		;retn
  3292                                  
  3293                                  ; ----------------------------------------------------------------------------
  3294                                  
  3295                                  endk09:
  3296                                  
  3297                                  ; ----------------------------------------------------------------------------
  3298                                  
  3299                                  ;------------------------------------------------------------------------
  3300                                  ;									:
  3301                                  ;	System initialization						:
  3302                                  ;									:
  3303                                  ;	The entry conditions are established by the bootstrap		:
  3304                                  ;	loader and are considered unknown. The following jobs		:
  3305                                  ;	will be performed by this module:				:
  3306                                  ;									:
  3307                                  ;	1.	All device initialization is performed			:
  3308                                  ;	2.	A local stack is set up and DS:SI are set		:
  3309                                  ;		to point to an initialization table. Then		:
  3310                                  ;		an inter-segment call is made to the first		:
  3311                                  ;		byte of the dos 					:
  3312                                  ;	3.	Once the dos returns from this call the ds		:
  3313                                  ;		register has been set up to point to the start		:
  3314                                  ;		of free memory. The initialization will then		:
  3315                                  ;		load the command program into this area 		:
  3316                                  ;		beginning at 100 hex and transfer control to		:
  3317                                  ;		this program.						:
  3318                                  ;									:
  3319                                  ;------------------------------------------------------------------------
  3320                                  
  3321                                  ; 01/10/2022
  3322                                  ; 08/01/2018 - Retro DOS v4.0
  3323                                  
  3324                                  ; drvfat must be the first location of freeable space!
  3325                                  
  3326                                  
  3327                                  align 2
  3328                                  		;db 90h
  3329                                  
  3330                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3331                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3332                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3333                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3334                                  	
  3335 000016C0 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3336                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3337                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3338                                  ;doscnt:	dw 0			; how many sectors to read
  3339 000016C2 00                      fbigfat:	db 0			; flags	for drive
  3340                                  ;fatloc:	dw 0			; seg addr of fat sector
  3341 000016C3 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3342 000016C5 80                      rom_drv_num:	db 80h			; rom drive number
  3343                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3344                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3345                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3346                                  
  3347                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3348                                  ; call to determine drive parameters.
  3349                                  
  3350 000016C6 02                      num_heads:	db 2			; number of heads returned by rom
  3351 000016C7 09                      sec_trk:	db 9			; sec/trk returned by rom
  3352 000016C8 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3353 000016C9 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3354                                  
  3355                                  ; ----------------------------------------------------------------------------
  3356                                  
  3357 000016CA 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3358 000016D2 0008010270000000        		dw 2048, 513, 112, 0
  3359 000016DA 0020020400010000        		dw 8192, 1026, 256, 0
  3360 000016E2 A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3361 000016EA FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3362                                  					; the assumption of total fat size <= 128 kb,
  3363                                  					; and the maximum size of fat entry = 16 bit.
  3364                                  
  3365 000016F2 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3365 000016FB 00                 
  3366                                  					; for compatibility.
  3367 000016FC 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3367 00001705 00                 
  3368                                  					; fbig = 40h
  3369 00001706 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3369 0000170F 00                 
  3370 00001710 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3370 00001719 00                 
  3371 0000171A 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3371 00001723 00                 
  3372 00001724 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3372 0000172D 00                 
  3373 0000172E 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3373 00001737 00                 
  3374                                  					
  3375                                  ; ----------------------------------------------------------------------------
  3376                                  
  3377                                  ;******************************************************
  3378                                  ;variables for mini disk initialization
  3379                                  ;******************************************************
  3380                                  
  3381                                  ; 01/10/2022
  3382                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3383                                  
  3384 00001738 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3385 00001739 00                      hnum:		db 0			; real number of hardfiles
  3386 0000173A [7E06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3387 0000173C [0D09]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3388                                  					; of bds table. needed to figure out
  3389                                  					; the dosdatasg address.
  3390 0000173E 0000                    mini_hdlim:	dw 0			
  3391 00001740 0000                    mini_seclim:	dw 0
  3392                                  
  3393                                  ;end of mini disk init variables **********************
  3394                                  
  3395                                  ; ----------------------------------------------------------------------------
  3396                                  			
  3397 00001742 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3398                                  
  3399                                  ; 13/12/2022
  3400                                  %if 0
  3401                                  
  3402                                  ;align 2
  3403                                  		db  90h	
  3404                                  
  3405                                  ; the following are the recommended bpbs for the media that we know of so far.
  3406                                  
  3407                                  ;struc bpbx
  3408                                  ;   resw 1 ; 512
  3409                                  ;   resb 1
  3410                                  ;   resw 1 ; 1
  3411                                  ;   resb 1 ; 2
  3412                                  ;   resw 1
  3413                                  ;   resw 1
  3414                                  ;   resb 1
  3415                                  ;   resw 1
  3416                                  ;   resw 1
  3417                                  ;   resw 1 ; 2
  3418                                  ;   resw 1
  3419                                  ;   resw 1 ; hidden sector high
  3420                                  ;   resd 1 ; extended total sectors
  3421                                  ;.size:
  3422                                  ;endstruc
  3423                                  
  3424                                  ; 08/01/2019 - Retro DOS v4.0
  3425                                  
  3426                                  ; 20/04/2019
  3427                                  
  3428                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3429                                  
  3430                                  ; 09/12/2022
  3431                                  BPB48T:
  3432                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3433                                  		; 48 tpi diskettes	;
  3434                                  		dw	512		; physical sector size in bytes
  3435                                  		db	2		; sectors/allocation unit
  3436                                  		dw	1		; reserved sectors for dos
  3437                                  		db	2		; number of allocation tables
  3438                                  		dw	112		; number of directory entries
  3439                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3440                                  		db	0FDh		; media descriptor
  3441                                  		dw	2		; number of fat sectors
  3442                                  		dw	9		; sectors per track
  3443                                  		dw	2		; heads
  3444                                  		dw	0		; hidden sector count (low word)
  3445                                  		dw	0		; hidden sector (high)
  3446                                  		dw	0		; number of sectors (low)
  3447                                  		dw	0		; number of sectors (high)					
  3448                                  
  3449                                  		db 90h
  3450                                  ;align 2
  3451                                  BPB96T:
  3452                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3453                                  		; 96 tpi diskettes	;
  3454                                  		dw	512		; physical sector size in bytes
  3455                                  		db	1		; sectors/allocation unit
  3456                                  		dw	1		; reserved sectors for dos
  3457                                  		db	2		; number of allocation tables
  3458                                  		dw	224		; number of directory entries
  3459                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3460                                  		db	0F9h		; media descriptor
  3461                                  		dw	7		; number of fat sectors
  3462                                  		dw	15		; sectors per track
  3463                                  		dw	2		; heads
  3464                                  		dw	0		; hidden sector count (low word)
  3465                                  		dw	0		; hidden sector (high)
  3466                                  		dw	0		; number of sectors (low)
  3467                                  		dw	0		; number of sectors (high)
  3468                                  
  3469                                  		db 90h
  3470                                  ;align 2
  3471                                  BPB35:
  3472                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3473                                  		; 3.5" diskettes - 720 KB ;		
  3474                                  		dw	512		; physical sector size in bytes
  3475                                  		db	2		; sectors/allocation unit
  3476                                  		dw	1		; reserved sectors for dos
  3477                                  		db	2		; number of allocation tables
  3478                                  		dw	112		; number of directory entries
  3479                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3480                                  		db	0F9h		; media descriptor
  3481                                  		dw	3		; number of fat sectors
  3482                                  		dw	9		; sectors per track
  3483                                  		dw	2		; heads
  3484                                  		dw	0		; hidden sector count (low word)
  3485                                  		dw	0		; hidden sector (high)
  3486                                  		dw	0		; number of sectors (low)
  3487                                  		dw	0		; number of sectors (high)
  3488                                  
  3489                                  		db 90h
  3490                                  ;align 2
  3491                                  
  3492                                  ;align 2
  3493                                  ;BPB144:
  3494                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3495                                  ;
  3496                                  ;		dw	512		; physical sector size in bytes
  3497                                  ;		db	1		; sectors/allocation unit
  3498                                  ;		dw	1		; reserved sectors for dos
  3499                                  ;		db	2		; number of allocation tables
  3500                                  ;		dw	224		; number of directory entries
  3501                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3502                                  ;		db	0F0h		; media descriptor
  3503                                  ;		dw	9		; number of fat sectors
  3504                                  ;		dw	18		; sectors per track
  3505                                  ;		dw	2		; heads
  3506                                  ;		dw	0		; hidden sector count (low word)
  3507                                  ;		dw	0		; hidden sector (high)
  3508                                  ;		dw	0		; number of sectors (low)
  3509                                  ;		dw	0		; number of sectors (high)
  3510                                  ;
  3511                                  ;		db 90h
  3512                                  ;align 2
  3513                                  
  3514                                  BPB288:
  3515                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3516                                  		; 3.5" diskettes - 2.88 MB ;	 
  3517                                  		dw	512		; physical sector size in bytes
  3518                                  		db	2		; sectors/allocation unit
  3519                                  		dw	1		; reserved sectors for dos
  3520                                  		db	2		; number of allocation tables
  3521                                  		dw	240		; number of directory entries
  3522                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3523                                  		db	0F0h		; media descriptor
  3524                                  		dw	3		; number of fat sectors
  3525                                  		dw	9		; sectors per track
  3526                                  		dw	2		; heads
  3527                                  		dw	0		; hidden sector count (low word)
  3528                                  		dw	0		; hidden sector (high)
  3529                                  		dw	0		; number of sectors (low)
  3530                                  		dw	0		; number of sectors (high)
  3531                                  
  3532                                  		db 90h			;
  3533                                  ;align 2
  3534                                  
  3535                                  %endif
  3536                                  
  3537                                  ; ----------------------------------------------------------------------------
  3538                                  					; align	2
  3539                                  ; 09/12/2022
  3540                                  %if 0
  3541                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3542                                  		dw bpb96t		; 96tpi	drives
  3543                                  		dw bpb35		; 3.5" drives
  3544                                  		dw bpb35		; unused 8" diskette
  3545                                  		dw bpb35		; unused 8" diskette
  3546                                  		dw bpb35		; used for hard	disk
  3547                                  		dw bpb35		; used for tape	drive
  3548                                  		dw bpb35		; FFOTHER
  3549                                  		dw bpb35		; ERIMO
  3550                                  		dw bpb288		; 2.88MB drive
  3551                                  		;
  3552                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3553                                  %endif
  3554                                  
  3555                                  ; 13/12/2022
  3556                                  %if 0
  3557                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3558                                  		dw BPB96T		; 96tpi	drives
  3559                                  		dw BPB35		; 3.5" drives
  3560                                  		dw BPB35		; unused 8" diskette
  3561                                  		dw BPB35		; unused 8" diskette
  3562                                  		dw BPB35		; used for hard	disk
  3563                                  		dw BPB35		; used for tape	drive
  3564                                  		dw BPB35		; FFOTHER
  3565                                  		dw BPB35		; ERIMO
  3566                                  		dw BPB288		; 2.88MB drive
  3567                                  		;
  3568                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3569                                  
  3570                                  %endif
  3571                                  
  3572                                  ; ----------------------------------------------------------------------------
  3573                                  
  3574                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3575                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3576                                  ;	  will not yet be moved to its final resting place, so we know
  3577                                  ;	  it'll be low.
  3578                                  ;
  3579                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3580                                  ;	  the function you want to call in Bios_Code. This routine will
  3581                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3582                                  ;	  will get executed when the utility function finishes. It will
  3583                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3584                                  ;	  and a retf
  3585                                  
  3586                                  ; 16/10/2022
  3587                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3588                                  ; 09/12/2022
  3589                                  BC_RETF equ bc_retf
  3590                                  
  3591                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3592                                  					; 2C7h:0C8h = 70h:2638h
  3593 0000174B [C800]                  		dw BC_RETF
  3594                                  
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  call_bios_code:	; proc far			
  3598 0000174D 2EFF36[4B17]            		push	word [cs:addr_of_bcretf] 
  3599                                  					; set up near return to far return
  3600 00001752 2EFF36[D706]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3601 00001757 55                      		push	bp		; save offset of utility function
  3602 00001758 CB                      		retf			; far jump to (DOS)BIOS code
  3603                                  
  3604                                  ; ----------------------------------------------------------------------------
  3605                                  		
  3606                                  		; 20/12/2022
  3607                                  ;flp_drvs	db 0			
  3608                                  
  3609                                  ; ----------------------------------------------------------------------------
  3610                                  
  3611                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3612                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3613                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3614                                  
  3615                                  ;-----------------------------------------------------------------------------
  3616                                  ; entry point from boot sector
  3617                                  ;-----------------------------------------------------------------------------
  3618                                  
  3619                                  init:		; 27/12/2018
  3620                                  		; MSDOS 6.0 (MSINIT.ASM)
  3621                                  		;=============================================================
  3622                                  		;
  3623                                  		; entry from boot sector. the register contents are:
  3624                                  		;
  3625                                  		;   dl = int 13 drive number we booted from
  3626                                  		;   ch = media byte
  3627                                  		;   bx = first data sector on disk.
  3628                                  		;   ax = first data sector (high)
  3629                                  		;   di = sectors/fat for the boot media.
  3630                                  
  3631                                  		; 07/04/2018
  3632                                  		;=============================================================
  3633                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3634                                                  ; DL = [bsDriveNumber]
  3635                                  		; DH = [bsMedia]
  3636                                  		; AX = [bsSectors] ; Total sectors
  3637                                  		; DS = 0, SS = 0
  3638                                  		; BP = 7C00h
  3639                                  
  3640                                  		; 29/09/2023
  3641                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3642                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3643                                  	
  3644                                  ; 20/12/2022
  3645                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3646                                  %if 0	
  3647                                  		cli
  3648                                  
  3649                                  		push	ax
  3650                                  		xor	ax, ax
  3651                                  		mov	ds, ax
  3652                                  		pop	ax
  3653                                  %endif
  3654                                  
  3655                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3656                                  
  3657                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3658                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3659                                  
  3660                                  ;-----------------------------------------------------------------------------
  3661                                  ; initialization - stage 1
  3662                                  ;-----------------------------------------------------------------------------
  3663                                  ; 02/06/2018 - Retro DOS v3.0
  3664                                  		
  3665                                  		; 21/12/2022
  3666                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3667                                  		;mov	bx, 60h
  3668                                  		;mov	es, bx
  3669                                  		;mov	si, bp
  3670                                  		;sub	di, di
  3671                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3672                                  		;;mov	cl, 35
  3673                                  		;rep	movsw
  3674                                  
  3675 00001759 0E                      		push	cs
  3676 0000175A 1F                      		pop	ds
  3677                                  
  3678                                  		; 20/03/2019 - Retro DOS v4.0
  3679                                  		;cli		; turn interrupts off while manupulating stack
  3680                                  		;mov	ss, cx	; set stack segment register
  3681 0000175B BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3682                                  		;sti		; turn interrupts on
  3683                                  
  3684                                  		; 27/03/2018
  3685                                  		;mov	cx, KERNEL_SIZE	; words !
  3686                                  
  3687                                  		; 20/03/2019
  3688 0000175E B90080                  		mov	cx, 32768 ; 65536 bytes
  3689                                  
  3690                                  		; 21/12/2022
  3691                                  		; 07/04/2018
  3692 00001761 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3693                                  		;mov	bl, KERNEL_SEGMENT
  3694 00001764 8EC3                    		mov	es, bx
  3695 00001766 31FF                    		xor	di, di
  3696 00001768 89FE                    		mov	si, di
  3697                                  		
  3698                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3699                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3700 0000176A F3A5                    		rep	movsw
  3701                                  
  3702                                  		; 20/03/2019 - Retro DOS v4.0
  3703 0000176C 53                      		push	bx
  3704 0000176D 68[7117]                		push	init0
  3705 00001770 CB                      		retf
  3706                                  init0:	
  3707                                  		; 20/12/2022
  3708                                  		; (combined kernel file > 64KB)
  3709                                  
  3710                                  		; 20/03/2019
  3711 00001771 B520                    		mov	ch, 20h
  3712 00001773 8ED9                    		mov	ds, cx ; 2000h
  3713                                  		;mov	cx, 1070h
  3714 00001775 B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3715 00001778 8EC1                    		mov	es, cx
  3716                                  		
  3717                                  		; 21/12/2022
  3718                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3719                                  		; 28/09/2023
  3720                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3721                                  
  3722                                  		;mov	cx, KERNEL_SIZE - 32768
  3723                                  		; 28/09/2023 (BugFix)
  3724 0000177A B95000                  		mov	cx, NXWORDCOUNT
  3725                                  		;shr	cx, 1 ; 28/09/2023
  3726                                  		;xor	si, si
  3727                                  		;xor	di, di
  3728 0000177D F3A5                    		rep	movsw
  3729                                  
  3730                                  		; 28/09/2023
  3731                                  		;; 17/06/2018 
  3732                                  		;mov	ds, bx
  3733                                  		;; 21/03/2019
  3734                                  		;mov	es, bx
  3735                                  ;init0:
  3736                                  ;		;push	es
  3737                                  ;		push	bx ; 20/03/2019
  3738                                  ;		push	init1 ; 07/04/2018
  3739                                  ;		retf	; jump to 0070h:init1
  3740                                  ;init:
  3741                                  init1:
  3742                                  		; 20/12/2022
  3743                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3744                                  		; for full MSDOS compatibility.
  3745                                  
  3746 0000177F 8EC1                    		mov	es, cx ; 0
  3747 00001781 8ED9                    		mov	ds, cx ; 0
  3748                                  
  3749 00001783 B82205                  		mov	ax, SEC9
  3750                                  
  3751                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3752 00001786 B378                    		mov	bl, 1Eh*4
  3753                                  				; INT 1Eh points to diskette parms table
  3754                                  
  3755                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3756                                   		; (do not move the DPT if is not original ROMBIOS table)
  3757                                  
  3758                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3759                                  		;;jnz	short mov_dpt
  3760                                  
  3761                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3762                                  		;je	short dont_mov_dpt
  3763                                  
  3764                                  		;mov	si, [bx] ; [1Eh*4]		
  3765                                  ;mov_dpt:
  3766                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3767 00001788 C537                    		lds	si, [bx]
  3768 0000178A 89C7                    		mov	di, ax  ; SEC9
  3769 0000178C B10B                    		mov	cl, 11
  3770                                  		;cld
  3771 0000178E F3A4                    		rep	movsb
  3772                                  
  3773                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3774 00001790 8ED9                    		mov	ds, cx ; 0
  3775 00001792 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3776 00001794 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3777                                  ;dont_mov_dpt:
  3778                                  
  3779                                  ; 20/12/2022 - Retro DOS v4.0
  3780                                  %if 0
  3781                                  		; 27/12/2018 - Retro DOS v4.0
  3782                                  		; 'Starting MS-DOS...' message
  3783                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3784                                  		; (0070h:96A3h)
  3785                                  
  3786                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3787                                  		mov     ah, 0Eh
  3788                                  		;bh = 0
  3789                                          	mov     bl, 7		; "normal" attribute and page
  3790                                  startmsg_nxt_chr:  
  3791                                  		lodsb
  3792                                  		or	al, al
  3793                                          	jz	short startmsg_ok
  3794                                         
  3795                                  		int	10h		; video write
  3796                                          	jmp	short startmsg_nxt_chr
  3797                                  
  3798                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3799                                  
  3800                                  startmsg_ok:
  3801                                  
  3802                                  %endif
  3803                                  
  3804                                  ;-----------------------------------------------------------------------------
  3805                                  ; initialization - stage 2
  3806                                  ;-----------------------------------------------------------------------------
  3807                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3808                                  
  3809                                  
  3810                                  ; 19/03/2018
  3811                                  ; Retro DOS v2.0 (24/02/2018)
  3812                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3813                                  
  3814                                  ;------------------------------------------------------------------------
  3815                                  ;									:
  3816                                  ;	System initialization						:
  3817                                  ;									:
  3818                                  ;	The entry conditions are established by the bootstrap		:
  3819                                  ;	loader and are considered unknown. The following jobs		:
  3820                                  ;	will be performed by this module:				:
  3821                                  ;									:
  3822                                  ;	1.	All device initialization is performed			:
  3823                                  ;	2.	A local stack is set up and DS:SI are set		:
  3824                                  ;		to point to an initialization table. Then		:
  3825                                  ;		an inter-segment call is made to the first		:
  3826                                  ;		byte of the dos 					:
  3827                                  ;	3.	Once the dos returns from this call the ds		:
  3828                                  ;		register has been set up to point to the start		:
  3829                                  ;		of free memory. The initialization will then		:
  3830                                  ;		load the command program into this area 		:
  3831                                  ;		beginning at 100 hex and transfer control to		:
  3832                                  ;		this program.						:
  3833                                  ;									:
  3834                                  ;------------------------------------------------------------------------
  3835                                  		
  3836                                  		; 20/12/2022
  3837                                  		; ----------------------
  3838                                  		; Registers
  3839                                  		; ----------------------
  3840                                  		; DL = [bsDriveNumber]
  3841                                  		; DH = [bsMedia]
  3842                                  		; DS = 0, ES = 0, SS = 0
  3843                                  		; BP = 7C00h
  3844                                  		; SP = 700h
  3845                                  		; ----------------------
  3846                                  		; CX = 0				
  3847                                  
  3848                                  ; 02/10/2022 - 20/12/2022
  3849                                  ; ------------------------------------------------------------------------------
  3850                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3851                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3852                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3853                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3854                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3855                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3856                                  ; ------------------------------------------------------------------------------
  3857                                  
  3858                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3859                                  ;
  3860                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3861                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3862                                  ;;	data sector of the bios.
  3863                                  ;
  3864                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3865                                  ;		mov	[cs:bios_l], bx
  3866                                  
  3867                                  ; with the following information from msload, we don't need the
  3868                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3869                                  ;     limitation of msbio.com file.
  3870                                  
  3871                                  		; 14/12/2023
  3872                                  		; 21/12/2022
  3873                                  		;cli
  3874                                  
  3875 00001797 0E                      		push	cs		; Save a peck of interrupt vectors...
  3876 00001798 07                      		pop	es
  3877                                  		;push	cx
  3878                                  		;push	di
  3879                                  		; 20/12/2022
  3880 00001799 B105                    		mov	cl, 5
  3881                                  		;mov	cx, 5		; NUMROMVECTORS
  3882                                  					; no. of rom vectors to	be saved
  3883                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3884 0000179B BE[0001]                		mov	si, RomVectors
  3885                                  
  3886                                  		; 14/12/2023
  3887 0000179E FA                      		cli
  3888                                  next_int_:		
  3889 0000179F 2E                      		cs	; 16/10/2022
  3890 000017A0 AC                      		lodsb		
  3891                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3892 000017A1 98                      		cbw			; ax = interrupt number
  3893 000017A2 D1E0                    		shl	ax, 1
  3894 000017A4 D1E0                    		shl	ax, 1		; int no * 4
  3895 000017A6 89C7                    		mov	di, ax		; interrupt vector address
  3896 000017A8 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3897                                  					; saving address in di
  3898                                  		;lodsw			; movsw
  3899                                  		;stosw
  3900                                  		;lodsw			; movsw
  3901                                  		;stosw			; save the vector
  3902                                  		; 20/12/2022
  3903 000017AA A5                      		movsw
  3904 000017AB A5                      		movsw		
  3905                                  
  3906 000017AC 87F7                    		xchg	si, di
  3907 000017AE E2EF                    		loop	next_int_
  3908                                  		
  3909                                  		;pop	di
  3910                                  		;pop	cx
  3911                                  
  3912                                  ; we need to save int13 in two places in case we are running on an at.
  3913                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3914                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3915                                  ; rom int13 routine, we must have that rom address also stored away.
  3916                                  
  3917                                  		; 20/12/2022
  3918                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3919                                  		;mov	[cs:Orig13], ax
  3920                                  		;mov	ax, [cs:Old13+2]
  3921                                  		;mov	[cs:Orig13+2], ax
  3922                                  
  3923                                  		; 14/12/2023
  3924                                  		;cli
  3925                                  
  3926                                  		; 16/10/2022
  3927 000017B0 C7064C00[6B07]          		mov	word [13h*4], block13
  3928                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3929                                  					; set up int 13	for new	action
  3930 000017B6 8C0E4E00                		mov	[13h*4+2], cs
  3931                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3932 000017BA C7065400[3F08]          		mov	word [15h*4], Int15
  3933                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3934                                  					; set up int 15	for new	action
  3935 000017C0 8C0E5600                		mov	[15h*4+2], cs
  3936                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3937 000017C4 C7066400[F007]          		mov	word [19h*4], int19
  3938                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3939                                  					; set up int 19	for new	action
  3940 000017CA 8C0E6600                		mov	[19h*4+2], cs
  3941                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3942                                  
  3943                                  		; 20/12/2022
  3944 000017CE 0E                      		push	cs
  3945 000017CF 1F                      		pop	ds
  3946                                  		
  3947 000017D0 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3948 000017D3 A3[B400]                		mov	[Orig13], ax
  3949 000017D6 A1[0801]                		mov	ax, [Old13+2]
  3950 000017D9 A3[B600]                		mov	[Orig13+2], ax
  3951                                  					; ;
  3952 000017DC FB                      		sti
  3953 000017DD CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3954                                  					; Return: AX = equipment flag bits
  3955                                  
  3956                                  ; we have to support a system that does not have any diskette
  3957                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3958                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3959                                  ; otherwise, the system has only hardfiles.
  3960                                  ;
  3961                                  ; important thing is that still, for compatibility reason, the drive letter
  3962                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3963                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3964                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3965                                  ; drives will get "invalid drive letter ..." message. we are going to
  3966                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3967                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3968                                  
  3969                                  ; check the register returned by the equipment determination interrupt
  3970                                  ; we have to handle the case of no diskettes in the system by faking
  3971                                  ; two dummy drives.
  3972                                  ;
  3973                                  ; if the register indicates that we do have floppy drives we don't need
  3974                                  ; to do anything special.
  3975                                  ;
  3976                                  ; if the register indicates that we don't have any floppy drives then
  3977                                  ; what we need to do is set the fakefloppydrv variable, change the
  3978                                  ; register to say that we do have floppy drives and then go to execute
  3979                                  ; the code which starts at notsingle. this is because we can skip the
  3980                                  ; code given below which tries to find if there are one or two drives
  3981                                  ; since we already know about this.
  3982                                  
  3983                                  		; 06/05/2019 - Retro DOS v4.0
  3984 000017DF 88C1                    		mov	cl, al
  3985                                  
  3986                                  		; 12/12/2022
  3987 000017E1 A801                    		test	al, 1
  3988                                  		;test	ax, 1		; floppy drives	present	?
  3989 000017E3 751E                    		jnz	short normalfloppydrv ;	yes.
  3990                                  
  3991                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3992                                  ; whether it is an old ROM BIOS or a new one
  3993                                  ;
  3994                                  ; WARNING !!!
  3995                                  ;
  3996                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3997                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3998                                  
  3999                                  		; 20/12/2022
  4000                                  		;push	ax
  4001                                  		;push	bx
  4002                                  		;push	cx
  4003 000017E5 52                      		push	dx
  4004                                  		;push	di
  4005 000017E6 06                      		push	es
  4006 000017E7 B408                    		mov	ah, 8
  4007 000017E9 B200                    		mov	dl, 0
  4008 000017EB CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4009                                  					; DL = drive number
  4010                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4011                                  					; DL = number of consecutive drives
  4012                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4013 000017ED 7202                    		jc	short _gdskp_error
  4014                                  		;;mov	[cs:flp_drvs], dl
  4015                                  		; 20/12/2022
  4016                                  		; ds = cs
  4017                                  		;mov	[flp_drvs], dl
  4018 000017EF 88D1                    		mov	cl, dl
  4019                                  _gdskp_error:	
  4020                                  		; 20/12/2022			
  4021 000017F1 07                      		pop	es
  4022                                  		;pop	di
  4023 000017F2 5A                      		pop	dx
  4024                                  		;pop	cx
  4025                                  		;pop	bx
  4026                                  		;pop	ax
  4027                                  		
  4028 000017F3 720E                    		jc	short normalfloppydrv
  4029                                  					; if error it is an old ROM BIOS
  4030                                  					; so, lets assume that ROM BIOS lied
  4031                                  		; 20/12/2022
  4032                                  		; ds = cs
  4033                                  		;cmp	byte [flp_drvs], 0
  4034                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4035                                  		;jz	short _set_fake_flpdrv
  4036                                  		;;mov	al, [cs:flp_drvs]
  4037                                  		;mov	al, [flp_drvs]
  4038                                  		;;dec	al		; make it zero based
  4039                                  		;; 18/12/2022
  4040                                  		;dec	ax
  4041                                  		;jmp	short got_num_flp_drvs
  4042                                  		
  4043                                  		; 20/12/2022
  4044 000017F5 08C9                    		or	cl, cl ; [flp_drvs]
  4045 000017F7 7403                    		jz	short _set_fake_flpdrv		
  4046 000017F9 49                      		dec	cx	
  4047 000017FA EB0B                    		jmp	short got_num_flp_drvs
  4048                                  ; ----------------------------------------------------------------------------
  4049                                  
  4050                                  _set_fake_flpdrv:
  4051                                  		; 20/12/2022
  4052                                  		; ds = cs
  4053                                  		;inc	cl	; cl = 1
  4054                                  		; 14/12/2023
  4055 000017FC 41                      		inc	cx	; cl = 1
  4056 000017FD 880E[C916]              		mov	[fakefloppydrv], cl ; 1
  4057                                  		;mov	byte [fakefloppydrv], 1
  4058                                  		;;mov	byte [cs:fakefloppydrv], 1
  4059                                  					; we don't have any floppy drives.
  4060                                  		; 20/12/2022
  4061                                  		;mov	ax, 1
  4062 00001801 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4063                                  ; ----------------------------------------------------------------------------
  4064                                  
  4065                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4066                                  		; 20/12/2022
  4067                                  		;rol	al, 1		; there	exist floppy drives.
  4068                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4069 00001803 D0C1                    		rol	cl, 1
  4070 00001805 D0C1                    		rol	cl, 1
  4071                                  got_num_flp_drvs:			
  4072                                  		;;and	ax, 3		; only look at bits 0 &	1
  4073                                  		; 18/12/2022
  4074                                  		;and	al, 3
  4075                                  		; 20/12/2022
  4076 00001807 80E103                  		and	cl, 3
  4077 0000180A 7505                    		jnz	short notsingle	; zero means single drive system
  4078                                  		; 20/12/2022
  4079 0000180C 41                      		inc	cx
  4080                                  		;inc	ax		; pretend it's a two drive system
  4081                                  settwodrive:				; set this to two fakedrives
  4082                                  		; 20/12/2022
  4083                                  		; ds = cs
  4084 0000180D FE06[7800]              		inc	byte [single]
  4085                                  		;inc	byte [cs:single] ; remember this
  4086                                  notsingle:	
  4087                                  		; 20/12/2022
  4088                                  		;inc	ax		; ax has number	of drives, 2-4
  4089                                  		;			; is also 0 indexed boot drive if we
  4090                                  		;			; booted off hard file
  4091                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4092                                  
  4093                                  		; 20/12/2022
  4094                                  		;inc	cl	; cl >= 2
  4095                                  		; 14/12/2023
  4096 00001811 41                      		inc	cx	; cl >= 2
  4097                                  
  4098                                  ; 16/10/2022
  4099                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4100                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4101                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4102                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4103                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4104                                  SEC9	EQU	522h	; address of disk parameters
  4105                                  CHROUT	EQU	29h
  4106                                  LSTDRV	EQU     504h
  4107                                  
  4108                                  ; determine whether we booted from floppy or hard disk...
  4109                                  
  4110                                  		; 20/12/2022
  4111 00001812 88C8                    		mov	al, cl	; 26/05/2019
  4112                                  
  4113 00001814 F6C280                  		test	dl, 80h		; boot from floppy ?
  4114 00001817 7502                    		jnz	short gothrd	; no.
  4115 00001819 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4116                                  gothrd:					
  4117                                  
  4118                                  ; MSDOS 6.0
  4119                                  ;   ax = 0-based drive we booted from
  4120                                  ;   bios_l, bios_h set.
  4121                                  ;   cl = number of floppies including fake one
  4122                                  ;   ch = media byte
  4123                                  
  4124                                  ; Retro DOS 4.0 - 27/12/2018 
  4125                                  ;  (from Retro DOS v2.0 boot sector)
  4126                                  ;   dl = int 13 drive number we booted from
  4127                                  ;   dh = media byte
  4128                                  
  4129                                  		; 20/12/2022
  4130 0000181B 88F5                    		mov	ch, dh		; 01/07/2018
  4131                                  
  4132                                  		; cl = number of floppies
  4133                                  		; ch = media byte
  4134                                  
  4135                                  		; set up local stack
  4136                                  
  4137                                  		; 20/12/2022
  4138                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4139                                  					; bios_l, bios_h set.
  4140                                  					; cl = number of floppies including fake one
  4141                                  					; ch = media byte
  4142                                  		; 20/12/2022
  4143                                  		; es = ds = cs
  4144                                  		; ss = 0
  4145                                  		; sp = 700h
  4146                                  
  4147                                  		; 20/12/2022
  4148                                  		;cli
  4149                                  		;mov	ss, dx		; set stack segment and stack pointer
  4150                                  		;mov	sp, 700h
  4151                                  		;sti
  4152                                  
  4153 0000181D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4154                                  		
  4155 0000181E 88EC                    		mov	ah, ch		; FAT ID to AH
  4156 00001820 50                      		push	ax ; (**)	; save boot drive number and media byte
  4157                                  		
  4158                                  ; let model_byte, secondary_model_byte be set here!!!
  4159                                  
  4160 00001821 B4C0                    		mov	ah, 0C0h
  4161 00001823 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4162 00001825 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4163 00001827 80FC00                  		cmp	ah, 0
  4164 0000182A 7510                    		jnz	short no_rom_system_conf
  4165                                  
  4166                                  ;		; 20/12/2022
  4167                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4168                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4169                                  ;
  4170                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4171                                  ;
  4172                                  ;		on return:
  4173                                  ;		CF = 0 if successful
  4174                                  ;		   = 1 if error
  4175                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4176                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4177                                  ;
  4178                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4179                                  ;
  4180                                  ;		Offset Size	     Description
  4181                                  ;
  4182                                  ;		  00   word   length of descriptor (8 minimum)
  4183                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4184                                  ;		  03   byte   secondary model byte
  4185                                  ;		  04   byte   BIOS revision level (zero based)
  4186                                  ;		  05   byte   feature information, see below
  4187                                  ;		  06   dword  reserved
  4188                                  
  4189                                  		; 20/12/2022
  4190                                  		; ds = cs
  4191 0000182C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4192 00001830 A2[3506]                		mov	[model_byte], al
  4193                                  		;mov	[cs:model_byte], al
  4194                                  					; get/save model byte
  4195 00001833 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4196 00001837 A2[3606]                		mov	[secondary_model_byte], al
  4197                                  		;mov	[cs:secondary_model_byte], al
  4198                                  					; get/save secondary model byte
  4199 0000183A EB0C                    		jmp	short turn_timer_on
  4200                                  ;-----------------------------------------------------------------------------
  4201                                  
  4202                                  no_rom_system_conf:			
  4203 0000183C BEFFFF                  		mov	si, 0FFFFh
  4204 0000183F 8EC6                    		mov	es, si
  4205                                  		; 20/12/2022
  4206 00001841 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4207 00001845 A2[3506]                		mov	[model_byte], al
  4208                                  		;mov	[cs:model_byte], al ; save model byte
  4209                                  turn_timer_on:				
  4210 00001848 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4211 0000184A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4212                                  					; AKPORT
  4213                                  
  4214                                  ; some olivetti m24 machines have an 8530 serial communications
  4215                                  ; chip installed at io address 50h and 52h. if we're running
  4216                                  ; on one of those, we must inhibit the normal aux port initialization
  4217                                  
  4218                                  		; 20/12/2022
  4219                                  		; ds = cs
  4220 0000184C 803E[3506]00            		cmp	byte [model_byte], 0
  4221                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4222 00001851 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4223                                  					; (except olivetti m24)
  4224 00001853 E466                    		in	al, 66h		; is 8530 installed?
  4225 00001855 A820                    		test	al, 20h
  4226 00001857 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4227 00001859 B00F                    		mov	al, 0Fh		; double check
  4228 0000185B E650                    		out	50h, al
  4229 0000185D E450                    		in	al, 50h
  4230 0000185F A801                    		test	al, 1		; this test was	copied from olivetti
  4231 00001861 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4232                                  
  4233                                  not_olivetti_m24:
  4234 00001863 B003                    		mov	al, 3		; init com4
  4235 00001865 E84008                  		call	aux_init
  4236 00001868 B002                    		mov	al, 2		; init com3
  4237 0000186A E83B08                  		call	aux_init
  4238 0000186D B001                    		mov	al, 1		; init com2
  4239 0000186F E83608                  		call	aux_init
  4240 00001872 30C0                    		xor	al, al		; init com1
  4241 00001874 E83108                  		call	aux_init
  4242                                  
  4243                                  skip_aux_port_init:			
  4244 00001877 B002                    		mov	al, 2		; init lpt3
  4245 00001879 E82408                  		call	print_init
  4246 0000187C B001                    		mov	al, 1		; init lpt2
  4247 0000187E E81F08                  		call	print_init
  4248 00001881 30C0                    		xor	al, al		; init lpt1
  4249 00001883 E81A08                  		call	print_init
  4250                                  
  4251 00001886 31D2                    		xor	dx, dx	; 0
  4252 00001888 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4253 0000188A 8EC2                    		mov	es, dx
  4254 0000188C 31C0                    		xor	ax, ax
  4255                                  		; 16/10/2022
  4256 0000188E BF3405                  		mov	di, INITSPOT	; 0534h
  4257                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4258                                  					; IBM wants 4 zeros here
  4259 00001891 AB                      		stosw
  4260 00001892 AB                      		stosw
  4261 00001893 8CC8                    		mov	ax, cs		; fetch	segment
  4262 00001895 C7066C00[E506]          		mov	word [BRKADR], cbreak
  4263                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4264                                  					; break	entry point
  4265 0000189B A36E00                  		mov	[BRKADR+2], ax		
  4266                                  		;mov	ds:6Eh,	ax	; vector for break
  4267 0000189E C706A400[5907]          		mov	word [CHROUT*4], outchr
  4268                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4269 000018A4 A3A600                  		mov	[CHROUT*4+2], ax
  4270                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4271                                  
  4272 000018A7 BF0400                  		mov	di, 4
  4273 000018AA BB[EB06]                		mov	bx, intret ; 19/10/2022
  4274                                  		;mov	bx, offset intret ; intret (cs:intret)
  4275                                  					; will initialize rest of interrupts
  4276 000018AD 93                      		xchg	ax, bx
  4277 000018AE AB                      		stosw			; location 4
  4278 000018AF 93                      		xchg	ax, bx		; cs:
  4279 000018B0 AB                      		stosw			; int 1	; location 6
  4280 000018B1 83C704                  		add	di, 4
  4281 000018B4 93                      		xchg	ax, bx
  4282 000018B5 AB                      		stosw			; location 12
  4283 000018B6 93                      		xchg	ax, bx		; cs:
  4284 000018B7 AB                      		stosw			; int 3	; location 14
  4285 000018B8 93                      		xchg	ax, bx
  4286 000018B9 AB                      		stosw			; location 16
  4287 000018BA 93                      		xchg	ax, bx		; cs:
  4288 000018BB AB                      		stosw			; int 4	; location 18
  4289                                  
  4290                                  
  4291                                  ;		; 20/12/2022
  4292                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4293                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4294                                  ;	
  4295                                  ;		50:00	byte	Print screen status byte
  4296                                  ;				 00 = PrtSc not active,
  4297                                  ;				 01 = PrtSc in progress
  4298                                  ;				 FF = error
  4299                                  ;		50:01  3 bytes	Used by BASIC
  4300                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4301                                  ;		50:05  10bytes	POST work area
  4302                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4303                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4304                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4305                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4306                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4307                                  ;		50:20	word	DOS dynamic storage
  4308                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4309                                  ;		50:30	4bytes	MODE command
  4310                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4311                                  
  4312 000018BC 89160005                		mov	[0500h], dx ; 0
  4313                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4314 000018C0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4315                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4316                                  
  4317                                  ; we need to initialize the cs:motorstartup variable from the disk
  4318                                  ; parameter table at sec9. the offsets in this table are defined in
  4319                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4320                                  
  4321 000018C4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4322                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4323                                  					; [522h+0Ah]
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327 000018C7 2EA2[2601]              		mov	[cs:motorstartup], al
  4328 000018CB 2E803E[3506]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4329 000018D1 720B                    		jb	short no_diddle	; no
  4330 000018D3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4331                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4332                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4333 000018D9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4334                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4335                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4336                                  no_diddle:				
  4337 000018DE CD12                    		int	12h		; MEMORY SIZE -
  4338                                  					; Return: AX = number of contiguous 1K blocks of memory
  4339 000018E0 B106                    		mov	cl, 6
  4340 000018E2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4341                                  		
  4342                                  		; 20/12/2022
  4343                                  		; 03/07/2018 - 27/12/2018
  4344                                  		;pop	cx ; (**)
  4345                                  		;mov	[cs:drvfat], cx
  4346                                  		
  4347 000018E4 50                      		push	ax ; (*)	; save real top	of memory
  4348                                  
  4349                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4350                                  
  4351                                  ;M068 - BEGIN
  4352                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4353                                  
  4354                                  		; 20/12/2022
  4355                                  		; ds = 0
  4356                                  
  4357                                  		;push	ds
  4358                                  		;push	bx		; pushes not required but since this
  4359                                  					; happens to be a last minute change
  4360                                  					; & since it is only init code.
  4361                                  		;xor	bx, bx
  4362                                  		;mov	ds, bx
  4363                                  
  4364                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4365                                  		;mov	bx, [2Fh*4]
  4366                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4367                                  		;mov	ds, [2Fh*4+2]
  4368                                  		; 29/09/2023
  4369 000018E5 C51EBC00                		lds	bx, [2Fh*4]
  4370                                  
  4371 000018E9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4372                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4373 000018EE 750F                    		jnz	short SkipRPL
  4374 000018F0 807F054C                		cmp	byte [bx+5], 'L'
  4375                                  		;cmp	byte ptr [bx+5], 'L'
  4376 000018F4 7509                    		jnz	short SkipRPL
  4377 000018F6 89C2                    		mov	dx, ax		; get TOM into DX
  4378 000018F8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4379 000018FB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4380 000018FD 89D0                    		mov	ax, dx
  4381                                  SkipRPL:	
  4382                                  		; 20/12/2022
  4383                                  		;pop	bx
  4384                                  		;pop	ds
  4385                                  
  4386                                  ;M068 - END
  4387                                  		; 20/12/2022
  4388                                  		; 27/12/2018
  4389 000018FF 0E                      		push	cs
  4390 00001900 1F                      		pop	ds
  4391                                  
  4392                                  		; 18/03/2019 - Retro DOS v4.0
  4393                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4394                                  		;mov	[cs:fatloc], ax	; location to read fat
  4395                                  
  4396                                  		; 01/07/2018
  4397                                  		; 08/04/2018
  4398                                  		; 28/03/2018
  4399                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4400 00001901 83E840                  		sub	ax, 64
  4401 00001904 A3[C316]                		mov	[init_bootseg], ax ; 20/12/2022
  4402                                  		;mov	[cs:init_bootseg], ax
  4403                                  
  4404                                  		; 27/12/2018 - Retro DOS v4.0
  4405                                  		;;pop	ax ; (*)	; get back real top of memory
  4406                                  		;pop	dx ; (*)
  4407                                  		; 29/09/2023 (BugFix)
  4408 00001907 58                      		pop	ax ; (*)	; get back real top of memory
  4409                                  
  4410                                  		; 20/12/2022
  4411                                  		; 27/12/2018
  4412 00001908 59                      		pop	cx ; (**)
  4413 00001909 890E[C016]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4414                                  
  4415                                  		; 20/12/2022
  4416                                  
  4417                                  		;mov	dx, 46Dh	; SYSINIT segment
  4418 0000190D BA3304                  		mov	dx, SYSINITSEG	; 17/10/2022
  4419 00001910 8EDA                    		mov	ds, dx
  4420                                  
  4421                                  ; set pointer to resident device driver chain
  4422                                  
  4423                                  		; 17/10/2022
  4424 00001912 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4425                                  		;mov	word [273h], res_dev_list
  4426                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4427                                  					; [SYSINIT+DEVICE_LIST]
  4428 00001918 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4429                                  		;mov	[275h], cs
  4430                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4431                                  
  4432 0000191C A3[9202]                		mov	[MEMORYSIZE], ax
  4433                                  		;mov	[292h], ax
  4434                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4435                                  
  4436 0000191F FEC1                    		inc	cl
  4437 00001921 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4438                                  		;mov	[296h], cl
  4439                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4440                                  
  4441 00001925 C706[7102]B207          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4442                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4443                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4444                                  					; dos_load_seg
  4445                                  
  4446                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4447                                  ; printer cards. we initialize this value to point to an iret only if
  4448                                  ;
  4449                                  ; 1) the original segment points to storage inside valid ram.
  4450                                  ;
  4451                                  ; 2) the original segment is 0F000:xxxx
  4452                                  
  4453                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4454                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4455                                  		;mov	es, ax
  4456                                  		; 20/12/2022
  4457                                  		;push	ds ; SYSINITSEG
  4458                                  		;pop	es
  4459 0000192B 8EC2                    		mov	es, dx ; SYSINITSEG
  4460 0000192D 31C0                    		xor	ax, ax ; 0
  4461 0000192F 8ED8                    		mov	ds, ax		; segment 0
  4462                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4463 00001931 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4464                                  		; 18/10/2022
  4465 00001934 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4466                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4467 00001939 7605                    		jbe	short resetintf
  4468 0000193B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4469 0000193E 750A                    		jnz	short keepintf
  4470                                  resetintf:	
  4471 00001940 C7063C00[EB06]          		mov	word [0Fh*4], intret			
  4472                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4473 00001946 8C0E3E00                		mov	word [0Fh*4+2], cs
  4474                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4475                                  keepintf:				
  4476                                  ; end important
  4477                                  
  4478                                  ; 17/10/2022
  4479                                  ; 28/12/2018 - Retro DOS v4.0
  4480                                  
  4481                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4482                                  ;
  4483                                  ; we will check if the system has ibm extended keyboard by
  4484                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4485                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4486                                  ; for the extended keyboard function. use cx as the temporary register.
  4487                                  
  4488                                  		; 20/12/2022
  4489                                  		; ds = 0
  4490                                  		;xor	cx, cx
  4491                                  		;mov	ds, cx
  4492                                  
  4493 0000194A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4494                                  
  4495                                  		; 20/12/2022
  4496                                  		; 20/03/2019
  4497 0000194E 0E                      		push	cs
  4498 0000194F 1F                      		pop	ds
  4499                                  
  4500                                  		;test	cl, 00010000b ; 10h
  4501 00001950 F6C110                  		test	cl, 10h		; extended keyboard ?
  4502 00001953 740A                    		jz	short org_key	; no, original keyboard
  4503                                  
  4504                                  		; 20/12/2022
  4505                                  		;  ds = cs
  4506 00001955 C606[DE04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4507 0000195A C606[DF04]11            		mov	byte [keysts_func], 11h
  4508                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4509                                  		;mov	byte [cs:keysts_func], 11h
  4510                                  					; change for extended keyboard functions
  4511                                  org_key:
  4512                                  
  4513                                  ; 02/06/2018 - Retro DOS v3.0
  4514                                  
  4515                                  ;**************************************************************
  4516                                  ;	will initialize the number of drives
  4517                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4518                                  ;	the indications are as follows:
  4519                                  ;
  4520                                  ;	bits	7	6	drives
  4521                                  ;		0	0	1
  4522                                  ;		0	1	2
  4523                                  ;		1	0	3
  4524                                  ;		1	1	4
  4525                                  ;**************************************************************
  4526                                  		
  4527                                  		; 20/12/2022
  4528                                  		; ds = cs		
  4529                                  		;push	cs
  4530                                  		;pop	ds
  4531                                  		; 21/12/2022
  4532                                  		;push	cs
  4533                                  		;pop	es
  4534                                  
  4535 0000195F E88508                  		call	cmos_clock_read	; If cmos clock	exists,
  4536                                  					; then set the system time according to	that.
  4537                                  					; also,	reset the cmos clock rate.
  4538                                  		; 18/10/2022
  4539                                  		;mov	word ptr BData_start, offset harddrv ;
  4540                                  					; set up pointer to hdrive
  4541                                  		; 02/10/2022
  4542 00001962 C706[0000][0C09]        		mov	word [hdrv_pat], harddrv 
  4543                                  		
  4544                                  		; 20/12/2022
  4545                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4546 00001968 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4547 00001969 30E4                    		xor	ah, ah		; chuck	fat id byte
  4548 0000196B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4549 0000196E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4550 00001971 D1E0                    		shl	ax, 1
  4551 00001973 0106[3A17]              		add	[last_dskdrv_table], ax
  4552                                  
  4553                                  		; 14/12/2023
  4554                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4555                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4556                                  		; ---------------------------------- 
  4557                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  4558                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  4559                                  		; ........
  4560 00001977 1E                      		push    ds
  4561 00001978 B800F0                  		mov     ax, 0F000h
  4562 0000197B 8ED8                    		mov     ds, ax
  4563                                  
  4564 0000197D 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  4565 00001983 751F                    		jne	short skip_mode2
  4566 00001985 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  4567 0000198B 7517                    		jne	short skip_mode2
  4568 0000198D 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  4569 00001993 750F                    		jne	short skip_mode2
  4570                                  
  4571 00001995 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  4572 00001998 CD15                    		int	15h
  4573 0000199A 7208                    		jc	short skip_mode2
  4574                                  		; 10/12/2023
  4575                                  		; PCDOS 7.1 IBMBIO.COM
  4576                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  4577                                  					; (MSDOS 6.0)
  4578                                  		; MSDOS 6.22 IO.SYS
  4579 0000199C 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  4580 0000199F B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  4581 000019A2 CD15                    		int	15h
  4582                                  skip_mode2:
  4583 000019A4 1F                      		pop	ds
  4584                                  		; ........
  4585                                  
  4586 000019A5 B280                    		mov	dl, 80h
  4587 000019A7 B408                    		mov	ah, 8
  4588 000019A9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4589                                  					; DL = drive number
  4590                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4591                                  					; DL = number of consecutive drives
  4592                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4593 000019AB 7204                    		jc	short enddrv
  4594 000019AD 8816[3917]              		mov	[hnum], dl	; save number of hard disk drives
  4595                                  enddrv:
  4596                                  		; 21/12/2022
  4597 000019B1 0E                      		push	cs
  4598 000019B2 07                      		pop	es
  4599                                  
  4600                                  ; scan the list of drives to determine their type. we have three flavors of
  4601                                  ; diskette drives:
  4602                                  ;
  4603                                  ;   48tpi drives    we do nothing special for them
  4604                                  ;   96tpi drives    mark the fact that they have changeline support.
  4605                                  ;   3.5"  drives    mark changeline support and small.
  4606                                  ;
  4607                                  ; the following code uses registers for certain values:
  4608                                  ;
  4609                                  ;   dl - physical drive
  4610                                  ;   ds:di - points to current bds
  4611                                  ;   cx - flag bits for bds
  4612                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4613                                  					
  4614 000019B3 30D2                    		xor	dl, dl
  4615                                  
  4616                                  		; 20/12/2022
  4617                                  		; ds = cs
  4618                                  		; 17/06/2018		 
  4619                                  		;push	cs
  4620                                  		;pop	ds
  4621                                  
  4622 000019B5 C606[2C01]09            		mov	byte [eot], 9
  4623 000019BA BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4624                                  					; to set aside two bdss	for the	two fake floppy	drives
  4625                                  
  4626                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4627                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4628                                  
  4629                                  ; check to see if we are faking floppy drives. if not we don't
  4630                                  ; do anything special. if we are faking floppy drives we need
  4631                                  ; to set aside two bdss for the two fake floppy drives. we
  4632                                  ; don't need to initalise any fields though. so starting at start_bds
  4633                                  ; use the link field in the bds structure to go to the second bds
  4634                                  ; in the list and initalise it's link field to -1 to set the end of
  4635                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4636                                  ; the bds for harddrives.
  4637                                  
  4638 000019BD 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  4639 000019C2 750B                    		jnz	short loop_drive
  4640 000019C4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4641                                  					; di <-	first bds link
  4642 000019C6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4643                                  					; di <-	second bds link
  4644 000019C8 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4645 000019CC E90801                  		jmp	dohard		; allocate/initialise bds for harddrives
  4646                                  ;-----------------------------------------------------------------------------
  4647                                  
  4648                                  loop_drive:				
  4649 000019CF 3A16[7500]              		cmp	dl, [drvmax]
  4650 000019D3 7203                    		jb	short got_more
  4651 000019D5 E9FB00                  		jmp	done_drives
  4652                                  ;-----------------------------------------------------------------------------
  4653                                  
  4654                                  got_more:				
  4655                                  		; 14/12/2023
  4656                                  		;xor	cx, cx		; zero all flags
  4657                                  
  4658 000019D8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4659                                  					; get next bds
  4660 000019DA B600                    		mov	dh, 0		; ff48tpi
  4661                                  					; set form factor to 48	tpi
  4662 000019DC C606[C816]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4663                                  		
  4664                                  		; 21/12/2022
  4665                                  		;push	ds
  4666                                  		;push	di
  4667                                  		; 14/12/2023 ; *
  4668                                  		;push	cx ; *+ ; cx = 0
  4669 000019E1 52                      		push	dx ; *+
  4670 000019E2 57                      		push	di ; *
  4671 000019E3 06                      		push	es ; es=cs=ds ; 21/12/2022
  4672                                  		; 14/12/2023
  4673 000019E4 52                      		push	dx ; *++
  4674                                  
  4675 000019E5 B408                    		mov	ah, 8
  4676 000019E7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4677                                  					; DL = drive number
  4678                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4679                                  					; DL = number of consecutive drives
  4680                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4681                                  		; 14/12/2023
  4682 000019E9 5B                      		pop	bx ; *++
  4683                                  		;jc	short noparmsfromrom
  4684                                  		; 14/12/2023
  4685 000019EA 7303                    		jnc	short chk_pfr
  4686 000019EC E98000                  		jmp	noparmsfromrom
  4687                                  
  4688                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4689                                  ; in this case, we are going to put bogus informations to bds table.
  4690                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4691                                  ; they are calculated at the later time. this is just for the diagnostic
  4692                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4693                                  ; this should only happen with drive b.
  4694                                  
  4695                                  chk_pfr:
  4696 000019EF 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4697 000019F2 7505                    		jnz	short pfr_ok
  4698                                  
  4699                                  		;mov	ch, 39		; rom gave wrong info.
  4700                                  		;mov	cl, 9		; let's default to 360k.
  4701                                  		; 20/12/2022
  4702 000019F4 B90927                  		mov	cx, 2709h
  4703                                  
  4704 000019F7 B601                    		mov	dh, 1
  4705                                  pfr_ok:					
  4706 000019F9 FEC6                    		inc	dh		; make number of heads 1-based
  4707 000019FB FEC5                    		inc	ch		; make number of cylinders 1-based
  4708 000019FD 8836[C616]              		mov	[num_heads], dh	; save parms returned by rom
  4709 00001A01 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4710 00001A04 880E[C716]              		mov	[sec_trk], cl
  4711 00001A08 882E[C816]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4712                                  
  4713                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4714                                  
  4715 00001A0C 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4716                                  		;jbe	short eot_ok
  4717                                  		; 09/12/2022
  4718                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4719                                  		; 14/08/2023
  4720 00001A10 7604                    		jbe	short eotok
  4721 00001A12 880E[2C01]              		mov	[eot], cl
  4722                                  ;eot_ok:					
  4723                                  eotok:
  4724                                  
  4725                                  ; 14/12/2023
  4726                                  ; 13/12/2023 ('chk_changeline' procedure)
  4727                                  %if 0
  4728                                  		pop	es ; es=cs=ds ; 21/12/2022
  4729                                  		pop	di ; 13/12/2023 ; *
  4730                                  		; 13/12/2023 ; *
  4731                                  		pop	dx ; *+
  4732                                  		;pop	cx ; *+
  4733                                  		;pop	di
  4734                                  		; 21/12/2022
  4735                                  		;pop	ds
  4736                                  
  4737                                  		; 14/12/2023
  4738                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4739                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4740                                  
  4741                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4742                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4743                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4744                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4745                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4746                                  		;  -- ref: Ralf Brown's Interrupt List --
  4747                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4748                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4749                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4750                                  
  4751                                  		; 13/12/2023
  4752                                  		;push	cx ; *+ ; save flags (cx=0)
  4753                                  		;push	dx ; *+ ; save drive number (DL)
  4754                                  		; bl = dl = drive number ; *++
  4755                                  
  4756                                  ; Check	for presence of	changeline
  4757                                  
  4758                                  		mov	ah, 15h
  4759                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4760                                  					; DL = drive ID
  4761                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4762                                  					; CX:DX	= number of sectors on the media
  4763                                  		; 13/12/2023
  4764                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4765                                  		;pop	cx ; *+ ; restore flags (cx=0)
  4766                                  		mov	cx, 0 ; 13/12/2023
  4767                                  		mov	dx, bx ; *++ ; bl = drive number
  4768                                  		jc	short changeline_done
  4769                                  
  4770                                  		cmp	ah, 2		; check	for presence of	changeline
  4771                                  		jnz	short changeline_done
  4772                                  
  4773                                  ; we have a drive with change line support.
  4774                                  
  4775                                  		or	cl, 2		; fchangeline
  4776                                  					; signal type
  4777                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4778                                  %endif
  4779                                  		; 14/12/2023
  4780 00001A16 E83800                  		call	chk_changeline
  4781                                  		;jc	short changeline_done
  4782                                  
  4783                                  ; we now try to set up the form factor for the types of media that we know
  4784                                  ; and can recognise. for the rest, we set the form factor as "other".
  4785                                  
  4786                                  changeline_done:			
  4787 00001A19 803E[C816]28            		cmp	byte [num_cyln], 40
  4788 00001A1E 750B                    		jnz	short try_80
  4789 00001A20 803E[C716]09            		cmp	byte [sec_trk], 9
  4790 00001A25 765F                    		jbe	short nextdrive
  4791                                  gotother:				
  4792 00001A27 B607                    		mov	dh, 7		; ffOther
  4793                                  					; we have a "strange" medium
  4794 00001A29 EB5B                    		jmp	short nextdrive
  4795                                  ;-----------------------------------------------------------------------------
  4796                                  
  4797                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4798                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4799                                  
  4800                                  try_80:					
  4801 00001A2B 803E[C816]50            		cmp	byte [num_cyln], 80
  4802 00001A30 75F5                    		jnz	short gotother
  4803 00001A32 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4804 00001A34 803E[C716]24            		cmp	byte [sec_trk], 36 ; is it	?
  4805 00001A39 744B                    		jz	short nextdrive	; yeah,	go update
  4806                                  
  4807                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4808                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4809                                  		;mov	dh, ff144
  4810                                  		;cmp	byte [sec_trk], 18
  4811                                  		;je	short nextdrive
  4812                                  
  4813 00001A3B 803E[C716]0F            		cmp	byte [sec_trk], 15
  4814 00001A40 740B                    		jz	short got96
  4815                                  		
  4816 00001A42 803E[C716]09            		cmp	byte [sec_trk], 9
  4817 00001A47 75DE                    		jnz	short gotother
  4818                                  		
  4819 00001A49 B602                    		mov	dh, 2 ; ffSmall
  4820 00001A4B EB39                    		jmp	short nextdrive
  4821                                  ; ----------------------------------------------------------------------------
  4822                                  
  4823                                  got96:					
  4824 00001A4D B601                    		mov	dh, 1 ; ff96tpi
  4825 00001A4F EB35                    		jmp	short nextdrive
  4826                                  
  4827                                  ; ----------------------------------------------------------------------------
  4828                                  		
  4829                                  		; 14/12/2023
  4830                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4831                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4832                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4833                                  		; check change line feature (and set fhave96 if there is)
  4834                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  4835                                  chk_changeline:
  4836 00001A51 59                      		pop	cx ; near call return address
  4837                                  
  4838 00001A52 07                      		pop	es ; es=cs=ds ; 21/12/2022
  4839 00001A53 5F                      		pop	di ; 12/12/2023 ; *
  4840                                  		; 12/12/2023 ; *
  4841 00001A54 5A                      		pop	dx ; *+
  4842                                  
  4843 00001A55 51                      		push	cx ; near call return address
  4844                                  
  4845                                  ; Check	for presence of	changeline
  4846                                  
  4847                                  		; 12/12/2023 - BugFix ; * ; +*+
  4848                                  		; (MSDOS 6.22 IO.SYS has a bug here,
  4849                                  		;  it does not save CX,DX registers before INT 13h func 15h)
  4850                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4851                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4852                                  		;  -- ref: Ralf Brown's Interrupt List --
  4853                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4854                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4855                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4856                                  
  4857                                  		; 12/12/2023
  4858                                  		;push	dx ; *+ ; save drive number (DL) - Retro DOS v4.2
  4859                                  		; bl = dl = drive number ; *++
  4860                                  
  4861 00001A56 B415                    		mov	ah, 15h
  4862 00001A58 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4863                                  					; DL = drive ID
  4864                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4865                                  					; CX:DX	= number of sectors on the media
  4866                                  		; 12/12/2023
  4867                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4868 00001A5A B90000                  		mov	cx, 0  ; flags
  4869 00001A5D 89DA                    		mov	dx, bx ; *++ ; bl = drive number
  4870 00001A5F 720D                    		jc	short chk_chgl_1
  4871                                  
  4872 00001A61 80FC02                  		cmp	ah, 2		; is there changeline?
  4873 00001A64 7508                    		jne	short chk_chgl_2 ; *
  4874                                  
  4875 00001A66 80C902                  		or	cl, 2
  4876                                  		;or	cl, ah ; 2
  4877 00001A69 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  4878                                  		; cf = 0
  4879                                  chk_chgl_1:
  4880                                  chk_chgl_2:
  4881 00001A6E C3                      		retn
  4882                                  
  4883                                  ;chk_chgl_2:	; *
  4884                                  ;		; 10/12/2023
  4885                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  4886                                  ;		;stc
  4887                                  ;		; cf = 1
  4888                                  ;		retn
  4889                                  
  4890                                  ; ----------------------------------------------------------------------------
  4891                                  
  4892                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4893                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4894                                  
  4895                                  noparmsfromrom:
  4896                                  
  4897                                  ; 14/12/2023				
  4898                                  ; 13/12/2023 ('chk_changeline' procedure)
  4899                                  %if 0				
  4900                                  		pop	es ; es=cs=ds ; 21/12/2022
  4901                                  		; 13/12/2023
  4902                                  		; bl = drive number ; *++
  4903                                  		; 13/12/2023 ; *
  4904                                  		pop	di ; *
  4905                                  		pop	dx ; *+
  4906                                  		;pop	cx ; *+ ; cx = 0 ; 13/12/2023
  4907                                  		; 13/12/2023
  4908                                  		;pop	di
  4909                                  		; 21/12/2022
  4910                                  		;pop	ds
  4911                                  
  4912                                  		mov	ah, 15h
  4913                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4914                                  					; DL = drive ID
  4915                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4916                                  					; CX:DX	= number of sectors on the media
  4917                                  		; 13/12/2023 - BugFix ; +*+
  4918                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4919                                  		; (some ROMBIOSs fix this BUG but return with false)
  4920                                  		; -- ref: Ralf Brown's Interrupt List --
  4921                                  		;pop	cx ; *+
  4922                                  		mov	cx, 0 ; 13/12/2023
  4923                                  		mov	dx, bx ; *++
  4924                                  		jc	short nextdrive
  4925                                  
  4926                                  		cmp	ah, 2		; is there changeline?
  4927                                  		jnz	short nextdrive
  4928                                  
  4929                                  		or	cl, 2
  4930                                  		mov	byte [fhave96], 1 ; fchangeline
  4931                                  %endif
  4932                                  		; 14/12/2023
  4933 00001A6F E8DFFF                  		call	chk_changeline
  4934 00001A72 7212                    		jc	short nextdrive
  4935                                  		
  4936                                  		; change line support, [fhave96] = 1
  4937                                  
  4938 00001A74 C606[C816]50            		mov	byte [num_cyln], 80
  4939 00001A79 B601                    		mov	dh, 1
  4940 00001A7B B00F                    		mov	al, 15
  4941 00001A7D 3A06[2C01]              		cmp	al, [eot]
  4942 00001A81 7603                    		jbe	short nextdrive
  4943 00001A83 A2[2C01]                		mov	[eot], al
  4944                                  ; ----------------------------------------------------------------------------
  4945                                  
  4946                                  ;eot_ok2:
  4947                                  nextdrive:				
  4948 00001A86 80C920                  		or	cl, 20h	; fi_own_physical
  4949                                  					; set this true	for all	drives
  4950 00001A89 88D7                    		mov	bh, dl		; save int13 drive number
  4951                                  
  4952                                  ; we need to do special things if we have a single drive system and are setting
  4953                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4954                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4955                                  ; we detect the presence of this situation by examining the flag single for the
  4956                                  ; value 2.
  4957 00001A8B 803E[7800]02            		cmp	byte [single], 2
  4958 00001A90 7505                    		jnz	short not_special
  4959 00001A92 FECF                    		dec	bh		; int13	drive number same for logical drive
  4960 00001A94 80F120                  		xor	cl, 20h	; fi_own_physical
  4961                                  					; reset	ownership flag for logical drive
  4962                                  not_special:
  4963                                  
  4964                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4965                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4966                                  ; form factor is of type "ffother".
  4967                                  				
  4968 00001A97 31C0                    		xor	ax, ax		; fill BDS for drive
  4969 00001A99 A0[C616]                		mov	al, [num_heads]
  4970 00001A9C 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4971 00001A9F A0[C716]                		mov	al, [sec_trk]
  4972 00001AA2 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4973 00001AA5 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4974 00001AA8 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4975 00001AAB 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4976 00001AAE 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4977 00001AB1 8A1E[C816]              		mov	bl, [num_cyln]
  4978 00001AB5 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4979 00001AB8 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4980 00001ABD 7510                    		jnz	short no_single
  4981                                  		; 14/12/2023
  4982 00001ABF FE06[7800]              		inc	byte [single]	; [single] = 2
  4983                                  		;mov	byte [single], 2 ; Don't forget we have
  4984                                  					; single drive system
  4985                                  		; 18/12/2022
  4986 00001AC3 80C910                  		or	cl, 10h
  4987                                  		;or	cx, 10h	; fi_am_mult
  4988                                  					; set that this	is one of several drives
  4989 00001AC6 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4990                                  					; save flags
  4991 00001AC9 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4992                                  					; move to next BDS in list
  4993 00001ACB FEC2                    		inc	dl		; add a	number
  4994 00001ACD EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4995                                  ; ----------------------------------------------------------------------------
  4996                                  
  4997                                  no_single:				
  4998                                  		;inc	dl
  4999                                  		; 18/12/2022
  5000 00001ACF 42                      		inc	dx
  5001 00001AD0 E9FCFE                  		jmp	loop_drive
  5002                                  ; ----------------------------------------------------------------------------
  5003                                  
  5004                                  done_drives:	
  5005                                  		;mov	word [di+BDS.link], -1			
  5006 00001AD3 C705FFFF                		mov	word [di], -1	; set link to null
  5007                                  
  5008                                  ; set up all the hard drives in	the system
  5009                                  
  5010                                  		; 20/12/2022
  5011                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  5012                                  dohard:					
  5013 00001AD7 8A36[3917]              		mov	dh, [hnum]
  5014 00001ADB 08F6                    		or	dh, dh		; done if no hardfiles
  5015 00001ADD 7459                    		jz	short static_configure
  5016 00001ADF B280                    		mov	dl, 80h
  5017                                  dohard1:				
  5018 00001AE1 52                      		push	dx
  5019 00001AE2 8B3E[3C17]              		mov	di, [end_of_bdss]
  5020 00001AE6 8A1E[7500]              		mov	bl, [drvmax]
  5021 00001AEA B700                    		mov	bh, 0		; first	primary	partition (or active)
  5022 00001AEC E8CA01                  		call	sethard
  5023 00001AEF 7208                    		jb	short hardfile_err
  5024 00001AF1 E8A906                  		call	dmax_check	; error	if already 26 drives
  5025 00001AF4 7303                    		jnb	short hardfile_err
  5026 00001AF6 E8B906                  		call	xinstall_bds	; insert new bds into linked list
  5027                                  hardfile_err:
  5028 00001AF9 5A                      		pop	dx
  5029                                  		;inc	dl		; next hard drive
  5030                                  		; 14/12/2023
  5031 00001AFA 42                      		inc	dx
  5032 00001AFB FECE                    		dec	dh
  5033 00001AFD 75E2                    		jnz	short dohard1
  5034                                  
  5035                                  ; end of physical drive	initialization
  5036                                  
  5037                                  ; *** do not change the position of the following statement.
  5038                                  ; *** domini routine will use [drvmax] value for the start of the logical
  5039                                  ; *** drive number of mini disk(s).
  5040                                  					
  5041 00001AFF E8AF05                  		call	domini		; for setting up mini disks, if found
  5042                                  
  5043                                  ; -- begin added section
  5044                                  
  5045 00001B02 8A36[3917]              		mov	dh, [hnum]	; we already know this is >0
  5046 00001B06 B280                    		mov	dl, 80h
  5047                                  dohardx1:				
  5048 00001B08 B701                    		mov	bh, 1		; do all subsequent primary partitions
  5049                                  dohardx2:				
  5050 00001B0A 52                      		push	dx
  5051 00001B0B 53                      		push	bx
  5052 00001B0C 8B3E[3C17]              		mov	di, [end_of_bdss]
  5053 00001B10 8A1E[7500]              		mov	bl, [drvmax]
  5054 00001B14 E8A201                  		call	sethard
  5055 00001B17 720E                    		jb	short dohardx4	; move to next hardfile	if error
  5056 00001B19 E88106                  		call	dmax_check	; make sure <=26 drives
  5057 00001B1C 7309                    		jnb	short dohardx4	; skip if error
  5058 00001B1E E89106                  		call	xinstall_bds	; insert new bds into linked list
  5059 00001B21 5B                      		pop	bx		; get partition	number
  5060 00001B22 5A                      		pop	dx		; restore physical drive counts
  5061 00001B23 FEC7                    		inc	bh
  5062 00001B25 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  5063                                  ; ----------------------------------------------------------------------------
  5064                                  
  5065                                  dohardx4:
  5066 00001B27 5B                      		pop	bx		; unjunk partition number from stack
  5067 00001B28 5A                      		pop	dx		; restore physical drive counts
  5068                                  		;inc	dl		; next hard drive
  5069                                  		; 14/12/2023
  5070 00001B29 42                      		inc	dx
  5071 00001B2A FECE                    		dec	dh
  5072 00001B2C 75DA                    		jnz	short dohardx1
  5073                                  
  5074                                  ; -- end changed section
  5075                                  
  5076                                  ;******************************************************************************
  5077                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5078                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5079                                  ; than two diskette drives
  5080                                  ;
  5081                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5082                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5083                                  ;		letters. to do this, scan for disk drives and assign logical
  5084                                  ;		drive number starting from 2 and then rescan diskette drives
  5085                                  ;		and assign next to the last logical drive number of last disk
  5086                                  ;		drive to the 3rd and 4th diskette drives.
  5087                                  ;******************************************************************************
  5088                                  
  5089 00001B2E 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5090                                  		;jbe	short static_configure ; no - no need for remapping
  5091 00001B33 7603                    		jbe	short no_remap
  5092 00001B35 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  5093                                  no_remap:
  5094                                  
  5095                                  ; End of drive initialization.
  5096                                  
  5097                                  ; ----------------------------------------------------------------------------
  5098                                  
  5099                                  ;we now decide, based on the configurations available so far, what
  5100                                  ;code or data we need to keep as a stay resident code. the following table
  5101                                  ;shows the configurations under consideration. they are listed in the order
  5102                                  ;of their current position memory.
  5103                                  ;
  5104                                  ;configuration will be done in two ways:
  5105                                  ;
  5106                                  ;first, we are going to set "static configuration". static configuration will
  5107                                  ;consider from basic configuration to endof96tpi configuration. the result
  5108                                  ;of static configuration will be the address the dynamic configuration will
  5109                                  ;use to start with.
  5110                                  ;
  5111                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5112                                  ;involves possible relocation of code or data. dynamic configuration routine
  5113                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5114                                  ;code individually. after these operation, [dosdatasg] will be set.
  5115                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5116                                  
  5117                                  ; -- begin changed section
  5118                                  ;
  5119                                  ;   1.	 basic configuration for msbio (endfloppy)
  5120                                  ;   2.   end96tpi	; a system that supports "change line error"
  5121                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5122                                  ;   4.	 endatrom	;some of at rom fix module.
  5123                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5124                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5125                                  ;
  5126                                  
  5127                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5128                                  
  5129                                  static_configure:			
  5130 00001B38 8B3E[3C17]              		mov	di, [end_of_bdss]
  5131 00001B3C 81FF[0D09]              		cmp	di, bdss	; 19/10/2022
  5132                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5133 00001B40 750D                    		jnz	short dynamic_configure	; that's the end, then
  5134                                  		; 18/10/2022
  5135 00001B42 BF[0D09]                		mov	di, end96tpi
  5136                                  		;mov	di, offset harddrv ; end96tpi
  5137                                  					; keep everything up to	end96tpi
  5138 00001B45 803E[7700]00            		cmp	byte [fhave96], 0
  5139 00001B4A 7503                    		jnz	short dynamic_configure
  5140                                  		
  5141 00001B4C BF[F208]                		mov	di, endfloppy
  5142                                  dynamic_configure:
  5143                                  		; 20/12/2022
  5144                                  		;push	cs
  5145                                  		;pop	es
  5146                                  		
  5147                                  		; 14/12/2023
  5148                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  5149                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  5150                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1BEEh)
  5151 00001B4F FC                      		cld	; clear direction flag is not necessary here !?
  5152                                  			; because there will not be a running program
  5153                                  			; which will set direction flag as backward (std)
  5154                                  
  5155                                  ; -- end changed section
  5156                                  
  5157                                  		; 20/12/2022
  5158                                  		; ds = cs <> es
  5159                                  		; ss = 0
  5160                                  		; sp = 700h
  5161                                  
  5162                                  		; 14/12/2023
  5163 00001B50 BE00F0                  		mov	si, 0F000h
  5164 00001B53 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5165                                  
  5166 00001B55 803E[3506]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5167                                  		;jnz	short checkcmosclock
  5168                                  		; 14/12/2023
  5169 00001B5A 751E                    		jnz	short checkcompaqbug ; no
  5170 00001B5C 803E[3917]00            		cmp	byte [hnum], 0	; No hard file?
  5171                                  		;jz	short checkcmosclock
  5172 00001B61 7417                    		jz	short checkcompaqbug
  5173 00001B63 97                      		xchg	ax, di		; save allocation pointer in ax
  5174                                  		; 14/12/2023
  5175                                  		;mov	si, 0F000h
  5176                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5177 00001B64 BE[4217]                		mov	si, bios_date	; "01/10/84"
  5178 00001B67 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5179 00001B6A B90900                  		mov	cx, 9		; bdate_l
  5180                                  					; Only patch ROM for bios 01/10/84
  5181 00001B6D F3A6                    		repe cmpsb		; check	for date + zero	on end
  5182 00001B6F 97                      		xchg	ax, di		; restore allocation pointer
  5183                                  
  5184                                  ; M015 -- begin changes
  5185                                  
  5186                                  		;jnz	short checkcmosclock
  5187                                  		; 02/10/2022
  5188 00001B70 7508                    		jnz	short checkcompaqbug
  5189                                  
  5190                                  ; install at rom fix
  5191                                  
  5192                                  		; 19/10/2022
  5193                                  		;mov	cx, offset endatrom
  5194 00001B72 B9[0014]                		mov	cx, endatrom
  5195                                  		;mov	si, offset ibm_disk_io
  5196 00001B75 BE[D212]                		mov	si, ibm_disk_io
  5197 00001B78 EB46                    		jmp	short install_int13_patch
  5198                                  ; ----------------------------------------------------------------------------
  5199                                  
  5200                                  ; M065 -- begin changes
  5201                                  ;
  5202                                  ; On certain systems with Western Digital disk controllers, the
  5203                                  ; following detection scheme caused an unpredictable and serious
  5204                                  ; failure. In particular, they've implemented a nonstandard
  5205                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5206                                  ; what happens to be at es:[bx] and other memory locations indexed
  5207                                  ; off of it.
  5208                                  ;
  5209                                  ; Compaq was unable to tell us exactly which kind of systems have
  5210                                  ; the bug, except that they guarantee that the bug was fixed in
  5211                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5212                                  ; string, and then look for date codes before 08/04/86 to decide
  5213                                  ; when to install the hook.
  5214                                  
  5215                                  ;checkcmosclock:
  5216                                  ; 02/10/2022				
  5217                                  checkcompaqbug:
  5218                                  		; 20/12/2022
  5219                                  		; es = 0F000h
  5220                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5221                                  		;mov	es, ax
  5222                                  
  5223                                  		; 19/10/2022
  5224 00001B7A 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5225                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5226 00001B81 754B                    		jnz	short not_compaq_patch
  5227 00001B83 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5228                                  		;cmp	word ptr es:0FFECh, 'PM'
  5229 00001B8A 7542                    		jnz	short not_compaq_patch
  5230 00001B8C 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5231                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5232 00001B93 7539                    		jnz	short not_compaq_patch
  5233                                  
  5234                                  ; We're running on a COMPAQ. Now look at the date code.
  5235                                  
  5236 00001B95 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5237 00001B99 86E0                    		xchg	ah, al
  5238 00001B9B 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5239                                  		;cmp	ax, '86'        ; 3836h
  5240                                  					; is it	86?
  5241 00001B9E 772E                    		ja	short not_compaq_patch
  5242 00001BA0 7218                    		jb	short do_compaq_patch
  5243 00001BA2 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5244 00001BA6 86E0                    		xchg	ah, al
  5245 00001BA8 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5246                                  		;cmp	ax, '08'        ; 3038h
  5247                                  					; is it	08?
  5248 00001BAB 7721                    		ja	short not_compaq_patch
  5249 00001BAD 720B                    		jb	short do_compaq_patch
  5250 00001BAF 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5251 00001BB3 86E0                    		xchg	ah, al
  5252 00001BB5 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5253                                  		;cmp	ax, '04'        ; 3034h
  5254                                  					; is it	04?
  5255 00001BB8 7314                    		jnb	short not_compaq_patch
  5256                                  
  5257                                  do_compaq_patch:			
  5258 00001BBA B9[2114]                		mov	cx, end_compaq_i13hook
  5259                                  		;mov	si, endatrom
  5260                                  		; 14/12/2023
  5261 00001BBD BE[0014]                		mov	si, compaq_disk_io ; endatrom
  5262                                  
  5263                                  install_int13_patch:			
  5264 00001BC0 0E                      		push	cs
  5265 00001BC1 07                      		pop	es
  5266                                  		; 18/10/2022
  5267 00001BC2 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5268 00001BC6 8C0E[B600]              		mov	[Orig13+2], cs
  5269 00001BCA 29F1                    		sub	cx, si		; size of rom fix module
  5270 00001BCC F3A4                    		rep movsb		; relocate it
  5271                                  
  5272                                  ; M065 -- end changes
  5273                                  
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  not_compaq_patch:			; M065
  5276                                  		; 17/10/2022
  5277                                  checkcmosclock:	
  5278                                  		; 18/10/2022		
  5279 00001BCE 0E                      		push	cs
  5280 00001BCF 07                      		pop	es
  5281                                  
  5282                                  		; 20/12/2022
  5283                                  		; ds = cs = es
  5284                                  		; ss = 0
  5285                                  		; sp = 700h
  5286                                  
  5287 00001BD0 803E[EC04]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5288 00001BD5 7518                    		jnz	short checkk09	; no
  5289                                  
  5290 00001BD7 893E[FF04]              		mov	word [daycnttoday], di
  5291                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5292 00001BDB B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5293 00001BDE BE[2214]                		mov	si, daycnt_to_day
  5294 00001BE1 F3A4                    		rep movsb
  5295 00001BE3 893E[FB04]              		mov	word [bintobcd], di
  5296                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5297                                  					; let original segment stay
  5298 00001BE7 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5299 00001BEA BE[F314]                		mov	si, bin_to_bcd
  5300 00001BED F3A4                    		rep movsb
  5301                                  checkk09:				
  5302 00001BEF 57                      		push	di ; ? ; save ? ; 20/12/2022
  5303 00001BF0 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5304 00001BF3 B301                    		mov	bl, 1		; wait for 1 clock tick
  5305 00001BF5 268A3D                  		mov	bh, [es:di]
  5306 00001BF8 F9                      		stc			; Assume we will fail
  5307 00001BF9 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5308                                  					; AL = condition type, BH = condition compare or mask value
  5309                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5310                                  					; DX = I/O port	address	if AL bit 4 set
  5311                                  					; 14/12/2023
  5312                                  					; ES:DI = user byte if AL bit 4 clear
  5313 00001BFB 5F                      		pop	di ; ?
  5314 00001BFC 721B                    		jc	short configdone ; 20/12/2022
  5315                                  
  5316 00001BFE C606[7900]01            		mov	byte [fhavek09], 1
  5317                                  					; remember we have a k09 type
  5318 00001C03 1E                      		push	ds
  5319 00001C04 31C0                    		xor	ax, ax
  5320 00001C06 8ED8                    		mov	ds, ax
  5321                                  		
  5322 00001C08 893EB001                		mov	[6Ch*4], di
  5323                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5324                                  					; new int 6ch handler
  5325                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5326 00001C0C 8C0EB201                		mov	word [6Ch*4+2], cs
  5327 00001C10 1F                      		pop	ds
  5328                                  		; 20/12/2022
  5329                                  		; ds = cs = es
  5330 00001C11 BE[FE14]                		mov	si, int6c
  5331 00001C14 B9C201                  		mov	cx, endk09-int6c ; 459
  5332                                  		;mov	cx, 459		; endk09 - int6c
  5333                                  					; size of k09 routine
  5334 00001C17 F3A4                    		rep movsb		;
  5335                                  					; set up config	stuff for sysinit
  5336                                  ; ----------------------------------------------------------------------------
  5337                                  ; Set up config stuff for SYSINIT
  5338                                  
  5339                                  ; 17/10/2022
  5340                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5341                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5342                                  ; 09/12/2022
  5343                                  SETDRIVE equ SetDrive
  5344                                  GETBP equ GetBp
  5345                                  		
  5346                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5347                                  configdone:
  5348                                  		; 14/12/2023
  5349                                  		; ds = cs
  5350                                  		;push	cs		; di is	final ending address of	msbio.
  5351                                  		;pop	ds
  5352                                  		
  5353 00001C19 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5354                                  		; 10/12/2022
  5355                                  		;shr	di, 1
  5356                                  		;shr	di, 1
  5357                                  		;shr	di, 1
  5358                                  		;shr	di, 1
  5359 00001C1C B104                    		mov	cl, 4
  5360 00001C1E D3EF                    		shr	di, cl		
  5361                                  		; 10/12/2022
  5362                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5363                                  		; 19/10/2022 - Temporary !
  5364                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5365                                  		; 14/08/2023
  5366 00001C20 83C770                  		add	di, 70h
  5367 00001C23 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5368                                  
  5369                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5370                                  
  5371                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5372                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5373                                  	     
  5374                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5375                                  
  5376                                  ; 14/12/2023
  5377                                  ; ----------------------------------------------------------------------------
  5378                                  ; ----------------------------------------------------------------------------
  5379                                  %if 0
  5380                                  		mov	ax, [drvfat]	; get drive and	fat id
  5381                                  		; 22/12/2022
  5382                                  		; Note: SETDRIVES uses AL (drive number) only
  5383                                  		mov	bp, SETDRIVE
  5384                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5385                                  					; at 2C7h:4D7h = 70h:2A47h
  5386                                  		push	cs		; simulate far call
  5387                                  		call	call_bios_code	; get bds for drive
  5388                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5389                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5390                                  		push	cs
  5391                                  		call	call_bios_code
  5392                                  
  5393                                  	; resort to funky old segment definitions for now
  5394                                  
  5395                                  		; 22/12/2022
  5396                                  		;push	es		; copy bds to ds:di
  5397                                  		;pop	ds
  5398                                  
  5399                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5400                                  	;
  5401                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5402                                  	;	  back. Apparently it was what actually setup es: for the following
  5403                                  	; cas----
  5404                                  
  5405                                  		; 22/12/2022
  5406                                  		;xor	di, di
  5407                                  		;mov	al, [es:di]	; get fat id byte
  5408                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5409                                  		;mov	[es:drvfat+1], al
  5410                                  		;mov	ax, [es:drvfat]
  5411                                  		
  5412                                  		; 22/12/2022
  5413                                  		; ds = cs
  5414                                  	;;;	mov	al, [drvfat]
  5415                                  
  5416                                  	; cas -- why do a SECOND setdrive here???
  5417                                  
  5418                                  		; 22/12/2022
  5419                                  		;push	es		; save whatever's in es
  5420                                  		;push	ds		; copy bds to es:di
  5421                                  		;pop	es
  5422                                  		;push	cs		; copy Bios_Data to ds
  5423                                  		;pop	ds
  5424                                  	
  5425                                  	; 22/12/2022
  5426                                  	;;;	mov	bp, SETDRIVE
  5427                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5428                                  	;;;	push	cs		; simulate far call
  5429                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5430                                  	
  5431                                  		; 22/12/2022
  5432                                  		;push	es		; copy bds back to ds:di
  5433                                  		;pop	ds
  5434                                  		;pop	es		; pop whatever was in es
  5435                                  
  5436                                  	; Now we load in the MSDOS.SYS file
  5437                                  
  5438                                  	; 22/12/2022
  5439                                  	; -----
  5440                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5441                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5442                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5443                                  	;				; get size of fat on media
  5444                                  	;	;mov	es:16DEh, bl
  5445                                  	;	mov	[es:fbigfat], bl
  5446                                  	;	mov	cl, [di+8]
  5447                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5448                                  	;	;sub	es:16D8h, ax
  5449                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5450                                  	;				; need a logical sector number that will
  5451                                  	;				; be used by getclus(diskrd procedure)
  5452                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5453                                  	;	;sbb	es:16DAh, ax
  5454                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5455                                  	; -----
  5456                                  		
  5457                                  	; -----	; 22/12/2022
  5458                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5459                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5460                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5461                                  					; get size of fat on media
  5462                                  		mov	[fbigfat], bl
  5463                                  		mov	cl, [es:di+8]
  5464                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5465                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5466                                  					; need a logical sector number that will
  5467                                  					; be used by getclus(diskrd procedure)
  5468                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5469                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5470                                  	; ------
  5471                                  
  5472                                  		xor	ch, ch	 ; cx = sectors/cluster
  5473                                  
  5474                                  	; the boot program has left the directory at 0:500h
  5475                                  
  5476                                  		push	ds
  5477                                  		xor	di, di
  5478                                  		mov	ds, di
  5479                                  		mov	bx, [53Ah]
  5480                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5481                                  					; (First cluster field of 2nd dir entry
  5482                                  					; of root directory in the buffer at 500h)
  5483                                  		pop	ds
  5484                                  loadit:
  5485                                  		mov	ax, SYSINITSEG	; 46Dh
  5486                                  		;mov	ax, 46Dh	; sysinit segment
  5487                                  		mov	es, ax
  5488                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5489                                  		;mov	es, [es:271h]
  5490                                  
  5491                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5492                                  ; ----------------------------------------------------------------------------
  5493                                  ;iseof:
  5494                                  		;;test	byte [cs:fbigfat], fbig
  5495                                  		;test	byte [cs:fbigfat], 40h ; fbig
  5496                                  		; 12/12/2023
  5497                                  		; ds = cs
  5498                                  		test	byte [fbigfat], 40h ; fbig
  5499                                  		jnz	short eofbig
  5500                                  		cmp	bx, 0FF7h
  5501                                  		jmp	short iseofx
  5502                                  ; ----------------------------------------------------------------------------
  5503                                  
  5504                                  eofbig:
  5505                                  		cmp	bx, 0FFF7h
  5506                                  iseofx:
  5507                                  		jb	short loadit	; keep loading until cluster = eof
  5508                                  %endif
  5509                                  ; ----------------------------------------------------------------------------
  5510                                  ; ----------------------------------------------------------------------------
  5511                                  
  5512 00001C27 E8BD03                  		call	setdrvparms	; 
  5513                                  
  5514                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5515                                  		;jmp	far 46Dh:267h
  5516 00001C2A EA[6702]3304            		jmp	SYSINITSEG:SYSINITSTART
  5517                                  
  5518                                  ; =============== S U B	R O U T	I N E ========================================
  5519                                  
  5520                                  ; Following are subroutines to support resident device driver initialization
  5521                                  ;
  5522                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5523                                  
  5524                                  ;	M035 -- begin changed section
  5525                                  
  5526                                  ;******************************************************************************
  5527                                  ; module name: remap
  5528                                  ;
  5529                                  ; descriptive name: all the code for himem that could be separated from msbio
  5530                                  ;
  5531                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5532                                  ;	     letters) if more than two diskette drives on the system.
  5533                                  ;
  5534                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5535                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5536                                  ;	       letters. to do this, scan for disk drives and assign logical
  5537                                  ;	       drive number starting from 2 and then rescan diskette drives
  5538                                  ;	       and assign next to the last logical drive number of last disk
  5539                                  ;	       drive to the 3rd and 4th diskette drives.
  5540                                  
  5541                                  ; input:       none
  5542                                  ; exit:	drive letters have been remapped in bds chain
  5543                                  ; exit error:  none
  5544                                  ; called from: msinit
  5545                                  ;
  5546                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5547                                  ;	  found in the system
  5548                                  ;	  this function assumes that there are no more than 26 drives assigned
  5549                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5550                                  ;	  this function assumes that the first entries in the chain are
  5551                                  ;	   floppy drives, and all the rest are hard drives
  5552                                  ;	  will alter the boot drive if necessary to reflect remapping
  5553                                  ;
  5554                                  ;******************************************************************************
  5555                                  
  5556                                  ; 17/10/2022
  5557                                  ; 02/10/2022
  5558                                  
  5559                                  remap:		; proc near
  5560                                  
  5561                                  		; 15/12/2023
  5562                                  		; ds = cs
  5563                                  		;mov	di, [cs:start_bds] ; get first bds
  5564 00001C2F 8B3E[1901]              		mov	di, [start_bds]
  5565                                  
  5566                                  ; search for 1st fixed disk physical drive num
  5567                                  
  5568                                  drive_loop:
  5569 00001C33 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5570                                  					; first	hard disk??
  5571 00001C37 7409                    		jz	short fdrv_found ; yes,	continue
  5572 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5573                                  					; get next bds,	assume segment
  5574 00001C3B 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5575 00001C3E 75F3                    		jnz	short drive_loop ; loop	if not
  5576 00001C40 EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5577                                  
  5578                                  ;------------------------------------------------------------------------------
  5579                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5580                                  ;logical drive nums to 3, 4, 5 etc.
  5581                                  ;------------------------------------------------------------------------------
  5582                                  
  5583                                  fdrv_found:
  5584 00001C42 B002                    		mov	al, 2		; start	with logical drv num=2
  5585                                  fdrv_loop:
  5586 00001C44 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5587 00001C47 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5588                                  					; ds:di--> next	bds
  5589                                  		;inc	al		; set num for next drive
  5590                                  		; 18/12/2022
  5591 00001C49 40                      		inc	ax
  5592 00001C4A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5593 00001C4D 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5594                                  
  5595                                  ;------------------------------------------------------------------------------
  5596                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5597                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5598                                  ; any more.
  5599                                  ;------------------------------------------------------------------------------
  5600                                  
  5601                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5602                                  		; 15/12/2023
  5603 00001C4F 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5604 00001C53 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5605                                  					; ds:di-->bds2
  5606                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5607 00001C55 8A26[2501]              		mov	ah, [dsktnum]
  5608 00001C59 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5609                                  remap_loop1:
  5610 00001C5C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5611                                  					; set new num to next floppy
  5612 00001C5E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5613 00001C61 FEC0                    		inc	al		; new number for next floppy
  5614 00001C63 FECC                    		dec	ah		; count down extra floppies
  5615 00001C65 75F5                    		jnz	short remap_loop1
  5616                                  
  5617                                  ; now we've got to adjust the boot drive if we reassigned it
  5618                                  
  5619                                  		; 15/12/2023
  5620                                  		;mov	al, [cs:drvfat]
  5621 00001C67 A0[C016]                		mov	al, [drvfat]
  5622 00001C6A 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5623 00001C6C 721D                    		jb	short rmap_exit
  5624                                  		;sub	al, [cs:dsktnum]
  5625 00001C6E 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5626 00001C72 7204                    		jb	short remap_boot_flop ;	brif so
  5627                                  
  5628                                  ; we've got to remap the boot hard drive
  5629                                  ; subtract the number of EXTRA floppies from it
  5630                                  
  5631 00001C74 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5632 00001C76 EB04                    		jmp	short remap_change_boot_drv
  5633                                  ; ---------------------------------------------------------------------------
  5634                                  
  5635                                  ; we've got to remap the boot floppy.
  5636                                  ; add the number of hard drive partitions to it
  5637                                  
  5638                                  remap_boot_flop:
  5639                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5640                                  		; 15/12/2023
  5641 00001C78 0206[7500]              		add	al, [drvmax]
  5642                                  remap_change_boot_drv:			
  5643                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5644 00001C7C A2[C016]                		mov	[drvfat], al
  5645 00001C7F FEC0                    		inc	al
  5646 00001C81 1E                      		push	ds
  5647 00001C82 BF3304                  		mov	di, SYSINITSEG	; 46Dh
  5648                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5649                                  		;;mov	di, 46Dh	; SYSINIT segment
  5650 00001C85 8EDF                    		mov	ds, di
  5651 00001C87 A2[9602]                		mov	[DEFAULTDRIVE], al
  5652                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5653                                  					; pass it to sysinit as	well
  5654 00001C8A 1F                      		pop	ds ; ds = cs
  5655                                  rmap_exit:
  5656 00001C8B C3                      		retn
  5657                                  
  5658                                  ; =============== S U B	R O U T	I N E =======================================
  5659                                  
  5660                                  ; 17/10/2022
  5661                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5662                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5663                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5664                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5665                                  ;**************************************************
  5666                                  ; getboot - get the boot sector for a hard disk
  5667                                  ;
  5668                                  ; Reads the boot sector from a specified drive into
  5669                                  ; a buffer at the top of memory.
  5670                                  ;
  5671                                  ; dl = int13 drive number to read boot sector for
  5672                                  ;**************************************************
  5673                                  
  5674                                  ; 17/10/2022
  5675                                  bootbias equ 200h
  5676                                  
  5677                                  getboot:	; proc near
  5678                                  		
  5679                                  		; 15/12/2023
  5680                                  		; ds = cs
  5681                                  		
  5682                                  		; 08/04/2018
  5683                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5684                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5685                                  		; 02/10/2022 - Retro DOS v4.0
  5686                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5687                                  
  5688                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5689                                  		; 15/12/2023
  5690 00001C8C A1[C316]                		mov	ax, [init_bootseg]
  5691 00001C8F 8EC0                    		mov	es, ax
  5692                                  
  5693                                  		; 17/10/2022
  5694 00001C91 BB0002                  		mov	bx, bootbias ; 200h
  5695                                  		;mov	bx, 200h	; bootbias
  5696                                  					; load BX, ES:BX is where sector goes
  5697 00001C94 B80102                  		mov	ax, 201h
  5698 00001C97 30F6                    		xor	dh, dh
  5699 00001C99 B90100                  		mov	cx, 1
  5700 00001C9C CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704 00001C9E 7209                    		jb	short erret
  5705                                  		; 17/10/2022
  5706 00001CA0 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5707                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5708                                  					; Dave Litton magic word?
  5709 00001CA7 7401                    		jz	short norm_ret	; yes
  5710                                  erret:
  5711 00001CA9 F9                      		stc
  5712                                  norm_ret:
  5713 00001CAA C3                      		retn
  5714                                  
  5715                                  ; ---------------------------------------------------------------------------
  5716                                  		
  5717                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5718                                  
  5719                                  chk_partition_type:
  5720                                  		; 16/12/2023
  5721 00001CAB 268A07                  		mov	al, [es:bx]	; partition type
  5722                                  
  5723                                  		; see if partitiontype == 1, 4, 6
  5724 00001CAE 3C01                    		cmp	al, 1		; FAT12
  5725 00001CB0 7406                    		je	short chk_ptype_retn
  5726 00001CB2 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  5727 00001CB4 7402                    		je	short chk_ptype_retn
  5728 00001CB6 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  5729                                  chk_ptype_retn:
  5730                                  		; zf = 1 -> primary DOS partition
  5731                                  		; zf = 0 -> not a primary DOS partition
  5732 00001CB8 C3                      		retn
  5733                                  
  5734                                  ; =============== S U B	R O U T	I N E =======================================
  5735                                  
  5736                                  ; 28/12/2018 - Retro DOS v4.0 
  5737                                  
  5738                                  ;***************************************************************************
  5739                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5740                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5741                                  ;   our own logical sectors start. we also read in our boot sector to
  5742                                  ;   determine version number
  5743                                  ;
  5744                                  ;   inputs:	dl is rom drive number (80...)
  5745                                  ;		bh is partition number (0....) 
  5746                                  ;		ds:di points to bds
  5747                                  ;   outputs:	carry clear -> bpb is filled in
  5748                                  ;		carry set   -> bpb is left uninitialized due to error
  5749                                  ;	trashes (at least) si, cx
  5750                                  ;	MUST PRESERVE ES:!!!!
  5751                                  ;***************************************************************************
  5752                                  
  5753                                  sethard:	; proc near
  5754                                  		; 16/12/2023
  5755                                  		; 14/08/2023
  5756                                  		; ds = cs = BIOSDATA
  5757 00001CB9 57                      		push	di
  5758 00001CBA 53                      		push	bx
  5759                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5760 00001CBB 06                      		push	es
  5761 00001CBC 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5762 00001CBF 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5763 00001CC2 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5764                                  					; fnon_removable
  5765 00001CC6 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5766                                  					; ffHardFile
  5767 00001CCA C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5768 00001CCF 88FE                    		mov	dh, bh		; partition number
  5769 00001CD1 52                      		push	dx
  5770 00001CD2 B408                    		mov	ah, 8
  5771 00001CD4 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5772                                  					; DL = drive number
  5773                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5774                                  					; DL = number of consecutive drives
  5775                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5776 00001CD6 FEC6                    		inc	dh
  5777 00001CD8 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5778 00001CDB 5A                      		pop	dx
  5779 00001CDC 7249                    		jb	short setret	; error	if no hard disk
  5780 00001CDE 80E13F                  		and	cl, 3Fh
  5781 00001CE1 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5782 00001CE4 52                      		push	dx		; save partition number
  5783 00001CE5 E8A4FF                  		call	getboot
  5784 00001CE8 5A                      		pop	dx		; restore partition number
  5785 00001CE9 723C                    		jb	short setret
  5786 00001CEB BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5787                                  
  5788                                  ; The first 'active' partition is 00, the second is 01....
  5789                                  ;   then the remainder of the 'primary' but non-active partitions
  5790                                  
  5791                                  act_part:
  5792 00001CEE 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5793 00001CF3 740B                    		jz	short no_act	; no
  5794                                  ; 16/12/2023
  5795                                  %if 0
  5796                                  		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5797                                  		jz	short got_good_act
  5798                                  		cmp	byte [es:bx], 4
  5799                                  		jz	short got_good_act
  5800                                  		cmp	byte [es:bx], 6
  5801                                  		jnz	short no_act
  5802                                  %endif
  5803                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5804                                  		; check if it is a primary dos partition
  5805                                  
  5806 00001CF5 E8B3FF                  		call	chk_partition_type
  5807 00001CF8 7506                    		jne	short no_act
  5808                                  
  5809                                  got_good_act:
  5810 00001CFA 08F6                    		or	dh, dh		; is this our target partition #?
  5811 00001CFC 742D                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5812 00001CFE FECE                    		dec	dh		; count	down
  5813                                  no_act:
  5814 00001D00 83C310                  		add	bx, 16
  5815 00001D03 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5816                                  					; last entry done?
  5817 00001D07 75E5                    		jnz	short act_part	; no, process next entry
  5818 00001D09 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5819                                  					; restore original value of bx
  5820                                  
  5821                                  ; Now scan the non-active partitions
  5822                                  
  5823                                  get_primary:				
  5824 00001D0C 26F647FC80              		test	byte [es:bx-4], 80h
  5825 00001D11 750B                    		jnz	short not_prim	; we've already scanned
  5826                                  					; the ACTIVE ones
  5827                                  ; 16/12/2023
  5828                                  %if 0
  5829                                  		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5830                                  		jz	short got_prim
  5831                                  		cmp	byte [es:bx], 4
  5832                                  		jz	short got_prim
  5833                                  		cmp	byte [es:bx], 6
  5834                                  		jnz	short not_prim
  5835                                  %endif
  5836                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5837                                  		; check if it is a primary dos partition
  5838                                  
  5839 00001D13 E895FF                  		call	chk_partition_type
  5840 00001D16 7506                    		jne	short not_prim
  5841                                  
  5842                                  got_prim:
  5843 00001D18 08F6                    		or	dh, dh		; is this our target partition?
  5844 00001D1A 740F                    		jz	short set2
  5845 00001D1C FECE                    		dec	dh
  5846                                  not_prim:
  5847 00001D1E 83C310                  		add	bx, 16
  5848 00001D21 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5849 00001D25 75E5                    		jnz	short get_primary ; loop till we've gone through table
  5850                                  setret:					
  5851 00001D27 F9                      		stc			; error	return
  5852 00001D28 E98502                  		jmp	ret_hard_err
  5853                                  
  5854                                  ; ---------------------------------------------------------------------------
  5855                                  
  5856                                  ;  until we get the real logical boot record and get the bpb,
  5857                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5858                                  ;  for the convenience of the computation.
  5859                                  ;
  5860                                  ;  at the end of this procedure, if a bpb information is gotten from
  5861                                  ;  the valid boot record, then we are going to use those bpb information
  5862                                  ;  without change.
  5863                                  ;
  5864                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5865                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5866                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5867                                  
  5868                                  set2:
  5869                                  		; 14/08/2023
  5870                                  		; ds = cs = BIOSDATA segment (0070h)
  5871 00001D2B 8816[C516]              		mov	[rom_drv_num], dl
  5872                                  		;mov	[cs:rom_drv_num], dl
  5873                                  			; save the rom bios drive number we are handling now.
  5874 00001D2F 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5875 00001D33 268B5706                		mov	dx, [es:bx+6]
  5876                                  
  5877                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5878                                  ; sectors should be allowed	
  5879                                  
  5880 00001D37 83E801                  		sub	ax, 1
  5881 00001D3A 83DA00                  		sbb	dx, 0
  5882 00001D3D 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5883 00001D41 2613570A                		adc	dx, [es:bx+10]
  5884 00001D45 7305                    		jnc	short okdrive
  5885 00001D47 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  5886                                  okdrive:
  5887 00001D4C 268B4704                		mov	ax, [es:bx+4]
  5888 00001D50 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5889                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5890 00001D53 268B4706                		mov	ax, [es:bx+6]
  5891 00001D57 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5892 00001D5A 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5893 00001D5E 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5894 00001D62 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5895 00001D65 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5896                                  					; bpb->maxsec =	p->partitionlength
  5897                                  		;cmp	dx, 0
  5898                                  		;ja	short okdrive_1
  5899                                  		; 16/12/2023
  5900 00001D68 09D2                    		or	dx, dx
  5901 00001D6A 7505                    		jnz	short okdrive_1
  5902 00001D6C 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5903 00001D6F 72B6                    		jb	short setret	; return -1;
  5904                                  okdrive_1:
  5905                                  		;mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5906                                  		;mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5907                                  		; 16/12/2023
  5908                                  		;push	ax ; *
  5909 00001D71 8B4519                  		mov	ax, [di+19h]	; [di+BDS.hiddensecs+2]
  5910 00001D74 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5911                                  					; usually equal	to the # of sec/trk.
  5912 00001D76 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5913                                  		; 16/12/2023
  5914                                  		;push	ax
  5915                                  		;mov	ax, dx
  5916 00001D79 31D2                    		xor	dx, dx
  5917 00001D7B F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5918                                  					; (track)temp_h:ax + (sector)dx
  5919                                  		; 17/10/2022
  5920                                  		;mov	[cs:temp_h], ax
  5921                                  		; 14/08/2023 (ds=cs)
  5922 00001D7D A3[2205]                		mov	[temp_h], ax
  5923                                  		; 16/12/2023
  5924                                  		;pop	ax ; *
  5925 00001D80 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5926 00001D83 F7F3                    		div	bx
  5927 00001D85 88D1                    		mov	cl, dl
  5928 00001D87 FEC1                    		inc	cl
  5929                                  		;xor	bx, bx
  5930                                  		; 16/12/2023
  5931                                  		; bh = 0
  5932 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5933                                  		;push	ax ; *
  5934 00001D8C 31D2                    		xor	dx, dx
  5935                                  		;;mov	ax, [cs:temp_h]
  5936                                  		;mov	ax, [temp_h] ; 14/08/2023
  5937                                  		; 16/12/2023
  5938 00001D8E 8706[2205]              		xchg	ax, [temp_h] ; * (push ax)
  5939 00001D92 F7F3                    		div	bx
  5940                                  		;;mov	[cs:temp_h], ax
  5941                                  		;mov	[temp_h], ax ; 14/08/2023
  5942                                  		;pop	ax ; *
  5943                                  		; 16/12/2023
  5944 00001D94 8706[2205]              		xchg	ax, [temp_h] ; * (pop ax)
  5945 00001D98 F7F3                    		div	bx		; dl is head, ax is cylinder
  5946                                  		; 14/08/2023 (ds=cs)
  5947 00001D9A 833E[2205]00            		cmp	word [temp_h], 0
  5948                                  		;cmp	word [cs:temp_h], 0
  5949                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5950                                  		; 16/12/2023
  5951 00001D9F 7786                    		ja	short setret
  5952 00001DA1 3D0004                  		cmp	ax, 1024
  5953                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5954                                  		; 16/12/2023
  5955 00001DA4 7781                    		ja	short setret
  5956                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5957                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5958                                  			; ('ja' must be 'jnb')
  5959                                  okdrive_2:
  5960                                   		; 28/07/2019
  5961                                  ; dl is head.
  5962                                  ; ax is cylinder
  5963                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5964                                  
  5965                                  ;*** for mini disks ***
  5966                                  
  5967 00001DA6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5968                                  					; check	for mini disk
  5969 00001DAA 7503                    		jnz	short oknotmini	; not mini disk.
  5970 00001DAC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5971                                  					; set the physical track number
  5972                                  oknotmini:
  5973                                  ;*** end of added logic for mini disk
  5974                                  				
  5975 00001DAF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5976 00001DB1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5977 00001DB3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5978 00001DB6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5979 00001DB8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5980                                  					; cl is	sector + 2 high	bits of	cylinder
  5981 00001DBA 88D6                    		mov	dh, dl		; dh is	head
  5982                                  		
  5983                                  		; 14/08/2023 (ds=cs)
  5984 00001DBC 8A16[C516]              		mov	dl, [rom_drv_num]
  5985                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5986                                  
  5987                                  
  5988                                  ; cl is sector + 2 high bits of cylinder
  5989                                  ; ch is low 8 bits of cylinder
  5990                                  ; dh is head
  5991                                  ; dl is drive
  5992                                  
  5993                                  ; for convenience, we are going to read the logical boot sector
  5994                                  ; into cs:disksector area.
  5995                                  
  5996                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5997                                  ; is to be read in is cs:disksector.
  5998                                  
  5999 00001DC0 0E                      		push	cs
  6000 00001DC1 07                      		pop	es
  6001 00001DC2 BB[4E01]                		mov	bx, disksector	; for convenience,
  6002                                  					; we are going to read the logical boot	sector
  6003                                  					; into cs:disksector area.
  6004 00001DC5 B80102                  		mov	ax, 201h
  6005 00001DC8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6006                                  					; AL = number of sectors to read, CH = track, CL = sector
  6007                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6008                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6009                                  		; 16/12/2023
  6010 00001DCA 7303                    		jnc	short set3_read_ok
  6011                                  set3_err:
  6012 00001DCC E9E101                  		jmp	ret_hard_err
  6013                                  
  6014                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  6015                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  6016                                  ; media if we recognize the version number.
  6017                                  
  6018                                  set3_read_ok:
  6019                                  		; 14/08/2023
  6020                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  6021                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  6022                                  		; 18/12/2023
  6023                                  		;push	bx ; +
  6024                                  		;push	ax ; (not necessary)
  6025                                  
  6026                                  		; 16/12/2023
  6027                                  		;cmp	word [bx+1FEh], 0AA55h
  6028                                  		;jne	short invalid_boot_record
  6029                                  		
  6030                                  		; 14/08/2023
  6031                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  6032 00001DCF 803FE9                  		cmp	byte [bx], 0E9h
  6033                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  6034 00001DD2 740B                    		je	short check_1_ok ; yes
  6035 00001DD4 803FEB                  		cmp	byte [bx], 0EBh
  6036                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  6037 00001DD7 7523                    		jne	short invalid_boot_record ; no
  6038 00001DD9 807F0290                		cmp	byte [bx+2], 90h
  6039                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  6040 00001DDD 751D                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  6041                                  check_1_ok:
  6042                                  
  6043                                  ; 18/12/2023
  6044                                  %if 0	
  6045                                  		; 14/08/2023			
  6046                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  6047                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  6048                                  					; point	to the bpb in the boot record
  6049                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  6050                                  		mov	al, [bx+10] ; 14/08/2023 
  6051                                  					; get the mediadescriptor byte
  6052                                  		and	al, 0F0h	; mask off low nibble
  6053                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  6054                                  		jne	short invalid_boot_record ; no,	invalid	boot record
  6055                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  6056                                  		cmp	word [bx], 512 ; 14/08/2023
  6057                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6058                                  
  6059                                  check2_ok:				; yes, mediadescriptor ok.
  6060                                  		mov	al, [bx+2] ; 14/08/2023
  6061                                  		;mov	al, [cs:bx+2]	; now make sure that
  6062                                  					; the sectorspercluster	is
  6063                                  					; a power of 2
  6064                                  					;
  6065                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  6066                                  					; get the sectorspercluster
  6067                                  %endif
  6068                                  		; 18/12/2023
  6069                                  		; bx = disksector
  6070 00001DDF 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  6071                                  					; get the mediadescriptor byte
  6072 00001DE2 24F0                    		and	al, 0F0h	; mask off low nibble
  6073 00001DE4 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  6074 00001DE6 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  6075 00001DE8 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  6076 00001DED 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6077                                  
  6078                                  check2_ok:	; yes, mediadescriptor ok.
  6079 00001DEF 8A470D                  		mov	al, [bx+13]	; now make sure that
  6080                                  					; the sectorspercluster is
  6081                                  					; a power of 2
  6082                                  					;
  6083                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  6084                                  					; get the sectorspercluster
  6085                                  
  6086 00001DF2 08C0                    		or	al, al		; is it	zero?
  6087 00001DF4 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  6088                                  
  6089                                  ck_power_of_two:			
  6090 00001DF6 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  6091 00001DF8 73FC                    		jnc	short ck_power_of_two
  6092 00001DFA 7406                    		jz	short valid_boot_record
  6093                                  
  6094                                  invalid_boot_record:			
  6095                                  		; 18/12/2023
  6096                                  		;pop	ax
  6097                                  		;pop	bx ; +
  6098 00001DFC E9FE00                  		jmp	unknown		; jump to invalid boot record
  6099                                  					; unformatted or illegal media.
  6100                                  	; 14/08/2023	
  6101                                  ; ---------------------------------------------------------------------------
  6102                                  ; 16/12/2023
  6103                                  ;setret_brdg:
  6104                                  ;		jmp	setret
  6105                                  ; ---------------------------------------------------------------------------
  6106                                  
  6107                                  unknown3_0_j:				
  6108 00001DFF E9FF00                  		jmp	unknown3_0	; legally formatted media,
  6109                                  					; although, content might be bad.
  6110                                  ; ---------------------------------------------------------------------------
  6111                                  
  6112                                  valid_boot_record:
  6113                                  		; 18/12/2023
  6114                                  		;pop	ax
  6115                                  		;pop	bx ; +
  6116                                  		
  6117                                  		; 18/12/2023
  6118                                  		; bx = offset disksector ; +
  6119                                  
  6120                                  ; Signature found. Now check version.
  6121                                  
  6122                                  		; 14/08/2023
  6123 00001E02 817F08322E              		cmp	word [bx+8], '2.'
  6124                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  6125                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  6126 00001E07 7506                    		jnz	short try5
  6127 00001E09 807F0A30                		cmp	byte [bx+10], '0'
  6128                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  6129                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  6130                                  		; 14/08/2023
  6131                                  		;jnz	short try5
  6132                                  		;jmp	short copybpb
  6133 00001E0D 7425                    		jz	short copybpb
  6134                                  
  6135                                  	; 14/08/2023
  6136                                  ; ---------------------------------------------------------------------------
  6137                                  ;
  6138                                  ;setret_brdg:				
  6139                                  ;		jmp	setret
  6140                                  ; ---------------------------------------------------------------------------
  6141                                  ;
  6142                                  ;unknown3_0_j:				
  6143                                  ;		jmp	unknown3_0	; legally formatted media,
  6144                                  ;					; although, content might be bad.
  6145                                  ; ---------------------------------------------------------------------------
  6146                                  
  6147                                  try5:					
  6148 00001E0F E8A201                  		call	cover_fdisk_bug
  6149                                  
  6150                                  ; see if it is an os2 signature
  6151                                  
  6152                                  		; 14/08/2023
  6153                                  		; ds = cs = BIOSDATA segment
  6154 00001E12 817F08302E              		cmp	word [bx+8], '0.'
  6155                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  6156                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  6157 00001E17 750C                    		jnz	short no_os2
  6158 00001E19 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  6159                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  6160 00001E1C 2C31                    		sub	al, '1'
  6161                                  		;sub	al, 31h		; '1'
  6162 00001E1E 24FE                    		and	al, 0FEh
  6163 00001E20 7412                    		jz	short copybpb	; accept either	'1' or '2'
  6164 00001E22 E9D800                  		jmp	unknown
  6165                                  ; ---------------------------------------------------------------------------
  6166                                  
  6167                                  ; no os2 signature, this is to check for real dos versions
  6168                                  
  6169                                  no_os2:					
  6170                                  		; 14/08/2023
  6171                                  		; ds = cs = BIOSDATA
  6172 00001E25 817F08332E              		cmp	word [bx+8], '3.'			
  6173                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  6174                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  6175 00001E2A 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  6176                                  					; do not trust it, but still legal.
  6177 00001E2C 7506                    		jnz	short copybpb	; honor	os2 boot record
  6178                                  					; or dos 4.0 version
  6179 00001E2E 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  6180                                  		;cmp	byte [cs:bx+10], '1'
  6181                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  6182 00001E32 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  6183                                  copybpb:
  6184                                  
  6185                                  ; 03/10/2022
  6186                                  
  6187                                  ; we have a valid boot sector. use the bpb in it to build the
  6188                                  ; bpb in bios. it is assumed that only
  6189                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6190                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6191                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6192                                  ; need to be set (all other values in already). fbigfat is also set.
  6193                                  
  6194                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6195                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6196                                  ; and system id according to the boot record.
  6197                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6198                                  
  6199                                  		; 10/12/2022
  6200                                  		; (number of FATs optimization)
  6201 00001E34 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6202                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6203                                  		;mov	cl, [cs:si+05h]
  6204                                  		; 14/08/2023
  6205                                  		; ds = cs = BIOSDATA segment (0070h)
  6206 00001E37 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6207                                  
  6208 00001E3A 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  6209                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6210                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6211                                  					; [disksector+EXT_BOOT.SIG]
  6212                                  					; EXT_BOOT_SIGNATURE
  6213 00001E3E 753A                    		jnz	short copybpb_fat ; conventional fat system
  6214                                  
  6215                                  		; 03/10/2022
  6216                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6217                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6218                                  		;	     number of FATs must be 2 ; =*?=
  6219                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6220                                  		;
  6221                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6222                                  
  6223                                  		; 10/12/2022
  6224                                  		;cmp	byte [cs:disksector+10h], 0
  6225                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6226                                  		;jnz	short copybpb_fat ; a fat system.
  6227 00001E40 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6228 00001E42 7536                    		jnz	short copybpb_fat ; a fat system.
  6229                                  
  6230                                  ; non fat based	media.
  6231                                  
  6232 00001E44 57                      		push	di  ; BDS
  6233                                  		; 14/08/2023
  6234                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6235                                  
  6236                                  		; 17/12/2023
  6237                                  		; es = ds = cs
  6238                                  		;push	ds
  6239                                  		;pop	es
  6240                                  
  6241                                  		; 14/08/2023
  6242                                  		; ds = cs
  6243                                  		;push	cs
  6244                                  		;pop	ds
  6245                                  
  6246                                  		; 10/12/2022
  6247                                  		; (number of FATs optimization)
  6248                                  		; SI = disksector+11
  6249                                  		; 17/10/2022
  6250                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6251                                  		;mov	si, disksector+11
  6252 00001E45 83C706                  		add	di, 6		; add di,BDS.BPB
  6253                                  
  6254                                  ; just for completeness, we'll make sure that total_sectors and
  6255                                  ; big_total_sectors aren't both zero. I've seen examples of
  6256                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6257                                  ; got that way. If it occurs, then use the values from the
  6258                                  ; partition table.
  6259                                  
  6260                                  		; 18/12/2022
  6261 00001E48 29C9                    		sub	cx, cx 
  6262                                  
  6263                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6264                                  		;jnz	short already_nonz 
  6265                                  		;			; how about big_total?
  6266                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6267                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6268                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6269                                  		;jnz	short already_nonz
  6270                                  
  6271                                  		; 14/08/2023
  6272                                  		; ds = cs = BIOSDATA segment (0070h)
  6273                                  
  6274                                  		; 18/12/2022
  6275                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6276                                  		; 14/08/2023
  6277 00001E4A 394C08                  		cmp	[si+8], cx ; 0
  6278 00001E4D 751C                    		jnz	short already_nonz
  6279                                  					     	; how about big_total?
  6280                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6281                                  		; 14/08/2023
  6282 00001E4F 394C15                  		cmp	[si+15h], cx ; 0
  6283 00001E52 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6284                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6285 00001E54 394C17                  		cmp	[si+17h], cx ; 0
  6286 00001E57 7512                    		jnz	short already_nonz
  6287                                  
  6288                                  ; now let's copy the values from the partition table (now in the BDS)
  6289                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6290                                  
  6291 00001E59 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6292                                  		; 14/08/2023
  6293                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6294 00001E5C 894408                  		mov	[si+8], ax
  6295 00001E5F 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6296                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6297 00001E62 894415                  		mov	[si+15h], ax
  6298 00001E65 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6299                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6300 00001E68 894417                  		mov	[si+17h], ax
  6301                                  
  6302                                  already_nonz:	
  6303                                  		; 18/12/2022
  6304                                  		; cx = 0
  6305 00001E6B B119                    		mov	cl, 25
  6306                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6307 00001E6D F3A4                    		rep movsb
  6308                                  	
  6309                                  		; 17/12/2023 (BugFix and optimization)
  6310                                  		;pop	ds ; (BugFix)
  6311 00001E6F 5F                      		pop	di ; BDS
  6312                                  		;
  6313                                  		;push	es ; (BugFix)
  6314                                  		;push	ds
  6315                                  		;pop	es
  6316                                  		;push	cs
  6317                                  		;pop	ds
  6318                                  
  6319                                  		; 14/08/2023
  6320 00001E70 BD[2807]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6321                                  		; 18/12/2022
  6322                                  		;mov	bp, mov_media_ids
  6323                                  		;;mov	bp, 751h	; mov_media_ids
  6324                                  					; at 2C7h:751h = 70h:2CC1h
  6325                                  					; set volume id, systemid, serial.
  6326 00001E73 0E                      		push	cs		; simulate far call
  6327 00001E74 E8D6F8                  		call	call_bios_code
  6328                                  		; 14/08/2023
  6329                                  		; ds = cs = es
  6330                                  		;push	es
  6331                                  		;pop	ds
  6332                                  		;pop	es ; (BugFix) ; 17/12/2023
  6333 00001E77 E92F01                  		jmp	goodret
  6334                                  ; ---------------------------------------------------------------------------
  6335                                  
  6336                                  ; ****** cas ---
  6337                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6338                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6339                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6340                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6341                                  ; from the boot sector into the DPB anyway, we've just been using
  6342                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6343                                  ; we'll go ahead and copy it into the DPB, except in the case
  6344                                  ; that it equals zero, in which case we just use the values in
  6345                                  ; the DPB from the partition table.
  6346                                  
  6347                                  ; 17/10/2022
  6348                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6349                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6350                                  ; 09/12/2022
  6351                                  MOVMEDIAIDS equ mov_media_ids
  6352                                  CLEARIDS equ clear_ids
  6353                                  ; 11/09/2023
  6354                                  CLEARIDS_X equ clear_ids_x
  6355                                  
  6356                                  copybpb_fat:
  6357                                  		; 10/12/2022
  6358                                  		; (number of FATs optimization)
  6359                                  		; SI = disksector+11				
  6360                                  		; 17/10/2022
  6361                                  		;mov	si, disksector+11
  6362                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6363                                  					; cs:si	-> bpb in boot
  6364 00001E7A 31D2                    		xor	dx, dx
  6365                                  		; 14/08/2023
  6366                                  		; ds = cs = BIOSDATA segment (0070h)
  6367 00001E7C 8B4408                  		mov	ax, [si+8]
  6368                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6369                                  					; get totsec from boot sec
  6370 00001E7F 09C0                    		or	ax, ax
  6371 00001E81 7514                    		jnz	short copy_totsec ; if non zero, use that
  6372 00001E83 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6373                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6374                                  					; get the big version
  6375                                  					; (32 bit total	sectors)
  6376 00001E86 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6377                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6378                                  		; 10/12/2022
  6379                                  		; (number of FATs optimization)
  6380                                  		; CL = number of FATs (2 or 1) 
  6381 00001E89 89D3                    		mov	bx, dx		; see if it is a big zero
  6382 00001E8B 09C3                    		or	bx, ax
  6383 00001E8D 7508                    		jnz	short copy_totsec
  6384                                  			; screw it. it was bogus.
  6385 00001E8F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6386 00001E92 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6387 00001E95 EB06                    		jmp	short fat_big_small
  6388                                  
  6389                                  		;mov	cx, dx
  6390                                  		;or	cx, ax		; see if it is a big zero
  6391                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6392                                  copy_totsec:				
  6393 00001E97 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6394                                  					; make DPB match boot sec
  6395 00001E9A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6396                                  
  6397                                  		; 10/12/2022
  6398                                  ;totsec_already_set:			
  6399                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6400                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6401                                  
  6402                                  ; determine fat entry size.
  6403                                  
  6404                                  fat_big_small:
  6405                                  
  6406                                  ;at this moment dx;ax = total sector number
  6407                                  
  6408                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6409                                  ;from the BPB on the disk
  6410                                  				
  6411                                  		; 14/08/2023
  6412                                  		; ds = cs = BIOSDATA segment (0070h)
  6413                                  				
  6414 00001E9D 8B5C03                  		mov	bx, [si+3]
  6415                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6416                                  					; get #reserved_sectors	from BPB
  6417 00001EA0 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6418                                  					; update BDS field
  6419 00001EA3 29D8                    		sub	ax, bx
  6420 00001EA5 83DA00                  		sbb	dx, 0		; update the count
  6421                                  		; 14/08/2023
  6422 00001EA8 8B5C0B                  		mov	bx, [si+0Bh]
  6423                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6424                                  					; bx = sectors/fat
  6425 00001EAB 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6426                                  					; set in bds bpb
  6427                                  		; 10/12/2022
  6428                                  		; (number of FATs optimization)
  6429                                  		; CL = number of FATs (2 or 1) 
  6430                                  		;dec	cl ; *
  6431                                  		; 18/12/2022
  6432 00001EAE 49                      		dec	cx ; *
  6433 00001EAF D3E3                    		shl	bx, cl
  6434                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6435                                  		
  6436 00001EB1 29D8                    		sub	ax, bx		; sub #	fat sectors
  6437 00001EB3 83DA00                  		sbb	dx, 0
  6438 00001EB6 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6439                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6440                                  					; # root entries
  6441 00001EB9 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6442                                  					; set in bds bpb
  6443 00001EBC B104                    		mov	cl, 4
  6444 00001EBE D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6445 00001EC0 29D8                    		sub	ax, bx		; sub #	dir sectors
  6446 00001EC2 83DA00                  		sbb	dx, 0		;
  6447                                  					; dx:ax	now contains the
  6448                                  					; # of data sectors
  6449 00001EC5 31C9                    		xor	cx, cx ; *
  6450 00001EC7 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6451                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6452                                  					; sectors per cluster
  6453 00001ECA 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6454                                  					; set in bios bpb
  6455 00001ECD 50                      		push	ax
  6456 00001ECE 89D0                    		mov	ax, dx
  6457 00001ED0 31D2                    		xor	dx, dx
  6458 00001ED2 F7F1                    		div	cx		; cx = sectors per cluster
  6459                                  		; 14/08/2023 (ds=cs)
  6460 00001ED4 A3[2205]                		mov	[temp_h], ax
  6461                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6462                                  					; # clusters.
  6463 00001ED7 58                      		pop	ax
  6464 00001ED8 F7F1                    		div	cx
  6465                                  		;cmp	word [cs:temp_h], 0
  6466 00001EDA 833E[2205]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6467 00001EDF 7714                    		ja	short toobig_ret ; too big cluster number
  6468 00001EE1 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6469                                  					; is this 16-bit fat?
  6470 00001EE4 7205                    		jb	short copymediaid ; no,	small fat
  6471                                  		; 17/10/2022
  6472 00001EE6 800E[C216]40            		or	byte [fbigfat], 40h
  6473                                  		;or	ds:fbigfat, 40h	; fbig
  6474                                  					; 16 bit fat
  6475                                  copymediaid:				
  6476                                  		; 17/12/2023
  6477                                  		; es = ds = cs
  6478                                  		
  6479                                  		;push	es
  6480                                  		;push	ds
  6481                                  		;pop	es
  6482                                  
  6483                                  		; 14/08/2023
  6484                                  		; ds = cs = BIOSDATA
  6485                                  		;push	cs
  6486                                  		;pop	ds
  6487                                  		; 17/10/2022
  6488 00001EEB BD[2807]                		mov	bp, MOVMEDIAIDS
  6489                                  		;mov	bp, 751h	; mov_media_ids
  6490                                  					; at 2C7h:751h = 70h:2CC1h
  6491                                  					; copy filesys_id, volume label
  6492 00001EEE 0E                      		push	cs		; simulate far call
  6493 00001EEF E85BF8                  		call	call_bios_code
  6494                                  
  6495                                  		; 14/08/2023
  6496                                  		;push	es
  6497                                  		;pop	ds
  6498                                  		; 17/12/2023
  6499                                  		;pop	es
  6500                                  
  6501 00001EF2 E99600                  		jmp	massage_bpb	; now final check for bpb info
  6502                                  					; and return.
  6503                                  ; ---------------------------------------------------------------------------
  6504                                  
  6505                                  toobig_ret:				
  6506                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6507 00001EF5 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  6508                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6509                                  					; too big (32 bit clust #) for FAT16
  6510 00001EFA E9AC00                  		jmp	goodret		; still	drive letter is	assigned
  6511                                  					; but useless. to big for
  6512                                  					; current pc dos fat file system
  6513                                  ; ---------------------------------------------------------------------------
  6514                                  
  6515                                  unknown:	
  6516                                  		; 12/12/2022
  6517 00001EFD 804D2402                		or	byte [di+24h], 02h			
  6518                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6519                                  					; unformatted_media
  6520                                  					; Set unformatted media	flag.
  6521                                  
  6522                                  ; the boot signature may not be	recognizable,
  6523                                  ; but we should	try and	read it	anyway.
  6524                                  
  6525                                  unknown3_0:				
  6526 00001F01 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6527                                  					; [di+BDS.totalsecs32+2]
  6528 00001F04 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6529 00001F07 BE[F216]                		mov	si, disktable2
  6530                                  
  6531                                  scan:					
  6532                                  		;cmp	dx, [cs:si]	; total sectors hw
  6533                                  		; 14/08/2023 (ds=cs)
  6534 00001F0A 3B14                    		cmp	dx, [si] 
  6535 00001F0C 720C                    		jb	short gotparm
  6536 00001F0E 7705                    		ja	short scan_next
  6537                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6538 00001F10 3B4402                  		cmp	ax, [si+2]
  6539 00001F13 7605                    		jbe	short gotparm
  6540                                  
  6541                                  scan_next:				
  6542 00001F15 83C60A                  		add	si, 10		; 5*2
  6543 00001F18 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6544                                  ; ---------------------------------------------------------------------------
  6545                                  
  6546                                  gotparm:				
  6547 00001F1A 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6548                                  		;or	ds:fbigfat, cl
  6549                                  		; 17/10/2022
  6550 00001F1D 080E[C216]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6551                                  		; 14/08/2023
  6552                                  		; ds = cs = BIOSDATA
  6553 00001F21 8B4C04                  		mov	cx, [si+4]
  6554                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6555                                  					; cl = log base 2 of ch
  6556 00001F24 8B5406                  		mov	dx, [si+6]
  6557                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6558                                  
  6559                                  ; now calculate size of fat table
  6560                                  
  6561 00001F27 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6562                                  					; save number of (root)	dir entries
  6563 00001F2A 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6564 00001F2D 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6565 00001F30 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6566                                  					; save sectors per cluster
  6567                                  		; 17/10/2022
  6568 00001F33 F606[C216]40            		test	byte [fbigfat], 40h
  6569                                  		;test	ds:fbigfat, 40h	; fbig
  6570                                  					; if (fbigfat)
  6571 00001F38 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6572                                  
  6573                                  ; we don't need to change "small fat" logic since it is gauranteed
  6574                                  ; that double word total sector will not use 12 bit fat (unless
  6575                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6576                                  ; so in this case we assume dx = 0 !!
  6577                                  
  6578 00001F3A 31DB                    		xor	bx, bx		; (12 bit fat)
  6579 00001F3C 88EB                    		mov	bl, ch
  6580 00001F3E 4B                      		dec	bx
  6581 00001F3F 01C3                    		add	bx, ax		; dx=0
  6582 00001F41 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6583 00001F43 43                      		inc	bx		; BDS.secperclus
  6584 00001F44 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6585 00001F47 89DE                    		mov	si, bx
  6586 00001F49 D1EB                    		shr	bx, 1
  6587 00001F4B 01F3                    		add	bx, si
  6588 00001F4D 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6589 00001F51 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6590 00001F53 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6591                                  					; save number of fat sectors
  6592 00001F56 EB33                    		jmp	short massage_bpb
  6593                                  ; ---------------------------------------------------------------------------
  6594                                  
  6595                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6596                                  
  6597                                  dobig:					
  6598 00001F58 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6599 00001F5A 52                      		push	dx		; save total sectors (high)
  6600 00001F5B 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6601 00001F5E D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6602 00001F60 29D0                    		sub	ax, dx
  6603 00001F62 5A                      		pop	dx
  6604 00001F63 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6605 00001F66 83E801                  		sub	ax, 1
  6606 00001F69 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6607                                  					; total	secs - reserved	secs - root dir	secs
  6608 00001F6C B302                    		mov	bl, 2
  6609 00001F6E 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6610                                  					; bx = 256 * BDS.secperclus + 2
  6611                                  
  6612                                  ; I don't understand why to add bx here!!!
  6613                                  
  6614                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6615                                  		; 27/09/2022
  6616                                  		; (Microsoft FAT32 File	System Specification,
  6617                                  		; December 2000, Page 21)
  6618                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6619                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6620                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6621                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6622                                  		
  6623                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6624 00001F71 01D8                    		add	ax, bx		; 
  6625 00001F73 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6626 00001F76 83E801                  		sub	ax, 1		
  6627 00001F79 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6628                                  
  6629                                  ; assuming dx in the table will never be bigger than bx.
  6630                                  
  6631 00001F7C F7F3                    		div	bx		; BDS.fatsecs =
  6632                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6633 00001F7E 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6634                                  					; number of fat	sectors
  6635                                  
  6636                                  ; now, set the default filesys_id, volume label, serial number
  6637                                  
  6638                                  		; 14/08/2023
  6639                                  		; [di+1Fh] = [fbigfat]
  6640                                  		;
  6641                                  		;;mov	bl, ds:fbigfat
  6642                                  		;; 17/10/2022
  6643                                  		;mov	bl, [fbigfat]
  6644                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6645                                  
  6646                                  		; 14/08/2023
  6647                                  		;push	ds ; ds = cs = BIOSDATA
  6648                                  
  6649                                  		; 17/12/2023
  6650                                  		; es = ds = cs 
  6651                                  		;push	ds
  6652                                  		;pop	es
  6653                                  
  6654                                  		; 14/08/2023 
  6655                                  		; ds = cs = BIOSDATA
  6656                                  		;push	cs
  6657                                  		;pop	ds
  6658                                  		; 11/09/2023
  6659 00001F81 A0[C216]                		mov	al, [fbigfat]
  6660 00001F84 BD[CB05]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6661                                  		; 17/10/2022
  6662                                  		;mov	bp, CLEARIDS
  6663                                  		;;mov	bp, 5D9h	; clear_ids
  6664                                  					; at 2C7h:5D9h = 70h:2B49h
  6665                                  					; at BIOSCODE:06ABh
  6666                                  					;	in PCDOS 7.1 IBMBIO.COM
  6667 00001F87 0E                      		push	cs
  6668 00001F88 E8C2F7                  		call	call_bios_code
  6669                                  
  6670                                  		; 14/08/2023
  6671                                  		;pop	ds ; ds = cs = BIOSDATA
  6672                                  
  6673                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6674                                  ; set according to the partition information. we are going to
  6675                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6676                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6677                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6678                                  ; we don't do this for the bpb information from the boot record. we
  6679                                  ; are not going to change the bpb information from the boot record.
  6680                                  
  6681                                  massage_bpb:
  6682                                  		; 14/08/2023
  6683                                  		; [di+1Fh] = [fbigfat]
  6684                                  		;
  6685                                  		;; 12/12/2022
  6686                                  		;mov	bl, [fbigfat]
  6687                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6688                                  		;			; set size of fat on media
  6689                                  		;
  6690 00001F8B 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6691 00001F8E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6692                                  		; 11/09/2023
  6693 00001F91 09D2                    		or	dx, dx
  6694 00001F93 7514                    		jnz	short goodret	
  6695                                  		;cmp	dx, 0		; double word total sectors?
  6696                                  		;;ja	short goodret	; don't have to change it.
  6697                                  		;; 12/12/2022
  6698                                  		;ja	short short goodret2
  6699                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6700                                  		;ja	short goodret	; don't have to change it.
  6701                                  		; 12/12/2022
  6702 00001F95 395519                  		cmp	[di+19h], dx ; 0
  6703                                  		;ja	short goodret2
  6704 00001F98 770F                    		ja	short goodret	; 11/09/2023
  6705 00001F9A 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6706                                  		;jb	short goodret
  6707                                  		; 12/12/2022
  6708                                  		;jc	short goodret
  6709 00001F9D 7209                    		jc	short goodret_clc ; 11/09/2023
  6710 00001F9F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6711 00001FA2 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6712                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6713                                  		; 12/12/2022
  6714 00001FA5 89551B                  		mov	[di+1Bh], dx ; 0
  6715                                  goodret_clc:
  6716                                  		; 11/09/2023
  6717 00001FA8 F8                      		clc 
  6718                                  goodret:
  6719                                  		;mov	bl, ds:fbigfat
  6720                                  		; 11/09/2023
  6721                                  		; 12/12/2022
  6722                                  		; 17/10/2022
  6723 00001FA9 8A1E[C216]              		mov	bl, [fbigfat]
  6724 00001FAD 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6725                                  					; set size of fat on media
  6726                                  		; 11/09/2023
  6727                                  		;clc
  6728                                  ret_hard_err:
  6729                                  		; 12/12/2022
  6730                                  goodret2:
  6731 00001FB0 07                      		pop	es
  6732                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6733 00001FB1 5B                      		pop	bx
  6734 00001FB2 5F                      		pop	di
  6735 00001FB3 C3                      		retn
  6736                                  
  6737                                  ; =============== S U B	R O U T	I N E =======================================
  6738                                  
  6739                                  ; 15/10/2022
  6740                                  
  6741                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6742                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6743                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6744                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6745                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6746                                  
  6747                                  		; 17/10/2022
  6748                                  cover_fdisk_bug:	
  6749                                  		; 14/08/2023
  6750                                  		; ds = cs
  6751                                  		
  6752                                  		; 18/12/2023
  6753                                  		;push	ax
  6754                                  		;push	dx
  6755                                  		;push	si
  6756                                  
  6757                                  		; 18/12/2023
  6758                                  		; bx = offset disksector
  6759                                  
  6760                                  		; 18/12/2023
  6761 00001FB4 807F2629                		cmp	byte [bx+26h], 29h
  6762                                  		; 14/08/2023
  6763                                  		;cmp	byte [disksector+26h], 29h
  6764                                  		;;cmp	byte [cs:disksector+26h], 29h
  6765                                  					; [disksector+EXT_BOOT.SIG],
  6766                                  					; EXT_BOOT_SIGNATURE
  6767 00001FB8 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6768                                  		
  6769 00001FBA 817F073130              		cmp	word [bx+7], 3031h
  6770                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6771 00001FBF 7506                    		jne	short cfb_chk_totalsecs ; 14/08/2023
  6772 00001FC1 807F0A30                		cmp	byte [bx+10], '0'
  6773                                  		;cmp	byte [cs:bx+10], '0'
  6774 00001FC5 7519                    		jne	short cfb_retit
  6775                                  
  6776                                  cfb_chk_totalsecs:
  6777                                  ; 18/12/2023
  6778                                  %if 0
  6779                                  		; 17/10/2022
  6780                                  		mov	si, disksector+11 ; 14Eh+0Bh
  6781                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6782                                  		; 14/08/2023
  6783                                  		cmp	word [si+8], 0
  6784                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6785                                  					; just to make sure.
  6786                                  		jz	short cfb_retit
  6787                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6788                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6789                                  		; 14/08/2023
  6790                                  		mov	ax, [si+8]
  6791                                  		add	ax, [si+11h]
  6792                                  
  6793                                  		jnc	short cfb_retit
  6794                                  		jnz	short cfb_retit
  6795                                  					; if carry set and ax=0
  6796                                  		dec	word [si+8]
  6797                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6798                                  					; then decrease	BPB_TOTALSECTORS by 1
  6799                                  %endif
  6800                                  		; 18/12/2023
  6801                                  		;cmp	word [bx+19], 0
  6802 00001FC7 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  6803 00001FCA 21C0                    		and	ax, ax ; 0 ?
  6804 00001FCC 7412                    		jz	short cfb_retit
  6805                                  
  6806                                  		;mov	ax, [bx+19]
  6807 00001FCE 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  6808 00001FD1 730D                    		jnc	short cfb_retit
  6809 00001FD3 750B                    		jnz	short cfb_retit
  6810                                  		; ax = 0		; 0 -> 0FFFFh
  6811 00001FD5 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  6812                                  
  6813 00001FD8 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6814 00001FDC 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6815                                  cfb_retit:	
  6816                                  		; 18/12/2023
  6817                                  		;pop	si
  6818                                  		;pop	dx
  6819                                  		;pop	ax
  6820                                  		
  6821 00001FE0 C3                      		retn
  6822                                  
  6823                                  ; ---------------------------------------------------------------------------
  6824                                  
  6825 00001FE1 0200                    word2:		dw 2
  6826 00001FE3 0300                    word3:		dw 3
  6827 00001FE5 0002                    word512:	dw 512
  6828                                  
  6829                                  ; =============== S U B	R O U T	I N E =======================================
  6830                                  
  6831                                  ; 15/10/2022
  6832                                  
  6833                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6834                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6835                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6836                                  ; as the bpb on the drive.
  6837                                  ;
  6838                                  ; no attempt is made to preserve registers since we are going to jump to
  6839                                  ; sysinit straight after this routine.
  6840                                  
  6841                                  setdrvparms:
  6842                                  		; 14/12/2023
  6843                                  		; ds = cs
  6844 00001FE7 31DB                    		xor	bx, bx
  6845                                  		; 18/10/2022
  6846 00001FE9 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6847                                  _next_bds:				
  6848 00001FED 06                      		push	es
  6849 00001FEE 57                      		push	di
  6850 00001FEF 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6851 00001FF3 80FB05                  		cmp	bl, 5		; ffHardFile
  6852 00001FF6 753E                    		jnz	short nothardff
  6853 00001FF8 31D2                    		xor	dx, dx
  6854 00001FFA 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6855 00001FFE 09C0                    		or	ax, ax
  6856 00002000 7508                    		jnz	short get_ccyl
  6857 00002002 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6858 00002006 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6859                                  
  6860                                  get_ccyl:				
  6861 0000200A 52                      		push	dx
  6862 0000200B 50                      		push	ax
  6863 0000200C 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6864 00002010 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6865                                  					; assume sectors per cyl. < 64k.
  6866 00002014 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6867 00002016 58                      		pop	ax
  6868 00002017 5A                      		pop	dx		; dx:ax	= total	sectors
  6869 00002018 50                      		push	ax
  6870 00002019 89D0                    		mov	ax, dx
  6871 0000201B 31D2                    		xor	dx, dx
  6872 0000201D F7F1                    		div	cx
  6873                                  
  6874                                  		; 14/12/2023  ; !*!
  6875                                  		; (data segment may not be same with code segment here)
  6876 0000201F 2EA3[2205]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6877                                  
  6878 00002023 58                      		pop	ax
  6879 00002024 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6880 00002026 09D2                    		or	dx, dx
  6881 00002028 7401                    		jz	short no_cyl_rnd ; came out even
  6882 0000202A 40                      		inc	ax		; round	up
  6883                                  
  6884                                  no_cyl_rnd:				
  6885 0000202B 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6886 0000202F 06                      		push	es
  6887 00002030 1F                      		pop	ds  ; !*! ; 14/12/2023
  6888 00002031 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6889                                  					; ds:si	-> bpb for hard	file
  6890 00002034 EB55                    		jmp	short set_recbpb
  6891                                  ; ---------------------------------------------------------------------------
  6892                                  
  6893                                  nothardff:				
  6894 00002036 0E                      		push	cs
  6895 00002037 1F                      		pop	ds
  6896                                  
  6897                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6898                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6899                                  
  6900                                  		; 10/12/2022
  6901                                  		; ds = cs
  6902                                  		; 17/10/2022 (ds=cs)
  6903 00002038 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  6904                                  		;cmp	byte [cs:fakefloppydrv], 1
  6905 0000203D 7454                    		jz	short go_to_next_bds
  6906 0000203F 80FB07                  		cmp	bl, 7		; ffother
  6907                                  					; special case "other" type of medium
  6908 00002042 753D                    		jnz	short not_process_other
  6909                                  process_other:
  6910 00002044 31D2                    		xor	dx, dx
  6911 00002046 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6912 00002049 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6913 0000204C F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6914 0000204F 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6915                                  					; have the total number of sectors
  6916 00002052 48                      		dec	ax
  6917 00002053 B201                    		mov	dl, 1
  6918                                  _again:					
  6919 00002055 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6920 00002058 7206                    		jb	short _@@
  6921 0000205A D1E8                    		shr	ax, 1
  6922 0000205C D0E2                    		shl	dl, 1
  6923 0000205E EBF5                    		jmp	short _again
  6924                                  ; ---------------------------------------------------------------------------
  6925                                  
  6926                                  _@@:					
  6927 00002060 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6928 00002063 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6929 00002065 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6930                                  __@@:					
  6931 0000206A 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6932                                  
  6933                                  ; logic to get the sectors/fat area.
  6934                                  ; fat entry is assumed to be 1.5 bytes!!!
  6935                                  
  6936                                  		; 10/12/2022
  6937                                  		; ds = cs
  6938                                  		; 17/10/2022 (ds=cs)
  6939 0000206D F726[E31F]              		mul	word [word3]
  6940 00002071 F736[E11F]              		div	word [word2]
  6941 00002075 31D2                    		xor	dx, dx
  6942 00002077 F736[E51F]              		div	word [word512]
  6943                                  		;
  6944                                  		; 10/12/2022
  6945                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6946                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6947                                  		;xor	dx, dx
  6948                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6949                                  		;
  6950 0000207B 40                      		inc	ax		; + 1
  6951                                  no_round_up:
  6952 0000207C 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6953 0000207F EB12                    		jmp	short go_to_next_bds
  6954                                  ; ---------------------------------------------------------------------------
  6955                                  
  6956                                  not_process_other:			
  6957 00002081 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6958                                  		;mov	si, bpbtable
  6959                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6960                                  		; 09/12/2022
  6961                                  		;mov	si, BPBTABLE
  6962                                  		;mov	si, [bx+si]	; get address of bpb
  6963                                  		; 10/12/2022
  6964                                  		;mov	si, [BPBTABLE+bx]
  6965                                  		; 13/12/2022
  6966                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6967                                  		; 14/08/2023
  6968                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6969                                  							; correct offset
  6970 00002083 8BB7[4272]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6971                                  		
  6972                                  		; 28/08/2023
  6973 00002087 81C6303C                		add	si, SYSINIT_OFFSET
  6974                                  set_recbpb:				
  6975 0000208B 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6976                                  					; es:di	-> recbpb
  6977 0000208E B91900                  		mov	cx, 25		; bpbx.size
  6978 00002091 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6979                                  go_to_next_bds:				
  6980 00002093 5F                      		pop	di
  6981 00002094 07                      		pop	es		; restore pointer to bds
  6982 00002095 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6983 00002098 83FFFF                  		cmp	di, 0FFFFh	; -1
  6984 0000209B 740A                    		jz	short got_end_of_bds_chain
  6985 0000209D E94DFF                  		jmp	_next_bds
  6986                                  ; ---------------------------------------------------------------------------
  6987                                  
  6988                                  		; 18/12/2022
  6989                                  ;got_end_of_bds_chain:			
  6990                                  		;retn
  6991                                  
  6992                                  ; =============== S U B	R O U T	I N E =======================================
  6993                                  
  6994                                  ; 15/10/2022
  6995                                  ; 30/12/2018 - Retro DOS v4.0
  6996                                  
  6997                                  ; al = device number
  6998                                  
  6999                                  print_init:	
  7000 000020A0 98                      		cbw
  7001 000020A1 89C2                    		mov	dx, ax
  7002 000020A3 B401                    		mov	ah, 1
  7003 000020A5 CD17                    		int	17h		; PRINTER - INITIALIZE
  7004                                  					; DX = printer port (0-3)
  7005                                  					; Return: AH = status
  7006                                  got_end_of_bds_chain:	; 18/12/2022
  7007 000020A7 C3                      		retn
  7008                                  
  7009                                  ; =============== S U B	R O U T	I N E =======================================
  7010                                  
  7011                                  ; al = device number
  7012                                  
  7013                                  aux_init:
  7014 000020A8 98                      		cbw
  7015 000020A9 89C2                    		mov	dx, ax
  7016                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  7017                                  					; 2400,n,1,8 (msequ.inc)
  7018                                  		;mov	ah, 0
  7019                                  		; 10/12/2022
  7020 000020AB B8A300                  		mov	ax, 00A3h
  7021 000020AE CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  7022                                  					; 	AL = initializing parameters,
  7023                                  					;	DX = port number (0-3)
  7024                                  					; Return: AH = RS-232 status code bits,
  7025                                  					;	  AL = modem status bits
  7026 000020B0 C3                      		retn
  7027                                  
  7028                                  ; =============== S U B	R O U T	I N E =======================================
  7029                                  
  7030                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7031                                  ; 30/12/2018 - Retro DOS v4.0
  7032                                  ; 03/06/2018 - Retro DOS v3.0
  7033                                  ; (19/03/2018 - Retro DOS v2.0)
  7034                                  
  7035                                  ; domini **********************************************************************
  7036                                  ;
  7037                                  ;mini disk initialization routine. called right after dohard
  7038                                  ;modified for >2 hardfile support
  7039                                  ;
  7040                                  ; **cs=ds=es=datagrp
  7041                                  ;
  7042                                  ; **domini will search for every extended partition in the system, and
  7043                                  ;   initialize it.
  7044                                  ;
  7045                                  ; **bdsm stands for bds table for mini disk and located right after the label
  7046                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  7047                                  ;   address of bdsm table.
  7048                                  ;
  7049                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  7050                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  7051                                  ;   right now, they are called as ismini, hidden_trks respectively.
  7052                                  ;
  7053                                  ; **domini will use the same routine in sethard routine after label set2 to
  7054                                  ;   save coding.
  7055                                  ;
  7056                                  ; **drvmax determined in dohard routine will be used for the next
  7057                                  ;   available logical mini disk drive number.
  7058                                  ;
  7059                                  ; input: drvmax, dskdrvs
  7060                                  ;
  7061                                  ; output: minidisk installed. bdsm table established and installed to bds.
  7062                                  ;	  end_of_bdsm - ending offset address of bdsm.
  7063                                  ;
  7064                                  ; called modules:
  7065                                  ;		  getboot
  7066                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  7067                                  ;
  7068                                  ;		  setmini (new, it will use set2 routine)
  7069                                  ;
  7070                                  ; variables used: end_of_bdsm
  7071                                  ;		  rom_minidisk_num
  7072                                  ;		  mini_hdlim, mini_seclim
  7073                                  ;		  BDS_STRUC, start_bds
  7074                                  ;
  7075                                  ;******************************************************************************
  7076                                  
  7077                                  		; 18/12/2023
  7078                                  		; 19/10/2022
  7079                                  domini:
  7080 000020B1 8A36[3917]              		mov	dh, [hnum]	; get number of hardfiles
  7081                                  		; 10/12/2022
  7082 000020B5 20F6                    		and	dh, dh
  7083                                  		;cmp	dh, 0
  7084 000020B7 742F                    		jz	short dominiret	; no hard file?	then exit.
  7085 000020B9 B280                    		mov	dl, 80h		; start	with hardfile 80h
  7086                                  domini_loop:
  7087 000020BB 52                      		push	dx
  7088 000020BC 8816[3817]              		mov	[rom_minidisk_num], dl
  7089 000020C0 B408                    		mov	ah, 8
  7090 000020C2 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7091                                  					; DL = drive number
  7092                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7093                                  					; DL = number of consecutive drives
  7094                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7095 000020C4 FEC6                    		inc	dh
  7096 000020C6 31C0                    		xor	ax, ax
  7097 000020C8 88F0                    		mov	al, dh
  7098 000020CA A3[3E17]                		mov	[mini_hdlim], ax ; # of heads
  7099 000020CD 80E13F                  		and	cl, 3Fh
  7100 000020D0 88C8                    		mov	al, cl
  7101 000020D2 A3[4017]                		mov	[mini_seclim], ax ; # of sectors/track
  7102                                  
  7103                                  		; 18/12/2023
  7104                                  		;push	es ; * ; not necessary
  7105 000020D5 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7106 000020D9 E8B0FB                  		call	getboot		; read master boot record into
  7107                                  					; initbootsegment:bootbias
  7108 000020DC 7203                    		jc	short domininext
  7109 000020DE E80800                  		call	find_mini_partition
  7110                                  domininext:
  7111                                  		;pop	es ; *
  7112 000020E1 5A                      		pop	dx
  7113 000020E2 FEC2                    		inc	dl		; next hard file
  7114 000020E4 FECE                    		dec	dh
  7115 000020E6 75D3                    		jnz	short domini_loop
  7116                                  dominiret:
  7117 000020E8 C3                      		retn
  7118                                  
  7119                                  ; =============== S U B	R O U T	I N E =======================================
  7120                                  
  7121                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7122                                  ; 30/12/2018 - Retro DOS v4.0
  7123                                  
  7124                                  ;find_mini_partition tries to find every extended partition on a disk.
  7125                                  ;at entry:	di -> bdsm entry
  7126                                  ;		es:bx -> 07c0:bootbias - master boot record
  7127                                  ;		rom_minidisk_num - rom drive number
  7128                                  ;		drvmax - logical drive number
  7129                                  ;		mini_hdlim, mini_seclim
  7130                                  ;
  7131                                  ;called routine: setmini which uses set2 (in sethard routine)
  7132                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  7133                                  
  7134                                  
  7135                                  find_mini_partition:	
  7136 000020E9 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  7137                                  fmpnext:				
  7138 000020ED 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  7139 000020F1 740A                    		jz	short fmpgot
  7140 000020F3 83C310                  		add	bx, 16
  7141 000020F6 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7142 000020FA 75F1                    		jnz	short fmpnext
  7143                                  		;jmp	short fmpnextfound ; extended partition	not found
  7144                                  		; 18/12/2022
  7145                                  fmpnextfound:
  7146 000020FC C3                      		retn
  7147                                  
  7148                                  ;		; 30/07/2019 - Retro DOS v3.2
  7149                                  ;		jb	short fmpnext
  7150                                  ;fmpret:
  7151                                  ;		retn	; 29/05/2019
  7152                                  
  7153                                  ; ---------------------------------------------------------------------------
  7154                                  
  7155                                  		; 19/10/2022
  7156                                  fmpgot:					; found my partition.
  7157 000020FD E89D00                  		call	dmax_check	; check	for drvmax already 26
  7158 00002100 73FA                    		jnb	short fmpnextfound ; done if too many
  7159 00002102 8B3E[3C17]              		mov	di, [end_of_bdss] ; get next free bds
  7160 00002106 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7161                                  		; 10/12/2022
  7162 0000210B 804D2301                		or	byte [di+23h], 1
  7163                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  7164                                  					; fNon_Removable
  7165 0000210F C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7166                                  					; ffHardFile
  7167 00002113 C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  7168 00002118 A1[3E17]                		mov	ax, [mini_hdlim]
  7169 0000211B 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  7170 0000211E A1[4017]                		mov	ax, [mini_seclim]
  7171 00002121 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  7172 00002124 A0[3817]                		mov	al, [rom_minidisk_num]
  7173 00002127 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  7174                                  					; set physical number
  7175 0000212A A0[7500]                		mov	al, [drvmax]
  7176 0000212D 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7177                                  					; set logical number
  7178 00002130 26837F0A00              		cmp	word [es:bx+10], 0
  7179 00002135 7707                    		ja	short fmpgot_cont
  7180 00002137 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  7181                                  					; only lower word is meaningful.
  7182 0000213C 72BE                    		jb	short fmpnextfound
  7183                                  					; should be bigger than 64 sectors at least
  7184                                  fmpgot_cont:				
  7185 0000213E 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  7186 00002141 268A7702                		mov	dh, [es:bx+2]	; cylinder
  7187 00002145 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  7188 00002148 D0C6                    		rol	dh, 1
  7189 0000214A D0C6                    		rol	dh, 1
  7190 0000214C 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  7191 00002150 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  7192                                  					; set hidden trks
  7193 00002153 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  7194 00002157 268A7701                		mov	dh, [es:bx+1]	; head
  7195 0000215B 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7196 0000215F BB0002                  		mov	bx, 200h	; bootbias
  7197 00002162 B80102                  		mov	ax, 201h
  7198 00002165 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7199                                  					; AL = number of sectors to read, CH = track, CL = sector
  7200                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7201                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7202 00002167 7293                    		jc	short fmpnextfound
  7203 00002169 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7204                                  
  7205                                  		; 14/08/2023
  7206                                  		;push	es
  7207 0000216C E80800                  		call	setmini		; install a mini disk.
  7208                                  					; bx value saved.
  7209                                  		;pop	es  ; 14/08/2023
  7210 0000216F 7203                    		jc	short fmpnextchain
  7211 00002171 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  7212                                  fmpnextchain:				
  7213 00002174 E976FF                  		jmp	fmpnext		; let's find out
  7214                                  					; if we	have any chained partition
  7215                                  ; ---------------------------------------------------------------------------
  7216                                  
  7217                                  		; 18/12/2022
  7218                                  ;fmpnextfound:
  7219                                  		;retn
  7220                                  
  7221                                  ; =============== S U B	R O U T	I N E =======================================
  7222                                  
  7223                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7224                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7225                                  
  7226                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7227                                  	
  7228 00002177 57                      		push	di
  7229 00002178 53                      		push	bx
  7230                                  		; 14/08/2023
  7231                                  		; ds = cs = BIOSDATA segment
  7232                                  		;push	ds
  7233 00002179 06                      		push	es
  7234                                  setmini_1:				
  7235 0000217A 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7236 0000217E 741A                    		jz	short setmini_2
  7237 00002180 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7238 00002184 7414                    		jz	short setmini_2
  7239 00002186 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  7240 0000218A 740E                    		jz	short setmini_2
  7241 0000218C 83C310                  		add	bx, 16
  7242 0000218F 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7243 00002193 75E5                    		jnz	short setmini_1
  7244 00002195 F9                      		stc
  7245 00002196 07                      		pop	es
  7246                                  		; 14/08/2023
  7247                                  		;pop	ds
  7248 00002197 5B                      		pop	bx
  7249 00002198 5F                      		pop	di
  7250 00002199 C3                      		retn
  7251                                  
  7252                                  ; ---------------------------------------------------------------------------
  7253                                  setmini_2:				
  7254 0000219A E98EFB                  		jmp	set2		; branch into middle of sethard
  7255                                  
  7256                                  ; =============== S U B	R O U T	I N E =======================================
  7257                                  
  7258                                  ; 15/10/2022
  7259                                  ; 28/12/2018 - Retro DOS v4.0
  7260                                  ;
  7261                                  ; dmax_check --- call this when we want to install a new drive.
  7262                                  ;		it checks for drvmax < 26 to see if there is
  7263                                  ;		a drive letter left.
  7264                                  ;
  7265                                  ;	drvmax < 26 : carry SET!
  7266                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7267                                  ;			trash ax
  7268                                  
  7269                                  dmax_check:	
  7270 0000219D 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7271 000021A2 720D                    		jb	short dmax_ok	; return with carry if okay
  7272 000021A4 06                      		push	es
  7273                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7274 000021A5 B83304                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7275 000021A8 8EC0                    		mov	es, ax
  7276                                  		; 18/10/2022
  7277 000021AA 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7278                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7279                                  					; set message flag
  7280                                  					; [SYSINIT+toomanydrivesflag]
  7281 000021B0 07                      		pop	es
  7282                                  
  7283                                  		;;push	es
  7284                                  		;;mov	ax,SYSINIT_SEG
  7285                                  		;;mov	es,ax
  7286                                  		;;mov	byte [es:toomanydrivesflag],1
  7287                                  					; set message flag
  7288                                  		;;pop	es
  7289                                  		;
  7290                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7291                                  dmax_ok:				
  7292 000021B1 C3                      		retn
  7293                                  
  7294                                  ; =============== S U B	R O U T	I N E =======================================
  7295                                  
  7296                                  ; 18/10/2022
  7297                                  ; 15/10/2022
  7298                                  ; 28/12/2018 - Retro DOS v4.0						
  7299                                  ;								 
  7300                                  ;	link next bds (at ds:di) into the chain. assume that the
  7301                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7302                                  ;	  dskdrv_table, and end_of_bdss.	
  7303                                  
  7304                                  xinstall_bds:		
  7305 000021B2 56                      		push	si
  7306 000021B3 53                      		push	bx
  7307 000021B4 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7308                                  xinstall_bds_1:				
  7309 000021B8 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7310 000021BB 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  7311                                  		;mov	si, [si+BDS.link]
  7312 000021BD 8B34                    		mov	si, [si]	; chain	through	list
  7313 000021BF EBF7                    		jmp	short xinstall_bds_1
  7314                                  ; ---------------------------------------------------------------------------
  7315                                  
  7316                                  xinstall_bds_2:				
  7317                                  		;mov	[si+BDS.link], di
  7318 000021C1 893C                    		mov	[si], di
  7319                                  		;mov	[si+BDS.link+2], ds
  7320 000021C3 8C5C02                  		mov	[si+2], ds
  7321                                  		;mov	word [di+BDS.link], -1
  7322 000021C6 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7323                                  		;mov	[di+BDS.link+2], ds
  7324 000021CA 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7325                                  		; 20/03/2019 - Retro DOS v4.0
  7326                                  		;lea	bx, [di+BDS.BPB]
  7327 000021CD 8D5D06                  		lea	bx, [di+6]
  7328 000021D0 8B36[3A17]              		mov	si, [last_dskdrv_table]
  7329 000021D4 891C                    		mov	[si], bx
  7330 000021D6 8306[3A17]02            		add	word [last_dskdrv_table], 2
  7331 000021DB FE06[7500]              		inc	byte [drvmax]
  7332 000021DF 8306[3C17]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7333 000021E4 5B                      		pop	bx
  7334 000021E5 5E                      		pop	si
  7335 000021E6 C3                      		retn
  7336                                  
  7337                                  ; =============== S U B	R O U T	I N E =======================================
  7338                                  
  7339                                  ; 17/10/2022
  7340                                  ; 15/10/2022
  7341                                  ; 28/12/2018 - Retro DOS v4.0
  7342                                  ; 03/06/2018 - Retro DOS v3.0
  7343                                  
  7344                                  		; 19/12/2023
  7345                                  cmos_clock_read:	
  7346 000021E7 50                      		push	ax
  7347 000021E8 51                      		push	cx
  7348 000021E9 52                      		push	dx
  7349 000021EA 55                      		push	bp
  7350 000021EB 31ED                    		xor	bp, bp
  7351                                  loop_clock:
  7352 000021ED 31C9                    		xor	cx, cx
  7353 000021EF 31D2                    		xor	dx, dx
  7354 000021F1 B402                    		mov	ah, 2
  7355 000021F3 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7356                                  					; Return: CH = hours in	BCD
  7357                                  					; CL = minutes in BCD
  7358                                  					; DH = seconds in BCD
  7359 000021F5 83F900                  		cmp	cx, 0
  7360 000021F8 7512                    		jnz	short clock_present
  7361 000021FA 83FA00                  		cmp	dx, 0
  7362 000021FD 750D                    		jnz	short clock_present
  7363 000021FF 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7364 00002202 741B                    		jz	short no_readdate ; was	at zero	setting.
  7365 00002204 45                      		inc	bp		; only perform delay once.
  7366 00002205 B90040                  		mov	cx, 4000h	; 16384
  7367                                  delay:
  7368 00002208 E2FE                    		loop	delay
  7369 0000220A EBE1                    		jmp	short loop_clock
  7370                                  ; ---------------------------------------------------------------------------
  7371                                  
  7372                                  clock_present:
  7373                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7374                                  		; 19/12/2023
  7375                                  		; ds = cs
  7376 0000220C C606[EC04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  7377                                  		
  7378 00002211 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7379                                  					; possibly destroyed by	cp dos and
  7380                                  					; post routine did not restore that.
  7381 00002214 56                      		push	si
  7382 00002215 E807F3                  		call	read_real_date	; read real-time clock for date
  7383 00002218 FA                      		cli
  7384                                  		;mov	ds:daycnt, si	; set system date
  7385 00002219 8936[E904]              		mov	[daycnt], si
  7386 0000221D FB                      		sti
  7387 0000221E 5E                      		pop	si
  7388                                  no_readdate:
  7389 0000221F 5D                      		pop	bp
  7390 00002220 5A                      		pop	dx
  7391 00002221 59                      		pop	cx
  7392 00002222 58                      		pop	ax
  7393                                  cmosck9:	; 19/12/2023
  7394 00002223 C3                      		retn
  7395                                  
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  
  7398                                  ; the following code is written by jack gulley in engineering group.
  7399                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7400                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7401                                  ; the cmos clock rate are still slow which slow down disk operations
  7402                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7403                                  ; to fix this problem at the request of cp dos.
  7404                                  ;
  7405                                  ; the program is modified to be run on msinit. equates are defined
  7406                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7407                                  ;
  7408                                  ;  the following code cmosck is used to insure that the cmos has not
  7409                                  ;	had its rate controls left in an invalid state on older at's.
  7410                                  ;
  7411                                  ;	it checks for an at model byte "fc" with a submodel type of
  7412                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7413                                  ;	bits in case post has not done it. this initialization routine
  7414                                  ;	is only needed once when dos loads. it should be run as soon
  7415                                  ;	as possible to prevent slow diskette access.
  7416                                  ;
  7417                                  ;	this code exposes one to dos clearing cmos setup done by a
  7418                                  ;	resident program that hides and re-boots the system.
  7419                                  
  7420                                  cmosck:					; check and reset rtc rate bits
  7421                                  
  7422                                  ;model byte and submodel byte were already determined in msinit.
  7423                                  
  7424                                  	; 16/06/2018 - Retro DOS v3.0
  7425                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7426                                  
  7427                                  		; 19/12/2023
  7428                                  		; ds = cs
  7429                                  		;push	ax ; not necessary ; 19/12/2023
  7430                                  		;
  7431 00002224 803E[3506]FC            		cmp	byte [model_byte], 0FCh
  7432                                  		;cmp	byte [cs:model_byte], 0FCh
  7433 00002229 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  7434 0000222B 2E803E[3606]06          		cmp	byte [cs:secondary_model_byte], 6
  7435                                  		;cmp	byte [cs:secondary_model_byte], 6
  7436                                  					; Is it 06 for the industral AT ?
  7437 00002231 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7438 00002233 803E[3606]04            		cmp	byte [secondary_model_byte], 4
  7439                                  		;cmp	byte [cs:secondary_model_byte], 4
  7440                                  					; Is it 00, 01, 02, or 03 ?
  7441 00002238 73E9                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7442                                  					; Also,Secondary_model_byte = 0
  7443                                  					;   when AH=0C0h, int 15h failed.
  7444                                  					;	RESET THE CMOS PERIODIC RATE
  7445                                  					;  Model=FC submodel=00,01,02,03 or 06
  7446                                  cmosck4:
  7447 0000223A B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7448                                  					; NMI disabled on return
  7449 0000223C B426                    		mov	ah, 26h		; 00100110b
  7450                                  					; Set divider & rate selection
  7451 0000223E E80B00                  		call	cmos_write
  7452 00002241 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7453                                  					; NMI disabled on return
  7454 00002243 E82000                  		call	cmos_read
  7455 00002246 2407                    		and	al, 7		; 00000111b
  7456                                  					; clear SET,PIE,AIE,UIE,SQWE
  7457 00002248 88C4                    		mov	ah, al
  7458 0000224A B00B                    		mov	al, 0Bh		; cmos_reg_b
  7459                                  					; NMI enabled on return
  7460                                  		; 19/12/2023
  7461                                  		;call	cmos_write
  7462                                  ;cmosck9:
  7463                                  		;pop	ax ; 19/12/2023
  7464                                  		;retn
  7465                                  
  7466                                  		; 19/12/2023
  7467                                  		;jmp	short cmos_write
  7468                                  
  7469                                  ; =============== S U B	R O U T	I N E =======================================
  7470                                  
  7471                                  ;--- cmos_write ----------------------------------------------------------------
  7472                                  ;		write byte to cmos system clock configuration table	       :
  7473                                  ;									       :
  7474                                  ; input: (al)=	cmos table address to be written to			       :
  7475                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7476                                  ;		bits 6-0 = address of table location to write		       :
  7477                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7478                                  ;									       :
  7479                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7480                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7481                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7482                                  ;		the cmos address register is pointed to a default value and    :
  7483                                  ;		the interrupt flag restored to the entry state on return.      :
  7484                                  ;		only the cmos location and the nmi state is changed.	       :
  7485                                  ;-------------------------------------------------------------------------------
  7486                                  
  7487                                  cmos_write:				; write (ah) to location (al)
  7488 0000224C 9C                      		pushf			;
  7489 0000224D 50                      		push	ax		; save work register values
  7490 0000224E FA                      		cli
  7491 0000224F 50                      		push	ax		; save user nmi	state
  7492 00002250 0C80                    		or	al, 80h		; disable nmi for us
  7493 00002252 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7494                                  					; RTC Seconds
  7495 00002254 90                      		nop
  7496 00002255 88E0                    		mov	al, ah
  7497 00002257 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7498 00002259 58                      		pop	ax		; get user nmi
  7499 0000225A 2480                    		and	al, 80h
  7500 0000225C 0C0F                    		or	al, 0Fh
  7501 0000225E E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7502                                  					; RTC Seconds
  7503 00002260 90                      		nop
  7504 00002261 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7505 00002263 58                      		pop	ax		; restore work registers
  7506                                  
  7507                                  		; 19/12/2023
  7508                                  		;push	cs		; *place code segment in stack and
  7509                                  		;call	cmos_popf	; *handle popf for b- level 80286
  7510                                  		;retn
  7511 00002264 EB18                    		jmp	short cmos_rw_popf
  7512                                  
  7513                                  ; =============== S U B	R O U T	I N E =======================================
  7514                                  
  7515                                  ;--- CMOS_READ -----------------------------------------------------------------
  7516                                  ;		read byte from cmos system clock configuration table	       :
  7517                                  ;									       :
  7518                                  ; input: (al)=	cmos table address to be read				       :
  7519                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7520                                  ;		bits 6-0 = address of table location to read		       :
  7521                                  ;									       :
  7522                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7523                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  7524                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7525                                  ;		the cmos address register is pointed to a default value and    :
  7526                                  ;		the interrupt flag restored to the entry state on return.      :
  7527                                  ;		only the (al) register and the nmi state is changed.	       :
  7528                                  ;-------------------------------------------------------------------------------
  7529                                  
  7530                                  cmos_read:				; read location (al) into (al)
  7531 00002266 9C                      		pushf
  7532 00002267 FA                      		cli
  7533 00002268 53                      		push	bx
  7534                                  		;push	ax ; *		; AL = cmos table address to be read
  7535                                  		; 19/12/2023
  7536 00002269 89C3                    		mov	bx, ax ; * ; input
  7537 0000226B 0C80                    		or	al, 80h
  7538 0000226D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7539                                  					; RTC Seconds
  7540 0000226F 90                      		nop			; (undocumented delay needed)
  7541 00002270 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7542                                  		
  7543                                  		;mov	bx, ax ; output
  7544                                  		;pop	ax ; * ; input
  7545                                  
  7546                                  		; 19/12/2023
  7547                                  		; al = output, bl = input
  7548 00002272 93                      		xchg	ax, bx ; *
  7549                                  		; bl = output, al = input
  7550                                  	
  7551 00002273 2480                    		and	al, 80h
  7552 00002275 0C0F                    		or	al, 0Fh
  7553 00002277 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7554                                  					; RTC Seconds
  7555 00002279 90                      		nop
  7556 0000227A E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7557                                  		;mov	ax, bx ; * ; output
  7558                                  		; 19/12/2023
  7559 0000227C 93                      		xchg	ax, bx
  7560 0000227D 5B                      		pop	bx
  7561                                  
  7562                                  		; 19/12/2023
  7563                                  cmos_rw_popf:
  7564 0000227E 0E                      		push	cs		; *place code segment in stack and
  7565 0000227F E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7566 00002282 C3                      		retn			; return with flags restored
  7567                                  
  7568                                  ; ---------------------------------------------------------------------------
  7569                                  
  7570                                  cmos_popf:				
  7571 00002283 CF                      		iret			; popf for level b- parts
  7572                                  					; return far and restore flags
  7573                                  
  7574                                  ; 21/12/2022
  7575                                  ; ---------------------------------------------------------------------------
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  %if 0
  7578                                  
  7579                                  ; ---------------------------------------------------------------------------
  7580                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7581                                  ; ---------------------------------------------------------------------------
  7582                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7583                                  ; ---------------------------------------------------------------------------
  7584                                  
  7585                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7586                                  ;
  7587                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7588                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7589                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7590                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7591                                  
  7592                                  ; =============== S U B	R O U T	I N E =======================================
  7593                                  
  7594                                  ; GetClus, read in a cluster at a specified address
  7595                                  ;
  7596                                  ;  bx = cluster to read
  7597                                  ;  cx = sectors per cluster
  7598                                  ;  es:di = load location
  7599                                  
  7600                                  ; 17/10/2022
  7601                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7602                                  ; 09/12/2022
  7603                                  DISKRD equ diskrd
  7604                                  
  7605                                  		; 17/10/2022
  7606                                  getclus:
  7607                                  		; 14/12/2023
  7608                                  		; 13/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0 IO.SYS)
  7609                                  		; ds = cs
  7610                                  
  7611                                  		push	cx
  7612                                  		push	di
  7613                                  		;mov	[cs:doscnt], cx
  7614                                  		mov	[doscnt], cx ; 13/12/2023
  7615                                  		mov	ax, bx
  7616                                  		dec	ax
  7617                                  		dec	ax
  7618                                  		mul	cx		; convert to logical sector
  7619                                  					; dx:ax	= matching logical sector number
  7620                                  					;	  starting from the data sector
  7621                                  		;add	ax, [cs:bios_l]
  7622                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7623                                  		; 13/12/2023
  7624                                  		add	ax, [bios_l]
  7625                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7626                                  unpack:
  7627                                  		push	ds ; ds = cs ; 13/12/2023
  7628                                  		push	dx ; * ; 13/12/2023
  7629                                  		push	ax
  7630                                  		push	bx
  7631                                  		;mov	si, [cs:fatloc]
  7632                                  		mov	si, [fatloc] ; 13/12/2023
  7633                                  		mov	ds, si
  7634                                  		mov	si, bx		; next cluster
  7635                                  		test	byte [cs:fbigfat], 40h	; fbig
  7636                                  					; 16 bit fat?
  7637                                  		jnz	short unpack16	; yes
  7638                                  		shr	si, 1		; 12 bit fat. si=si/2
  7639                                  					; si = clus + clus/2
  7640                                  		add	si, bx		;
  7641                                  					; (si =	byte offset of the cluster in the FAT)
  7642                                  		;push	dx ; 13/12/2023
  7643                                  		xor	dx, dx
  7644                                  		; 12/12/2023
  7645                                  		; ds = FAT buffer segment
  7646                                  		call	get_fat_sector
  7647                                  		;pop	dx ; 12/12/2023
  7648                                  
  7649                                  		mov	ax, [bx]	; save it into ax
  7650                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7651                                  		; 25/06/2023
  7652                                  		;mov	al, [bx]	; splitted fat
  7653                                  
  7654                                  		; 13/12/2023
  7655                                  		;mov	[cs:temp_cluster], al
  7656                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7657                                  
  7658                                  		inc	si		; (next	byte)
  7659                                  
  7660                                  		;push	dx ; 13/12/2023
  7661                                  		xor	dx, dx
  7662                                  		call	get_fat_sector
  7663                                  		;pop	dx ; 13/12/2023
  7664                                  
  7665                                  		;mov	al, ds:0
  7666                                  		; 13/12/2023
  7667                                  		; ds = FAT buffer segment
  7668                                  		;mov	al, [0] ; 19/10/2022
  7669                                  		;mov	[cs:temp_cluster+1], al
  7670                                  		;mov	ax, [cs:temp_cluster]
  7671                                  		; 13/12/2023
  7672                                  		;mov	al, [cs:temp_cluster]
  7673                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7674                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7675                                  even_odd:
  7676                                  		pop	bx		; restore old fat entry	value
  7677                                  		push	bx		; save it right	away.
  7678                                  		shr	bx, 1		; was it even or odd?
  7679                                  		jnb	short havclus	; it was even.
  7680                                  		shr	ax, 1		; odd. massage fat value and keep
  7681                                  					; the highest 12 bits.
  7682                                  		shr	ax, 1
  7683                                  		shr	ax, 1
  7684                                  		shr	ax, 1
  7685                                  havclus:
  7686                                  		mov	bx, ax		; now bx = new fat entry.
  7687                                  		and	bx, 0FFFh	; keep low 12 bits.
  7688                                  		jmp	short unpackx
  7689                                  ; ---------------------------------------------------------------------------
  7690                                  
  7691                                  unpack16:
  7692                                  		;push	dx	; 13/12/2023
  7693                                  		xor	dx, dx ; 0
  7694                                  		shl	si, 1		; extend to 32 bit offset
  7695                                  		;adc	dx, 0
  7696                                  		; 13/12/2023
  7697                                  		rcl	dx, 1
  7698                                  
  7699                                  		; 13/12/2023
  7700                                  		; ds = FAT buffer segment
  7701                                  		call	get_fat_sector
  7702                                  		;pop	dx	; 13/12/2023
  7703                                  		mov	bx, [bx]	;
  7704                                  					; bx = new fat entry.
  7705                                  unpackx:
  7706                                  		pop	si		; restore old bx value into si
  7707                                  		pop	ax		; restore logical sector (low)
  7708                                  		pop	dx ; * ; 13/12/2023
  7709                                  		pop	ds
  7710                                  		; 13/12/2023
  7711                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7712                                  		; ((consequtive clusters --> consequtive sectors))
  7713                                  		; ds = cs
  7714                                  		sub	si, bx
  7715                                  		cmp	si, -1		; one apart? (consequtive?)
  7716                                  					; (current = previous+1)
  7717                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7718                                  		;add	[cs:doscnt], cx
  7719                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7720                                  		jmp	short unpack
  7721                                  ; ---------------------------------------------------------------------------
  7722                                  
  7723                                  getcl2:
  7724                                  		push	bx
  7725                                  		push	dx		; sector to read (high)
  7726                                  		push	ax		; sector to read (low)
  7727                                  
  7728                                  		; 13/12/2023
  7729                                  		; ds = cs
  7730                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7731                                  		;mov	cx, [cs:doscnt]
  7732                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7733                                  		mov	cx, [doscnt]
  7734                                  
  7735                                  		pop	dx		; sector to read for diskrd (low)
  7736                                  		;pop	word [cs:start_sec_h]
  7737                                  		; 13/12/2023
  7738                                  		pop	word [start_sec_h]
  7739                                  					; sector to read for diskrd (high)
  7740                                  		; 13/12/2023
  7741                                  		; ds = cs
  7742                                  		;push	ds
  7743                                  		;push	cs
  7744                                  		;pop	ds
  7745                                  
  7746                                  		push	cs		; simulate far call
  7747                                  		; 17/10/2022
  7748                                  		mov	bp, DISKRD	; 8E5h
  7749                                  		;mov	bp, 8E5h	; offset diskrd
  7750                                  					; 2C7h:8E5h = 70h:2E55h
  7751                                  		call	call_bios_code	; read the clusters
  7752                                  		
  7753                                  		;pop	ds
  7754                                  		; 13/12/2023
  7755                                  		; ds = cs
  7756                                  		pop	bx
  7757                                  		pop	di
  7758                                  
  7759                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7760                                  		; 13/12/2023
  7761                                  		mov	ax, [doscnt]
  7762                                  		xchg	ah, al		; multiply by 256
  7763                                  		shl	ax, 1		; times	2 equal	512
  7764                                  		add	di, ax		; update load location
  7765                                  		pop	cx		; restore sectors/cluster
  7766                                  		retn
  7767                                  
  7768                                  ; =============== S U B	R O U T	I N E =======================================
  7769                                  
  7770                                  
  7771                                  ;function: find and read the corresponding fat sector into ds:0
  7772                                  ;
  7773                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7774                                  ;     ds - fatloc segment
  7775                                  ;     cs:drvfat - logical drive number, fat id
  7776                                  ;     cs:md_sectorsize
  7777                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7778                                  ;
  7779                                  ;out). corresponding fat sector read in.
  7780                                  ;      bx = offset value from fatlog segment.
  7781                                  ;      other registera saved.
  7782                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7783                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7784                                  ;      should save this byte, and read the next fat sector to get the rest
  7785                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7786                                  
  7787                                  		; 17/10/2022
  7788                                  get_fat_sector:
  7789                                  		; 14/12/2023
  7790                                  		; 13/12/2023
  7791                                  		; ds = fat buffer segment
  7792                                  
  7793                                  		; 13/12/2023
  7794                                  		;push	ax ; (not necessary)
  7795                                  		push	cx ; read count (sectors per cluster)
  7796                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7797                                  		push	si ; FAT offset value (from fat entry 0)
  7798                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7799                                  		push	ds ; FAT buffer segment
  7800                                  
  7801                                  		; 13/12/2023
  7802                                  		push	cs
  7803                                  		pop	ds
  7804                                  
  7805                                  		mov	ax, si
  7806                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7807                                  		; 13/12/2023
  7808                                  		;mov	cx, [md_sectorsize] ; 512
  7809                                  		;div	cx		; ax = sector number, dx = offset
  7810                                  		; 13/12/2023
  7811                                  		;nop
  7812                                  
  7813                                  		; 13/12/2023
  7814                                  		div	word [md_sectorsize] ; 512
  7815                                  
  7816                                  		; ax = FAT sector (sequence/index) number
  7817                                  		; dx = cluster number offset
  7818                                  
  7819                                  		; Get rid of the assumption that
  7820                                  		; there	is only	one reserved sector
  7821                                  
  7822                                  		; 13/12/2023 ; *
  7823                                  		;push	es ; *
  7824                                  		;push	ds ; *
  7825                                  		;push	di ; *
  7826                                  		push	ax
  7827                                  		;push	cs ; *
  7828                                  		;pop	ds ; *
  7829                                  
  7830                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7831                                  		; 13/12/2023
  7832                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7833                                  		mov	bp, SETDRIVE
  7834                                  		;;mov	bp, 4D7h	; setdrive
  7835                                  					; at 2C7h:4D7h = 70h:2A47h
  7836                                  		push	cs		; simulate far call
  7837                                  		call	call_bios_code	; get bds for drive
  7838                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7839                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7840                                  					; add #reserved_sectors
  7841                                  		; 13/12/2023
  7842                                  		;pop	di ; *
  7843                                  		;pop	ds ; *
  7844                                  		;pop	es ; *
  7845                                  
  7846                                  		; 13/12/2023
  7847                                  		; ds = cs
  7848                                  		cmp	ax, [last_fat_sec_num]
  7849                                  		;cmp	ax, [cs:last_fat_sec_num]
  7850                                  		jz	short gfs_split_chk ; don't need to read it again.
  7851                                  		mov	[last_fat_sec_num], ax
  7852                                  		;mov	[cs:last_fat_sec_num], ax
  7853                                  					; sector number
  7854                                  					; (in the partition, without hidden sectors)
  7855                                  		; 13/12/2023
  7856                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7857                                  		push	es ; (put it on top of the stack again)
  7858                                  
  7859                                  		push	dx ; cluster number offset
  7860                                  
  7861                                  		; 13/12/2023
  7862                                  		xor	cx, cx
  7863                                  		mov	[start_sec_h], cx ;0 
  7864                                  		;mov	word [cs:start_sec_h], 0 
  7865                                  					; prepare to read the fat sector
  7866                                  					; start_sec_h is always	0 for fat sector.
  7867                                  		mov	dx, ax
  7868                                  		; 13/12/2023
  7869                                  		inc	cx ; cx = 1
  7870                                  		;mov	cx, 1		; 1 sector read
  7871                                  		;mov	ax, [cs:drvfat]
  7872                                  		mov	ax, [drvfat]
  7873                                  		;push	ds
  7874                                  		;pop	es
  7875                                  
  7876                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7877                                  		
  7878                                  		; 13/12/2023
  7879                                  		;push	ds
  7880                                  		;push	cs
  7881                                  		;pop	ds
  7882                                  		
  7883                                  		push	cs		; simulate far call
  7884                                  		mov	bp, DISKRD	; 8E5h
  7885                                  		;mov	bp, 8E5h	; offset diskrd
  7886                                  					; 2C7h:8E5h = 70h:2E55h
  7887                                  		call	call_bios_code
  7888                                  
  7889                                  		; 13/12/2023
  7890                                  		;pop	ds
  7891                                  		; ds = cs = biosdata segment
  7892                                  
  7893                                  		pop	dx ; cluster number offset 
  7894                                  
  7895                                  gfs_split_chk:
  7896                                  		; 13/12/2023
  7897                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7898                                  		mov	cx, [md_sectorsize]
  7899                                  ;gfs_split_chk:
  7900                                  		dec	cx		; 511
  7901                                  		cmp	dx, cx		; if offset points to the
  7902                                  					; last byte of this sector,
  7903                                  					; then splitted	entry.
  7904                                  		mov	bx, dx		; set bx to dx
  7905                                  		
  7906                                  		; 13/12/2023
  7907                                  		; bx = dx = cluster number offset in the FAT buffer
  7908                                  		pop	ds ; FAT buffer segment
  7909                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7910                                  		pop	si ; FAT offset value (from fat entry 0)
  7911                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7912                                  		pop	cx ; read count (sectors per cluster)
  7913                                  		;pop	ax
  7914                                  
  7915                                  		retn
  7916                                  ; 15/10/2022
  7917                                  ;Bios_Data_Init	ends
  7918                                  
  7919                                  %endif
  7920                                  ; ---------------------------------------------------------------------------
  7921                                  ; ---------------------------------------------------------------------------
  7922                                  
  7923                                  		; 09/12/2022
  7924                                  		;db 0
  7925                                  
  7926                                  numbertodiv	equ ($-BData_start)
  7927                                  numbertomod	equ (numbertodiv % 16)
  7928                                  
  7929                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7930 00002284 00<rep Ch>              		times (16-numbertomod) db 0
  7931                                  %endif
  7932                                  
  7933                                  ;align 16
  7934                                  
  7935                                  ; 09/12/2022
  7936                                  IOSYSCODESEGOFF equ $ - BData_start
  7937                                  ; 29/09/2023
  7938                                  ;IOSYSCODESEGOFF equ $-$$
  7939                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7940                                  
  7941                                  ; 28/09/2023
  7942                                  S1SIZE equ $-$$
  7943                                  
  7944                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7945                                  ; ---------------------------------------------------------------------------
  7946                                  		;db 4 dup(0)
  7947                                  ; 09/12/2022		
  7948                                  ;		times 4 db 0	; 19/10/2022
  7949                                  ; ---------------------------------------------------------------------------
  7950                                  
  7951                                  ;============================================================================
  7952                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7953                                  ;============================================================================
  7954                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7955                                  
  7956                                  section .BIOSCODE vstart=0  
  7957                                  
  7958                                  BCode_start:	 ; 09/12/2022
  7959                                   
  7960                                  ; 02/10/2022
  7961                                  
  7962                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7963                                  ;----------------------------------------------------------------------------
  7964                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7965                                  ;----------------------------------------------------------------------------
  7966                                  
  7967                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7968 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7969 00000030 7000                    BiosDataWord:	dw 70h
  7970                                  
  7971                                  ; 15/10/2022
  7972                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7973                                  ; 09/12/2022
  7974                                  BIOSDATAWORD	equ BiosDataWord
  7975                                  
  7976                                  ; ---------------------------------------------------------------------------
  7977                                  
  7978                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7979                                  
  7980                                  ;************************************************************************
  7981                                  ;*									*
  7982                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7983                                  ;*	  trashes di, cx, es						*
  7984                                  ;*									*
  7985                                  ;*	cas -- should be made disposable!				*
  7986                                  ;*									*
  7987                                  ;************************************************************************
  7988                                  
  7989                                  _seg_reinit:
  7990 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7991                                  					; at 2C7h:30h or 70h:25A0h
  7992                                  		;mov	di, (offset cdev+2)
  7993 00000037 BF[D706]                		mov	di, cdev+2	; 19/10/2022
  7994 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7995                                  
  7996                                  _seg_reinit_1:				
  7997 0000003D AB                      		stosw			; modify Bios_Code entry points
  7998 0000003E 47                      		inc	di
  7999 0000003F 47                      		inc	di
  8000 00000040 E2FB                    		loop	_seg_reinit_1
  8001 00000042 CB                      		retf
  8002                                  
  8003                                  ; ---------------------------------------------------------------------------
  8004                                  
  8005                                  ; 15/10/2022
  8006                                  
  8007                                  ;************************************************************************
  8008                                  ;*									*
  8009                                  ;*	chardev_entry - main device driver dispatch routine		*
  8010                                  ;*	   called with a dummy parameter block on the stack		*
  8011                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  8012                                  ;*									*
  8013                                  ;*	will eventually take care of doing the transitions in		*
  8014                                  ;*	   out of Bios_Code						*
  8015                                  ;*									*
  8016                                  ;************************************************************************
  8017                                  
  8018                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  8019 00000043 56                      		push	si
  8020 00000044 50                      		push	ax
  8021 00000045 51                      		push	cx
  8022 00000046 52                      		push	dx
  8023 00000047 57                      		push	di
  8024 00000048 55                      		push	bp
  8025 00000049 1E                      		push	ds
  8026 0000004A 06                      		push	es
  8027 0000004B 53                      		push	bx
  8028 0000004C 89E5                    		mov	bp, sp
  8029 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  8030                                  		;;mov	ds, word [cs:0030h]
  8031                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8032 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8033 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  8034 00000059 A2[2100]                		mov	[auxnum], al
  8035 0000005C 8826[E004]              		mov	[printdev], ah
  8036 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  8037 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  8038 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  8039 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  8040 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  8041 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  8042                                  		; 17/10/2022
  8043 00000076 81FE[9104]              		cmp	si, DSKTBL
  8044                                  		;cmp	si, 4A2h	; dsktbl
  8045                                  					; at 2C7h:4A2h = 70h:2A12h
  8046 0000007A 7517                    		jnz	short no_sector32_mapping
  8047                                  
  8048                                  ; Special case for 32-bit start sector number:
  8049                                  ;   if (si==dsktbl) /* if this is a disk device call */
  8050                                  ;      set high 16 bits of secnum to 0
  8051                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  8052                                  ;
  8053                                  ; pass high word of sector number in start_sec_h, low word in dx
  8054                                  ;
  8055                                  ; note: start_l and start_h are the offsets within the io_request packet
  8056                                  ;	  which contain the low and hi words of the 32 bit start sector if
  8057                                  ;	  it has been used.
  8058                                  ;
  8059                                  ; note: remember not to destroy the registers which have been set up before
  8060                                  
  8061                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  8062 0000007C C706[2405]0000          		mov	word [start_sec_h], 0
  8063 00000082 83FAFF                  		cmp	dx, 0FFFFh
  8064 00000085 750C                    		jnz	short no_sector32_mapping
  8065 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  8066                                  					; 32 bits dsk req
  8067                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  8068 0000008B 8916[2405]              		mov	[start_sec_h], dx
  8069 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  8070                                  					; dx = packet.start_l
  8071                                  no_sector32_mapping:			
  8072 00000093 97                      		xchg	ax, di
  8073 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  8074 00000098 2E3A04                  		cmp	al, cs:[si]
  8075 0000009B 732C                    		jnb	short command_error
  8076 0000009D 98                      		cbw			; note that al <= 15 means ok
  8077 0000009E D1E0                    		shl	ax, 1
  8078 000000A0 01C6                    		add	si, ax
  8079 000000A2 97                      		xchg	ax, di
  8080 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  8081 000000A7 FC                      		cld
  8082                                  		; 17/10/2022
  8083 000000A8 2EFF5401                		call	near [cs:si+1]
  8084                                  		;call	word ptr cs:si+1
  8085 000000AC 7202                    		jb	short already_got_ah_status
  8086 000000AE B401                    		mov	ah, 1
  8087                                  already_got_ah_status:
  8088                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  8089                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8090                                  					; cas note: shouldn't be needed!
  8091 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8092                                  		;lds	bx, ds:ptrsav
  8093 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  8094 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  8095                                  					; mark operation complete
  8096 000000BC 5B                      		pop	bx
  8097 000000BD 07                      		pop	es
  8098 000000BE 1F                      		pop	ds
  8099 000000BF 5D                      		pop	bp
  8100 000000C0 5F                      		pop	di
  8101 000000C1 5A                      		pop	dx
  8102 000000C2 59                      		pop	cx
  8103 000000C3 58                      		pop	ax
  8104 000000C4 5E                      		pop	si
  8105 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  8106                                  	
  8107                                  		; fall through into bc_retf
  8108                                  ; ---------------------------------------------------------------------------	
  8109                                  bc_retf:
  8110 000000C8 CB                      		retf
  8111                                  ; ---------------------------------------------------------------------------
  8112                                  
  8113                                  command_error:				
  8114 000000C9 E80900                  		call	bc_cmderr
  8115 000000CC EBE2                    		jmp	short already_got_ah_status
  8116                                  ; 15/10/2022
  8117                                  ; 01/05/2019
  8118                                  
  8119                                  ;----------------------------------------------------------------------------
  8120                                  ; The following piece of hack is for supporting CP/M compatibility
  8121                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  8122                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  8123                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  8124                                  ; high.
  8125                                  ;----------------------------------------------------------------------------
  8126                                  
  8127                                  		;db 7 dup(0)
  8128                                  
  8129                                  		; 15/10/2022
  8130                                  
  8131 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  8132                                  
  8133 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  8134                                  				;  which is the CP/M call 5 entry point
  8135                                  		
  8136                                  
  8137                                  ; ---------------------------------------------------------------------------
  8138                                  
  8139                                  ;	exit - all routines return through this path
  8140                                  
  8141                                  bc_cmderr:				
  8142 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  8143                                  					; unknown command error
  8144                                  
  8145                                  ; =============== S U B	R O U T	I N E =======================================
  8146                                  
  8147                                  ;	now zero the count field by subtracting its current value,
  8148                                  ;	  which is still in cx, from itself.
  8149                                  
  8150                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  8151                                  ;	  in order to return the number actually complete
  8152                                  
  8153                                  bc_err_cnt:	
  8154                                  		;les	bx, ds:ptrsav
  8155                                  		; 19/10/2022
  8156 000000D7 C41E[1200]              		les	bx, [ptrsav]
  8157 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  8158                                  					; # of successful i/o's
  8159 000000DF B481                    		mov	ah, 81h		; mark error return
  8160 000000E1 F9                      		stc			; indicate abnormal end
  8161 000000E2 C3                      		retn
  8162                                  
  8163                                  ; 15/10/2022
  8164                                  
  8165                                  ;Bios_Code ends
  8166                                  
  8167                                  ;----------------------------------------------------------------------------
  8168                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  8169                                  ;----------------------------------------------------------------------------
  8170                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8171                                  ; 10/01/2019 - Retro DOS v4.0
  8172                                  
  8173                                  ; 30/04/2019
  8174                                  
  8175                                  ;title	mschar - character and clock devices
  8176                                  
  8177                                  ;MODE_CTRLBRK	equ	0FFh
  8178                                  
  8179                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  8180                                  
  8181                                  ;************************************************************************
  8182                                  ;*									*
  8183                                  ;*	device driver dispatch tables					*
  8184                                  ;*									*
  8185                                  ;*	each table starts with a byte which lists the number of		*
  8186                                  ;*	legal functions, followed by that number of words. Each		*
  8187                                  ;*	word represents an offset of a routine in Bios_Code which	*
  8188                                  ;*	handles the function. The functions are terminated with		*
  8189                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  8190                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  8191                                  ;*	returned as abnormal completion status. Notice that ds		*
  8192                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  8193                                  ;*									*
  8194                                  ;************************************************************************
  8195                                  
  8196                                  		; 13/12/2022
  8197                                  		;db 0
  8198                                  
  8199                                  		; 13/12/202
  8200 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  8201                                  					; 2C7h:0E4h = 70h:2654h
  8202 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8203                                  					; 00 init
  8204 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  8205 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  8206 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  8207                                  					; 03
  8208 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  8209                                  					; 04
  8210 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  8211                                  					; 05
  8212 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  8213 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  8214                                  					; 07
  8215 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  8216                                  					; 08
  8217 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  8218 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  8219                                  con_table_end:
  8220 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  8221                                  					; 2C7h:0FBh = 70h:266Bh
  8222 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  8223 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8224 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8225 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  8226 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  8227                                  					; 04 indicate zero chars read
  8228 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8229                                  					; 05 read non-destructive
  8230 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8231 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8232 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  8233 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  8234 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  8235 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  8236 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  8237 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  8238 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  8239 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  8240 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  8241 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  8242 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  8243 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  8244 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  8245 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  8246 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  8247 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  8248 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  8249 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  8250                                  prn_table_end:
  8251 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  8252                                  					; 2C7h:130h = 70h:26A0h
  8253 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  8254 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8255 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8256 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8257 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  8258 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  8259 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8260 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  8261 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  8262 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  8263 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  8264                                  aux_table_end:
  8265 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  8266                                  					; 2C7h:147h = 70h:26B7h
  8267 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  8268 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8269 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8270 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8271 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  8272 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8273 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8274 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8275 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  8276 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  8277                                  tim_table_end:
  8278                                  
  8279                                  ; ---------------------------------------------------------------------------
  8280                                  
  8281                                  ;************************************************************************
  8282                                  ;*									*
  8283                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  8284                                  ;*									*
  8285                                  ;************************************************************************
  8286                                  
  8287                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  8288                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  8289 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  8290                                  con_loop:				
  8291 0000015D E80500                  		call	chrin		; get char in al
  8292 00000160 AA                      		stosb			; store	char at	es:di
  8293 00000161 E2FA                    		loop	con_loop
  8294                                  con_exit:				
  8295 00000163 F8                      		clc
  8296 00000164 C3                      		retn
  8297                                  
  8298                                  ; =============== S U B	R O U T	I N E =======================================
  8299                                  
  8300                                  ;************************************************************************
  8301                                  ;*									*
  8302                                  ;*	chrin - input single char from keyboard into al			*
  8303                                  ;*									*
  8304                                  ;*	  we are going to issue extended keyboard function, if		*
  8305                                  ;*	  supported. the returning value of the extended keystroke	*
  8306                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  8307                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  8308                                  ;*	  this creates a conflict when the user entered real		*
  8309                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  8310                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  8311                                  ;*	  in the following manner:					*
  8312                                  ;*									*
  8313                                  ;*	      ah = 16h							*
  8314                                  ;*	      int 16h							*
  8315                                  ;*	      if al == 0, then extended code (in ah)			*
  8316                                  ;*	      else if al == 0E0h, then					*
  8317                                  ;*	      if ah <> 0, then extended code (in ah)			*
  8318                                  ;*		else greek_alpha character.				*
  8319                                  ;*									*
  8320                                  ;*	also, for compatibility reason, if an extended code is		*
  8321                                  ;*	  detected, then we are going to change the value in al		*
  8322                                  ;*	  from 0E0h to 00h.						*
  8323                                  ;*									*
  8324                                  ;************************************************************************
  8325                                  
  8326                                  		; 19/10/2022
  8327                                  chrin:		
  8328 00000165 8A26[DE04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  8329 00000169 30C0                    		xor	al, al
  8330 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  8331 0000016F 08C0                    		or	al, al
  8332 00000171 752A                    		jnz	short keyret
  8333 00000173 CD16                    		int	16h		; KEYBOARD -
  8334 00000175 09C0                    		or	ax, ax
  8335 00000177 74EC                    		jz	short chrin
  8336 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8337 0000017C 7504                    		jnz	short alt_ext_chk
  8338 0000017E B010                    		mov	al, 10h
  8339 00000180 EB1B                    		jmp	short keyret
  8340                                  ; ---------------------------------------------------------------------------
  8341                                  
  8342                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  8343                                  ;    if character read was 0E0h then
  8344                                  ;      if extended byte was zero (i.e. ah == 0) then
  8345                                  ;	 goto keyret
  8346                                  ;      else
  8347                                  ;	 set al to zero
  8348                                  ;	 goto alt_save
  8349                                  ;      endif
  8350                                  ;    endif
  8351                                  ;  endif
  8352                                  
  8353                                  alt_ext_chk:
  8354 00000182 803E[DE04]00            		cmp	byte [keyrd_func], 0
  8355 00000187 740C                    		jz	short not_ext
  8356 00000189 3CE0                    		cmp	al, 0E0h
  8357 0000018B 7508                    		jnz	short not_ext
  8358 0000018D 08E4                    		or	ah, ah
  8359 0000018F 740C                    		jz	short keyret
  8360 00000191 30C0                    		xor	al, al
  8361 00000193 EB04                    		jmp	short alt_save
  8362                                  ; ---------------------------------------------------------------------------
  8363                                  
  8364                                  not_ext:				
  8365 00000195 08C0                    		or	al, al		; special case?
  8366 00000197 7504                    		jnz	short keyret
  8367                                  alt_save:				
  8368 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  8369                                  keyret:					
  8370 0000019D C3                      		retn
  8371                                  
  8372                                  ; ---------------------------------------------------------------------------
  8373                                  
  8374                                  ;************************************************************************
  8375                                  ;*									*
  8376                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8377                                  ;*									*
  8378                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8379                                  ;*	in the status word of the request packet, and there is no	*
  8380                                  ;*	character in the input buffer, the driver issues a system	*
  8381                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8382                                  ;*	a 'char-not-found' to the dos.					*
  8383                                  ;*									*
  8384                                  ;************************************************************************
  8385                                  
  8386                                  		; 19/10/2022
  8387                                  con_rdnd:				
  8388 0000019E A0[0C00]                		mov	al, [altah]
  8389 000001A1 08C0                    		or	al, al
  8390 000001A3 754C                    		jnz	short rdexit
  8391 000001A5 8A26[DF04]              		mov	ah, [keysts_func]
  8392 000001A9 CD16                    		int	16h		; KEYBOARD -
  8393 000001AB 751D                    		jnz	short gotchr
  8394 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  8395 000001B2 7412                    		jz	short z_bus_exit
  8396 000001B4 C41E[1200]              		les	bx, [ptrsav]
  8397                                  		; 12/12/2022
  8398 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  8399                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8400 000001BD 7407                    		jz	short z_bus_exit
  8401 000001BF B80041                  		mov	ax, 4100h
  8402 000001C2 30DB                    		xor	bl, bl
  8403 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8404                                  					; AL = condition type, BH = condition compare or mask value
  8405                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8406                                  					; DX = I/O port	address	if AL bit 4 set
  8407                                  z_bus_exit:				
  8408 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8409 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  8410 000001C9 C3                      		retn
  8411                                  ; ---------------------------------------------------------------------------
  8412                                  
  8413                                  gotchr:					
  8414 000001CA 09C0                    		or	ax, ax
  8415 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  8416 000001CE 8A26[DE04]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8417 000001D2 CD16                    		int	16h		; KEYBOARD -
  8418 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  notbrk:					
  8422 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8423 000001D9 7504                    		jnz	short rd_ext_chk
  8424 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8425 000001DD EB12                    		jmp	short rdexit
  8426                                  ; ---------------------------------------------------------------------------
  8427                                  
  8428                                  rd_ext_chk:				
  8429 000001DF 803E[DE04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8430 000001E4 740B                    		jz	short rdexit
  8431 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8432 000001E8 7507                    		jnz	short rdexit
  8433 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  8434 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  8435 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  8436                                  					; change it for	compatibility
  8437                                  rdexit:					
  8438 000001F1 C41E[1200]              		les	bx, [ptrsav]
  8439 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8440                                  					; return keyboard character here
  8441                                  bc_exvec:				
  8442 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8443                                  					; indicate normal termination
  8444 000001FA C3                      		retn
  8445                                  ; ---------------------------------------------------------------------------
  8446                                  
  8447                                  ;************************************************************************
  8448                                  ;*									*
  8449                                  ;*	con_write - console write routine				*
  8450                                  ;*									*
  8451                                  ;*	entry:	es:di -> buffer						*
  8452                                  ;*		cx    =  count						*
  8453                                  ;*									*
  8454                                  ;************************************************************************
  8455                                  
  8456                                  con_writ:
  8457                                  		;jcxz	short bc_exvec
  8458 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8459                                  		; 12/12/2022
  8460                                  		;jcxz	cc_ret
  8461                                  con_lp:					
  8462 000001FD 268A05                  		mov	al, [es:di]
  8463 00000200 47                      		inc	di
  8464 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8465                                  					; AL = character to display
  8466 00000203 E2F8                    		loop	con_lp
  8467                                  cc_ret:					
  8468 00000205 F8                      		clc
  8469 00000206 C3                      		retn
  8470                                  
  8471                                  ; =============== S U B	R O U T	I N E =======================================
  8472                                  
  8473                                  ;************************************************************************
  8474                                  ;*									*
  8475                                  ;*	con_flush - flush out keyboard queue				*
  8476                                  ;*									*
  8477                                  ;************************************************************************
  8478                                  
  8479                                  con_flush:
  8480 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8481                                  flloop:					; while	(charavail()) charread();	
  8482 0000020C B401                    		mov	ah, 1
  8483 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8484                                  					; Return: ZF clear if character	in buffer
  8485                                  					; AH = scan code, AL = character
  8486                                  					; ZF set if no character in buffer
  8487 00000210 74F3                    		jz	short cc_ret
  8488 00000212 30E4                    		xor	ah, ah
  8489 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8490                                  					; Return: AH = scan code, AL = character
  8491 00000216 EBF4                    		jmp	short flloop
  8492                                  
  8493                                  ; ---------------------------------------------------------------------------
  8494                                  
  8495                                  ; 15/10/2022
  8496                                  
  8497                                  ;************************************************************************
  8498                                  ;*									*
  8499                                  ;*	some equates for rom bios printer i/o				*
  8500                                  ;*									*
  8501                                  ;************************************************************************
  8502                                  
  8503                                  ; ibm rom status bits (i don't trust them, neither should you)
  8504                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8505                                  ; whole slew of bits, only one of which is correct.
  8506                                  
  8507                                  ;notbusystatus	equ 10000000b		; not busy
  8508                                  ;nopaperstatus	equ 00100000b		; no more paper
  8509                                  ;prnselected	equ 00010000b		; printer selected
  8510                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8511                                  ;timeoutstatus	equ 00000001b		; time out.
  8512                                  ;
  8513                                  ;noprinter	equ 00110000b		; no printer attached
  8514                                  
  8515                                  ; 18/03/2019 - Retro DOS v4.0
  8516                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8517                                  
  8518                                  ; ---------------------------------------------------------------------------
  8519                                  
  8520                                  ;************************************************************************
  8521                                  ;*									*
  8522                                  ;*	prn_input - return with no error but zero chars read		*
  8523                                  ;*									*
  8524                                  ;*	enter with cx = number of characters requested			*
  8525                                  ;*									*
  8526                                  ;************************************************************************
  8527                                  
  8528                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8529 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8530                                  					; (sub reqpkt.count,cx)
  8531                                  		; 12/12/2022
  8532                                  prn_done:
  8533 0000021B F8                      		clc			; but return with carry	reset for no error
  8534 0000021C C3                      		retn
  8535                                  ; ---------------------------------------------------------------------------
  8536                                  
  8537                                  ;************************************************************************
  8538                                  ;*									*
  8539                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8540                                  ;*									*
  8541                                  ;*	auxnum has printer number					*
  8542                                  ;*									*
  8543                                  ;************************************************************************
  8544                                  
  8545                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8546                                  		;jcxz	short prn_done	; no chars to output
  8547 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8548                                  prn_loop:				
  8549 0000021F BB0200                  		mov	bx, 2		; retry	count
  8550                                  prn_out:				
  8551 00000222 E83600                  		call	prnstat		; get status
  8552 00000225 751D                    		jnz	short TestPrnError
  8553 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8554 0000022A 30E4                    		xor	ah, ah
  8555 0000022C E82E00                  		call	prnop		; print	to printer
  8556 0000022F 7419                    		jz	short prn_con	; no error - continue
  8557 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8558 00000234 7509                    		jnz	short _prnwf
  8559 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8560 00000238 C606[0C00]00            		mov	byte [altah], 0
  8561 0000023D EB08                    		jmp	short pmessg
  8562                                  ; ---------------------------------------------------------------------------
  8563                                  
  8564                                  _prnwf:					
  8565 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8566 00000242 7406                    		jz	short prn_con
  8567                                  TestPrnError:				
  8568 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8569 00000245 75DB                    		jnz	short prn_out
  8570                                  pmessg:					
  8571 00000247 E98DFE                  		jmp	bc_err_cnt
  8572                                  ; ---------------------------------------------------------------------------
  8573                                  
  8574                                  prn_con:				
  8575 0000024A 47                      		inc	di		; point	to next	char and continue
  8576 0000024B E2D2                    		loop	prn_loop
  8577                                  ;prn_done:				
  8578                                  		; 12/12/2022
  8579                                  prn_done2:
  8580                                  		;clc
  8581                                  		; cf=0
  8582 0000024D C3                      		retn
  8583                                  ; ---------------------------------------------------------------------------
  8584                                  
  8585                                  ;************************************************************************
  8586                                  ;*									*
  8587                                  ;*	prn_stat - device driver entry to return printer status		*
  8588                                  ;*									*
  8589                                  ;************************************************************************
  8590                                  
  8591                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8592 0000024E E80A00                  		call	prnstat		; device in dx
  8593 00000251 75F4                    		jnz	short pmessg
  8594 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8595                                  		;jnz	short prn_done
  8596                                  		; 12/12/2022
  8597 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8598 00000258 E96BFF                  		jmp	z_bus_exit
  8599                                  ; ---------------------------------------------------------------------------
  8600                                  
  8601                                  ;************************************************************************
  8602                                  ;*									*
  8603                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8604                                  ;*		 printer status. Return meaningful error code		*
  8605                                  ;*									*
  8606                                  ;************************************************************************
  8607                                  
  8608                                  prnstat:				
  8609 0000025B B402                    		mov	ah, 2		; set command for get status
  8610                                  					; PRINTER - GET	STATUS
  8611                                  					; DX = printer port (0-3)
  8612                                  					; Return: AH = status
  8613                                  
  8614                                  ; =============== S U B	R O U T	I N E =======================================
  8615                                  
  8616                                  ;************************************************************************
  8617                                  ;*									*
  8618                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8619                                  ;*		return zero true if no error				*
  8620                                  ;*		return zero false if error, al = error code		*
  8621                                  ;*									*
  8622                                  ;************************************************************************
  8623                                  
  8624                                  prnop:	
  8625 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8626 00000261 CD17                    		int	17h
  8627                                  
  8628                                  	; This check was added to see if this is a case of no
  8629                                  	; printer being installed. This tests checks to be sure
  8630                                  	; the error is noprinter (30h)
  8631                                  
  8632 00000263 50                      		push	ax
  8633 00000264 80E430                  		and	ah, 30h
  8634 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8635 0000026A 58                      		pop	ax
  8636 0000026B 7506                    		jnz	short NextTest
  8637 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8638 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8639                                  
  8640                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8641                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8642                                  ; careful about breaking basic.
  8643                                  
  8644                                  NextTest:				
  8645 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8646                                  					; i/o error?
  8647 00000276 740A                    		jz	short checknotready ; no, try not ready
  8648                                  
  8649                                  ; at this point, we know we have an error. the converse is not true
  8650                                  
  8651 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8652                                  					; first, assume	out of paper
  8653 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8654 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8655 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8656                                  ret1:					
  8657 00000281 C3                      		retn
  8658                                  ; ---------------------------------------------------------------------------
  8659                                  
  8660                                  checknotready:				
  8661 00000282 B002                    		mov	al, 2		; assume not-ready
  8662 00000284 F6C401                  		test	ah, 1
  8663 00000287 C3                      		retn
  8664                                  
  8665                                  ; ---------------------------------------------------------------------------
  8666                                  
  8667                                  ;************************************************************************
  8668                                  ;*									*
  8669                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8670                                  ;*		     this entry point should never block waiting for	*
  8671                                  ;*		     device to come ready.				*
  8672                                  ;*									*
  8673                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8674                                  ;*	outputs: set the number of bytes transferred in the		*
  8675                                  ;*		 device driver request packet				*
  8676                                  ;*									*
  8677                                  ;************************************************************************
  8678                                  
  8679                                  		; 19/10/2022
  8680                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8681 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8682                                  prn_tilbloop:				
  8683 0000028A 51                      		push	cx
  8684 0000028B 53                      		push	bx
  8685 0000028C 30FF                    		xor	bh, bh
  8686 0000028E 8A1E[E004]              		mov	bl, [printdev]
  8687 00000292 D1E3                    		shl	bx, 1
  8688                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8689 00000294 8B8F[E104]              		mov	cx, [wait_count+bx]
  8690 00000298 5B                      		pop	bx
  8691                                  prn_getstat:				
  8692 00000299 E8BFFF                  		call	prnstat		; get status
  8693 0000029C 7514                    		jnz	short prn_bperr	; error
  8694 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8695 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8696 000002A3 59                      		pop	cx		; get original count
  8697 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8698 000002A6 26                      		es
  8699 000002A7 AC                      		lodsb
  8700                                  		;lods	byte ptr es:[si] ; es
  8701                                  					; lodsb
  8702 000002A8 30E4                    		xor	ah, ah
  8703 000002AA E8B0FF                  		call	prnop
  8704 000002AD 7504                    		jnz	short prn_berr	; error
  8705 000002AF E2D9                    		loop	prn_tilbloop
  8706                                  		; 12/12/2022
  8707                                  		; cf=0 (prnop)
  8708                                  		;clc			; normal no-error return
  8709 000002B1 C3                      		retn			;   from device driver
  8710                                  
  8711                                  ; ---------------------------------------------------------------------------
  8712                                  
  8713                                  prn_bperr:				
  8714 000002B2 59                      		pop	cx		; restore transfer count from stack
  8715                                  prn_berr:				
  8716 000002B3 E921FE                  		jmp	bc_err_cnt
  8717                                  ; ---------------------------------------------------------------------------
  8718                                  
  8719                                  ; 15/10/2022
  8720                                  
  8721                                  ;************************************************************************
  8722                                  ;*									*
  8723                                  ;*	prn_genioctl - get/set printer retry count			*
  8724                                  ;*									*
  8725                                  ;************************************************************************
  8726                                  
  8727                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8728                                  ; 11/01/2019
  8729                                  
  8730                                  ;********************************;*
  8731                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8732                                  ;********************************;*
  8733                                  
  8734                                  ;;RAWIO SUB-FUNCTIONS
  8735                                  ;;get_retry_count equ 65h
  8736                                  ;;set_retry_count equ 45h
  8737                                  
  8738                                  ;;struc A_RETRYCOUNT
  8739                                  ;;.rc_count: resw 1
  8740                                  ;;endstruc
  8741                                  
  8742                                  ;ioc_pc equ 5
  8743                                  
  8744                                  ; ---------------------------------------------------------------------------
  8745                                  
  8746                                  		; 19/10/2022
  8747                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8748 000002B6 C43E[1200]              		les	di, [ptrsav]
  8749 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8750                                  					; ioc_pc
  8751 000002BF 7403                    		jz	short prnfunc_ok
  8752                                  
  8753                                  prnfuncerr:				
  8754 000002C1 E911FE                  		jmp	bc_cmderr
  8755                                  ; ---------------------------------------------------------------------------
  8756                                  
  8757                                  prnfunc_ok:				
  8758 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8759 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8760 000002CC 30FF                    		xor	bh, bh
  8761                                  		;mov	bl, ds:printdev	; get index into retry counts
  8762 000002CE 8A1E[E004]              		mov	bl, [printdev]
  8763 000002D2 D1E3                    		shl	bx, 1
  8764                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8765 000002D4 8B8F[E104]              		mov	cx, [wait_count+bx]
  8766 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8767 000002DA 7407                    		jz	short prngetcount
  8768 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8769 000002DE 75E1                    		jnz	short prnfuncerr
  8770 000002E0 268B0D                  		mov	cx, [es:di]
  8771                                  prngetcount:				
  8772                                  		;mov	ds:wait_count[bx], cx
  8773 000002E3 898F[E104]              		mov	[wait_count+bx], cx
  8774 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8775                                  					; return current retry count
  8776                                  		; 12/12/2022
  8777                                  		; cf=0
  8778                                  		;clc
  8779 000002EA C3                      		retn
  8780                                  ; ---------------------------------------------------------------------------
  8781                                  
  8782                                  ;************************************************************************
  8783                                  ;*									*
  8784                                  ;*  prn_ioctl_query							*
  8785                                  ;*									*
  8786                                  ;*  Added for 5.00							*
  8787                                  ;************************************************************************
  8788                                  
  8789                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8790 000002EB C43E[1200]              		les	di, [ptrsav]
  8791 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8792                                  					; ioc_pc
  8793 000002F4 750D                    		jnz	short prn_query_err
  8794 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8795 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8796 000002FC 7404                    		jz	short IOCtlSupported
  8797 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8798 00000300 7501                    		jnz	short prn_query_err
  8799                                  IOCtlSupported:	
  8800                                  		; 12/12/2022
  8801                                  		; cf=0		
  8802                                  		;clc
  8803 00000302 C3                      		retn
  8804                                  ; ---------------------------------------------------------------------------
  8805                                  
  8806                                  prn_query_err:
  8807                                  		; 12/12/2022				
  8808                                  		;stc
  8809 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8810                                  ; ---------------------------------------------------------------------------
  8811                                  
  8812                                  ;************************************************************************
  8813                                  ;*									*
  8814                                  ;*	aux port driver code -- "aux" == "com1"				*
  8815                                  ;*									*
  8816                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8817                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8818                                  ;*									*
  8819                                  ;************************************************************************
  8820                                  
  8821                                  ;	values in ah, requesting function of int 14h in rom bios
  8822                                  
  8823                                  ;auxfunc_send	 equ	1	;transmit
  8824                                  ;auxfunc_receive equ	2	;read
  8825                                  ;auxfunc_status	 equ	3	;request status
  8826                                  
  8827                                  ;	error flags, reported by int 14h, reported in ah:
  8828                                  
  8829                                  ;flag_data_ready equ	01h	;data ready
  8830                                  ;flag_overrun	 equ	02h	;overrun error
  8831                                  ;flag_parity	 equ	04h	;parity error
  8832                                  ;flag_frame	 equ	08h	;framing error
  8833                                  ;flag_break	 equ	10h	;break detect
  8834                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8835                                  ;flag_timeout	 equ	80h	;timeout
  8836                                  
  8837                                  ;	these flags reported in al:
  8838                                  
  8839                                  ;flag_cts	 equ	10h	;clear to send
  8840                                  ;flag_dsr	 equ	20h	;data set ready
  8841                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8842                                  
  8843                                  ; ---------------------------------------------------------------------------
  8844                                  
  8845                                  ;************************************************************************
  8846                                  ;*									*
  8847                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8848                                  ;*		   at es:di						*
  8849                                  ;*									*
  8850                                  ;************************************************************************
  8851                                  
  8852                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8853                                  		;jcxz	short exvec2
  8854 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8855 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8856 0000030B 30C0                    		xor	al, al
  8857 0000030D 8607                    		xchg	al, [bx]
  8858 0000030F 08C0                    		or	al, al
  8859 00000311 7503                    		jnz	short aux2
  8860                                  aux1:					
  8861 00000313 E80500                  		call	auxin		; get character	from port
  8862                                  					; won't return if error
  8863                                  aux2:					
  8864 00000316 AA                      		stosb
  8865 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8866                                  exvec2:					
  8867 00000319 F8                      		clc			; all done, successful exit
  8868                                  auxin_retn:	; 18/12/2022
  8869 0000031A C3                      		retn
  8870                                  ; ---------------------------------------------------------------------------
  8871                                  
  8872                                  ;************************************************************************
  8873                                  ;*									*
  8874                                  ;*	auxin - call rom bios to read character from aux port		*
  8875                                  ;*		if error occurs, map the error and return one		*
  8876                                  ;*		level up to device driver exit code, setting		*
  8877                                  ;*		the number of bytes transferred appropriately		*
  8878                                  ;*									*
  8879                                  ;************************************************************************
  8880                                  
  8881                                  auxin:					
  8882 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8883 0000031D E83C00                  		call	auxop
  8884 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8885                                  		;jnz	short arbad	; skip if any error bits set
  8886                                  		;retn
  8887                                  		; 25/06/2023 (BugFix)
  8888 00000323 74F5                    		jz	short auxin_retn
  8889                                  ; ---------------------------------------------------------------------------
  8890                                  
  8891                                  arbad:					
  8892 00000325 58                      		pop	ax		; remove return	address	(near call)
  8893 00000326 30C0                    		xor	al, al
  8894 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8895 0000032A E9AAFD                  		jmp	bc_err_cnt
  8896                                  
  8897                                  ; ---------------------------------------------------------------------------
  8898                                  
  8899                                  ;************************************************************************
  8900                                  ;*									*
  8901                                  ;*	aux_rdnd - non-destructive aux port read			*
  8902                                  ;*									*
  8903                                  ;************************************************************************
  8904                                  
  8905                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8906 0000032D E85200                  		call	getbx
  8907 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8908 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8909 00000334 7511                    		jnz	short auxdrx	; then return character
  8910 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8911 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8912 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8913 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8914 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8915 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8916 00000345 8807                    		mov	[bx], al
  8917                                  auxdrx:					
  8918 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8919                                  ; ---------------------------------------------------------------------------
  8920                                  
  8921                                  auxbus:					
  8922 0000034A E979FE                  		jmp	z_bus_exit
  8923                                  ; ---------------------------------------------------------------------------
  8924                                  
  8925                                  ;************************************************************************
  8926                                  ;*									*
  8927                                  ;*	aux_wrst - return aux port write status				*
  8928                                  ;*									*
  8929                                  ;************************************************************************
  8930                                  
  8931                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8932 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8933 00000350 A820                    		test	al, 20h		; test data set	ready
  8934 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8935 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8936 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8937                                  		; 12/12/2022
  8938                                  		; cf=0	; (test instruction resets cf)
  8939                                  		;clc
  8940 00000359 C3                      		retn
  8941                                  ; ---------------------------------------------------------------------------
  8942                                  
  8943                                  ;************************************************************************
  8944                                  ;*									*
  8945                                  ;*	auxstat - call rom bios to determine aux port status		*
  8946                                  ;*									*
  8947                                  ;*	exit:	ax = status						*
  8948                                  ;*		dx = [auxnum]						*
  8949                                  ;*									*
  8950                                  ;************************************************************************
  8951                                  
  8952                                  auxstat:				
  8953 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8954                                  
  8955                                  		; fall into auxop
  8956                                  
  8957                                  ; =============== S U B	R O U T	I N E =======================================
  8958                                  
  8959                                  ;************************************************************************
  8960                                  ;*									*
  8961                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8962                                  ;*									*
  8963                                  ;*	entry:	ah = int 14h function number				*
  8964                                  ;*	exit:	ax = results						*
  8965                                  ;*		dx = [auxnum]						*
  8966                                  ;*									*
  8967                                  ;************************************************************************
  8968                                  
  8969                                  auxop:		; proc near		
  8970 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8971                                  					; 0=init, 1=send, 2=receive, 3=status
  8972                                  					; get port number
  8973 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8974                                  					; DX = port number (0-3)
  8975                                  					; Return: AX = port status code
  8976 00000362 C3                      		retn
  8977                                  
  8978                                  ; ---------------------------------------------------------------------------
  8979                                  
  8980                                  ;************************************************************************
  8981                                  ;*									*
  8982                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8983                                  ;*		   auxbuf [auxnum] to zero				*
  8984                                  ;*									*
  8985                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8986                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8987                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8988                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8989                                  ;*									*
  8990                                  ;************************************************************************
  8991                                  
  8992                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8993 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8994 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8995                                  					; zero out buffer
  8996                                  		;clc			; all done, successful return
  8997                                  		; 12/12/2022
  8998                                  		; cf=0 ('add' instruction in 'getbx')
  8999 00000369 C3                      		retn
  9000                                  ; ---------------------------------------------------------------------------
  9001                                  
  9002                                  ;************************************************************************
  9003                                  ;*									*
  9004                                  ;*	aux_writ - write to aux device					*
  9005                                  ;*									*
  9006                                  ;************************************************************************
  9007                                  
  9008                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  9009                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  9010 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  9011                                  aux_loop:				
  9012 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  9013                                  					; move di pointer to next character
  9014 0000036F 47                      		inc	di
  9015 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  9016 00000372 E8E7FF                  		call	auxop		; send character over aux port
  9017 00000375 F6C480                  		test	ah, 80h		; check	for error
  9018 00000378 7405                    		jz	short awok	; then no error
  9019 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  9020 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  9021                                  ; ---------------------------------------------------------------------------
  9022                                  
  9023                                  awok:					
  9024 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  9025                                  					; still	more character to print
  9026                                  		;clc			; all done, successful return
  9027                                  		; 12/12/2022
  9028                                  		; cf=0 (test instruction above)	
  9029 00000381 C3                      		retn
  9030                                  
  9031                                  ; =============== S U B	R O U T	I N E =======================================
  9032                                  
  9033                                  ;************************************************************************
  9034                                  ;*									*
  9035                                  ;*	getbx - return bx -> single byte input buffer for		*
  9036                                  ;*		selected aux port ([auxnum])				*
  9037                                  ;*									*
  9038                                  ;************************************************************************
  9039                                  
  9040                                  getbx:	
  9041 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  9042                                  					; for selected aux port	([auxnum])
  9043                                  		;add	bx, offset auxbuf
  9044 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  9045                                  		; 12/12/2022
  9046                                  		; cf=0 (if [uaxnum] is valid number) 
  9047 0000038A C3                      		retn
  9048                                  
  9049                                  ; ---------------------------------------------------------------------------
  9050                                  
  9051                                  ; 15/10/2022
  9052                                  
  9053                                  ;----------------------------------------------------------------
  9054                                  ;								:
  9055                                  ;		    clock device driver 			:
  9056                                  ;								:
  9057                                  ;								:
  9058                                  ;   this file contains the clock device driver. 		:
  9059                                  ;								:
  9060                                  ;   the routines in this files are:				:
  9061                                  ;								:
  9062                                  ;	routine 		function			:
  9063                                  ;	------- 		--------			:
  9064                                  ;	tim_writ		set the current time		:
  9065                                  ;	tim_read		read the current time		:
  9066                                  ;	time_to_ticks		convert time to corresponding	:
  9067                                  ;				  number of clock ticks 	:
  9068                                  ;								:
  9069                                  ; the clock ticks at the rate of:				:
  9070                                  ;								:
  9071                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  9072                                  ; see each routine for information on the use.			:
  9073                                  ;								:
  9074                                  ;----------------------------------------------------------------
  9075                                  
  9076                                  ; convert time to ticks
  9077                                  ; input : time in cx and dx
  9078                                  ; ticks returned in cx:dx
  9079                                  
  9080                                  ;19/07/2019
  9081                                  ;09/03/2019
  9082                                  
  9083                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  9084                                  
  9085                                  ; first convert from hour,min,sec,hund. to
  9086                                  ; total number of 100th of seconds
  9087                                  
  9088 0000038B B03C                    		mov	al, 60
  9089 0000038D F6E5                    		mul	ch		; hours	to minutes
  9090 0000038F B500                    		mov	ch, 0
  9091 00000391 01C8                    		add	ax, cx		; total	minutes
  9092 00000393 B97017                  		mov	cx, 6000	; 60*100
  9093 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  9094 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  9095 0000039A 89C1                    		mov	cx, ax
  9096 0000039C B064                    		mov	al, 100
  9097 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  9098 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  9099 000003A2 83D200                  		adc	dx, 0		; ripple carry
  9100 000003A5 B700                    		mov	bh, 0
  9101 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  9102 000003A9 83D200                  		adc	dx, 0
  9103                                  
  9104                                  	; dx:cx is time in 1/100 sec
  9105                                  
  9106 000003AC 92                      		xchg	ax, dx
  9107 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  9108 000003AE BB0BE9                  		mov	bx, 59659
  9109 000003B1 F7E3                    		mul	bx		; multiply low half
  9110 000003B3 87D1                    		xchg	dx, cx
  9111 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  9112 000003B6 F7E3                    		mul	bx		; multiply high	half
  9113 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  9114 000003BA 83D200                  		adc	dx, 0
  9115 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  9116 000003BE BB0500                  		mov	bx, 5
  9117 000003C1 F6F3                    		div	bl		; divide high half by 5
  9118 000003C3 88C1                    		mov	cl, al
  9119 000003C5 B500                    		mov	ch, 0
  9120 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  9121 000003C9 98                      		cbw
  9122 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  9123 000003CB F7F3                    		div	bx		; divide low half by 5
  9124 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  9125 000003CF CB                      		retf			; far return
  9126                                  
  9127                                  ; ---------------------------------------------------------------------------
  9128                                  
  9129                                  ; 17/10/2022
  9130                                  ; 15/10/2022
  9131                                  
  9132                                  ;--------------------------------------------------------------------
  9133                                  ;
  9134                                  ; tim_writ sets the current time
  9135                                  ;
  9136                                  ; on entry es:[di] has the current time:
  9137                                  ;
  9138                                  ;	number of days since 1-1-80	(word)
  9139                                  ;	minutes (0-59)			(byte)
  9140                                  ;	hours (0-23)			(byte)
  9141                                  ;	hundredths of seconds (0-99)	(byte)
  9142                                  ;	seconds (0-59)			(byte)
  9143                                  ;
  9144                                  ; each number has been checked for the correct range.
  9145                                  ;
  9146                                  ;	NOTE: Any changes in this routine probably require corresponding
  9147                                  ;	changes in the version that is built with the power manager driver.
  9148                                  ;	See ptime.asm.
  9149                                  ;
  9150                                  ;--------------------------------------------------------------------
  9151                                  
  9152                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  9153 000003D0 268B05                  		mov	ax, [es:di]
  9154 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  9155                                  					; end to avoid tick windows.
  9156 000003D4 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9157                                  		;cmp	ds:havecmosclock, 0
  9158 000003D9 7426                    		jz	short no_cmos_1
  9159 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  9160                                  					; get binary hours
  9161                                  					; convert to bcd
  9162 000003DF FF1E[FB04]              		call	far [bintobcd]
  9163                                  		;call	ds:bintobcd	; call far [bintobcd]
  9164 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  9165 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  9166 000003E9 FF1E[FB04]              		call	far [bintobcd]
  9167                                  		;call	ds:bintobcd	; convert to bcd
  9168 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  9169 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  9170 000003F3 FF1E[FB04]              		call	far [bintobcd]
  9171                                  		;call	ds:bintobcd
  9172 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  9173 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  9174 000003FB FA                      		cli
  9175 000003FC B403                    		mov	ah, 3
  9176 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9177                                  					; CH = hours in	BCD, CL	= minutes in BCD
  9178                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  9179                                  					; Return: CMOS clock set
  9180 00000400 FB                      		sti
  9181                                  no_cmos_1:				
  9182 00000401 268B4D02                		mov	cx, [es:di+2]
  9183 00000405 268B5504                		mov	dx, [es:di+4]
  9184                                  		; 17/10/2022
  9185 00000409 FF1E[D906]              		call	far [ttticks]
  9186                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  9187                                  					; convert time to ticks
  9188                                  					; cx:dx	now has	time in	ticks
  9189 0000040D FA                      		cli			; turn off timer
  9190 0000040E B401                    		mov	ah, 1
  9191 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  9192                                  					; CX:DX	= clock	count
  9193                                  					; Return: time of day set
  9194                                  		;pop	ds:daycnt
  9195 00000412 8F06[E904]              		pop	word [daycnt]
  9196 00000416 FB                      		sti
  9197                                  		;cmp	ds:havecmosclock, 0
  9198 00000417 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9199 0000041C 740A                    		jz	short no_cmos_2
  9200 0000041E FF1E[FF04]              		call	far [daycnttoday]
  9201                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  9202                                  					; convert to bcd format
  9203 00000422 FA                      		cli
  9204 00000423 B405                    		mov	ah, 5
  9205 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9206                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  9207                                  					; CH = century (19h or 20h)
  9208                                  					; Return: CMOS clock set
  9209 00000427 FB                      		sti
  9210                                  no_cmos_2:
  9211                                  		; 12/12/2022
  9212                                  		; cf=0				
  9213                                  		;clc
  9214 00000428 C3                      		retn
  9215                                  
  9216                                  ; ---------------------------------------------------------------------------
  9217                                  
  9218                                  ; 15/10/2022
  9219                                  
  9220                                  ;----------------------------------------------------------------------------
  9221                                  ; gettime reads date and time
  9222                                  ; and returns the following information:
  9223                                  ;
  9224                                  ;	es:[di]  =count of days since 1-1-80
  9225                                  ;	es:[di+2]=hours
  9226                                  ;	es:[di+3]=minutes
  9227                                  ;	es:[di+4]=seconds
  9228                                  ;	es:[di+5]=hundredths of seconds
  9229                                  ;
  9230                                  ;	NOTE: Any changes in this routine probably require corresponding
  9231                                  ;	changes in the version that is built with the power manager driver.
  9232                                  ;	See ptime.asm.
  9233                                  ;----------------------------------------------------------------------------
  9234                                  
  9235                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9236                                  		; 20/12/2023 - Retro DOS v5.0 (& Retro DOS v4.1 optimization)
  9237                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:04EFh)
  9238                                  
  9239                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9240 00000429 E84A00                  		call	GetTickCnt
  9241 0000042C 8B36[E904]              		mov	si, [daycnt]
  9242                                  
  9243                                  ; we now need to convert the time in tick to the time in 100th of
  9244                                  ; seconds. the relation between tick and seconds is:
  9245                                  ;
  9246                                  ;		 65,536 seconds
  9247                                  ;	       ----------------
  9248                                  ;		1,193,180 tick
  9249                                  ;
  9250                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9251                                  ;
  9252                                  ;	ticks from clock  * 65,536 * 100
  9253                                  ;      --------------------------------- = time in 100th of seconds
  9254                                  ;		1,193,180
  9255                                  ;
  9256                                  ; fortunately this formula simplifies to:
  9257                                  ;
  9258                                  ;	ticks from clock * 5 * 65,536
  9259                                  ;      --------------------------------- = time in 100th of seconds
  9260                                  ;		59,659
  9261                                  ;
  9262                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9263                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9264                                  ; my 16 bits to the left.
  9265                                  ;
  9266                                  ; start with ticks in cx:dx
  9267                                  ; multiply by 5
  9268                                  
  9269 00000430 89C8                    		mov	ax, cx
  9270 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9271                                  					; multiply by 5
  9272 00000434 D1E2                    		shl	dx, 1
  9273 00000436 D1D1                    		rcl	cx, 1		; times	2
  9274 00000438 D1E2                    		shl	dx, 1
  9275 0000043A D1D1                    		rcl	cx, 1		; times	4
  9276 0000043C 01DA                    		add	dx, bx
  9277 0000043E 11C8                    		adc	ax, cx		; times	5
  9278 00000440 92                      		xchg	ax, dx
  9279                                  
  9280                                  ; now have ticks * 5 in	dx:ax
  9281                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9282                                  
  9283 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  9284 00000444 F7F1                    		div	cx		; dx now has remainder
  9285                                  					; ax has high word of final quotient
  9286                                  		;mov	bx, ax		; put high word	in safe	place
  9287                                  		; 20/12/2023
  9288 00000446 93                      		xchg	ax, bx
  9289 00000447 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9290 00000449 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9291                                  
  9292                                  ; rounding based on the	remainder may be added here
  9293                                  ; the result in	bx:ax is time in 1/100 second.
  9294                                  
  9295 0000044B 89DA                    		mov	dx, bx		
  9296 0000044D B9C800                  		mov	cx, 200		; extract 1/100's
  9297                                  
  9298                                  ; division by 200 is necessary to ensure no overflow--max result
  9299                                  ; is number of seconds in a day/2 = 43200.
  9300                                  
  9301 00000450 F7F1                    		div	cx
  9302 00000452 80FA64                  		cmp	dl, 100		; remainder over 100?
  9303 00000455 7203                    		jb	short noadj
  9304 00000457 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9305                                  noadj:					
  9306 0000045A F5                      		cmc			; if we	subtracted 100,	carry is now set
  9307 0000045B 88D3                    		mov	bl, dl		; save 1/100's
  9308                                  
  9309                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9310                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9311                                  
  9312 0000045D D1D0                    		rcl	ax, 1		
  9313 0000045F B200                    		mov	dl, 0
  9314 00000461 D1D2                    		rcl	dx, 1
  9315                                  		;mov	cx, 60		; divide out seconds
  9316                                  		; 20/12/2023
  9317 00000463 B13C                    		mov	cl, 60
  9318 00000465 F7F1                    		div	cx
  9319 00000467 88D7                    		mov	bh, dl		; save the seconds
  9320 00000469 F6F1                    		div	cl		; break	into hours and minutes
  9321 0000046B 86C4                    		xchg	al, ah
  9322                                  
  9323                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9324                                  
  9325                                  		; 20/12/2023
  9326                                  		;push	ax
  9327                                  		;mov	ax, si		; daycnt
  9328 0000046D 96                      		xchg	ax, si
  9329 0000046E AB                      		stosw
  9330                                  		;pop	ax
  9331 0000046F 96                      		xchg	ax, si		; al = hours, ah = minutes
  9332 00000470 AB                      		stosw
  9333 00000471 89D8                    		mov	ax, bx
  9334 00000473 AB                      		stosw
  9335 00000474 F8                      		clc
  9336 00000475 C3                      		retn
  9337                                  
  9338                                  ; =============== S U B	R O U T	I N E =======================================
  9339                                  
  9340                                  ; 15/10/2022
  9341                                  
  9342                                  ;----------------------------------------------------------------------------
  9343                                  ;
  9344                                  ; procedure : GetTickCnt
  9345                                  ;
  9346                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9347                                  ;		of rollover [except when power management driver is in use]. 
  9348                                  ;		Uses the following logic for updating Daycnt
  9349                                  ;
  9350                                  ;		if ( rollover ) {
  9351                                  ;			if ( t_switch )
  9352                                  ;				daycnt++ ;
  9353                                  ;			else
  9354                                  ;				daycnt += rollover ;
  9355                                  ;		}
  9356                                  ;
  9357                                  ; USES : AX
  9358                                  ;
  9359                                  ; RETURNS : CX:DX - tick count
  9360                                  ; MODIFIES : daycnt
  9361                                  ;
  9362                                  ;----------------------------------------------------------------------------
  9363                                  
  9364                                  		; 17/10/2022
  9365                                  GetTickCnt:	
  9366 00000476 30E4                    		xor	ah, ah
  9367 00000478 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9368                                  					; Return: CX:DX	= clock	count
  9369                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9370                                  					; midnight
  9371                                  					; Otherwise, AL	> 0
  9372                                  		; 20/12/2023
  9373 0000047A 30E4                    		xor	ah, ah
  9374 0000047C 3826[EB04]              		cmp	byte [t_switch], ah ; 0
  9375                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9376 00000480 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
  9377                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9378                                  					; and not flag
  9379 00000482 0106[E904]              		add	[daycnt], ax
  9380 00000486 C3                      		retn
  9381                                  ; ---------------------------------------------------------------------------
  9382                                  
  9383                                  inc_case:				
  9384 00000487 08C0                    		or	al, al
  9385 00000489 7404                    		jz	short no_rollover
  9386 0000048B FF06[E904]              		inc	word [daycnt]
  9387                                  no_rollover:				
  9388 0000048F C3                      		retn
  9389                                  
  9390                                  ;----------------------------------------------------------------------------
  9391                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9392                                  ;----------------------------------------------------------------------------
  9393                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9394                                  ; 09/03/2019 - Retro DOS v4.0
  9395                                  
  9396                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9397                                  ; 26/05/2018 - Retro DOS v3.0
  9398                                  ; 23/03/2018 - Retro DOS v2.0
  9399                                  
  9400                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9401                                  
  9402                                  ;struc BPB_TYPE
  9403                                  ;.SECSIZE:	resw 1
  9404                                  ;.SECALL:	resb 1
  9405                                  ;.RESNUM:	resw 1
  9406                                  ;.FATNUM:	resb 1
  9407                                  ;.DIRNUM:	resw 1
  9408                                  ;.SECNUM:	resw 1
  9409                                  ;.FATID:	resb 1
  9410                                  ;.FATSIZE:	resw 1
  9411                                  ;.SLIM:		resw 1
  9412                                  ;.HLIM:		resw 1
  9413                                  ;.HIDDEN:	resw 1
  9414                                  ;.size:
  9415                                  ;endstruc
  9416                                  
  9417                                  ;-----------------------------------------------------------------
  9418                                  ;	disk interface routines
  9419                                  ;-----------------------------------------------------------------
  9420                                  
  9421                                  ; device attribute bits:
  9422                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9423                                  
  9424                                  ;MAXERR		equ	5
  9425                                  ;MAX_HD_FMT_ERR	equ	2
  9426                                  
  9427                                  ;LSTDRV	equ 504h
  9428                                  
  9429                                  ; some floppies do not have changeline. as a result, media-check would
  9430                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9431                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9432                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9433                                  ; the time of the last successful disk operation and compare it with the current
  9434                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9435                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9436                                  ; since we cannot trust the timer to be always available, we record the number 
  9437                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9438                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9439                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9440                                  ; the time of last successful access, if we see that time has passed too,
  9441                                  ; we reset the counter.
  9442                                  
  9443                                  accessmax	equ	5
  9444                                  
  9445                                  ; due to various bogosities, we need to continually adjust what the head
  9446                                  ; settle time is.  the following algorithm is used:
  9447                                  ;
  9448                                  ;   get the current head settle value.
  9449                                  ;   if it is 0, then
  9450                                  ;	set slow = 15
  9451                                  ;   else
  9452                                  ;	set slow = value
  9453                                  ;   ...
  9454                                  ;*********************************************
  9455                                  ;************ old algorithm ******************
  9456                                  ;*   if we are seeking and writing then
  9457                                  ;*	 use slow
  9458                                  ;*   else
  9459                                  ;*	 use fast
  9460                                  ;*********************************************
  9461                                  ;*********** ibm's requested logic ***********
  9462                                  ;   if we are seeking and writing and not on an at then
  9463                                  ;	use slow
  9464                                  ;   else
  9465                                  ;	use fast
  9466                                  ;   ...
  9467                                  ;   restore current head settle value
  9468                                  ;
  9469                                  ;
  9470                                  ;---------------------------------------
  9471                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9472                                  					; it on after handling config.sys file as a
  9473                                  					; default value, if multrk_flag = multrk_off1.
  9474                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9475                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9476                                  
  9477                                  ; close data segment, open Bios_Code segment
  9478                                  
  9479                                  ; 15/10/2022
  9480                                  
  9481                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9482                                  
  9483                                  ;-----------------------------------------------------------------
  9484                                  ;	command jump table
  9485                                  ;-----------------------------------------------------------------
  9486                                  
  9487 00000490 00                      		db 0
  9488                                  
  9489                                  ; 11/12/2022
  9490                                  %if 0
  9491                                  
  9492                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9493                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9494                                  		dw 1742h		; dsk_init
  9495                                  		dw 4EBh			; media_chk
  9496                                  		dw 592h			; get_bpb
  9497                                  		dw 0D5h			; bc_cmderr
  9498                                  		dw 857h			; dsk_read
  9499                                  		dw 83Dh			; x_bus_exit
  9500                                  		dw 558h			; ret_carry_clear
  9501                                  		dw 558h			; ret_carry_clear
  9502                                  		dw 849h			; dsk_writ
  9503                                  		dw 841h			; dsk_writv
  9504                                  		dw 558h			; ret_carry_clear
  9505                                  		dw 558h			; ret_carry_clear
  9506                                  		dw 0D5h			; bc_cmderr
  9507                                  		dw 80Ah			; dsk_open
  9508                                  		dw 81Ah			; dsk_close
  9509                                  		dw 831h			; dsk_rem
  9510                                  		dw 558h			; ret_carry_clear
  9511                                  		dw 558h			; ret_carry_clear
  9512                                  		dw 558h			; ret_carry_clear
  9513                                  		dw 0C6Bh		; do_generic_ioctl
  9514                                  		dw 558h			; ret_carry_clear
  9515                                  		dw 558h			; ret_carry_clear
  9516                                  		dw 558h			; ret_carry_clear
  9517                                  		dw 1124h		; ioctl_getown
  9518                                  		dw 1142h		; ioctl_setown
  9519                                  		dw 129Ah		; ioctl_support_query
  9520                                  
  9521                                  ;dtbl_siz equ $-dsktbl
  9522                                  
  9523                                  %endif
  9524                                  		; 11/12/2022
  9525 00000491 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9526 00000492 [9416]                  		dw dsk_init
  9527 00000494 [DA04]                  		dw media_chk
  9528 00000496 [8005]                  		dw get_bpb
  9529 00000498 [D500]                  		dw bc_cmderr
  9530 0000049A [2708]                  		dw dsk_read
  9531 0000049C [0D08]                  		dw x_bus_exit
  9532 0000049E [4605]                  		dw ret_carry_clear
  9533 000004A0 [4605]                  		dw ret_carry_clear
  9534 000004A2 [1908]                  		dw dsk_writ
  9535 000004A4 [1108]                  		dw dsk_writv
  9536 000004A6 [4605]                  		dw ret_carry_clear
  9537 000004A8 [4605]                  		dw ret_carry_clear
  9538 000004AA [D500]                  		dw bc_cmderr
  9539 000004AC [DD07]                  		dw dsk_open
  9540 000004AE [EC07]                  		dw dsk_close
  9541 000004B0 [0208]                  		dw dsk_rem
  9542 000004B2 [4605]                  		dw ret_carry_clear
  9543 000004B4 [4605]                  		dw ret_carry_clear
  9544 000004B6 [4605]                  		dw ret_carry_clear
  9545 000004B8 [250C]                  		dw do_generic_ioctl
  9546 000004BA [4605]                  		dw ret_carry_clear
  9547 000004BC [4605]                  		dw ret_carry_clear
  9548 000004BE [4605]                  		dw ret_carry_clear
  9549 000004C0 [B710]                  		dw ioctl_getown
  9550 000004C2 [D410]                  		dw ioctl_setown
  9551 000004C4 [1512]                  		dw ioctl_support_query
  9552                                  
  9553                                  dtbl_siz equ $-dsktbl
  9554                                  
  9555                                  ; =============== S U B	R O U T	I N E =======================================
  9556                                  
  9557                                  ; ---------------------------------------------------------------------------
  9558                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9559                                  ; the one that belongs to the drive specified. carry is set if none exists
  9560                                  ; for the drive. Pointer is returned in es:[di]
  9561                                  ;
  9562                                  ;  AL contains the logical drive number.
  9563                                  ; ---------------------------------------------------------------------------
  9564                                  
  9565                                  SetDrive:	
  9566                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9567 000004C6 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9568                                  X_Scan_Loop:				
  9569 000004CA 26384505                		cmp	[es:di+5], al	
  9570 000004CE 7409                    		jz	short X_SetDrv
  9571 000004D0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9572 000004D3 83FFFF                  		cmp	di, 0FFFFh
  9573 000004D6 75F2                    		jnz	short X_Scan_Loop
  9574 000004D8 F9                      		stc
  9575                                  X_SetDrv:				
  9576 000004D9 C3                      		retn
  9577                                  
  9578                                  ; ---------------------------------------------------------------------------
  9579                                  
  9580                                  ; 15/10/2022
  9581                                  
  9582                                  ; ---------------------------------------------------------------------
  9583                                  ; if id is f9, have a 96tpi disk else
  9584                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9585                                  ;  otherwise if within 2 secs of last disk operation media could not
  9586                                  ;    have changed, otherwise dont know if media has changed
  9587                                  ; ---------------------------------------------------------------------
  9588                                  
  9589                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9590 000004DA E8E9FF                  		call	SetDrive
  9591 000004DD BE0100                  		mov	si, 1
  9592 000004E0 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9593                                  					; fchanged_by_format
  9594 000004E5 7416                    		jz	short WeAreNotFakingIt
  9595                                  		; 12/12/2022
  9596 000004E7 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9597                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9598                                  					; ~fchanged_by_format ;	reset flag
  9599 000004EC C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9600                                  					; Ensure that we ask the rom if media has changed
  9601 000004F1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9602                                  					; fnon_removable
  9603 000004F6 740C                    		jz	short wehaveafloppy
  9604 000004F8 BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9605 000004FB EB2C                    		jmp	short Media_Done ; Media_Done
  9606                                  ; ---------------------------------------------------------------------------
  9607                                  
  9608                                  WeAreNotFakingIt:
  9609                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9610 000004FD 26F6452301              		test	byte [es:di+23h], 1
  9611 00000502 7525                    		jnz	short Media_Done
  9612                                  wehaveafloppy:				
  9613 00000504 31F6                    		xor	si, si		; Presume "I don't know"
  9614                                  
  9615                                  		; If we have a floppy with changeline support, we ask the ROM
  9616                                  		; to determine if media has changed. We do not perform the
  9617                                  		; 2 second check for these drives.
  9618                                  
  9619 00000506 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9620 0000050B 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9621 0000050D E84F12                  		call	mediacheck	;  Call	into removable routine
  9622 00000510 7236                    		jb	short err_exitj
  9623 00000512 E89F13                  		call	haschange
  9624 00000515 7512                    		jnz	short Media_Done
  9625                                  mChk_NoChangeLine:
  9626                                  		; If we come here, we have a floppy with no changeline support
  9627                                  			
  9628 00000517 BE0100                  		mov	si, 1		; Presume no change
  9629 0000051A A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9630 0000051D 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9631                                  					; Is drive of last access the same?
  9632 00000521 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9633 00000523 E82800                  		call	Check_Time_Of_Access
  9634 00000526 EB01                    		jmp	short Media_Done
  9635                                  ; ---------------------------------------------------------------------------
  9636                                  
  9637                                  Media_Unk:				
  9638 00000528 4E                      		dec	si		; ; Return "I don't know"
  9639                                  
  9640                                  		; SI now contains the correct value for media change.
  9641                                  		; Clean up the left overs
  9642                                  Media_Done:	
  9643                                  		; 19/10/2022			
  9644 00000529 06                      		push	es
  9645 0000052A C41E[1200]              		les	bx, [ptrsav]
  9646 0000052E 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9647 00000532 07                      		pop	es
  9648 00000533 09F6                    		or	si, si
  9649 00000535 790F                    		jns	short ret_carry_clear ;	volidok
  9650 00000537 803E[7700]00            		cmp	byte [fhave96], 0
  9651 0000053C 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9652 0000053E E80513                  		call	media_set_vid
  9653                                  mChk1_NoChangeLine:			
  9654 00000541 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9655                                  					; Make sure we ask rom for media check
  9656                                  ret_carry_clear:			
  9657 00000546 F8                      		clc			; volidok
  9658 00000547 C3                      		retn
  9659                                  ; ---------------------------------------------------------------------------
  9660                                  
  9661                                  err_exitj:				
  9662 00000548 E86506                  		call	maperror	; guaranteed to	set carry
  9663                                  ret81:					
  9664 0000054B B481                    		mov	ah, 81h		; return error status
  9665 0000054D C3                      		retn			; return with carry set
  9666                                  
  9667                                  ; =============== S U B	R O U T	I N E =======================================
  9668                                  
  9669                                  ; ---------------------------------------------------------------------------
  9670                                  ; perform a check on the time passed since the last access for this physical
  9671                                  ; drive.
  9672                                  ; we are accessing the same drive. if the time of last successful access was
  9673                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9674                                  ; returns in si:
  9675                                  ;	0 - if time of last access was >= 2 seconds
  9676                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9677                                  ; registers affected ax,cx,dx, flags.
  9678                                  ;
  9679                                  ;	assume es:di -> bds, ds->Bios_Data
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  		; 19/10/2022
  9683                                  Check_Time_Of_Access:
  9684 0000054E BE0100                  		mov	si, 1		; presume no change.
  9685 00000551 E822FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9686 00000554 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9687                                  					; get stored time
  9688 00000558 29C2                    		sub	dx, ax
  9689 0000055A 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9690 0000055E 19C1                    		sbb	cx, ax
  9691 00000560 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9692 00000562 09D2                    		or	dx, dx		; time must pass
  9693 00000564 7511                    		jnz	short timepassed ; yes, examine max value
  9694 00000566 FE06[1D01]              		inc	byte [accesscount]
  9695 0000056A 803E[1D01]05            		cmp	byte [accesscount], 5 
  9696                                  					; if count is less than threshold, ok
  9697 0000056F 720C                    		jb	short timecheck_ret
  9698 00000571 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9699 00000575 EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9700                                  ; ---------------------------------------------------------------------------
  9701                                  
  9702                                  timepassed:				
  9703 00000577 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9704                                  					; min elapsed time? (2 seconds)
  9705 0000057A 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9706                                  
  9707                                  		; everything indicates that we do not know what has happened.
  9708                                  timecheck_unk:				
  9709 0000057C 4E                      		dec	si		; presume i don't know
  9710                                  timecheck_ret:				
  9711 0000057D C3                      		retn
  9712                                  
  9713                                  ; ---------------------------------------------------------------------------
  9714                                  ; 15/10/2022
  9715                                  Err_Exitj2:
  9716 0000057E EBC8                    		jmp	short err_exitj
  9717                                  
  9718                                  ; ---------------------------------------------------------------------------
  9719                                  
  9720                                  ; 15/10/2022
  9721                                  
  9722                                  ; ==========================================================================
  9723                                  ; Build a valid bpb for the disk in the drive.
  9724                                  ; ==========================================================================
  9725                                  
  9726                                  		; 19/10/2022
  9727                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9728 00000580 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9729 00000583 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9730 00000586 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9731                                  					; fnon_removable
  9732 0000058B 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9733                                  
  9734                                  		; let's set the default value for volid,vol_serial,
  9735                                  		; filesys_id in bds table
  9736                                  
  9737 0000058D E83700                  		call	clear_ids
  9738                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9739 00000590 C606[0305]01            		mov	byte [set_id_flag], 1
  9740 00000595 E85B00                  		call	GetBp		; build	a bpb if necessary
  9741 00000598 72B1                    		jb	short ret81
  9742                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9743 0000059A 803E[0305]02            		cmp	byte [set_id_flag], 2
  9744                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9745 0000059F C606[0305]00            		mov	byte [set_id_flag], 0
  9746 000005A4 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9747                                  					; otherwise, conventional boot record
  9748                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9749 000005A6 803E[7700]00            		cmp	byte [fhave96], 0
  9750 000005AB 7403                    		jz	short already_gotbpb ; brif not
  9751 000005AD E80A13                  		call	set_volume_id
  9752                                  already_gotbpb:				
  9753 000005B0 83C706                  		add	di, 6		; BDS.BPB
  9754                                  					; return the bpb from the current bds
  9755                                  
  9756                                  ;		fall into setptrsav, es:di -> result
  9757                                  
  9758                                  ; ---------------------------------------------------------------------------
  9759                                  
  9760                                  ; 15/10/2022
  9761                                  
  9762                                  ; ==========================================================================
  9763                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9764                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9765                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9766                                  ;It fails, for instance, when we install an external drive using driver.sys
  9767                                  ;because then the BDS segment is no longer Bios_Data. 
  9768                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9769                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9770                                  ;restored before returning to the caller.
  9771                                  ; ==========================================================================
  9772                                  
  9773                                  		; 19/10/2022
  9774                                  SetPtrSav:	; return point for dsk_init				
  9775 000005B3 8CC1                    		mov	cx, es		; save es
  9776                                  		;les	bx, ds:ptrsav
  9777 000005B5 C41E[1200]              		les	bx, [ptrsav]
  9778 000005B9 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9779 000005BD 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9780 000005C1 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9781 000005C5 F8                      		clc
  9782 000005C6 C3                      		retn
  9783                                  
  9784                                  ; =============== S U B	R O U T	I N E =======================================
  9785                                  
  9786                                  ; 15/10/2022
  9787                                  
  9788                                  ; -----------------------------------------------------
  9789                                  ; clear ids in bds table. only applied for floppies.
  9790                                  ;input:  es:di -> bds table
  9791                                  ;	assumes ds: -> Bios_Data
  9792                                  ;output: volid set to "NO NAME    "
  9793                                  ;	 vol_serial set to 0.
  9794                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9795                                  ;	   depending on the flag fatsize in bds.
  9796                                  ;
  9797                                  ;	trashes si, cx
  9798                                  ; -----------------------------------------------------
  9799                                  
  9800                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9801                                  ;size_of_EXT_SYSTEM_ID equ 8
  9802                                  
  9803                                  clear_ids:
  9804                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9805 000005C7 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9806                                  clear_ids_x:	; 11/09/2023		
  9807                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9808 000005CB 57                      		push	di
  9809 000005CC 31C9                    		xor	cx, cx		; no serial number
  9810 000005CE 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9811 000005D2 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9812                                  
  9813                                  		; BUGBUG - there's a lot in common here and with
  9814                                  		; mov_media_ids.. see if we can save some space by
  9815                                  		; merging them... jgl
  9816                                  
  9817                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9818                                  		; 10/12/2022
  9819 000005D6 B10B                    		mov	cl, 11 ; cx = 11		
  9820                                  
  9821                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9822 000005D8 BE[1605]                		mov	si, vol_no_name	; 19/10/2022
  9823 000005DB 83C74B                  		add	di, 75		; BDS.volid
  9824 000005DE F3A4                    		rep movsb
  9825                                  		
  9826                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9827                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9828                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9829                                  		;test	byte [es:di+1Fh], 40h
  9830                                  
  9831                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9832                                  			; Microsoft/IBM code has a bug here because the BDS's
  9833                                  			; .volid and .filesys_id fields will be reset
  9834                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9835                                  			; at the BDS offset 31 but current (this) code checks flags
  9836                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9837                                  			;
  9838                                  			; Correct Code:
  9839                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9840                                  			; 11/09/2023
  9841                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9842                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9843                                  			;
  9844                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9845                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9846                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9847                                  			;
  9848                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9849                                  			; 'clear_ids' is used for floppy disks only and the default
  9850                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9851                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9852                                  
  9853 000005E0 A840                    		test	al, 40h ; * 
  9854                                  		
  9855                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9856 000005E2 BE[0D05]                		mov	si, fat_16_id	; 19/10/2022
  9857 000005E5 7503                    		jnz	short ci_bigfat
  9858                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9859 000005E7 BE[0405]                		mov	si, fat_12_id	 ; 19/10/2022
  9860                                  ci_bigfat:				
  9861                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9862                                  		; 10/12/2022
  9863 000005EA B108                    		mov	cl, 8 ; cx = 8 
  9864 000005EC 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9865                                  					; filesys_id field
  9866 000005EF F3A4                    		rep movsb
  9867 000005F1 5F                      		pop	di		; restore bds pointer
  9868                                  getret_exit:		; 21/12/2023
  9869 000005F2 C3                      		retn
  9870                                  
  9871                                  ; =============== S U B	R O U T	I N E =======================================
  9872                                  
  9873                                  ; 15/10/2022
  9874                                  
  9875                                  ; ---------------------------------------------------------------------------
  9876                                  ;	getbp - return bpb from the drive specified by the bds.
  9877                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9878                                  ;	    note that we never come here for fixed disks.
  9879                                  ;	    for all other cases,
  9880                                  ;	      - it reads boot sector to pull out the bpb
  9881                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9882                                  ;		to get the fat id byte to build the bpb from there.
  9883                                  ;
  9884                                  ;   inputs:	es:di point to correct bds.
  9885                                  ;
  9886                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9887                                  ;		carry set, and al=7 if invalid disk.
  9888                                  ;		carry set and error code in al if other error.
  9889                                  ;		if failed to recognize the boot record, then will set the
  9890                                  ;		set_id_flag to 0.
  9891                                  ;		this routine will only work for a floppy diskette.
  9892                                  ;		     for a fixed disk, it will just return.
  9893                                  ;
  9894                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9895                                  ;	  segment definitions. It should be migrated towards.
  9896                                  ;	   now es:di has the bds, ds: has Bios_Data
  9897                                  ; ---------------------------------------------------------------------------
  9898                                  
  9899                                  		; 29/12/2023
  9900                                  GetBp:		
  9901                                  		; if returning fake bpb then return bpb as is.
  9902                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable
  9903 000005F3 26F6452305              		test	byte [es:di+23h], 5
  9904                                  		;jz	short getbp1	; getbp1
  9905                                  		;jmp	getret_exit
  9906                                  		; 21/12/2023
  9907 000005F8 75F8                    		jnz	short getret_exit
  9908                                  ; ---------------------------------------------------------------------------
  9909                                  getbp1:
  9910 000005FA 51                      		push	cx
  9911 000005FB 52                      		push	dx
  9912 000005FC 53                      		push	bx
  9913                                  
  9914                                  		; attempt to read in boot sector and determine bpb.
  9915                                  		; we assume that the 2.x and greater dos disks all
  9916                                  		; have a valid boot sector.
  9917                                  
  9918 000005FD E8A300                  		call	readbootsec
  9919 00000600 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9920 00000602 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9921 00000604 7508                    		jnz	short dofatbpb
  9922 00000606 E8E800                  		call	movbpb		; move bpb into	registers
  9923 00000609 EB51                    		jmp	short Has1
  9924                                  ; ---------------------------------------------------------------------------
  9925                                  
  9926                                  getbp_err_ret_brdg:			
  9927 0000060B E98100                  		jmp	getbp_err_ret
  9928                                  ; ---------------------------------------------------------------------------
  9929                                  
  9930                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9931                                  		; and fill in bpb from there.
  9932                                  dofatbpb:				
  9933 0000060E E84C01                  		call	readfat		; puts media descriptor	byte in	ah
  9934 00000611 72F8                    		jb	short getbp_err_ret_brdg
  9935                                  		;cmp	ds:fhave96, 0	; changeline support available?
  9936 00000613 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9937 00000618 7403                    		jz	short bpb_nochangeline ; brif not
  9938 0000061A E83E12                  		call	hidensity	; may not return! May add sp, 2	and
  9939                                  					; jump to has1!!!!!! or	has720K
  9940                                  bpb_nochangeline:		; test for a valid 3.5" medium
  9941 0000061D 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9942                                  					; ffSmall
  9943 00000622 7512                    		jnz	short is_floppy
  9944 00000624 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9945 00000627 7570                    		jnz	short got_unknown_medium
  9946                                  Has720K:
  9947                                  		; 22/12/2023
  9948                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
  9949                                  		;mov	bx, sm92	; 19/10/2022
  9950                                  
  9951                                  		; es points to segment of bds. the following should be modified
  9952                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9953                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9954                                  
  9955                                  		; 22/12/2023
  9956                                  		;; 10/12/2022
  9957                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9958                                  		;; 21/12/2022
  9959                                  		;mov	al, [bx]
  9960                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9961                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9962                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9963                                  		;; 19/10/2022 - Temporary !
  9964                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9965                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9966                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9967                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
  9968                                  
  9969                                  		; 22/12/2023 (sm92)
  9970                                  		; (PCDOS 7.1, IBMBIO.COM - BIOSCODE:071Eh)
  9971 00000629 B003                    		mov	al, 3		; bpbtype.sbf = 3
  9972 0000062B B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
  9973 0000062E BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
  9974                                  					; dh = bpbtype.chead = 2
  9975 00000631 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
  9976                                  					; bh = bpbtype.dire = 112
  9977 00000634 EB26                    		jmp	short Has1
  9978                                  ; ---------------------------------------------------------------------------
  9979                                  
  9980                                  is_floppy:			; must be a 5.25" floppy if we come here
  9981 00000636 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9982 00000639 725E                    		jb	short got_unknown_medium
  9983                                  
  9984 0000063B B001                    		mov	al, 1		; set number of	fat sectors
  9985 0000063D BB0840                  		mov	bx, 16392	; 64*256+8
  9986                                  					; set dir entries and sector max
  9987 00000640 B94001                  		mov	cx, 320		; 40*8
  9988                                  					; set size of drive
  9989 00000643 BA0101                  		mov	dx, 257		; 01*256+1
  9990                                  					; set head limit and sec/all unit
  9991                                  		; 22/12/2023
  9992                                  		;mov	al, 1		; bpbtype.sbf = 1
  9993                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
  9994                                  		;			; bh = bpbtype.dire = 64
  9995                                  		;mov	cx, 140h	; bpbtype.csec = 320
  9996                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
  9997                                  		;			; dh = bpbtype.chead = 1
  9998                                  
  9999 00000646 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 10000 00000649 7505                    		jnz	short has8	; nz = has 8 sectors
 10001                                  		
 10002                                  		; 29/12/2023
 10003                                  		;inc	al	; 2 	; inc number of	fat sectors
 10004                                  		;inc	bl	; 9	; inc sector max
 10005 0000064B 40                      		inc	ax
 10006 0000064C 43                      		inc	bx
 10007                                  
 10008                                  		;add	cx, 40		; increase size	(to 360)
 10009                                  		; 18/12/2022
 10010 0000064D 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 10011                                  has8:
 10012 00000650 F6C401                  		test	ah, 1		; test for 1 or	2 heads
 10013 00000653 7407                    		jz	short Has1	; jz = 1 head
 10014 00000655 01C9                    		add	cx, cx		; double size of disk
 10015 00000657 B770                    		mov	bh, 112		; increase number of directory entries
 10016 00000659 FEC6                    		inc	dh		; inc sec/all unit
 10017                                  		;inc	dl		; inc head limit
 10018                                  		; 29/12/2023
 10019 0000065B 42                      		inc	dx
 10020                                  Has1:
 10021                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 10022 0000065C 1E                      		push	ds
 10023 0000065D 06                      		push	es
 10024 0000065E 1F                      		pop	ds
 10025                                  
 10026                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 10027                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 10028                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 10029                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 10030                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 10031                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 10032                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 10033                                  
 10034 0000065F 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 10035 00000662 30F6                    		xor	dh, dh
 10036 00000664 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 10037 00000667 88FA                    		mov	dl, bh
 10038 00000669 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 10039 0000066C 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 10040 0000066F 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 10041 00000672 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 10042 00000675 88C2                    		mov	dl, al
 10043 00000677 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 10044 0000067A 88DA                    		mov	dl, bl
 10045 0000067C 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 10046                                  
 10047                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 10048                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 10049                                  		; to 0 since this code is for floppies
 10050                                  
 10051                                  		; 18/12/2022
 10052                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 10053                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 10054                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 10055                                  		; 18/12/2022
 10056 0000067F 29C9                    		sub	cx, cx ; 0
 10057                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 10058                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 10059                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 10060                                  		
 10061                                  		; 02/09/2023
 10062 00000681 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 10063 00000684 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 10064 00000687 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 10065                                  		
 10066 0000068A 1F                      		pop	ds ; 02/09/2023
 10067                                  getret:
 10068 0000068B 5B                      		pop	bx
 10069 0000068C 5A                      		pop	dx
 10070 0000068D 59                      		pop	cx
 10071                                  ;getret_exit:		; 21/12/2023
 10072 0000068E C3                      		retn
 10073                                  ; ---------------------------------------------------------------------------
 10074                                  
 10075                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 10076                                  		;mov	ds:set_id_flag,	0
 10077                                  		; 19/10/2022
 10078 0000068F C606[0305]00            		mov	byte [set_id_flag], 0
 10079 00000694 E81905                  		call	maperror
 10080 00000697 EBF2                    		jmp	short getret
 10081                                  ; ---------------------------------------------------------------------------
 10082                                  
 10083                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 10084                                  		; we do	not assume any type of bpb for this medium.
 10085                                  
 10086                                  got_unknown_medium:
 10087                                  		;mov	ds:set_id_flag,	0
 10088 00000699 C606[0305]00            		mov	byte [set_id_flag], 0
 10089 0000069E B007                    		mov	al, 7
 10090 000006A0 F9                      		stc
 10091 000006A1 EBE8                    		jmp	short getret
 10092                                  
 10093                                  ; =============== S U B	R O U T	I N E =======================================
 10094                                  
 10095                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10096                                  
 10097                                  ; ----------------------------------------------------------------
 10098                                  ; read in the boot sector. set carry if error in reading sector.
 10099                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 10100                                  ;
 10101                                  ;	assumes es:di -> bds, ds-> Bios_Data
 10102                                  ; ----------------------------------------------------------------
 10103                                  
 10104                                  ; 10/03/2019 - Retro DOS v4.0
 10105                                  
 10106                                  readbootsec:	
 10107 000006A3 B600                    		mov	dh, 0		; head 0
 10108 000006A5 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 10109 000006A8 E8BF00                  		call	read_sector
 10110 000006AB 7243                    		jb	short err_ret
 10111 000006AD 31DB                    		xor	bx, bx		; assume valid boot sector
 10112                                  
 10113                                  		; put a sanity check for the boot sector in here to detect
 10114                                  		; boot sectors that do not have valid bpbs. we examine the
 10115                                  		; first two bytes - they must contain a long jump (69h) or a
 10116                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 10117                                  		; (E9h). if this test is passed, we further check by examining
 10118                                  		; the signature at the end of the boot sector for the word
 10119                                  		; AA55h. if the signature is not present, we examine the media
 10120                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 10121                                  		; logic is modified a little bit. we are not going to check
 10122                                  		; signature. instead we are going to sanity check the media
 10123                                  		; byte in bpb regardless of the validity of signature. this is
 10124                                  		; to save the already developed commercial products that have
 10125                                  		; good jump instruction and signature but with the false bpb
 10126                                  		; informations
 10127                                  
 10128                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 10129                                  
 10130                                  		; 02/09/2023
 10131                                  		; 19/10/2022
 10132                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 10133                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 10134                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 10135                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 10136                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 10137                                  		;jnz	short invalidbootsec
 10138                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 10139                                  		;jnz	short invalidbootsec
 10140                                  
 10141                                  		; 02/09/2023 (PCDOS 7.1)
 10142 000006AF A0[4E01]                		mov	al, [disksector]
 10143 000006B2 3C69                    		cmp	al, 69h		; is it a direct jump?
 10144 000006B4 740F                    		je	short check_bpb_mediabyte
 10145                                  					; don't need to find a nop
 10146 000006B6 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 10147 000006B8 740B                    		je	short check_bpb_mediabyte
 10148                                  					; no need for nop
 10149 000006BA 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 10150 000006BC 7530                    		jne	short invalidbootsec
 10151 000006BE 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 10152 000006C3 7529                    		jne	short invalidbootsec
 10153                                  
 10154                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10155                                  ;
 10156                                  ;; 10/03/2019
 10157                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 10158                                  ;;
 10159                                  ;; Don't have to perform the following signature check since
 10160                                  ;; we need to check the media byte even with the good signatured diskette.
 10161                                  ;;
 10162                                  ;;check_signature:
 10163                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 10164                                  ;;							 ; disk or 1.x media.
 10165                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 10166                                  ;;					       ; may need some special handling
 10167                                  
 10168                                  ; check for non-ibm disks which do not have the signature AA55h at the
 10169                                  ; end of the boot sector, but still have a valid boot sector. this is done
 10170                                  ; by examining the media descriptor in the boot sector.
 10171                                  
 10172                                  		; 19/10/2022
 10173                                  check_bpb_mediabyte:
 10174 000006C5 A0[6301]                		mov	al, [disksector+15h]
 10175                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10176 000006C8 50                      		push	ax ; 02/09/2023
 10177 000006C9 24F0                    		and	al, 0F0h
 10178 000006CB 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 10179 000006CD 58                      		pop	ax ; 02/09/2023
 10180 000006CE 751E                    		jnz	short invalidbootsec
 10181                                  
 10182                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 10183                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 10184                                  ; sectors. these are specifically diskettes that were formatted in drives
 10185                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 10186                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 10187                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 10188                                  ; help our build bpb routine to recognise these specific cases, and to
 10189                                  ; set up out copy of the bpb accordingly.
 10190                                  ; we do this by checking to see if the boot sector is off a diskette that
 10191                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 10192                                  ; sec/clus field to 1. if not, we carry on as normal.
 10193                                  
 10194                                  checksinglesided:
 10195                                  		;mov	al, [disksector+15h]
 10196                                  		; 02/09/2023
 10197                                  		; al = [disksector+15h]
 10198 000006D0 3CF0                    		cmp	al, 0F0h
 10199 000006D2 741B                    		jz	short gooddsk
 10200 000006D4 A801                    		test	al, 1
 10201 000006D6 7517                    		jnz	short gooddsk
 10202 000006D8 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
 10203 000006DE 7507                    		jnz	short mustbeearlier
 10204 000006E0 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 10205 000006E5 7308                    		jnb	short gooddsk
 10206                                  
 10207                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 10208                                  
 10209                                  mustbeearlier:				
 10210 000006E7 C606[5B01]01            		mov	byte [disksector+0Dh], 1
 10211                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10212 000006EC EB01                    		jmp	short gooddsk
 10213                                  ; ---------------------------------------------------------------------------
 10214                                  
 10215                                  invalidbootsec:				
 10216 000006EE 43                      		inc	bx		; indicate that boot sector invalid
 10217                                  		; 10/12/2022
 10218                                  movbpb_ret:
 10219                                  gooddsk:				
 10220 000006EF F8                      		clc
 10221                                  err_ret:
 10222 000006F0 C3                      		retn
 10223                                  ; ---------------------------------------------------------------------------
 10224                                  
 10225                                  		; 10/12/2022
 10226                                  ;err_ret:				
 10227                                  		;retn
 10228                                  
 10229                                  ; =============== S U B	R O U T	I N E =======================================
 10230                                  
 10231                                  ; 15/10/2022
 10232                                  ; ---------------------------------------------------------------------------
 10233                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 10234                                  ; getbp routine at has1
 10235                                  ;
 10236                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 10237                                  ; serial number, volume label, file system id in bds according to
 10238                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
 10239                                  ; to signal that volume label is set already from the extended boot record
 10240                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 10241                                  ; the volume label in the root directory.)
 10242                                  ; ---------------------------------------------------------------------------
 10243                                  
 10244                                  ; 10/03/2019 - Retro DOS v4.0
 10245                                  
 10246                                  		; 19/10/2022
 10247                                  movbpb:	
 10248 000006F1 8A36[5B01]              		mov	dh, [disksector+0Dh]
 10249                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10250                                  					; sectors per unit
 10251 000006F5 8A3E[5F01]              		mov	bh, [disksector+11h]
 10252                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 10253                                  					; number of directory entries
 10254 000006F9 8B0E[6101]              		mov	cx, [disksector+13h]
 10255                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 10256                                  					; size of drive
 10257 000006FD 8A26[6301]              		mov	ah, [disksector+15h]
 10258                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10259                                  					; media	descriptor
 10260 00000701 A0[6401]                		mov	al, [disksector+16h];
 10261                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 10262                                  					; number of fat	sectors
 10263 00000704 8A1E[6601]              		mov	bl, [disksector+18h]
 10264                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 10265                                  					; sectors per track
 10266 00000708 8A16[6801]              		mov	dl, [disksector+1Ah]
 10267                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 10268                                  					; number of heads
 10269 0000070C 803E[0305]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 10270 00000711 75DC                    		jnz	short movbpb_ret
 10271 00000713 E81200                  		call	mov_media_ids
 10272 00000716 7205                    		jb	short movbpb_conv ; conventional boot record?
 10273 00000718 C606[0305]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 10274                                  movbpb_conv:				
 10275 0000071D 803E[7700]01            		cmp	byte [fhave96], 1
 10276 00000722 75CB                    		jnz	short movbpb_ret
 10277 00000724 E88711                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 10278                                  		; 10/12/2022
 10279                                  		; cf = 0
 10280                                  ;movbpb_ret:				
 10281                                  		;clc
 10282 00000727 C3                      		retn
 10283                                  
 10284                                  ; =============== S U B	R O U T	I N E =======================================
 10285                                  
 10286                                  ;copy the boot_serial number, volume id, and filesystem id from the
 10287                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 10288                                  ;by es:di.
 10289                                  
 10290                                  ;in.) es:di -> bds
 10291                                  ;     ds:disksector = valid extended boot record.
 10292                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10293                                  ;      the boot record information.
 10294                                  ;     carry flag set if not an extended bpb.
 10295                                  ;     all registers saved except the flag.
 10296                                  
 10297                                  		; 19/10/2022
 10298                                  mov_media_ids:		
 10299 00000728 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10300                                  					; [disksector+EXT_BOOT.SIG],
 10301                                  					; EXT_BOOT_SIGNATURE
 10302 0000072D 752C                    		jnz	short mmi_not_ext
 10303 0000072F 51                      		push	cx
 10304 00000730 8B0E[7501]              		mov	cx, [disksector+27h]
 10305                                  					; [disksector+EXT_BOOT.SERIAL]
 10306 00000734 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10307 00000738 8B0E[7701]              		mov	cx, [disksector+29h]
 10308                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10309 0000073C 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10310 00000740 57                      		push	di
 10311 00000741 56                      		push	si
 10312 00000742 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10313 00000745 BE[7901]                		mov	si, disksector+2Bh
 10314                                  		;mov	si, (offset disksector+2Bh) ;
 10315                                  					; disksector+EXT_BOOT.VOL_LABEL
 10316 00000748 83C74B                  		add	di, 75		; BDS.volid
 10317 0000074B F3A4                    		rep movsb
 10318                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10319                                  		; 10/12/2022
 10320 0000074D B108                    		mov	cl, 8 ; cx = 8
 10321 0000074F BE[8401]                		mov	si, disksector+36h
 10322                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10323 00000752 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10324 00000755 F3A4                    		rep movsb
 10325 00000757 5E                      		pop	si
 10326 00000758 5F                      		pop	di
 10327 00000759 59                      		pop	cx
 10328                                  		; 10/12/2022
 10329                                  		; cf = 0
 10330                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10331                                  				; (20/09/2022)
 10332 0000075A C3                      		retn
 10333                                  ; ---------------------------------------------------------------------------
 10334                                  
 10335                                  mmi_not_ext:				
 10336 0000075B F9                      		stc
 10337 0000075C C3                      		retn
 10338                                  
 10339                                  ; =============== S U B	R O U T	I N E =======================================
 10340                                  
 10341                                  ; 15/10/2022
 10342                                  ; --------------------------------------------------------------
 10343                                  ; read in the fat sector and get the media byte from it.
 10344                                  ; input : es:di -> bds
 10345                                  ; output:
 10346                                  ;	  carry set if an error occurs, ax contains error code.
 10347                                  ;	  otherwise, ah contains media byte on exit
 10348                                  ; --------------------------------------------------------------
 10349                                  
 10350                                  readfat:	
 10351                                  		;mov	dh, 0
 10352                                  		; 10/12/2022
 10353 0000075D 30F6                    		xor	dh, dh
 10354 0000075F B90200                  		mov	cx, 2		; head 0
 10355                                  					; cylinder 0, sector 2
 10356 00000762 E80500                  		call	read_sector
 10357 00000765 7202                    		jb	short bad_fat_ret
 10358 00000767 8A27                    		mov	ah, [bx]	; media	byte
 10359                                  bad_fat_ret:				
 10360 00000769 C3                      		retn
 10361                                  
 10362                                  ; =============== S U B	R O U T	I N E =======================================
 10363                                  
 10364                                  ; 15/10/2022
 10365                                  
 10366                                  ; ---------------------------------------------------------------------------
 10367                                  ; read a single sector into the temp buffer.
 10368                                  ; perform three retries in case of error.
 10369                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10370                                  ;		cx has sector and cylinder
 10371                                  ;		dh has head
 10372                                  ;		es:di has bds
 10373                                  ;		ds has Bios_Data
 10374                                  ;
 10375                                  ;   outputs:	carry clear
 10376                                  ;		    Bios_Data:bx point to sector
 10377                                  ;		       (note: some callers assume location of buffer)
 10378                                  ;
 10379                                  ;		carry set
 10380                                  ;		    ax has rom error code
 10381                                  ;
 10382                                  ; register bp is preserved.
 10383                                  ; ---------------------------------------------------------------------------
 10384                                  
 10385                                  ; 10/03/2019 - Retro DOS v4.0
 10386                                  
 10387                                  		; 19/10/2022
 10388                                  read_sector:	
 10389 0000076A 55                      		push	bp
 10390 0000076B BD0300                  		mov	bp, 3		; make 3 attempts
 10391 0000076E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10392 00000772 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10393                                  rd_ret:					
 10394 00000775 06                      		push	es
 10395 00000776 1E                      		push	ds
 10396 00000777 07                      		pop	es
 10397 00000778 B80102                  		mov	ax, 201h
 10398 0000077B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10399                                  					; AL = number of sectors to read, CH = track, CL = sector
 10400                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10401                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10402 0000077D 07                      		pop	es
 10403 0000077E 734A                    		jnb	short okret2
 10404                                  rd_rty:					
 10405 00000780 E86504                  		call	again		; reset	disk, decrement	bp, preserve ax
 10406 00000783 7442                    		jz	short err_rd_ret
 10407 00000785 26F6452301              		test	byte [es:di+23h], 1
 10408                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10409                                  					; fnon_removable
 10410 0000078A 75E9                    		jnz	short rd_ret
 10411 0000078C 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10412 00000791 7510                    		jnz	short rd_skip1_dpt
 10413 00000793 50                      		push	ax
 10414 00000794 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10415 00000795 C536[2D01]              		lds	si, [dpt]
 10416                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10417                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10418                                  		;			; NORMSETTLE
 10419                                  		; 12/12/2022
 10420 00000799 B00F                    		mov	al, 15
 10421 0000079B 864409                  		xchg	al, [si+9]
 10422                                  		; 
 10423 0000079E 1F                      		pop	ds
 10424 0000079F A2[2A01]                		mov	[save_head_sttl], al
 10425 000007A2 58                      		pop	ax
 10426                                  rd_skip1_dpt:				
 10427 000007A3 06                      		push	es
 10428 000007A4 1E                      		push	ds
 10429 000007A5 07                      		pop	es
 10430 000007A6 B80102                  		mov	ax, 201h
 10431 000007A9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10432                                  					; AL = number of sectors to read, CH = track, CL = sector
 10433                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10434                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10435 000007AB 07                      		pop	es
 10436 000007AC 9C                      		pushf
 10437 000007AD 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10438 000007B2 750E                    		jnz	short rd_skip2_dpt
 10439 000007B4 50                      		push	ax
 10440 000007B5 A0[2A01]                		mov	al, [save_head_sttl]
 10441 000007B8 1E                      		push	ds
 10442 000007B9 C536[2D01]              		lds	si, [dpt]
 10443 000007BD 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10444 000007C0 1F                      		pop	ds
 10445 000007C1 58                      		pop	ax
 10446                                  rd_skip2_dpt:				
 10447 000007C2 9D                      		popf
 10448 000007C3 7305                    		jnb	short okret2
 10449 000007C5 EBB9                    		jmp	short rd_rty
 10450                                  ; ---------------------------------------------------------------------------
 10451                                  
 10452                                  err_rd_ret:				
 10453 000007C7 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10454                                  					; return error
 10455 000007C9 F9                      		stc
 10456                                  
 10457                                  ; update information pertaining to last drive accessed, time of access, last
 10458                                  ; track accessed in that drive.
 10459                                  
 10460                                  okret2:					
 10461 000007CA 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10462 000007CE 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10463 000007D2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10464                                  					; save last track accessed on this drive
 10465                                  					; preserve flags in case error occurred
 10466 000007D6 9C                      		pushf
 10467 000007D7 E8EE03                  		call	set_tim
 10468 000007DA 9D                      		popf			; restore flags
 10469 000007DB 5D                      		pop	bp
 10470 000007DC C3                      		retn
 10471                                  
 10472                                  ;----------------------------------------------------------------------------
 10473                                  ;	disk open/close routines
 10474                                  ;----------------------------------------------------------------------------
 10475                                  
 10476                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10477 000007DD 803E[7700]00            		cmp	byte [fhave96], 0
 10478 000007E2 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10479 000007E4 E8DFFC                  		call	SetDrive	; get bds for drive
 10480 000007E7 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10481                                  dsk_open_exit:	
 10482                                  		; 10/12/2022
 10483                                  		; cf = 0			
 10484                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10485                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10486 000007EB C3                      		retn
 10487                                  ; ---------------------------------------------------------------------------
 10488                                  
 10489                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10490 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
 10491 000007F1 740E                    		jz	short exitjx	; done if no changeline	support
 10492 000007F3 E8D0FC                  		call	SetDrive	; get bds for drive
 10493 000007F6 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10494 000007FB 7404                    		jz	short exitjx	; watch	out for	wrap
 10495 000007FD 26FF4D20                		dec	word [es:di+20h]
 10496                                  exitjx:					
 10497                                  		; 10/12/2022
 10498                                  		; cf = 0
 10499                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10500                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10501 00000801 C3                      		retn
 10502                                  
 10503                                  ;----------------------------------------------------------------------------
 10504                                  ;		disk removable routine
 10505                                  ;----------------------------------------------------------------------------
 10506                                  
 10507                                  		; al is	unit #
 10508                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10509 00000802 E8C1FC                  		call	SetDrive	; get bds for this drive
 10510                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10511 00000805 26F6452301              		test	byte [es:di+23h], 1
 10512                                  		;jnz	short x_bus_exit ; non_rem
 10513 0000080A 7501                    		jnz	short non_rem	; 15/10/2022
 10514                                  		; 10/12/2022
 10515                                  		; cf = 0
 10516                                  		;clc			; CF is already ZERO here
 10517                                  					; 15/10/2022
 10518 0000080C C3                      		retn
 10519                                  ; ---------------------------------------------------------------------------
 10520                                  
 10521                                  non_rem:
 10522                                  x_bus_exit:				
 10523 0000080D B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10524                                  					; return busy status
 10525 0000080F F9                      		stc
 10526                                  dsk_ret:				
 10527 00000810 C3                      		retn
 10528                                  
 10529                                  ;----------------------------------------------------------------------------
 10530                                  ;		disk i/o routines
 10531                                  ;----------------------------------------------------------------------------
 10532                                  
 10533                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10534                                  		;mov	word [wrtverify], 103h
 10535                                  		; 19/10/2022
 10536 00000811 C706[2001]0301          		mov	word [rflag], 103h
 10537                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10538 00000817 EB06                    		jmp	short dsk_cl
 10539                                  ; ---------------------------------------------------------------------------
 10540                                  
 10541                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10542                                  		;mov	word [wrtverify], 3
 10543                                  		; 19/10/2022
 10544 00000819 C706[2001]0300          		mov	word [rflag], 3
 10545                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10546                                  
 10547                                  dsk_cl:					
 10548 0000081F E89400                  		call	diskio		; romwrite
 10549                                  ; ---------------------------------------------------------------------------
 10550                                  
 10551                                  dsk_io:					
 10552 00000822 73EC                    		jnb	short dsk_ret
 10553 00000824 E9B0F8                  		jmp	bc_err_cnt
 10554                                  ; ---------------------------------------------------------------------------
 10555                                  
 10556                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10557 00000827 E88700                  		call	diskrd
 10558 0000082A EBF6                    		jmp	short dsk_io
 10559                                  
 10560                                  ; =============== S U B	R O U T	I N E =======================================
 10561                                  
 10562                                  ; 15/10/2022
 10563                                  ; 10/03/2019 - Retro DOS v4.0
 10564                                  
 10565                                  ;-----------------------------------------------------------
 10566                                  ; miscellaneous odd jump routines.
 10567                                  ; moved out of mainline for speed.
 10568                                  
 10569                                  ; if we have a system where we have virtual drives, we need 
 10570                                  ; to prompt the user to place the correct disk in the drive.
 10571                                  ;
 10572                                  ;	assume es:di -> bds, ds:->Bios_Data
 10573                                  ;-----------------------------------------------------------
 10574                                  
 10575                                  		; 19/10/2022
 10576                                  checksingle:
 10577 0000082C 50                      		push	ax
 10578 0000082D 53                      		push	bx
 10579 0000082E 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10580                                  
 10581                                  ; if hard drive, cannot change disk.
 10582                                  ; if current owner of physical drive, no need to change diskette.
 10583                                  
 10584 00000832 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10585 00000835 7573                    		jnz	short singleret
 10586 00000837 F6C310                  		test	bl, 10h		; fi_am_mult
 10587                                  					; is there a drive sharing this	physical drive?
 10588 0000083A 746E                    		jz	short singleret
 10589                                  
 10590                                  
 10591                                  ; look for the previous owner of this physical drive
 10592                                  ; and reset its ownership flag.
 10593                                  
 10594 0000083C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10595                                  					; get physical drive number
 10596 00000840 06                      		push	es		; preserve pointer to current bds
 10597 00000841 57                      		push	di
 10598 00000842 C43E[1901]              		les	di, [start_bds] ; get first bds
 10599                                  scan_list:
 10600 00000846 26384504                		cmp	[es:di+4], al
 10601 0000084A 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10602 0000084C B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10603 0000084E 26845D23                		test	[es:di+23h], bl
 10604 00000852 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10605 00000854 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10606 00000858 5F                      		pop	di		; restore pointer to current bds
 10607 00000859 07                      		pop	es
 10608 0000085A 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10609                                  
 10610                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10611                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10612                                  ; in this case.
 10613 0000085E 803E[7A00]01            		cmp	byte [fsetowner], 1
 10614 00000863 7517                    		jnz	short not_fsetowner
 10615                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10616 00000865 26807D0400              		cmp	byte [es:di+4], 0
 10617 0000086A 753E                    		jnz	short singleret
 10618 0000086C 268A4505                		mov	al, [es:di+5]
 10619                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10620                                  					; get the DOS drive letter
 10621 00000870 06                      		push	es
 10622 00000871 8E06[1A00]              		mov	es, [zeroseg]
 10623 00000875 26A20405                		mov	[es:LSTDRV], al
 10624                                  		;mov	es:504h, al	; [es:LSTDRV]
 10625                                  					; set up sdsb
 10626 00000879 07                      		pop	es		; restore bds pointer
 10627 0000087A EB2E                    		jmp	short singleret
 10628                                  ; ---------------------------------------------------------------------------
 10629                                  
 10630                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10631                                  ; we now check to see if we are in a single drive system and the application
 10632                                  ; has "cleverly" diddled the sdsb
 10633                                  
 10634                                  not_fsetowner:
 10635 0000087C 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10636 00000881 7517                    		jnz	short ignore_sdsb
 10637 00000883 50                      		push	ax
 10638 00000884 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10639 00000888 88C4                    		mov	ah, al
 10640 0000088A 06                      		push	es
 10641 0000088B 8E06[1A00]              		mov	es, [zeroseg]
 10642 0000088F 2686060405              		xchg	al, [es:LSTDRV]
 10643                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10644                                  					; then swap(curr_drv,req_drv)
 10645 00000894 07                      		pop	es
 10646 00000895 38C4                    		cmp	ah, al		; else
 10647 00000897 58                      		pop	ax		; swap(curr_drv,req_drv)
 10648 00000898 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10649                                  ignore_sdsb:
 10650 0000089A E83B0E                  		call	swpdsk
 10651 0000089D EB0B                    		jmp	short singleret
 10652                                  ; ---------------------------------------------------------------------------
 10653                                  
 10654                                  scan_skip:
 10655 0000089F 26C43D                  		les	di, [es:di]			
 10656                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10657                                  					; go to	next bds
 10658 000008A2 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10659 000008A5 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10660 000008A7 F9                      		stc
 10661 000008A8 5F                      		pop	di		; restore current bds
 10662 000008A9 07                      		pop	es
 10663                                  singleret:
 10664 000008AA 5B                      		pop	bx
 10665 000008AB 58                      		pop	ax
 10666 000008AC C3                      		retn
 10667                                  
 10668                                  ; 22/12/2023
 10669                                  %if 0
 10670                                  ; ---------------------------------------------------------------------------
 10671                                  
 10672                                  baddrive:
 10673                                  		mov	al, 8		; sector not found
 10674                                  		jmp	short baddrive_ret
 10675                                  %endif
 10676                                  
 10677                                  ; ---------------------------------------------------------------------------
 10678                                  
 10679                                  unformatteddrive:
 10680 000008AD B007                    		mov	al, 7		; unknown media
 10681                                  ;baddrive_ret:
 10682 000008AF F9                      		stc
 10683                                  ; ---------------------------------------------------------------------------
 10684                                  
 10685                                  ioret:
 10686 000008B0 C3                      		retn
 10687                                  
 10688                                  ; ---------------------------------------------------------------------------
 10689                                  
 10690                                  ; 15/10/2022
 10691                                  
 10692                                  ; ---------------------------------------------------------------------------
 10693                                  ;	disk i/o handler
 10694                                  ;
 10695                                  ;	al = drive number (0-6)
 10696                                  ;	ah = media descriptor
 10697                                  ;	cx = sector count
 10698                                  ;	dx = first sector (low)
 10699                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10700                                  ;	ds = cs
 10701                                  ;	es:di = transfer address
 10702                                  ;	[rflag]=operation (2=read, 3=write)
 10703                                  ;	[verify]=1 for verify after write
 10704                                  ;
 10705                                  ;	if successful carry flag = 0
 10706                                  ;	  else cf=1 and al contains error code
 10707                                  ; ---------------------------------------------------------------------------
 10708                                  
 10709                                  diskrd:
 10710                                  		;mov	ds:rflag, 2	; romread
 10711                                  		; 19/10/2022
 10712 000008B1 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10713                                  
 10714                                  ; =============== S U B	R O U T	I N E =======================================
 10715                                  
 10716                                  		; 19/10/2022
 10717                                  diskio:
 10718 000008B6 89FB                    		mov	bx, di		; es:bx	= transfer address
 10719 000008B8 8C06[2E05]              		mov	[xfer_seg], es	; save transfer	segment
 10720 000008BC E807FC                  		call	SetDrive
 10721 000008BF 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10722 000008C3 A2[1F01]                		mov	[medbyt], al
 10723                                  		;jcxz	short ioret
 10724 000008C6 E3E8                    		jcxz	ioret
 10725                                  
 10726                                  ; see if the media is formatted or not by checking the flags field in
 10727                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10728                                  ; go to the error exit at label unformatteddrive.
 10729                                  
 10730 000008C8 26F6452402              		test	byte [es:di+24h], 2
 10731                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10732                                  					; unformatted_media
 10733 000008CD 75DE                    		jnz	short unformatteddrive
 10734 000008CF 890E[2201]              		mov	[seccnt], cx	; save sector count
 10735 000008D3 8926[3501]              		mov	[spsav], sp	; save sp
 10736                                  
 10737                                  ; ensure that we are trying to access valid sectors on the drive
 10738                                  
 10739 000008D7 89D0                    		mov	ax, dx
 10740 000008D9 31F6                    		xor	si, si
 10741 000008DB 01CA                    		add	dx, cx
 10742                                  		;adc	si, 0
 10743                                  		; 02/09/2023 (PCDOS 7.1)
 10744 000008DD D1D6                    		rcl	si, 1
 10745 000008DF 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10746                                  					; 32 bit sector ?
 10747 000008E4 740C                    		jz	short sanity32
 10748                                  		;cmp	si, 0
 10749                                  		; 02/09/2023
 10750 000008E6 09F6                    		or	si, si
 10751 000008E8 751A                    		jnz	short baddrive
 10752 000008EA 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10753 000008EE 7714                    		ja	short baddrive
 10754 000008F0 EB16                    		jmp	short sanityok
 10755                                  ; ---------------------------------------------------------------------------
 10756                                  
 10757                                  sanity32:
 10758 000008F2 0336[2405]              		add	si, [start_sec_h]
 10759 000008F6 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10760 000008FA 720C                    		jb	short sanityok
 10761 000008FC 7706                    		ja	short baddrive
 10762 000008FE 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10763                                  		;ja	short baddrive
 10764                                  		; 22/12/2023
 10765 00000902 7604                    		jna	short sanityok
 10766                                  ; 22/12/2023
 10767                                  %if 1
 10768                                  ; ---------------------------------------------------------------------------
 10769                                  
 10770                                  baddrive:
 10771 00000904 B008                    		mov	al, 8		; sector not found
 10772                                  		;jmp	short baddrive_ret
 10773                                  ; ---------------------------------------------------------------------------
 10774                                  ;unformatteddrive:
 10775                                  		;mov	al, 7		; unknown media
 10776                                  baddrive_ret:
 10777 00000906 F9                      		stc
 10778                                  ;ioret:
 10779 00000907 C3                      		retn
 10780                                  %endif
 10781                                  
 10782                                  ; ---------------------------------------------------------------------------
 10783                                  
 10784                                  sanityok:
 10785 00000908 8B16[2405]              		mov	dx, [start_sec_h]
 10786 0000090C 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10787 00000910 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10788                                  
 10789                                  ; now dx;ax have the physical first sector.
 10790                                  ; since the following procedures is going to destroy ax, let's
 10791                                  ; save it temporarily to saved_word.
 10792                                  
 10793 00000914 A3[2205]                		mov	[saved_word], ax ; save the sector number (low)
 10794                                  		; 22/12/2023
 10795                                  		; [temp_h] = [saved_word]
 10796                                  
 10797                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10798                                  ; will do it because we will skip the set up stuff with hard disks.
 10799                                  
 10800 00000917 06                      		push	es
 10801                                  		;mov	es, [zeroseg]
 10802                                  		; 02/09/2023
 10803 00000918 31F6                    		xor	si, si ; 0
 10804 0000091A 8EC6                    		mov	es, si
 10805 0000091C 26C4367800              		les	si, [es:DSKADR]
 10806                                  		;les	si, es:78h	; [es:DSKADR]
 10807                                  					; current disk parm table
 10808 00000921 8936[2D01]              		mov	[dpt], si
 10809 00000925 8C06[2F01]              		mov	[dpt+2], es
 10810 00000929 07                      		pop	es
 10811 0000092A 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10812                                  					; fnon_removable
 10813 0000092F 7510                    		jnz	short skip_setup
 10814 00000931 E8F8FE                  		call	checksingle
 10815                                  
 10816                                  ; check to see if we have previously noted a change line. the routine
 10817                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10818                                  ; the proper error code.
 10819                                  
 10820 00000934 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10821 00000939 7403                    		jz	short diskio_nochangeline ; brif not
 10822 0000093B E8680E                  		call	checklatchio	; will do a sneaky pop stack return
 10823                                  					; if a disk error occurs
 10824                                  diskio_nochangeline:			
 10825 0000093E E87700                  		call	iosetup		; set up tables	and variables for i/o
 10826                                  
 10827                                  ; now the settle values are correct for the following code
 10828                                  
 10829                                  skip_setup:
 10830                                  
 10831                                  ; 32 bit sector calculation.
 10832                                  ; dx:[saved_word] = starting sector number.
 10833                                  
 10834 00000941 89D0                    		mov	ax, dx
 10835 00000943 31D2                    		xor	dx, dx
 10836                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10837                                  					 ; divide by sec per track
 10838                                  		; 02/09/2023
 10839 00000945 268B4D13                		mov	cx, [es:di+13h]
 10840 00000949 F7F1                    		div	cx
 10841                                  
 10842                                  		;mov	[temp_h], ax
 10843                                  		;mov	ax, [saved_word]
 10844                                  		; 22/12/2023
 10845 0000094B 8706[2205]              		xchg	ax, [saved_word] ; [temp_h] = [saved_word]
 10846                                  
 10847 0000094F F7F1                    		div	cx ; 02/09/2023
 10848                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10849                                  					; now, [temp_h]:ax = track #, dx = sector
 10850                                  		;inc	dl		; sector number	is 1 based.
 10851                                  		; 18/12/2022
 10852 00000951 42                      		inc	dx
 10853 00000952 8816[3101]              		mov	[cursec], dl	; save current sector
 10854 00000956 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10855                                  					; get number of	heads
 10856 0000095A 50                      		push	ax
 10857 0000095B 31D2                    		xor	dx, dx
 10858 0000095D A1[2205]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10859 00000960 F7F1                    		div	cx
 10860 00000962 A3[2205]                		mov	[temp_h], ax	; [temp_h] = [saved_word]	
 10861 00000965 58                      		pop	ax
 10862 00000966 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10863 00000968 833E[2205]00            		cmp	word [temp_h], 0
 10864                                  		;ja	short baddrive_brdg
 10865                                  		; 22/12/2023
 10866 0000096D 7795                    		ja	short baddrive
 10867 0000096F 3D0004                  		cmp	ax, 1024	; 2^10 currently maximum for track #.
 10868                                  		;ja	short baddrive_brdg
 10869 00000972 7790                    		ja	short baddrive
 10870 00000974 8816[3201]              		mov	[curhd], dl	; save current head
 10871 00000978 A3[3301]                		mov	[curtrk], ax	; save current track
 10872                                  
 10873                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10874                                  ; violations here. not true. we perform the operation as if everything is
 10875                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10876                                  
 10877 0000097B A1[2201]                		mov	ax, [seccnt]
 10878 0000097E E87E00                  		call	block		; (cas - call/ret)
 10879                                  		;call	done
 10880                                  		;retn
 10881                                  		; 18/12/2022
 10882                                  		;jmp	done
 10883                                  		; 22/12/2023
 10884                                  		;jmp	short done
 10885                                  
 10886                                  ; ---------------------------------------------------------------------------
 10887                                  
 10888                                  		; 22/12/2023
 10889                                  ;baddrive_brdg:
 10890                                  		;jmp	baddrive
 10891                                  
 10892                                  ; =============== S U B	R O U T	I N E =======================================
 10893                                  
 10894                                  ;--------------------------------------------------------------
 10895                                  ; set time of last access, and reset default values in the dpt.
 10896                                  ;
 10897                                  ;	  note: trashes (at least) si
 10898                                  ;--------------------------------------------------------------
 10899                                  
 10900                                  		; 19/10/2022
 10901                                  done:
 10902 00000981 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10903                                  					; fnon_removable
 10904 00000986 752F                    		jnz	short ddbx	; do not set for non-removable media
 10905 00000988 E83D02                  		call	set_tim
 10906                                  ;diddleback:
 10907                                  ; 09/12/2022
 10908                                  diddle_back:
 10909 0000098B 9C                      		pushf
 10910 0000098C 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10911 00000991 7523                    		jnz	short nodiddleback
 10912 00000993 50                      		push	ax
 10913 00000994 06                      		push	es
 10914 00000995 C436[2D01]              		les	si, [dpt]
 10915 00000999 A0[2B01]                		mov	al, [save_eot]
 10916 0000099C 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10917 000009A0 A0[2701]                		mov	al, [settlecurrent]
 10918 000009A3 8A26[2601]              		mov	ah, [motorstartup]
 10919 000009A7 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10920 000009AB 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10921 000009B0 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10922 000009B4 07                      		pop	es
 10923 000009B5 58                      		pop	ax
 10924                                  nodiddleback:
 10925 000009B6 9D                      		popf
 10926                                  ddbx:
 10927                                  skip_dpt_setting:	; 22/12/2023
 10928 000009B7 C3                      		retn
 10929                                  
 10930                                  ; =============== S U B	R O U T	I N E =======================================
 10931                                  
 10932                                  ;--------------------------------------------------------------
 10933                                  ; set the drive-last-accessed flag for diskette only.
 10934                                  ; we know that the hard disk will not be removed.
 10935                                  ; es:di -> current bds.
 10936                                  ; ds -> Bios_Data
 10937                                  ; ax,cx,si are destroyed.
 10938                                  ;--------------------------------------------------------------
 10939                                  
 10940                                  		; 23/12/2023
 10941                                  		; 19/10/2022
 10942                                  iosetup:
 10943 000009B8 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10944 000009BC A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10945                                  
 10946                                  ; determine proper head settle values
 10947                                  
 10948 000009BF 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10949 000009C4 75F1                    		jnz	short skip_dpt_setting
 10950 000009C6 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10951 000009C9 1E                      		push	ds
 10952 000009CA C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10953 000009CE 884404                  		mov	[si+4],	al
 10954                                  		; 23/12/2023
 10955 000009D1 88C4                    		mov	ah, al
 10956 000009D3 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10957                                  		;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10958 000009D6 1F                      		pop	ds
 10959 000009D7 A2[2601]                		mov	[motorstartup], al
 10960 000009DA 8826[2B01]              		mov	[save_eot], ah
 10961                                  
 10962                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10963                                  ; motor start time to 4. this checking for every i/o is going to affect
 10964                                  ; performance across the board, but is necessary!!
 10965                                  
 10966 000009DE 1E                      		push	ds
 10967 000009DF C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10968 000009E3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10969                                  					; ffSmall
 10970 000009E8 7505                    		jnz	short motor_start_ok
 10971 000009EA B004                    		mov	al, 4
 10972 000009EC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10973                                  motor_start_ok:
 10974                                  
 10975                                  ; ds:si now points to disk parameter table.
 10976                                  ; get current settle and set fast settle
 10977                                  
 10978                                  		;xor	al, al
 10979                                  		;inc	al		; ibm wants fast settle	to be 1
 10980                                  		; 18/12/2022
 10981 000009EF 31C0                    		xor	ax, ax
 10982 000009F1 40                      		inc	ax
 10983 000009F2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10984                                  					; get settle and set up	for fast
 10985 000009F5 1F                      		pop	ds
 10986 000009F6 A2[2701]                		mov	[settlecurrent], al
 10987 000009F9 B00F                    		mov	al, 15		; NORMSETTLE
 10988                                  					; someone has diddled the settle
 10989 000009FB A2[2801]                		mov	[settleslow], al
 10990                                  		; 22/12/2023
 10991                                  ;skip_dpt_setting:
 10992 000009FE C3                      		retn
 10993                                  
 10994                                  ; =============== S U B	R O U T	I N E =======================================
 10995                                  
 10996                                  ;--------------------------------------------------------------
 10997                                  ;read the number of sectors specified in ax,
 10998                                  ;handling track boundaries
 10999                                  ;es:di -> bds for this drive
 11000                                  ;--------------------------------------------------------------
 11001                                  
 11002                                  		; 23/12/2023
 11003                                  		; 19/10/2022
 11004                                  block:
 11005 000009FF 09C0                    		or	ax, ax
 11006 00000A01 74B4                    		jz	short ddbx
 11007 00000A03 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11008                                  					; fnon_removable
 11009 00000A08 740D                    		jz	short block_floppy ;
 11010                                  
 11011                                  ; check	to see if multi	track operation	is allowed. if not
 11012                                  ; we have to go	to the block_floppy below to break up the operation.
 11013                                  
 11014 00000A0A F606[2605]80            		test	byte [multrk_flag], 80h
 11015                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 11016 00000A0F 7406                    		jz	short block_floppy
 11017 00000A11 E82800                  		call	Disk
 11018 00000A14 31C0                    		xor	ax, ax
 11019 00000A16 C3                      		retn
 11020                                  ; ---------------------------------------------------------------------------
 11021                                  
 11022                                  block_floppy:
 11023                                  
 11024                                  ; read at most 1 track worth. perform minimization at sector / track
 11025                                  				
 11026 00000A17 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 11027                                  		;inc	cl
 11028                                  		; 23/12/2023
 11029 00000A1B 41                      		inc	cx
 11030 00000A1C 2A0E[3101]              		sub	cl, [cursec]
 11031 00000A20 30ED                    		xor	ch, ch
 11032 00000A22 39C8                    		cmp	ax, cx
 11033 00000A24 7302                    		jnb	short gotmin
 11034 00000A26 89C1                    		mov	cx, ax
 11035                                  gotmin:
 11036                                  
 11037                                  ; ax is the requested number of sectors to read
 11038                                  ; cx is the number that we can do on this track
 11039                                  
 11040 00000A28 50                      		push	ax
 11041 00000A29 51                      		push	cx
 11042 00000A2A 89C8                    		mov	ax, cx
 11043 00000A2C E80D00                  		call	Disk
 11044 00000A2F 59                      		pop	cx
 11045 00000A30 58                      		pop	ax
 11046                                  
 11047                                  ; cx is the number of sectors just transferred
 11048                                  
 11049 00000A31 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 11050 00000A33 D0E1                    		shl	cl, 1
 11051 00000A35 00CF                    		add	bh, cl		; adjust transfer address
 11052 00000A37 EBC6                    		jmp	short block
 11053                                  dskerr_brdg:
 11054 00000A39 E9E700                  		jmp	dskerr
 11055                                  
 11056                                  ; =============== S U B	R O U T	I N E =======================================
 11057                                  
 11058                                  ; 15/10/2022
 11059                                  
 11060                                  ;--------------------------------------------------------------
 11061                                  ;perform disk i/o with retries
 11062                                  ; al = number of sectors (1-8, all on one track)
 11063                                  ; es:di point to drive parameters
 11064                                  ; xfer_seg:bx = transfer address 
 11065                                  ;		(must not cross a 64k physical boundary)
 11066                                  ; [rflag] = 2 if read, 3 if write
 11067                                  ; [verify] = 0 for normal, 1 for verify after write
 11068                                  ;--------------------------------------------------------------
 11069                                  
 11070                                  		; 23/12/2023
 11071                                  		; 19/10/2022
 11072                                  Disk:
 11073                                  
 11074                                  ; Check for hard disk format and
 11075                                  ; if TRUE then set max error count to 2
 11076                                  
 11077 00000A3C BD0500                  		mov	bp, 5		; MAXERR
 11078                                  					; set up retry count
 11079                                  		; 23/12/2023
 11080 00000A3F 268A4D23                		mov	cl, [es:di+23h]
 11081 00000A43 83E101                  		and	cx, 1
 11082                                  		;test	byte [es:di+23h], 1
 11083                                  					; [es:di+BDS.flags], fnon_removable
 11084 00000A46 7408                    		jz	short GetRdWrInd
 11085 00000A48 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 11086 00000A4B 7403                    		jz	short GetRdWrInd
 11087 00000A4D BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 11088                                  GetRdWrInd:				
 11089 00000A50 892E[2905]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 11090 00000A54 892E[2B05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 11091 00000A58 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 11092                                  ;retry:
 11093                                  ; 09/12/2022
 11094                                  _retry:
 11095 00000A5C 50                      		push	ax
 11096 00000A5D 8B16[3301]              		mov	dx, [curtrk]
 11097                                  		
 11098                                  		; 23/12/2023
 11099 00000A61 E30B                    		jcxz	disk_not_mini
 11100                                  		;test	byte [es:di+23h], 1
 11101                                  		;jz	short disk_not_mini
 11102                                  		
 11103 00000A63 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 11104                                  					; is this a mini disk? ((logical dos partition))
 11105 00000A68 7504                    		jnz	short disk_not_mini ; no. continue to next.
 11106 00000A6A 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 11107                                  					; add hidden trks.
 11108                                  disk_not_mini:
 11109 00000A6E D0CE                    		ror	dh, 1
 11110 00000A70 D0CE                    		ror	dh, 1
 11111 00000A72 0A36[3101]              		or	dh, [cursec]
 11112 00000A76 89D1                    		mov	cx, dx
 11113 00000A78 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 11114 00000A7A 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 11115 00000A7E 268A5504                		mov	dl, [es:di+4]	; physical drive number
 11116                                  					; [es:di+BDS.drivenum]
 11117 00000A82 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 11118 00000A87 7411                    		jz	short do_fast	; hard files use fast speed
 11119                                  
 11120                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 11121                                  ; this helps when we have just done a reset disk operation and the head has
 11122                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 11123                                  
 11124 00000A89 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 11125                                  		;jz	short do_writej
 11126                                  		; 23/12/2023
 11127 00000A8E 7460                    		jz	short do_write
 11128 00000A90 80FC02                  		cmp	ah, 2		; romread
 11129 00000A93 7405                    		jz	short do_fast
 11130 00000A95 80FC04                  		cmp	ah, 4		; romverify
 11131                                  		;jz	short do_fast
 11132                                  		; 23/12/2023
 11133 00000A98 7556                    		jnz	short do_write
 11134                                  ;do_writej:
 11135                                  
 11136                                  ; reads always fast, unless we have just done a disk reset operation
 11137                                  			
 11138                                  		;jmp	short do_write	; reads	always fast
 11139                                  ; ---------------------------------------------------------------------------
 11140                                  
 11141                                  do_fast:
 11142 00000A9A E8FB00                  		call	fastspeed	; change settle	mode
 11143                                  testerr:
 11144 00000A9D 729A                    		jb	short dskerr_brdg
 11145                                  
 11146                                  ; set drive and track of last access
 11147                                  
 11148 00000A9F 8816[7600]              		mov	[step_drv], dl
 11149 00000AA3 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 11150                                  no_set:
 11151                                  		;cmp	word [wrtverify], 103h
 11152 00000AA7 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 11153 00000AAD 7452                    		jz	short doverify
 11154                                  noverify:
 11155 00000AAF 58                      		pop	ax
 11156                                  
 11157                                  ; check the flags word in the bds to see if the drive is non removable
 11158                                  ; if not we needn't do anything special
 11159                                  ; if it is a hard disk then check to see if multi-track operation
 11160                                  ; is specified. if specified we don't have to calculate for the next
 11161                                  ; track since we are already done. so we can go to the exit of this routine.
 11162                                  
 11163 00000AB0 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11164                                  					; fnon_removable
 11165 00000AB5 7407                    		jz	short its_removable
 11166 00000AB7 F606[2605]80            		test	byte [multrk_flag], 80h ; multrk_on
 11167 00000ABC 7530                    		jnz	short disk_ret
 11168                                  its_removable:
 11169 00000ABE 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 11170 00000AC1 30E4                    		xor	ah, ah
 11171 00000AC3 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 11172 00000AC7 00C1                    		add	cl, al
 11173 00000AC9 880E[3101]              		mov	[cursec], cl
 11174 00000ACD 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11175                                  					; see if sector/track limit reached
 11176 00000AD1 761B                    		jbe	short disk_ret
 11177 00000AD3 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 11178 00000AD8 8A36[3201]              		mov	dh, [curhd]
 11179 00000ADC FEC6                    		inc	dh
 11180 00000ADE 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 11181 00000AE2 7206                    		jb	short noxor
 11182 00000AE4 30F6                    		xor	dh, dh
 11183 00000AE6 FF06[3301]              		inc	word [curtrk]
 11184                                  noxor:
 11185 00000AEA 8836[3201]              		mov	[curhd], dh
 11186                                  disk_ret:
 11187 00000AEE F8                      		clc
 11188 00000AEF C3                      		retn
 11189                                  ; ---------------------------------------------------------------------------
 11190                                  
 11191                                  ; 15/10/2022
 11192                                  
 11193                                  ;--------------------------------------------------------------
 11194                                  ; the request is for write. determine if we are talking about
 11195                                  ; the same track and drive. if so, use the fast speed.
 11196                                  ;--------------------------------------------------------------
 11197                                  
 11198                                  do_write:
 11199 00000AF0 3A16[7600]              		cmp	dl, [step_drv]
 11200 00000AF4 7506                    		jnz	short do_norm	; we have changed drives
 11201 00000AF6 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 11202 00000AFA 749E                    		jz	short do_fast	; we are still on the same track
 11203                                  do_norm:
 11204 00000AFC E87500                  		call	normspeed
 11205 00000AFF EB9C                    		jmp	short testerr
 11206                                  ; ---------------------------------------------------------------------------
 11207                                  
 11208                                  ;--------------------------------------------------------------
 11209                                  ; we have a verify request also. get state info and go verify
 11210                                  ;--------------------------------------------------------------
 11211                                  
 11212                                  doverify:
 11213 00000B01 58                      		pop	ax
 11214 00000B02 50                      		push	ax
 11215 00000B03 B404                    		mov	ah, 4
 11216 00000B05 E89000                  		call	fastspeed
 11217 00000B08 73A5                    		jnb	short noverify
 11218                                  
 11219                                  ; check the error returned in ah to see if it is a soft ecc error.
 11220                                  ; if it is not we needn't do anything special. if it is a soft
 11221                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 11222                                  ; this retry count becomes 0 then we just ignore the error and go to
 11223                                  ; no_verify but if we can still try then we call the routine to reset
 11224                                  ; the disk and go to dskerr1 to retry the operation.
 11225                                  
 11226 00000B0A 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 11227 00000B0D 750B                    		jnz	short not_softecc_err
 11228 00000B0F FF0E[2B05]              		dec	word [soft_ecc_cnt]
 11229 00000B13 749A                    		jz	short noverify	; no more retry
 11230 00000B15 E83305                  		call	ResetDisk	; reset	disk
 11231 00000B18 EB3E                    		jmp	short dskerr1	; retry
 11232                                  ; ---------------------------------------------------------------------------
 11233                                  
 11234                                  not_softecc_err:			; other error.
 11235 00000B1A E82E05                  		call	ResetDisk
 11236 00000B1D FF0E[2905]              		dec	word [vretry_cnt]
 11237 00000B21 EB1C                    		jmp	short dskerr0
 11238                                  ; ---------------------------------------------------------------------------
 11239                                  
 11240                                  ;--------------------------------------------------------------
 11241                                  ; need to special case the change-line error ah=06h.
 11242                                  ; if we get this, we need to return it.
 11243                                  ;--------------------------------------------------------------
 11244                                  
 11245                                  dskerr:
 11246 00000B23 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 11247 00000B28 7403                    		jz	short dskerr_nochangeline ; brif not
 11248 00000B2A E8EB0C                  		call	checkio
 11249                                  dskerr_nochangeline:
 11250 00000B2D 803E[2D05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 11251 00000B32 7508                    		jnz	short dochkagain ; no more retry.
 11252 00000B34 BD0100                  		mov	bp, 1
 11253 00000B37 C606[2D05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 11254                                  dochkagain:
 11255 00000B3C E8A900                  		call	again
 11256                                  dskerr0:
 11257 00000B3F 7420                    		jz	short harderr
 11258 00000B41 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11259                                  					; fnon_removable
 11260 00000B46 7505                    		jnz	short skip_timeout_chk
 11261 00000B48 80FC80                  		cmp	ah, 80h		; timeout?
 11262 00000B4B 7414                    		jz	short harderr
 11263                                  skip_timeout_chk:
 11264 00000B4D 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 11265 00000B50 740A                    		jz	short write_fault_err ;	then, don't retry.
 11266 00000B52 C706[2B05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 11267                                  					; set soft_ecc_cnt back	to maxerr
 11268                                  dskerr1:
 11269 00000B58 58                      		pop	ax		; restore sector count
 11270                                  		;jmp	retry
 11271                                  		; 09/12/2022
 11272 00000B59 E900FF                  		jmp	_retry
 11273                                  ; ---------------------------------------------------------------------------
 11274                                  
 11275                                  write_fault_err:
 11276 00000B5C BD0100                  		mov	bp, 1		; just retry only once
 11277                                  					; for write fault error.
 11278 00000B5F EBF7                    		jmp	short dskerr1
 11279                                  
 11280                                  		; fall into harderr
 11281                                  ; ---------------------------------------------------------------------------
 11282                                  
 11283                                  ; entry point for routines that call maperror themselves
 11284                                  
 11285                                  harderr:
 11286 00000B61 E84C00                  		call	maperror
 11287                                  harderr2:
 11288 00000B64 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11289                                  					; force a media check through rom
 11290 00000B69 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 11291 00000B6D 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 11292                                  
 11293                                  ; since we are performing a non-local goto, restore the disk parameters
 11294                                  
 11295                                  		;jmp	diddleback
 11296                                  		; 09/12/2022
 11297 00000B71 E917FE                  		jmp	diddle_back
 11298                                  
 11299                                  ; =============== S U B	R O U T	I N E =======================================
 11300                                  
 11301                                  ; change settle value from settlecurrent to whatever is appropriate
 11302                                  ; note that this routine is never called for a fixed disk.
 11303                                  
 11304                                  		; 19/10/2022
 11305                                  normspeed:
 11306 00000B74 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 11307 00000B79 751D                    		jnz	short fastspeed
 11308 00000B7B 06                      		push	es
 11309 00000B7C 50                      		push	ax
 11310 00000B7D A0[2801]                		mov	al, [settleslow]
 11311 00000B80 C436[2D01]              		les	si, [dpt]	; current disk parm table
 11312 00000B84 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11313 00000B88 58                      		pop	ax
 11314 00000B89 07                      		pop	es
 11315 00000B8A E80B00                  		call	fastspeed
 11316                                  		; 24/12/2023
 11317                                  		;push	es
 11318                                  		;les	si, [dpt]
 11319                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11320                                  		;			; 1 is fast settle value
 11321                                  		;pop	es
 11322 00000B8D 1E                      		push	ds
 11323 00000B8E C536[2D01]              		lds	si, [dpt]
 11324 00000B92 C6440901                		mov	byte [si+9], 1
 11325 00000B96 1F                      		pop	ds
 11326                                  
 11327 00000B97 C3                      		retn
 11328                                  
 11329                                  ; =============== S U B	R O U T	I N E =======================================
 11330                                  
 11331                                  ; if the drive has been marked as too big (i.e. starting sector of the
 11332                                  ; partition is > 16 bits, then always return drive not ready.
 11333                                  
 11334                                  fastspeed:
 11335 00000B98 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 11336                                  					; ftoobig
 11337 00000B9D 750D                    		jnz	short notready
 11338 00000B9F 06                      		push	es
 11339 00000BA0 8E06[2E05]              		mov	es, [xfer_seg]
 11340 00000BA4 CD13                    		int	13h		; DISK -
 11341 00000BA6 8C06[2E05]              		mov	[xfer_seg], es
 11342 00000BAA 07                      		pop	es
 11343 00000BAB C3                      		retn
 11344                                  ; ---------------------------------------------------------------------------
 11345                                  
 11346                                  notready:
 11347 00000BAC F9                      		stc
 11348 00000BAD B480                    		mov	ah, 80h
 11349 00000BAF C3                      		retn
 11350                                  
 11351                                  ; =============== S U B	R O U T	I N E =======================================
 11352                                  
 11353                                  ; map error returned by rom in ah into corresponding code to be returned to
 11354                                  ; dos in al. trashes di. guaranteed to set carry.
 11355                                  
 11356                                  maperror:
 11357 00000BB0 51                      		push	cx
 11358 00000BB1 06                      		push	es
 11359 00000BB2 1E                      		push	ds		; set es=Bios_Data
 11360 00000BB3 07                      		pop	es
 11361 00000BB4 88E0                    		mov	al, ah		; put error code in al
 11362 00000BB6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11363 00000BB9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11364                                  					; number of possible error conditions
 11365 00000BBC BF[3C01]                		mov	di, errin	; point to error conditions
 11366 00000BBF F2AE                    		repne scasb
 11367                                  		; 10/12/2022
 11368 00000BC1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11369                                  					; get translation
 11370                                  		; 19/10/2022 - Temporary ! 
 11371                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11372 00000BC4 07                      		pop	es
 11373 00000BC5 59                      		pop	cx
 11374 00000BC6 F9                      		stc			; flag error condition
 11375 00000BC7 C3                      		retn
 11376                                  
 11377                                  ; =============== S U B	R O U T	I N E =======================================
 11378                                  
 11379                                  ; set the time of last access for this drive.
 11380                                  ; this is done only for removable media. es:di -> bds
 11381                                  
 11382                                  set_tim:
 11383 00000BC8 50                      		push	ax
 11384 00000BC9 E8AAF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11385                                  
 11386                                  ; we have the new time. if we see that the time has passed,
 11387                                  ; then we reset the threshold counter...
 11388                                  
 11389 00000BCC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11390 00000BD0 7506                    		jnz	short setaccess
 11391 00000BD2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11392                                  		;jz	short done_set
 11393                                  		; 12/12/2022
 11394 00000BD6 740E                    		je	short done_set2
 11395                                  setaccess:
 11396 00000BD8 C606[1D01]00            		mov	byte [accesscount], 0
 11397 00000BDD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11398 00000BE1 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11399                                  done_set:
 11400 00000BE5 F8                      		clc
 11401                                  done_set2:		; 12/12/2022
 11402 00000BE6 58                      		pop	ax
 11403 00000BE7 C3                      		retn
 11404                                  
 11405                                  ; =============== S U B	R O U T	I N E =======================================
 11406                                  
 11407                                  ; this routine is called if an error occurs while formatting or verifying.
 11408                                  ; it resets the drive,and decrements the retry count.
 11409                                  ; on entry - ds:di - points to bds for the drive
 11410                                  ;	     bp    - contains retry count
 11411                                  ; on exit    flags indicate result of decrementing retry count
 11412                                  
 11413                                  again:
 11414 00000BE8 E86004                  		call	ResetDisk
 11415 00000BEB 80FC06                  		cmp	ah, 6
 11416 00000BEE 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11417                                  					; do not decrement retry count.
 11418 00000BF0 4D                      		dec	bp		; decrement retry count
 11419 00000BF1 C3                      		retn
 11420                                  ; ---------------------------------------------------------------------------
 11421                                  
 11422                                  dont_dec_retry_count:
 11423 00000BF2 08E4                    		or	ah, ah
 11424 00000BF4 C3                      		retn
 11425                                  
 11426                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11427                                  
 11428                                  ;----------------------------------------------------------------------------
 11429                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11430                                  ;----------------------------------------------------------------------------
 11431                                  ; 11/03/2019 - Retro DOS v4.0
 11432                                  
 11433                                  ; 18/03/2019
 11434                                  
 11435                                  ; ==========================================================================
 11436                                  ;
 11437                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11438                                  ;
 11439                                  ;      This function is intended to give the user to control the
 11440                                  ;      bds table flags of unformatted_media bit.
 11441                                  ;      GetAccessFlag will show the status -
 11442                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11443                                  ;						1 disk i/o allowed
 11444                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11445                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11446                                  ;						1 disallow disk i/o
 11447                                  ; ==========================================================================
 11448                                  
 11449                                  		; generic ioctl dispatch tables
 11450                                  
 11451                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11452                                  
 11453                                  ; ---------------------------------------------------------------------------
 11454 00000BF5 00                      		db 0
 11455                                  
 11456                                  ; 09/12/2022 
 11457                                  %if 0
 11458                                  
 11459                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11460                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11461                                  		dw 0EE8h	; 61h	; ReadTrack
 11462                                  		dw 0E86h	; 62h	; VerifyTrack
 11463                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11464                                  		dw 0CA3h		; Cmd_Error_Proc
 11465                                  		dw 0CA3h		; Cmd_Error_Proc
 11466                                  		dw 119Ah	; 66h	; GetMediaId
 11467                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11468                                  		dw 12C1h	; 68h	; SenseMediaType
 11469                                  
 11470                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11471                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11472                                  		dw 0EEFh	; 41h	; WriteTrack
 11473                                  		dw 0DC1h	; 42h	; FormatTrack
 11474                                  		dw 0CA3h		; Cmd_Error_Proc
 11475                                  		dw 0CA3h		; Cmd_Error_Proc
 11476                                  		dw 0CA3h		; Cmd_Error_Proc
 11477                                  		dw 11D2h	; 46h	; SetMediaId
 11478                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11479                                  
 11480                                  %endif
 11481                                  
 11482                                  		; 09/12/2022
 11483 00000BF6 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11484 00000BF7 [610C]                  		dw GetDeviceParameters	; 60h
 11485 00000BF9 [A30E]                  		dw ReadTrack		; 61h
 11486 00000BFB [430E]                  		dw VerifyTrack		; 62h
 11487 00000BFD [5D0C]                  		dw Cmd_Error_Proc
 11488 00000BFF [5D0C]                  		dw Cmd_Error_Proc
 11489 00000C01 [5D0C]                  		dw Cmd_Error_Proc
 11490 00000C03 [2211]                  		dw GetMediaId		; 66h
 11491 00000C05 [E811]                  		dw GetAccessFlag	; 67h ; unpublished function
 11492 00000C07 [3912]                  		dw SenseMediaType	; 68h
 11493                                  
 11494 00000C09 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11495 00000C0A [AC0C]                  		dw SetDeviceParameters	; 40h
 11496 00000C0C [AA0E]                  		dw WriteTrack		; 41h
 11497 00000C0E [7F0D]                  		dw FormatTrack		; 42h
 11498 00000C10 [5D0C]                  		dw Cmd_Error_Proc
 11499 00000C12 [5D0C]                  		dw Cmd_Error_Proc
 11500 00000C14 [5D0C]                  		dw Cmd_Error_Proc
 11501 00000C16 [5811]                  		dw SetMediaId		; 46h
 11502 00000C18 [FD11]                  		dw SetAccessFlag	; 47h ; unpublished function
 11503                                  
 11504                                  ; ==========================================================================
 11505                                  ; IOC_DC_Table
 11506                                  ;
 11507                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11508                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11509                                  ; Added for 5.00
 11510                                  ; ==========================================================================
 11511                                  
 11512 00000C1A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11513 00000C1B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11514 00000C1C 61                      		db 61h			; READ_TRACK
 11515 00000C1D 41                      		db 41h			; WRITE_TRACK
 11516 00000C1E 62                      		db 62h			; VERIFY_TRACK
 11517 00000C1F 42                      		db 42h			; FORMAT_TRACK
 11518 00000C20 66                      		db 66h			; GET_MEDIA_ID
 11519 00000C21 46                      		db 46h			; SET_MEDIA_ID
 11520 00000C22 67                      		db 67h			; GET_ACCESS_FLAG
 11521 00000C23 47                      		db 47h			; SET_ACCESS_FLAG
 11522 00000C24 68                      		db 68h			; SENSE_MEDIA_TYPE
 11523                                  
 11524                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11525                                  
 11526                                  ; ---------------------------------------------------------------------------
 11527                                  
 11528                                  ; 16/10/2022
 11529                                  
 11530                                  ; ==========================================================================
 11531                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11532                                  ;
 11533                                  ;    input: AL contains logical drive
 11534                                  ;
 11535                                  ;	functions are dispatched through a call. On return, carry indicates
 11536                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11537                                  ;	subfunctions.
 11538                                  ;
 11539                                  ; ==========================================================================
 11540                                  
 11541                                  ; 11/03/2019
 11542                                  		; 19/10/2022
 11543                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11544 00000C25 E89EF8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11545 00000C28 06                      		push	es
 11546 00000C29 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11547 00000C2D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11548                                  					; RAWIO
 11549 00000C32 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11550 00000C36 07                      		pop	es
 11551 00000C37 7525                    		jnz	short IoctlFuncErr
 11552                                  
 11553                                  		; cas note: Could do the above two blocks in reverse order.
 11554                                  		; Would have to preserve al for SetDrive
 11555                                  
 11556                                  		; 10/12/2022
 11557 00000C39 BE[F60B]                		mov	si, IoReadJumpTable
 11558                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11559                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11560 00000C3C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11561 00000C3E 7503                    		jnz	short NotGenericWrite ; function is a read.
 11562                                  		; 10/12/2022
 11563 00000C40 BE[090C]                		mov	si, IoWriteJumpTable
 11564                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11565                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11566                                  NotGenericWrite:			
 11567 00000C43 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11568 00000C45 2C40                    		sub	al, 40h		; offset for base function
 11569 00000C47 2E3A04                  		cmp	al, [cs:si]
 11570 00000C4A 7712                    		ja	short IoctlFuncErr
 11571 00000C4C 98                      		cbw
 11572 00000C4D D1E0                    		shl	ax, 1
 11573 00000C4F 46                      		inc	si
 11574 00000C50 01C6                    		add	si, ax
 11575 00000C52 2EFF14                  		call	near [cs:si]
 11576                                  		;call	word ptr cs:[si]
 11577 00000C55 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11578                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11579                                  					; 2C7h:30h = 70h:25A0h
 11580 00000C5A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11581 00000C5C C3                      		retn			; Pass carry flag through to exit code
 11582                                  ; ---------------------------------------------------------------------------
 11583                                  
 11584                                  		; Cmd_Error_Proc is called as a procedure and also use
 11585                                  		; as a fall through from above
 11586                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11587 00000C5D 5A                      		pop	dx
 11588                                  
 11589                                  IoctlFuncErr:				
 11590 00000C5E E974F4                  		jmp	bc_cmderr
 11591                                  ; ---------------------------------------------------------------------------
 11592                                  
 11593                                  ; 16/10/2022
 11594                                  
 11595                                  ; ==========================================================================
 11596                                  ;**	GetDeviceParameters:
 11597                                  ;
 11598                                  ;	GetDeviceParameters implements the generic ioctl function:
 11599                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11600                                  ;
 11601                                  ;	ENTRY	(ES:di) = BDS for drive
 11602                                  ;		PtrSav = long pointer to request header
 11603                                  ;	EXIT	??? BUGBUG
 11604                                  ;	USES	??? BUGBUG
 11605                                  ; ==========================================================================
 11606                                  
 11607                                  		; 19/10/2022
 11608                                  GetDeviceParameters:
 11609                                  		; Copy info from bds to the device parameters packet
 11610                                  
 11611 00000C61 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11612 00000C65 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11613                                  					; (DS:BX) = return buffer
 11614 00000C68 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11615 00000C6C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11616 00000C6F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11617 00000C73 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11618                                  					; Mask off other bits
 11619 00000C76 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11620 00000C79 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11621 00000C7D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11622 00000C80 30C0                    		xor	al, al		; Set media type to default
 11623 00000C82 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11624                                  					
 11625                                  		; copy recommended bpb
 11626 00000C85 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11627 00000C88 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11628                                  					; BUILD_DEVICE_BPB
 11629 00000C8B 7412                    		jz	short UseBpbPresent
 11630 00000C8D 1E                      		push	ds		; Save request packet segment
 11631 00000C8E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11632                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11633                                  					; 2C7h:30h = 70h:25A0h
 11634                                  					; Point back to Bios_Data
 11635 00000C93 E896FB                  		call	checksingle
 11636 00000C96 E85AF9                  		call	GetBp		; Build	the bpb	from scratch
 11637 00000C99 1F                      		pop	ds		; Restore request packet segment
 11638 00000C9A 720F                    		jb	short GetParmRet
 11639 00000C9C 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11640                                  					; Use this subfield of bds instead
 11641                                  UseBpbPresent:				
 11642 00000C9F 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11643                                  					; This is where	the result goes
 11644 00000CA2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11645                                  					; For now use 'small' bpb
 11646 00000CA5 1E                      		push	ds		; reverse segments for copy
 11647 00000CA6 06                      		push	es
 11648 00000CA7 1F                      		pop	ds
 11649 00000CA8 07                      		pop	es
 11650 00000CA9 F3A4                    		rep movsb
 11651                                  		
 11652                                  		; 12/12/2022
 11653                                  		; cf=0 (test instruction -above- resets cf) 	
 11654                                  		;clc
 11655                                  GetParmRet:				
 11656 00000CAB C3                      		retn
 11657                                  ; ---------------------------------------------------------------------------
 11658                                  
 11659                                  ; 17/10/2022
 11660                                  ; 16/10/2022
 11661                                  
 11662                                  ; ==========================================================================
 11663                                  ; SetDeviceParameters:
 11664                                  ;
 11665                                  ; input: ES:di points to bds for drive
 11666                                  ; ==========================================================================
 11667                                  
 11668                                  		; 19/10/2022
 11669                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11670 00000CAC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11671 00000CB0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11672 00000CB3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11673                                  					; fchanged_by_format|fchanged
 11674 00000CB9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11675                                  					; ONLY_SET_TRACKLAYOUT
 11676 00000CBC 7579                    		jnz	short setTrackTable
 11677 00000CBE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11678 00000CC1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11679 00000CC5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11680 00000CC8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11681 00000CCC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11682 00000CCF 1E                      		push	ds
 11683                                  		; 17/10/2022
 11684 00000CD0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11685                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11686                                  					; 2C7h:30h = 70h:25A0h
 11687                                  		;cmp	byte [fhave96], 0
 11688 00000CD5 803E[7700]00            		cmp	byte [fhave96], 0
 11689 00000CDA 1F                      		pop	ds
 11690 00000CDB 7502                    		jnz	short HaveChange ; we have changeline support
 11691                                  		; 10/12/2022
 11692 00000CDD 24FD                    		and	al, 0FDh
 11693                                  		;and	ax, 0FFFDh	; ~fchangeline
 11694                                  
 11695                                  		; Ignore all bits except non_removable and changeline
 11696                                  HaveChange:				
 11697 00000CDF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11698 00000CE2 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11699 00000CE6 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11700 00000CEA 09C8                    		or	ax, cx
 11701 00000CEC 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11702 00000CF0 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11703                                  					; Set media type
 11704 00000CF3 1E                      		push	ds
 11705 00000CF4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11706                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11707 00000CF9 A2[2E06]                		mov	[mediatype], al
 11708                                  		;mov	ds:mediatype, al
 11709 00000CFC 1F                      		pop	ds
 11710                                  
 11711                                  		; The media changed (maybe) so we will have to do a set dasd
 11712                                  		; the next time we format a track
 11713                                  
 11714                                  		; 10/12/2022
 11715 00000CFD 26804D2380              		or	byte [es:di+35], 80h
 11716                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11717                                  					; set_dasd_true
 11718 00000D02 57                      		push	di		; Save bds pointer
 11719                                  
 11720                                  		; Figure out what we are supposed to do with the bpb
 11721                                  		; were we asked to install a fake bpb?
 11722                                  
 11723 00000D03 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11724                                  					; INSTALL_FAKE_BPB
 11725 00000D06 7514                    		jnz	short InstallFakeBpb
 11726                                  
 11727                                  		; were we returning a fake bpb when asked to build a bpb?
 11728                                  
 11729                                  		; 10/12/2022
 11730 00000D08 26F6452304              		test	byte [es:di+35], 4
 11731                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11732                                  					; return_fake_bpb
 11733 00000D0D 7405                    		jz	short InstallRecommendedBpb
 11734                                  
 11735                                  		; we were returning a fake bpb but we can stop now
 11736                                  
 11737                                  		; 10/12/2022
 11738 00000D0F 26806523FB              		and	byte [es:di+35], 0FBh
 11739                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11740                                  					; ~return_fake_bpb
 11741                                  InstallRecommendedBpb:			
 11742 00000D14 B91F00                  		mov	cx, 31		; A_BPB.size
 11743 00000D17 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11744 00000D1A EB0B                    		jmp	short CopyTheBpb
 11745                                  ; ---------------------------------------------------------------------------
 11746                                  
 11747                                  InstallFakeBpb:
 11748                                  		; 10/12/2022
 11749 00000D1C 26804D2304              		or	byte [es:di+35], 4				
 11750                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11751                                  					; return_fake_bpb
 11752 00000D21 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11753                                  					; move 'smaller' bpb
 11754 00000D24 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11755                                  
 11756                                  CopyTheBpb:				
 11757 00000D27 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11758 00000D2A F3A4                    		rep movsb
 11759 00000D2C 1E                      		push	ds		; Save packet segment
 11760                                  		; 17/10/2022
 11761 00000D2D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11762                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11763                                  					; Setup	for ds -> Bios_Data
 11764 00000D32 E8C503                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11765 00000D35 1F                      		pop	ds		; Restore packet segment
 11766 00000D36 5F                      		pop	di		; Restore bds pointer
 11767                                  setTrackTable:				
 11768 00000D37 8B4F26                  		mov	cx, [bx+38]
 11769 00000D3A 1E                      		push	ds
 11770 00000D3B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11771 00000D40 890E[3005]              		mov	[sectorspertrack], cx
 11772 00000D44 1F                      		pop	ds
 11773                                  		; 10/12/2022
 11774 00000D45 26806523F7              		and	byte [es:di+35], 0F7h
 11775                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11776                                  					; ~good_tracklayout
 11777 00000D4A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11778                                  					; TRACKLAYOUT_IS_GOOD
 11779 00000D4D 7405                    		jz	short UglyTrackLayOut
 11780                                  		; 10/12/2022
 11781 00000D4F 26804D2308              		or	byte [es:di+35], 8
 11782                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11783                                  					; good_tracklayout
 11784                                  UglyTrackLayOut:			
 11785 00000D54 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11786 00000D57 7722                    		ja	short TooManyPerTrack
 11787                                  		;jcxz	short SectorInfoSaved
 11788 00000D59 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11789 00000D5B BF[3205]                		mov	di, tracktable
 11790 00000D5E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11791                                  		; 17/10/2022
 11792 00000D61 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11793                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11794                                  					; Trash	our bds	pointer
 11795                                  StoreSectorInfo:
 11796 00000D66 47                      		inc	di
 11797 00000D67 47                      		inc	di		; Skip over cylinder and head
 11798 00000D68 AD                      		lodsw			; Get sector id
 11799 00000D69 AA                      		stosb			; Copy it
 11800 00000D6A AD                      		lodsw			; Get sector size
 11801                                  		
 11802                                  		; 02/09/2023 (PCDOS 7.1)
 11803                                  		;call	SectSizeToSectIndex
 11804 00000D6B 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11805                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11806                                  					; examine upper	byte only
 11807 00000D6E 7704                    		ja	short OneK
 11808 00000D70 88E0                    		mov	al, ah		; value	in AH is the index!
 11809 00000D72 EB02                    		jmp	short sdp_s
 11810                                  OneK:
 11811 00000D74 B003                    		mov	al, 3
 11812                                  sdp_s:
 11813 00000D76 AA                      		stosb			; Store	sector SIZE index
 11814 00000D77 E2ED                    		loop	StoreSectorInfo
 11815                                  SectorInfoSaved:
 11816 00000D79 F8                      		clc
 11817 00000D7A C3                      		retn
 11818                                  ; ---------------------------------------------------------------------------
 11819                                  
 11820                                  TooManyPerTrack:			
 11821 00000D7B B00C                    		mov	al, 0Ch
 11822 00000D7D F9                      		stc
 11823 00000D7E C3                      		retn
 11824                                  ; ---------------------------------------------------------------------------
 11825                                  
 11826                                  ; 16/10/2022
 11827                                  
 11828                                  ; ==========================================================================
 11829                                  ; FormatTrack:
 11830                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11831                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11832                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11833                                  ;
 11834                                  ; input: ES:di points to bds for drive
 11835                                  ;
 11836                                  ; output:
 11837                                  ;	for status call:
 11838                                  ;	specialfunction byte set to:
 11839                                  ;		0 - rom support + legal combination
 11840                                  ;		1 - no rom support
 11841                                  ;		2 - illegal combination
 11842                                  ;		3 - no media present
 11843                                  ;	carry cleared.
 11844                                  ;
 11845                                  ;	for format track:
 11846                                  ;		carry set if error
 11847                                  ;
 11848                                  ; ==========================================================================
 11849                                  
 11850                                  ; 16/03/2019
 11851                                  
 11852                                  		; 19/10/2022
 11853                                  FormatTrack:
 11854 00000D7F C51E[1200]              		lds	bx, [ptrsav]
 11855 00000D83 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11856 00000D86 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11857                                  					; STATUS_FOR_FORMAT
 11858 00000D89 740E                    		jz	short DoFormatTrack
 11859 00000D8B 1E                      		push	ds
 11860                                  		; 17/10/2022
 11861 00000D8C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11862                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11863 00000D91 E82302                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11864 00000D94 1F                      		pop	ds
 11865 00000D95 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11866 00000D97 F8                      		clc
 11867 00000D98 C3                      		retn
 11868                                  ; ---------------------------------------------------------------------------
 11869                                  
 11870                                  DoFormatTrack:				
 11871 00000D99 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11872                                  					; DEV_HARDDISK
 11873 00000D9E 7508                    		jnz	short DoFormatDiskette
 11874                                  		; 17/10/2022
 11875 00000DA0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11876                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11877                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11878 00000DA5 E99B00                  		jmp	VerifyTrack
 11879                                  ; ---------------------------------------------------------------------------
 11880                                  
 11881                                  DoFormatDiskette:			
 11882 00000DA8 8B4F01                  		mov	cx, [bx+1]
 11883 00000DAB 8B5703                  		mov	dx, [bx+3]
 11884 00000DAE F60702                  		test	byte [bx], 2
 11885                                  		; 17/10/2022
 11886 00000DB1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11887                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11888                                  					; Setup	ds-> Bios_Data for verify
 11889 00000DB6 7403                    		jz	short DoFormatDiskette_1
 11890 00000DB8 E9E300                  		jmp	VerifyTrack_Err
 11891                                  ; ---------------------------------------------------------------------------
 11892                                  
 11893                                  DoFormatDiskette_1:			
 11894 00000DBB E8F901                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11895 00000DBE 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11896 00000DC0 7406                    		jz	short NeedToSetDasd ; Old rom
 11897 00000DC2 3C03                    		cmp	al, 3		; Time out error?
 11898 00000DC4 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11899                                  					; about	the illegal combination)
 11900 00000DC6 EB66                    		jmp	short FormatFailed
 11901                                  ; ---------------------------------------------------------------------------
 11902                                  
 11903                                  NeedToSetDasd:				
 11904 00000DC8 52                      		push	dx
 11905 00000DC9 E88E01                  		call	SetDasd		; INT 13h, AH=17h
 11906 00000DCC 5A                      		pop	dx
 11907                                  NoSetDasd:				
 11908 00000DCD E85CFA                  		call	checksingle	; Do any needed	diskette swapping
 11909 00000DD0 89D0                    		mov	ax, dx		; Get track from packet
 11910 00000DD2 A3[3901]                		mov	[trknum], ax
 11911 00000DD5 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11912 00000DD9 88CC                    		mov	ah, cl
 11913 00000DDB BB[3205]                		mov	bx, tracktable
 11914 00000DDE 8B0E[3005]              		mov	cx, [sectorspertrack]
 11915                                  
 11916                                  StoreCylinderHead:			
 11917 00000DE2 8907                    		mov	[bx], ax	; Store	into TrackTable
 11918 00000DE4 83C304                  		add	bx, 4		; Skip to next sector field
 11919 00000DE7 E2F9                    		loop	StoreCylinderHead
 11920                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11921                                  		; 02/09/2023
 11922 00000DE9 B105                    		mov	cl, 5
 11923                                  FormatRetry:				
 11924 00000DEB 51                      		push	cx
 11925 00000DEC BB[3205]                		mov	bx, tracktable
 11926 00000DEF A0[3005]                		mov	al, [sectorspertrack]
 11927 00000DF2 B405                    		mov	ah, 5		; romformat
 11928 00000DF4 8C1E[2E05]              		mov	[xfer_seg], ds
 11929 00000DF8 E86602                  		call	ToRom
 11930 00000DFB 59                      		pop	cx
 11931 00000DFC 7216                    		jb	short FormatError
 11932 00000DFE 51                      		push	cx		; Now verify the sectors just formatted.
 11933                                  					; NOTE:	because	of bug in some BIOSes we have to
 11934                                  					;	set ES:BX to 00:00
 11935 00000DFF 53                      		push	bx
 11936 00000E00 31DB                    		xor	bx, bx
 11937 00000E02 891E[2E05]              		mov	[xfer_seg], bx
 11938 00000E06 A0[3005]                		mov	al, [sectorspertrack]
 11939 00000E09 B404                    		mov	ah, 4		; romverify
 11940 00000E0B B101                    		mov	cl, 1
 11941 00000E0D E85102                  		call	ToRom
 11942 00000E10 5B                      		pop	bx
 11943 00000E11 59                      		pop	cx
 11944 00000E12 7329                    		jnb	short FormatOk
 11945                                  FormatError:				
 11946 00000E14 E83402                  		call	ResetDisk
 11947 00000E17 C606[3006]01            		mov	byte [had_format_error], 1
 11948 00000E1C 50                      		push	ax
 11949 00000E1D 51                      		push	cx
 11950 00000E1E 52                      		push	dx
 11951 00000E1F E89501                  		call	SetMediaForFormat
 11952 00000E22 3C01                    		cmp	al, 1
 11953 00000E24 7503                    		jnz	short WhileErr
 11954 00000E26 E83101                  		call	SetDasd
 11955                                  WhileErr:				
 11956 00000E29 5A                      		pop	dx
 11957 00000E2A 59                      		pop	cx
 11958 00000E2B 58                      		pop	ax
 11959 00000E2C E2BD                    		loop	FormatRetry
 11960                                  FormatFailed:				
 11961 00000E2E C606[3006]01            		mov	byte [had_format_error], 1
 11962                                  					; Set the format error flag
 11963 00000E33 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11964 00000E36 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11965 00000E38 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11966                                  DoMapIt:				
 11967 00000E3A E973FD                  		jmp	maperror
 11968                                  ; ---------------------------------------------------------------------------
 11969                                  
 11970                                  FormatOk:				
 11971 00000E3D C606[3006]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11972 00000E42 C3                      		retn
 11973                                  ; ---------------------------------------------------------------------------
 11974                                  
 11975                                  ; 16/10/2022
 11976                                  
 11977                                  ; ==========================================================================
 11978                                  ;
 11979                                  ; VerifyTrack:
 11980                                  ;
 11981                                  ; input: ES:di points to bds for drive
 11982                                  ; ==========================================================================
 11983                                  
 11984                                  VerifyTrack:				
 11985 00000E43 1E                      		push	ds
 11986 00000E44 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11987 00000E48 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11988                                  
 11989                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11990                                  
 11991 00000E4B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11992 00000E4E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11993 00000E51 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11994 00000E54 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11995                                  					; Get option flag word
 11996 00000E56 1F                      		pop	ds
 11997 00000E57 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11998 00000E5C 890E[3301]              		mov	[curtrk], cx
 11999 00000E60 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 12000 00000E63 8B0E[3005]              		mov	cx, [sectorspertrack]
 12001                                  
 12002                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 12003                                  		; specified if not we should go to the normal track verification
 12004                                  		; routine. If fast format has been specified we should get the
 12005                                  		; number of tracks to be verified and check it to see if it is
 12006                                  		; > 255. If it is then it is an error and we should go to
 12007                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 12008                                  		; sectors per track to get the total number of sectors to be
 12009                                  		; verified. This should also be less than equal to 255
 12010                                  		; otherwise we go to same error exit. If everything is okay
 12011                                  		; we initalise cx to the total sectors. use ax as a temporary
 12012                                  		; register.
 12013                                  
 12014                                  					; Special function requested?	
 12015 00000E67 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 12016 00000E6A 7421                    		jz	short NormVerifyTrack
 12017 00000E6C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 12018 00000E6E 08E4                    		or	ah, ah
 12019 00000E70 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 12020 00000E72 F6E1                    		mul	cl
 12021 00000E74 08E4                    		or	ah, ah
 12022 00000E76 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 12023 00000E78 89C1                    		mov	cx, ax
 12024                                  		; 10/12/2022
 12025 00000E7A 26F6452301              		test	byte [es:di+35], 1
 12026                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12027                                  					; fnon_removable
 12028 00000E7F 740C                    		jz	short NormVerifyTrack
 12029                                  					; Multitrack operation = on?
 12030                                  		; 10/12/2022
 12031                                  		; 19/10/2022
 12032 00000E81 F606[2605]80            		test	byte [multrk_flag], 80h
 12033                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12034                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 12035 00000E86 7405                    		jz	short NormVerifyTrack
 12036 00000E88 C606[2D05]01            		mov	byte [multitrk_format_flag], 1
 12037                                  NormVerifyTrack:			
 12038 00000E8D 31C0                    		xor	ax, ax		; 1st sector
 12039 00000E8F 31DB                    		xor	bx, bx
 12040 00000E91 891E[2E05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 12041 00000E95 E83F00                  		call	TrackIo
 12042 00000E98 C606[2D05]00            		mov	byte [multitrk_format_flag], 0
 12043 00000E9D C3                      		retn
 12044                                  ; ---------------------------------------------------------------------------
 12045                                  
 12046                                  VerifyTrack_Err:			
 12047 00000E9E B401                    		mov	ah, 1
 12048 00000EA0 E90DFD                  		jmp	maperror
 12049                                  ; ---------------------------------------------------------------------------
 12050                                  
 12051                                  ; 16/10/2022
 12052                                  
 12053                                  ; ==========================================================================
 12054                                  ;
 12055                                  ; ReadTrack:
 12056                                  ;
 12057                                  ; input: ES:di points to bds for drive
 12058                                  ;
 12059                                  ; ==========================================================================
 12060                                  
 12061                                  ReadTrack:				
 12062 00000EA3 C606[2001]02            		mov	byte [rflag], 2	; romread
 12063 00000EA8 EB05                    		jmp	short ReadWriteTrack
 12064                                  ; ---------------------------------------------------------------------------
 12065                                  
 12066                                  WriteTrack:
 12067                                  
 12068                                  ; ==========================================================================
 12069                                  ;
 12070                                  ; WriteTrack:
 12071                                  ;
 12072                                  ; input: ES:di points to bds for drive
 12073                                  ;
 12074                                  ; ==========================================================================
 12075                                  				
 12076 00000EAA C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12077                                  
 12078                                  		; Fall into ReadWriteTrack
 12079                                  
 12080                                  ; ==========================================================================
 12081                                  ;
 12082                                  ; readWriteTrack:
 12083                                  ;
 12084                                  ; input:
 12085                                  ;    ES:di points to bds for drive
 12086                                  ;    rFlag - 2 for read,3 for write
 12087                                  ;
 12088                                  ; ==========================================================================
 12089                                  
 12090                                  ReadWriteTrack:	
 12091                                  		; save bds pointer segment so we can use it to access
 12092                                  		; our packet. Notice that this is not the standard register
 12093                                  		; assignment for accessing packets
 12094                                  		
 12095                                  		; 19/10/2022	
 12096 00000EAF 06                      		push	es
 12097 00000EB0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 12098 00000EB4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12099 00000EB8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 12100 00000EBC A3[3301]                		mov	[curtrk], ax
 12101 00000EBF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 12102 00000EC3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 12103 00000EC6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 12104 00000ECA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 12105 00000ECE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 12106                                  					; Get transfer address
 12107                                  
 12108                                  		; we just trashed our packet address, but we no longer care
 12109                                  
 12110 00000ED2 8C06[2E05]              		mov	[xfer_seg], es	; Pass transfer	segment
 12111 00000ED6 07                      		pop	es
 12112                                  
 12113                                  		; Fall into TrackIo
 12114                                  
 12115                                  ; =============== S U B	R O U T	I N E =======================================
 12116                                  
 12117                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12118                                  
 12119                                  ; ==========================================================================
 12120                                  ;
 12121                                  ; TrackIo:
 12122                                  ;    performs track read/write/verify
 12123                                  ;
 12124                                  ;   input:
 12125                                  ;      rFlag	- 2 = read
 12126                                  ;		  3 = write
 12127                                  ;		  4 = verify
 12128                                  ;      AX	- Index into track table of first sector to io
 12129                                  ;      CX	- Number of sectors to io
 12130                                  ;      Xfer_Seg:BX - Transfer address
 12131                                  ;      ES:DI	- Pointer to bds
 12132                                  ;      CurTrk	- Current cylinder
 12133                                  ;      CurHd	- Current head
 12134                                  ;
 12135                                  ; ==========================================================================
 12136                                  
 12137                                  ; 16/03/2019 - Retro DOS v4.0
 12138                                  		
 12139                                  		; 19/10/2022
 12140                                  TrackIo:	
 12141                                  					; Procedure `disk' will pop stack to
 12142 00000ED7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 12143 00000EDB E84EF9                  		call	checksingle	; Ensure correct disk is in drv
 12144 00000EDE 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12145                                  					; See if we have already set	disk
 12146 00000EE3 7407                    		jz	short Dptalreadyset ; base table
 12147 00000EE5 50                      		push	ax		; set up tables	and variables for i/o
 12148 00000EE6 51                      		push	cx
 12149 00000EE7 E8CEFA                  		call	iosetup
 12150 00000EEA 59                      		pop	cx
 12151 00000EEB 58                      		pop	ax
 12152                                  Dptalreadyset:				; Point si at the table entry of the			
 12153 00000EEC BE[3205]                		mov	si, tracktable	; first sector to be io'd
 12154 00000EEF D1E0                    		shl	ax, 1
 12155 00000EF1 D1E0                    		shl	ax, 1
 12156 00000EF3 01C6                    		add	si, ax
 12157                                  
 12158                                  		; WE WANT:
 12159                                  		; CX to	be the number of times we have to loop
 12160                                  		; DX to	be the number of sectors we read on each iteration
 12161                                  		
 12162 00000EF5 BA0100                  		mov	dx, 1
 12163                                  		; 12/12/2022
 12164 00000EF8 26F6452308              		test	byte [es:di+23h], 8
 12165                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 12166                                  					; good_tracklayout
 12167 00000EFD 7402                    		jz	short ionextsector
 12168                                  		
 12169 00000EFF 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 12170                                  ionextsector:				
 12171 00000F01 51                      		push	cx
 12172 00000F02 52                      		push	dx
 12173 00000F03 46                      		inc	si
 12174 00000F04 46                      		inc	si		; Skip over the	cylinder and head in
 12175                                  					; the track table
 12176 00000F05 AC                      		lodsb			; Get sector ID	from track table
 12177 00000F06 A2[3101]                		mov	[cursec], al
 12178                                  
 12179                                  		; assumptions for a fixed disk multi-track disk	i/o
 12180                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 12181                                  		;     only CL is valid.
 12182                                  		; 2). Sector size should be set	to 512 bytes.
 12183                                  		; 3). Good track layout
 12184                                  		
 12185                                  		; 12/12/2022
 12186 00000F09 26F6452301              		test	byte [es:di+23h], 1
 12187                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12188                                  					; fnon_removable ; Fixed disk?
 12189 00000F0E 7414                    		jz	short IoRemovable ; No
 12190                                  		; 12/12/2022
 12191 00000F10 F606[2605]80            		test	byte [multrk_flag], 80h
 12192                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12193                                  						; Allow multi-track operation?
 12194 00000F15 740D                    		jz	short IoRemovable ; No,don't do that.
 12195 00000F17 8916[2201]              		mov	[seccnt], dx
 12196 00000F1B 89D0                    		mov	ax, dx
 12197 00000F1D E81CFB                  		call	Disk
 12198 00000F20 5A                      		pop	dx
 12199 00000F21 59                      		pop	cx
 12200 00000F22 F8                      		clc
 12201 00000F23 C3                      		retn
 12202                                  ; ---------------------------------------------------------------------------
 12203                                  
 12204                                  IoRemovable:				
 12205 00000F24 AC                      		lodsb			; Get sector size index	from track
 12206                                  					; table	and save it
 12207 00000F25 50                      		push	ax
 12208 00000F26 56                      		push	si
 12209 00000F27 1E                      		push	ds		; Save Bios_Data
 12210 00000F28 50                      		push	ax
 12211 00000F29 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 12212                                  					; Fetch	EOT while ds-> Bios_Data
 12213 00000F2D C536[2D01]              		lds	si, [dpt]
 12214 00000F31 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 12215 00000F34 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 12216 00000F37 58                      		pop	ax
 12217 00000F38 1F                      		pop	ds
 12218 00000F39 88D0                    		mov	al, dl
 12219 00000F3B A3[2201]                		mov	[seccnt], ax
 12220 00000F3E E8FBFA                  		call	Disk
 12221 00000F41 5E                      		pop	si		; Advance buffer pointer by adding
 12222                                  					; sector size
 12223                                  		;pop	ax
 12224                                  		; 24/12/2023
 12225 00000F42 59                      		pop	cx
 12226                                  
 12227                                  		; 02/09/2023 (PCDOS 7.1)
 12228                                  		;call	SectorSizeIndexToSectorSize
 12229                                  		;mov	cl, al	; 24/12/2023
 12230 00000F43 B88000                  		mov	ax, 128
 12231 00000F46 D3E0                    		shl	ax, cl
 12232                                  
 12233 00000F48 01C3                    		add	bx, ax
 12234 00000F4A 5A                      		pop	dx
 12235 00000F4B 59                      		pop	cx
 12236 00000F4C E2B3                    		loop	ionextsector
 12237 00000F4E 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12238                                  		;jz	short NoNeedDone
 12239                                  		; 12/12/2022
 12240 00000F53 7404                    		je	short NoNeedDone2
 12241 00000F55 E829FA                  		call	done		; set time of last access, and reset
 12242                                  					; entries in Dpt.
 12243                                  NoNeedDone:
 12244 00000F58 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 12245                                  NoNeedDone2:
 12246 00000F59 C3                      		retn
 12247                                  
 12248                                  ; =============== S U B	R O U T	I N E =======================================
 12249                                  
 12250                                  ; ---------------------------------------------------------------------------
 12251                                  ;
 12252                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 12253                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 12254                                  ; are permissible.
 12255                                  ;
 12256                                  ; On Input   AX contains sector size in bytes
 12257                                  ; On Output  AL Contains index
 12258                                  ; All other registers preserved
 12259                                  ;
 12260                                  ; ---------------------------------------------------------------------------
 12261                                  
 12262                                  ; 02/09/2023
 12263                                  ;SectSizeToSectIndex:
 12264                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 12265                                  ;					; examine upper	byte only
 12266                                  ;		ja	short OneK
 12267                                  ;		mov	al, ah		; value	in AH is the index!
 12268                                  ;		retn
 12269                                  
 12270                                  ; ---------------------------------------------------------------------------
 12271                                  ;
 12272                                  ;OneK:
 12273                                  ;		mov	al, 3
 12274                                  ;		retn
 12275                                  
 12276                                  ; =============== S U B	R O U T	I N E =======================================
 12277                                  
 12278                                  ; 02/09/2023
 12279                                  ;SectorSizeIndexToSectorSize:
 12280                                  ;		mov	cl, al
 12281                                  ;		mov	ax, 128
 12282                                  ;		shl	ax, cl
 12283                                  ;		retn
 12284                                  
 12285                                  ; =============== S U B	R O U T	I N E =======================================
 12286                                  
 12287                                  ; 16/10/2022
 12288                                  
 12289                                  ; ---------------------------------------------------------------------------
 12290                                  ;
 12291                                  ; SetDASD
 12292                                  ;
 12293                                  ; Set up the rom for formatting.
 12294                                  ; we have to tell the rom bios what type of disk is in the drive.
 12295                                  ;
 12296                                  ; On Input   - ES:di - Points to bds
 12297                                  ;
 12298                                  ; ---------------------------------------------------------------------------
 12299                                  
 12300                                  		; 19/10/2022
 12301                                  SetDasd:	
 12302 00000F5A 803E[3006]01            		cmp	byte [had_format_error], 1 ;
 12303                                  					; See if we've previously set dasd type
 12304 00000F5F 740C                    		jz	short DoSetDasd
 12305                                  		; 10/12/2022
 12306 00000F61 26F6452380              		test	byte [es:di+23h], 80h
 12307                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 12308                                  					; set_dasd_true
 12309 00000F66 7446                    		jz	short DasdHasBeenSet
 12310                                  		; 10/12/2022
 12311 00000F68 268065237F              		and	byte [es:di+23h], 7Fh
 12312                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 12313                                  					; ~set_dasd_true
 12314                                  DoSetDasd:
 12315 00000F6D C606[3006]00            		mov	byte [had_format_error], 0 ; Reset it
 12316 00000F72 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 12317 00000F77 B004                    		mov	al, 4
 12318                                  		; 02/09/2023
 12319 00000F79 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 12320 00000F7D 80FC02                  		cmp	ah, 2
 12321                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12322                                  					; DEV_3INCH720KB
 12323 00000F80 7414                    		jz	short DoSet
 12324                                  		; 24/12/2023
 12325 00000F82 B001                    		mov	al, 1
 12326                                  		;cmp	ah, 1
 12327 00000F84 38C4                    		cmp	ah, al	; 1
 12328                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 12329                                  					; DEV_5INCH96TPI
 12330                                  		;jz	short GotBig
 12331                                  		; 24/12/2023
 12332                                  		;mov	al, 1
 12333                                  		;jmp	short DoSet
 12334                                  		; 02/09/2023
 12335 00000F86 750E                    		jnz	short DoSet
 12336                                  GotBig:
 12337                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 12338                                  		; 02/09/2023
 12339 00000F88 40                      		inc	ax  ; mov al, 2
 12340 00000F89 803E[2E06]00            		cmp	byte [mediatype], 0
 12341 00000F8E 7506                    		jnz	short DoSet
 12342                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 12343                                  		; 10/12/2022
 12344                                  		;inc	al  ; al = 3
 12345                                  		; 18/12/2022
 12346 00000F90 40                      		inc	ax  ; al = 3
 12347 00000F91 C606[3B01]54            		mov	byte [gap_patch], 54h
 12348                                  DoSet:
 12349 00000F96 1E                      		push	ds
 12350 00000F97 56                      		push	si
 12351                                  
 12352                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 12353                                  		; 02/09/2023
 12354 00000F98 31F6                    		xor	si, si
 12355 00000F9A 8EDE                    		mov	ds, si	; 0
 12356                                  
 12357 00000F9C C5367800                		lds	si, [DSKADR]
 12358                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 12359                                  		;;lds	si, ds:78h
 12360                                  
 12361 00000FA0 C644090F                		mov	byte [si+9], 0Fh ;
 12362                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 12363 00000FA4 5E                      		pop	si
 12364 00000FA5 1F                      		pop	ds
 12365 00000FA6 B417                    		mov	ah, 17h
 12366 00000FA8 268A5504                		mov	dl, [es:di+4]
 12367 00000FAC CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 12368                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 12369                                  DasdHasBeenSet:
 12370 00000FAE 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 12371 00000FB2 8826[3701]              		mov	[formt_eot], ah
 12372 00000FB6 C3                      		retn
 12373                                  
 12374                                  ; =============== S U B	R O U T	I N E =======================================
 12375                                  
 12376                                  ; 16/10/2022
 12377                                  
 12378                                  ; ---------------------------------------------------------------------------
 12379                                  ;
 12380                                  ; Set Media Type for Format
 12381                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 12382                                  ; BPB area in the BDS can be handled by the rom.
 12383                                  ; On Input, ES:DI -> current BDS.
 12384                                  ; The status of the operation is returned in AL
 12385                                  ;
 12386                                  ;	- 0 - if the support is available,and the combination is valid.
 12387                                  ;	- 1 - no rom support
 12388                                  ;	- 2 - illegal combination
 12389                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 12390                                  ;
 12391                                  ; Flags also may be altered. All other registers preserved.
 12392                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 12393                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12394                                  ; to the one returned. the original pointer to the disk base table is stored
 12395                                  ; in TempDpt, until it is restored.
 12396                                  ;
 12397                                  ; ---------------------------------------------------------------------------
 12398                                  
 12399                                  		; 19/10/2022
 12400                                  SetMediaForFormat:	
 12401 00000FB7 51                      		push	cx
 12402 00000FB8 52                      		push	dx
 12403                                  
 12404                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12405                                  		; but we need to call int 13h, ah=18h again.
 12406                                  
 12407 00000FB9 803E[3006]01            		cmp	byte [had_format_error], 1
 12408 00000FBE 7425                    		jz	short SkipSaveDskAdr
 12409 00000FC0 30C0                    		xor	al, al		; If already done return 0
 12410 00000FC2 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12411 00000FC7 7502                    		jnz	short DoSetMediaForFormat
 12412 00000FC9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 12413                                  ; ---------------------------------------------------------------------------
 12414                                  
 12415                                  DoSetMediaForFormat:
 12416 00000FCB 06                      		push	es
 12417 00000FCC 56                      		push	si
 12418                                  		
 12419                                  		; 02/09/2023
 12420                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 12421 00000FCD 31F6                    		xor	si, si ; 0
 12422 00000FCF 8EC6                    		mov	es, si
 12423                                  
 12424 00000FD1 26C4367800              		les	si, [es:DSKADR]
 12425                                  		;les	si, es:78h	; [es:DSKADR]
 12426                                  					; Get pointer to disk base table
 12427 00000FD6 8936[2D01]              		mov	[dpt], si
 12428 00000FDA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12429                                  
 12430                                  		; Initialize the head settle time to 0Fh. See the offsets
 12431                                  		; given in dskprm.inc.
 12432                                  
 12433 00000FDE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12434 00000FE3 5E                      		pop	si
 12435 00000FE4 07                      		pop	es
 12436                                  SkipSaveDskAdr:				
 12437 00000FE5 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12438 00000FE9 49                      		dec	cx
 12439 00000FEA 80E503                  		and	ch, 3
 12440 00000FED D0CD                    		ror	ch, 1
 12441 00000FEF D0CD                    		ror	ch, 1
 12442 00000FF1 86E9                    		xchg	ch, cl
 12443 00000FF3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12444 00000FF7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12445 00000FFB 06                      		push	es
 12446 00000FFC 1E                      		push	ds
 12447 00000FFD 56                      		push	si
 12448 00000FFE 57                      		push	di
 12449 00000FFF B418                    		mov	ah, 18h
 12450 00001001 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12451                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12452 00001003 7231                    		jb	short FormaStatErr
 12453 00001005 803E[3006]01            		cmp	byte [had_format_error], 1
 12454 0000100A 7423                    		jz	short skip_disk_base_setting
 12455 0000100C 06                      		push	es		; Save segment returned	by the rom
 12456                                  
 12457                                  		; 02/09/2023
 12458                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 12459 0000100D 31F6                    		xor	si, si
 12460 0000100F 8EC6                    		mov	es, si ; 0
 12461 00001011 06                      		push	es ; * ; 02/09/2023
 12462                                  
 12463 00001012 26C4367800              		les	si, [es:DSKADR]
 12464                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12465                                  					; Get current disk base	table
 12466 00001017 8936[3106]              		mov	[tempdpt], si
 12467 0000101B 8C06[3306]              		mov	[tempdpt+2], es ; Save it
 12468                                  
 12469                                  		; 02/09/2023
 12470                                  		;;mov	es, [zeroseg]
 12471                                  		;xor	si, si ; 0
 12472                                  		;mov	es, si
 12473 0000101F 07                      		pop	es ; * ; 02/09/2023
 12474                                  
 12475                                  		;mov	es:78h,	di
 12476 00001020 26893E7800              		mov	[es:DSKADR], di
 12477                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12478 00001025 268F067A00              		pop	word [es:DSKADR+2]
 12479 0000102A C606[2F06]01            		mov	byte [media_set_for_format], 1
 12480                                  skip_disk_base_setting:			
 12481 0000102F 30C0                    		xor	al, al		; Legal	combination + rom support code
 12482                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12483 00001031 A2[3006]                		mov	[had_format_error], al
 12484 00001034 EB0E                    		jmp	short PopStatRet
 12485                                  ; ---------------------------------------------------------------------------
 12486                                  
 12487                                  FormaStatErr:
 12488                                  		; 10/12/2022
 12489 00001036 B003                    		mov	al, 3
 12490                                  				
 12491 00001038 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12492                                  					; Illegal combination =	0Ch
 12493 0000103B 7406                    		jz	short FormatStatIllegalComb
 12494 0000103D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12495 00001040 7402                    		jz	short FormatStatTimeOut
 12496                                  		; 10/12/2022
 12497                                  		;dec	al
 12498                                  		; 18/12/2022
 12499 00001042 48                      		dec	ax
 12500                                  		; al = 2
 12501                                  		;mov	al, 1		; Function not supported.
 12502                                  		;jmp	short PopStatRet
 12503                                  ; ---------------------------------------------------------------------------
 12504                                  
 12505                                  FormatStatIllegalComb:
 12506                                  		; 10/12/2022
 12507                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12508                                  		; 18/12/2022
 12509 00001043 48                      		dec	ax
 12510                                  		; al = 2				
 12511                                  		;mov	al, 2		; Function supported, but
 12512                                  					; Illegal sect/trk,trk combination.
 12513                                  		; 10/12/2022
 12514                                  		;jmp	short PopStatRet
 12515                                  ; ---------------------------------------------------------------------------
 12516                                  
 12517                                  FormatStatTimeOut:			
 12518                                  		; 10/12/2022
 12519                                  		; al = 3
 12520                                  		;mov	al, 3		; Function supported, but
 12521                                  					; Media	not present.
 12522                                  PopStatRet:				
 12523 00001044 5F                      		pop	di
 12524 00001045 5E                      		pop	si
 12525 00001046 1F                      		pop	ds
 12526 00001047 07                      		pop	es
 12527                                  SetMediaRet:				
 12528 00001048 5A                      		pop	dx
 12529 00001049 59                      		pop	cx
 12530 0000104A C3                      		retn
 12531                                  
 12532                                  ; =============== S U B	R O U T	I N E =======================================
 12533                                  
 12534                                  ; 16/10/2022
 12535                                  
 12536                                  ; ---------------------------------------------------------------------------
 12537                                  ;
 12538                                  ; RESET THE DRIVE
 12539                                  ;
 12540                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12541                                  ; slow head settle time for the next operation. this is because the reset
 12542                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12543                                  ; time around - there is a problem with 3.5" drives in that the head does
 12544                                  ; not settle down in time,even for read operations!!
 12545                                  ;
 12546                                  ; ---------------------------------------------------------------------------
 12547                                  
 12548                                  ResetDisk:
 12549 0000104B 50                      		push	ax
 12550                                  
 12551                                  		; 02/09/2023
 12552 0000104C B80100                  		mov	ax, 1 ; PCDOS 7.1
 12553 0000104F 3806[2F06]              		cmp	[media_set_for_format], al ; 1
 12554                                  		;cmp	byte [media_set_for_format], 1
 12555                                  					; Reset while formatting?
 12556 00001053 7503                    		jnz	short ResetDisk_cont
 12557                                  					; Then verify operation in "fmt & vrfy"
 12558                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 12559 00001055 A2[3006]                		mov	[had_format_error], al ; 1
 12560                                  ResetDisk_cont:
 12561                                  		; 02/09/2023 (ah=0)
 12562                                  		;xor	ah, ah		; So signals that we had a format error
 12563 00001058 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12564                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12565 0000105A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12566                                  					; Zap up the speed
 12567 0000105F 58                      		pop	ax
 12568 00001060 C3                      		retn
 12569                                  
 12570                                  ; =============== S U B	R O U T	I N E =======================================
 12571                                  
 12572                                  ; 16/10/2022
 12573                                  
 12574                                  ; ---------------------------------------------------------------------------
 12575                                  ;
 12576                                  ; This routine sets up the drive parameter table with the values needed for
 12577                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12578                                  ;
 12579                                  ; on entry  -	ES:DI - points to bds for the drive
 12580                                  ;		Xfer_Seg:BX - points to trkbuf
 12581                                  ;		AL    - number of sectors
 12582                                  ;		AH    - int 13 function code
 12583                                  ;		CL    - sector number for verify
 12584                                  ;		DS    - Bios_Data
 12585                                  ;
 12586                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12587                                  ;		AX and flags are the results of the int 13
 12588                                  ;
 12589                                  ; ---------------------------------------------------------------------------
 12590                                  
 12591                                  		; 24/12/2023
 12592                                  		; 19/10/2022
 12593                                  ToRom:	
 12594 00001061 53                      		push	bx
 12595 00001062 56                      		push	si
 12596                                  
 12597                                  		; Compaq bug fix - check whether we are using new ROM
 12598                                  		; functionality to set up format, not merely if it exists.
 12599                                  		; This was formerly a check against [new_rom]
 12600                                  
 12601 00001063 F606[2F06]01            		test	byte [media_set_for_format], 1
 12602 00001068 7534                    		jnz	short GotValidDpt
 12603 0000106A 50                      		push	ax
 12604 0000106B 06                      		push	es		; Save bds segment
 12605 0000106C 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12606                                  					; ffSmall ; is it a 3.5" drive?
 12607                                  		; 24/12/2023
 12608                                  		;pushf	; not necessary	; (Save	the cmp	result)
 12609                                  		
 12610 00001071 8E06[1A00]              		mov	es, [zeroseg]
 12611                                  		;les	si, es:78h	; Get pointer to disk base table
 12612 00001075 26C4367800              		les	si, [es:DSKADR]
 12613                                  		;mov	word ptr ds:dpt, si
 12614                                  		;mov	word ptr ds:dpt+2, es ;	Save pointer to table
 12615 0000107A 8936[2D01]              		mov	[dpt], si
 12616 0000107E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12617                                  		
 12618 00001082 A0[3701]                		mov	al, [formt_eot]
 12619 00001085 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12620 00001089 A0[3B01]                		mov	al, [gap_patch]
 12621 0000108C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12622                                  					; Important for	format
 12623 00001090 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12624                                  					; Assume we are	doing a	seek operation
 12625                                  					; Setup	motor start correctly for 3.5" drives
 12626                                  		; 24/12/2023
 12627                                  		;popf			; Get result of	earlier	cmp
 12628 00001095 7505                    		jnz	short MotorStrtOK
 12629 00001097 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12630                                  MotorStrtOK:				
 12631 0000109C 07                      		pop	es		; Restore bds segment
 12632 0000109D 58                      		pop	ax
 12633                                  GotValidDpt:				
 12634 0000109E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12635 000010A2 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12636 000010A4 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12637 000010A8 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12638 000010AC 06                      		push	es		; Save bds segment
 12639 000010AD 8E06[2E05]              		mov	es, [xfer_seg]
 12640 000010B1 CD13                    		int	13h		; DISK -
 12641 000010B3 07                      		pop	es		; Restore bds segment
 12642 000010B4 5E                      		pop	si
 12643 000010B5 5B                      		pop	bx
 12644 000010B6 C3                      		retn
 12645                                  
 12646                                  ; ---------------------------------------------------------------------------
 12647                                  
 12648                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12649                                  
 12650                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12651                                  
 12652                                  ; ==========================================================================
 12653                                  ;
 12654                                  ; get the owner of the physical drive represented by the logical drive in al.
 12655                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12656                                  ; if this is not the case, the system may hang, just following the linked list.
 12657                                  ;
 12658                                  ; ==========================================================================
 12659                                  
 12660                                  		; 19/10/2022
 12661                                  ioctl_getown:
 12662 000010B7 E80CF4                  		call	SetDrive
 12663 000010BA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12664                                  					; Get physical drive number
 12665 000010BE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12666                                  ownloop:				
 12667 000010C2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12668 000010C6 7507                    		jnz	short getnextBDS
 12669                                  		; 10/12/2022
 12670 000010C8 26F6452320              		test	byte [es:di+23h], 20h
 12671                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12672                                  					; fi_own_physical
 12673 000010CD 7514                    		jnz	short exitown
 12674                                  getnextBDS:				
 12675 000010CF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12676 000010D2 EBEE                    		jmp	short ownloop
 12677                                  ; ---------------------------------------------------------------------------
 12678                                  
 12679                                  ; ==========================================================================
 12680                                  ;
 12681                                  ; set the ownership of the physical drive represented by the logical drive
 12682                                  ; in al to al.
 12683                                  ;
 12684                                  ; ==========================================================================
 12685                                  
 12686                                  		; 19/10/2022
 12687                                  ioctl_setown:
 12688 000010D4 E8EFF3                  		call	SetDrive
 12689 000010D7 C606[7A00]01            		mov	byte [fsetowner], 1
 12690                                  					; set flag for CheckSingle to look at.
 12691 000010DC E84DF7                  		call	checksingle
 12692                                  		; 02/09/2023
 12693 000010DF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12694                                  		;mov	byte [fsetowner], 0
 12695                                  					; set ownership	of drive reset flag
 12696                                  		; Fall into ExitOwn
 12697                                  
 12698                                  ; ==========================================================================
 12699                                  ;
 12700                                  ; if there is only one logical drive assigned to this physical drive, return
 12701                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12702                                  ;
 12703                                  ; ==========================================================================
 12704                                  
 12705                                  exitown:				
 12706 000010E3 30C9                    		xor	cl, cl
 12707                                  		; 12/12/2022
 12708 000010E5 26F6452310              		test	byte [es:di+23h], 10h
 12709                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12710                                  					; fi_am_mult
 12711 000010EA 7406                    		jz	short exitnomult
 12712 000010EC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12713                                  					; Get logical drive number
 12714                                  					; Get it 1-based
 12715 000010F0 FEC1                    		inc	cl
 12716                                  exitnomult:				
 12717 000010F2 C51E[1200]              		lds	bx, [ptrsav]
 12718 000010F6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12719                                  					; Exit normal termination
 12720                                  		; 12/12/2022
 12721                                  		; cf=0
 12722                                  		;clc
 12723 000010F9 C3                      		retn
 12724                                  
 12725                                  ; =============== S U B	R O U T	I N E =======================================
 12726                                  
 12727                                  ; 16/10/2022
 12728                                  
 12729                                  ; ---------------------------------------------------------------------------
 12730                                  ;
 12731                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12732                                  ; only if the first byte of TempDpt is not -1.
 12733                                  ; all registers (including flags) are preserved.
 12734                                  ;
 12735                                  ; ---------------------------------------------------------------------------
 12736                                  
 12737                                  		; 24/12/2023
 12738                                  		; 19/10/2022
 12739                                  RestoreOldDpt:
 12740                                  		; if we have already restored the disk base table earlier,
 12741                                  		; do not do it again.
 12742                                  
 12743 000010FA 50                      		push	ax
 12744 000010FB 30C0                    		xor	al, al
 12745 000010FD A2[3006]                		mov	[had_format_error], al	; Reset flag and 
 12746 00001100 8606[2F06]              		xchg	al, [media_set_for_format] ; get current flag setting
 12747 00001104 08C0                    		or	al, al
 12748 00001106 7418                    		jz	short DontRestore
 12749 00001108 56                      		push	si
 12750 00001109 1E                      		push	ds
 12751 0000110A 06                      		push	es
 12752 0000110B C536[3106]              		lds	si, [tempdpt]
 12753                                  
 12754                                  		; 17/10/2022
 12755                                  		;mov	es, [cs:BIOSDATAWORD]
 12756                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12757                                  		;mov	es, [es:zeroseg]
 12758                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 12759                                  
 12760                                  		; 24/12/2023
 12761 0000110F 31C0                    		xor	ax, ax
 12762 00001111 8EC0                    		mov	es, ax ; 0
 12763                                  
 12764                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 12765 00001113 2689367800              		mov	[es:DSKADR], si
 12766                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12767 00001118 268C1E7A00              		mov	[es:DSKADR+2], ds
 12768 0000111D 07                      		pop	es
 12769 0000111E 1F                      		pop	ds
 12770 0000111F 5E                      		pop	si
 12771                                  DontRestore:
 12772 00001120 58                      		pop	ax
 12773                                  		; 12/12/2022
 12774                                  		; cf=0
 12775                                  		;clc			;  Clear carry
 12776 00001121 C3                      		retn
 12777                                  
 12778                                  ; ---------------------------------------------------------------------------
 12779                                  
 12780                                  ; 16/10/2022
 12781                                  
 12782                                  ; ==========================================================================
 12783                                  ;	get media id
 12784                                  ; ==========================================================================
 12785                                  ;
 12786                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12787                                  ;	    the media that has the extended boot record.
 12788                                  ;	    for the conventional media,this routine will return "unknown
 12789                                  ;	    media type" error to dos.
 12790                                  ;
 12791                                  ; INPUT :   ES:di -> bds table for this drive.
 12792                                  ;
 12793                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12794                                  ;	    if carry set,then al contains the device driver error number
 12795                                  ;	    that will be returned to dos.
 12796                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12797                                  ;
 12798                                  ; SUBROUTINES TO BE CALLED:
 12799                                  ;	BootIo:NEAR
 12800                                  ;
 12801                                  ; LOGIC:
 12802                                  ;	to recognize the extended boot record,this logic will actually
 12803                                  ;	access the boot sector even if it is a hard disk.
 12804                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12805                                  ;	field of bpb and the extended boot signature.
 12806                                  ;
 12807                                  ; {
 12808                                  ;	get logical drive number from bds table;
 12809                                  ;	rFlag = read operation;
 12810                                  ;	BootIo;		 /*get the media boot record into the buffer
 12811                                  ;	if (no error) then
 12812                                  ;	     if (extended boot record) then
 12813                                  ;		{ set volume label,volume serial number and system id
 12814                                  ;		  of the request packet to those of the boot record;
 12815                                  ;		};
 12816                                  ;	     else		  /*not an extended bpb */
 12817                                  ;		{ set register al to "unknown media.." error code;
 12818                                  ;		  set carry bit;
 12819                                  ;		};
 12820                                  ;	else
 12821                                  ;	     ret;	/*already error code is set in the register al
 12822                                  ;
 12823                                  ; ==========================================================================
 12824                                  
 12825                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12826                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12827                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12828                                  
 12829                                  		; 24/12/2023
 12830                                  		; 19/10/2022
 12831                                  GetMediaId:
 12832 00001122 E89900                  		call	ChangeLineChk
 12833 00001125 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12834 00001129 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12835 0000112E E87500                  		call	BootIo		; Read boot sector into	DiskSector
 12836 00001131 7224                    		jb	short IOCtl_If1
 12837                                  					; Valid? (0F0h-0FFh?)
 12838 00001133 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12839                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12840                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12841                                  		; 24/12/2023
 12842 00001138 721B                    		jb	short IOCtl_If7	
 12843                                  
 12844                                  		; 10/12/2022
 12845 0000113A BE[7401]                		mov	si, disksector+26h
 12846 0000113D 803C29                  		cmp	byte [si], 29h
 12847                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12848                                  					; EXT_BOOT_SIGNATURE
 12849 00001140 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12850 00001142 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12851 00001146 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12852                                  		; 10/12/2022
 12853 0000114A 46                      		inc	si
 12854                                  		; si = disksector+27h 
 12855                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12856 0000114B 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12857                                  IOCtl_If4:		; 24/12/2023
 12858 0000114E B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12859                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12860                                  					; +size_of_EXT_SYSTEM_ID
 12861 00001151 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12862                                  	
 12863                                  		; 10/12/2022
 12864                                  		; cf = 0
 12865                                  		;clc
 12866                                  
 12867 00001153 C3                      		retn
 12868                                  ; ---------------------------------------------------------------------------
 12869                                  
 12870                                  		; 24/12/2023
 12871                                  IOCtl_If2:
 12872 00001154 F9                      		stc	
 12873                                  IOCtl_If7:
 12874 00001155 B007                    		mov	al, 7		; error_unknown_media
 12875                                  		;stc
 12876                                  IOCtl_If6:
 12877                                  IOCtl_If1:
 12878 00001157 C3                      		retn
 12879                                  ; ---------------------------------------------------------------------------
 12880                                  
 12881                                  ; 16/10/2022
 12882                                  
 12883                                  ; ==========================================================================
 12884                                  ;  set media id
 12885                                  ; ==========================================================================
 12886                                  
 12887                                  ; function: set the volume label, the system id and the serial number of
 12888                                  ;	    the media that has the extended boot record.
 12889                                  ;	    for the conventional media, this routine will return "unknown
 12890                                  ;	    media.." error to dos.
 12891                                  ;	    this routine will also set the corresponding informations in
 12892                                  ;	    the bds table.
 12893                                  ;
 12894                                  ; input :   ES:di -> bds table for this drive.
 12895                                  ;
 12896                                  ; output:   the extended boot record in the media will be set according to
 12897                                  ;	    the request packet.
 12898                                  ;	    if carry set, then al contains the device driver error number
 12899                                  ;	    that will be returned to dos.
 12900                                  ;
 12901                                  ; subroutines to be called:
 12902                                  ;	BootIo:NEAR
 12903                                  ;
 12904                                  ; logic:
 12905                                  ;
 12906                                  ; {
 12907                                  ;	get drive_number from bds;
 12908                                  ;	rFlag = "read operation";
 12909                                  ;	BootIo;
 12910                                  ;	if (no error) then
 12911                                  ;	     if (extended boot record) then
 12912                                  ;		{ set volume label,volume serial number and system id
 12913                                  ;		  of the boot record to those of the request packet;
 12914                                  ;		  rFlag = "write operation";
 12915                                  ;		  get drive number from bds;
 12916                                  ;		  BootIo;	  /*write it back*/
 12917                                  ;		};
 12918                                  ;	     else		  /*not an extended bpb */
 12919                                  ;		{ set register al to "unknown media.." error code;
 12920                                  ;		  set carry bit;
 12921                                  ;		  ret;	 /*return back to caller */
 12922                                  ;		};
 12923                                  ;	else
 12924                                  ;	     ret;		 /*already error code is set */
 12925                                  ;
 12926                                  ; ==========================================================================
 12927                                  
 12928                                  		; 24/12/2023
 12929                                  		; 19/10/2022
 12930                                  SetMediaId:
 12931 00001158 E86300                  		call	ChangeLineChk
 12932 0000115B 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12933                                  					; Logical drive	number
 12934 0000115F 88C2                    		mov	dl, al
 12935 00001161 C606[2001]02            		mov	byte [rflag], 2	; romread
 12936 00001166 52                      		push	dx
 12937 00001167 E83C00                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12938 0000116A 5A                      		pop	dx
 12939 0000116B 72EA                    		jb	short IOCtl_If6
 12940                                  					; Valid? (0F0h-0FFh?)
 12941 0000116D 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12942                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12943 00001172 72E1                    		jb	short IOCtl_If7	; Brif not
 12944                                  		
 12945 00001174 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12946                                  					; EXT_BOOT_SIGNATURE
 12947                                  		;jnz	short IOCtl_If7	; not extended boot record
 12948                                  		; 24/12/2023
 12949 00001179 75D9                    		jnz	short IOCtl_If2
 12950                                  
 12951 0000117B 06                      		push	es		; Save BDS pointer
 12952 0000117C 57                      		push	di
 12953 0000117D 1E                      		push	ds		; Point	ES To boot record
 12954 0000117E 07                      		pop	es
 12955 0000117F BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12956 00001182 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12957 00001186 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12958 00001189 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12959                                  
 12960                                  		; 24/12/2023
 12961                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12962                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 12963                                  		;			; +size_of_EXT_SYSTEM_ID
 12964                                  		;rep movsb
 12965 0000118C E8BFFF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 12966                                  
 12967 0000118F 06                      		push	es		; point	ds back	to Bios_Data
 12968 00001190 1F                      		pop	ds
 12969 00001191 5F                      		pop	di		; restore bds pointer
 12970 00001192 07                      		pop	es
 12971 00001193 E892F5                  		call	mov_media_ids	; update the bds media id info.
 12972 00001196 88D0                    		mov	al, dl
 12973 00001198 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12974 0000119D E80600                  		call	BootIo		; write	it back.
 12975 000011A0 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12976                                  					; make sure chk_media check the driver
 12977                                  					; return with error code from BootIo
 12978 000011A5 C3                      		retn
 12979                                  ; ---------------------------------------------------------------------------
 12980                                  
 12981                                  		; 24/12/2023
 12982                                  ;IOCtl_If7:
 12983                                  ;		mov	al, 7		; error_unknown_media
 12984                                  ;		stc
 12985                                  ;IOCtl_If6:
 12986                                  ;		retn
 12987                                  
 12988                                  ; =============== S U B	R O U T	I N E =======================================
 12989                                  
 12990                                  ; 16/10/2022
 12991                                  
 12992                                  ; ---------------------------------------------------------------------------
 12993                                  ;	BootIo
 12994                                  ; ---------------------------------------------------------------------------
 12995                                  ;
 12996                                  ; function: read/write the boot record into boot sector.
 12997                                  ;
 12998                                  ; input :
 12999                                  ;	    al=logical drive number
 13000                                  ;	    rFlag = operation (read/write)
 13001                                  ;
 13002                                  ; output:   for read operation,the boot record of the drive specified in bds
 13003                                  ;	    be read into the DiskSector buffer.
 13004                                  ;	    for write operation,the DiskSector buffer image will be written
 13005                                  ;	    to the drive specified in bds.
 13006                                  ;	    if carry set,then al contains the device driver error number
 13007                                  ;	    that will be returned to dos.
 13008                                  ;	    AX,CX,DX register destroyed.
 13009                                  ;	    if carry set,then al will contain the error code from DiskIO.
 13010                                  ;
 13011                                  ; subroutines to be called:
 13012                                  ;	DiskIO:NEAR
 13013                                  ;
 13014                                  ; logic:
 13015                                  ;
 13016                                  ; {
 13017                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 13018                                  ;	sectorcount = 1;	 /*read 1 sector only */
 13019                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 13020                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 13021                                  ; }
 13022                                  ; ==========================================================================
 13023                                  
 13024                                  		; 19/10/2022
 13025                                  BootIo:	
 13026 000011A6 06                      		push	es
 13027 000011A7 57                      		push	di
 13028 000011A8 53                      		push	bx
 13029 000011A9 1E                      		push	ds
 13030 000011AA 07                      		pop	es		; Point ES: to Bios_Data
 13031                                  
 13032                                  		; Call DiskIO to read/write the boot sec. The parameters which
 13033                                  		; need to be initialized for this subroutine out here are
 13034                                  		; - Transfer address to Bios_Data:DiskSector
 13035                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 13036                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 13037                                  		; - Number of sectors <-- 1
 13038                                  
 13039 000011AB BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 13040 000011AE 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 13041 000011B0 8916[2405]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 13042 000011B4 B90100                  		mov	cx, 1
 13043 000011B7 E8FCF6                  		call	diskio
 13044 000011BA 5B                      		pop	bx
 13045 000011BB 5F                      		pop	di
 13046 000011BC 07                      		pop	es
 13047 000011BD C3                      		retn
 13048                                  
 13049                                  ; =============== S U B	R O U T	I N E =======================================
 13050                                  
 13051                                  ; 16/10/2022
 13052                                  
 13053                                  ; ---------------------------------------------------------------------------
 13054                                  ;	ChangeLineChk
 13055                                  ; ---------------------------------------------------------------------------
 13056                                  ;
 13057                                  ; when the user calls get/set media id call before dos establishes the media
 13058                                  ; by calling "media_chk",the change line activity of the drive is going to be
 13059                                  ; lost.	this routine will check the change line activity and will save the
 13060                                  ; history in the flags.
 13061                                  ;
 13062                                  ; FUNCTION: check the change line error activity
 13063                                  ;
 13064                                  ; INPUT :  ES:di -> bds table.
 13065                                  ;
 13066                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 13067                                  ;
 13068                                  ; SUBROUTINES TO BE CALLED:
 13069                                  ;	Set_Changed_DL
 13070                                  ;
 13071                                  ; ---------------------------------------------------------------------------
 13072                                  
 13073                                  ChangeLineChk:	
 13074 000011BE 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13075 000011C2 08D2                    		or	dl, dl		; Fixed	disk?
 13076 000011C4 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 13077                                  		; 12/12/2022
 13078 000011C6 26F6452304              		test	byte [es:di+23h], 4
 13079                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 13080                                  					; return_fake_bpb
 13081 000011CB 751A                    		jnz	short ChangeLnChkRet
 13082 000011CD 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 13083 000011D2 7513                    		jnz	short ChangeLnChkRet
 13084 000011D4 E8DD06                  		call	haschange	; This drive support change line?
 13085 000011D7 740E                    		jz	short ChangeLnChkRet ; Do nothing
 13086                                  
 13087                                  		; Execute the rom disk interrupt to check changeline activity.
 13088                                  
 13089 000011D9 B416                    		mov	ah, 16h
 13090 000011DB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13091                                  					; DL = drive to	check
 13092                                  					; Return: AH = disk change status
 13093 000011DD 7308                    		jnb	short ChangeLnChkRet
 13094 000011DF 53                      		push	bx
 13095 000011E0 BB4000                  		mov	bx, 40h		; fchanged
 13096                                  					; Update flag in BDS for this
 13097                                  					; physical drive
 13098 000011E3 E8A706                  		call	set_changed_dl
 13099 000011E6 5B                      		pop	bx
 13100                                  ChangeLnChkRet:				
 13101 000011E7 C3                      		retn
 13102                                  
 13103                                  ; ---------------------------------------------------------------------------
 13104                                  
 13105                                  ; 16/10/2022
 13106                                  
 13107                                  ; ==========================================================================
 13108                                  ;	GetAccessFlag
 13109                                  ; ==========================================================================
 13110                                  ;
 13111                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 13112                                  ;
 13113                                  ; INPUT :
 13114                                  ;	    ES:di -> bds table
 13115                                  ;
 13116                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 13117                                  ;						 = 1 if disk i/o allowed.
 13118                                  ; ==========================================================================
 13119                                  
 13120                                  		; 19/10/2022
 13121                                  GetAccessFlag:
 13122 000011E8 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 13123 000011EC C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13124                                  		;mov	al, 0		; Assume result	is unformatted
 13125                                  		; 10/12/2022
 13126 000011EF 28C0                    		sub	al, al
 13127                                  		; 10/12/2022
 13128 000011F1 26F6452402              		test	byte [es:di+36], 02h
 13129                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 13130                                  					; unformatted_media
 13131 000011F6 7501                    		jnz	short GafDone	; Done if unformatted
 13132                                  		;inc	al		; Return true for formatted
 13133                                  		; 24/12/2023
 13134 000011F8 40                      		inc	ax
 13135                                  GafDone:
 13136 000011F9 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13137 000011FC C3                      		retn
 13138                                  ; ---------------------------------------------------------------------------
 13139                                  
 13140                                  ; 16/10/2022
 13141                                  
 13142                                  ; ==========================================================================
 13143                                  ;	SetAccessFlag
 13144                                  ; ==========================================================================
 13145                                  ;
 13146                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 13147                                  ;
 13148                                  ; input :
 13149                                  ;	    ES:di -> bds table
 13150                                  ;
 13151                                  ; output:   unformtted_media bit modified according to the user request
 13152                                  ; ==========================================================================
 13153                                  
 13154                                  		; 19/10/2022
 13155                                  SetAccessFlag:				
 13156 000011FD C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 13157 00001201 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13158                                  		; 10/12/2022
 13159 00001204 26806524FD              		and	byte [es:di+36], 0FDh
 13160                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 13161                                  					; ~unformatted_media
 13162 00001209 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13163 0000120D 7505                    		jnz	short saf_Done
 13164                                  		; 10/12/2022
 13165 0000120F 26804D2402              		or	byte [es:di+36], 02h
 13166                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 13167                                  					; unformatted_media
 13168                                  saf_Done:				
 13169 00001214 C3                      		retn
 13170                                  ; ---------------------------------------------------------------------------
 13171                                  
 13172                                  ; 16/10/2022
 13173                                  
 13174                                  ; ==========================================================================
 13175                                  ; Ioctl_Support_Query
 13176                                  ; ==========================================================================
 13177                                  ;
 13178                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 13179                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 13180                                  ; device attributes specifies if this function is supported.
 13181                                  ;
 13182                                  ; ==========================================================================
 13183                                  
 13184                                  		; 19/10/2022
 13185                                  ioctl_support_query:
 13186 00001215 06                      		push	es
 13187 00001216 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 13188 0000121A 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 13189                                  					; AL ==	Major, AH == Minor
 13190 0000121E 3C08                    		cmp	al, 8		; IOC_DC
 13191                                  					; See if major code is 8
 13192 00001220 7513                    		jnz	short nosupport
 13193 00001222 0E                      		push	cs
 13194 00001223 07                      		pop	es
 13195 00001224 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 13196                                  		; 10/12/2022
 13197 00001227 BF[1A0C]                		mov	di, IOC_DC_Table
 13198                                  		;mov	di, 0C60h	; IOC_DC_Table
 13199                                  					; at 2C7h:0C60h	= 70h:31D0h
 13200 0000122A 86C4                    		xchg	al, ah		; Put minor code in AL
 13201 0000122C F2AE                    		repne scasb		; Scan for minor code in AL
 13202 0000122E 7505                    		jnz	short nosupport	; it was not found
 13203 00001230 B80001                  		mov	ax, 100h
 13204                                  		; 10/12/2022
 13205                                  		; (jump to ioctlsupexit is not required)
 13206                                  		;jmp	short $+2	; ioctlsupexit
 13207                                  					; Signal ioctl is supported
 13208                                  		;;jmp	short ioctlsupexit
 13209                                  ; ---------------------------------------------------------------------------
 13210                                  ioctlsupexit:				
 13211 00001233 07                      		pop	es
 13212                                  		; 10/12/2022
 13213                                  		; cf = 0
 13214                                  		;clc
 13215 00001234 C3                      		retn
 13216                                  ; ---------------------------------------------------------------------------
 13217                                  nosupport:				
 13218 00001235 07                      		pop	es
 13219 00001236 E99CEE                  		jmp	bc_cmderr
 13220                                  ; ---------------------------------------------------------------------------
 13221                                  
 13222                                  ; 16/10/2022
 13223                                  
 13224                                  ; ==========================================================================
 13225                                  ;	GetMediaSenseStatus
 13226                                  ; ==========================================================================
 13227                                  ;
 13228                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 13229                                  ;	    diskette drive and whether the media is the default type
 13230                                  ;	    for that drive. (default type means the max size for that
 13231                                  ;	    drive)
 13232                                  ;
 13233                                  ; INPUT :   ES:DI -> BDS table
 13234                                  ; OUTPUT:   If carry clear
 13235                                  ;	    DS:BX -> Updated IOCtlPacket
 13236                                  ;
 13237                                  ;			 Special Function at offset 0:
 13238                                  ;				0	- Media detected is not default type
 13239                                  ;				1	- Media detected is default type
 13240                                  ;
 13241                                  ;			 Device Type at offset 1:
 13242                                  ;				2       - 720K 3.5" 80 tracks
 13243                                  ;				7	- 1.44M 3.5" 80 tracks
 13244                                  ;				9	- 2.88M 3.5" 80 tracks
 13245                                  ;
 13246                                  ; Error Codes returned in AX if carry set:
 13247                                  ;
 13248                                  ; 8102 - Drive not ready	- No disk is in the drive.
 13249                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 13250                                  ;				  the media is really unkown, any error
 13251                                  ;				  other than "media not present"
 13252                                  ; 
 13253                                  ; ==========================================================================
 13254                                  
 13255                                  		; 19/10/2022
 13256                                  SenseMediaType:				
 13257 00001239 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 13258 0000123D C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13259                                  		; 10/10/2022
 13260                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 13261 00001240 31D2                    		xor	dx, dx
 13262 00001242 8917                    		mov	[bx], dx ; 0
 13263                                  		;
 13264 00001244 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13265                                  					; Get int 13h drive number from	BDS
 13266                                  		; 10/12/2022
 13267                                  		;xor	dh, dh		; DX = physical	drive number
 13268 00001248 B420                    		mov	ah, 20h		; Get Media Type function
 13269                                  					; If no	carry media type in AL
 13270 0000124A CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 13271 0000124C 7216                    		jb	short MediaSenseEr ; error code	in AH
 13272 0000124E FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 13273                                  DetermineMediaType:			
 13274 00001250 FEC8                    		dec	al
 13275 00001252 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 13276 00001254 740A                    		jz	short GotMediaType
 13277 00001256 0404                    		add	al, 4
 13278 00001258 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 13279 0000125A 7404                    		jz	short GotMediaType
 13280 0000125C 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 13281 0000125E 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 13282                                  GotMediaType:				
 13283 00001260 884701                  		mov	[bx+1],	al	; Save the return value
 13284                                  		; 10/12/2022
 13285                                  		; cf = 0
 13286                                  		;clc			; Signal success
 13287 00001263 C3                      		retn
 13288                                  ; ---------------------------------------------------------------------------
 13289                                  
 13290                                  MediaSenseEr:				
 13291 00001264 80FC32                  		cmp	ah, 32h		; See if not default media error
 13292 00001267 74E7                    		jz	short DetermineMediaType ; Not really an error
 13293 00001269 B002                    		mov	al, 2		; Now assume drive not ready
 13294 0000126B 80FC31                  		cmp	ah, 31h		; See if media was present
 13295 0000126E 7402                    		jz	short SenseErrExit ; Return drive not ready
 13296                                  UnknownMediaType:			
 13297 00001270 B007                    		mov	al, 7		; Just don't know the media type
 13298                                  SenseErrExit:				
 13299 00001272 B481                    		mov	ah, 81h		; Signal error return
 13300 00001274 F9                      		stc
 13301 00001275 C3                      		retn
 13302                                  
 13303                                  ; ---------------------------------------------------------------------------
 13304                                  		; 10/12/2022
 13305                                  		;db    0
 13306                                  ; ---------------------------------------------------------------------------
 13307                                  
 13308                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13309                                  
 13310                                  ;-----------------------------------------------------------------------------
 13311                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 13312                                  ;-----------------------------------------------------------------------------
 13313                                  ; 16/03/2019 - Retro DOS v4.0
 13314                                  
 13315                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 13316                                  ;	after booting. this allows testing and implementation of custom int_13
 13317                                  ;	handlers, without giving up ms-dos error recovery
 13318                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 13319                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 13320                                  ;	exit:	orig13	== address of new int_13 handler
 13321                                  ;		ds:dx	== old orig13 value
 13322                                  ;		es:bx	== old old13  value
 13323                                  ;
 13324                                  ; int 2f handler for external block drivers to communicate with the internal
 13325                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 13326                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 13327                                  ; dsk_entry, the entry point for all disk requests.
 13328                                  ;
 13329                                  ; on exit from this driver, we will return to the external driver
 13330                                  ; that issued this int 2f, and can then remove the flags from the stack.
 13331                                  ; this scheme allows us to have a small external device driver, and makes
 13332                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 13333                                  ; since we only need to make changes in one place (most of the time).
 13334                                  ;
 13335                                  ;   ax=800h - check for installed handler - reserved
 13336                                  ;   ax=801h - install the bds into the linked list
 13337                                  ;   ax=802h - dos request
 13338                                  ;   ax=803h - return bds table starting pointer in ds:di
 13339                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 13340                                  ;	    problem. bds table is going to be used to get head/sector
 13341                                  ;	    informations without calling generic ioctl get device parm call.)
 13342                                  
 13343                                  ;BIOSSEGMENT equ 70h
 13344                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 13345                                  
 13346                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 13347                                  
 13348                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 13349 00001276 80FC13                  		cmp	ah, 13h
 13350 00001279 7413                    		jz	short int2f_replace_int13
 13351 0000127B 80FC08                  		cmp	ah, 8
 13352 0000127E 7431                    		jz	short mine
 13353                                  
 13354                                  ; Check for WIN386 startup and return the BIOS instance data
 13355                                  
 13356 00001280 80FC16                  		cmp	ah, 16h		; MultWin386
 13357 00001283 746C                    		jz	short win386call
 13358 00001285 80FC4A                  		cmp	ah, 4Ah		; multMULT
 13359 00001288 7503                    		jnz	short i2f_handler_iret
 13360 0000128A E99700                  		jmp	handle_multmult
 13361                                  ; ---------------------------------------------------------------------------
 13362                                  
 13363                                  i2f_handler_iret:			
 13364 0000128D CF                      		iret
 13365                                  ; ---------------------------------------------------------------------------
 13366                                  
 13367                                  int2f_replace_int13:			
 13368 0000128E 50                      		push	ax	; free up a register for caller's ds
 13369 0000128F 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 13370                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 13371                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13372                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13373 00001291 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 13374                                  		; 19/10/2022
 13375                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 13376                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 13377                                  		;push	word ptr ds:Old13	; return them to caller
 13378                                  		;push	word ptr ds:Old13+2
 13379                                  		
 13380                                  		; 02/09/2023 (PCDOS 7.1)
 13381                                  		;push	word [Orig13]
 13382 00001296 FF36[B600]              		push	word [Orig13+2]
 13383                                  		;push	word [Old13]
 13384 0000129A FF36[0801]              		push	word [Old13+2]
 13385                                  
 13386                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 13387                                  		;mov	word ptr ds:Orig13+2, ax
 13388                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 13389                                  		;mov	word ptr ds:Old13+2, es
 13390                                  		
 13391                                  		;mov	[Orig13], dx
 13392                                  		; 02/09/2023
 13393 0000129E 8716[B400]              		xchg	dx, [Orig13]
 13394 000012A2 A3[B600]                		mov	[Orig13+2], ax
 13395                                  		;mov	[Old13], bx
 13396                                  		; 02/09/2023
 13397 000012A5 871E[0601]              		xchg	bx, [Old13]
 13398 000012A9 8C06[0801]              		mov	[Old13+2], es
 13399                                  
 13400 000012AD 07                      		pop	es			; es:bx := old old13 vector
 13401                                  		; 02/09/2023
 13402                                  		;pop	bx
 13403 000012AE 1F                      		pop	ds			; ds:dx := old orig13 vector
 13404                                  		;pop	dx ; 02/09/2023
 13405 000012AF 58                      		pop	ax
 13406                                  i2f_iret:
 13407 000012B0 CF                      		iret
 13408                                  ; ---------------------------------------------------------------------------
 13409                                  
 13410                                  mine:					
 13411 000012B1 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 13412 000012B3 73FB                    		jnb	short i2f_iret
 13413 000012B5 08C0                    		or	al, al			; a get installed state request?
 13414 000012B7 7503                    		jnz	short disp_func
 13415 000012B9 B0FF                    		mov	al, 0FFh
 13416                                  		;jmp	short i2f_iret
 13417                                  		; 02/09/2023
 13418 000012BB CF                      		iret
 13419                                  ; ---------------------------------------------------------------------------
 13420                                  
 13421                                  disp_func:				
 13422 000012BC 3C01                    		cmp	al, 1			; request for installing bds?
 13423 000012BE 7418                    		jz	short do_subfun_01
 13424 000012C0 3C03                    		cmp	al, 3			; get bds vector?
 13425 000012C2 7423                    		jz	short do_get_bds_vector
 13426                                  
 13427                                  ; set up pointer to request packet
 13428                                  
 13429 000012C4 1E                      		push	ds
 13430 000012C5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 13431                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13432                                  					; = [0070h:25A0h] = [02C7h:0030h]
 13433                                  		; 19/10/2022
 13434                                  		;mov	word ptr ds:ptrsav, bx
 13435                                  		;mov	word ptr ds:ptrsav+2, es
 13436 000012CA 891E[1200]              		mov	[ptrsav], bx
 13437 000012CE 8C06[1400]              		mov	[ptrsav+2], es
 13438 000012D2 1F                      		pop	ds
 13439                                  		;jmp	far ptr	i2f_dskentry
 13440                                  		; 17/10/2022
 13441                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 13442 000012D3 EA[8D08]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 13443                                  					; NOTE: jump to a FAR function, not an
 13444                                  					;  IRET type function. Callers of
 13445                                  					;  this int2f subfunction will have
 13446                                  					;  to be careful to do a popf
 13447                                  
 13448                                  ; ---------------------------------------------------------------------------
 13449                                  
 13450                                  do_subfun_01:
 13451 000012D8 06                      		push	es
 13452 000012D9 1E                      		push	ds
 13453 000012DA 1E                      		push	ds
 13454 000012DB 07                      		pop	es
 13455                                  		; 17/10/2022
 13456 000012DC 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13457                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13458                                  					; point	ds: -> Bios_Data
 13459 000012E1 E8BC03                  		call	install_bds
 13460 000012E4 1F                      		pop	ds
 13461 000012E5 07                      		pop	es
 13462                                  		;jmp	short i2f_iret
 13463                                  		; 02/09/2023
 13464 000012E6 CF                      		iret
 13465                                  ; ---------------------------------------------------------------------------
 13466                                  
 13467                                  do_get_bds_vector:
 13468                                  		; 17/10/2022
 13469 000012E7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13470                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13471 000012EC C53E[1901]              		lds	di, [start_bds]
 13472                                  		;lds	di, ds:start_bds
 13473                                  ;ii2f_iret:	; 10/12/2022
 13474                                  		;jmp	short i2f_iret
 13475                                  		; 02/09/2023
 13476 000012F0 CF                      		iret
 13477                                  ; ---------------------------------------------------------------------------
 13478                                  
 13479                                  ; 17/10/2022
 13480                                  ; 16/10/2022
 13481                                  
 13482                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13483                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13484                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13485                                  
 13486                                  win386call:				
 13487 000012F1 1E                      		push	ds
 13488 000012F2 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13489                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13490                                  					; at 2C7h:30h =	70h:25A0h
 13491 000012F7 3C05                    		cmp	al, 5		; Win386_Init
 13492                                  					; is it	win386 initializing?
 13493 000012F9 7410                    		jz	short Win386Init
 13494 000012FB 3C06                    		cmp	al, 6		; Win386_Exit
 13495                                  					; is it	win386 exiting?
 13496 000012FD 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13497                                  		; 12/12/2022
 13498 000012FF F6C201                  		test	dl, 1
 13499                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13500 00001302 751E                    		jnz	short win_iret	; if not win386, then continue
 13501                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13502 00001304 8026[C508]00            		and	byte [IsWin386], 0 
 13503 00001309 EB17                    		jmp	short win_iret
 13504                                  ; ---------------------------------------------------------------------------
 13505                                  
 13506                                  Win386Init:	
 13507                                  		; 12/12/2022
 13508 0000130B F6C201                  		test	dl, 1			
 13509                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13510 0000130E 7512                    		jnz	short win_iret	; if not win386, then continue
 13511                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13512 00001310 800E[C508]01            		or	byte [IsWin386], 1
 13513                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13514                                  		;mov	word ptr ds:SI_Next+2, es
 13515 00001315 891E[9308]              		mov	[SI_Next], bx
 13516 00001319 8C06[9508]              		mov	[SI_Next+2], es
 13517                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13518 0000131D BB[9108]                		mov	bx, Win386_SI	; 19/10/2022
 13519 00001320 1E                      		push	ds
 13520 00001321 07                      		pop	es
 13521                                  win_iret:				
 13522 00001322 1F                      		pop	ds
 13523                                  ii2f_iret:	; 10/12/2022
 13524                                  		;jmp	short i2f_iret	; return back up the chain
 13525                                  		; 02/09/2023
 13526 00001323 CF                      		iret
 13527                                  ; ---------------------------------------------------------------------------
 13528                                  
 13529                                  handle_multmult:			
 13530 00001324 3C01                    		cmp	al, 1
 13531 00001326 7514                    		jnz	short try_2
 13532 00001328 1E                      		push	ds
 13533 00001329 E84500                  		call	HMAPtr		; get offset of free HMA
 13534                                  		; 10/12/2022
 13535                                  		;xor	bx, bx
 13536                                  		;dec	bx
 13537 0000132C BBFFFF                  		mov	bx, 0FFFFh
 13538 0000132F 8EC3                    		mov	es, bx		; seg of HMA
 13539 00001331 89FB                    		mov	bx, di
 13540 00001333 F7D3                    		not	bx
 13541 00001335 09DB                    		or	bx, bx
 13542 00001337 7401                    		jz	short try_1
 13543 00001339 43                      		inc	bx
 13544                                  try_1:
 13545 0000133A 1F                      		pop	ds
 13546                                  		;jmp	short ii2f_iret
 13547                                  		; 02/09/2023
 13548 0000133B CF                      		iret
 13549                                  ; ---------------------------------------------------------------------------
 13550                                  
 13551                                  try_2:					
 13552 0000133C 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13553 0000133E 7530                    		jnz	short try_3
 13554 00001340 1E                      		push	ds
 13555                                  		; 10/12/2022
 13556                                  		;xor	di, di
 13557                                  		;dec	di
 13558 00001341 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13559 00001344 8EC7                    		mov	es, di
 13560 00001346 E82800                  		call	HMAPtr		; get offset of free HMA
 13561 00001349 83FFFF                  		cmp	di, 0FFFFh
 13562 0000134C 7421                    		jz	short InsuffHMA
 13563 0000134E F7DF                    		neg	di		; free space in HMA
 13564 00001350 39FB                    		cmp	bx, di
 13565 00001352 7605                    		jbe	short try_4
 13566                                  		; 10/12/2022
 13567                                  		;sub	di, di
 13568                                  		;dec	di
 13569 00001354 BFFFFF                  		mov	di, 0FFFFh
 13570                                  		;jmp	short InsuffHMA
 13571                                  		; 02/09/2023
 13572 00001357 1F                      		pop	ds
 13573 00001358 CF                      		iret
 13574                                  ; ---------------------------------------------------------------------------
 13575                                  
 13576                                  try_4:					
 13577                                  		;mov	di, ds:FreeHMAPtr
 13578 00001359 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13579 0000135D 83C30F                  		add	bx, 15
 13580                                  		;and	bx, 0FFF0h
 13581                                  		; 10/12/2022
 13582 00001360 80E3F0                  		and	bl, 0F0h
 13583                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13584 00001363 011E[EB08]              		add	[FreeHMAPtr], bx
 13585 00001367 7506                    		jnz	short InsuffHMA
 13586 00001369 C706[EB08]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13587                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13588                                  					; no more HMA if we have wrapped
 13589                                  InsuffHMA:
 13590 0000136F 1F                      		pop	ds
 13591                                  		; 10/12/2022
 13592                                  try_3:		
 13593                                  		;jmp	short ii2f_iret
 13594                                  		; 02/09/2023
 13595 00001370 CF                      		iret
 13596                                  ; ---------------------------------------------------------------------------
 13597                                  
 13598                                  		; 10/12/2022
 13599                                  ;try_3:					
 13600                                  		;jmp	ii2f_iret
 13601                                  
 13602                                  ; =============== S U B	R O U T	I N E =======================================
 13603                                  
 13604                                  ; 16/10/2022
 13605                                  
 13606                                  ;--------------------------------------------------------------------------
 13607                                  ;
 13608                                  ; procedure : HMAPtr
 13609                                  ;
 13610                                  ;		Gets the offset of the free HMA area ( with respect to
 13611                                  ;							seg ffff )
 13612                                  ;		If DOS has not moved high, tries to move DOS high.
 13613                                  ;		In the course of doing this, it will allocate all the HMA
 13614                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13615                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13616                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13617                                  ;
 13618                                  ;	RETURNS : offset of free HMA in DI
 13619                                  ;		  BIOS_DATA, seg in DS
 13620                                  ;
 13621                                  ;--------------------------------------------------------------------------
 13622                                  
 13623                                  		; 17/10/2022
 13624                                  HMAPtr:
 13625 00001371 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13626                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13627 00001376 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13628                                  		;mov	di, ds:FreeHMAPtr
 13629 0000137A 83FFFF                  		cmp	di, 0FFFFh
 13630 0000137D 750F                    		jnz	short HMAPtr_retn
 13631 0000137F 803E[F108]00            		cmp	byte [SysinitPresent], 0
 13632                                  		;cmp	ds:SysinitPresent, 0
 13633 00001384 7408                    		jz	short HMAPtr_retn
 13634 00001386 FF1E[ED08]              		call	far [MoveDOSIntoHMA]
 13635                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13636 0000138A 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13637                                  		;mov	di, ds:FreeHMAPtr
 13638                                  HMAPtr_retn:				
 13639 0000138E C3                      		retn
 13640                                  
 13641                                  ; =============== S U B	R O U T	I N E =======================================
 13642                                  
 13643                                  ; 16/10/2022
 13644                                  
 13645                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13646                                  ; but go ahead and update direction flag, si, & di
 13647                                  
 13648                                  move_sector:
 13649                                  
 13650                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13651                                  ; any segment to be a fault. Theoretically, this could be handled
 13652                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13653                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13654                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13655                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13656                                  ; mode. Their fault handler was only designed to deal with one
 13657                                  ; special case which occurred in a magazine benchmark, but didn't
 13658                                  ; handle the general case worth beans.
 13659                                  ;
 13660                                  ; Simply changing this code to do a byte loop would work okay but
 13661                                  ; would involve a general case performance hit. Therefore, we'll
 13662                                  ; check for either source or destination offsets being within one
 13663                                  ; sector of the end of their segments and only in that case fall
 13664                                  ; back to a byte move.
 13665                                  
 13666 0000138F FC                      		cld
 13667 00001390 51                      		push	cx
 13668 00001391 B90001                  		mov	cx, 256
 13669 00001394 81FE00FE                		cmp	si, 0FE00h
 13670 00001398 770A                    		ja	short movsec_bytes
 13671 0000139A 81FF00FE                		cmp	di, 0FE00h
 13672 0000139E 7704                    		ja	short movsec_bytes
 13673 000013A0 F3A5                    		rep movsw
 13674 000013A2 59                      		pop	cx
 13675 000013A3 C3                      		retn
 13676                                  ; ---------------------------------------------------------------------------
 13677                                  
 13678                                  movsec_bytes:				
 13679 000013A4 D1E1                    		shl	cx, 1
 13680 000013A6 F3A4                    		rep movsb
 13681 000013A8 59                      		pop	cx
 13682 000013A9 C3                      		retn
 13683                                  
 13684                                  ; =============== S U B	R O U T	I N E =======================================
 13685                                  
 13686                                  ; 16/10/2022
 13687                                  
 13688                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13689                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13690                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13691                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13692                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13693                                  ; but we break down a request when we get an ecc or dma error into several
 13694                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13695                                  ; number of sectors on a track on the medium, and the request would fail.
 13696                                  ;
 13697                                  ; input conditions:
 13698                                  ;	all registers set up for an int 13 request.
 13699                                  ;
 13700                                  ; output:
 13701                                  ;	dh - contains starting head number for request
 13702                                  ;	cx - contains starting sector and cylinder numbers
 13703                                  ;	(the above may or may not have been changed, and are 0-based)
 13704                                  ;	all other registers preserved.
 13705                                  
 13706                                  check_wrap:	
 13707 000013AA 50                      		push	ax
 13708 000013AB 53                      		push	bx
 13709 000013AC 06                      		push	es
 13710 000013AD 57                      		push	di
 13711 000013AE E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13712 000013B1 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13713                                  		; 12/12/2022
 13714 000013B3 26F6452301              		test	byte [es:di+23h], 1
 13715                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13716 000013B8 7457                    		jz	short no_wrap	; no wrapping for removable media
 13717 000013BA 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13718 000013BE 89C8                    		mov	ax, cx
 13719 000013C0 83E03F                  		and	ax, 3Fh		; extract sector number
 13720 000013C3 39D8                    		cmp	ax, bx		; are we going to wrap?
 13721 000013C5 764A                    		jbe	short no_wrap
 13722 000013C7 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13723                                  
 13724                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13725                                  ; last sector on that track.
 13726                                  
 13727 000013C9 08E4                    		or	ah, ah
 13728 000013CB 7503                    		jnz	short not_on_bound
 13729                                  		; 18/12/2022
 13730 000013CD 48                      		dec	ax ; *
 13731 000013CE 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13732                                  					; if on	boundary
 13733                                  		;dec	al ; *		; also decrement # of head wraps
 13734                                  not_on_bound:				
 13735 000013D0 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13736 000013D3 08E1                    		or	cl, ah		; or in	new sector #
 13737 000013D5 30E4                    		xor	ah, ah		; ax = # of head wraps
 13738 000013D7 40                      		inc	ax
 13739 000013D8 00F0                    		add	al, dh		; add in starting head #
 13740 000013DA 80D400                  		adc	ah, 0		; catch	any carry
 13741                                  		; 02/09/2023
 13742 000013DD 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13743 000013E1 39D8                    		cmp	ax, bx
 13744                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13745                                  					; are we going to wrap around a	head?
 13746 000013E3 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13747 000013E5 52                      		push	dx		; preserve drive number and head number
 13748 000013E6 31D2                    		xor	dx, dx
 13749                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13750 000013E8 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13751                                  
 13752                                  ; careful here! if new head # is 0, then we are on the last head.
 13753                                  
 13754 000013EA 09D2                    		or	dx, dx
 13755 000013EC 7507                    		jnz	short no_head_bound
 13756 000013EE 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13757                                  
 13758                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13759                                  
 13760 000013F0 09C0                    		or	ax, ax
 13761 000013F2 7401                    		jz	short no_head_bound
 13762 000013F4 48                      		dec	ax		; reduce number	of cylinder wraps
 13763                                  no_head_bound:				
 13764 000013F5 88D7                    		mov	bh, dl		; bh has new head number
 13765 000013F7 5A                      		pop	dx		; restore drive number and head number
 13766 000013F8 FECF                    		dec	bh		; get it 0-based
 13767 000013FA 88FE                    		mov	dh, bh		; set up new head number in dh
 13768 000013FC 88CF                    		mov	bh, cl
 13769 000013FE 80E73F                  		and	bh, 3Fh		; preserve sector number
 13770 00001401 B306                    		mov	bl, 6
 13771 00001403 86CB                    		xchg	cl, bl
 13772 00001405 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13773 00001407 00C5                    		add	ch, al		; add in cylinder wrap
 13774 00001409 10E3                    		adc	bl, ah		; add in high byte
 13775 0000140B D2E3                    		shl	bl, cl		; move up to ms	end
 13776 0000140D 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13777 0000140F 08F9                    		or	cl, bh		; or in	sector number
 13778                                  no_wrap:				
 13779 00001411 F8                      		clc
 13780 00001412 5F                      		pop	di
 13781 00001413 07                      		pop	es
 13782 00001414 5B                      		pop	bx
 13783 00001415 58                      		pop	ax
 13784 00001416 C3                      		retn
 13785                                  ; ---------------------------------------------------------------------------
 13786                                  
 13787                                  no_wrap_head:				
 13788 00001417 88C6                    		mov	dh, al		; do not lose new head number
 13789 00001419 FECE                    		dec	dh		; get it 0-based
 13790 0000141B EBF4                    		jmp	short no_wrap
 13791                                  
 13792                                  ; =============== S U B	R O U T	I N E =======================================
 13793                                  
 13794                                  ; 16/10/2022
 13795                                  
 13796                                  ; this is a special version of the bds lookup code which is
 13797                                  ; based on physical drives rather than the usual logical drives
 13798                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13799                                  ; otherwise carry is clear
 13800                                  ;
 13801                                  ; guaranteed to trash no registers except es:di
 13802                                  
 13803                                  		; 19/10/2022
 13804                                  find_bds:	
 13805 0000141D C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13806                                  fbds_1:					
 13807 00001421 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13808 00001425 7409                    		jz	short fdbs_2
 13809 00001427 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13810                                  					; go to next bds
 13811 0000142A 83FFFF                  		cmp	di, 0FFFFh
 13812 0000142D 75F2                    		jnz	short fbds_1
 13813 0000142F F9                      		stc
 13814                                  fdbs_2:					
 13815 00001430 C3                      		retn
 13816                                  
 13817                                  ; =============== S U B	R O U T	I N E =======================================
 13818                                  
 13819                                  ; 16/10/2022
 13820                                  		; 17/10/2022
 13821                                  doint:
 13822                                  		; 10/12/2022
 13823 00001431 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13824                                  					; get physical drive number
 13825                                  		; 19/10/2022 - Temporary !
 13826                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13827                                  		
 13828 00001434 30E4                    		xor	ah, ah
 13829 00001436 08C0                    		or	al, al
 13830 00001438 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13831                                  		; 10/12/2022
 13832 0000143A 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13833                                  					; get request code
 13834                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13835 0000143D FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13836                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13837 00001440 9D                      		popf
 13838                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13839                                  		; 17/10/2022
 13840 00001441 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13841                                  		;;call	call_orig13	; call far 70h:797h
 13842                                  					; call far KERNEL_SEGMENT:call_orig13
 13843 00001446 9C                      		pushf
 13844                                  		; 10/12/2022
 13845 00001447 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13846                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13847                                  dointdone:				
 13848 0000144A C3                      		retn
 13849                                  
 13850                                  ;----------------------------------------------------------------------------
 13851                                  
 13852                                  ; 16/10/2022
 13853                                  
 13854                                  ; this is the true int 13 handler. we parse the request to see if there is
 13855                                  ; a dma violation. if so, depending on the function, we:
 13856                                  ;   read/write break the request into three pieces and move the middle one
 13857                                  ;	       into our internal buffer.
 13858                                  ;
 13859                                  ;   format     copy the format table into the buffer
 13860                                  ;   verify     point the transfer address into the buffer
 13861                                  ;
 13862                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13863                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13864                                  ; the offending sector into the buffer below and do the i/o from there.
 13865                                  
 13866                                  ;struc INT13FRAME
 13867                                  ;.oldbp: resw
 13868                                  ;.oldax: resw 
 13869                                  ;.oldbx: resw
 13870                                  ;.oldcx: resw
 13871                                  ;.olddx: resw
 13872                                  ;.oldds: resw	; now we save caller's ds, too
 13873                                  ;.olddd: resd
 13874                                  ;.oldf:	resw
 13875                                  ;end struc
 13876                                  
 13877                                  ;----------------------------------------------------------------------------
 13878                                  
 13879                                  ;   entry conditions:
 13880                                  ;	ah = function
 13881                                  ;	al = number of sectors
 13882                                  ;	es:bx = dma address
 13883                                  ;	cx = packed track and sector
 13884                                  ;	dx = head and drive
 13885                                  ;   output conditions:
 13886                                  ;	no dma violation.
 13887                                  
 13888                                  ;	use extreme caution when working with this code. In general,
 13889                                  ;	  all registers are hot at all times.
 13890                                  ;
 13891                                  ;	question:  does this code handle cases where dma errors
 13892                                  ;	  occur during ecc retries, and where ecc errors occur during
 13893                                  ;	  dma breakdowns???? Hmmmmm.
 13894                                  
 13895                                  ;----------------------------------------------------------------------------
 13896                                  
 13897                                  ; ---------------------------------------------------------------------------
 13898                                  
 13899 0000144B 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13900                                  
 13901                                  ; 17/10/2022
 13902                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13903                                  ; 09/12/2022
 13904                                  DTYPEARRAY equ dtype_array
 13905                                  
 13906                                  ; ---------------------------------------------------------------------------
 13907                                  
 13908                                  ; stick some special stuff out of mainline
 13909                                  
 13910                                  ; we know we're doing a format command. if we have changeline
 13911                                  ; support, then flag some special changed stuff and set changed
 13912                                  ; by format bit for all logical drives using this physical drive
 13913                                  
 13914                                  format_special_stuff:
 13915 0000144F 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 13916 00001454 7459                    		jz	short format_special_stuff_done ; brif not
 13917 00001456 53                      		push	bx
 13918 00001457 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13919 0000145A E83004                  		call	set_changed_dl	; indicate that media changed by format
 13920 0000145D 5B                      		pop	bx
 13921 0000145E EB4F                    		jmp	short format_special_stuff_done
 13922                                  ; ---------------------------------------------------------------------------
 13923                                  
 13924                                  ; 16/10/2022
 13925                                  
 13926                                  ; we know we've got ec35's on the system. Now see if we're doing
 13927                                  ; a floppy. If so, create a mask and see if this particular
 13928                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13929                                  
 13930                                  		; 19/10/2022
 13931                                  ec35_special_stuff:
 13932 00001460 84D2                    		test	dl, dl		; floppy or hard disk?
 13933 00001462 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13934 00001464 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13935 00001465 51                      		push	cx
 13936 00001466 88D1                    		mov	cl, dl		; turn drive number into bit map
 13937 00001468 B001                    		mov	al, 1		; assume drive 0
 13938 0000146A D2E0                    		shl	al, cl		; shift	over correct number of times
 13939 0000146C 8406[2805]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13940 00001470 59                      		pop	cx
 13941 00001471 58                      		pop	ax
 13942 00001472 7442                    		jz	short ec35_special_stuff_done
 13943                                  					; done if this floppy is not an	ec35
 13944 00001474 53                      		push	bx		; free up a far	pointer	(es:bx)
 13945 00001475 06                      		push	es
 13946                                  		; 17/10/2022
 13947 00001476 2EC41E[4B14]            		les	bx, [cs:DTYPEARRAY]
 13948                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13949                                  					; 0070h:3A65h =	2C7h:14F5h
 13950 0000147B 00D3                    		add	bl, dl
 13951 0000147D 80D700                  		adc	bh, 0		; find entry for this drive
 13952 00001480 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13953                                  					; (360k	disk in	360k drive,
 13954                                  					; no double-stepping, 250 kbs transfer rate)
 13955 00001484 07                      		pop	es
 13956 00001485 5B                      		pop	bx
 13957 00001486 EB2E                    		jmp	short ec35_special_stuff_done
 13958                                  ; ---------------------------------------------------------------------------
 13959                                  
 13960                                  ; 16/10/2022
 13961                                  
 13962                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13963                                  ; this function does not reset the common buses after the execution.
 13964                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13965                                  ; will issue ah=1 (read status) call to reset the buses.
 13966                                  
 13967                                  ps2_special_stuff:
 13968 00001488 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13969                                  					; read driver parm ?
 13970 0000148D 7407                    		jz	short ps2_30_problem
 13971 0000148F 803E[1E00]15            		cmp	byte [prevoper], 15h
 13972                                  					; apparently function 15h fails, too
 13973 00001494 752D                    		jnz	short ps2_special_stuff_done
 13974                                  ps2_30_problem:
 13975 00001496 50                      		push	ax
 13976 00001497 B401                    		mov	ah, 1
 13977                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13978                                  		; 17/10/2022
 13979 00001499 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13980                                  		;call	call_orig13	; call far 70:797h
 13981                                  					; call far KERNEL_SEGMENT:call_orig13
 13982 0000149E 58                      		pop	ax
 13983 0000149F EB22                    		jmp	short ps2_special_stuff_done
 13984                                  ; ---------------------------------------------------------------------------
 13985                                  
 13986                                  ; 17/10/2022
 13987                                  ; 16/10/2022
 13988                                  
 13989                                  ; here is the actual int13 handler
 13990                                  
 13991                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13992                                  
 13993                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13994                                  ; vectoring up here from Bios_Data
 13995                                  
 13996                                  		; 19/10/2022
 13997 000014A1 1E                      		push	ds		; save caller's ds register first thing
 13998                                  		;;mov	ds, word [cs:0030h]
 13999                                  					; and set up our own ds -> Bios_Data
 14000 000014A2 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 14001                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 14002                                  					; = [02C7h:0030h] = [0070h:25A0h]
 14003                                  
 14004                                  ; let the operation proceed. if there is a dma violation, then we do things
 14005                                  
 14006 000014A7 A3[1E00]                		mov	[prevoper], ax	; save request
 14007 000014AA 80FC05                  		cmp	ah, 5		; romformat
 14008 000014AD 74A0                    		jz	short format_special_stuff
 14009                                  					; go do special stuff for format
 14010                                  format_special_stuff_done:
 14011 000014AF 803E[2805]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 14012 000014B4 75AA                    		jnz	short ec35_special_stuff
 14013                                  					; go handle it out of line if so
 14014                                  ec35_special_stuff_done:
 14015                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 14016 000014B6 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14017                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14018                                  		
 14019 000014BB 9C                      		pushf			; save result flags
 14020                                  		
 14021 000014BC 803E[3506]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 14022                                  					; mdl_ps2_30
 14023 000014C1 74C5                    		jz	short ps2_special_stuff
 14024                                  					; exit mainline to address special
 14025                                  ps2_special_stuff_done:			; ps2/30 problem if so
 14026 000014C3 9D                      		popf
 14027 000014C4 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 14028                                  ret_from_i13:
 14029 000014C6 1F                      		pop	ds
 14030 000014C7 CA0200                  		retf	2		; restore ds &	iret w/flags
 14031                                  ; ---------------------------------------------------------------------------
 14032                                  
 14033                                  ; most of our code exits through here. If carry isn't set, then
 14034                                  ; just do a simple exit. Else doublecheck that we aren't getting
 14035                                  ; a changeline error.
 14036                                  
 14037                                  i13ret_ck_chglinerr:
 14038 000014CA 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 14039                                  i13_ret_error:
 14040 000014CC 80FC06                  		cmp	ah, 6		; did i	see a change event?
 14041 000014CF 7513                    		jnz	short int13b	; skip if wrong	error
 14042 000014D1 08D2                    		or	dl, dl		; is this for the hard disk?
 14043 000014D3 780F                    		js	short int13b	; yes, ignore
 14044 000014D5 803E[7700]00            		cmp	byte [fhave96], 0
 14045 000014DA 7408                    		jz	short int13b	; just in case ROM returned this
 14046                                  					; error	even though it told us it
 14047                                  					; never	would
 14048 000014DC 53                      		push	bx
 14049 000014DD BB4000                  		mov	bx, 40h		; fchanged
 14050 000014E0 E8AA03                  		call	set_changed_dl
 14051 000014E3 5B                      		pop	bx
 14052                                  int13b:
 14053 000014E4 F9                      		stc			; now return the error
 14054 000014E5 EBDF                    		jmp	short ret_from_i13
 14055                                  ; ---------------------------------------------------------------------------
 14056                                  
 14057                                  ; some kind of error occurred. see if it is dma violation
 14058                                  
 14059                                  goterr13:
 14060 000014E7 80FC09                  		cmp	ah, 9		; dma error?
 14061 000014EA 747C                    		jz	short gotdmaerr
 14062                                  goterr13_xxxx:
 14063 000014EC 80FC11                  		cmp	ah, 11h		; ecc error?
 14064 000014EF 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 14065 000014F1 803E[2F06]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 14066 000014F6 74D4                    		jz	short i13_ret_error
 14067                                  
 14068 000014F8 803E[1F00]02            		cmp	byte [prevoper+1], 2
 14069                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 14070                                  					; (2 = romread)
 14071                                  					; ECC correction only applies to reads
 14072 000014FD 75CD                    		jnz	short i13_ret_error
 14073                                  
 14074 000014FF 30E4                    		xor	ah, ah
 14075                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 14076                                  		; 17/10/2022
 14077 00001501 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14078                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14079                                  					; call far 70:797h
 14080 00001506 A1[1E00]                		mov	ax, [prevoper]
 14081 00001509 30E4                    		xor	ah, ah		; return code =	no error
 14082 0000150B 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 14083 0000150D 74B7                    		jz	short ret_from_i13 ; return with carry clear
 14084 0000150F 53                      		push	bx
 14085 00001510 51                      		push	cx
 14086 00001511 52                      		push	dx
 14087 00001512 A2[2000]                		mov	[number_of_sec], al
 14088                                  loop_ecc:
 14089 00001515 B80102                  		mov	ax, 201h	; read one sector
 14090                                  
 14091                                  ; we do reads one sector at a time. this ensures that we will eventually
 14092                                  ; finish the request since ecc errors on one sector do read in that sector.
 14093                                  ;
 14094                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 14095                                  ; that attempt to read more sectors than are available on a particular
 14096                                  ; track.
 14097                                  ;
 14098                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 14099                                  ; this request.
 14100                                  ;
 14101                                  ; at this point, all registers are set up for the call to orig13, except
 14102                                  ; that there may be a starting sector number that is bigger than the number
 14103                                  ; of sectors on a track.
 14104                                  ;
 14105 00001518 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 14106                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 14107                                  		; 17/10/2022
 14108 0000151B 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14109                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14110 00001520 730C                    		jnb	short ok11_op
 14111 00001522 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 14112 00001525 741B                    		jz	short handle_dma_during_ecc
 14113 00001527 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 14114 0000152A 7510                    		jnz	short ok11_exit_err
 14115                                  		; 10/12/2022
 14116                                  		; xor ax ax -> ah = 0
 14117                                  		;mov	ah, 0		; ecc error. reset the system again.
 14118 0000152C 31C0                    		xor	ax, ax		; clear	the error code so that if this
 14119                                  					; was the last sector, no error	code
 14120                                  					; will be returned for the corrected
 14121                                  					; read.	(clear carry too.)
 14122                                  ok11_op:
 14123 0000152E FE0E[2000]              		dec	byte [number_of_sec]
 14124 00001532 7409                    		jz	short ok11_exit	; all done?
 14125 00001534 FEC1                    		inc	cl		; advance sector number
 14126                                  					; add 200h to address
 14127 00001536 FEC7                    		inc	bh
 14128 00001538 FEC7                    		inc	bh
 14129 0000153A EBD9                    		jmp	short loop_ecc
 14130                                  ; ---------------------------------------------------------------------------
 14131                                  
 14132                                  ; locate error returns centrally
 14133                                  
 14134                                  ok11_exit_err:
 14135 0000153C F9                      		stc			; set carry bit again.
 14136                                  ok11_exit:
 14137 0000153D 5A                      		pop	dx
 14138 0000153E 59                      		pop	cx
 14139 0000153F 5B                      		pop	bx
 14140 00001540 EB88                    		jmp	short i13ret_ck_chglinerr
 14141                                  ; ---------------------------------------------------------------------------
 14142                                  
 14143                                  ; do the single sector read again, this time into our temporary
 14144                                  ; buffer, which is guaranteed not to have a DMA error, then
 14145                                  ; move the data to its proper location and proceed
 14146                                  
 14147                                  handle_dma_during_ecc:
 14148 00001542 06                      		push	es
 14149 00001543 53                      		push	bx
 14150 00001544 BB[4E01]                		mov	bx, disksector
 14151 00001547 1E                      		push	ds
 14152 00001548 07                      		pop	es		; point es:bx to buffer
 14153 00001549 B80102                  		mov	ax, 201h	; read one sector
 14154                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 14155                                  		; 17/10/2022
 14156 0000154C 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14157                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14158 00001551 5B                      		pop	bx
 14159 00001552 07                      		pop	es
 14160 00001553 7305                    		jnb	short handle_dma_during_ecc_noerr
 14161 00001555 80FC11                  		cmp	ah, 11h
 14162 00001558 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 14163                                  
 14164                                  ; now we're kosher. Copy the data to where it belongs and resume
 14165                                  ; the ECC looping code.
 14166                                  
 14167                                  handle_dma_during_ecc_noerr:
 14168 0000155A 56                      		push	si
 14169 0000155B 57                      		push	di
 14170 0000155C 89DF                    		mov	di, bx
 14171 0000155E BE[4E01]                		mov	si, disksector
 14172 00001561 E82BFE                  		call	move_sector
 14173 00001564 5F                      		pop	di
 14174 00001565 5E                      		pop	si
 14175 00001566 EBC6                    		jmp	short ok11_op
 14176                                  ; ---------------------------------------------------------------------------
 14177                                  
 14178                                  ; we truly have a dma violation. restore register ax and retry the
 14179                                  ; operation as best we can.
 14180                                  
 14181                                  gotdmaerr:
 14182 00001568 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 14183 0000156B FB                      		sti
 14184 0000156C 80FC02                  		cmp	ah, 2		; romread
 14185 0000156F 723B                    		jb	short i13_done_dmaerr
 14186                                  					; just pass dma error thru for
 14187                                  					; functions we don't handle
 14188 00001571 80FC04                  		cmp	ah, 4		; romverify
 14189 00001574 743C                    		jz	short intverify
 14190 00001576 80FC05                  		cmp	ah, 5		; romformat
 14191 00001579 7448                    		jz	short intformat
 14192 0000157B 772F                    		ja	short i13_done_dmaerr
 14193                                  
 14194                                  ; we are doing a read/write call. check for dma problems
 14195                                  
 14196                                  ;	******** set up stack frame here!!! ********
 14197                                  
 14198 0000157D 52                      		push	dx
 14199 0000157E 51                      		push	cx
 14200 0000157F 53                      		push	bx
 14201 00001580 50                      		push	ax
 14202 00001581 55                      		push	bp
 14203 00001582 89E5                    		mov	bp, sp
 14204 00001584 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 14205 00001586 D1E2                    		shl	dx, 1
 14206 00001588 D1E2                    		shl	dx, 1
 14207 0000158A D1E2                    		shl	dx, 1
 14208 0000158C D1E2                    		shl	dx, 1		; segment converted to absolute	address
 14209 0000158E 01DA                    		add	dx, bx		; combine with offset
 14210 00001590 81C2FF01                		add	dx, 511		; simulate a transfer
 14211                                  
 14212                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 14213                                  ; we skip the first transfer and perform the remaining buffering and transfer
 14214                                  
 14215 00001594 7303                    		jnb	short no_skip_first
 14216 00001596 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 14217                                  ; ---------------------------------------------------------------------------
 14218                                  
 14219                                  no_skip_first:
 14220 00001599 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 14221 0000159B B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 14222 0000159D 28F4                    		sub	ah, dh
 14223                                  
 14224                                  ; ah is now the number of sectors that we can successfully write in this
 14225                                  ; segment. if this number is above or equal to the requested number, then we
 14226                                  ; continue the operation as normal. otherwise, we break it into pieces.
 14227                                  ;
 14228                                  ; wait a sec. this is goofy. the whole reason we got here in the
 14229                                  ; first place is because we got a dma error. so it's impossible
 14230                                  ; for the whole block to fit, unless the dma error was returned
 14231                                  ; in error.
 14232                                  
 14233 0000159F 38C4                    		cmp	ah, al		; can we fit it	in?
 14234 000015A1 7236                    		jb	short doblock	; no, perform blocking.
 14235                                  
 14236                                  ; yes, the request fits. let it happen.
 14237                                  
 14238 000015A3 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14239                                  					; set up head number
 14240 000015A6 E888FE                  		call	doint
 14241 000015A9 E9D900                  		jmp	bad13		; and return from this place
 14242                                  ; ---------------------------------------------------------------------------
 14243                                  
 14244                                  i13_done_dmaerr:
 14245 000015AC B409                    		mov	ah, 9		; pass dma error thru to caller
 14246 000015AE F9                      		stc
 14247 000015AF E914FF                  		jmp	ret_from_i13	; return with error,
 14248                                  					; we know it's not a changeline error
 14249                                  ; ---------------------------------------------------------------------------
 14250                                  
 14251                                  ; verify the given sectors. place the buffer pointer into our space.
 14252                                  
 14253                                  intverify:
 14254 000015B2 06                      		push	es		; save caller's dma address
 14255 000015B3 53                      		push	bx
 14256 000015B4 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 14257 000015B5 07                      		pop	es
 14258                                  dosimple:
 14259 000015B6 BB[4E01]                		mov	bx, disksector
 14260                                  					; do the i/o from Bios_Data:disksector
 14261                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 14262                                  		; 17/10/2022
 14263 000015B9 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14264                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14265 000015BE 5B                      		pop	bx
 14266 000015BF 07                      		pop	es
 14267 000015C0 E907FF                  		jmp	i13ret_ck_chglinerr
 14268                                  ; ---------------------------------------------------------------------------
 14269                                  
 14270                                  ; format operation. copy the parameter table into Bios_Data:disksector
 14271                                  
 14272                                  intformat:
 14273 000015C3 06                      		push	es
 14274 000015C4 53                      		push	bx
 14275 000015C5 56                      		push	si
 14276 000015C6 57                      		push	di
 14277 000015C7 1E                      		push	ds
 14278                                  
 14279                                  ; point ds to the caller's dma buffer, es to Bios_Data
 14280                                  ; in other words, swap (ds, es)
 14281                                  
 14282 000015C8 06                      		push	es
 14283 000015C9 1E                      		push	ds
 14284 000015CA 07                      		pop	es
 14285 000015CB 1F                      		pop	ds
 14286 000015CC 89DE                    		mov	si, bx
 14287 000015CE BF[4E01]                		mov	di, disksector
 14288 000015D1 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 14289 000015D4 1F                      		pop	ds
 14290 000015D5 5F                      		pop	di
 14291 000015D6 5E                      		pop	si		; do the i/o from
 14292 000015D7 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 14293                                  ; ---------------------------------------------------------------------------
 14294                                  
 14295                                  ; we can't fit the request into the entire block. perform the operation on
 14296                                  ; the first block.
 14297                                  ;
 14298                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 14299                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 14300                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 14301                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 14302                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 14303                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 14304                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 14305                                  ; doblock will handle the first block of requested sectors within the
 14306                                  ; boundary of this safe value.
 14307                                  
 14308                                  doblock:
 14309                                  
 14310                                  ; try to get the # of sectors/track from bds via rom drive number.
 14311                                  ; for any mini disks installed, here we have to pray that they have the
 14312                                  ; same # of sector/track as the main dos partition disk drive.
 14313                                  				
 14314 000015D9 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 14315                                  					; get head #, drive #
 14316 000015DC 51                      		push	cx
 14317 000015DD 06                      		push	es
 14318 000015DE 57                      		push	di		; ah - # of sectors before dma boundary
 14319                                  					; al - requested # of sectors for i/o.
 14320 000015DF E83BFE                  		call	find_bds
 14321 000015E2 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14322                                  		; 12/12/2022
 14323 000015E6 26F6452301              		test	byte [es:di+23h], 1
 14324                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 14325 000015EB 5F                      		pop	di
 14326 000015EC 07                      		pop	es
 14327 000015ED 88E0                    		mov	al, ah		; set al=ah for	floppies
 14328 000015EF 7404                    		jz	short doblockflop ; they are track by track operation
 14329 000015F1 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 14330 000015F3 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 14331                                  doblockflop:
 14332 000015F5 59                      		pop	cx
 14333                                  doblockcontinue:
 14334 000015F6 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 14335 000015F8 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 14336 000015FA 50                      		push	ax
 14337 000015FB 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 14338 000015FD EB03                    		jmp	short doblockdoint
 14339                                  ; ---------------------------------------------------------------------------
 14340                                  
 14341                                  doblocklast:
 14342 000015FF 88C4                    		mov	ah, al
 14343 00001601 50                      		push	ax
 14344                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 14345 00001602 E82CFE                  		call	doint
 14346 00001605 727E                    		jb	short bad13	; something happened, bye!
 14347 00001607 58                      		pop	ax
 14348 00001608 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 14349                                  					; decrement by the successful operation
 14350 0000160B 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 14351 0000160D 00E7                    		add	bh, ah		; advance dma addres
 14352 0000160F 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 14353 00001611 38C4                    		cmp	ah, al		; check	the previous value
 14354 00001613 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 14355                                  					; then we are done already.
 14356 00001615 28E0                    		sub	al, ah		; otherwise,
 14357                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 14358 00001617 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 14359 0000161A EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 14360                                  ; ---------------------------------------------------------------------------
 14361                                  
 14362                                  bufferx:
 14363 0000161C 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14364                                  					; set up head number
 14365                                  buffer:
 14366 0000161F 53                      		push	bx
 14367 00001620 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 14368 00001623 80FC03                  		cmp	ah, 3		; romwrite
 14369 00001626 7525                    		jnz	short doread	;
 14370                                  
 14371                                  ; copy the offending sector into local buffer
 14372                                  
 14373 00001628 06                      		push	es
 14374 00001629 1E                      		push	ds
 14375 0000162A 56                      		push	si
 14376 0000162B 57                      		push	di
 14377 0000162C 1E                      		push	ds		; exchange segment registers
 14378 0000162D 06                      		push	es
 14379 0000162E 1F                      		pop	ds
 14380 0000162F 07                      		pop	es
 14381 00001630 BF[4E01]                		mov	di, disksector	; where to move
 14382 00001633 57                      		push	di		; save it
 14383 00001634 89DE                    		mov	si, bx		; source
 14384 00001636 E856FD                  		call	move_sector	; move sector into local buffer
 14385 00001639 5B                      		pop	bx		; new transfer address
 14386                                  					; (es:bx = Bios_Data:diskbuffer)
 14387 0000163A 5F                      		pop	di		; restore caller's di & si
 14388 0000163B 5E                      		pop	si
 14389 0000163C 1F                      		pop	ds		; restore Bios_Data
 14390                                  
 14391                                  ; see if we are wrapping around a track or head
 14392                                  
 14393 0000163D B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 14394                                  					; get drive number
 14395 0000163F 8A5608                  		mov	dl, [bp+8]
 14396 00001642 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 14397                                  					;
 14398                                  					; ah is	function
 14399                                  					; al is	1 for single sector transfer
 14400                                  					; es:bx	is local transfer addres
 14401                                  					; cx is	track/sector number
 14402                                  					; dx is	head/drive number
 14403                                  					; si,di	unchanged
 14404 00001645 E8E9FD                  		call	doint
 14405 00001648 07                      		pop	es		; restore caller's dma segment
 14406 00001649 723A                    		jb	short bad13	; go clean up
 14407 0000164B EB22                    		jmp	short dotail
 14408                                  ; ---------------------------------------------------------------------------
 14409                                  
 14410                                  ; reading a sector. do int first, then move things around
 14411                                  
 14412                                  doread:
 14413 0000164D 06                      		push	es
 14414 0000164E 53                      		push	bx
 14415 0000164F 1E                      		push	ds		; es = Bios_Code
 14416 00001650 07                      		pop	es
 14417 00001651 BB[4E01]                		mov	bx, disksector
 14418 00001654 B001                    		mov	al, 1
 14419 00001656 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14420                                  					; get drive number
 14421 00001659 E84EFD                  		call	check_wrap	;
 14422                                  					; ah = function
 14423                                  					; al = 1 for single sector
 14424                                  					; es:bx	points to local	buffer
 14425                                  					; cx, dx are track/sector, head/drive
 14426 0000165C E8D2FD                  		call	doint
 14427 0000165F 5B                      		pop	bx
 14428 00001660 07                      		pop	es
 14429 00001661 7222                    		jb	short bad13
 14430 00001663 56                      		push	si
 14431 00001664 57                      		push	di
 14432 00001665 89DF                    		mov	di, bx
 14433 00001667 BE[4E01]                		mov	si, disksector
 14434 0000166A E822FD                  		call	move_sector
 14435 0000166D 5F                      		pop	di
 14436 0000166E 5E                      		pop	si
 14437                                  
 14438                                  ; note the fact that we've done 1 more sector
 14439                                  
 14440                                  dotail:
 14441 0000166F 5B                      		pop	bx		; retrieve new dma area
 14442 00001670 80C702                  		add	bh, 2		; advance over sector
 14443 00001673 41                      		inc	cx
 14444 00001674 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 14445 00001677 F8                      		clc
 14446 00001678 FEC8                    		dec	al
 14447 0000167A 7409                    		jz	short bad13	; no more i/o
 14448                                  
 14449                                  ; see if we wrap around a track or head boundary with starting sector
 14450                                  ; we already have the correct head number to pass to check_wrap
 14451                                  
 14452 0000167C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14453 0000167F E828FD                  		call	check_wrap
 14454 00001682 E8ACFD                  		call	doint
 14455                                  
 14456                                  ; we are done. ax has the final code; we throw away what we got before
 14457                                  
 14458                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 14459                                  ;	   or we've finished. If carry is set now, our only
 14460                                  ;	   hope for salvation is that it was a read operation
 14461                                  ;	   and the error code is ECC error. In that case, we'll
 14462                                  ;	   just pop the registers and go do the old ECC thing.
 14463                                  ;	   When the DMA error that got us here in the first
 14464                                  ;	   place occurs, it'll handle it.
 14465                                  
 14466                                  bad13:
 14467 00001685 89EC                    		mov	sp, bp
 14468 00001687 5D                      		pop	bp
 14469 00001688 5B                      		pop	bx
 14470 00001689 5B                      		pop	bx
 14471 0000168A 59                      		pop	cx
 14472 0000168B 5A                      		pop	dx
 14473 0000168C 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14474 0000168E E935FE                  		jmp	ret_from_i13	; non-error exit
 14475                                  ; ---------------------------------------------------------------------------
 14476                                  
 14477                                  xgoterr13_xxxx:
 14478 00001691 E958FE                  		jmp	goterr13_xxxx
 14479                                  
 14480                                  ; ---------------------------------------------------------------------------
 14481                                  		; 10/12/2022
 14482                                  		;db 	0
 14483                                  ; ---------------------------------------------------------------------------
 14484                                  
 14485                                  ;Bios_Code ends
 14486                                  
 14487                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14488                                  
 14489                                  ;-----------------------------------------------------------------------------
 14490                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14491                                  ;-----------------------------------------------------------------------------
 14492                                  ; 17/03/2019 - Retro DOS v4.0
 14493                                  
 14494                                  		; 19/10/2022
 14495                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14496 00001694 8A26[7500]              		mov	ah, [drvmax]
 14497 00001698 BF[7E06]                		mov	di, dskdrvs
 14498 0000169B 1E                      		push	ds		; pass result in es:di
 14499 0000169C 07                      		pop	es
 14500 0000169D E913EF                  		jmp	SetPtrSav
 14501                                  
 14502                                  ; =============== S U B	R O U T	I N E =======================================
 14503                                  
 14504                                  ;---------------------------------------------------------------------------
 14505                                  ; install_bds installs a bds at location es:di into the current linked list of
 14506                                  ; bds maintained by this device driver. it places the bds at the end of the
 14507                                  ; list. Trashes (at least) ax, bx, di, si
 14508                                  ;---------------------------------------------------------------------------
 14509                                  
 14510                                  install_bds:		
 14511 000016A0 1E                      		push	ds		; save Bios_Data segment
 14512 000016A1 BE[1901]                		mov	si, start_bds	; beginning of chain
 14513                                  
 14514                                  		; ds:si now points to link to first bds
 14515                                  		; assume bds list is non-empty
 14516                                  loop_next_bds:				
 14517 000016A4 C534                    		lds	si, [si]	; [si+BDS.link]
 14518                                  					; fetch	next bds
 14519 000016A6 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14520 000016AA 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14521                                  					; drive	with new one?
 14522 000016AD 7518                    		jnz	short next_bds
 14523 000016AF B310                    		mov	bl, 10h		; fi_am_mult
 14524 000016B1 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14525                                  					; set both of them to i_am_mult	if so
 14526 000016B5 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14527 000016B8 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14528                                  					; we don't own it
 14529 000016BD 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14530                                  					; determine if changeline available
 14531 000016C0 80E302                  		and	bl, 2		; fchangeline
 14532 000016C3 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14533                                  next_bds:				
 14534                                  		; 02/09/2023 (PCDOS 7.1)
 14535 000016C7 B8FFFF                  		mov	ax, 0FFFFh	; -1
 14536 000016CA 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 14537                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14538                                  					; are we at end	of list?
 14539 000016CC 75D6                    		jnz	short loop_next_bds
 14540 000016CE 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 14541                                  					; install bds
 14542 000016D1 893C                    		mov	[si], di
 14543 000016D3 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 14544                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14545                                  					; set next pointer to null
 14546 000016D6 1F                      		pop	ds
 14547                                  
 14548                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14549                                  ;
 14550                                  ; **** If the new drive has a higher EOT value, we must alter the
 14551                                  ;      'eot' variable appropriately.
 14552                                  ;
 14553                                  ;		; 01/06/2019
 14554                                  ;		;mov	al,[es:di+52]
 14555                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 14556                                  ;
 14557                                  ;		cmp	al,[eot]
 14558                                  ;		jbe	short _eot_ok
 14559                                  ;		mov	[eot],al
 14560                                  
 14561 000016D7 C3                      		retn
 14562                                  
 14563                                  ; ---------------------------------------------------------------------------
 14564                                  
 14565                                  ; 17/10/2022
 14566                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14567                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14568                                  ; 09/12/2022
 14569                                  DRVLET equ drvlet
 14570                                  SNGMSG equ sngmsg
 14571                                  
 14572                                  ; 16/10/2022
 14573                                  
 14574                                  ;---------------------------------------------------------------------------
 14575                                  ;  ask to swap the disk in drive a:
 14576                                  ;	es:di -> bds
 14577                                  ;	ds -> Bios_Data
 14578                                  ;---------------------------------------------------------------------------
 14579                                  
 14580                                  		; 19/10/2022
 14581 000016D8 F606[C508]01            swpdsk:		test	byte [IsWin386], 1			
 14582                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14583 000016DD 7405                    		jz	short no_win386	; no, skip SetFocus
 14584                                  		
 14585                                  		; set focus to the correct VM
 14586                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14587                                  		; 17/10/2022
 14588 000016DF 9A[C608]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14589                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14590                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14591                                  no_win386:				
 14592 000016E4 51                      		push	cx
 14593 000016E5 52                      		push	dx
 14594 000016E6 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14595                                  					; get the drive	letter
 14596                                  
 14597                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14598                                  ;           then existing dsk is drive A & vice versa
 14599                                  
 14600 000016EA 88D6                    		mov	dh, dl
 14601 000016EC 80F601                  		xor	dh, 1
 14602 000016EF 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14603 000016F1 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14604                                  					; broad	cast code for swap disk
 14605                                  					; Broadcast it
 14606 000016F4 CD2F                    		int	2Fh	
 14607 000016F6 41                      		inc	cx		; cx == -1 ?
 14608 000016F7 741E                    		jz	short swpdsk9	; somebody has handled it
 14609                                  
 14610                                  ; using a different drive in a one drive system so request the user change disks
 14611                                  
 14612 000016F9 80C241                  		add	dl, 'A'
 14613                                  		; 17/10/2022
 14614 000016FC 2E8816[3617]            		mov	[cs:DRVLET], dl
 14615                                  		; 16/10/2022
 14616                                  		;;mov	byte [cs:drvlet], dl
 14617                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14618                                  					; 0070h:3D54h =	2C7h:17E4h
 14619 00001701 BE[1A17]                		mov	si, SNGMSG
 14620                                  		;mov	si, 17C8h	; sngmsg
 14621                                  					; 0070h:3D38h =	2C7h:17C8h
 14622 00001704 53                      		push	bx
 14623 00001705 2E                      		cs
 14624 00001706 AC                      		lodsb			; get the next character of the message
 14625                                  		;lods	byte ptr cs:[si]
 14626                                  wrmsg_loop:				
 14627 00001707 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14628                                  					; AL = character to display
 14629 00001709 2E                      		cs
 14630 0000170A AC                      		lodsb
 14631                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14632                                  					; get the next character of the	message
 14633 0000170B 08C0                    		or	al, al
 14634 0000170D 75F8                    		jnz	short wrmsg_loop
 14635 0000170F E8F5EA                  		call	con_flush	; flush out keyboard queue
 14636                                  					; call rom-bios
 14637 00001712 30E4                    		xor	ah, ah
 14638 00001714 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14639                                  					; Return: AH = scan code, AL = character
 14640 00001716 5B                      		pop	bx
 14641                                  swpdsk9:				
 14642 00001717 5A                      		pop	dx
 14643 00001718 59                      		pop	cx
 14644 00001719 C3                      		retn
 14645                                  
 14646                                  ; ---------------------------------------------------------------------------
 14647                                  
 14648                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14649                                  
 14650                                  ;--------------------------------------------------------
 14651                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14652                                  ;--------------------------------------------------------
 14653                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14654                                  ;--------------------------------------------------------
 14655                                  ; 17/03/2019 - Retro DOS v4.0
 14656                                  
 14657                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14658 0000171A 0D0A                    sngmsg:		db 0Dh,0Ah
 14659 0000171C 496E73657274206469-     		db 'Insert diskette for drive '
 14659 00001725 736B6574746520666F-
 14659 0000172E 7220647269766520   
 14660                                  
 14661                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14662 00001736 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14662 0000173F 65737320616E79206B-
 14662 00001748 6579207768656E2072-
 14662 00001751 656164790D0A       
 14663 00001757 0A00                    		db 0Ah,0
 14664                                  
 14665                                  ; =============== S U B	R O U T	I N E =======================================
 14666                                  
 14667                                  ;---------------------------------------------------------------------------
 14668                                  ; input : es:di points to current bds for drive.
 14669                                  ; return : zero set if no open files
 14670                                  ;	   zero reset if open files
 14671                                  ;---------------------------------------------------------------------------
 14672                                  
 14673                                  chkopcnt:		
 14674 00001759 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14675 0000175E C3                      		retn
 14676                                  
 14677                                  ; =============== S U B	R O U T	I N E =======================================
 14678                                  
 14679                                  ;---------------------------------------------------------------------------
 14680                                  ; at media check time, we need to really get down and check what the change is.
 14681                                  ; this is guaranteed to be expensive.
 14682                                  ;
 14683                                  ;	es:di -> bds, ds -> Bios_Data
 14684                                  ;---------------------------------------------------------------------------
 14685                                  
 14686                                  mediacheck:	
 14687 0000175F E8CAF0                  		call	checksingle	; make sure correct disk is in place
 14688 00001762 31F6                    		xor	si, si
 14689 00001764 E84D01                  		call	haschange
 14690 00001767 742F                    		jz	short mediaret
 14691 00001769 E83C01                  		call	checkromchange
 14692 0000176C 752B                    		jnz	short mediadovolid
 14693 0000176E 50                      		push	ax
 14694 0000176F 52                      		push	dx
 14695 00001770 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14696                                  					; set logical drive number
 14697 00001774 B416                    		mov	ah, 16h
 14698 00001776 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14699                                  					; DL = drive to	check
 14700                                  					; Return: AH = disk change status
 14701 00001778 5A                      		pop	dx
 14702 00001779 58                      		pop	ax
 14703 0000177A 721D                    		jb	short mediadovolid
 14704 0000177C BE0100                  		mov	si, 1		; signal no change
 14705                                  
 14706                                  ; there are some drives with changeline that "lose" the changeline indication
 14707                                  ; if a different drive is accessed after the current one. in order to avoid
 14708                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14709                                  ; is not active and we are accessing a different drive from the last one.
 14710                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14711                                  ; status.
 14712                                  		; 19/10/2022
 14713 0000177F 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14714 00001783 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14715                                  					; (If the last drive accessed is not current drive
 14716                                  					; media	change status may be incorrect.	So,
 14717                                  					; "I don't now" will be returned even if it is indicated
 14718                                  					; as media is not changed.)
 14719 00001787 740F                    		jz	short mediaret	; (same	drive,
 14720                                  					; media	changeline indication is reliable)
 14721                                  
 14722                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14723                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14724                                  ; "not changed" here since the 2 second test said no change.)
 14725                                  
 14726 00001789 50                      		push	ax
 14727 0000178A 51                      		push	cx
 14728 0000178B 52                      		push	dx
 14729 0000178C E8BFED                  		call	Check_Time_Of_Access
 14730 0000178F 5A                      		pop	dx
 14731 00001790 59                      		pop	cx
 14732 00001791 58                      		pop	ax
 14733 00001792 09F6                    		or	si, si
 14734 00001794 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14735                                  					; (volume id will be checked)
 14736 00001796 31F6                    		xor	si, si		; return "i don't know"
 14737                                  mediaret:				
 14738 00001798 C3                      		retn
 14739                                  ; ---------------------------------------------------------------------------
 14740                                  
 14741                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14742                                  ; because this may be different since we only set medbyt when doing a read
 14743                                  ; or write.
 14744                                  
 14745                                  mediadovolid:				
 14746 00001799 E857EE                  		call	GetBp		; build	a new bpb in current bds
 14747 0000179C 72FA                    		jb	short mediaret
 14748 0000179E E82D00                  		call	check_vid
 14749 000017A1 73F5                    		jnb	short mediaret
 14750 000017A3 E90AF4                  		jmp	maperror	; fix up al for	return to dos
 14751                                  ; ---------------------------------------------------------------------------
 14752                                  
 14753                                  ; simple, quick check of latched change. if no indication, then return
 14754                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14755                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14756                                  ; dos.
 14757                                  ;
 14758                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14759                                  
 14760                                  ;	call with es:di -> bds, ds -> Bios_Data
 14761                                  ;	***** warning:  this routine will return one level up on the stack
 14762                                  ;			if an error occurs!
 14763                                  
 14764                                  checklatchio:	
 14765                                  
 14766                                  ; if returning fake bpb then assume the disk has not changed
 14767                                  			
 14768 000017A6 E8B0FF                  		call	chkopcnt
 14769 000017A9 741B                    		jz	short checkret	; done if zero
 14770                                  
 14771                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14772                                  
 14773 000017AB E8FA00                  		call	checkromchange
 14774 000017AE 7416                    		jz	short checkret
 14775                                  
 14776                                  ; we now see that a change line has been seen in the past. let's do the
 14777                                  ; expensive verification.
 14778                                  
 14779 000017B0 E840EE                  		call	GetBp		; build	bpb in current bds
 14780 000017B3 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14781 000017B5 E81600                  		call	check_vid
 14782 000017B8 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14783 000017BA 09F6                    		or	si, si		; is changed for sure?
 14784 000017BC 7908                    		jns	short checkret
 14785 000017BE E87B00                  		call	returnvid
 14786                                  checklatchret:				
 14787 000017C1 E8ECF3                  		call	maperror	; fix up al for	return to dos
 14788                                  ret_no_error_map:			
 14789 000017C4 F9                      		stc
 14790 000017C5 5E                      		pop	si		; pop off return address
 14791                                  checkret:				
 14792 000017C6 C3                      		retn
 14793                                  ; ---------------------------------------------------------------------------
 14794                                  
 14795                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14796                                  ; only if there was a disk error. return that error code in ax.
 14797                                  ;
 14798                                  ;	called with es:di -> bds, ds -> Bios_Data
 14799                                  
 14800                                  checkfatvid:				
 14801 000017C7 E8BC01                  		call	fat_check	; check	the fat	and the	vid
 14802 000017CA 09F6                    		or	si, si
 14803 000017CC 7827                    		js	short changed_drv ;
 14804                                  
 14805                                  ; the fat was the same. fall into check_vid and check volume id.
 14806                                  
 14807                                  		; fall into check_vid
 14808                                  
 14809                                  ; =============== S U B	R O U T	I N E =======================================
 14810                                  
 14811                                  ; now with the extended boot record, the logic should be enhanced.
 14812                                  ;
 14813                                  ; if it is the extended boot record, then we check the volume serial
 14814                                  ; number instead of volume id. if it is different, then set si to -1.
 14815                                  ;
 14816                                  ; if it is same, then si= 1 (no change).
 14817                                  ;
 14818                                  ; if it is not the extended boot record, then just follows the old
 14819                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14820                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14821                                  ; should have already covered by extended boot structure checking.
 14822                                  ; so, we will return "i don't know" by setting si to 0.
 14823                                  ;
 14824                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14825                                  ; (this will be gauranteed by a successful getbp call right before this
 14826                                  ; routine.)
 14827                                  ;
 14828                                  ;	called with es:di -> bds, ds -> bds
 14829                                  
 14830                                  		; 19/10/2022
 14831                                  check_vid:
 14832                                  
 14833                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14834                                  ; boot signature. if it is set then go to do the extended
 14835                                  ; id check otherwise continue with code below
 14836                                  
 14837 000017CE 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14838                                  					; [disksector+EXT_BOOT.SIG],
 14839                                  					; EXT_BOOT_SIGNATURE
 14840 000017D3 7427                    		jz	short do_ext_check_id
 14841 000017D5 E8DC00                  		call	haschange
 14842 000017D8 74EC                    		jz	short checkret
 14843 000017DA 31F6                    		xor	si, si
 14844 000017DC 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14845                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14846 000017E1 7411                    		jz	short checkfatret ; don't read vol id
 14847                                  					; if not fat system
 14848 000017E3 E8EE00                  		call	read_volume_id
 14849 000017E6 720C                    		jb	short checkfatret
 14850 000017E8 E89201                  		call	check_volume_id
 14851 000017EB BEFFFF                  		mov	si, 0FFFFh	; -1
 14852                                  					; definitely changed
 14853 000017EE 7505                    		jnz	short changed_drv
 14854                                  
 14855 000017F0 46                      		inc	si		; not changed
 14856                                  vid_no_changed:				
 14857 000017F1 E8BA00                  		call	resetchanged
 14858                                  		; 12/12/2022
 14859                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14860                                  		;clc
 14861                                  checkfatret:				
 14862 000017F4 C3                      		retn
 14863                                  ; ---------------------------------------------------------------------------
 14864                                  
 14865                                  		; 12/12/2022
 14866                                  changed_drv:
 14867 000017F5 F8                      		clc			; cas -- return	no error
 14868 000017F6 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14869                                  					; ensure that we ask rom for media
 14870 000017FB C3                      		retn			; check	next time round
 14871                                  ; ---------------------------------------------------------------------------
 14872                                  
 14873                                  ; extended id check
 14874                                  
 14875                                  ; 16/10/2022
 14876                                  
 14877                                  ; the code to check extended id is basically a check to see if the
 14878                                  ; volume serial number is still the same. the volume serial number
 14879                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14880                                  ; ds:di points to the bds of the drive under consideration.
 14881                                  ; the bds has fields containing the high and low words 
 14882                                  ; of the volume serial number of the media in the drive.
 14883                                  ; compare these fields to the fields mentioned above. if these fields
 14884                                  ; do not match the media has changed and so we should jump to the code
 14885                                  ; starting at ext_changed else return "i don't know" status
 14886                                  ; in the register used for the changeline status and continue executing
 14887                                  ; the code given below. for temporary storage use the register which
 14888                                  ; has been saved and restored around this block.
 14889                                  ;
 14890                                  ; bds fields in inc\msbds.inc
 14891                                  
 14892                                  		; 19/10/2022
 14893                                  do_ext_check_id:
 14894 000017FC 50                      		push	ax
 14895                                  		;mov	ax, word ptr ds:disksector+27h
 14896                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14897 000017FD A1[7501]                		mov	ax, [disksector+27h]
 14898                                  		; 02/09/2023
 14899 00001800 31F6                    		xor	si, si ; 0
 14900 00001802 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14901 00001806 750C                    		jnz	short ext_changed
 14902 00001808 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14903 0000180B 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14904 0000180F 7503                    		jnz	short ext_changed
 14905                                  		;xor	si, si		; 0
 14906                                  					; don't know
 14907 00001811 58                      		pop	ax
 14908 00001812 EBDD                    		jmp	short vid_no_changed
 14909                                  					; reset the flag
 14910                                  ; ---------------------------------------------------------------------------
 14911                                  
 14912                                  ext_changed:
 14913 00001814 58                      		pop	ax
 14914                                  		; 02/09/2023
 14915 00001815 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14916                                  		;mov	si, 0FFFFh	; -1
 14917                                  					; disk changed!
 14918                                  		; 12/12/2022
 14919                                  		; ('changed_drv' clears cf)
 14920                                  		;clc
 14921 00001816 EBDD                    		jmp	short changed_drv
 14922                                  
 14923                                  ; ---------------------------------------------------------------------------
 14924                                  
 14925                                  ; at i/o time, we detected the error. now we need to determine whether the
 14926                                  ; media was truly changed or not. we return normally if media change unknown.
 14927                                  ; and we pop off the call and jmp to harderr if we see an error.
 14928                                  ;
 14929                                  ; es:di -> bds
 14930                                  
 14931                                  checkio:				
 14932 00001818 80FC06                  		cmp	ah, 6
 14933 0000181B 75D7                    		jnz	short checkfatret
 14934 0000181D E839FF                  		call	chkopcnt
 14935 00001820 74D2                    		jz	short checkfatret
 14936 00001822 E8CEED                  		call	GetBp
 14937 00001825 7212                    		jb	short no_error_map
 14938 00001827 E89DFF                  		call	checkfatvid
 14939 0000182A 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14940 0000182C 09F6                    		or	si, si		; is changed for sure?
 14941 0000182E 7802                    		js	short checkioerr ; yes changed
 14942 00001830 45                      		inc	bp		; allow	a retry
 14943 00001831 C3                      		retn
 14944                                  ; ---------------------------------------------------------------------------
 14945                                  
 14946                                  checkioerr:				
 14947 00001832 E80700                  		call	returnvid
 14948                                  
 14949                                  checkioret:				
 14950 00001835 F9                      		stc			; make sure carry gets passed through
 14951 00001836 E928F3                  		jmp	harderr
 14952                                  ; ---------------------------------------------------------------------------
 14953                                  
 14954                                  no_error_map:				
 14955 00001839 E928F3                  		jmp	harderr2
 14956                                  
 14957                                  ; =============== S U B	R O U T	I N E =======================================
 14958                                  
 14959                                  ; return vid sets up the vid for a return to dos.
 14960                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14961                                  ;  **** trashes si! ****
 14962                                  
 14963                                  returnvid:		
 14964 0000183C BE1600                  		mov	si, 22		; extra
 14965                                  					; offset into pointer to return	value
 14966 0000183F E80700                  		call	vid_into_packet
 14967 00001842 B406                    		mov	ah, 6
 14968 00001844 F9                      		stc
 14969 00001845 C3                      		retn
 14970                                  
 14971                                  ; ---------------------------------------------------------------------------
 14972                                  
 14973                                  ; moves the pointer to the volid for the drive into the original request packet
 14974                                  ; no attempt is made to preserve registers.
 14975                                  ;
 14976                                  ; assumes es:di -> bds
 14977                                  ; **trashes si**
 14978                                  
 14979                                  media_set_vid:				
 14980 00001846 BE0F00                  		mov	si, 15		; trans+1
 14981                                  					; return the value here	in packet
 14982                                  
 14983                                  		; fall into vid_into_packet
 14984                                  
 14985                                  ; =============== S U B	R O U T	I N E =======================================
 14986                                  
 14987                                  ; return pointer to vid in bds at es:di in packet[si]
 14988                                  
 14989                                  		; 19/10/2022
 14990                                  vid_into_packet:
 14991 00001849 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14992 0000184A C51E[1200]              		lds	bx, [ptrsav]
 14993 0000184E 83C74B                  		add	di, 75		; BDS.volid
 14994 00001851 8938                    		mov	[bx+si], di
 14995 00001853 83EF4B                  		sub	di, 75		; BDS.volid
 14996 00001856 8C4002                  		mov	[bx+si+2], es
 14997 00001859 1F                      		pop	ds
 14998                                  dofloppy:	; 18/12/2022
 14999 0000185A C3                      		retn
 15000                                  
 15001                                  ; ---------------------------------------------------------------------------
 15002                                  
 15003                                  ;----------------------------------------------------------------------------
 15004                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 15005                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 15006                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 15007                                  ;   of getbp. for 3.5" media, we just return.
 15008                                  ;
 15009                                  ;   inputs:	es:di point to correct bds for this drive
 15010                                  ;		ah has media byte
 15011                                  ;
 15012                                  ;   outputs:	carry clear
 15013                                  ;		    no registers modified
 15014                                  ;		carry set
 15015                                  ;		    al = sectors/fat
 15016                                  ;		    bh = number of root directory entries
 15017                                  ;		    bl = sectors per track
 15018                                  ;		    cx = number of sectors
 15019                                  ;		    dh = sectors per allocation unit
 15020                                  ;		    dl = number of heads
 15021                                  ;
 15022                                  ;----------------------------------------------------------------------------
 15023                                  
 15024                                  hidensity:
 15025                                  
 15026                                  ; check for correct drive
 15027                                  		
 15028                                  		; 12/12/2022
 15029 0000185B 26F6452302              		test	byte [es:di+23h], 2		
 15030                                  		;test	word [es:di+23h], 2 ; is it special?	
 15031                                  					; [es:di+BDS.flags], fchangeline
 15032 00001860 74F8                    		jz	short dofloppy	; no, do normal floppy test
 15033                                  
 15034                                  ; we have a media byte that is pretty complex. examine drive information
 15035                                  ; table to see what kind it is.
 15036                                  
 15037 00001862 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 15038 00001867 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 15039                                  					; yes, use fatid...
 15040                                  ; 96 tpi drive?
 15041 00001869 80FCF9                  		cmp	ah, 0F9h
 15042 0000186C 75EC                    		jnz	short dofloppy
 15043                                  
 15044                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 15045                                  ;------ a 720K diskette
 15046                                  
 15047                                  		; 02/09/2023 (PCDOS 7.1)
 15048 0000186E 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 15049 00001872 3C07                    		cmp	al, 7
 15050                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 15051                                  					; ffOther
 15052 00001874 7413                    		jz	short Is720K
 15053 00001876 3C09                    		cmp	al, 9
 15054                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 15055                                  					; ff288
 15056 00001878 740F                    		jz	short Is720K
 15057 0000187A B007                    		mov	al, 7		; seven	sectors	/ fat
 15058 0000187C BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 15059                                  					; 224 root dir entries
 15060                                  					; & 0Fh sector max
 15061 0000187F B96009                  		mov	cx, 2400	; 80*15*2
 15062                                  					; 80 tracks, 15 sectors/track,
 15063                                  					; 2 sides
 15064                                  		; 02/09/2023
 15065 00001882 5A                      		pop	dx		; pop off return address
 15066 00001883 BA0201                  		mov	dx, 258		; 1*256+2
 15067                                  					; sectors/allocation unit
 15068                                  					; & head max
 15069                                  		;add	sp, 2		; pop off return address
 15070 00001886 E9D3ED                  		jmp	Has1		; return to tail of getbp
 15071                                  ; ---------------------------------------------------------------------------
 15072                                  
 15073                                  Is720K:
 15074                                  		; 02/09/2023
 15075 00001889 5B                      		pop	bx		; pop off return address
 15076                                  		;add	sp, 2		; pop off return address
 15077 0000188A E99CED                  		jmp	Has720K		; return to 720K code
 15078                                  ; ---------------------------------------------------------------------------
 15079                                  
 15080                                  		; 18/12/2022
 15081                                  ;dofloppy:				
 15082                                  		;retn
 15083                                  
 15084                                  ; =============== S U B	R O U T	I N E =======================================
 15085                                  
 15086                                  ; 16/10/2022
 15087                                  
 15088                                  ;---------------------------------------------------------------------------
 15089                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 15090                                  ;		   essentially used to indicate changeline, or format.
 15091                                  ;
 15092                                  ;   inputs:	dl contains physical drive number
 15093                                  ;		bx contains bits to set in the flag field in the bdss
 15094                                  ;   outputs:	none
 15095                                  ;   registers modified: flags
 15096                                  ;
 15097                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 15098                                  ;
 15099                                  ; in the virtual drive system we *must* flag the other drives as being changed
 15100                                  ;---------------------------------------------------------------------------
 15101                                  
 15102                                  set_changed_dl:	
 15103 0000188D 06                      		push	es
 15104 0000188E 57                      		push	di
 15105                                  		;les	di, ds:start_bds
 15106                                  		; 19/10/2022
 15107 0000188F C43E[1901]              		les	di, [start_bds]
 15108                                  
 15109                                  ; note: we assume that the list is non-empty
 15110                                  
 15111                                  scan_bds:				
 15112 00001893 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 15113 00001897 7504                    		jnz	short get_next_bds
 15114                                  
 15115                                  ; someone may complain, but this *always* must be done when a disk change is
 15116                                  ; noted. there are *no* other compromising circumstances.
 15117                                  
 15118 00001899 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 15119                                  					; signal change	on other drive
 15120                                  get_next_bds:				
 15121 0000189D 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 15122                                  					; go to	next bds
 15123 000018A0 83FFFF                  		cmp	di, 0FFFFh
 15124 000018A3 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 15125 000018A5 5F                      		pop	di
 15126 000018A6 07                      		pop	es
 15127 000018A7 C3                      		retn
 15128                                  
 15129                                  ; =============== S U B	R O U T	I N E =======================================
 15130                                  
 15131                                  ;---------------------------------------------------------------------------
 15132                                  ; checkromchange - see if external program has diddled rom change line.
 15133                                  ;
 15134                                  ;   inputs:	es:di points to current bds.
 15135                                  ;   outputs:	zero set - no change
 15136                                  ;		zero reset - change
 15137                                  ;   registers modified: none
 15138                                  ;---------------------------------------------------------------------------
 15139                                  
 15140                                  checkromchange:	
 15141                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 15142                                  		; 10/12/2022
 15143 000018A8 26F6452340              		test	byte [es:di+23h], 40h
 15144                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 15145                                  					; fchanged
 15146 000018AD C3                      		retn
 15147                                  
 15148                                  ; =============== S U B	R O U T	I N E =======================================
 15149                                  
 15150                                  ;---------------------------------------------------------------------------
 15151                                  ; resetchanged - restore value of change line
 15152                                  ;
 15153                                  ;   inputs:	es:di points to current bds
 15154                                  ;   outputs:	none
 15155                                  ;   registers modified: none
 15156                                  ;---------------------------------------------------------------------------
 15157                                  
 15158                                  resetchanged:	
 15159                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 15160                                  		; 10/12/2022
 15161 000018AE 26806523BF              		and	byte [es:di+23h], 0BFh
 15162                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 15163                                  					; ~fchanged
 15164 000018B3 C3                      		retn
 15165                                  
 15166                                  ; =============== S U B	R O U T	I N E =======================================
 15167                                  
 15168                                  ;---------------------------------------------------------------------------
 15169                                  ; haschange - see if drive can supply change line
 15170                                  ;
 15171                                  ;   inputs:	es:di points to current bds
 15172                                  ;   outputs:	zero set - no change line available
 15173                                  ;		zero reset - change line available
 15174                                  ;   registers modified: none
 15175                                  ;---------------------------------------------------------------------------
 15176                                  
 15177                                  haschange:
 15178                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 15179                                  		; 10/12/2022
 15180 000018B4 26F6452302              		test	byte [es:di+23h], 2		
 15181                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 15182                                  					; fchangeline
 15183 000018B9 C3                      		retn
 15184                                  
 15185                                  ; ---------------------------------------------------------------------------
 15186                                  
 15187                                  ; 16/10/2022
 15188                                  
 15189                                  ;-------------------------------------------------------------------------
 15190                                  ; set_volume_id      -	main routine, calls other routines.
 15191                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 15192                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 15193                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 15194                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 15195                                  ;-------------------------------------------------------------------------
 15196                                  
 15197                                  ; set_volume_id
 15198                                  ;   if drive has changeline support, read in and set the volume_id
 15199                                  ; and the last fat_id byte. if no change line support then do nothing.
 15200                                  ;
 15201                                  ;   on entry:
 15202                                  ;	es:di points to the bds for this disk.
 15203                                  ;	ah contains media byte
 15204                                  ;
 15205                                  ;   on exit:
 15206                                  ;	carry clear:
 15207                                  ;	   successful call
 15208                                  ;	carry set
 15209                                  ;	   error and ax has error code
 15210                                  
 15211                                  set_volume_id:				
 15212 000018BA 52                      		push	dx		; save registers
 15213 000018BB 50                      		push	ax
 15214 000018BC E8F5FF                  		call	haschange	; does drive have changeline support?
 15215 000018BF 740B                    		jz	short setvret	; no, get out
 15216 000018C1 E81000                  		call	read_volume_id
 15217 000018C4 7209                    		jb	short seterr
 15218 000018C6 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 15219 000018C9 E8E2FF                  		call	resetchanged	; restore value	of change line
 15220                                  setvret:				
 15221                                  		; 10/12/2022
 15222                                  		; cf = 0
 15223                                  		;clc			; no error, clear carry flag
 15224 000018CC 58                      		pop	ax		; restore registers
 15225 000018CD 5A                      		pop	dx
 15226 000018CE C3                      		retn
 15227                                  ; ---------------------------------------------------------------------------
 15228                                  
 15229                                  seterr:					
 15230 000018CF 5A                      		pop	dx		; pop stack but don't overwrite ax
 15231 000018D0 5A                      		pop	dx		; restore dx
 15232 000018D1 C3                      		retn
 15233                                  ; ---------------------------------------------------------------------------
 15234 000018D2 0000                    root_sec:	dw 0			; root sector #
 15235                                  
 15236                                  ; 16/10/2022
 15237                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 15238                                  ; 09/12/2022
 15239                                  ROOTSEC equ root_sec
 15240                                  
 15241                                  ; =============== S U B	R O U T	I N E =======================================
 15242                                  
 15243                                  ; 16/10/2022
 15244                                  
 15245                                  ; read_volume_id read the volume id and tells if it has been changed.
 15246                                  ;
 15247                                  ;   on entry:
 15248                                  ;	es:di points to current bds for drive.
 15249                                  ;
 15250                                  ;   on exit:
 15251                                  ;	carry clear
 15252                                  ;	    si = 1  no change
 15253                                  ;	    si = 0  ?
 15254                                  ;	    si = -1 change
 15255                                  ;
 15256                                  ;	carry set:
 15257                                  ;	    error and ax has error code.
 15258                                  
 15259                                  read_volume_id:
 15260 000018D4 52                      		push	dx		; preserve registers
 15261 000018D5 51                      		push	cx
 15262 000018D6 53                      		push	bx
 15263 000018D7 50                      		push	ax
 15264 000018D8 06                      		push	es		; stack the bds last
 15265 000018D9 57                      		push	di
 15266 000018DA 1E                      		push	ds		; point es to Bios_Data
 15267 000018DB 07                      		pop	es
 15268 000018DC BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15269 000018DF BE[F408]                		mov	si, nul_vid	; "NO NAME	 "
 15270 000018E2 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 15271 000018E5 F3A4                    		rep movsb
 15272 000018E7 5F                      		pop	di
 15273 000018E8 07                      		pop	es
 15274 000018E9 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 15275                                  					; # of fats
 15276 000018ED 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 15277                                  					; sectors / fat
 15278 000018F1 F6E1                    		mul	cl		; size taken by	fats
 15279 000018F3 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 15280                                  					; add on reserved sectors
 15281                                  					;
 15282                                  					; ax is	now sector # (0	based)
 15283                                  		; 17/10/2022
 15284 000018F7 2EA3[D218]              		mov	[cs:ROOTSEC], ax
 15285                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 15286                                  					; 0070h:3EFFh =	2C7h:198Fh
 15287 000018FB 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 15288                                  					; # root dir entries
 15289 000018FF B104                    		mov	cl, 4		; 16 entries/sector
 15290 00001901 D3E8                    		shr	ax, cl		; divide by 16
 15291                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 15292                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 15293 00001903 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 15294                                  next_sec:				
 15295 00001904 51                      		push	cx		; save outer loop counter
 15296 00001905 2EA1[D218]              		mov	ax, [cs:ROOTSEC]
 15297                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 15298                                  					; get sector #
 15299 00001909 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 15300                                  					; sectors / track
 15301 0000190D 31D2                    		xor	dx, dx
 15302 0000190F F7F1                    		div	cx
 15303                                  
 15304                                  ; set up registers for call to read_sector
 15305                                  
 15306 00001911 42                      		inc	dx		; dx= sectors into track
 15307                                  					; ax= track count from 0
 15308 00001912 88D1                    		mov	cl, dl		; sector to read
 15309 00001914 31D2                    		xor	dx, dx
 15310 00001916 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 15311                                  					; # heads on this disc
 15312 0000191A 88D6                    		mov	dh, dl		; head number
 15313 0000191C 88C5                    		mov	ch, al		; track	#
 15314 0000191E E849EE                  		call	read_sector	; get first sector of the root directory,
 15315                                  					; ds:bx	-> directory sector
 15316 00001921 723F                    		jb	short readviderr
 15317 00001923 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 15318 00001926 B008                    		mov	al, 8		; volume label bit
 15319                                  fvid_loop:				
 15320                                  		; 02/09/2023 (PCDOS 7.1)
 15321 00001928 382F                    		cmp	[bx], ch ; 0
 15322                                  		;cmp	byte [bx], 0 ; end of dir?
 15323 0000192A 7433                    		jz	short no_vid	; yes, no vol id
 15324 0000192C 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 15325 0000192F 7405                    		jz	short ent_loop	; yes, skip
 15326 00001931 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 15327 00001934 750F                    		jnz	short found_vid	; jmp yes
 15328                                  ent_loop:				
 15329 00001936 83C320                  		add	bx, 32		; add length of	directory entry
 15330 00001939 E2ED                    		loop	fvid_loop
 15331 0000193B 59                      		pop	cx		; outer loop
 15332 0000193C 2EFF06[D218]            		inc	word [cs:ROOTSEC]
 15333                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 15334                                  					; next sector
 15335 00001941 E2C1                    		loop	next_sec	; continue
 15336                                  notfound:
 15337                                  		; 02/09/2023
 15338                                  		;xor	si, si
 15339 00001943 EB13                    		jmp	short fvid_ret
 15340                                  ; ---------------------------------------------------------------------------
 15341                                  
 15342                                  found_vid:
 15343                                  		; 02/09/2023
 15344                                  		; cf = 0  ('test' instruction clears cf)				
 15345 00001945 59                      		pop	cx		; clean stack of outer loop counter
 15346 00001946 89DE                    		mov	si, bx		; point	to volume_id
 15347 00001948 06                      		push	es		; preserve current bds
 15348 00001949 57                      		push	di
 15349 0000194A 1E                      		push	ds
 15350 0000194B 07                      		pop	es		; point es to Bios_Data
 15351 0000194C BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15352 0000194F B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 15353                                  					; length of string minus nul
 15354 00001952 F3A4                    		rep movsb		; mov volume label to tmp_vid
 15355                                  		;xor	al, al
 15356                                  		; 02/09/2023
 15357 00001954 91                      		xchg	ax, cx		; ax = 0
 15358 00001955 AA                      		stosb			; null terminate
 15359                                  		;;xor	si, si
 15360                                  		; 02/09/2023
 15361                                  		;xchg	ax, si		; si = 0
 15362 00001956 5F                      		pop	di		; restore current bds
 15363 00001957 07                      		pop	es
 15364                                  fvid_ret:
 15365                                  		; 02/09/2023
 15366 00001958 31F6                    		xor	si, si ; 0
 15367                                  				
 15368 0000195A 58                      		pop	ax
 15369                                  		; 10/12/2022
 15370                                  		; cf = 0
 15371                                  		;clc
 15372                                  rvidret:				
 15373 0000195B 5B                      		pop	bx		; restore registers
 15374 0000195C 59                      		pop	cx
 15375 0000195D 5A                      		pop	dx
 15376 0000195E C3                      		retn
 15377                                  ; ---------------------------------------------------------------------------
 15378                                  
 15379                                  no_vid:
 15380 0000195F 59                      		pop	cx		; clean stack of outer loop counter
 15381                                  		;jmp	short notfound	; not found
 15382                                  		; 02/09/2023
 15383 00001960 EBF6                    		jmp	short fvid_ret
 15384                                  ; ---------------------------------------------------------------------------
 15385                                  
 15386                                  readviderr:				
 15387 00001962 5E                      		pop	si		; trash the outer loop counter
 15388 00001963 5E                      		pop	si		; caller's ax, return error code instead 
 15389 00001964 EBF5                    		jmp	short rvidret
 15390                                  
 15391                                  ; ---------------------------------------------------------------------------
 15392                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 15393                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 15394                                  preset_volid_addr:
 15395 00001966 BE[0009]                		mov	si, tmp_vid	; "NO NAME    "
 15396                                  		;
 15397                                  		; PCDOS 7.1
 15398                                  		;add	di, 125		; BDS.volid
 15399                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 15400                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 15401 00001969 83C74B                  		add	di, 75		; BDS.volid
 15402 0000196C B90C00                  		mov	cx, 12		; VOLID_SIZ
 15403                                  		;
 15404 0000196F FC                      		cld
 15405 00001970 C3                      		retn
 15406                                  
 15407                                  ; =============== S U B	R O U T	I N E =======================================
 15408                                  
 15409                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 15410                                  ;
 15411                                  ; inputs:	es:di has current bds
 15412                                  ; outputs:	bds for drive has volume id from tmp
 15413                                  
 15414                                  transfer_volume_id:
 15415 00001971 57                      		push	di		; copy the volume id from tmp to special drive
 15416                                  		;push	si
 15417 00001972 51                      		push	cx
 15418                                  		; 27/12/2023
 15419 00001973 56                      		push	si
 15420                                  
 15421                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15422                                  		;;add	di, BDS.volid
 15423                                  		;add	di, 75		; BDS.volid
 15424                                  		;;mov	cx, VOLID_SIZ
 15425                                  		;mov	cx, 12		; VOLID_SIZ
 15426                                  		;cld
 15427                                  		; 02/09/2023 (PCDOS 7.1)
 15428 00001974 E8EFFF                  		call	preset_volid_addr
 15429                                  
 15430 00001977 F3A4                    		rep movsb
 15431                                  		
 15432                                  		; 27/12/2023
 15433 00001979 5E                      		pop	si
 15434                                  chk_volid_ok:
 15435 0000197A 59                      		pop	cx
 15436                                  		;pop	si
 15437 0000197B 5F                      		pop	di
 15438 0000197C C3                      		retn
 15439                                  
 15440                                  ; =============== S U B	R O U T	I N E =======================================
 15441                                  
 15442                                  ;  check_volume_id - compare volume id in tmp area with
 15443                                  ;		     one expected for drive
 15444                                  ;
 15445                                  ;   inputs:	es:di has current bds for drive
 15446                                  ;   outputs:	zero true means it matched
 15447                                  
 15448                                  check_volume_id:
 15449 0000197D 57                      		push	di
 15450 0000197E 51                      		push	cx
 15451                                  		
 15452                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15453                                  		;;add	di, BDS.volid
 15454                                  		;add	di, 75		; BDS.volid
 15455                                  		;;mov	cx, VOLID_SIZ
 15456                                  		;mov	cx, 12		; VOLID_SIZ
 15457                                  		;cld
 15458                                  		; 02/09/2023 (PCDOS 7.1)
 15459 0000197F E8E4FF                  		call	preset_volid_addr
 15460                                  
 15461 00001982 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 15462                                  		
 15463                                  		; 27/12/2023
 15464                                  		;pop	cx
 15465                                  		;pop	di
 15466                                  		;retn
 15467 00001984 EBF4                    		jmp	short chk_volid_ok
 15468                                  
 15469                                  ; =============== S U B	R O U T	I N E =======================================
 15470                                  
 15471                                  ;   fat_check - see of the fatid has changed in the specified drive.
 15472                                  ;	      - uses the fat id obtained from the boot sector.
 15473                                  ;
 15474                                  ;   inputs:	medbyt is expected fat id
 15475                                  ;		es:di points to current bds
 15476                                  ;
 15477                                  ;   output:	si = -1 if fat id different,
 15478                                  ;		si = 0 otherwise
 15479                                  ;
 15480                                  ;   no other registers changed.
 15481                                  
 15482                                  fat_check:
 15483 00001986 50                      		push	ax
 15484 00001987 31F6                    		xor	si, si		; say fat id's are same.
 15485 00001989 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 15486 0000198C 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 15487                                  					; compare it with the bds medbyte
 15488 00001990 7401                    		jz	short okret1	; carry	clear
 15489 00001992 4E                      		dec	si
 15490                                  okret1:
 15491 00001993 58                      		pop	ax
 15492 00001994 C3                      		retn
 15493                                  
 15494                                  ; ---------------------------------------------------------------------------
 15495                                  
 15496                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 15497                                  		;times 7 db 0
 15498                                  
 15499                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)
 15500                                  
 15501                                  		; 09/12/2022
 15502                                  		;times 4 db 0	; 17/10/2022
 15503                                  		;db 4 dup(0)	; times 4 db 0
 15504                                  
 15505                                  ; ---------------------------------------------------------------------------
 15506                                  
 15507                                  		; 09/12/2022
 15508                                  		;db 0
 15509                                  
 15510                                  number2div	equ ($-BCode_start)
 15511                                  number2mod	equ (number2div % 16)
 15512                                  
 15513                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 15514 00001995 00<rep Bh>              		times (16-number2mod) db 0
 15515                                  %endif
 15516                                  
 15517                                  ;align 16
 15518                                  
 15519                                  ; 09/12/2022
 15520                                  BCODE_END	equ $ - BCode_start
 15521                                  ; 29/09/2023
 15522                                  BCODEEND:
 15523                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 15524                                  ; 13/12/2022
 15525                                  SYSINITOFFSET	equ BCODE_END
 15526                                  ; 29/09/2023
 15527                                  ;SYSINITOFFSET	equ $-$$
 15528                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 15529                                  
 15530                                  ; 28/09/2023
 15531                                  S2SIZE equ $-$$
 15532                                  
 15533                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 15534                                  
 15535                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15536                                  ; 01/05/2019 - Retro DOS v4.0 
 15537                                  ; ============================================================================
 15538                                  ; end of BIOSCODE
 15539                                  
 15540                                  ; ----------------------------------------------------------------------------
 15541                                  ; %include sysinit5.s	; 09/12/2022
 15542                                  ; ----------------------------------------------------------------------------
 15543                                  
 15544                                  ;=============================================================================
 15545                                  ; (IO.SYS) SYSINIT SEGMENT 
 15546                                  ;=============================================================================
 15547                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15548                                  
 15549                                  section .SYSINIT vstart=0
 15550                                  
 15551                                  ; ****************************************************************************
 15552                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15553                                  ; ----------------------------------------------------------------------------
 15554                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 15555                                  ; ----------------------------------------------------------------------------
 15556                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15557                                  ; ----------------------------------------------------------------------------
 15558                                  ; Assembler: NASM version 2.15
 15559                                  ; ----------------------------------------------------------------------------
 15560                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 15561                                  ; ----------------------------------------------------------------------------
 15562                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15563                                  ; ----------------------------------------------------------------------------
 15564                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15565                                  ; source code by Microsoft, 1991 
 15566                                  ; ----------------------------------------------------------------------------
 15567                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15568                                  ; by Microsoft, 12/10/1983
 15569                                  ; ****************************************************************************
 15570                                  ; main file: 'retrodos4.s'
 15571                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15572                                  
 15573                                  ; 21/10/2022
 15574                                  ; ----------------------------------------------------------------------------
 15575                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15576                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15577                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15578                                  ; ----------------------------------------------------------------------------
 15579                                  ; Binary file splitter & joiner: FFSJ v3.3
 15580                                  
 15581                                  ;--------------------------------------------------------------
 15582                                  ; SYSINIT.TXT (27/01/1983)
 15583                                  ;--------------------------------------------------------------
 15584                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15585                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15586                                  ;performed any  initialization  it  needs  to  do.   Control is
 15587                                  ;transfered with a long jump to the external  variable  SYSINIT
 15588                                  ;
 15589                                  ;
 15590                                  ;   The OEM  has  the  following  variables declared external:
 15591                                  ;
 15592                                  ;   CURRENT_DOS_LOCATION    WORD
 15593                                  ;
 15594                                  ;This word  contains  the  segment  number of the DOS before it
 15595                                  ;is relocated.  The OEM bios must set this value.
 15596                                  ;
 15597                                  ;   FINAL_DOS_LOCATION      WORD
 15598                                  ;
 15599                                  ;This word contains the segment number of the DOS after SYSINIT
 15600                                  ;moves it.  The OEM bios must set this value.
 15601                                  ;
 15602                                  ;   DEVICE_LIST             DWORD
 15603                                  ;
 15604                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15605                                  ;character and block device drivers.  The  OEM  must  set  this
 15606                                  ;value.
 15607                                  ;
 15608                                  ;   MEMORY_SIZE             WORD
 15609                                  ;
 15610                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15611                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15612                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15613                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15614                                  ;and read it back until it gets a mismatch.
 15615                                  ;
 15616                                  ;   DEFAULT_DRIVE           BYTE
 15617                                  ;
 15618                                  ;This is  the initial default drive when the system first comes
 15619                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15620                                  ;it then drive a is assumed.
 15621                                  ;
 15622                                  ;   BUFFERS                 BYTE
 15623                                  ;
 15624                                  ;This is  the  default  number of buffers for the system.  This
 15625                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15626                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15627                                  ;
 15628                                  ;   FILES                   BYTE
 15629                                  ;
 15630                                  ;This is  the  default  number  of  files for the system.  This
 15631                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15632                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15633                                  ;
 15634                                  ;   SYSINIT                 FAR
 15635                                  ;
 15636                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15637                                  ;this label at the end of its INIT code.
 15638                                  ;
 15639                                  ;   The OEM  has  the  following  variables declared public:
 15640                                  ;
 15641                                  ;   RE_INIT                 FAR
 15642                                  ;
 15643                                  ;This is an entry point which allows the BIOS to do some INIT
 15644                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15645                                  ;PRESERVED.  On entry DS points to the first available memory
 15646                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15647                                  ;prefix which represents  the  "program"  currently  running.
 15648                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15649                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15650                                  ;that  no  memory  is  allocated to it, it is running in free
 15651                                  ;memory.
 15652                                  ;NOTES:
 15653                                  ;     At the time this routine is called SYSINIT occupies the
 15654                                  ;highest 10K of memory ("highest" is determined by the  value
 15655                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15656                                  ;     Since this is called AFTER DOS is initialized, you can
 15657                                  ;make system calls.  This also implies that the code for this
 15658                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15659                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15660                                  ;     If you don't want  anything done just set this to point
 15661                                  ;at a FAR RET instruction.
 15662                                  
 15663                                  ; ----------------------------------------------------------------------
 15664                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15665                                  ; ----------------------------------------------------------------------
 15666                                  
 15667                                  ;include version.inc
 15668                                  ; ----------------------------------------------------------------------
 15669                                  
 15670                                  ;FALSE   EQU     0
 15671                                  ;TRUE    EQU     0FFFFh
 15672                                  
 15673                                  ;IBMVER	    EQU     TRUE
 15674                                  ;IBMCOPYRIGHT EQU   FALSE
 15675                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15676                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15677                                  ;MSVER      EQU     FALSE
 15678                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15679                                  ;KANJI      EQU     FALSE
 15680                                  
 15681                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15682                                  ; ----------------------------------------------------------------------
 15683                                  ;MAJOR_VERSION  EQU	6
 15684                                  ;;MINOR_VERSION	EQU	0	;6.00
 15685                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15686                                  
 15687                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15688                                  ; ----------------------------------------------------------------------
 15689                                  MAJOR_VERSION   EQU	5
 15690                                  MINOR_VERSION   EQU	0
 15691                                  
 15692                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15693                                  
 15694                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15695                                  				; currently 0.
 15696                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15697                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15698                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15699                                  
 15700                                  ;      if1
 15701                                  ;      %OUT  ... for DOS Version 5.00 ...
 15702                                  ;      endif
 15703                                  
 15704                                         ;******************************
 15705                                         ;Each assembler program should:
 15706                                         ;  mov ah,030h                   ;DOS Get Version function
 15707                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15708                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15709                                         ;  jne error_handler             ; EXACT version match.
 15710                                         ;******************************
 15711                                  
 15712                                  ; ----------------------------------------------------------------------
 15713                                  ; device definitions
 15714                                  
 15715                                  ;Attribute bit masks
 15716                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15717                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15718                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15719                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15720                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15721                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15722                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15723                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15724                                  
 15725                                  ; The device table list has the form:
 15726                                  struc	SYSDEV
 15727 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15728 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15729 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15730 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15731 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15732                                  .size:
 15733                                  endstruc
 15734                                  
 15735                                  ;Static Reguest Header
 15736                                  struc	SRHEAD
 15737 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15738 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15739 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15740 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15741 00000005 ????????????????                	resb 8		;Reserved for queue links
 15742                                  .size:
 15743                                  endstruc
 15744                                  
 15745                                  ;Status word masks
 15746                                  STERR   EQU     8000H           ;Bit 15 - Error
 15747                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15748                                  STDON   EQU     0100H           ;Bit 8 - Done
 15749                                  STECODE EQU     00FFH           ;Error code
 15750                                  WRECODE EQU     0
 15751                                  
 15752                                  ;Function codes
 15753                                  DEVINIT EQU     0               ;Initialization
 15754                                  DINITHL EQU     26              ;Size of init header
 15755                                  DEVMDCH EQU     1               ;Media check
 15756                                  DMEDHL  EQU     15              ;Size of media check header
 15757                                  DEVBPB  EQU     2               ;Get BPB
 15758                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15759                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15760                                  DEVRD   EQU     4               ;Read
 15761                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15762                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15763                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15764                                  DEVIST  EQU     6               ;Input status
 15765                                  DSTATHL EQU     13              ;Size of status header
 15766                                  DEVIFL  EQU     7               ;Input flush
 15767                                  DFLSHL  EQU     15              ;Size of flush header
 15768                                  DEVWRT  EQU     8               ;Write
 15769                                  DEVWRTV EQU     9               ;Write with verify
 15770                                  DEVOST  EQU     10              ;Output status
 15771                                  DEVOFL  EQU     11              ;Output flush
 15772                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15773                                  
 15774                                  ; ----------------------------------------------------------------------
 15775                                  struc	SYS_FCB
 15776 00000000 ??                      .fcb_drive:	resb 1
 15777 00000001 ????????????????        .fcb_name:	resb 8
 15778 00000009 ??????                  .fcb_ext:	resb 3
 15779 0000000C ????                    .fcb_EXTENT:	resw 1
 15780 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15781 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15782                                                          ; word
 15783 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15784 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15785 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15786 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15787                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15788                                                          ; If file, bit 6=0 if dirty
 15789                                                          ; If I/O device, bit 6=0 if EOF (input)
 15790                                                          ;               Bit 5=1 if Raw mode
 15791                                                          ;               Bit 0=1 if console input device
 15792                                                          ;               Bit 1=1 if console output device
 15793                                                          ;               Bit 2=1 if null device
 15794                                                          ;               Bit 3=1 if clock device
 15795 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15796 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15797 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15798 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15799 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15800 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15801                                  .size:
 15802                                  endstruc
 15803                                  
 15804                                  ; ----------------------------------------------------------------------
 15805                                  ; Field definition for I/O buffer information
 15806                                  
 15807                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15808                                  
 15809                                  struc buffinfo
 15810 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15811 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15812 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15813                                  			; SFT table index (bit 7 = 1)
 15814                                  			; = FFh if buffer free
 15815 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15816                                  			;	= 0 if Local device buffer
 15817                                  			; Bit 6 = 1 if buffer dirty
 15818                                  			; Bit 5 = Reserved
 15819                                  			; Bit 4 = Search bit (bit 7 = 1)
 15820                                  			; Bit 3 = 1 if buffer is DATA
 15821                                  			; Bit 2 = 1 if buffer is DIR
 15822                                  			; Bit 1 = 1 if buffer is FAT
 15823                                  			; Bit 0 = Reserved
 15824 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15825                                  ; The next two items are often refed as a word (bit 7 = 0)
 15826 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15827 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15828 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15829 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15830 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15831                                  .size:
 15832                                  endstruc
 15833                                  
 15834                                  %define buf_offset	dword [buf_sector]
 15835                                  			;For bit 7 = 1, this is the byte
 15836                                  			;offset of the start of the buffer in
 15837                                  			;the file pointed to by buf_ID.  Thus
 15838                                  			;the buffer starts at location
 15839                                  			;buf_offset in the file and contains
 15840                                  			;buf_fill bytes.
 15841                                  
 15842                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15843                                  
 15844                                  
 15845                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15846                                  
 15847                                  ;Flag byte masks
 15848                                  buf_isnet	EQU	10000000B
 15849                                  buf_dirty	EQU	01000000B
 15850                                  ;***
 15851                                  buf_visit	EQU	00100000B
 15852                                  ;***
 15853                                  buf_snbuf	EQU	00010000B
 15854                                  
 15855                                  buf_isDATA	EQU	00001000B
 15856                                  buf_isDIR	EQU	00000100B
 15857                                  buf_isFAT	EQU	00000010B
 15858                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15859                                  
 15860                                  buf_NetID	EQU	bufinsiz
 15861                                  
 15862                                  ; ----------------------------------------------------------------------
 15863                                  
 15864                                  ; ----------------------------------------------------------------------
 15865                                  ;**	DPB - Drive Parameter Block
 15866                                  
 15867                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15868                                  
 15869                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15870                                  ;	possibly inaccurate deductions from code study... - jgl
 15871                                  ;
 15872                                  ;	The DPB is DOS's main structure for describing block devices.
 15873                                  ;	It contains info about the "Drive" intermingled with info about
 15874                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15875                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15876                                  ;
 15877                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15878                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15879                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15880                                  
 15881                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15882                                  
 15883                                  ; 12/05/2019 - Retro DOS v4.0
 15884                                  
 15885                                  struc	DPB
 15886 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15887 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15888 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15889 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15890 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15891 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15892 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15893 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15894 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15895 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15896                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15897 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15898 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15899 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15900 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15901 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15902                                  				; check the first time this DPB is used
 15903 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15904 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15905 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15906                                  .size:
 15907                                  endstruc
 15908                                  
 15909                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15910                                  
 15911                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15912                                  
 15913                                  ; ----------------------------------------------------------------------
 15914                                  ; 26/03/2018
 15915                                  
 15916                                  ; IOCTL SUB-FUNCTIONS
 15917                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15918                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15919                                  IOCTL_READ_HANDLE	EQU	2
 15920                                  IOCTL_WRITE_HANDLE	EQU	3
 15921                                  IOCTL_READ_DRIVE	EQU	4
 15922                                  IOCTL_WRITE_DRIVE	EQU	5
 15923                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15924                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15925                                  IOCTL_CHANGEABLE?	EQU	8
 15926                                  IOCTL_SHARING_RETRY	EQU	11
 15927                                  GENERIC_IOCTL_HANDLE	EQU	12
 15928                                  GENERIC_IOCTL		EQU	13
 15929                                  
 15930                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15931                                  RAWIO			EQU	8
 15932                                  
 15933                                  ; RAWIO SUB-FUNCTIONS
 15934                                  GET_DEVICE_PARAMETERS	EQU	60H
 15935                                  SET_DEVICE_PARAMETERS	EQU	40H
 15936                                  READ_TRACK		EQU	61H
 15937                                  WRITE_TRACK		EQU	41H
 15938                                  VERIFY_TRACK		EQU	62H
 15939                                  FORMAT_TRACK		EQU	42H
 15940                                  
 15941                                  ; DEVICETYPE VALUES
 15942                                  MAX_SECTORS_IN_TRACK	EQU	63
 15943                                  DEV_5INCH		EQU	0
 15944                                  DEV_5INCH96TPI		EQU	1
 15945                                  DEV_3INCH720KB		EQU	2
 15946                                  DEV_8INCHSS		EQU	3
 15947                                  DEV_8INCHDS		EQU	4
 15948                                  DEV_HARDDISK		EQU	5
 15949                                  DEV_OTHER		EQU	7
 15950                                  ;DEV_3INCH1440KB	EQU	7
 15951                                  DEV_3INCH2880KB		EQU	9
 15952                                  ; Retro DOS v2.0 - 26/03/2018
 15953                                  ;;DEV_TAPE		EQU	6
 15954                                  ;;DEV_ERIMO		EQU	8
 15955                                  ;DEV_3INCH2880KB	EQU	9
 15956                                  DEV_3INCH1440KB		EQU	10
 15957                                  
 15958                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15959                                  					; CURRENTLY SUPPORT.
 15960                                  MAX_DEV_TYPE		EQU	10
 15961                                  
 15962                                  struc A_SECTORTABLE
 15963 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15964 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15965                                  .size:
 15966                                  endstruc
 15967                                  
 15968                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15969                                  
 15970                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15971                                  ;
 15972                                  ;	The BPB contains information about the disk structure.  It dates
 15973                                  ;	back to the earliest FAT systems and so FAT information is
 15974                                  ;	intermingled with physical driver information.
 15975                                  ;
 15976                                  ;	A boot sector contains a BPB for its device; for other disks
 15977                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15978                                  ;	information in the DPB.
 15979                                  ;
 15980                                  ;	The BDS structure contains a BPB within it.
 15981                                  
 15982                                  struc A_BPB
 15983 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15984 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15985 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15986 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15987 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15988 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15989 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15990 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15991 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15992 0000000F ????                    .BPB_HEADS:		resw	1
 15993 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15994 00000013 ????                    			resw	1
 15995 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15996 00000017 ????                    			resw	1
 15997 00000019 ????????????            			resb	6	; NOTE:  many times these
 15998                                  ;					; 	 6 bytes are omitted
 15999                                  ;					;	 when BPB manipulations
 16000                                  ;					;	 are performed!
 16001                                  .size:
 16002                                  endstruc
 16003                                  
 16004                                  struc A_DEVICEPARAMETERS
 16005 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 16006 00000001 ??                      .DP_DEVICETYPE:		resb	1
 16007 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 16008 00000004 ????                    .DP_CYLINDERS:		resw	1
 16009 00000006 ??                      .DP_MEDIATYPE:		resb	1
 16010 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 16011 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 16012 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 16013                                  endstruc
 16014                                  
 16015                                  ; ----------------------------------------------------------------------
 16016                                  ; structure, equates for devmark for mem command.
 16017                                  
 16018                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 16019                                  
 16020                                  struc devmark
 16021 00000000 ??                       .id:	    resb 1
 16022 00000001 ????                     .seg:	    resw 1
 16023 00000003 ????                     .size:	    resw 1
 16024 00000005 ??????                   .dum:	    resb 3
 16025 00000008 ????????????????         .filename: resb 8
 16026                                  endstruc
 16027                                  
 16028                                  devmark_stk	equ	'S'
 16029                                  devmark_device	equ	'D'
 16030                                  devmark_ifs	equ	'I'
 16031                                  devmark_buf	equ	'B'
 16032                                  devmark_cds	equ	'L' ; lastdrive
 16033                                  devmark_files	equ	'F'
 16034                                  devmark_fcbs	equ	'X'
 16035                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 16036                                  devmark_ems_stub equ	'E'
 16037                                  
 16038                                  setbrkdone	equ	00000001b
 16039                                  for_devmark	equ	00000010b
 16040                                  not_for_devmark equ	11111101b
 16041                                  
 16042                                  ; ----------------------------------------------------------------------
 16043                                  ; Memory arena structure
 16044                                  
 16045                                  ; 24/03/2019 - Retro DOS v4.0 
 16046                                  ; (MSDOS 6.0, ARENA.INC)
 16047                                  
 16048                                  ;** Arena Header
 16049                                  
 16050                                  struc ARENA
 16051 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 16052 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 16053 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 16054 00000005 ??????                  .RESERVED	resb 3		; reserved
 16055 00000008 ????????????????        .NAME:		resb 8		; owner file name
 16056                                  endstruc
 16057                                  
 16058                                  ; 12/04/2019
 16059                                  
 16060                                  arena_owner_system	EQU 0	; free block indication
 16061                                  
 16062                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 16063                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 16064                                  
 16065                                  ; ----------------------------------------------------------------------
 16066                                  ; Process data block (otherwise known as program header)
 16067                                  
 16068                                  ; 23/03/2019 - Retro DOS v4.0
 16069                                  
 16070                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 16071                                  
 16072                                  FILPERPROC	EQU     20
 16073                                  
 16074                                  struc PDB	; Process_data_block
 16075 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 16076 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 16077 00000004 ??                                      resb 1
 16078 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 16079 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 16080 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 16081 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 16082 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 16083 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 16084 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 16085 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 16086 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 16087 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 16088 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 16089 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 16090 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 16091 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 16092 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 16093 00000042 <res Eh>                .PAD1:		resb 14		; 	
 16094 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 16095 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 16096 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 16097 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 16098 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 16099 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 16100                                  ;.size:
 16101                                  endstruc
 16102                                  
 16103                                  ; ----------------------------------------------------------------------
 16104                                  ; <system call definitions>
 16105                                  
 16106                                  ; 23/03/2019 - Retro DOS v4.0
 16107                                  
 16108                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 16109                                  
 16110                                  ABORT                           EQU 0   ;  0      0
 16111                                  STD_CON_INPUT                   EQU 1   ;  1      1
 16112                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 16113                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 16114                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 16115                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 16116                                  RAW_CON_IO                      EQU 6   ;  6      6
 16117                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 16118                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 16119                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 16120                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 16121                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 16122                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 16123                                  DISK_RESET                      EQU 13  ; 13      D
 16124                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 16125                                  FCB_OPEN                        EQU 15  ; 15      F
 16126                                  FCB_CLOSE                       EQU 16  ; 16     10
 16127                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 16128                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 16129                                  FCB_DELETE                      EQU 19  ; 19     13
 16130                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 16131                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 16132                                  FCB_CREATE                      EQU 22  ; 22     16
 16133                                  FCB_RENAME                      EQU 23  ; 23     17
 16134                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 16135                                  SET_DMA                         EQU 26  ; 26     1A
 16136                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 16137                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 16138                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 16139                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 16140                                  GET_FCB_POSITION                EQU 36  ; 36     24
 16141                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 16142                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 16143                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 16144                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 16145                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 16146                                  GET_DATE                        EQU 42  ; 42     2A
 16147                                  SET_DATE                        EQU 43  ; 43     2B
 16148                                  GET_TIME                        EQU 44  ; 44     2C
 16149                                  SET_TIME                        EQU 45  ; 45     2D
 16150                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 16151                                  ; Extended functionality group
 16152                                  GET_DMA                         EQU 47  ; 47     2F
 16153                                  GET_VERSION                     EQU 48  ; 48     30
 16154                                  KEEP_PROCESS                    EQU 49  ; 49     31
 16155                                  GET_DPB                         EQU 50  ; 50     32
 16156                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 16157                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 16158                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 16159                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 16160                                  CHAR_OPER                       EQU 55  ; 55     37
 16161                                  INTERNATIONAL                   EQU 56  ; 56     38
 16162                                  ;   Directory Group
 16163                                  MKDIR                           EQU 57  ; 57     39
 16164                                  RMDIR                           EQU 58  ; 58     3A
 16165                                  CHDIR                           EQU 59  ; 59     3B
 16166                                  ;   File Group
 16167                                  CREAT                           EQU 60  ; 60     3C
 16168                                  OPEN                            EQU 61  ; 61     3D
 16169                                  CLOSE                           EQU 62  ; 62     3E
 16170                                  READ                            EQU 63  ; 63     3F
 16171                                  WRITE                           EQU 64  ; 64     40
 16172                                  UNLINK                          EQU 65  ; 65     41
 16173                                  LSEEK                           EQU 66  ; 66     42
 16174                                  CHMOD                           EQU 67  ; 67     43
 16175                                  IOCTL                           EQU 68  ; 68     44
 16176                                  XDUP                            EQU 69  ; 69     45
 16177                                  XDUP2                           EQU 70  ; 70     46
 16178                                  CURRENT_DIR                     EQU 71  ; 71     47
 16179                                  ;    Memory Group
 16180                                  ALLOC                           EQU 72  ; 72     48
 16181                                  DEALLOC                         EQU 73  ; 73     49
 16182                                  SETBLOCK                        EQU 74  ; 74     4A
 16183                                  ;    Process Group
 16184                                  EXEC                            EQU 75  ; 75     4B
 16185                                  EXIT                            EQU 76  ; 76     4C
 16186                                  WAITPROCESS			EQU 77  ; 77     4D
 16187                                  FIND_FIRST                      EQU 78  ; 78     4E
 16188                                  ;   Special Group
 16189                                  FIND_NEXT                       EQU 79  ; 79     4F
 16190                                  ; SPECIAL SYSTEM GROUP
 16191                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 16192                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 16193                                  GET_IN_VARS                     EQU 82  ; 82     52
 16194                                  SETDPB                          EQU 83  ; 83     53
 16195                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 16196                                  DUP_PDB                         EQU 85  ; 85     55
 16197                                  RENAME                          EQU 86  ; 86     56
 16198                                  FILE_TIMES                      EQU 87  ; 87     57
 16199                                  ;
 16200                                  ALLOCOPER			EQU 88	; 88     58	
 16201                                  ; Network extention system calls
 16202                                  GetExtendedError		EQU 89	; 89	 59
 16203                                  CreateTempFile			EQU 90	; 90	 5A
 16204                                  CreateNewFile			EQU 91	; 91	 5B
 16205                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 16206                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 16207                                  					;	    CloseByName, CloseUser,
 16208                                  					;	    CloseUserProcess,
 16209                                  					;	    GetOpenFileList
 16210                                  UserOper			EQU 94	; 94	 5E Get and Set
 16211                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 16212                                  xNameTrans			EQU 96	; 96	 60
 16213                                  PathParse			EQU 97	; 97	 61
 16214                                  GetCurrentPSP			EQU 98	; 98	 62
 16215                                  Hongeul 			EQU 99	; 99	 63
 16216                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 16217                                  Set_Printer_Flag		EQU 100 ; 100	 64
 16218                                  GetExtCntry			EQU 101 ; 101	 65
 16219                                  GetSetCdPg			EQU 102 ; 102	 66
 16220                                  ExtHandle			EQU 103 ; 103	 67
 16221                                  Commit				EQU 104 ; 104	 68
 16222                                  GetSetMediaID			EQU 105 ; 105	 69
 16223                                  IFS_IOCTL			EQU 107 ; 107	 6B
 16224                                  ExtOpen 			EQU 108 ; 108	 6C
 16225                                  ;
 16226                                  ;ifdef ROMEXEC
 16227                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 16228                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 16229                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 16230                                  ;endif
 16231                                  ;
 16232                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 16233                                  OEM_C1				EQU 249 ; 249	 F9
 16234                                  OEM_C2				EQU 250 ; 250	 FA
 16235                                  OEM_C3				EQU 251 ; 251	 FB
 16236                                  OEM_C4				EQU 252 ; 252	 FC
 16237                                  OEM_C5				EQU 253 ; 253	 FD
 16238                                  OEM_C6				EQU 254 ; 254	 FE
 16239                                  OEM_C7				EQU 255 ; 255	 FF
 16240                                  
 16241                                  ; ----------------------------------------------------------------------
 16242                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 16243                                  ; ----------------------------------------------------------------------
 16244                                  
 16245                                  ;;	IF	STACKSW
 16246                                  
 16247                                  ;;
 16248                                  ;; Internal Stack Parameters
 16249                                  ;EntrySize		equ	8
 16250                                  ;
 16251                                  ;MinCount		equ	8
 16252                                  ;DefaultCount		equ	9
 16253                                  ;MaxCount		equ	64
 16254                                  ;
 16255                                  ;MinSize 		equ	32
 16256                                  ;DefaultSize		equ	128
 16257                                  ;MaxSize 		equ	512
 16258                                  
 16259                                  ;;	ENDIF
 16260                                  
 16261                                  ; ----------------------------------------------------------------------
 16262                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 16263                                  ; ----------------------------------------------------------------------
 16264                                  					  ;;Rev 3.30 Modification
 16265                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 16266                                  									  
 16267                                  ;*******************************					  
 16268                                  ;System Service call ( Int 15h )					  
 16269                                  ;*******************************					  
 16270                                  ;Function AH = 0C0h, Return system configuration			  
 16271                                  ;For PC and PCJR on return:						  
 16272                                  ;	(AH)	= 80h							  
 16273                                  ;	(CY)	= 1							  
 16274                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 16275                                  ;	(AH)	= 86h							  
 16276                                  ;	(CY)	= 1							  
 16277                                  ;For all others:							  
 16278                                  ;	(AH)	= 0							  
 16279                                  ;	(CY)	= 0							  
 16280                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 16281                                  ; System descriptor :							  
 16282                                  ;	DW	xxxx		length of descriptor in bytes,		  
 16283                                  ;				minimum length = 8			  
 16284                                  ;	DB	xx		model byte				  
 16285                                  ;				0FFh	= PC				  
 16286                                  ;				0FEh	= PC/XT, Portable		  
 16287                                  ;				0FDh	= PC/JR 			  
 16288                                  ;				0FCh	= PC/AT				  
 16289                                  ;				0F9h	= Convertable			  
 16290                                  ;				0F8h	= Model 80			  
 16291                                  ;				0E0 thru 0EFh = reserved		  
 16292                                  ;									  
 16293                                  ;	DB	xx		secondary model byte			  
 16294                                  ;				000h	= PC1				  
 16295                                  ;				000h	= PC/XT, Portable		  
 16296                                  ;				000h	= PC/JR 			  
 16297                                  ;				000h	= PC/AT 			  
 16298                                  ;				001h	= PC/AT Model 339		  
 16299                                  ;				003h	= PC/RT				  
 16300                                  ;				000h	= Convertable			  
 16301                                  ;									  
 16302                                  ;	DB	xx		bios revision level			  
 16303                                  ;				00 for first release, subsequent release  
 16304                                  ;				of code with same model byte and	  
 16305                                  ;				secondary model byte require revison level
 16306                                  ;				to increase by one.			  
 16307                                  ;									  
 16308                                  ;	DB	xx		feature information byte 1		  
 16309                                  ;				X0000000 = 1, bios use DMA channel 3	  
 16310                                  ;					 = 0, DMA channel 3 not used	  
 16311                                  ;									  
 16312                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 16313                                  ;					 = 0, 2nd Interrupt chip not present
 16314                                  ;									  
 16315                                  ;				00X00000 = 1, Real Time Clock present	  
 16316                                  ;					 = 0, Real Time Clock not present 
 16317                                  ;									  
 16318                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 16319                                  ;						called in keyboard interrupt
 16320                                  ;						(Int 09h).		  
 16321                                  ;					 = 0, Keyboard escape sequence not
 16322                                  ;						called. 		  
 16323                                  ;				0000XXXX reserved			  
 16324                                  ;									  
 16325                                  ;	DB	xx		feature information byte 2 - reserved	  
 16326                                  ;									  
 16327                                  ;	DB	xx		feature information byte 2 - reserved	  
 16328                                  ;									  
 16329                                  ;	DB	xx		feature information byte 2 - reserved	  
 16330                                  ;									  
 16331                                  ;	DB	xx		feature information byte 2 - reserved	  
 16332                                  ;									  
 16333                                  
 16334                                  ; 22/03/2019									  
 16335                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 16336 00000000 ????                    .bios_sd_leng:		resw 1				  
 16337 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 16338                                  .bios_sd_scnd_modelbyte: 
 16339 00000003 ??                      			resb 1					  
 16340 00000004 ??                      			resb 1					  
 16341 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 16342 00000006 ????????                			resb 4					  
 16343                                  endstruc					  
 16344                                  									  
 16345                                  ;FeatureByte1	bit map equates 					  
 16346                                  DMAchannel3		equ 10000000b					  
 16347                                  ScndIntController	equ 01000000b					  
 16348                                  RealTimeClock		equ 00100000b					  
 16349                                  KeyEscapeSeq		equ 00010000b					  
 16350                                  					;;End of Modification
 16351                                  
 16352                                  ; ----------------------------------------------------------------------
 16353                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 16354                                  ; ----------------------------------------------------------------------
 16355                                  ; 22/03/2019 - Retro DOS v4.0
 16356                                  
 16357                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 16358                                  
 16359                                  struc SysInitVars
 16360                                  ; MSDOS 3.3
 16361 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 16362 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 16363 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 16364 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 16365 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 16366 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 16367 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 16368 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 16369 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 16370 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 16371 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 16372 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 16373                                  ; MSDOS 6.0
 16374 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 16375 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 16376 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 16377 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 16378                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 16379 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 16380 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 16381 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 16382 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 16383 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 16384 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 16385 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 16386                                  .size:
 16387                                  endstruc
 16388                                  
 16389                                  ;This is added for more information exchage between DOS, BIOS.
 16390                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 16391                                  
 16392                                  ; 22/03/2019
 16393                                  struc SysInitVars_Ext
 16394 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 16395 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 16396                                  endstruc
 16397                                  
 16398                                  ; 09/06/2018
 16399                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 16400                                  SYSI_DPB    equ	0
 16401                                  SYSI_SFT    equ 4
 16402                                  SYSI_CLOCK  equ 8
 16403                                  SYSI_CON    equ 12
 16404                                  SYSI_MAXSEC equ 16
 16405                                  SYSI_BUF    equ 18 		
 16406                                  SYSI_CDS    equ 22
 16407                                  SYSI_FCB    equ 26
 16408                                  SYSI_KEEP   equ 30
 16409                                  SYSI_NUMIO  equ	32
 16410                                  SYSI_NCDS   equ	33
 16411                                  SYSI_DEV    equ 34
 16412                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 16413                                  SYSI_ATTR	  equ 38
 16414                                  SYSI_STRAT	  equ 40
 16415                                  SYSI_INTER	  equ 42
 16416                                  SYSI_NAME	  equ 44
 16417                                  SYSI_SPLICE	  equ 52
 16418                                  SYSI_IBMDOS_SIZE  equ 53
 16419                                  SYSI_IFS_DOSCALL@ equ 55
 16420                                  SYSI_IFS	  equ 59
 16421                                  SYSI_BUFFERS	  equ 63
 16422                                  SYSI_BOOT_DRIVE   equ 67
 16423                                  SYSI_DWMOVE	  equ 68
 16424                                  SYSI_EXT_MEM	  equ 69
 16425                                  
 16426                                  ;The SYSI_BUF of SysInitVars points to the following structure
 16427                                  
 16428                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 16429                                  
 16430                                  struc BUFFINF 	; BUFFINFO
 16431 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 16432 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 16433 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 16434 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 16435                                  
 16436 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 16437                                  				; are in HMA
 16438 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 16439                                  				;  used to read/write on disks
 16440 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 16441 00000015 ????                    .UU_EMS_NPA640:		resw 1
 16442 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 16443 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 16444 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 16445 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 16446 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 16447 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 16448 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 16449                                  .size:
 16450                                  endstruc
 16451                                  
 16452                                  ; ----------------------------------------------------------------------
 16453                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 16454                                  ; ----------------------------------------------------------------------
 16455                                  ; 22/03/2019 - Retro DOS v4.0
 16456                                  
 16457                                  ;**	CDS - Current Directory Structure
 16458                                  ;
 16459                                  ; CDS items are used bu the internal routines to store cluster numbers and
 16460                                  ; network identifiers for each logical name.  The ID field is used dually,
 16461                                  ; both as net ID and for a cluster number for local devices. In the case
 16462                                  ; of local devices, the cluster number will be -1 if there is a potential
 16463                                  ; of the disk being changed or if the path must be recracked.
 16464                                  ;
 16465                                  ;	Some pathnames have special preambles, such as
 16466                                  ;
 16467                                  ;		\\machine\sharename\...
 16468                                  ;	For these pathnames we can't allow ".." processing to back us
 16469                                  ;	up into the special front part of the name.  The CURDIR_END field
 16470                                  ;	holds the address of the seperator character which marks
 16471                                  ;	the split between the special preamble and the regular
 16472                                  ;	path list; ".." processing isn't allowed to back us up past
 16473                                  ;	(i.e., before) CURDIR_END
 16474                                  ;	For the root, it points at the leading /. For net
 16475                                  ;	assignments it points at the end (nul) of the initial assignment:
 16476                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 16477                                  ;	  ^		 ^		     ^
 16478                                  
 16479                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 16480                                  TEMPLEN 	EQU	DIRSTRLEN*2
 16481                                  
 16482                                  struc 		curdir_list
 16483                                  ; MSDOS 3.3
 16484 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 16485 00000043 ????                    .cdir_flags	resw	1		; various flags
 16486 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 16487 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 16488 0000004D ????                    .cdir_usr_word	resw	1
 16489 0000004F ????                    .cdir_end	resw	1		; end of assignment
 16490                                  ; MSDOS 6.0
 16491 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 16492 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 16493 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 16494                                  .size:
 16495                                  endstruc
 16496                                  
 16497                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 16498                                  						; ASM87 which doesn't allow
 16499                                  						; Size directive as a macro
 16500                                  						; argument
 16501                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 16502                                  
 16503                                  ;**	Flag values for CURDIR_FLAGS
 16504                                  
 16505                                  ;Flag word masks
 16506                                  curdir_isnet	EQU	1000000000000000B
 16507                                  curdir_isifs	EQU	1000000000000000B
 16508                                  curdir_inuse	EQU	0100000000000000B
 16509                                  curdir_splice	EQU	0010000000000000B
 16510                                  curdir_local	EQU	0001000000000000B
 16511                                  
 16512                                  ; ----------------------------------------------------------------------
 16513                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 16514                                  ; ----------------------------------------------------------------------
 16515                                  ; 25/03/2019 - Retro DOS v4.0
 16516                                  
 16517                                  ; 09/04/2024 - Retro DOS v4.1 (BugFix)
 16518                                  
 16519                                  ; system file table
 16520                                  
 16521                                  ;**	System File Table SuperStructure
 16522                                  ;
 16523                                  ;	The system file table entries are allocated in contiguous groups.
 16524                                  ;	There may be more than one such groups; the SF "superstructure"
 16525                                  ;	tracks the groups.
 16526                                  
 16527                                  struc	SF
 16528 00000000 ????????                .SFLink:	resd	1
 16529 00000004 ????                    .SFCount:	resw	1		; number of entries
 16530 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 16531                                  .size:
 16532                                  endstruc
 16533                                  
 16534                                  ;**	System file table entry
 16535                                  ;
 16536                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16537                                  
 16538                                  struc	SF_ENTRY
 16539 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16540                                  					;   if FCB then ref count
 16541 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16542 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16543 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16544                                  					; Bit 15 = 1 if remote file
 16545                                  					;	 = 0 if local file or device
 16546                                  					; Bit 14 = 1 if date/time is not to be
 16547                                  					;   set from clock at CLOSE.  Set by
 16548                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16549                                  					;   other reseters of the dirty bit
 16550                                  					;   (WRITE)
 16551                                  					; Bit 13 = Pipe bit (reserved)
 16552                                  					;
 16553                                  					; Bits 0-7 (old FCB_devid bits)
 16554                                  					; If remote file or local file, bit
 16555                                  					; 6=0 if dirty Device ID number, bits
 16556                                  					; 0-5 if local file.
 16557                                  					; bit 7=0 for local file, bit 7
 16558                                  					;      =1 for local I/O device
 16559                                  					; If local I/O device, bit 6=0 if EOF (input)
 16560                                  					;		Bit 5=1 if Raw mode
 16561                                  					;		Bit 0=1 if console input device
 16562                                  					;		Bit 1=1 if console output device
 16563                                  					;		Bit 2=1 if null device
 16564                                  					;		Bit 3=1 if clock device
 16565 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16566                                  					; to device header if local device,
 16567                                  					; points to net device header if
 16568                                  					; remote
 16569 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16570                                  ;.sf_lstclus:	resw	1 ; *	
 16571 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16572 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16573 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16574 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16575                                  ;
 16576                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16577                                  ; ID
 16578                                  ;
 16579 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16580 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 16581 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16582                                  ;
 16583                                  ; End of 7 bytes of file-system specific info.
 16584                                  ;
 16585 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16586                                  					; directory entry.  This is used by
 16587                                  					; close to detect file deleted and
 16588                                  					; disk changed errors.
 16589                                  ; SHARING INFO
 16590 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 16591 0000002F ????                    .sf_UID:	resw	1
 16592 00000031 ????                    .sf_PID:	resw	1
 16593 00000033 ????                    .sf_MFT:	resw	1
 16594 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16595 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16596                                  .size:
 16597                                  endstruc
 16598                                  
 16599                                  ; ----------------------------------------------------------------------
 16600                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16601                                  ; ----------------------------------------------------------------------
 16602                                  ; 11/06/2018 - Retro DOS v3.0
 16603                                  
 16604                                  ;Equates for COUNTRY INFORMATION.
 16605                                  SetCountryInfo		EQU	1	;country info
 16606                                  SetUcase		EQU	2	;uppercase table
 16607                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16608                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16609                                  SetFileList		EQU	5	;valid file character list
 16610                                  SetCollate		EQU	6	;collating sequence
 16611                                  SetDBCS 		EQU	7	;double byte character set
 16612                                  SetALL			EQU	-1	;all the entries
 16613                                  
 16614                                  ;DOS country and code page information table structure.
 16615                                  ;Internally, IBMDOS gives a pointer to this table.
 16616                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16617                                  ;this structure.
 16618                                  
 16619                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16620 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16621 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16622 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16623 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16624 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16625 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16626                                  
 16627 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16628 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16629                                  
 16630 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16631 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16632                                  
 16633 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16634 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16635                                  
 16636 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16637 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16638 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16639 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16640 00000067 ????                    .ccDFormat:		resw	1	;date format
 16641 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16642                                  					;5 byte of (currency symbol+0)
 16643 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16644 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16645 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16646 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16647 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16648 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16649 00000078 ??                      .ccTFormat:		resb	1	;time format
 16650 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16651 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16652 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16653                                  .size:
 16654                                  endstruc
 16655                                  
 16656                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16657                                  
 16658                                  ; ======================================================================
 16659                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16660                                  ; ======================================================================
 16661                                  ; 21/03/2019 - Retro DOS v4.0
 16662                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16663                                  
 16664                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16665                                  ; 21/10/2022
 16666                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16667                                  ; 22/10/2022
 16668                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16669                                  ; 09/12/2022
 16670                                  DOSBIOCODESEG equ IOSYSCODESEG
 16671                                  
 16672                                  ; Note: These offset addresses must be chanqed when the code 
 16673                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16674                                  
 16675                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16676                                  
 16677                                  ; 09/12/2022
 16678                                  %if 0
 16679                                  
 16680                                  ; 13/05/2019
 16681                                  
 16682                                  ;IsWin386         equ 08CFh
 16683                                  ;V86_Crit_SetFocus equ 08D0h
 16684                                  ; 21/10/2022
 16685                                  IsWin386          equ 08D0h
 16686                                  V86_Crit_SetFocus equ 08D1h 
 16687                                  
 16688                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16689                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16690                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16691                                  
 16692                                  ;SysinitPresent	  equ 08FCh
 16693                                  ; 21/10/2022
 16694                                  SysinitPresent	  equ 08FDh
 16695                                  
 16696                                  inHMA		  equ 000Dh
 16697                                  xms		  equ 000Eh
 16698                                  ;FreeHMAPtr	  equ 08F6h
 16699                                  ;multrk_flag	  equ 0533h
 16700                                  ;ec35_flag	  equ 0535h
 16701                                  ;EOT		  equ 012Eh
 16702                                  ; 21/10/2022
 16703                                  FreeHMAPtr	  equ 08F7h
 16704                                  multrk_flag	  equ 052Fh
 16705                                  ec35_flag	  equ 0531h
 16706                                  EOT		  equ 012Ch
 16707                                  
 16708                                  ;NextStack	  equ 08BFh
 16709                                  ;IT_StackLoc	  equ 08C5h
 16710                                  ;IT_StackSize	  equ 08C9h
 16711                                  ; 21/10/2022
 16712                                  NextStack	  equ 08C0h
 16713                                  IT_StackLoc	  equ 08C6h
 16714                                  IT_StackSize	  equ 08CAh
 16715                                  
 16716                                  ;MoveDOSIntoHMA	  equ 08F8h
 16717                                  ; 21/10/2022
 16718                                  MoveDOSIntoHMA	  equ 08F9h
 16719                                  
 16720                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16721                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16722                                  ; 21/10/2022
 16723                                  INT19SEM equ 0640h ; (iosys5.txt)
 16724                                  I19_LST  equ 0641h ; (iosys5.txt)
 16725                                  
 16726                                  %endif
 16727                                  
 16728                                  ; 09/12/2022
 16729                                  seg_reinit equ _seg_reinit
 16730                                  ec35_flag  equ ec35flag		
 16731                                  INT19SEM   equ int19sem
 16732                                  I19_LST    equ i19_lst
 16733                                  
 16734                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16735                                  INT19OLD08 equ I19_LST+6
 16736                                  INT19OLD09 equ I19_LST+11
 16737                                  INT19OLD0A equ I19_LST+16
 16738                                  INT19OLD0B equ I19_LST+21
 16739                                  INT19OLD0C equ I19_LST+26
 16740                                  INT19OLD0D equ I19_LST+31
 16741                                  INT19OLD0E equ I19_LST+36
 16742                                  INT19OLD70 equ I19_LST+41
 16743                                  INT19OLD72 equ I19_LST+46
 16744                                  INT19OLD73 equ I19_LST+51
 16745                                  INT19OLD74 equ I19_LST+56
 16746                                  INT19OLD76 equ I19_LST+61
 16747                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16748                                  
 16749                                  ; 09/12/2022
 16750                                  %if 0
 16751                                  
 16752                                  ;keyrd_func	equ 04E9h
 16753                                  ;keysts_func	equ 04EAh
 16754                                  ;t_switch	equ 04F6h
 16755                                  ; 21/10/2022
 16756                                  keyrd_func	equ 04E5h
 16757                                  keysts_func	equ 04E6h
 16758                                  t_switch	equ 04F2h
 16759                                  
 16760                                  ; 22/10/2022
 16761                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16762                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16763                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16764                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16765                                  
 16766                                  %endif
 16767                                  
 16768                                  ; 09/12/2022
 16769                                  BCODESTART	equ BIOSDATAWORD
 16770                                  RE_INIT		equ re_init
 16771                                  
 16772                                  ; ----------------------------------------------------------------------
 16773                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16774                                  ; ----------------------------------------------------------------------
 16775                                  ; 15/04/2019 - Retro DOS v4.0
 16776                                  
 16777                                  CONFIG_BEGIN        equ  '['
 16778                                  CONFIG_BREAK        equ  'C'
 16779                                  CONFIG_BUFFERS      equ  'B'
 16780                                  CONFIG_COMMENT      equ  'Y'
 16781                                  CONFIG_COUNTRY      equ  'Q'
 16782                                  CONFIG_DEVICE       equ  'D'
 16783                                  CONFIG_DEVICEHIGH   equ  'U'
 16784                                  CONFIG_DOS          equ  'H'
 16785                                  CONFIG_DRIVPARM     equ  'P'
 16786                                  CONFIG_FCBS         equ  'X'
 16787                                  CONFIG_FILES        equ  'F'
 16788                                  CONFIG_INCLUDE      equ  'J'
 16789                                  CONFIG_INSTALL      equ  'I'
 16790                                  CONFIG_INSTALLHIGH  equ  'W'
 16791                                  CONFIG_LASTDRIVE    equ  'L'
 16792                                  CONFIG_MENUCOLOR    equ  'R'
 16793                                  CONFIG_MENUDEFAULT  equ  'A'
 16794                                  CONFIG_MENUITEM     equ  'E'
 16795                                  CONFIG_MULTITRACK   equ  'M'
 16796                                  CONFIG_NUMLOCK      equ  'N'
 16797                                  CONFIG_REM          equ  '0'
 16798                                  CONFIG_SEMICOLON    equ  ';'
 16799                                  CONFIG_SET          equ  'V'
 16800                                  CONFIG_SHELL        equ  'S'
 16801                                  CONFIG_STACKS       equ  'K'
 16802                                  CONFIG_SUBMENU      equ  'O'
 16803                                  CONFIG_SWITCHES     equ  '1'
 16804                                  
 16805                                  CONFIG_UNKNOWN      equ  'Z'
 16806                                  
 16807                                  CONFIG_OPTION_QUERY equ 80h
 16808                                  
 16809                                  ; ----------------------------------------------------------------------
 16810                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16811                                  ; ----------------------------------------------------------------------
 16812                                  ; 21/03/2019 - Retro DOS v4.0
 16813                                  
 16814                                  true	equ	0FFFFh
 16815                                  false	equ	0
 16816                                  cr	equ	13
 16817                                  lf	equ	10
 16818                                  tab	equ	9
 16819                                  
 16820                                  multMULT	   equ	4Ah
 16821                                  multMULTGETHMAPTR  equ	1
 16822                                  multMULTALLOCHMA   equ	2
 16823                                  
 16824                                  ;NOEXEC    equ	FALSE
 16825                                  
 16826                                  stacksw    equ	true	;include switchable hardware stacks
 16827                                  mycds_size equ	88	;size of curdir_list. if it is not
 16828                                  			;the same, then will generate compile error.
 16829                                  
 16830                                  entrysize   equ     8
 16831                                  
 16832                                  mincount    equ     8
 16833                                  defaultcount equ    9
 16834                                  maxcount    equ     64
 16835                                  
 16836                                  minsize     equ     32
 16837                                  defaultsize equ     128
 16838                                  maxsize     equ     512
 16839                                  
 16840                                  ;%define allocbyte  byte [es:bp+0]
 16841                                  ;%define intlevel   byte [es:bp+1]
 16842                                  ;%define savedsp    word [es:bp+2]
 16843                                  ;%define savedss    word [es:bp+4]
 16844                                  ;%define newsp	    word [es:bp+6]
 16845                                  
 16846                                  allocbyte   equ     0
 16847                                  intlevel    equ     1
 16848                                  savedsp     equ     2
 16849                                  savedss     equ     4
 16850                                  newsp       equ     6
 16851                                  
 16852                                  free	    equ     0
 16853                                  allocated   equ     1
 16854                                  overflowed  equ     2
 16855                                  clobbered   equ     3
 16856                                  
 16857                                  ;---------------------------------------
 16858                                  ; external variable defined in ibmbio module for multi-track
 16859                                  
 16860                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16861                                  			  ; it on after handling config.sys file as a
 16862                                  			  ; default value,if multrk_flag = multrk_off1.
 16863                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16864                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16865                                  
 16866                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16867                                  
 16868                                  SYSINIT$:
 16869                                  	;IF	STACKSW 
 16870                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16871                                  	; include STKMES.INC	;Fatal stack error message
 16872                                  	;   public Endstackcode
 16873                                  ;Endstackcode	label byte
 16874                                  	;ENDIF
 16875                                  
 16876                                  ; 05/07/2018
 16877                                  ; ----------------------------------------------------------------------
 16878                                  ; 04/06/2018 - Retro DOS v3.0
 16879                                  
 16880                                  ; ----------------------------------------------------------------------
 16881                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16882                                  ; ----------------------------------------------------------------------
 16883                                  
 16884                                  ;	MSStack.inc
 16885                                  ;
 16886                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16887                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16888                                  ;	a standard header structure.
 16889                                  ;	Fyi, the following shows the relations between
 16890                                  ;	the interrupt vector and interrupt level.
 16891                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16892                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16893                                  ;	MSSTACK module modifies the following interrupt vectors
 16894                                  ;	to meet the standard Interrupt Sharing standard;
 16895                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16896                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16897                                  ;	should be initialized to indicat whether this interrupt handler is
 16898                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16899                                  ;	program header is initialized in STKINIT.INC module.
 16900                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16901                                  ;
 16902                                  
 16903                                  ;  User specifies the number of stack elements - default = 9
 16904                                  ;						 minimum = 8
 16905                                  ;						 maximum = 64
 16906                                  ;
 16907                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16908                                  ;
 16909                                  ;  Picks a stack from pool of stacks and switches to it
 16910                                  ;
 16911                                  ;  Calls the previously saved interrupt vector after pushing flags
 16912                                  ;
 16913                                  ;  On return, returns the stack to the stack pool
 16914                                  ;
 16915                                  
 16916                                  ; This is a modification of STACKS:
 16917                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16918                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16919                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16920                                  ;    . Allows system to work if the only stack that got too big was the most
 16921                                  ;      deeply nested one
 16922                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16923                                  ; 4. Does not intercept any interupts on a PCjr.
 16924                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16925                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16926                                  
 16927                                  		;EVEN
 16928                                  ;align 2
 16929                                  		; 21/10/2022
 16930                                  
 16931 00000000 0000                    		dw	0	; spare field but leave these in order
 16932 00000002 0000                    stackcount:	dw	0
 16933 00000004 0000                    stackat: 	dw	0
 16934 00000006 0000                    stacksize:	dw	0
 16935 00000008 0000                    stacks:		dw	0
 16936 0000000A 0000                    		dw	0
 16937                                  
 16938 0000000C [0800]                  firstentry:	dw	stacks
 16939 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16940 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16941                                  
 16942                                  ;***********************************************************************
 16943                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16944                                  
 16945                                  ; ----------------------------------------------------------------------
 16946                                  
 16947 00000012 00000000                old02:	dd	0
 16948                                  
 16949                                  int02:
 16950                                  
 16951                                  ; *********************************************************************
 16952                                  ;
 16953                                  ; this is special support for the pc convertible / nmi handler
 16954                                  ;
 16955                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16956                                  ;	caused by using the "out" instructions to certain ports. when this
 16957                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16958                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16959                                  ;	includes other type of interrupts (hardware and software), and
 16960                                  ;	also includes other type of nmi's. when any nmi has occured,
 16961                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16962                                  ;	the software takes specific steps to allow further interrupting.
 16963                                  ;
 16964                                  ;	for pc convertible, the situation where the nmi is generated by the
 16965                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16966                                  ;	otherwords, it is actually a "restartable exception". in this
 16967                                  ;	case, the software handler must be able to get to the stack in
 16968                                  ;	order to figure out what instruction caused the problem, where
 16969                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16970                                  ;	we will not switch stacks in this situation. this situation is
 16971                                  ;	detected by interrogating port 62h, and checking for a bit value
 16972                                  ;	of 80h. if set, *****do not switch stacks*****.
 16973                                  ;
 16974                                  ; *********************************************************************
 16975                                  
 16976 00000016 50                      	push	ax
 16977 00000017 06                      	push	es
 16978 00000018 B800F0                  	mov	ax,0F000h
 16979 0000001B 8EC0                    	mov	es,ax
 16980                                  	; 02/11/2022
 16981 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16982 00000023 07                      	pop	es
 16983 00000024 750C                    	jne	short normal02
 16984                                  
 16985 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16986                                  				; 0-3: values of DIP switches
 16987                                  				; 5: 1=Timer 2 channel out
 16988                                  				; 6: 1=I/O channel check
 16989                                  				; 7: 1=RAM parity check error occurred.
 16990 00000028 A880                    	test	al,80h
 16991 0000002A 7406                    	jz	short normal02
 16992                                  special02:
 16993 0000002C 58                      	pop	ax
 16994 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16995                                  normal02:
 16996 00000032 58                      	pop	ax
 16997 00000033 E81101                  	call	do_int_stacks
 16998 00000036 [1200]                  	dw	old02
 16999                                  
 17000                                  ; ----------------------------------------------------------------------
 17001                                  
 17002 00000038 00000000                old08:	dd	0
 17003                                  
 17004                                  int08:
 17005 0000003C E80801                  	call	do_int_stacks
 17006 0000003F [3800]                  	dw	old08
 17007                                  
 17008                                  ; ----------------------------------------------------------------------
 17009                                  
 17010 00000041 00000000                old09:	dd	0
 17011                                  
 17012                                  int09:
 17013                                  
 17014                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 17015                                  ; as its first instruction for compatibility reasons
 17016                                  
 17017 00000045 EB02                    	jmp	short keyboard_lbl
 17018 00000047 90                      	nop
 17019 00000048 00                      	db	0
 17020                                  
 17021                                  keyboard_lbl:
 17022 00000049 E8FB00                  	call	do_int_stacks
 17023 0000004C [4100]                  	dw	old09
 17024                                  
 17025                                  ; ----------------------------------------------------------------------
 17026                                  
 17027 0000004E 00000000                old70:	dd	0
 17028                                  
 17029                                  int70:
 17030 00000052 E8F200                  	call	do_int_stacks
 17031 00000055 [4E00]                  	dw	old70
 17032                                  
 17033                                  ; ----------------------------------------------------------------------
 17034                                  
 17035                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 17036                                  ;public	int&a
 17037                                  ;public	old&a
 17038                                  ;public	firstflag&a
 17039                                  ;int&a	proc	far
 17040                                  ;	jmp	short entry_int&a&_stk
 17041                                  ;old&a	dd	  0		;forward pointer
 17042                                  ;	dw	  424bh 	;compatible signature for int. sharing
 17043                                  ;firstflag&a db   0		;the firstly hooked.
 17044                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 17045                                  ;	db	7 dup (0)	;reserved for future.
 17046                                  ;entry_int&a&_stk:
 17047                                  ;	call	do_int_stacks
 17048                                  ;	dw	old&a
 17049                                  ;intret_&a:
 17050                                  ;	iret
 17051                                  ;int&a	endp
 17052                                  ;	endm
 17053                                  
 17054                                  ; ----------------------------------------------------------------------
 17055                                  
 17056                                  int0A:
 17057 00000057 EB10                    	jmp	short entry_int0A_stk
 17058 00000059 00000000                old0A:	dd	0	
 17059 0000005D 4B42                    	dw	424Bh
 17060                                  firstflag0A:
 17061 0000005F 00                      	db	0
 17062 00000060 EB0C                    	jmp	short intret_0A
 17063 00000062 00<rep 7h>              	times	7 db 0
 17064                                  
 17065                                  entry_int0A_stk:
 17066 00000069 E8DB00                  	call	do_int_stacks
 17067 0000006C [5900]                  	dw	old0A
 17068                                  intret_0A:
 17069 0000006E CF                      	iret
 17070                                  
 17071                                  ; ----------------------------------------------------------------------
 17072                                  
 17073                                  int0B:
 17074 0000006F EB10                    	jmp	short entry_int0B_stk
 17075 00000071 00000000                old0B:	dd	0	
 17076 00000075 4B42                    	dw	424Bh
 17077                                  firstflag0B:
 17078 00000077 00                      	db	0
 17079 00000078 EB0C                    	jmp	short intret_0B
 17080 0000007A 00<rep 7h>              	times	7 db 0
 17081                                  
 17082                                  entry_int0B_stk:
 17083 00000081 E8C300                  	call	do_int_stacks
 17084 00000084 [7100]                  	dw	old0B
 17085                                  intret_0B:
 17086 00000086 CF                      	iret
 17087                                  
 17088                                  ; ----------------------------------------------------------------------
 17089                                  
 17090                                  int0C:
 17091 00000087 EB10                    	jmp	short entry_int0C_stk
 17092 00000089 00000000                old0C:	dd	0	
 17093 0000008D 4B42                    	dw	424Bh
 17094                                  firstflag0C:
 17095 0000008F 00                      	db	0
 17096 00000090 EB0C                    	jmp	short intret_0C
 17097 00000092 00<rep 7h>              	times	7 db 0
 17098                                  
 17099                                  entry_int0C_stk:
 17100 00000099 E8AB00                  	call	do_int_stacks
 17101 0000009C [8900]                  	dw	old0C
 17102                                  intret_0C:
 17103 0000009E CF                      	iret
 17104                                  
 17105                                  ; ----------------------------------------------------------------------
 17106                                  
 17107                                  int0D:
 17108 0000009F EB10                    	jmp	short entry_int0D_stk
 17109 000000A1 00000000                old0D:	dd	0	
 17110 000000A5 4B42                    	dw	424Bh
 17111                                  firstflag0D:
 17112 000000A7 00                      	db	0
 17113 000000A8 EB0C                    	jmp	short intret_0D
 17114 000000AA 00<rep 7h>              	times	7 db 0
 17115                                  
 17116                                  entry_int0D_stk:
 17117 000000B1 E89300                  	call	do_int_stacks
 17118 000000B4 [A100]                  	dw	old0D
 17119                                  intret_0D:
 17120 000000B6 CF                      	iret
 17121                                  
 17122                                  ; ----------------------------------------------------------------------
 17123                                  
 17124                                  int0E:
 17125 000000B7 EB10                    	jmp	short entry_int0E_stk
 17126 000000B9 00000000                old0E:	dd	0	
 17127 000000BD 4B42                    	dw	424Bh
 17128                                  firstflag0E:
 17129 000000BF 00                      	db	0
 17130 000000C0 EB0C                    	jmp	short intret_0E
 17131 000000C2 00<rep 7h>              	times	7 db 0
 17132                                  
 17133                                  entry_int0E_stk:
 17134 000000C9 E87B00                  	call	do_int_stacks
 17135 000000CC [B900]                  	dw	old0E
 17136                                  intret_0E:
 17137 000000CE CF                      	iret
 17138                                  
 17139                                  ; ----------------------------------------------------------------------
 17140                                  
 17141                                  int72:
 17142 000000CF EB10                    	jmp	short entry_int72_stk
 17143 000000D1 00000000                old72:	dd	0	
 17144 000000D5 4B42                    	dw	424Bh
 17145                                  firstflag72:
 17146 000000D7 00                      	db	0
 17147 000000D8 EB0C                    	jmp	short intret_72
 17148 000000DA 00<rep 7h>              	times	7 db 0
 17149                                  
 17150                                  entry_int72_stk:
 17151 000000E1 E86300                  	call	do_int_stacks
 17152 000000E4 [D100]                  	dw	old72
 17153                                  intret_72:
 17154 000000E6 CF                      	iret
 17155                                  
 17156                                  ; ----------------------------------------------------------------------
 17157                                  
 17158                                  int73:
 17159 000000E7 EB10                    	jmp	short entry_int73_stk
 17160 000000E9 00000000                old73:	dd	0	
 17161 000000ED 4B42                    	dw	424Bh
 17162                                  firstflag73:
 17163 000000EF 00                      	db	0
 17164 000000F0 EB0C                    	jmp	short intret_73
 17165 000000F2 00<rep 7h>              	times	7 db 0
 17166                                  
 17167                                  entry_int73_stk:
 17168 000000F9 E84B00                  	call	do_int_stacks
 17169 000000FC [E900]                  	dw	old73
 17170                                  intret_73:
 17171 000000FE CF                      	iret
 17172                                  
 17173                                  ; ----------------------------------------------------------------------
 17174                                  
 17175                                  int74:
 17176 000000FF EB10                    	jmp	short entry_int74_stk
 17177 00000101 00000000                old74:	dd	0	
 17178 00000105 4B42                    	dw	424Bh
 17179                                  firstflag74:
 17180 00000107 00                      	db	0
 17181 00000108 EB0C                    	jmp	short intret_74
 17182 0000010A 00<rep 7h>              	times	7 db 0
 17183                                  
 17184                                  entry_int74_stk:
 17185 00000111 E83300                  	call	do_int_stacks
 17186 00000114 [0101]                  	dw	old74
 17187                                  intret_74:
 17188 00000116 CF                      	iret
 17189                                  
 17190                                  ; ----------------------------------------------------------------------
 17191                                  
 17192                                  int76:
 17193 00000117 EB10                    	jmp	short entry_int76_stk
 17194 00000119 00000000                old76:	dd	0	
 17195 0000011D 4B42                    	dw	424Bh
 17196                                  firstflag76:
 17197 0000011F 00                      	db	0
 17198 00000120 EB0C                    	jmp	short intret_76
 17199 00000122 00<rep 7h>              	times	7 db 0
 17200                                  
 17201                                  entry_int76_stk:
 17202 00000129 E81B00                  	call	do_int_stacks
 17203 0000012C [1901]                  	dw	old76
 17204                                  intret_76:
 17205 0000012E CF                      	iret
 17206                                  
 17207                                  ; ----------------------------------------------------------------------
 17208                                  
 17209                                  int77:
 17210 0000012F EB10                    	jmp	short entry_int77_stk
 17211 00000131 00000000                old77:	dd	0	
 17212 00000135 4B42                    	dw	424Bh
 17213                                  firstflag77:
 17214 00000137 00                      	db	0
 17215 00000138 EB0C                    	jmp	short intret_77
 17216 0000013A 00<rep 7h>              	times	7 db 0
 17217                                  
 17218                                  entry_int77_stk:
 17219 00000141 E80300                  	call	do_int_stacks
 17220 00000144 [3101]                  	dw	old77
 17221                                  intret_77:
 17222 00000146 CF                      	iret
 17223                                  
 17224                                  ; ----------------------------------------------------------------------
 17225                                  
 17226                                  ;********************************************************************
 17227                                  ;common routines
 17228                                  ;********************************************************************
 17229                                  
 17230                                  ; do interrupt stack switching. the fake return address holds
 17231                                  ; a pointer to the far-pointer of the actual interrupt
 17232                                  ; service routine
 17233                                  
 17234                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 17235                                  ; 21/03/2019 - Retro DOS v4.0
 17236                                  
 17237                                  ;allocbyte   equ 0
 17238                                  ;intlevel    equ 1
 17239                                  ;savedsp     equ 2
 17240                                  ;savedss     equ 4
 17241                                  ;newsp       equ 6
 17242                                  
 17243                                  do_int_stacks:
 17244 00000147 50                      	push	ax
 17245 00000148 55                      	push	bp
 17246 00000149 06                      	push	es
 17247 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 17248 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 17249 00000154 B001                    	mov	al,allocated ; 1
 17250                                  	; 21/10/2022
 17251                                  	;xchg	[es:bp+allocbyte],al 
 17252                                  	; 11/12/2022
 17253 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 17254 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 17255 0000015C 754F                    	jne	short notfree02
 17256                                  
 17257 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 17258                                  
 17259                                  found02:
 17260 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 17261 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 17262                                  
 17263 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 17264                                  
 17265 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 17266                                  	; 21/10/2022
 17267                                  	;mov	bp,[es:bp+6]
 17268                                  	; 11/12/2022
 17269                                  	;cmp	[es:bp+0],ax	
 17270 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 17271 00000176 7542                    	jne	short foundbad02
 17272                                  
 17273                                  	;mov	ax,es			; point ss,sp to the new stack
 17274                                  	;mov	es,bp
 17275                                  	;mov	bp,sp
 17276                                  	;mov	bp,[bp+6]
 17277                                  	;mov	ss,ax
 17278                                  	;mov	sp,es
 17279                                  	;mov	es,ax
 17280                                  	;mov	bp,[cs:bp]
 17281                                  
 17282                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 17283 00000178 55                      	push    bp
 17284 00000179 89E5                    	mov     bp,sp
 17285 0000017B 8B4608                  	mov     ax,[bp+8]
 17286 0000017E 5D                      	pop     bp
 17287 0000017F 06                      	push    es
 17288 00000180 17                      	pop     ss
 17289 00000181 89EC                    	mov     sp,bp
 17290 00000183 89C5                    	mov     bp,ax
 17291                                  	; 11/12/2022
 17292                                  	;mov	bp,[cs:bp+0]	
 17293 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 17294                                  
 17295 00000189 9C                      	pushf				; go execute the real interrupt handler
 17296                                  	; 11/12/2022
 17297 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 17298                                  	; 21/10/2022
 17299                                  	;call	far [cs:bp+0]
 17300                                  
 17301 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 17302                                  	; 11/12/2022
 17303 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 17304                                  	; 21/10/2022
 17305                                  	;mov	bp,[es:bp+0]
 17306 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 17307 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 17308                                  
 17309                                  	; 11/12/2022
 17310                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 17311                                  	; 21/10/2022
 17312 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 17313 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 17314                                  
 17315 000001A6 07                      	pop	es
 17316 000001A7 5D                      	pop	bp			; saved on entry
 17317 000001A8 58                      	pop	ax			; saved on entry
 17318 000001A9 83C402                  	add	sp,2
 17319 000001AC CF                      	iret				; done with this interrupt
 17320                                  
 17321                                  notfree02:
 17322 000001AD 3C01                    	cmp	al,allocated		; error flag
 17323 000001AF 7404                    	je	short findnext02	;  no, continue
 17324                                  	; 11/12/2022
 17325                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 17326                                  	; 21/10/2022
 17327 000001B1 26864600                	xchg	[es:bp],al
 17328                                  
 17329                                  findnext02:
 17330 000001B5 E81200                  	call	longpath
 17331 000001B8 EBAA                    	jmp	short found02
 17332                                  
 17333                                  foundbad02:
 17334 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17335 000001BF 72F4                    	jc	short findnext02
 17336 000001C1 89C5                    	mov	bp,ax			; flag this entry
 17337                                  	; 11/12/2022
 17338                                  	;mov	byte [es:bp+allocbyte],clobbered
 17339                                  	; 21/10/2022
 17340 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 17341 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 17342                                  
 17343                                  ; ----------------------------------------------------------------------
 17344                                  
 17345                                  ; Common routines
 17346                                  
 17347                                  longpath:
 17348                                  	; 21/03/2019
 17349 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 17350                                  lploopp:
 17351                                  	; 11/12/2022
 17352                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 17353                                  	; 21/10/2022
 17354 000001CF 26807E0000              	cmp	byte [es:bp],free
 17355 000001D4 7512                    	jne	short inuse		;  no, try next one
 17356                                  
 17357 000001D6 B001                    	mov	al,allocated
 17358                                  	; 11/12/2022
 17359                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 17360                                  	; 21/10/2022
 17361 000001D8 26864600                	xchg	[es:bp],al
 17362 000001DC 3C00                    	cmp	al,free 		; is it still free?
 17363 000001DE 7414                    	je	short found		;  yes, go use it
 17364                                  
 17365 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 17366 000001E2 7404                    	je	short inuse		;  no, check the next one
 17367                                  
 17368                                  	; 11/12/2022
 17369                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 17370                                  	; 21/10/2022
 17371 000001E4 26884600                	mov	[es:bp],al
 17372                                  inuse:
 17373 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17374 000001ED 7406                    	je	short fatal
 17375 000001EF 83ED08                  	sub	bp,entrysize
 17376 000001F2 EBDB                    	jmp	short lploopp
 17377                                  found:
 17378 000001F4 C3                      	retn
 17379                                  fatal:
 17380 000001F5 1E                      	push	ds
 17381 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 17382 000001F9 8ED8                    	mov	ds,ax
 17383 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 17384 00000200 1F                      	pop	ds
 17385 00000201 7504                    	jne	short skip_nmis
 17386                                  
 17387 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 17388 00000205 E672                    	out	72h,al
 17389                                  
 17390                                  skip_nmis:
 17391 00000207 FA                      	cli				; disable and mask
 17392 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 17393 0000020A E621                    	out	021h,al
 17394 0000020C E6A1                    	out	0A1h,al
 17395                                  
 17396 0000020E 8CCE                    	mov	si,cs
 17397 00000210 8EDE                    	mov	ds,si
 17398 00000212 BE[3902]                	mov	si,fatal_msg
 17399                                  ;SR;
 17400                                  ;   We set all foci to this VM to issue the stack failure message
 17401                                  ;
 17402 00000215 50                      	push	ax
 17403 00000216 1E                      	push	ds
 17404                                  	;;mov	ax,Bios_Data ; 0070h
 17405                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17406                                  	; 21/10/2022
 17407 00000217 B87000                  	mov	ax,DOSBIODATASEG
 17408 0000021A 8ED8                    	mov	ds,ax
 17409                                  
 17410                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 17411 0000021C F606[C508]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 17412 00000221 1F                      	pop	ds
 17413 00000222 58                      	pop	ax
 17414 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 17415                                  
 17416                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 17417                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 17418                                  	; 21/10/2022
 17419 00000225 9A[C608]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 17420                                  ;
 17421                                  ;SR; We do not bother about the returned status of this call. 
 17422                                  ;
 17423                                  fatal_loop:
 17424 0000022A AC                      	lodsb
 17425 0000022B 3C24                    	cmp	al,'$'
 17426 0000022D 7408                    	je	short fatal_done
 17427                                  
 17428 0000022F B307                    	mov	bl,7
 17429 00000231 B40E                    	mov	ah,14
 17430 00000233 CD10                    	int	10h			; whoops, this enables ints
 17431 00000235 EBF3                    	jmp	short fatal_loop
 17432                                  
 17433                                  fatal_done:
 17434 00000237 EBFE                    	jmp	short fatal_done
 17435                                  
 17436                                  
 17437                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17438                                  ; ----------------------------------------------------------------------
 17439                                  ;	include msbio.cl5		; fatal stack error message
 17440                                  
 17441                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 17442                                  
 17443                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 17444                                  ; ----------------------------------------------------------------------
 17445                                  ; 04/06/2018 - Retro DOS v3.0
 17446                                  
 17447                                  fatal_msg:
 17448 00000239 0D0A                    	db	0Dh,0Ah
 17449 0000023B 070D0A                  	db	7,0Dh,0Ah
 17450 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 17450 00000247 737461636B206F7665-
 17450 00000250 72666C6F770D0A     
 17451 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 17451 00000260 6C7465640D0A24     
 17452                                  
 17453                                  endstackcode:
 17454                                  
 17455                                  ; ----------------------------------------------------------------------
 17456                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 17457                                  ; ----------------------------------------------------------------------
 17458                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 17459                                  
 17460                                  ; 22/03/2019 - Retro DOS v4.0
 17461                                  
 17462                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 17463                                  
 17464                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 17465                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 17466                                  
 17467                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17468                                  ; ----------------------------------------------------------------------
 17469                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 17470                                  
 17471                                  SYSINIT:	
 17472 00000267 E91C02                          JMP	GOINIT
 17473                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 17474                                  
 17475                                  ; ----------------------------------------------------------------------
 17476                                  
 17477                                  struc DDHighInfo
 17478 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 17479 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 17480 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 17481                                  endstruc
 17482                                  
 17483                                  ; 22/03/2019 - Retro DOS v4.0
 17484                                  
 17485 0000026A 00                      runhigh: db	0
 17486                                  
 17487                                  ; 02/11/2022
 17488                                  ;align 4
 17489                                  
 17490                                  DOSINFO: 
 17491 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 17492                                  ;MSDOS:
 17493                                  dos_temp_location: ; dword ; MSDOS 6.0
 17494                                  dosinit:		; MSDOS 6.0
 17495 0000026F 0000                    	dw	0
 17496                                  
 17497                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17498                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 17499                                  ;	dw	0
 17500                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 17501                                  
 17502                                  CURRENT_DOS_LOCATION:
 17503 00000271 0000                    	dw	0
 17504                                  
 17505                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 17506                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 17507                                  
 17508                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17509                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 17510                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17511                                  
 17512                                  DEVICE_LIST:
 17513 00000273 00000000                	dd	0
 17514                                  
 17515                                  ; 04/06/2018 - Retro DOS v3.0
 17516                                  ; 28/03/2018
 17517                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 17518                                  ;
 17519                                  sysi_country:	
 17520 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 17521                                  
 17522                                  ; MSDOS 6.0
 17523 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 17524                                  
 17525 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 17526 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 17527                                  
 17528 00000283 0000                    def_php:	dw	0
 17529                                  
 17530                                  ; M022--
 17531                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17532                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17533                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17534                                  ;  the new home.
 17535                                  
 17536                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17537                                  ; 21/10/2022
 17538                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17539                                  
 17540                                  ; 22/10/2022
 17541                                  seg_reinit_ptr:	; label dword
 17542 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17543                                  temp_bcode_seg:
 17544                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17545                                  		; 22/10/2022
 17546 00000287 9902                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17547                                  
 17548                                  fake_floppy_drv:
 17549 00000289 00                      		db	0	; set to 1 if this machine
 17550                                  				; does not have any floppies!!!
 17551                                  
 17552                                  ; Internal Stack Parameters
 17553                                  
 17554 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17555 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17556 0000028E 00000000                stack_addr:	dd	0	
 17557                                  
 17558                                  ; 05/06/2018 - Retro DOS v3.0
 17559                                  
 17560                                  ; various default values
 17561                                  
 17562 00000292 0100                    MEMORY_SIZE:	dw	1
 17563                                  
 17564                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17565                                  
 17566 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17567 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 17568 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17569 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17570 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17571                                  
 17572 0000029D 08                      FILES:	db	8	; enough files for pipe
 17573 0000029E 04                      FCBS:	db	4	; performance for recycling
 17574 0000029F 00                      KEEP:	db	0	; keep original set
 17575 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17576                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17577                                  ;CONFBOT: dw	0
 17578                                  ;ALLOCLIM: dw	0
 17579                                  CONFBOT: ; 02/11/2022
 17580 000002A1 0000                    top_of_cdss: dw 0
 17581                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17582 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17583                                  
 17584 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17585                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 17586                                  ; (SYSINIT:02A9h)
 17587                                  command_line:
 17588 000002A9 0200                    	db	2,0
 17589 000002AB 50                      	db	'P'
 17590 000002AC 00                      	db	0
 17591 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 17592                                  ; (SYSINIT:0329h)
 17593 00000329 00                      ZERO:	db	0
 17594 0000032A 00                      sepchr:	db	0
 17595 0000032B 0000                    linecount: dw	0			; line count in config.sys
 17596 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17597 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17598                                  
 17599 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17600 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17601                                  
 17602 00000339 0000                    buf_prev_off:	dw	0
 17603                                  
 17604                                          ;IF      NOT NOEXEC
 17605                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17606                                          ;ENDIF
 17607                                  
 17608                                  ; 01/05/2018
 17609                                  COMEXE:
 17610 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17611 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17612 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17613 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17614 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17615 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17616 00000347 0000                    		dw	0
 17617                                  
 17618                                  ; variables for install= command.
 17619                                  
 17620 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17621                                  					;  indicating the pass number
 17622                                  					; 0 - do scan for DOS=HIGH/LOW
 17623                                  					; 1 - load device drivers
 17624                                  					; 2 - was to load IFS
 17625                                  					;      now it is unused
 17626                                  					; 3 - do install=
 17627                                  					; >3 - nop
 17628 0000034A 0000                    install_flag:	dw	0
 17629                                  
 17630                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17631                                  has_installed	equ	00000010b	; sysinit_base installed.
 17632                                  
 17633 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17634 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17635 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17636 00000356 0000                    checksum:	dw	0		; used by sum_up
 17637                                  
 17638 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17639 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 17640 0000036D 20                      ldexec_start:	db	' '
 17641 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17642                                  
 17643                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17644                                  
 17645                                  instexe:
 17646 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 17647 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17648 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17649 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17650 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17651 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17652 000003CA 0000                    		dw	0
 17653                                  
 17654                                  ; variables for comment=
 17655                                  
 17656 000003CC 00                      com_level:	db	0		; level of " " in command line
 17657 000003CD 00                      cmmt:		db	0		; length of comment string token
 17658 000003CE 00                      cmmt1:		db	0		; token
 17659 000003CF 00                      cmmt2:		db	0		; token
 17660 000003D0 00                      cmd_indicator:	db	0
 17661 000003D1 00                      donotshownum:	db	0
 17662                                  
 17663 000003D2 0000                    count:		dw	0
 17664 000003D4 0000                    org_count:	dw	0
 17665 000003D6 0000                    chrptr:		dw	0
 17666 000003D8 0000                    cntryfilehandle: dw	0
 17667 000003DA 0000                    old_area:	dw	0
 17668 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17669                                  
 17670                                  bucketptr: ; label dword
 17671                                  bufptr:	   ; label dword		; leave this stuff in order!
 17672 000003DE 0000                    memlo:	dw	0
 17673                                  prmblk:	   ; label word
 17674 000003E0 0000                    memhi:	dw	0
 17675 000003E2 0000                    ldoff:	dw	0
 17676 000003E4 0000                    area:	dw	0
 17677                                  
 17678                                  ; Following is the request packet used to call INIT routines for 
 17679                                  ; all device drivers. Some fields may be accessed individually in
 17680                                  ; the code, and hence have individual labels, but they should not
 17681                                  ; be separated.
 17682                                  
 17683 000003E6 18                      packet:	db	24			; was 22
 17684 000003E7 00                      	db	0
 17685 000003E8 00                      	db	0			; initialize code
 17686 000003E9 0000                    	dw	0
 17687 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17688                                  
 17689 000003F3 00                      unitcount:	db	0
 17690 000003F4 00000000                break_addr:	dd	0
 17691 000003F8 00000000                bpb_addr:	dd	0
 17692                                  drivenumber:	; 22/10/2022
 17693 000003FC 00                      devdrivenum:	db	0 
 17694 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17695                                  
 17696                                  ; end of request packet
 17697                                  
 17698                                  ;drivenumber:	db	0  ; 22/03/2019
 17699                                  
 17700                                  toomanydrivesflag:
 17701 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17702                                  align 2
 17703                                  
 17704                                  BCodeSeg:	; 21/10/2022
 17705 00000400 9902                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17706                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17707                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17708                                  
 17709                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17710                                  ;; 19/04/2019
 17711                                  ;_timer_lw_:
 17712                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17713                                  	
 17714                                  ;SR;
 17715                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17716                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17717                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17718                                  ;is passed to DOS as part of the DOSINIT call.
 17719                                  ;
 17720                                  
 17721                                  BiosComBlock:
 17722                                  	;dd	Bios_Data:SysinitPresent 
 17723                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17724 00000402 [F108]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17725                                  	;dw	KERNEL_SEGMENT ; 0070h
 17726                                  	; 21/10/2022
 17727 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17728                                  
 17729                                  ;align 2
 17730                                  
 17731                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17732                                  tempstack:	
 17733 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17734                                  
 17735                                  ; ----------------------------------------------------------------------------
 17736                                  
 17737                                  	; 22/10/2022 - Retro DOS v4.0
 17738                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17739                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17740                                  	; 12/12/2022
 17741                                  	; 22/03/2019 - Retro DOS v4.0
 17742                                  	; 06/07/2018
 17743                                  	; 04/06/2018 - Retro DOS v3.0
 17744                                  ; before doing anything else, let's set the model byte
 17745 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17746 00000488 CD15                    	int	15h			; *
 17747 0000048A 7216                    	jc	short no_rom_config
 17748                                  
 17749                                  	;cmp	ah,0			; double check
 17750                                  	;jne	short no_rom_config
 17751                                  	; 04/09/2023
 17752 0000048C 08E4                    	or	ah,ah
 17753 0000048E 7512                    	jnz	short no_rom_config
 17754 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17755 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17756 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17757 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17758                                  	;jmp	short SYSIN
 17759                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17760 000004A0 EB2C                    	jmp	short move_myself
 17761                                  
 17762                                  no_rom_config:				; Old ROM
 17763 000004A2 B800F0                  	mov	ax,0F000h
 17764 000004A5 8ED8                    	mov	ds,ax
 17765 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17766 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17767                                  
 17768                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17769                                  ; execute the equipment determination interrupt and then
 17770                                  ; check the returned value to see if we have any floppy drives
 17771                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17772                                  ; see the at tech ref bios listings for help on the equipment
 17773                                  ; flag interrupt (11h)	
 17774                                  
 17775                                  	; 22/10/2022
 17776                                  check_for_fake_floppy:			; entry point for rom_config above
 17777 000004AE CD11                    	int	11h			; check equipment flag
 17778                                  
 17779                                  	; 12/12/2022
 17780 000004B0 A801                    	test	al,1		
 17781                                  	;test	ax,1			; have any floppies?
 17782 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17783                                  
 17784                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17785                                  ; whether it is an old ROM BIOS or a new one
 17786                                  ;
 17787                                  ; WARNING !!!
 17788                                  ;
 17789                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17790                                  ; here will require an equivalent modification in MSINIT.ASM also
 17791                                  
 17792 000004B4 06                      	push	es
 17793                                  
 17794 000004B5 30C9                    	xor	cl,cl	
 17795 000004B7 B408                    	mov	ah,8			; get disk parameters
 17796 000004B9 B200                    	mov	dl,0			; of drive 0
 17797 000004BB CD13                    	int	13h
 17798                                  
 17799 000004BD 07                      	pop	es
 17800                                  
 17801 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17802                                  					;  ROM BIOS lied
 17803                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17804                                  	;je	short move_myself
 17805                                  	; 04/09/2023
 17806 000004C0 08C9                    	or	cl,cl
 17807 000004C2 740A                    	jz	short move_myself
 17808                                  
 17809 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17810 000004C6 7506                    	jnz	short move_myself
 17811                                  
 17812 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17813                                  
 17814                                  move_myself:
 17815 000004CE FC                      	cld				; set up move
 17816 000004CF 31F6                    	xor	si,si
 17817 000004D1 89F7                    	mov	di,si
 17818                                  
 17819                                  	; 12/12/2022
 17820 000004D3 0E                      	push	cs
 17821 000004D4 1F                      	pop	ds
 17822                                  
 17823                                  	;mov	cx,[cs:MEMORY_SIZE]
 17824 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17825                                  
 17826                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17827                                  ;;;	if	msver
 17828                                  ;	cmp	cx,1		; 1 means do scan
 17829                                  ;	jnz	short noscan
 17830                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17831                                  ;	xor	bx,bx
 17832                                  ;
 17833                                  ;memscan:inc	cx
 17834                                  ;	jz	setend
 17835                                  ;	mov	ds,cx
 17836                                  ;	mov	al,[bx]
 17837                                  ;	not	al
 17838                                  ;	mov	[bx],al
 17839                                  ;	cmp	al,[bx]
 17840                                  ;	not	al
 17841                                  ;	mov	[bx],al
 17842                                  ;	jz	short memscan
 17843                                  ;setend:
 17844                                  ;	mov	cs:[memory_size],cx
 17845                                  ;;;	endif
 17846                                  
 17847                                  ;noscan: 				; cx is mem size in para
 17848                                  ;;
 17849                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17850                                  ;;		  before we try to run.
 17851                                  ;;	       b) in any case, we should check for sufficient memory and give
 17852                                  ;;		  an appropriate error diagnostic if there isn't enough
 17853                                  ;
 17854                                  ;	push	cs
 17855                                  ;	pop	ds
 17856                                  ;
 17857                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17858                                  ;;	  that way it would be easier to slide them down home in a minimal
 17859                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17860                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17861                                  ;;	  temporary home and the final one.  the problem with doing that
 17862                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17863                                  ;
 17864                                  ;	dec	cx			; one para for an arena at end of mem
 17865                                  ;					; in case of UMBs
 17866                                  
 17867                                  	; 22/10/2022
 17868                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17869                                  
 17870                                  	; 12/12/2022
 17871                                  	;push	cs
 17872                                  	;pop	ds
 17873                                  
 17874 000004D9 49                      	dec	cx
 17875                                  
 17876                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17877                                  
 17878 000004DA 31DB                    	xor	bx,bx
 17879 000004DC 8EC3                    	mov	es,bx	; 0
 17880                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17881                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17882                                  	; 29/09/2023
 17883 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17884 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17885 000004E9 751B                    	jne	short NoRPL
 17886 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17887 000004F0 7514                    	jne	short NoRPL
 17888                                  
 17889 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17890 000004F4 52                      	push	dx
 17891 000004F5 B8064A                  	mov	ax,4A06h
 17892                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17893 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17894 000004FA 58                      	pop	ax
 17895 000004FB 89D1                    	mov	cx,dx
 17896 000004FD 39C2                    	cmp	dx,ax
 17897 000004FF 7405                    	je	short NoRPL
 17898                                  	
 17899                                  	; 11/12/2022
 17900                                  	; ds = cs
 17901 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17902                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17903                                  	;mov	[cs:RPLMemTop],dx
 17904                                  	
 17905 00000505 49                      	dec	cx
 17906                                  NoRPL:
 17907 00000506 B8[F037]                	mov	ax,SI_end		; need this much room for sysinit
 17908                                  					; (SI_end == sysinit code size)
 17909 00000509 E8AA06                  	call	off_to_para
 17910 0000050C 29C1                    	sub	cx,ax
 17911                                  
 17912                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17913                                  ; code above sysinit in memory
 17914                                  ;
 17915 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17916                                  
 17917 00000512 B8A019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17918 00000515 E89E06                  	call	off_to_para		; leave this much room for BIOS code
 17919 00000518 29C1                    	sub	cx,ax
 17920 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17921                                  
 17922 0000051C B9[F037]                	mov	cx,SI_end		; (sysinit code size)
 17923 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17924 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17925                                  
 17926 00000523 06                      	push	es			; push relocated segment
 17927 00000524 B8[2905]                	mov	ax,SYSIN
 17928 00000527 50                      	push	ax			; push relocated entry point
 17929                                  
 17930 00000528 CB                      	retf				; far jump to relocated sysinit
 17931                                  
 17932                                  ; ----------------------------------------------------------------------------
 17933                                  
 17934                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17935                                  
 17936                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17937                                  	; (SYSINIT:0533h)
 17938                                  SYSIN:
 17939                                  	; Retro DOS 4.0 - 22/03/2019
 17940                                  	; Retro DOS 2.0 - 25/02/2018
 17941                                  
 17942                                  	; 23/04/2019
 17943                                  	;;mov	ax,Bios_Data
 17944                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17945                                  	; 21/10/2022
 17946 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17947 0000052C 8ED8                    	mov	ds,ax
 17948 0000052E 8C0E[EF08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17949 00000532 C606[F108]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17950                                  
 17951                                  ; first move the MSDOS.SYS image up to a harmless place 
 17952                                  ; on top of our new sysinitseg
 17953                                  
 17954                                  	; 22/10/2022
 17955 00000537 B8[F037]                	mov	ax,SI_end		; how big is sysinitseg?
 17956 0000053A E87906                  	call	off_to_para
 17957 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17958 0000053F 01C8                    	add	ax,cx
 17959 00000541 8EC0                    	mov	es,ax
 17960                                  	
 17961 00000543 31F6                    	xor	si,si
 17962 00000545 89F7                    	mov	di,si
 17963                                  
 17964 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17965                                  
 17966                                  	;mov	ax,cs	
 17967                                  	;mov	ds,ax
 17968                                  
 17969                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17970                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17971                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17972                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17973                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17974                                  
 17975                                  	; 22/10/2022
 17976 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17977 0000054F F3A5                    	rep     movsw
 17978 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17979                                  
 17980                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17981                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17982                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17983                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17984                                  
 17985                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17986                                  	;mov	ax,cs
 17987                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17988                                  	;mov	ds,ax
 17989                                  
 17990                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17991                                  
 17992                                  ;	; 24/04/2019 
 17993                                  ;;ifndef ROMDOS
 17994                                  ;	mov	ax,[es:3] 		; get offset of dos
 17995                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17996                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17997                                  ;	call	off_to_para		; subtract this much from segment
 17998                                  ;	; 23/04/2019
 17999                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 18000                                  ;	sub	[FINAL_DOS_LOCATION],ax
 18001                                  ;;else
 18002                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 18003                                  ;;
 18004                                  ;;endif ; ROMDOS
 18005                                  
 18006                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 18007                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 18008                                  
 18009                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 18010                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 18011                                  
 18012                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 18013                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18014 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 18015                                  
 18016 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18017                                  	; 02/11/2022
 18018 0000055D E85606                  	call	off_to_para		; subtract this much from segment
 18019 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 18020                                  
 18021                                  	; Current DOSCODE start address = dword [dosinit]
 18022                                  
 18023                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 18024                                  ;; until it is determined whether it will be running in HIMEM or not.
 18025                                  
 18026                                  ;ifndef ROMDOS
 18027                                  
 18028                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 18029                                  
 18030                                  	; 22/10/2022
 18031 00000565 8CC0                    	mov	ax,es
 18032 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 18033 0000056A 8EC0                    	mov	es,ax
 18034 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 18035 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 18036                                  
 18037                                  	;mov	si,BCODE_START ; mov si,30h
 18038                                  	; 09/12/2022
 18039 00000573 BE[3000]                	mov	si,BCODESTART
 18040                                  	; 02/11/2022
 18041 00000576 89F7                    	mov	di,si
 18042                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 18043                                  	;sub	cx,si
 18044                                  	; 29/09/2023
 18045                                  	BCODESIZE equ BCODEEND-BCODESTART
 18046 00000578 B97019                  	mov	cx,BCODESIZE
 18047 0000057B D1E9                    	shr	cx,1
 18048 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 18049                                  
 18050 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 18051 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 18052                                  
 18053                                  ;endif	; not ROMDOS
 18054                                  
 18055                                  ; now call dosinit while it's in its temporary home
 18056                                  
 18057                                  	;mov	ax,cs
 18058                                  	;mov	ds,ax	 
 18059                                  
 18060                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 18061                                  
 18062                                  	; 22/10/2022
 18063                                  
 18064 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 18065                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 18066 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 18067                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 18068                                  
 18069 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 18070                                  
 18071 00000595 FA                      	cli
 18072 00000596 8CC8                    	mov	ax,cs
 18073 00000598 8ED0                    	mov	ss,ax
 18074                                  
 18075                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 18076                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 18077                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 18078                                  ;SYSINIT:0532h:
 18079                                  
 18080                                  ; 22/10/2022
 18081                                  ; ----------------------------------------------------------------------------
 18082                                  ;SYSINIT:05A6h:
 18083                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 18084                                  
 18085                                  	;mov	sp, 05A6h
 18086 0000059A BC9A05                  	mov     sp,locstack		; set stack
 18087                                  
 18088 0000059D FB                      	sti
 18089                                  
 18090                                  ;align 2
 18091                                  	; 30/03/2018
 18092                                  ;LOCSTACK:
 18093                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 18094                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 18095                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 18096                                  
 18097                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18098                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 18099                                  
 18100                                  ; This call to DOSINIT will relocate the DOS data from its present location
 18101                                  ; at the top of memory, to its final location in low memory just above the
 18102                                  ; BIOS data. It will then build important DOS data structures in low 
 18103                                  ; memory following the DOS data. It returns (among many other things) the
 18104                                  ; new starting address of free memory.
 18105                                  
 18106 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 18107                                  			 ; es:di -> sysinitvars_ext
 18108                                  
 18109 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 18110                                  	
 18111                                  	; 11/12/2022
 18112                                  	; 22/03/2019
 18113 000005A8 0E                      	push	cs
 18114 000005A9 1F                      	pop	ds
 18115                                  	; 22/10/2022
 18116 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 18117 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 18118 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 18119                                  	
 18120                                  	; 11/12/2022
 18121                                  	; ds = cs
 18122                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 18123                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 18124                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 18125                                  
 18126                                  	; 05/06/2018 - Retro DOS v3.0
 18127                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 18128                                  
 18129                                  	; 11/12/2022
 18130                                  	; ds = cs
 18131                                  	; 22/10/2022
 18132                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 18133 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 18134                                  	;mov	[cs:DOSINFO],ax
 18135 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 18136                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 18137 000005BB 268B4502                	mov	ax,[es:di+2]
 18138                                  	;mov	[cs:DOSINFO+2],ax
 18139 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 18140                                  
 18141                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 18142 000005C2 268B4504                	mov	ax,[es:di+4]
 18143                                  	;mov	[cs:sysi_country],ax
 18144 000005C6 A3[7702]                	mov	[sysi_country],ax
 18145                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 18146 000005C9 268B4506                	mov	ax,[es:di+6]
 18147                                  	;mov	[cs:sysi_country+2],ax
 18148 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 18149                                  
 18150                                  	; 20/04/2019
 18151                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 18152                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 18153                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 18154                                  	; 22/10/2022
 18155                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 18156                                  	;;;mov	[dos_segreinit+2],es
 18157                                  	;;mov	[dos_segreinit+2],ax
 18158                                  	;mov	[cs:dos_segreinit+2],ax
 18159                                  	; 11/12/2022
 18160                                  	; ds = cs
 18161 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18162 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 18163                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18164                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 18165                                  	;mov	[cs:dos_segreinit+2],es
 18166                                  
 18167                                  ; ----------------------------------------------------------------------------
 18168                                  
 18169                                  ;SYSINIT:0577h:
 18170                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 18171                                  ;SYSINIT:05D1h:	; NoRPLArena 
 18172                                  
 18173                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18174                                  ;------ Cover up RPL code with an arena
 18175                                  ;SYSINIT:05EBh:
 18176                                  	; 11/12/2022
 18177                                  	; ds = cs
 18178 000005D8 31DB                    	xor	bx,bx
 18179 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 18180                                  	;cmp	word [RPLMemTop],0
 18181                                  	;;cmp	word [cs:RPLMemTop],0
 18182 000005DE 7450                    	je	short NoRPLArena
 18183                                  
 18184                                  ;------ alloc all memory
 18185                                  
 18186                                  	; 11/12/2022
 18187                                  	;mov	bx,0FFFFh
 18188 000005E0 4B                      	dec	bx
 18189                                  	; bx = 0FFFFh
 18190 000005E1 B448                    	mov	ah,48h
 18191 000005E3 CD21                    	int	21h
 18192                                  			; DOS - 2+ - ALLOCATE MEMORY
 18193                                  			; BX = number of 16-byte paragraphs desired
 18194 000005E5 B448                    	mov	ah,48h
 18195 000005E7 CD21                    	int	21h
 18196                                  
 18197 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 18198 000005EB 06                      	push	es
 18199                                  
 18200                                  ;------ resize upto RPL mem
 18201                                  
 18202                                  	; 11/12/2022
 18203                                  	; ds = cs
 18204                                  	;sub	ax,[cs:RPLMemTop]
 18205 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 18206 000005F0 F7D8                    	neg	ax
 18207 000005F2 48                      	dec	ax
 18208 000005F3 89C3                    	mov	bx,ax
 18209 000005F5 B44A                    	mov	ah,4Ah
 18210 000005F7 CD21                    	int	21h
 18211                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18212                                  			; ES = segment address of block to change
 18213                                  			; BX = new size in paragraphs
 18214                                  
 18215                                  ;------ allocate the free (RPL MEM)
 18216                                  
 18217 000005F9 BBFFFF                  	mov	bx,0FFFFh
 18218 000005FC B448                    	mov	ah,48h
 18219 000005FE CD21                    	int	21h
 18220 00000600 B448                    	mov	ah,48h
 18221 00000602 CD21                    	int	21h
 18222                                  
 18223                                  ;----- mark that it belongs to RPL
 18224                                  
 18225 00000604 48                      	dec	ax
 18226 00000605 8EC0                    	mov	es,ax
 18227                                  	;mov	word [es:arena_owner],8
 18228 00000607 26C70601000800          	mov	word [es:1],8
 18229                                  	;mov	word [es:arena_name],'RP'
 18230 0000060E 26C70608005250          	mov	word [es:8],'RP'
 18231                                  	;mov	word [es:arena_name+2],'L'
 18232 00000615 26C7060A004C00          	mov	word [es:10],'L'
 18233                                  	;mov	word [es:arena_name+4],0
 18234 0000061C 26C7060C000000          	mov	word [es:12],0
 18235                                  	;mov	word [es:arena_name+6],0
 18236 00000623 26C7060E000000          	mov	word [es:14],0	
 18237                                  
 18238 0000062A 07                              pop     es                      ; get back ptr to first block
 18239 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 18240 0000062D CD21                    	int	21h		
 18241                                  					; DOS - 2+ - FREE MEMORY
 18242                                  					; ES = segment address of area to be freed
 18243                                  	; 11/12/2022
 18244 0000062F F8                      	clc
 18245                                  
 18246                                  ; ----------------------------------------------------------------------------
 18247                                  
 18248                                  NoRPLArena:
 18249                                  	; 11/12/2022
 18250                                  	; ds = cs
 18251                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 18252 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 18253                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18254                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 18255                                  
 18256                                  	; 11/12/2022
 18257                                  	;clc				; get the extended memory size
 18258                                  
 18259                                  ;	execute the get extended memory size subfunction in the bios int 15h
 18260                                  ;	if the function reports an error do nothing else store the extended
 18261                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 18262                                  ;	currently pointed to by es:di. use the offsets specified in the
 18263                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 18264                                  
 18265 00000634 B488                    	mov	ah,88h
 18266 00000636 CD15                    	int	15h			; check extended memory size
 18267 00000638 720B                    	jc	short no_ext_memory
 18268                                  			; Get Extended Memory Size
 18269                                  			; Return: CF clear on success
 18270                                  			; AX = size of memory above 1M in K	
 18271                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 18272                                  	; 22/10/2022
 18273 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 18274 0000063E 09C0                    	or	ax,ax
 18275 00000640 7403                    	jz	short no_ext_memory
 18276 00000642 E8EA04                  	call	ClrVDISKHeader
 18277                                  no_ext_memory:
 18278                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 18279 00000645 268B4510                	mov	ax,[es:di+10h]
 18280                                  	;add	ax,bufinsiz
 18281 00000649 83C014                  	add	ax,20			; size of buffer header
 18282                                  	; 11/12/2022
 18283                                  	; ds = cs
 18284 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 18285                                  	;mov	[cs:singlebuffersize],ax	
 18286                                  	; 11/12/2022
 18287 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 18288                                  	;mov	al,[cs:DEFAULT_DRIVE]
 18289                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 18290 00000652 26884543                	mov	[es:di+43h],al
 18291                                  
 18292                                  ; determine if 386 system...
 18293                                  
 18294                                  	;get_cpu_type			; macro to determine cpu type
 18295                                  
 18296                                  get_cpu_type:
 18297                                  	; 11/12/2022
 18298 00000656 9C                      	pushf
 18299                                  	;push	bx
 18300                                  	;xor	bx,bx
 18301                                  	; 11/12/2022
 18302                                  	;xor	cx,cx
 18303                                  	;
 18304 00000657 31C0                    	xor	ax,ax
 18305                                  	; ax = 0
 18306 00000659 50                      	push    ax
 18307 0000065A 9D                      	popf
 18308 0000065B 9C                      	pushf
 18309 0000065C 58                      	pop	ax
 18310 0000065D 2500F0                  	and	ax,0F000h
 18311                                  	;cmp	ax,0F000h
 18312 00000660 80FCF0                  	cmp	ah,0F0h 
 18313 00000663 7410                    	je	short cpu_8086
 18314                                  	;mov	ax,0F000h
 18315 00000665 B4F0                    	mov	ah,0F0h
 18316                                  	; ax = 0F000h
 18317 00000667 50                      	push	ax
 18318 00000668 9D                      	popf
 18319 00000669 9C                      	pushf
 18320 0000066A 58                      	pop	ax
 18321                                  	;and	ax,0F000h
 18322 0000066B 80E4F0                  	and	ah,0F0h
 18323 0000066E 7405                    	jz	short cpu_286
 18324                                  cpu_386:
 18325                                  	; 11/12/2022
 18326                                  	;;inc	bx
 18327                                  	;inc	cx
 18328                                  	; 11/12/2022
 18329                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 18330 00000670 26C6454401              	mov	byte [es:di+44h],1
 18331                                  cpu_286:
 18332                                  	;;;inc	bx
 18333                                  	;;inc	cx
 18334                                  cpu_8086:
 18335                                  	; 11/12/2022
 18336                                  	;;mov	ax,bx	
 18337                                  	;pop	bx
 18338 00000675 9D                      	popf
 18339                                  
 18340                                  	;...
 18341                                  
 18342                                  	; 11/12/2022
 18343                                  	;or	cl,cl
 18344                                  	;jz	short not_386_system
 18345                                  	; 11/12/202
 18346                                  	;cmp	cl,2
 18347                                  	;;cmp	ax,2			; is it a 386?
 18348                                  	;jne	short not_386_system	; no: don't mess with flag
 18349                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 18350                                  	; 11/12/2022
 18351                                  	; 22/10/2022
 18352                                  	;mov	byte [es:di+44h],1
 18353                                  not_386_system:
 18354                                  	;mov	al,[es:di+SYSI_NUMIO]
 18355 00000676 268A4520                	mov	al,[es:di+20h]
 18356                                  	; 11/12/2022
 18357                                  	; ds = cs
 18358 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 18359                                  	;mov	[cs:drivenumber],al
 18360                                  
 18361 0000067D 8CC8                    	mov	ax,cs
 18362 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 18363                                  	; 11/12/2022
 18364                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 18365                                  	;;mov	cx,[cs:singlebuffersize]
 18366                                  	;shr	cx,1			
 18367                                  	;shr	cx,1			; divide size by 16...
 18368                                  	;shr	cx,1
 18369                                  	;shr	cx,1			; ...to get paragraphs...
 18370                                  	;inc	cx			; ... and round up
 18371                                  	; 11/12/2022
 18372 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 18373 00000686 B104                    	mov	cl,4
 18374 00000688 D3EB                    	shr	bx,cl
 18375 0000068A 43                      	inc	bx
 18376                                  
 18377                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 18378                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 18379                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 18380                                  ;	  it is probably safe to assume that the sector size always will be.
 18381                                  ;
 18382                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 18383                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 18384                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 18385                                  ;	  other code from ever causing a problem???
 18386                                  
 18387                                  	; 11/12/2022
 18388 0000068B 29D8                    	sub	ax,bx
 18389                                  	;sub	ax,cx
 18390 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 18391                                  	; 22/10/2022
 18392                                  	;mov	[cs:top_of_cdss],ax
 18393                                  
 18394                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 18395                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 18396                                  ;	for allocating memory for MagicDrv.
 18397                                  
 18398                                  	; 30/12/2023
 18399                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 18400                                  	;push	di
 18401                                  
 18402                                  	; 22/10/2022
 18403                                  ;	mov	cx,ax			; save pointer for buffer
 18404                                  ;
 18405                                  ;;	now allocate space for 26 CDSs
 18406                                  ;
 18407                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 18408                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18409                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18410                                  
 18411                                  ; setup and initialize the temporary buffer at cx
 18412                                  
 18413                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 18414 00000690 26C47D12                	les	di,[es:di+12h]
 18415                                  	; 11/12/2022
 18416 00000694 31DB                    	xor	bx,bx
 18417                                  	;xor	ax,ax
 18418                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 18419                                  	;mov	word [es:di+4],0
 18420 00000696 26895D04                	mov	[es:di+4],bx ; 0
 18421                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 18422                                  	;mov	word [es:di],0
 18423 0000069A 26891D                  	mov	[es:di],bx ; 0
 18424                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 18425                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 18426 0000069D 26894502                	mov	[es:di+2],ax
 18427                                  
 18428                                  	;mov	es,cx
 18429 000006A1 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 18430                                  
 18431                                  	; 11/12/2022
 18432                                  	;xor	ax,ax
 18433                                  	;mov	di,ax			; es:di -> single buffer
 18434 000006A3 89DF                    	mov	di,bx
 18435                                  	; di = 0
 18436                                  
 18437                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 18438                                  	; 11/12/2022
 18439                                  	;mov	[es:di],ax ; 0
 18440 000006A5 26891D                  	mov	[es:di],bx ; 0
 18441                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 18442                                  	; 11/12/2022
 18443                                  	;mov	[es:di+2],ax ; 0
 18444 000006A8 26895D02                	mov	[es:di+2],bx ; 0 
 18445                                  
 18446                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 18447                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 18448                                  
 18449                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 18450 000006AC 26C74504FF00            	mov	word [es:di+4],00FFh
 18451                                  ;SYSINIT:06E6h
 18452                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 18453                                  	;mov	word [es:di+6],0
 18454                                  	; 11/12/2022
 18455                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 18456 000006B2 26895D06                	mov	[es:di+6],bx ; 0
 18457                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 18458                                  	;mov	word [es:di+8],0
 18459                                  	; 11/12/2022
 18460                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 18461 000006B6 26895D08                	mov	[es:di+8],bx ; 0
 18462                                  
 18463                                  	; 30/12/2023 (!*)
 18464                                  	;pop	di			; restore pointer to DOSINFO data
 18465                                  	;pop	es
 18466                                  
 18467                                  	; 11/12/2022
 18468                                  	; ds = cs
 18469                                  	; 22/10/2022
 18470                                  	;push	cs
 18471                                  	;pop	ds
 18472                                  
 18473 000006BA E80205                  	call	TempCDS 		; set up cdss so re_init and sysinit
 18474                                  					;  can make disk system calls
 18475                                  					; tempcds trashes ds
 18476                                  	; 10/05/2019
 18477 000006BD 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 18478                                  
 18479                                  	;if not ibmjapver
 18480                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 18481                                  	;endif
 18482                                  
 18483                                  	; 22/10/2022
 18484                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 18485                                  	;call	far ptr 70h:89Bh
 18486 000006C2 9A[9008]7000            	call	DOSBIODATASEG:RE_INIT
 18487                                  
 18488 000006C7 FB                      	sti				; ints ok
 18489 000006C8 FC                      	cld				; make sure
 18490                                  
 18491                                  ; 23/03/2019
 18492                                  
 18493                                  ;SYSINIT:069Ch
 18494                                  
 18495                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 18496                                  ; of the way by putting it just below sysinit at end of memory.
 18497                                  
 18498 000006C9 8CCB                    	mov	bx,cs
 18499 000006CB 83EB10                  	sub	bx,10h
 18500 000006CE 8EC3                    	mov	es,bx
 18501 000006D0 31F6                    	xor	si,si
 18502 000006D2 89F7                    	mov	di,si
 18503 000006D4 B98000                  	mov	cx,128
 18504 000006D7 F3A5                    	rep	movsw
 18505                                  
 18506                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18507                                  	; 22/10/2022
 18508 000006D9 268C063600              	mov	[es:36h],es
 18509                                  
 18510                                   	; Set Process Data Block - Program Segment Prefix address
 18511                                  	; BX = PDB/PSP segment
 18512 000006DE B450                            mov	ah,50h ; SET_CURRENT_PDB
 18513 000006E0 CD21                    	int	21h			; tell DOS we moved it
 18514                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18515                                  			; BX = segment address of new PSP
 18516                                  	; 22/10/2022
 18517                                  	; 27/03/2019
 18518                                  	; 30/12/2023
 18519                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 18520                                  
 18521 000006E2 0E                      	push	cs	
 18522 000006E3 1F                      	pop	ds
 18523                                  
 18524                                  	; set up temp. critical error handler
 18525 000006E4 BA[A832]                	mov	dx,int24		; set up int 24 handler
 18526                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18527                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18528 000006E7 B82425                  	mov	ax,2524h
 18529 000006EA CD21                    	int	21h
 18530                                  
 18531 000006EC 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18532 000006F1 7405                            je      short no_err		   ;  N: continue            M029
 18533 000006F3 BA[A637]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18534                                          ; 22/10/2022
 18535                                  	;call	print 			   ;		             M029
 18536                                  	; 12/12/2022
 18537 000006F6 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18538                                  no_err:
 18539                                  	; 12/05/2019
 18540                                  	;----------------------------------------------
 18541                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18542                                  	; 22/10/2022 - Retro DOS v4.0
 18543                                  	; 12/12/2022
 18544 000006F8 BA[AC32]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18545                                  p_dosinit_msg:
 18546 000006FB E8852B                  	call	print			; Print message
 18547                                  	;----------------------------------------------
 18548                                  	
 18549                                  	; 11/12/2022
 18550                                  	; 22/10/2022
 18551                                  	; 23/03/2019 - Retro DOS v4.0
 18552                                  	;pop	ds			; start of free memory
 18553                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18554                                  	
 18555                                  	; 11/12/2022
 18556                                  	; 27/03/2019
 18557 000006FE 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18558                                  	; 30/12/2023
 18559                                  	;pop	ds ; */
 18560                                  
 18561 00000702 08D2                    	or	dl,dl
 18562                                  	;jz	short nodrvset		; bios didn't say
 18563 00000704 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18564                                  	;dec	dl			; A = 0
 18565                                  	; 18/12/2022
 18566 00000706 4A                      	dec	dx
 18567 00000707 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18568 00000709 CD21                    	int	21h			; select the disk
 18569                                  			; DOS - SELECT DISK
 18570                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18571                                  			; Return: AL = number of logical drives
 18572                                  nodrvset:
 18573                                  	;ifdef	dblspace_hooks
 18574                                  	;	....
 18575                                  	;	....
 18576                                  	;endif	
 18577                                  
 18578                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18579                                  
 18580                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18581                                  ; ----------------------------------------------------------------------------
 18582                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18583                                  
 18584                                  ProcessConfig:
 18585                                  	;; ds = cs ; 27/03/2019
 18586                                  	; 11/12/2022
 18587                                  	; ds <> cs	
 18588                                  
 18589                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18590                                  
 18591 0000070B E87B17                  	call	doconf			; do pre-scan for dos=high/low
 18592                                  
 18593                                  	; 11/12/2022
 18594                                  	; 27/03/2019
 18595                                  	; ds = cs (at return from doconf)
 18596                                  
 18597                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18598                                  ; It will either be relocated to low memory, above the DOS data structures,
 18599                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18600                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18601                                  ; to tell the DOS data where the code has been placed, and to install the
 18602                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18603                                  ; must first initialize it in its present location and load the installable
 18604                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18605                                  ; relocate the DOS code into HiMem.
 18606                                  ;
 18607                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18608                                  ; to install the low memory stub (this must be done before allowing any
 18609                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18610                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18611                                  ; been patched.
 18612                                  
 18613                                  	; 22/10/2022 - Retro DOS v4.0
 18614                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18615                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18616                                  	; 11/12/2022
 18617 0000070E 803E[6A02]00            	cmp	byte [runhigh],0
 18618 00000713 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18619                                  
 18620                                  ;------ user chose to load high
 18621                                  
 18622                                  	; 22/10/2022
 18623                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18624                                  	; 11/12/2022
 18625                                  	; ds = cs
 18626 00000715 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18627                                  
 18628                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18629                                  	; 27/03/2019
 18630                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18631                                  
 18632 00000719 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18633                                  	; 11/12/2022
 18634                                  	; ds = cs
 18635                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18636 0000071B FF1E[7B02]              	call	far [dos_segreinit]
 18637                                  
 18638 0000071F EB10                    	jmp	short do_multi_pass
 18639                                  
 18640                                  ;------ User chose to load dos low
 18641                                  
 18642                                  dont_install_stub:
 18643                                  	; 22/10/2022
 18644 00000721 31DB                    	xor	bx,bx			; M012
 18645                                  					; don't use int 21 call to alloc mem
 18646 00000723 E8D601                  	call	MovDOSLo		; move it !
 18647                                  
 18648 00000726 B80100                  	mov	ax,1			; dont install stub
 18649                                  	; 11/12/2022
 18650                                  	; ds = cs
 18651 00000729 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18652                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18653                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18654                                  	; 27/03/2019
 18655                                  ;do_multi_pass:
 18656                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18657                                  
 18658                                  	; 11/12/2022
 18659                                  	; ds =cs
 18660                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18661 0000072D FF1E[7B02]              	call	far [dos_segreinit]
 18662                                  do_multi_pass:
 18663 00000731 E81201                  	call	AllocFreeMem		; allocate all the free mem
 18664                                  					; & update [memhi] & [area]
 18665                                  					; start of free memory.
 18666                                  	;ifdef	dblspace_hooks
 18667                                  	;mov	bx,0			; magic backdoor to place int hooks
 18668                                  	;call	cs:MagicBackdoor
 18669                                  	;endif
 18670                                  
 18671                                  ; Now, process config.sys some more.  
 18672                                  ; Load the device drivers and install programs
 18673                                  
 18674                                  	; 22/10/2022
 18675                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18676                                  	; 11/12/2022
 18677                                  	; ds = cs
 18678 00000734 FE06[4903]              	inc	byte [multi_pass_id]
 18679 00000738 E8E117                  	call	multi_pass		; load device drivers
 18680 0000073B E87524                  	call	ShrinkUMB
 18681 0000073E E89B24                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18682                                  	; 02/11/2022
 18683                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18684                                  	; 11/12/2022
 18685                                  	; ds = cs
 18686 00000741 FE06[4903]              	inc	byte [multi_pass_id]
 18687 00000745 E8D417                  	call	multi_pass		; was load ifs (now does nothing)
 18688                                  
 18689                                  	;ifdef	dblspace_hooks
 18690                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18691                                  	;endif
 18692                                  
 18693                                  	; ds = cs
 18694                                  	
 18695 00000748 E80605                  	call	endfile			; setup fcbs, files, buffers etc
 18696                                  
 18697                                  	;ifdef	dblspace_hooks
 18698                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18699                                  	;endif
 18700                                  
 18701                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18702                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18703                                  ;with overlays called from installed programs
 18704                                  
 18705                                  	; 11/12/2022
 18706                                  	; ds = cs
 18707                                  
 18708                                  	;;mov	ax,Bios_Data ; 0070h
 18709                                  	;mov	ax,KERNEL_SEGMENT
 18710                                  	; 21/10/2022
 18711 0000074B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18712 0000074E 8EC0                    	mov	es,ax			; point ES to bios data
 18713                                  
 18714 00000750 26C606[F108]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18715                                  
 18716                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18717                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18718                                  	;test	byte [cs:install_flag],1
 18719                                  	; 11/12/2022
 18720                                  	; ds = cs
 18721 00000756 F606[4A03]01            	test	byte [install_flag],1
 18722                                  	;test	byte [cs:install_flag],have_install_cmd
 18723                                  					; are there install commands?
 18724 0000075B 7407                    	jz	short dolast		; no, no need for further processing
 18725                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18726                                  	; 11/12/2022
 18727                                  	; ds =cs
 18728 0000075D FE06[4903]              	inc	byte [multi_pass_id]
 18729 00000761 E8B817                  	call	multi_pass		; execute install= commands
 18730                                  
 18731                                  dolast:
 18732                                  	
 18733                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18734                                  ;  free the confbot area used for config.sys and sysinit itself.
 18735                                  
 18736                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18737                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18738                                  ; anything, but just set up the ROM area for suballocation (or print
 18739                                  ; a message if HiMem is not available).
 18740                                  ;
 18741                                  ; There is also this little hack for CPM style DOS calls that needs to
 18742                                  ; be done when A20 is set...
 18743                                  
 18744                                  	; 11/12/2022
 18745                                  	; ds = cs
 18746                                  
 18747                                  	; 22/10/2022
 18748                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18749                                  	; 11/12/2022
 18750 00000764 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18751 00000769 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18752 0000076B E83D01                  	call	LoadDOSHiOrLo
 18753                                  _@@_:
 18754                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18755                                  	; 11/12/2022
 18756                                  	; ds = cs
 18757 0000076E 803E[6A02]00            	cmp	byte [runhigh],0
 18758                                  	;je	short _@@@
 18759 00000773 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18760 00000775 E82804                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18761                                  _@@@:
 18762                                  
 18763                                  ; We are now done with CONFIG.SYS processing
 18764                                  
 18765                                  ConfigDone:
 18766                                  	; 12/12/2022
 18767                                  	; 22/10/2022
 18768                                  	;mov	byte [cs:donotshownum],1 
 18769                                  					; done with config.sys.
 18770                                  					; do not show line number message.
 18771                                  	;mov	es,[cs:area]
 18772                                  	; 12/12/2022
 18773                                  	; ds = cs
 18774                                  	; 27/03/2019
 18775 00000778 C606[D103]01            	mov	byte [donotshownum],1
 18776 0000077D 8E06[E403]              	mov	es,[area]
 18777                                  
 18778 00000781 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18779 00000783 CD21                    	int	21h
 18780                                  			; DOS - 2+ - FREE MEMORY
 18781                                  			; ES = segment address of area to be freed
 18782                                  
 18783                                  	; 22/10/2022
 18784                                  	;test	word [cs:install_flag],2
 18785                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18786                                  	;test	byte [cs:install_flag],has_installed
 18787                                  	; 11/12/2022
 18788                                  	; ds = cs
 18789 00000785 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18790                                  	;test	byte [install_flag],has_installed
 18791 0000078A 741F                    	jz	short skip_free_sysinitbase ; no.
 18792                                  
 18793                                  ; set block from the old_area with impossible_owner_size.
 18794                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18795                                  ; handle install= command.
 18796                                  
 18797                                  	; 12/12/2022
 18798                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18799                                  	;push	bx
 18800                                  	
 18801                                  	; 22/10/2022
 18802                                  	;mov	es,[cs:old_area]
 18803                                  	;mov	bx,[cs:impossible_owner_size]
 18804                                  	; 12/12/2022
 18805                                  	; ds = cs
 18806 0000078C 8E06[DA03]              	mov	es,[old_area]
 18807 00000790 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18808                                  	
 18809 00000794 B44A                    	mov	ah,4Ah ; SETBLOCK
 18810 00000796 CD21                    	int	21h
 18811                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18812                                  			; ES = segment address of block to change
 18813                                  			; BX = new size in paragraphs
 18814 00000798 8CC0                    	mov	ax,es
 18815 0000079A 48                      	dec	ax
 18816 0000079B 8EC0                    	mov	es,ax			; point to arena
 18817                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18818 0000079D 26C70601000800          	mov	word [es:1],8
 18819                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18820 000007A4 26C70608005344          	mov	word [es:8],'SD'
 18821                                  	
 18822                                  	; 12/12/2022
 18823                                  	;pop	bx
 18824                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18825                                  
 18826                                  skip_free_sysinitbase:
 18827                                  	; 22/10/2022
 18828                                  	;cmp	byte [cs:runhigh],0
 18829                                  	; 12/12/2022
 18830                                  	; ds = cs
 18831 000007AB 803E[6A02]00            	cmp	byte [runhigh],0	
 18832 000007B0 7403                    	je	short _@@@@
 18833                                  
 18834 000007B2 E8D202                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18835                                  
 18836                                  ; ----------------------------------------------------------------------------
 18837                                  
 18838                                  _@@@@:
 18839                                  	; 12/12/2022
 18840                                  	; ds = cs
 18841                                  	; 22/10/2022
 18842                                  	; 27/03/2019
 18843                                  	;push	cs
 18844                                  	;pop	ds			; point DS to sysinitseg
 18845                                  
 18846                                  ; set up the parameters for command
 18847                                  
 18848                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18849                                  ;;ifdef  MULTI_CONFIG
 18850                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18851                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18852                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18853                                  ;	; !!!
 18854                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18855                                  ;       ; !!!
 18856                                  ;	call    disable_autoexec        ; no, we should disable it
 18857                                  ;process_autoexec:
 18858                                  ;;endif	; !!!
 18859                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18860                                  ;	; !!!
 18861                                  
 18862                                  	; 22/10/2022 
 18863                                  	;mov     cl,[command_line]
 18864                                          ;mov     ch,0
 18865                                          ;inc     cx
 18866                                          ;mov     si,command_line	
 18867                                  	;add     si,cx
 18868                                          ;mov     byte [si],cr	; cr-terminate command line
 18869                                  
 18870                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18871                                  	; (SYSINIT:0809h)
 18872                                  	
 18873                                  	;mov	si,(offset command_line+1)
 18874 000007B5 BE[AA02]                	mov	si,command_line+1
 18875 000007B8 1E                      	push    ds
 18876 000007B9 07                      	pop     es
 18877 000007BA 89F7                    	mov     di,si
 18878 000007BC B1FF                    	mov     cl,0FFh ; -1
 18879                                  _@_loop:
 18880 000007BE FEC1                    	inc     cl ; +1
 18881 000007C0 AC                      	lodsb
 18882 000007C1 AA                      	stosb
 18883 000007C2 08C0                    	or      al,al
 18884 000007C4 75F8                    	jnz     short _@_loop
 18885 000007C6 4F                      	dec     di
 18886 000007C7 B00D                    	mov     al,0Dh
 18887 000007C9 AA                      	stosb			; cr-terminate command line
 18888 000007CA 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18889                                  
 18890                                  ; ----------------------------------------------------------------------------
 18891                                  
 18892                                  ;   Once we get to this point, the above code, which is below "retry"
 18893                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18894                                  ;   which follow....)
 18895                                  
 18896                                  retry:
 18897 000007CE BA[5933]                	mov	dx,commnd	; now pointing to file description
 18898                                  
 18899                                  ; we are going to open the command interpreter and size it as is done in
 18900                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18901                                  ; there is not enough room for the command interpreter,exec will probably
 18902                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18903                                  ; here to catch it. this code is not perfect (for instance .exe command
 18904                                  ; interpreters are possible) because it does its sizing based on the
 18905                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18906                                  ; correctness to be usable.
 18907                                  
 18908                                  ; first, find out where the command interpreter is going to go.
 18909                                  
 18910 000007D1 52                      	push	dx		; save pointer to name
 18911 000007D2 BBFFFF                  	mov	bx,0FFFFh
 18912 000007D5 B448                    	mov	ah,48h	; ALLOC
 18913 000007D7 CD21                            int     21h             ; get biggest piece
 18914 000007D9 B448                    	mov	ah,48h	; ALLOC
 18915 000007DB CD21                    	int	21h		; second time gets it
 18916 000007DD 7243                    	jc	short memerrjx	; oooops
 18917                                  
 18918 000007DF 8EC0                    	mov	es,ax
 18919 000007E1 B449                    	mov	ah,49h	; DEALLOC
 18920 000007E3 CD21                    	int	21h		; give it right back
 18921 000007E5 89DD                    	mov	bp,bx
 18922                                  
 18923                                  ; es:0 points to block,and bp is the size of the block in para.
 18924                                  
 18925                                  ; we will now adjust the size in bp down by the size of sysinit.
 18926                                  ; we need to do this because exec might get upset if some of the exec
 18927                                  ; data in sysinit is overlayed during the exec.
 18928                                  
 18929                                  	; 22/10/2022
 18930                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18931 000007E7 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18932 000007EB 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18933                                  
 18934                                  ; Note that the "config_wrkseg" environment data is a segment in
 18935                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18936                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18937                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18938                                  ; we need to make sure that there's no way Exec will stomp on that data
 18939                                  ; before it can copy it, and one way to do that is to make the available
 18940                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18941                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18942                                  ; of the current sysinit CS....
 18943                                  ;
 18944                                  ; The reason I use the term "paranoid" is because this code should have
 18945                                  ; slid the data required by Exec up to the very top of memory, because as
 18946                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18947                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18948                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18949                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18950                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18951                                  
 18952                                  	; 22/10/2022
 18953                                  	;mov	cx,[config_envlen]
 18954                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18955                                          ;mov	ax,[config_wrkseg]
 18956                                  ;no_env:
 18957                                  	; 22/10/2022
 18958                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18959 000007ED 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18960 000007EF 83C311                  	add	bx,11h		; add the sysinit php
 18961 000007F2 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18962 000007F4 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18963                                  
 18964                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18965 000007F6 B8003D                          mov	ax,3D00h
 18966 000007F9 F9                      	stc                     ; in case of int 24
 18967 000007FA CD21                    	int	21h
 18968 000007FC 7240                    	jc	short comerr	; ooops
 18969                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18970                                  			; DS:DX -> ASCIZ filename
 18971                                  			; AL = access mode
 18972                                  			; 0 - read
 18973                                  	; 22/10/2022
 18974                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18975 000007FE 89C3                            mov     bx,ax           ; handle in bx
 18976                                  
 18977                                  ;   If the standard command interpreter is being used, verify it is correct
 18978                                  
 18979                                  	; 22/10/2022
 18980                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18981                                  	;jne	short skip_validation ; yes
 18982                                  	;mov	dx,retry-4
 18983                                  	;mov	cx,4		;
 18984                                  	;mov	ah,READ		;
 18985                                  	;int	21h		;
 18986                                  	;cmp	byte [retry-4],0E9h
 18987                                  	;jne	short comerr
 18988                                  	;; 20/04/2019 - Retro DOS v4.0
 18989                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18990                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18991                                  	;jne	short comerr	;
 18992                                  
 18993                                  ;skip_validation:
 18994                                  	; 22/10/2022
 18995                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18996 00000800 31C9                    	xor	cx,cx
 18997 00000802 31D2                    	xor	dx,dx
 18998                                  	;mov	ax,(LSEEK<<8)|2
 18999 00000804 B80242                  	mov	ax,4202h
 19000 00000807 F9                      	stc			;in case of int 24
 19001 00000808 CD21                    	int	21h		; get file size in dx:ax
 19002 0000080A 7232                    	jc	short comerr
 19003                                  				; convert size in dx:ax to para in ax
 19004 0000080C 83C00F                  	add	ax,15		; round up size for conversion to para
 19005 0000080F 83D200                  	adc	dx,0
 19006 00000812 E8A103                  	call	off_to_para
 19007 00000815 B10C                    	mov	cl,12
 19008 00000817 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 19009 00000819 09D0                    	or	ax,dx		; ax is now # of para for file
 19010 0000081B 83C010                  	add	ax,10h		; 100h byte php
 19011 0000081E 39E8                    	cmp	ax,bp		; will command fit in available mem?
 19012 00000820 7203                    	jb	short okld	; jump if yes.
 19013                                  
 19014                                  	; 22/10/2022
 19015                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 19016                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 19017                                  	; 02/11/2022
 19018                                  	;jmp	mem_err
 19019                                  	; 11/12/2022
 19020                                  	; ds = cs
 19021 00000822 E92728                  	jmp	mem_err2
 19022                                  
 19023                                  ;memerrjx:
 19024                                  ;	mov	dx,badmem
 19025                                  ;	call	print
 19026                                  ;       jmp     short continue
 19027                                  
 19028                                  okld:
 19029 00000825 B43E                    	mov	ah,3Eh ; CLOSE
 19030 00000827 CD21                    	int	21h		; close file
 19031                                  
 19032                                  	; 22/10/2022
 19033 00000829 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 19034                                  
 19035                                  	; 24/03/2019
 19036                                  
 19037 0000082A 0E                      	push	cs		; point es to sysinitseg
 19038 0000082B 07                      	pop	es
 19039 0000082C BB[3B03]                        mov     bx,COMEXE	; point to exec block
 19040                                  	; 22/10/2022
 19041                                  	;pop	dx              ; recover pointer to name
 19042                                  
 19043                                  ;;ifdef	MULTI_CONFIG
 19044                                  
 19045                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 19046                                  ;   there will be data if there were any valid SET commands and/or if a menu
 19047                                  ;   selection was made (in which case the CONFIG environment variable will be
 19048                                  ;   set to that selection).
 19049                                  
 19050                                  	; 23/10/2022
 19051                                  	;mov	cx,[config_envlen]
 19052                                  	;jcxz	no_envdata
 19053                                          ;mov	cx,[config_wrkseg]
 19054                                  ;no_envdata:
 19055                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 19056                                  	;mov	[bx],cx
 19057                                  
 19058                                  ;;endif	;MULTI_CONFIG
 19059                                  
 19060                                  	; 23/10/2022
 19061                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 19062                                  
 19063                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 19064 0000082F 8C4F04                  	mov	[bx+4],cs
 19065                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 19066 00000832 8C4F08                  	mov	[bx+8],cs
 19067                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 19068 00000835 8C4F0C                  	mov	[bx+12],cs
 19069                                  
 19070                                  ;mov	ax,(EXEC<<8) + 0
 19071                                  	; 23/10/2022
 19072                                  	;xor	ax,ax
 19073                                  	;mov	ah,4Bh
 19074                                  	; 14/08/2023
 19075                                  	;mov	ax,4B00h
 19076 00000838 B8004B                  	mov	ax,(EXEC<<8)       
 19077                                  
 19078 0000083B F9                      	stc                     ; in case of int 24
 19079 0000083C CD21                            int     21h             ; go start up command
 19080                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 19081                                  			; DS:DX -> ASCIZ filename
 19082                                  			; ES:BX -> parameter block
 19083                                  			; AL = subfunc: load & execute program
 19084                                  	;push	cs
 19085                                  	;pop	ds
 19086                                  
 19087                                  	; 23/10/2022
 19088                                  	;push	dx		; push to balance fall-through pop
 19089                                  
 19090                                  ; note fall through if exec returns (an error)
 19091                                  comerr:
 19092                                  	; 23/10/2022
 19093                                  ;;ifdef	MULTI_CONFIG
 19094                                  	;cmp	byte [commnd4],0
 19095                                  	;je	short comerr2	; all defaults exhausted, print err msg
 19096                                  	;cmp	byte [newcmd],0
 19097                                  	;je	short continue	; don't print err msg for defaults just yet
 19098                                  ;comerr2:
 19099                                  ;;endif
 19100 0000083E BA[A936]                        mov     dx,badcom	; want to print command error
 19101 00000841 E8132A                  	call	badfil
 19102                                  continue:
 19103                                  	; 23/10/2022
 19104                                  	;pop	dx
 19105                                  
 19106                                  ;;ifndef MULTI_CONFIG
 19107                                  	;jmp	stall
 19108                                  	; 24/10/2022
 19109                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 19110 00000844 EBFE                    	jmp	short stall
 19111                                  ;;else
 19112                                  	; 23/10/2022
 19113                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19114                                  	;int	21h             ;
 19115                                  	;add	al,'A'          ;
 19116                                  	;mov	dl,al           ; DL == default drive letter
 19117                                  	;mov	si,commnd2
 19118                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 19119                                  	;jne	short do_def2	; then try the 2nd alternate;
 19120                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 19121                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 19122                                  ;do_def2:			
 19123                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 19124                                          ;jne	short do_alt    ; no
 19125                                  ;do_def3:
 19126                                  	;mov	si,commnd3
 19127                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 19128                                  	;jne	short do_alt	; no
 19129                                  	;mov	si,commnd4
 19130                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 19131                                  	;jne	short do_alt	; no
 19132                                  	;push	dx              ;
 19133                                  	;mov	dx,badcomprmpt
 19134                                  	;call	print		;
 19135                                  	;pop	dx              ; recover default drive letter in DL
 19136                                  ;request_input:			;
 19137                                  	;mov	ah,STD_CON_OUTPUT
 19138                                  	;int	21h             ;
 19139                                  	;push	dx              ;
 19140                                  	;mov	dl,'>'          ;
 19141                                  	;int	21h             ;
 19142                                  	;mov	bl,[tmplate+1]	;
 19143                                  	;mov	bh,0            ;
 19144                                  	;mov	byte [commnd+bx],0Dh
 19145                                  	;mov	dx,tmplate
 19146                                  	;mov	ah,STD_CON_STRING_INPUT
 19147                                  	;int	21h             ; read a line of input
 19148                                  	;mov	dx,crlfm	;
 19149                                  	;call	print           ;
 19150                                  	;pop	dx              ;
 19151                                  	;mov	bl,[tmplate+1]	;
 19152                                  	;or	bl,bl           ; was anything typed?
 19153                                  	;jz	short request_input ;
 19154                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 19155                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 19156                                  	;mov	word [command_line],0D00h
 19157                                  	;jmp	short do_exec   ;
 19158                                  ;do_alt:
 19159                                  	;push	ds
 19160                                  	;pop	es
 19161                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 19162                                  	;mov	di,commnd	;
 19163                                  ;do_alt1:
 19164                                  	;lodsb			; copy the alternate, zapping it as we go,
 19165                                  	;mov	byte [si-1],0	; so that we know it's been tried
 19166                                  	;stosb 			;
 19167                                  	;or	al,al		;
 19168                                  	;jnz	short do_alt1	;
 19169                                  	;mov	di,command_line
 19170                                  	;cmp	byte [si+2],':'
 19171                                  	;jne	short do_alt2	;
 19172                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 19173                                  ;do_alt2:			;
 19174                                  	;lodsb			;
 19175                                  	;stosb			;
 19176                                  	;or	al,al           ;
 19177                                  	;jnz	short do_alt2   ;
 19178                                  	;mov	byte [di-1],cr
 19179                                  
 19180                                  ;;   Last but not least, see if we need to call disable_autoexec
 19181                                  
 19182                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 19183                                  	;;cmp	[command_line-1],0
 19184                                          ;;jne	short do_exec   ;
 19185                                          ;;mov	[command_line-1],'/'
 19186                                  	;;call	disable_autoexec ;
 19187                                  
 19188                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 19189                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 19190                                  	;call	disable_autoexec
 19191                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 19192                                  ;do_exec:
 19193                                  	;jmp     retry		;
 19194                                  
 19195                                  ;;endif	;MULTI_CONFIG
 19196                                  
 19197                                  ; 24/03/2019 - Retro DOS v4.0
 19198                                  
 19199                                  ; ----------------------------------------------------------------------
 19200                                  ; procedure : AllocFreeMem
 19201                                  ;
 19202                                  ; Allocate Max memory from DOS to find out where to load DOS.
 19203                                  ; DOS is at temporary location when this call is being made
 19204                                  ;
 19205                                  ; Inputs : None
 19206                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 19207                                  ;	   [area] & [memhi] set to the para value of the start of the
 19208                                  ;	   free memory.
 19209                                  ;
 19210                                  ; Uses   : AX, BX
 19211                                  ;
 19212                                  ; ----------------------------------------------------------------------
 19213                                  
 19214                                  	; 23/10/2022
 19215                                  AllocFreeMem:
 19216 00000846 BBFFFF                  	mov	bx,0FFFFh
 19217 00000849 B448                    	mov	ah,48h ; ALLOC
 19218 0000084B CD21                    	int	21h			; first time fails
 19219 0000084D B448                    	mov	ah,48h ; ALLOC
 19220 0000084F CD21                    	int	21h			; second time gets it
 19221                                  	; 11/12/2022
 19222                                  	; ds = cs
 19223                                  	;mov	[cs:area],ax
 19224                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 19225 00000851 A3[E403]                	mov	[area],ax
 19226 00000854 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 19227 00000857 C3                      	retn				; start of free memory
 19228                                  				
 19229                                  	; include msbio.cl6
 19230                                  ; ----------------------------------------------------------------------
 19231                                  DOSLOMSG:
 19232 00000858 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 19232 00000861 7661696C61626C653A-
 19232 0000086A 204C6F6164696E6720-
 19232 00000873 444F53206C6F770D0A-
 19232 0000087C 24                 
 19233                                  FEmsg:
 19234 0000087D 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 19234 00000886 6F723A2043616E6E6F-
 19234 0000088F 7420616C6C6F636174-
 19234 00000898 65204D656D6F727920-
 19234 000008A1 666F7220444F530D0A-
 19234 000008AA 24                 
 19235                                  
 19236                                  ; ----------------------------------------------------------------------
 19237                                  ;
 19238                                  ; procedure : LoadDOSHiOrLo
 19239                                  ;
 19240                                  ;		Tries to move DOS into HMA. If it fails then loads
 19241                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 19242                                  ;		moved; this just tries to allocate the HMA, and prints
 19243                                  ;		a message if this is not possible.
 19244                                  ;
 19245                                  ; ----------------------------------------------------------------------
 19246                                  
 19247                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19248                                  LoadDOSHiOrLo:
 19249                                  	; 27/03/2019 - Retro DOS v4.0
 19250                                  	; ds = cs
 19251 000008AB E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 19252                                  	;jc	short LdngLo		; If that don't work...
 19253                                  	;retn
 19254                                  	; 18/12/2022
 19255 000008AE 731C                    	jnc	short LoadDosHi_ok
 19256                                  LdngLo:
 19257                                  	; 23/10/2022
 19258                                  	;push	cs
 19259                                  	;pop	ds
 19260                                  	; 11/12/2022
 19261                                  	; ds = cs
 19262 000008B0 B409                    	mov	ah,9
 19263 000008B2 BA[5808]                	mov	dx,DOSLOMSG		; inform user that we are
 19264 000008B5 CD21                    	int	21h			; loading low
 19265                                  
 19266                                  ;ifndef ROMDOS
 19267                                  	; actually move the dos, and reinitialize it.
 19268                                  
 19269 000008B7 BB0100                  	mov	bx,1				; M012
 19270                                  						;  use int 21 alloc for mem
 19271 000008BA E83F00                  	call	MovDOSLo
 19272                                  	; 11/12/2022
 19273                                  	; ds = cs
 19274                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 19275                                  	; 23/10/2022
 19276 000008BD 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19277                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 19278                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 19279 000008C1 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 19280                                  	; 11/12/2022
 19281                                  	; ds = cs
 19282                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 19283 000008C3 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 19284                                  	
 19285                                  ;endif ; ROMDOS
 19286                                  	; 23/10/2022
 19287                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 19288                                  	; 11/12/2022
 19289                                  	; ds = cs
 19290 000008C7 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 19291                                  LoadDosHi_ok:	; 18/12/2022
 19292 000008CC C3                      	retn
 19293                                  
 19294                                  ; ----------------------------------------------------------------------
 19295                                  ;
 19296                                  ; procedure : TryToMovDOSHi
 19297                                  ;
 19298                                  ;		This tries to move DOS into HMA.
 19299                                  ;		Returns CY if it failed.
 19300                                  ;		If it succeeds returns with carry cleared.
 19301                                  ;
 19302                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 19303                                  ;		the A20 switching code in the low mem stub to be installed.
 19304                                  ; 
 19305                                  ; ----------------------------------------------------------------------
 19306                                  
 19307                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19308                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 19309                                  TryToMovDOSHi:
 19310                                  	; 11/12/2022
 19311                                  	; 27/03/2019 - Retro DOS v4.0
 19312                                  	; ds = cs
 19313 000008CD E81300                  	call	MovDOSHi
 19314 000008D0 7210                    	jc	short ttldhx
 19315                                  
 19316                                  ;ifndef ROMDOS
 19317                                  	; 23/10/2022
 19318                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 19319                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 19320                                  	; 11/12/2022
 19321                                  	; ds = cs
 19322 000008D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19323                                  ;else
 19324                                  ;	..
 19325                                  ;endif ; ROMDOS
 19326                                  
 19327                                  	; 11/12/2022
 19328                                  	; ds = cs
 19329 000008D6 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 19330                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 19331 000008D8 FF1E[7B02]              	call	far [dos_segreinit]
 19332                                  	;mov	byte [cs:runhigh],1
 19333 000008DC C606[6A02]01            	mov	byte [runhigh],1
 19334 000008E1 F8                      	clc
 19335                                  ttldhx:
 19336 000008E2 C3                      	retn
 19337                                  
 19338                                  ; ----------------------------------------------------------------------
 19339                                  ;
 19340                                  ; procedure : MovDOSHi
 19341                                  ;
 19342                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 19343                                  ;		For ROMDOS, the code is not actually moved, but the
 19344                                  ;		HMA is allocated and prepared for sub-allocation.
 19345                                  ;
 19346                                  ;		Returns : CY if it failed
 19347                                  ;
 19348                                  ; ----------------------------------------------------------------------
 19349                                  
 19350                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19351                                  MovDOSHi:
 19352                                  	; 14/05/2019
 19353                                  	; 27/03/2019 - Retro DOS v4.0
 19354                                  	; ds = cs
 19355 000008E3 E8D500                  	call	AllocHMA
 19356 000008E6 7213                    	jc	short mdhx			; did we get HMA?
 19357 000008E8 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 19358 000008EB 8EC0                    	mov	es,ax
 19359                                  
 19360                                  ;ifndef ROMDOS
 19361                                  	; actually move the BIOS and DOS
 19362                                  
 19363                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19364                                  	; 24/03/2019
 19365                                  	
 19366                                  	; 23/10/2022
 19367 000008ED E83200                  	call	MovBIOS				; First move BIOS into HMA
 19368                                  
 19369                                  	; ES:DI points to free HMA after BIOS
 19370                                  	
 19371                                  	; 14/05/2019
 19372                                  	; 24/03/2019 - Retro DOS v4.0
 19373                                  	;xor	di,di
 19374                                  	
 19375                                  	; 23/10/2022
 19376                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 19377                                  	; 11/12/2022
 19378                                  	; ds = cs
 19379 000008F0 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 19380 000008F4 E81100                  	call	MovDOS				; and move it
 19381                                  
 19382                                  	; ES:DI points to free HMA after DOS
 19383                                  ;else
 19384                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19385                                  ;
 19386                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19387                                  ;
 19388                                  ;endif ; ROMDOS
 19389                                  
 19390 000008F7 E85D02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19391 000008FA F8                      	clc
 19392                                  mdhx:
 19393 000008FB C3                      	retn
 19394                                  
 19395                                  ; ----------------------------------------------------------------------
 19396                                  ;
 19397                                  ; procedure : MovDOSLo
 19398                                  ;
 19399                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19400                                  ;
 19401                                  ; ----------------------------------------------------------------------
 19402                                  
 19403                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19404                                  
 19405                                  ;ifndef ROMDOS
 19406                                  
 19407                                  MovDOSLo:
 19408                                  	; 14/05/2019
 19409                                  	; 27/03/2019 - Retro DOS v4.0
 19410                                  	; ds = cs
 19411 000008FC E84500                  	call	AllocMemForDOS			; incestuosly!!!
 19412                                  	
 19413                                  	; 23/10/2022
 19414                                  	; 14/05/2019
 19415                                  	;inc	ax  ; skip MCB
 19416                                  	
 19417 000008FF 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19418                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19419                                  	; 24/03/2019
 19420                                  	
 19421                                  	; 23/10/2022
 19422 00000901 E81E00                  	call	MovBIOS
 19423                                  
 19424                                  ;------ ES:DI points memory immediately after BIOS
 19425                                  
 19426                                  	; 14/05/2019
 19427                                  	; NOTE: 
 19428                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19429                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19430                                  
 19431                                  	; 24/03/2019 - Retro DOS v4.0
 19432                                  	;xor	di,di	
 19433                                  
 19434                                  	; 23/10/2022
 19435                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19436                                  	; 11/12/2022
 19437                                  	; ds = cs
 19438 00000904 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19439                                  	;call	MovDOS
 19440                                  	;retn
 19441                                  	; 11/12/2022
 19442                                  	;jmp	short MovDOS
 19443                                  
 19444                                  ;endif ; ROMDOS
 19445                                  
 19446                                  ; 11/12/2022
 19447                                  
 19448                                  ; ----------------------------------------------------------------------
 19449                                  ;
 19450                                  ; procedure : MovDOS
 19451                                  ;
 19452                                  ;		Moves DOS code into requested area
 19453                                  ;
 19454                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19455                                  ;	     CX    - size of DOS code to be moved
 19456                                  ;
 19457                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19458                                  ;
 19459                                  ; ----------------------------------------------------------------------
 19460                                  
 19461                                  	; 11/12/2022
 19462                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19463                                  
 19464                                  ;ifndef ROMDOS
 19465                                  
 19466                                  MovDOS:
 19467                                  	; 14/05/2019
 19468                                  	; 27/03/2019 - Retro DOS v4.0
 19469                                  
 19470                                  	; 11/12/2022
 19471                                  	; ds = cs
 19472                                  
 19473                                  	; 23/10/2022
 19474                                  	;push	ds ; *//
 19475                                  	
 19476 00000908 06                      	push	es
 19477 00000909 57                      	push	di
 19478                                  
 19479                                  	; 11/12/2022
 19480 0000090A 1E                      	push	ds ; *// ; 11/12/202
 19481                                  
 19482                                  	; 29/04/2019
 19483 0000090B C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19484                                  	; 23/10/2022
 19485                                  	;lds	si,[cs:dosinit]
 19486                                  	; 04/09/2023
 19487 0000090F 89F0                    	mov	ax,si
 19488                                  
 19489 00000911 F3A4                    	rep	movsb
 19490                                  
 19491 00000913 1F                      	pop	ds ; *// ; 11/12/2022
 19492                                  
 19493 00000914 5B                      	pop	bx				; get back offset into which
 19494                                  						;  DOS was moved
 19495                                  	; 04/09/2023
 19496                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19497                                  						;  wants to run
 19498                                  	; 04/09/2023
 19499                                  	;mov	ax,[dosinit]
 19500                                  	; ax = [dosinit]
 19501                                  
 19502 00000915 29D8                    	sub	ax,bx
 19503 00000917 E89C02                  	call	off_to_para
 19504 0000091A 5B                      	pop	bx				; get the segment at which
 19505                                  						;  we moved DOS into
 19506 0000091B 29C3                    	sub	bx,ax				; Adjust segment
 19507                                  	
 19508                                  	; 11/12/2022
 19509                                  	; 23/10/2022
 19510                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19511                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19512                                  	; 11/12/2022
 19513 0000091D 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19514                                  		
 19515                                  	; 27/03/2019
 19516                                  	;pop	ds ; *//
 19517                                  	; ds = cs
 19518                                  	;mov	[FINAL_DOS_LOCATION],bx
 19519                                  
 19520 00000921 C3                      	retn
 19521                                  
 19522                                  ;endif ;ROMDOS
 19523                                  
 19524                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19525                                  ; 24/03/2019
 19526                                  ; ----------------------------------------------------------------------
 19527                                  ;
 19528                                  ; procedure : MovBIOS
 19529                                  ;
 19530                                  ;		Moves BIOS code into requested segment
 19531                                  ;
 19532                                  ;	In : ES - segment to which BIOS is to be moved
 19533                                  ;		  ( it moves always into offset BCode_Start)
 19534                                  ;
 19535                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19536                                  ;
 19537                                  ; ----------------------------------------------------------------------
 19538                                  
 19539                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19540                                  
 19541                                  ;ifndef ROMDOS
 19542                                  
 19543                                  MovBIOS: ; proc	near
 19544                                  	; 11/12/2022
 19545 00000922 1E                      	push	ds ; ds = cs	
 19546                                  	;
 19547                                  	; 23/10/2022
 19548                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19549                                  	; 17/09/2023
 19550 00000923 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 19551                                  	;mov	si,BCODE_START ; mov si,30h
 19552                                  	; 09/12/2022
 19553 00000927 BE[3000]                	mov	si,BCODESTART
 19554 0000092A 89F7                    	mov	di,si
 19555 0000092C B9A019                  	mov	cx,BCODE_END ; mov cx,1A60h
 19556 0000092F 29F1                    	sub	cx,si				; size of BIOS
 19557 00000931 D1E9                    	shr	cx,1				; Both the labels are para
 19558                                  						;  aligned
 19559 00000933 F3A5                    	rep	movsw
 19560                                  	
 19561                                  	; 11/12/2022
 19562 00000935 1F                      	pop	ds ; ds = cs
 19563                                  	;
 19564 00000936 06                      	push	es
 19565 00000937 57                      	push	di				; save end of BIOS
 19566 00000938 8CC0                    	mov	ax,es
 19567                                  	;
 19568                                  	; 11/12/2022
 19569                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19570                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19571                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19572                                  	; ds = cs
 19573 0000093A A3[0004]                	mov	[BCodeSeg],ax
 19574 0000093D FF1E[8502]              	call	far [seg_reinit_ptr]
 19575                                  	;
 19576 00000941 5F                      	pop	di
 19577 00000942 07                      	pop	es				; get back end of BIOS
 19578 00000943 C3                      	retn
 19579                                  
 19580                                  ;MovBIOS endp
 19581                                  
 19582                                  ;endif ; ROMDOS
 19583                                  
 19584                                  ; 11/12/2022
 19585                                  %if 0
 19586                                  
 19587                                  ; 24/03/2019
 19588                                  
 19589                                  ; ----------------------------------------------------------------------
 19590                                  ;
 19591                                  ; procedure : MovDOS
 19592                                  ;
 19593                                  ;		Moves DOS code into requested area
 19594                                  ;
 19595                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19596                                  ;	     CX    - size of DOS code to be moved
 19597                                  ;
 19598                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19599                                  ;
 19600                                  ; ----------------------------------------------------------------------
 19601                                  
 19602                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19603                                  
 19604                                  ;ifndef ROMDOS
 19605                                  
 19606                                  MovDOS:
 19607                                  	; 14/05/2019
 19608                                  	; 27/03/2019 - Retro DOS v4.0
 19609                                  
 19610                                  	; 11/12/2022
 19611                                  	; ds = cs
 19612                                  
 19613                                  	; 23/10/2022
 19614                                  	;push	ds ; *//
 19615                                  	
 19616                                  	push	es
 19617                                  	push	di
 19618                                  
 19619                                  	; 11/12/2022
 19620                                  	push	ds ; *// ; 11/12/202
 19621                                  
 19622                                  	; 29/04/2019
 19623                                  	lds	si,[dosinit] ; 11/12/2022
 19624                                  	; 23/10/2022
 19625                                  	;lds	si,[cs:dosinit]
 19626                                  	; 04/09/2023
 19627                                  	mov	ax,si
 19628                                  
 19629                                  	rep	movsb
 19630                                  
 19631                                  	pop	ds ; *// ; 11/12/2022
 19632                                  
 19633                                  	pop	bx				; get back offset into which
 19634                                  						;  DOS was moved
 19635                                  	;mov	ax,[dosinit] ; 04/09/2023
 19636                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19637                                  						;  wants to run
 19638                                  	sub	ax,bx
 19639                                  	call	off_to_para
 19640                                  	pop	bx				; get the segment at which
 19641                                  						;  we moved DOS into
 19642                                  	sub	bx,ax				; Adjust segment
 19643                                  	
 19644                                  	; 11/12/2022
 19645                                  	; 23/10/2022
 19646                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19647                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19648                                  	; 11/12/2022
 19649                                  	mov	[CURRENT_DOS_LOCATION],bx
 19650                                  		
 19651                                  	; 27/03/2019
 19652                                  	;pop	ds ; *//
 19653                                  	; ds = cs
 19654                                  	;mov	[FINAL_DOS_LOCATION],bx
 19655                                  
 19656                                  	retn
 19657                                  
 19658                                  ;endif ;ROMDOS
 19659                                  
 19660                                  %endif
 19661                                  
 19662                                  ; ----------------------------------------------------------------------
 19663                                  ;
 19664                                  ; procedure : AllocMemForDOS
 19665                                  ;
 19666                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19667                                  ;
 19668                                  ;	Out : AX - seg of allocated memoryblock
 19669                                  ;
 19670                                  ; ----------------------------------------------------------------------
 19671                                  
 19672                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19673                                  
 19674                                  ;ifndef ROMDOS
 19675                                  
 19676                                  AllocMemForDOS:
 19677                                  	; 11/12/2022
 19678                                  	; 14/05/2019
 19679                                  	; 27/03/2019 - Retro DOS v4.0
 19680                                  	; ds = cs
 19681                                  	;mov	ax,BCode_end
 19682                                  	;sub	ax,BCode_start		; BIOS code size
 19683                                  	; 23/10/2022
 19684 00000944 B8A019                  	mov	ax,BCODE_END ; 1A60h
 19685                                  	;sub	ax,BCODE_START ; 30h
 19686                                  	; 09/12/2022
 19687 00000947 2D[3000]                	sub	ax,BCODESTART 
 19688                                  	; 24/03/2019 - Retro DOS v4.0 
 19689                                  	; 02/11/2022
 19690                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19691                                  	; 11/12/2022
 19692                                  	; ds = cs
 19693 0000094A 0306[7F02]              	add	ax,[lo_doscod_size]
 19694 0000094E 83C00F                  	add	ax,15
 19695 00000951 E86202                  	call	off_to_para			; convert to para
 19696                                  	; 23/10/2022
 19697                                  	; 14/05/2019
 19698                                  	;inc	ax ; + 1 paragraph for MCB
 19699 00000954 09DB                    	or	bx,bx				; M012
 19700 00000956 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19701 00000958 741A                    	jz	short update_arena		; M012
 19702 0000095A B448                    	mov	ah,48h				; request DOS
 19703 0000095C CD21                    	int	21h
 19704 0000095E 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19705                                   	; 23/10/2022
 19706                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19707 00000960 83E803                  	sub	ax,3				; Take care ORG 30h of
 19708                                  						;  BIOS code
 19709 00000963 8EC0                    	mov	es,ax
 19710                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19711                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19712                                  	; 14/05/2019
 19713                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19714                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19715                                  	; 23/10/2022
 19716 00000965 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19717 0000096C 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19718                                  
 19719 00000973 C3                      	retn
 19720                                  
 19721                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19722                                  ;	  using DOS itself causes an arena to be generated.
 19723                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19724                                  ;	  assume that the device drivers are loaded into
 19725                                  ;	  the first arena. For this reason, MagicDrv's
 19726                                  ;	  main device driver header arena is manually
 19727                                  ;	  truncated from the arena chain, and the space
 19728                                  ;	  for DOS is allocated using the following
 19729                                  ;	  simple code, which also assumes that the
 19730                                  ;	  first arena is the free one where DOS's low
 19731                                  ;	  stub will go.
 19732                                  ;
 19733                                  ; M012 : BEGIN
 19734                                  
 19735                                  	; 23/10/2022
 19736                                  update_arena:
 19737 00000974 1E                      	push	ds ; ds = cs
 19738 00000975 57                      	push	di
 19739 00000976 51                      	push	cx
 19740 00000977 52                      	push	dx
 19741                                  	; 23/10/2022
 19742                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19743                                  	; 11/12/2022
 19744                                  	; ds = cs 
 19745 00000978 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19746 0000097C 4F                      	dec	di
 19747 0000097D 4F                      	dec	di				; Arena head is immediately
 19748                                  						;  before sysvar
 19749 0000097E 8E05                    	mov	es,[di]				; es = arena head
 19750                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19751 00000980 268B0E0300              	mov	cx,[es:3]
 19752 00000985 39D9                    	cmp	cx,bx				; is it sufficient ?
 19753 00000987 7227                    	jb	short FatalErr			; no, fatal error
 19754                                  
 19755                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19756 00000989 268A160000              	mov	dl,[es:0]
 19757 0000098E 8CC0                    	mov	ax,es
 19758 00000990 01D8                    	add	ax,bx				; ax = new arena head
 19759 00000992 8905                    	mov	[di],ax				; store it in DOS data area
 19760 00000994 8ED8                    	mov	ds,ax
 19761                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19762 00000996 88160000                	mov	[0],dl
 19763                                  	;mov	word [ARENA.OWNER],0		; free
 19764 0000099A C70601000000            	mov	word [1],0
 19765 000009A0 29D9                    	sub	cx,bx				; size of the new block
 19766                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19767 000009A2 890E0300                	mov	[3],cx
 19768 000009A6 8CC0                    	mov	ax,es				; return seg to the caller
 19769                                  	; 23/10/2022
 19770                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19771 000009A8 83E803                  	sub	ax,3				;  BIOS code
 19772 000009AB 5A                      	pop	dx
 19773 000009AC 59                      	pop	cx
 19774 000009AD 5F                      	pop	di
 19775 000009AE 1F                      	pop	ds ; ds = cs
 19776 000009AF C3                      	retn
 19777                                  ;
 19778                                  ; M012 : END
 19779                                  ;
 19780                                  FatalErr:
 19781 000009B0 0E                      	push	cs
 19782 000009B1 1F                      	pop	ds
 19783 000009B2 BA[7D08]                	mov	dx,FEmsg
 19784 000009B5 B409                    	mov	ah,9
 19785 000009B7 CD21                    	int	21h 		; DOS - PRINT STRING
 19786                                  				; DS:DX -> string terminated by "$"
 19787                                          ;jmp	stall
 19788                                  	; 23/10/2022
 19789 000009B9 FA                      	cli
 19790 000009BA F4                      	hlt
 19791                                  
 19792                                  ;endif ;ROMDOS
 19793                                  
 19794                                  ; 25/03/2019 - Retro DOS v4.0
 19795                                  
 19796                                  ; ----------------------------------------------------------------------
 19797                                  ;
 19798                                  ; procedure : AllocHMA
 19799                                  ;
 19800                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19801                                  ;	  up there. If it gets any sort of error, it will return with
 19802                                  ;	  carry set so that we can resort to running low.
 19803                                  ;
 19804                                  ;	It also returns ES: -> 0ffffh if it returns success
 19805                                  ;
 19806                                  ; ----------------------------------------------------------------------
 19807                                  
 19808                                  AllocHMA:
 19809                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19810                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19811                                  ;		   been deleted because it can be recycled for skipping the
 19812                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19813                                  ;		   in the case of a pre-286.
 19814                                  
 19815                                  ;;	see if we're running on a pre-286. If not, force low.
 19816                                  ;
 19817                                  ;	xor	ax,ax
 19818                                  ;	pushf			; save flags (like int)
 19819                                  ;	push	ax
 19820                                  ;	popf
 19821                                  ;	pushf
 19822                                  ;	pop	ax
 19823                                  ;	popf			; restore original flags (like int)
 19824                                  ;	and	ax,0F000h
 19825                                  ;	cmp	ax,0F000h	; 8088/8086?
 19826                                  ;	jz	short grab_hma_error
 19827                                  
 19828                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19829                                  	; (SYSINIT:0A26h)
 19830                                  
 19831 000009BB 1E                      	push	ds
 19832                                  	;;mov	ax,Bios_Data
 19833                                  	;mov	ax,KERNEL_SEGMENT
 19834                                  	; 21/10/2022
 19835 000009BC B87000                  	mov	ax,DOSBIODATASEG
 19836 000009BF 8ED8                    	mov	ds,ax
 19837                                  
 19838 000009C1 E84A00                  	call	IsXMSLoaded
 19839 000009C4 7545                    	jnz	short grabhma_error
 19840                                  
 19841 000009C6 B81043                  	mov	ax,4310h
 19842 000009C9 CD2F                    	int	2Fh		; get the vector into es:bx
 19843                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19844                                  		; Return: ES:BX -> driver entry point
 19845                                  
 19846 000009CB 891E[0E00]              	mov	[xms],bx
 19847                                  	;mov	[0Eh], bx
 19848 000009CF 8C06[1000]              	mov	[xms+2],es
 19849                                  	;mov	[10h],es
 19850                                  
 19851 000009D3 B401                    	mov	ah,1		; request HMA
 19852 000009D5 BAFFFF                  	mov	dx,0FFFFh
 19853                                  	;call	dword ptr ds:0Eh
 19854 000009D8 FF1E[0E00]              	call	far [xms]
 19855 000009DC 48                      	dec	ax
 19856 000009DD 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19857                                  
 19858                                  ;------ Himem may be lying because it has allocated mem for int 15
 19859                                  
 19860 000009DF B488                    	mov	ah,88h
 19861 000009E1 CD15                    	int	15h
 19862                                  		; Get Extended Memory Size
 19863                                  		; Return: CF clear on success
 19864                                  		; AX = size of memory above 1M in K
 19865 000009E3 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19866                                  	;jb	short grabhma_error
 19867                                  	; 11/12/2022
 19868 000009E6 7224                    	jb	short grabhma_err ; cf=1
 19869                                  allocHMA_1:
 19870 000009E8 B405                    	mov	ah,5		; localenableA20
 19871                                  	;call	dword ptr ds:0Eh
 19872 000009EA FF1E[0E00]              	call	far [xms]
 19873 000009EE 48                      	dec	ax
 19874 000009EF 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19875                                  
 19876 000009F1 E88501                  	call	IsVDiskInstalled
 19877 000009F4 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19878                                  
 19879 000009F6 B8FFFF                  	mov	ax,0FFFFh
 19880 000009F9 8EC0                    	mov	es,ax
 19881 000009FB 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19882 00000A02 26813E10003412          	cmp	word [es:10h],1234h
 19883                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19884                                  	; 11/12/2022
 19885 00000A09 7401                    	je	short allocHMA_ok	
 19886                                  
 19887                                  ; 11/12/2022
 19888                                  ;	; 11/12/2022
 19889                                  ;	; cf=0
 19890                                  ;	;clc
 19891                                  ;	pop	ds
 19892                                  ;	retn
 19893                                  
 19894                                  grabhma_error:
 19895 00000A0B F9                      	stc
 19896                                  	; 11/12/022
 19897                                  grabhma_err:	; cf=1
 19898                                  allocHMA_ok:	; cf=0
 19899 00000A0C 1F                      	pop	ds
 19900 00000A0D C3                      	retn
 19901                                  
 19902                                  ; ----------------------------------------------------------------------
 19903                                  ;
 19904                                  ; procedure : IsXMSLoaded
 19905                                  ;
 19906                                  ;             Checks whether a XMS driver is loaded
 19907                                  ;
 19908                                  ; Returns : Z flag set if XMS driver loaded
 19909                                  ;           Z flag reset if no XMS drivers are present
 19910                                  ;
 19911                                  ; ----------------------------------------------------------------------
 19912                                  
 19913                                  IsXMSLoaded:
 19914 00000A0E B80043                  	mov	ax,4300h
 19915 00000A11 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19916                                  				; Return: AL = 80h XMS driver installed
 19917                                  				; AL <> 80h no driver
 19918 00000A13 3C80                    	cmp	al,80h		; XMS installed?
 19919 00000A15 C3                      	retn
 19920                                  
 19921                                  ; ----------------------------------------------------------------------
 19922                                  ; procedure : FTryToMovDOSHi
 19923                                  ;
 19924                                  ;		Called from HMA suballoc calls
 19925                                  ;	
 19926                                  ; ----------------------------------------------------------------------
 19927                                  
 19928                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19929                                  	; (SYSINIT:0A84h)
 19930                                  
 19931                                  FTryToMovDOSHi:	; proc	far
 19932                                  
 19933 00000A16 50                      	push	ax
 19934 00000A17 53                      	push	bx
 19935 00000A18 51                      	push	cx
 19936 00000A19 52                      	push	dx
 19937 00000A1A 56                      	push	si
 19938 00000A1B 57                      	push	di
 19939 00000A1C 1E                      	push	ds
 19940 00000A1D 06                      	push	es
 19941                                  
 19942                                  	; 23/10/2022
 19943                                  	; 27/03/2019 - Retro DOS v4.0
 19944                                  	; 11/12/2022
 19945 00000A1E 0E                      	push	cs
 19946 00000A1F 1F                      	pop	ds
 19947                                  
 19948                                  	;cmp	byte [cs:runhigh],0FFh
 19949                                  	; 11/12/2022
 19950 00000A20 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19951 00000A25 7503                    	jne	short _ftymdh_1
 19952                                  
 19953                                  	; ds = cs
 19954 00000A27 E8A3FE                  	call	TryToMovDOSHi
 19955                                  _ftymdh_1:
 19956 00000A2A 07                      	pop	es
 19957 00000A2B 1F                      	pop	ds
 19958 00000A2C 5F                      	pop	di
 19959 00000A2D 5E                      	pop	si
 19960 00000A2E 5A                      	pop	dx
 19961 00000A2F 59                      	pop	cx
 19962 00000A30 5B                      	pop	bx
 19963 00000A31 58                      	pop	ax
 19964                                  
 19965 00000A32 CB                      	retf
 19966                                  
 19967                                  ; ----------------------------------------------------------------------
 19968                                  ;
 19969                                  ; following piece of code will be moved into a para boundary. And the para
 19970                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19971                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19972                                  ; to determine free extended memory.
 19973                                  ;
 19974                                  ; For more details read "power programming" column by Ray Duncan in the
 19975                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19976                                  ;
 19977                                  ; ----------------------------------------------------------------------
 19978                                  
 19979                                  StartVDHead:
 19980                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19981                                  
 19982 00000A33 00000000                	dd	0		; link to next device driver
 19983 00000A37 0080                    	dw	8000h		; device attribute
 19984 00000A39 0000                    	dw	0		; strategy routine offset
 19985 00000A3B 0000                    	dw	0		; interrupt routine offset
 19986 00000A3D 01                      	db	1		; number of units
 19987                                  	;db	7 dup(0) 
 19988 00000A3E 00<rep 7h>              	times	7 db 0 		; reserved area
 19989                                  VDiskSig1:
 19990 00000A45 564449534B              	db	'VDISK'
 19991                                  
 19992                                  VLEN1	equ	($-VDiskSig1)
 19993                                  
 19994 00000A4A 202056332E33            	db	'  V3.3'	; vdisk label
 19995                                  	;db	15 dup (0)	; pad
 19996 00000A50 00<rep Fh>              	times	15 db 0
 19997 00000A5F 0000                    	dw	0		; bits 0-15 of free HMA
 19998 00000A61 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19999                                  VDInt19:
 20000 00000A62 EA                      	db	0EAh		; jmp to old vector
 20001                                  OldVDInt19:
 20002 00000A63 00000000                	dd	0		; Saved int 19 vector
 20003                                  
 20004                                  EndVDHead: ; label byte
 20005                                  
 20006                                  VDiskHMAHead:	
 20007 00000A67 000000                  	db	0,0,0		; non-bootable disk
 20008                                  VDiskSig2:
 20009 00000A6A 564449534B              	db	'VDISK'
 20010                                  
 20011                                  VLEN2	equ	($-VDiskSig2)
 20012                                  
 20013 00000A6F 332E33                  	db	'3.3'		; OEM - signature
 20014 00000A72 8000                    	dw	128		; number of bytes/sector
 20015 00000A74 01                      	db	1		; sectors/cluster
 20016 00000A75 0100                    	dw	1		; reserved sectors
 20017 00000A77 01                      	db	1		; number of FAT copies
 20018 00000A78 4000                    	dw	64		; number of root dir entries
 20019 00000A7A 0002                    	dw	512		; number of sectors
 20020 00000A7C FE                      	db	0FEh		; media descriptor
 20021 00000A7D 0600                    	dw	6		; number of sectors/FAT
 20022 00000A7F 0800                    	dw	8		; sectors per track
 20023 00000A81 0100                    	dw	1		; number of heads
 20024 00000A83 0000                    	dw	0		; number of hidden sectors
 20025 00000A85 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 20026                                  
 20027                                  EndVDiskHMAHead: ; label byte
 20028                                  
 20029                                  ; ----------------------------------------------------------------------
 20030                                  ;
 20031                                  ; procedure : InstVDiskHeader
 20032                                  ;
 20033                                  ;             Installs the VDISK header to reserve the 64k of HMA
 20034                                  ;	      It puts a 32 byte header at 10000:0 and
 20035                                  ;	      another header at (seg of int19):0
 20036                                  ;
 20037                                  ; Inputs : None
 20038                                  ;
 20039                                  ; Outputs : None
 20040                                  ;
 20041                                  ; USES : DS,SI,AX,CX,DX
 20042                                  ;
 20043                                  ; ----------------------------------------------------------------------
 20044                                  
 20045                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20046                                  
 20047                                  InstVDiskHeader:
 20048 00000A87 31C0                    	xor	ax,ax
 20049 00000A89 8ED8                    	mov	ds,ax			; seg of int vect table
 20050                                  
 20051                                  ;-------------- save old int 19 vector
 20052                                  
 20053                                  	; 23/10/2022
 20054 00000A8B A16400                  	mov	ax,[19h*4]
 20055                                  	;mov	[OldVDInt19],ax
 20056 00000A8E 2EA3[630A]              	mov	[cs:OldVDInt19],ax
 20057 00000A92 A16600                  	mov	ax,[19h*4+2]
 20058                                  	;mov	[OldVDInt19+2],ax
 20059 00000A95 2EA3[650A]              	mov	[cs:OldVDInt19+2],ax
 20060                                  
 20061                                  ;-------------- calculate seg of new int 19 handler
 20062                                  
 20063 00000A99 B448                    	mov	ah,48h			; allocate memory
 20064                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 20065                                  	; 23/10/2022
 20066 00000A9B BB0400                  	mov	bx,4
 20067 00000A9E CD21                    	int	21h
 20068                                  
 20069                                  ;	if carry, fatal hanging error!!!!!
 20070                                  
 20071 00000AA0 48                      	dec	ax			; point to arena
 20072 00000AA1 8EC0                    	mov	es,ax
 20073                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 20074 00000AA3 26C70601000800          	mov	word [es:1],8
 20075                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 20076 00000AAA 26C70608005343          	mov	word [es:8],'SC'
 20077 00000AB1 40                      	inc	ax
 20078 00000AB2 8EC0                    	mov	es,ax			; get back to allocated memory
 20079                                  
 20080                                  ;-------------- install new int 19 vector
 20081                                  
 20082 00000AB4 FA                      	cli				; no reboots at this time
 20083                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 20084 00000AB5 C70664002F00            	mov	word [19h*4],47
 20085 00000ABB A36600                  	mov	[19h*4+2],ax
 20086                                  
 20087                                  ;-------------- move the code into proper place
 20088                                  
 20089                                  	;mov	cx,(EndVDHead-StartVDHead)
 20090 00000ABE B93400                  	mov	cx,52
 20091 00000AC1 BE[330A]                	mov	si,StartVDHead
 20092 00000AC4 31FF                    	xor	di,di
 20093 00000AC6 0E                      	push	cs
 20094 00000AC7 1F                      	pop	ds
 20095 00000AC8 FC                      	cld
 20096 00000AC9 F3A4                    	rep	movsb
 20097 00000ACB FB                      	sti				; BUGBUG is sti OK now?
 20098                                  
 20099                                  ;-------------- mov the HMA VDisk head into HMA
 20100                                  
 20101                                  	; 23/10/2022
 20102 00000ACC 57                      	push	di
 20103 00000ACD 06                      	push	es
 20104                                  
 20105                                  	;mov	ax,0FFFFh
 20106                                  	;mov	es,ax
 20107                                  	; 04/09/2023
 20108 00000ACE 49                      	dec	cx
 20109                                  	; cx = 0FFFFh
 20110 00000ACF 8EC1                    	mov	es,cx
 20111                                  
 20112 00000AD1 BF1000                  	mov	di,10h
 20113                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 20114 00000AD4 B92000                  	mov	cx,32
 20115 00000AD7 BE[670A]                	mov	si,VDiskHMAHead
 20116 00000ADA F3A4                    	rep	movsb			; ds already set to cs
 20117                                  
 20118 00000ADC 5F                      	pop	di
 20119 00000ADD 07                      	pop	es
 20120                                  
 20121 00000ADE C3                      	retn
 20122                                  
 20123                                  ; ----------------------------------------------------------------------
 20124                                  ; procedure : ClrVDISKHeader
 20125                                  ;
 20126                                  ;		Clears the first 32 bytes at 1MB boundary
 20127                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 20128                                  ;		left by previous DOS=HIGH session
 20129                                  ;
 20130                                  ; ----------------------------------------------------------------------
 20131                                  
 20132                                  struc desc
 20133 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 20134 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 20135 00000004 ??                       .hi_byte:	resb 	1		; address
 20136 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 20137 00000006 ????                     .reserved:	resw	1		;
 20138                                   .size:
 20139                                  endstruc
 20140                                  
 20141                                  		; 23/10/2022
 20142                                  bmove:		;label byte
 20143                                  
 20144                                  dummy:		;times desc.size db 0	; desc	<>
 20145 00000ADF 00<rep 8h>              		times 8 db 0		 
 20146                                  gdt:		;times desc.size db 0	; desc	<>
 20147 00000AE7 00<rep 8h>              		times 8 db 0
 20148 00000AEF FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 20149 00000AF1 0000                    		dw	0
 20150 00000AF3 00                      		db	0
 20151 00000AF4 93                      		db	93h
 20152 00000AF5 0000                    		dw	0
 20153 00000AF7 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 20154 00000AF9 0000                    		dw	0
 20155 00000AFB 10                      		db	10h
 20156 00000AFC 93                      		db	93h
 20157 00000AFD 0000                    		dw	0
 20158                                  
 20159                                  rombios_code:	;times desc.size db 0	; desc	<>
 20160 00000AFF 00<rep 8h>              		times 8 db 0
 20161                                  temp_stack:	;times desc.size db 0	; desc	<>
 20162 00000B07 00<rep 8h>              		times 8 db 0
 20163                                  
 20164 00000B0F 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 20165                                  
 20166                                  
 20167                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 20168                                  
 20169                                  ClrVDISKHeader:	; proc	near
 20170                                  
 20171                                  ;;-----------------------------------------------------------	      ;I070
 20172                                  ;; The following workaround get around a problem with the	      ;I070
 20173                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 20174                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 20175                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 20176                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 20177                                  ;; move crashes the system. We can do this because these	      ;I070
 20178                                  ;; systems clear all of memory on a cold boot.			      ;I070
 20179                                  ;								      ;I070
 20180                                  ;               in      al,64h         ; Test for password servr mode ;I070
 20181                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 20182                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 20183                                  ;                                      ; Check for Tortugas...	      ;I070
 20184                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 20185                                  ;               je      short ClrVDISKno                              ;I070
 20186                                  ;                                      ; Check for mod 30-286	      ;I070
 20187                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 20188                                  ;               jne     short ClrVDISKok			      ;I070
 20189                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 20190                                  ;								      ;I070
 20191                                  ;ClrVDISKok:							      ;I070
 20192                                  ;-----------------------------------------------------------	      ;I070
 20193                                  
 20194                                  	; 12/12/2022
 20195                                  	; ds = cs
 20196                                  
 20197 00000B2F 06                      	push	es
 20198 00000B30 8CC8                    	mov	ax,cs
 20199 00000B32 89C2                    	mov	dx,ax
 20200 00000B34 B10C                    	mov	cl,12
 20201 00000B36 D3EA                    	shr	dx,cl
 20202 00000B38 B104                    	mov	cl,4
 20203 00000B3A D3E0                    	shl	ax,cl
 20204 00000B3C 05[0F0B]                	add	ax,ClrdVDISKHead
 20205 00000B3F 80D200                  	adc	dl,0
 20206                                  
 20207                                  	;; 23/10/2022
 20208                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 20209                                  	;mov	[cs:src_desc+2],ax
 20210                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 20211                                  	;mov	[cs:src_desc+4],dl
 20212                                  	; 12/12/2022
 20213                                  	;mov	[src_desc+desc.lo_word],ax
 20214 00000B42 A3[F10A]                	mov	[src_desc+2],ax
 20215                                  	;mov	[src_desc+desc.hi_byte],dl
 20216 00000B45 8816[F30A]              	mov	[src_desc+4],dl
 20217                                  
 20218 00000B49 B91000                  	mov	cx,16	; 16 words
 20219 00000B4C 0E                      	push	cs
 20220 00000B4D 07                      	pop	es
 20221 00000B4E BE[DF0A]                	mov	si,bmove
 20222 00000B51 B487                    	mov	ah,87h
 20223 00000B53 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 20224                                  			; CX = number of words to move 
 20225                                  			; ES:SI -> global descriptor table
 20226                                  			; Return: CF set on error, AH = status
 20227 00000B55 07                      	pop	es
 20228 00000B56 C3                      	retn
 20229                                  
 20230                                  ; ----------------------------------------------------------------------
 20231                                  ;
 20232                                  ; procedure : SaveFreeHMAPtr
 20233                                  ;
 20234                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 20235                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 20236                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 20237                                  ;		the offset.
 20238                                  ;
 20239                                  ; Inputs : ES:DI - pointer to free HMA
 20240                                  ; Output : FreeHMAPtr in BIOS data segment updated
 20241                                  ;
 20242                                  ; ----------------------------------------------------------------------
 20243                                  
 20244                                  SaveFreeHMAPtr:
 20245                                  	; 04/09/2023
 20246 00000B57 1E                      	push	ds
 20247 00000B58 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20248 00000B5B 8ED8                    	mov	ds,ax
 20249                                  	;
 20250 00000B5D 8CC3                    	mov	bx,es
 20251 00000B5F B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 20252                                  	; 04/09/2023
 20253 00000B62 A2[0D00]                	mov	[inHMA],al ; 0FFh
 20254                                  	;
 20255 00000B65 29D8                    	sub	ax,bx
 20256 00000B67 83C70F                  	add	di,15		   ; para round
 20257 00000B6A 83E7F0                  	and	di,0FFF0h
 20258 00000B6D B104                    	mov	cl,4
 20259 00000B6F D3E0                    	shl	ax,cl
 20260 00000B71 29C7                    	sub	di,ax
 20261                                  	;
 20262                                  	; 04/09/2023
 20263                                  	;push	ds
 20264                                  	;;mov	ax,Bios_Data ; 0070h
 20265                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20266                                  	; 21/10/2022
 20267                                  	; 04/09/2023
 20268                                  	;mov	ax,DOSBIODATASEG ; 0070h
 20269                                  	;mov	ds,ax
 20270 00000B73 893E[EB08]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 20271                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 20272 00000B77 1F                      	pop	ds
 20273 00000B78 C3                      	retn
 20274                                  
 20275                                  ; ----------------------------------------------------------------------
 20276                                  ;
 20277                                  ; procedure : IsVDiskInstalled
 20278                                  ;
 20279                                  ;		Checks for the presence of VDISK header at 1MB boundary
 20280                                  ;		& INT 19 vector
 20281                                  ;
 20282                                  ; Inputs  : A20 flag should be ON
 20283                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 20284                                  ;
 20285                                  ; ----------------------------------------------------------------------
 20286                                  
 20287                                  IsVDiskInstalled:
 20288 00000B79 31C0                    	xor	ax,ax
 20289 00000B7B 8ED8                    	mov	ds,ax
 20290 00000B7D 8E1E4E00                	mov	ds,[19*4+2]
 20291                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 20292                                  	; 23/10/2022
 20293 00000B81 BE1200                  	mov	si,18
 20294                                  	;mov	cx,VLEN1 ; 5
 20295 00000B84 B90500                  	mov	cx,5
 20296 00000B87 0E                      	push	cs
 20297 00000B88 07                      	pop	es
 20298 00000B89 BF[450A]                	mov	di,VDiskSig1
 20299 00000B8C F3A6                    	rep	cmpsb
 20300 00000B8E 740F                    	je	short ivdins_retn
 20301 00000B90 B8FFFF                  	mov	ax,0FFFFh
 20302 00000B93 8ED8                    	mov	ds,ax
 20303                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 20304 00000B95 BE1300                  	mov	si,13h
 20305 00000B98 BF[6A0A]                	mov	di,VDiskSig2
 20306                                  	;;mov	cx,VLEN2  ; 5
 20307                                  	;mov	cx,5
 20308                                  	; 04/09/2023
 20309 00000B9B B105                    	mov	cl,5
 20310 00000B9D F3A6                    	rep	cmpsb
 20311                                  ivdins_retn: 
 20312 00000B9F C3                      	retn			; returns the Zero flag
 20313                                  
 20314                                  ; ----------------------------------------------------------------------
 20315                                  ;
 20316                                  ; procedure : CPMHack
 20317                                  ;
 20318                                  ;		Copies the code from 0:c0 into ffff:0d0h
 20319                                  ;		for CPM compatibility
 20320                                  ;
 20321                                  ; ----------------------------------------------------------------------
 20322                                  
 20323                                  	; 11/12/2022
 20324                                  CPMHack:
 20325 00000BA0 1E                      	push	ds
 20326 00000BA1 B9FFFF                  	mov	cx,0FFFFh
 20327 00000BA4 8EC1                    	mov	es,cx		; ES = FFFF
 20328                                  	;xor	cx,cx
 20329                                  	; 11/12/2022
 20330 00000BA6 41                      	inc	cx  ; cx = 0
 20331 00000BA7 8ED9                    	mov	ds,cx		; DS = 0
 20332 00000BA9 BEC000                  	mov	si,0C0h
 20333 00000BAC BFD000                  	mov	di,0D0h
 20334                                  	;mov	cx,5
 20335 00000BAF B105                    	mov	cl,5
 20336 00000BB1 FC                      	cld
 20337 00000BB2 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 20338 00000BB4 1F                      	pop	ds
 20339 00000BB5 C3                      	retn
 20340                                  
 20341                                  ; ----------------------------------------------------------------------
 20342                                  ;
 20343                                  ; procedure : off_to_para
 20344                                  ;
 20345                                  ; ----------------------------------------------------------------------
 20346                                  off_to_para:
 20347 00000BB6 D1E8                    	shr	ax,1
 20348 00000BB8 D1E8                    	shr	ax,1
 20349 00000BBA D1E8                    	shr	ax,1
 20350 00000BBC D1E8                    	shr	ax,1
 20351 00000BBE C3                      	retn
 20352                                  
 20353                                  ; ----------------------------------------------------------------------
 20354                                  ;**	TempCDS - Create (Temporary?) CDS
 20355                                  ;
 20356                                  ;	ENTRY	?? BUGBUG
 20357                                  ;		(DS) = SysInitSeg
 20358                                  ;	EXIT	?? BUGBUG
 20359                                  ;	USES	?? BUGBUG
 20360                                  ; ----------------------------------------------------------------------
 20361                                  
 20362                                  	; 30/12/2023
 20363                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20364                                  TempCDS:
 20365 00000BBF C43E[6B02]              	les	di,[DOSINFO]
 20366 00000BC3 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 20367                                  	;mov	cl,[es:di+20h]
 20368 00000BC7 30ED                    	xor	ch,ch			; (cx) = # of block devices
 20369                                  
 20370 00000BC9 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 20371                                  	;mov	[es:di+21h],cl	
 20372                                  
 20373                                  	;mov	al,cl
 20374                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 20375                                  	;;mov	ah,88
 20376                                  	;mul	ah			; (ax) = byte size for those CDSs
 20377                                  	; 30/12/2023
 20378 00000BCD B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 20379                                  	;mov	al,88
 20380 00000BCF F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 20381                                  
 20382 00000BD1 E8C604                  	call	ParaRound		; (ax) = paragraph size for CDSs
 20383 00000BD4 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 20384                                  
 20385                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 20386                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 20387                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 20388                                  ;		   variable which has the top of free memory for
 20389                                  ;		   device driver loads, etc.
 20390                                  
 20391 00000BD8 29C6                    	sub	si,ax
 20392                                  
 20393                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 20394                                  ;		that automatically updates alloclim every time we
 20395                                  ;		set up some new CDSs. Instead, I've added code
 20396                                  ;		which pre-allocates space for 26 CDSs. This
 20397                                  ;	        way we've got room for worst case CDSs before
 20398                                  ;		we place MagicDrv.sys
 20399                                  ;
 20400                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20401                                  
 20402                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20403                                  	; (SYSINIT:0C52h)
 20404 00000BDA 8936[A302]              	mov	[ALLOCLIM],si
 20405                                  
 20406 00000BDE 26897518                	mov	[es:di+SYSI_CDS+2],si
 20407                                  	;mov	[es:di+18h],si
 20408 00000BE2 89F0                    	mov	ax,si
 20409 00000BE4 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20410                                  	;mov	[word es:di+16h],0
 20411                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20412 00000BEA 26C535                  	lds	si,[es:di]
 20413 00000BED 8EC0                    	mov	es,ax
 20414 00000BEF 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20415                                  
 20416                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20417                                  ;	info from the corresponding DPB.
 20418                                  ;
 20419                                  ;	(cx) = count of CDSs left to process
 20420                                  ;	(es:di) = address of next CDS
 20421                                  
 20422                                  fooset:
 20423                                  	; 23/10/2022
 20424 00000BF1 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 20425 00000BF5 AB                      	stosw				; setup the root as the curdir
 20426                                  
 20427                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20428                                  
 20429                                  ;	(ds:si) = address of DPB
 20430                                  ;		 (si) = -1 if no drive
 20431                                  
 20432 00000BF6 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20433 00000BFA AB                      	stosw
 20434 00000BFB 2EFE06[A502]            	inc	byte [cs:DirStrng]
 20435 00000C00 31C0                    	xor	ax,ax
 20436 00000C02 51                      	push	cx
 20437                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20438 00000C03 B93F00                  	mov	cx,63	; 23/10/2022
 20439 00000C06 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20440                                  
 20441                                  ;	should handle the system that does not have any floppies.
 20442                                  ;	in this case,we are going to pretended there are two dummy floppies
 20443                                  ;	in the system. still they have dpb and cds,but we are going to
 20444                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20445                                  ;	"invalid drive specification" message when the user try to
 20446                                  ;	access them.
 20447                                  ;
 20448                                  ;	(ax) = 0
 20449                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20450                                  ;	(ds:si) = Next DPB (-1 if none)
 20451                                  
 20452 00000C08 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20453 00000C0B 7412                    	je	short fooset_zero	; don't have any physical drive.
 20454                                  
 20455                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20456                                  ;	if we are faking floppy drives then see if this cds being initialised
 20457                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20458                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20459                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20460                                  ;	for dpb offsets look at inc\dpb.inc.
 20461                                  
 20462                                  	; 04/09/2023
 20463 00000C0D 41                      	inc	cx  ; cx = 1
 20464                                  
 20465 00000C0E 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 20466                                  	;cmp	byte [cs:fake_floppy_drv],1
 20467 00000C13 7510                    	jne	short normcds 		; machine has floppy drives
 20468                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20469                                  	;cmp	byte [si],1
 20470 00000C15 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 20471 00000C17 770C                    	ja	short normcds
 20472 00000C19 B103                    	mov	cl,3			; the next dbp pointer
 20473                                  					; AX should be zero here
 20474 00000C1B F3AB                    	rep	stosw
 20475                                  	; 30/12/2023
 20476                                  	;pop	cx
 20477 00000C1D EB15                    	jmp	short get_next_dpb
 20478                                  
 20479                                  ;	(ax) = 0
 20480                                  
 20481                                  fooset_zero:
 20482 00000C1F B103                    	mov	cl,3
 20483 00000C21 F3AB                    	rep	stosw
 20484                                  	; 30/12/2023
 20485                                  	;pop	cx
 20486 00000C23 EB12                    	jmp	short fincds
 20487                                  
 20488                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20489                                  ;
 20490                                  ;	(ax) = 0
 20491                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20492                                  ;	(ds:si) = Next DPB (-1 if none)
 20493                                  
 20494                                  normcds:
 20495                                  	; 30/12/2023
 20496                                  	;pop	cx
 20497                                  
 20498                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20499                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20500                                  ;	this media is a non-fat based one.
 20501                                  
 20502                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20503                                  	; 23/10/2022
 20504                                  	;cmp	byte [si+8],0
 20505                                  	; 04/09/2023 (ax=0)
 20506 00000C25 384408                  	cmp	[si+8],al ; 0
 20507 00000C28 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20508 00000C2A B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20509                                  	;mov	ax,4000h
 20510                                  setnormcds:
 20511 00000C2D AB                      	stosw				; curdir_flags
 20512 00000C2E 89F0                    	mov	ax,si
 20513 00000C30 AB                      	stosw				; curdir_devptr
 20514 00000C31 8CD8                    	mov	ax,ds
 20515 00000C33 AB                      	stosw
 20516                                  
 20517                                  get_next_dpb:				; entry point for fake_fooset_zero
 20518                                  	; 23/10/2022
 20519 00000C34 C57419                  	lds	si,[si+19h]
 20520                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20521                                  fincds:
 20522                                  	; 30/12/2023
 20523 00000C37 59                      	pop	cx
 20524                                  	;
 20525 00000C38 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20526 00000C3B AB                      	stosw				; curdir_id
 20527 00000C3C AB                      	stosw				; curdir_id
 20528 00000C3D AB                      	stosw				; curdir_user_word
 20529 00000C3E B80200                  	mov	ax,2
 20530 00000C41 AB                      	stosw				; curdir_end
 20531 00000C42 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20532 00000C44 AA                      	stosb
 20533 00000C45 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20534 00000C46 AB                      	stosw
 20535 00000C47 AB                      	stosw
 20536                                  
 20537 00000C48 E2A7                    	loop	fooset
 20538                                  	
 20539 00000C4A 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20540                                  	
 20541 00000C50 C3                      	retn
 20542                                  
 20543                                  ; ----------------------------------------------------------------------
 20544                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20545                                  ;
 20546                                  ;	entry:
 20547                                  ;	   al == ASCII CAPS drive letter
 20548                                  ;
 20549                                  ;	exit:
 20550                                  ;	   ds:si -> DPB, or si = -1 if not found
 20551                                  ; ----------------------------------------------------------------------
 20552                                  
 20553                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 20554                                  ;
 20555                                  ;get_dpb_for_drive_al:
 20556                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 20557                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20558                                  ;	lds	si,[si]
 20559                                  ;	sub	al,'A'
 20560                                  ;
 20561                                  ;get_dpb_for_drive_1:
 20562                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 20563                                  ;	cmp	al,[si]
 20564                                  ;	je	short got_dpb_for_drive	;  done if so
 20565                                  ;
 20566                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20567                                  ;	cmp	si,-1
 20568                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20569                                  ;
 20570                                  ;got_dpb_for_drive:
 20571                                  ;	retn
 20572                                  
 20573                                  ;=======================================================================
 20574                                  
 20575                                  ;**	EndFile - Build DOS structures
 20576                                  ;
 20577                                  ; This procedure is called after the config.sys has been processed and
 20578                                  ; installable device drivers have been loaded (but before "install="
 20579                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20580                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20581                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20582                                  ; above these structures is deallocated back to DOS.
 20583                                  ;
 20584                                  ;	ENTRY	?? BUGBUG
 20585                                  ;	EXIT	?? BUGBUG
 20586                                  ;	USES	?? BUGBUG
 20587                                  
 20588                                  ;=======================================================================
 20589                                  ; allocate files
 20590                                  ; ----------------------------------------------------------------------
 20591                                  
 20592                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20593                                  	; (SYSINIT:0CCDh)
 20594                                  
 20595                                  endfile:
 20596                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20597                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20598                                  ; to confbot.
 20599                                  
 20600                                  ;	if this procedure has been called to take care of install= command,
 20601                                  ;	   then we have to save es,si registers.
 20602                                  
 20603                                  	; 11/12/2022
 20604                                  	; ds = cs
 20605                                  
 20606                                  	; 23/10/2022
 20607                                  	; 31/03/2019
 20608 00000C51 1E                      	push	ds
 20609                                  
 20610                                  	;;mov	ax,Bios_Data ; 0070h
 20611                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20612                                  	; 21/10/2022
 20613 00000C52 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20614 00000C55 8ED8                    	mov	ds,ax
 20615                                  
 20616                                  	;cmp	word [052Fh],0
 20617 00000C57 833E[2605]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20618 00000C5C 7505                    	jne	short multrk_flag_done
 20619                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20620                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20621                                  	; 12/12/2022
 20622 00000C5E 800E[2605]80            	or	byte [multrk_flag],multrk_on ; 80h
 20623                                  multrk_flag_done:
 20624                                  	; 23/10/2022
 20625                                  	; 31/03/2019
 20626 00000C63 1F                      	pop	ds
 20627                                  
 20628                                  	; 11/12/2022
 20629                                  	; ds = cs
 20630 00000C64 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20631 00000C67 A3[A302]                	mov	[ALLOCLIM],ax
 20632                                  	; 23/10/2022
 20633                                  	;mov	ax, [cs:top_of_cdss]
 20634                                  	;mov	[cs:ALLOCLIM], ax 
 20635                                  
 20636                                  	; 11/12/2022
 20637                                  	; ds = cs
 20638                                  	;push	cs
 20639                                  	;pop	ds
 20640                                  	
 20641                                  	;mov	ax,[CONFBOT]
 20642                                  	;mov	[ALLOCLIM],ax
 20643                                  
 20644 00000C6A E8A023                  	call	round
 20645                                  	; 11/12/2022
 20646                                  	; ds = cs
 20647 00000C6D A0[9D02]                	mov	al,[FILES]
 20648                                  	; 23/10/2022
 20649                                  	;mov	al,[cs:FILES]
 20650 00000C70 2C05                    	sub	al,5
 20651 00000C72 764B                    	jbe	short dofcbs
 20652                                  
 20653 00000C74 50                      	push	ax
 20654                                  	;mov	al,devmark_files ; 'F'
 20655 00000C75 B046                    	mov	al,'F'
 20656 00000C77 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 20657 00000C7A 58                      	pop	ax
 20658 00000C7B 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20659                                  					;  it does sign extend.
 20660                                  	; 11/12/2022
 20661                                  	; ds = cs
 20662 00000C7D 8B1E[DE03]              	mov	bx,[memlo]
 20663 00000C81 8B16[E003]              	mov	dx,[memhi]
 20664 00000C85 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20665                                  	; 23/10/2022
 20666                                  	;mov	bx,[cs:memlo]
 20667                                  	;mov	dx,[cs:memhi]
 20668                                  	;lds	di,[cs:DOSINFO]		
 20669                                  
 20670                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20671 00000C89 C57D04                  	lds	di,[di+4]
 20672                                  
 20673                                  	;mov	[di+SF.SFLink],bx
 20674 00000C8C 891D                    	mov	[di],bx
 20675 00000C8E 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20676                                  
 20677 00000C91 0E                      	push	cs
 20678 00000C92 1F                      	pop	ds
 20679                                  
 20680                                  	; 11/12/2022
 20681                                  	; ds = cs
 20682 00000C93 C43E[DE03]              	les	di,[memlo]		;point to new sft
 20683                                  	; 23/10/2022
 20684                                  	;les	di,[cs:memlo]
 20685                                  
 20686                                  	;mov	word [es:di+SF.SFLink],-1
 20687 00000C97 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20688                                  	;mov	[es:di+SF.SFCount],ax
 20689 00000C9C 26894504                	mov	[es:di+4],ax
 20690                                  	; 09/04/2024
 20691 00000CA0 B33B                    	mov	bl,SF_ENTRY.size ; 59
 20692                                  	;mov	bl,59
 20693 00000CA2 F6E3                    	mul	bl			;ax = number of bytes to clear
 20694 00000CA4 89C1                    	mov	cx,ax
 20695                                  	; 11/12/2022
 20696                                  	; ds = cs
 20697 00000CA6 0106[DE03]              	add	[memlo],ax		;allocate memory
 20698                                  	; 23/10/2022
 20699                                  	;add	[cs:memlo],ax
 20700 00000CAA B80600                  	mov	ax,6
 20701                                  	; 11/12/2022
 20702 00000CAD 0106[DE03]              	add	[memlo],ax		;remember the header too
 20703                                  	;add	[cs:memlo],ax
 20704                                  	; 11/12/2022
 20705 00000CB1 800E[0614]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20706                                  	; 23/10/2022
 20707                                  	;or	byte [cs:setdevmarkflag],2
 20708 00000CB6 E85423                  	call	round			; check for mem error before the stosb
 20709 00000CB9 01C7                    	add	di,ax
 20710 00000CBB 31C0                    	xor	ax,ax
 20711 00000CBD F3AA                    	rep	stosb			;clean out the stuff
 20712                                  
 20713                                  ; allocate fcbs
 20714                                  ; ----------------------------------------------------------------------
 20715                                  
 20716                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20717                                  	; (SYSINIT:0D48h)
 20718                                  dofcbs:
 20719                                  	; 11/12/2022
 20720                                  	; ds = cs
 20721                                  	;push	cs
 20722                                  	;pop	ds
 20723 00000CBF E84B23                  	call	round
 20724                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20725 00000CC2 B058                    	mov	al,'X'
 20726 00000CC4 E82007                  	call	setdevmark
 20727                                  	; 11/12/2022
 20728                                  	; ds = cs
 20729 00000CC7 A0[9E02]                	mov	al,[FCBS]
 20730                                  	;mov	al,[cs:FCBS]
 20731 00000CCA 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20732                                  					;  it does sign extend.
 20733                                  	; 11/12/2022
 20734 00000CCC 8B1E[DE03]              	mov	bx,[memlo]
 20735 00000CD0 8B16[E003]              	mov	dx,[memhi]
 20736 00000CD4 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20737                                  	; 23/10/2022
 20738                                  	;mov	bx,[cs:memlo]
 20739                                  	;mov	dx,[cs:memhi]
 20740                                  	;lds	di,[cs:DOSINFO]
 20741                                  
 20742                                  	;mov	[di+SYSI_FCB],bx
 20743                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20744                                  	; 23/10/2022
 20745 00000CD8 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20746 00000CDB 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20747                                  
 20748 00000CDE 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20749 00000CE3 30FF                    	xor	bh,bh
 20750                                  	;mov	[di+SYSI_KEEP],bx
 20751 00000CE5 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20752                                  
 20753 00000CE8 0E                      	push	cs
 20754 00000CE9 1F                      	pop	ds
 20755                                  	
 20756 00000CEA C43E[DE03]              	les	di,[memlo]		;point to new table
 20757                                  	;mov	word [es:di+SF.SFLink],-1
 20758 00000CEE 26C705FFFF              	mov	word [es:di],-1
 20759                                  	;mov	[es:di+SF.SFCount],ax
 20760                                  	; 02/11/2022
 20761 00000CF3 26894504                	mov	[es:di+4],ax
 20762 00000CF7 B33B                    	mov	bl,SF_ENTRY.size ; 59
 20763 00000CF9 89C1                    	mov	cx,ax
 20764 00000CFB F6E3                    	mul	bl			;ax = number of bytes to clear
 20765 00000CFD 0106[DE03]              	add	[memlo],ax		;allocate memory
 20766                                  	;mov	ax,6
 20767 00000D01 B80600                  	mov	ax,SF.size-2 ; 6
 20768 00000D04 0106[DE03]              	add	[memlo],ax		;remember the header too
 20769                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20770 00000D08 800E[0614]02            	or	byte [setdevmarkflag],2
 20771 00000D0D E8FD22                  	call	round			; check for mem error before the stosb
 20772 00000D10 01C7                    	add	di,ax			;skip over header
 20773 00000D12 B041                    	mov	al,'A'
 20774                                  fillloop:
 20775 00000D14 51                      	push	cx			; save count
 20776 00000D15 B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20777 00000D18 FC                      	cld
 20778 00000D19 F3AA                    	rep	stosb			; filled
 20779                                  
 20780                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20781                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20782                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20783                                  
 20784                                  	; 18/12/2022
 20785                                  	;cx = 0
 20786 00000D1B 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20787 00000D1F 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20788 00000D23 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20789                                  	
 20790                                  	; 23/10/2022	
 20791                                  	;mov     word [es:di-3Bh],0
 20792                                  	;mov     word [es:di-26h],0
 20793                                  	;mov     word [es:di-24h],0
 20794                                  
 20795 00000D27 59                      	pop	cx
 20796 00000D28 E2EA                    	loop	fillloop
 20797                                  
 20798                                  ; allocate buffers
 20799                                  ; ----------------------------------------------------------------------
 20800                                  
 20801                                  ; search through the list of media supported and allocate 3 buffers if the
 20802                                  ; capacity of the drive is > 360kb
 20803                                  
 20804                                  	; 18/12/2022
 20805                                  	; cx = 0
 20806 00000D2A 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20807 00000D2F 7403                    	je	short dodefaultbuff
 20808 00000D31 E98000                  	jmp	dobuff			; the user entered the buffers=.
 20809                                  
 20810                                  dodefaultbuff:
 20811                                  	; 18/12/2022
 20812 00000D34 890E[9902]              	mov	[h_buffers],cx ; 0
 20813 00000D38 41                      	inc	cx
 20814 00000D39 41                      	inc	cx
 20815 00000D3A 890E[9702]              	mov	[buffers],cx ; 2
 20816                                  	
 20817                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20818                                  	;mov	word [buffers],2	; default to 2 buffers
 20819                                  
 20820                                  	; 23/10/2022
 20821                                  	; 04/09/2023
 20822                                  	;push	ax
 20823                                  	;push	ds ; 26/03/2019
 20824                                  
 20825                                  	; 04/09/2023
 20826                                  	; ds = cs
 20827 00000D3E C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20828                                  	;les	bp,[cs:DOSINFO]
 20829                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20830                                  	; 11/12/2022
 20831 00000D42 26C46E00                	les	bp,[es:bp]
 20832                                  	; 23/10/2022
 20833                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20834                                  
 20835                                  	; 04/09/2023
 20836                                  	; ds = cs
 20837                                  	;push	cs
 20838                                  	;pop	ds
 20839                                  ;SYSINIT:0DE2h:
 20840                                  nextdpb:				; test if the drive supports removeable media
 20841                                  	;mov	bl,[es:bp+DPB.drive]
 20842                                  	; 11/12/2022
 20843 00000D46 268A5E00                	mov	bl,[es:bp]
 20844                                  	; 23/10/2022
 20845                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20846                                  
 20847                                  	;inc	bl
 20848                                  	; 18/12/2022
 20849 00000D4A 43                      	inc	bx
 20850                                  
 20851                                  	;mov	ax,(IOCTL<<8)|8
 20852 00000D4B B80844                  	mov	ax,4408h
 20853 00000D4E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20854                                  
 20855                                  ; ignore fixed disks
 20856                                  
 20857 00000D50 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20858 00000D52 7534                    	jnz	short nosetbuf
 20859                                  
 20860                                  ; get parameters of drive
 20861                                  
 20862 00000D54 31DB                    	xor	bx,bx
 20863                                  	;;mov	bl,[es:bp+DPB.drive]
 20864                                  	; 11/12/2022
 20865 00000D56 268A5E00                	mov	bl,[es:bp]
 20866                                  	; 23/10/2022
 20867                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20868                                  	
 20869                                  	;inc	bl
 20870                                  	; 18/12/2022
 20871 00000D5A 43                      	inc	bx
 20872                                  
 20873 00000D5B BA[6A34]                	mov	dx,deviceparameters
 20874                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20875 00000D5E B80D44                  	mov	ax,440Dh
 20876                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20877 00000D61 B96008                  	mov	cx,860h
 20878 00000D64 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20879 00000D66 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20880                                  					; generic ioctl
 20881                                  ; determine capacity of drive
 20882                                  ; media capacity = #sectors * bytes/sector
 20883                                  
 20884                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20885                                  	; 23/10/2022
 20886 00000D68 8B1E[7934]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20887                                  	
 20888                                  ; to keep the magnitude of the media capacity within a word,
 20889                                  ; scale the sector size
 20890                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20891                                  
 20892                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20893                                  	; 23/10/2022
 20894 00000D6C A1[7134]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20895 00000D6F 31D2                    	xor	dx,dx
 20896 00000D71 B90002                  	mov	cx,512
 20897 00000D74 F7F1                    	div	cx			; scale sector size in factor of
 20898                                  					; 512 bytes
 20899 00000D76 F7E3                    	mul	bx			; ax = #sectors * size factor
 20900 00000D78 09D2                    	or	dx,dx			; just in case of large floppies
 20901 00000D7A 7505                    	jnz	short setbuf
 20902 00000D7C 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20903 00000D7F 7607                    	jbe	short nosetbuf
 20904                                  setbuf:
 20905                                  	; 18/12/2022
 20906                                  	; word [buffers] = 2
 20907 00000D81 C606[9702]03            	mov	byte [buffers],3
 20908                                  	;mov	word [buffers],3
 20909 00000D86 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20910                                  					; for default buffer count
 20911                                  nosetbuf:
 20912                                  	; 23/10/2022
 20913                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20914 00000D88 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20915 00000D8D 7406                    	je	short chk_memsize_for_buffers
 20916                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20917 00000D8F 26C46E19                	les	bp,[es:bp+19h]
 20918 00000D93 EBB1                    	jmp	short nextdpb
 20919                                  
 20920                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20921                                  ;memory size too.
 20922                                  ; default buffers = 2
 20923                                  ; if diskette media > 360 kb,then default buffers = 3
 20924                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20925                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20926                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20927                                  
 20928                                  chk_memsize_for_buffers:
 20929                                  	; 18/12/2022
 20930                                  	;cmp	word [MEMORY_SIZE],2000h
 20931                                  	;jbe	short bufset
 20932                                  	;mov	word [buffers],5
 20933                                  	;cmp	word [MEMORY_SIZE],4000h
 20934                                  	;jbe	short bufset
 20935                                  	;mov	word [buffers],10
 20936                                  	;cmp	word [MEMORY_SIZE],8000h
 20937                                  	;jbe	short bufset
 20938                                  	;mov	word [buffers],15
 20939                                  
 20940                                  	; 18/12/2022
 20941                                  	; word [buffers] = 3 or 2
 20942 00000D95 BB[9702]                	mov	bx,buffers
 20943 00000D98 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20944 00000D9B 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20945                                  
 20946 00000D9C 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20947 00000D9F 7213                    	jb	short bufset
 20948 00000DA1 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20949 00000DA4 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20950 00000DA7 730B                    	jnb	short bufset
 20951 00000DA9 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20952 00000DAC 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20953 00000DAF 7303                    	jnb	short bufset
 20954 00000DB1 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20955                                  bufset:
 20956                                  	; 23/10/2022
 20957                                  	; 26/03/2019
 20958                                  	; 04/09/2023
 20959                                  	;pop	ds
 20960                                  	;pop	ax
 20961                                  
 20962                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20963                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20964                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20965                                  
 20966                                  ; 26/03/2019
 20967                                  
 20968                                  ;*******************************************************************************
 20969                                  ;									       *
 20970                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20971                                  ; input :								       *
 20972                                  ;    memhi:memlo - start of the next available memory			       *
 20973                                  ;    buffers = number of buffers					       *
 20974                                  ;    h_buffers = number of secondary buffers				       *
 20975                                  ;									       *
 20976                                  ; output:								       *
 20977                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20978                                  ;	buffinfo set.							       *
 20979                                  ;	bufferqueue set.						       *
 20980                                  ;									       *
 20981                                  ; subroutines to be called:						       *
 20982                                  ;									       *
 20983                                  ;*******************************************************************************
 20984                                  
 20985                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20986                                  	; (SYSINIT:0E60h)
 20987                                  dobuff:
 20988                                  	; ds = cs ; 31/03/2019
 20989                                  	; 23/10/2022
 20990                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20991                                  	; 04/09/2023
 20992 00000DB4 A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20993 00000DB7 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20994 00000DBB C51E[6B02]              	lds	bx,[DOSINFO]
 20995                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20996                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20997 00000DBF 89473F                  	mov	[bx+3Fh],ax
 20998                                  	; 04/09/2023
 20999                                  	;mov	ax,[cs:h_buffers]
 21000                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 21001                                  	;mov	[bx+41h],ax
 21002                                  	; 04/09/2023
 21003 00000DC2 894F41                  	mov	[bx+41h],cx ; *
 21004 00000DC5 C55F12                  	lds	bx,[bx+12h]
 21005                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 21006 00000DC8 E84222                  	call	round		; get [memhi]:[memlo]
 21007                                  	;mov	al,devmark_buf	; ='B'
 21008 00000DCB B042                    	mov	al,'B'	
 21009 00000DCD E81706                  	call	setdevmark
 21010                                  
 21011                                  ;allocate buffers
 21012                                  
 21013 00000DD0 1E                      	push	ds			; save buffer info. ptr.
 21014 00000DD1 53                      	push	bx
 21015                                  
 21016 00000DD2 E85203                  	call	set_buffer
 21017                                  
 21018 00000DD5 5B                      	pop	bx
 21019 00000DD6 1F                      	pop	ds
 21020                                  
 21021                                  ;now set the secondary buffer if specified.
 21022                                  
 21023 00000DD7 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 21024 00000DDD 742D                    	je	short xif16
 21025 00000DDF E82B22                  	call	round
 21026                                  	; 23/10/2022
 21027 00000DE2 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 21028                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 21029 00000DE7 894F06                  	mov	[bx+6],cx
 21030 00000DEA 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21031                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 21032 00000DEF 894F08                  	mov	[bx+8],cx
 21033 00000DF2 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 21034                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 21035 00000DF7 894F0A                  	mov	[bx+10],cx
 21036 00000DFA B80002                  	mov	ax,512			; 512 byte
 21037 00000DFD F7E1                    	mul	cx
 21038 00000DFF 2EA3[DE03]              	mov	[cs:memlo],ax
 21039                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21040 00000E03 2E800E[0614]02          	or	byte [cs:setdevmarkflag],2
 21041 00000E09 E80122                  	call	round
 21042                                  xif16:
 21043                                  
 21044                                  ; ----------------------------------------------------------------------
 21045                                  ; allocate cdss
 21046                                  ; ----------------------------------------------------------------------
 21047                                  
 21048                                  buf1:
 21049 00000E0C E8FE21                  	call	round
 21050                                  
 21051 00000E0F 50                      	push	ax
 21052                                  	; 23/10/2022
 21053                                  	;mov	ax,devmark_cds		;='L'
 21054 00000E10 B84C00                  	mov	ax, 'L'
 21055 00000E13 E8D105                  	call	setdevmark
 21056 00000E16 58                      	pop	ax
 21057                                  
 21058 00000E17 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 21059                                  	;mov	cl,[es:di+SYSI_NUMIO]
 21060 00000E1C 268A4D20                	mov	cl,[es:di+20h]
 21061 00000E20 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 21062 00000E25 7305                    	jae	short gotncds 		; user setting must be at least numio
 21063 00000E27 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 21064                                  gotncds:
 21065 00000E2C 30ED                    	xor	ch,ch
 21066                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 21067 00000E2E 26884D21                	mov	[es:di+21h],cl
 21068 00000E32 2EA1[E003]              	mov	ax,[cs:memhi]
 21069                                  	;mov	[es:di+SYSI_CDS+2],ax
 21070 00000E36 26894518                	mov	[es:di+18h],ax
 21071 00000E3A 2EA1[DE03]              	mov	ax,[cs:memlo]
 21072                                  	;mov	[es:di+SYSI_CDS],ax
 21073 00000E3E 26894516                	mov	[es:di+16h],ax
 21074 00000E42 88C8                    	mov	al,cl
 21075                                  	;mov	ah,curdirlen ; curdir_list.size
 21076 00000E44 B458                    	mov	ah,88
 21077 00000E46 F6E4                    	mul	ah
 21078 00000E48 E84F02                  	call	ParaRound
 21079 00000E4B 2E0106[E003]            	add	[cs:memhi],ax
 21080                                  
 21081                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21082 00000E50 2E800E[0614]02          	or	byte [cs:setdevmarkflag],2
 21083 00000E56 E8B421                  	call	round			; check for mem error before initializing
 21084                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 21085 00000E59 26C535                  	lds	si,[es:di]
 21086                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 21087 00000E5C 26C47D16                	les	di,[es:di+16h]
 21088 00000E60 E88EFD                  	call	fooset
 21089                                  
 21090                                  ; ----------------------------------------------------------------------
 21091                                  ; allocate space for internal stack
 21092                                  ; ----------------------------------------------------------------------
 21093                                  
 21094 00000E63 0E                      	push	cs
 21095 00000E64 1F                      	pop	ds
 21096                                  
 21097                                  ;	if the user did not entered stacks= command, as a default, do not install
 21098                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 21099                                  ;	otherwise,install it to the user specified value or to the default
 21100                                  ;	value of 9,128 for other systems.
 21101                                  
 21102 00000E65 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 21103 00000E6A 740E                    	je	short doinstallstack	; then install as specified by the user
 21104 00000E6C 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 21105 00000E71 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 21106 00000E73 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 21107 00000E78 736D                    	jae	short skipstack
 21108                                  doinstallstack:
 21109 00000E7A A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 21110 00000E7D 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 21111 00000E7F 7466                    	jz	short skipstack		; don't install stack.
 21112                                  
 21113                                  ;	dynamic relocation of stack code.
 21114                                  
 21115 00000E81 E88921                  	call	round			;[memhi] = seg. for stack code
 21116                                  					;[memlo] = 0
 21117                                  
 21118                                  ; set devmark block into memory for mem command
 21119                                  ; devmark_id = 's' for stack
 21120                                  
 21121                                  	;mov	al,devmark_stk	;='S'
 21122                                  	; 23/10/2022
 21123 00000E84 B053                    	mov	al,'S'
 21124 00000E86 E85E05                  	call	setdevmark
 21125                                  
 21126 00000E89 A1[E003]                	mov	ax,[memhi]
 21127 00000E8C 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 21128                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21129                                  	; 11/12/2022
 21130                                  	; ds = cs
 21131                                  	;push	cs
 21132                                  	;pop	ds
 21133 00000E8E 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 21134 00000E90 31FF                    	xor	di,di
 21135 00000E92 B9[6702]                	mov	cx,endstackcode
 21136 00000E95 890E[DE03]              	mov	[memlo],cx
 21137 00000E99 E87121                  	call	round		;have enough space for relocation?
 21138 00000E9C F3A4                    	rep	movsb
 21139                                  
 21140 00000E9E 1E                      	push	ds		; stick the location of the NextStack entry
 21141                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 21142                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21143                                  	; 21/10/2022
 21144 00000E9F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21145 00000EA2 8ED8                    	mov	ds,ax
 21146 00000EA4 C706[B508][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 21147 00000EAA 8C06[B708]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 21148                                  
 21149 00000EAE 2EA1[DE03]              	mov	ax,[cs:memlo]
 21150 00000EB2 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 21151 00000EB6 A3[BB08]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 21152 00000EB9 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 21153 00000EBD 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 21154 00000EC1 A3[BD08]                	mov	[IT_StackLoc+2],ax
 21155                                  
 21156                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 21157                                  
 21158                                  	;mov	ax,entrysize ; mov ax,8
 21159                                  	; 23/10/2022
 21160 00000EC4 B80800                  	mov	ax,8
 21161 00000EC7 2E0306[8C02]            	add	ax,[cs:stack_size]
 21162 00000ECC 2EF726[8A02]            	mul	word [cs:stack_count]
 21163                                  
 21164 00000ED1 A3[BF08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 21165                                  
 21166 00000ED4 1F                      	pop	ds		; no more need to access Instance Table
 21167                                  
 21168 00000ED5 E8C201                  	call	ParaRound	; convert size to paragraphs
 21169                                  	
 21170                                  	; 11/12/2022
 21171                                  	; ds = cs
 21172                                  	;add	[cs:memhi],ax
 21173 00000ED8 0106[E003]              	add	[memhi],ax
 21174                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21175                                  	;or	byte [cs:setdevmarkflag],2
 21176 00000EDC 800E[0614]02            	or	byte [setdevmarkflag],2
 21177                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 21178                                  				;to set the devmark_size for stack by round routine.
 21179 00000EE1 E82921                  	call	round		; check for memory error before
 21180                                  				; continuing
 21181 00000EE4 E8E702                  	call	stackinit	; initialize hardware stack. 
 21182                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 21183                                  skipstack:
 21184                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21185                                  	; (SYSINIT:0F99h)
 21186                                  
 21187                                  	; 11/12/2022
 21188                                  	; ds = cs
 21189                                  	;push	cs
 21190                                  	;pop	ds
 21191                                  
 21192 00000EE7 A0[9D02]                	mov	al,[FILES]
 21193 00000EEA 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 21194                                  				;  it does sign extend.
 21195 00000EEC 89C1                    	mov	cx,ax
 21196 00000EEE 31DB                    	xor	bx,bx		;close standard input
 21197 00000EF0 B43E                    	mov	ah,3Eh ; CLOSE
 21198 00000EF2 CD21                    	int	21h
 21199 00000EF4 BB0200                  	mov	bx,2
 21200                                  rcclloop:			;close everybody but standard output
 21201 00000EF7 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 21202 00000EF9 CD21                    	int	21h		; in case we can't get new one open.
 21203 00000EFB 43                      	inc	bx
 21204 00000EFC E2F9                    	loop	rcclloop
 21205                                  
 21206 00000EFE BA[F432]                	mov	dx,condev
 21207 00000F01 B002                    	mov	al,2
 21208 00000F03 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 21209 00000F05 F9                      	stc			; set for possible int 24
 21210 00000F06 CD21                    	int	21h
 21211 00000F08 7305                    	jnc	short goaux
 21212 00000F0A E84A23                  	call	badfil
 21213 00000F0D EB13                    	jmp	short goaux2
 21214                                  goaux:	
 21215 00000F0F 50                      	push	ax
 21216 00000F10 BB0100                  	mov	bx,1		;close standard output
 21217 00000F13 B43E                    	mov	ah,3Eh ; CLOSE
 21218 00000F15 CD21                    	int	21h
 21219 00000F17 58                      	pop	ax
 21220                                  
 21221 00000F18 89C3                    	mov	bx,ax		;new device handle
 21222 00000F1A B445                    	mov	ah,45h ; XDUP
 21223 00000F1C CD21                    	int	21h		;dup to 1,stdout
 21224 00000F1E B445                    	mov	ah,45h ; XDUP
 21225 00000F20 CD21                    	int	21h		;dup to 2,stderr
 21226                                  goaux2: 
 21227 00000F22 BA[F832]                	mov	dx,auxdev
 21228 00000F25 B002                    	mov	al,2		;read/write access
 21229 00000F27 E85E23                  	call	open_dev
 21230                                  
 21231 00000F2A BA[FC32]                	mov	dx,prndev
 21232 00000F2D B001                    	mov	al,1		;write only
 21233 00000F2F E85623                  	call	open_dev
 21234                                  
 21235                                  ;global rearm command for shared interrupt devices attached in the system;
 21236                                  ;shared interrupt attachment has some problem when it issues interrupt
 21237                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 21238                                  ;no further interrupts on that level will be presented until a global rearm
 21239                                  ;is issued. by the request of the system architecture group, msbio will
 21240                                  ;issue a global rearm after every device driver is loaded.
 21241                                  ;to issue a global rearm:	;for pc1,xt,palace
 21242                                  ;
 21243                                  ;			  out 02f2h,xx  ; interrupt level 2
 21244                                  ;			  out 02f3h,xx  ; interrupt level 3
 21245                                  ;			  out 02f4h,xx  ; interrupt level 4
 21246                                  ;			  out 02f5h,xx  ; interrupt level 5
 21247                                  ;			  out 02f6h,xx  ; interrupt level 6
 21248                                  ;			  out 02f7h,xx  ; interrupt level 7
 21249                                  ;
 21250                                  ;	for pc at,in addition to the above commands,
 21251                                  ;	need to handle the secondary interrupt handler
 21252                                  ;
 21253                                  ;			  out 06f2h,xx  ; interrupt level 10
 21254                                  ;			  out 06f3h,xx  ; interrupt level 11
 21255                                  ;			  out 06f4h,xx  ; interrupt level 12
 21256                                  ;			  out 06f6h,xx  ; interrupt level 14
 21257                                  ;			  out 06f7h,xx  ; interrupt level 15
 21258                                  ;
 21259                                  ;	for round-up machine
 21260                                  ;
 21261                                  ;			  none.
 21262                                  
 21263                                  ; where xx stands for any value.
 21264                                  ;
 21265                                  ; for your information,after naples level machine,the system service bios
 21266                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 21267                                  
 21268                                  	; 24/10/2022
 21269                                  
 21270 00000F32 50                      	push	ax
 21271 00000F33 53                      	push	bx
 21272 00000F34 52                      	push	dx
 21273 00000F35 06                      	push	es
 21274                                  
 21275 00000F36 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 21276 00000F38 BAF202                  	mov	dx,2F2h 		;get starting address
 21277 00000F3B EE                      	out	dx,al			; out 02f2h,0ffh
 21278 00000F3C 42                      	inc	dx
 21279 00000F3D EE                      	out	dx,al			; out 02f3h,0ffh
 21280 00000F3E 42                      	inc	dx
 21281 00000F3F EE                      	out	dx,al			; out 02f4h,0ffh
 21282 00000F40 42                      	inc	dx
 21283 00000F41 EE                      	out	dx,al			; out 02f5h,0ffh
 21284 00000F42 42                      	inc	dx
 21285 00000F43 EE                      	out	dx,al			; out 02f6h,0ffh
 21286 00000F44 42                      	inc	dx
 21287 00000F45 EE                      	out	dx,al			; out 02f7h,0ffh
 21288                                  
 21289                                  ;sb secondary global rearm
 21290                                  
 21291 00000F46 B800F0                  	mov	ax,0F000h		;get machine type
 21292 00000F49 8EC0                    	mov	es,ax
 21293 00000F4B 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 21294 00000F51 740D                    	je	short startrearm	; *if at no need to check
 21295                                  
 21296 00000F53 B4C0                    	mov	ah,0C0h 		;get system configuration
 21297 00000F55 CD15                    	int	15h			; *
 21298 00000F57 7216                    	jc	short finishrearm	; *jmp if old rom
 21299                                  
 21300                                  ; test feature byte for secondary interrupt controller
 21301                                  
 21302 00000F59 26F6470540              	test	byte [es:bx+5],40h
 21303                                  	; 24/10/2022
 21304                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 21305 00000F5E 740F                    	je	short finishrearm	;jmp if it is there
 21306                                  
 21307                                  startrearm:
 21308 00000F60 B0FF                    	mov	al,0FFh 		;write any pattern to port
 21309 00000F62 BAF206                  	mov	dx,6F2h 		;get starting address
 21310 00000F65 EE                      	out	dx,al			;out 06f2h,0ffh
 21311 00000F66 42                      	inc	dx			;bump address
 21312 00000F67 EE                      	out	dx,al			;out 06f3h,0ffh
 21313 00000F68 42                      	inc	dx			;bump address
 21314 00000F69 EE                      	out	dx,al			;out 06f4h,0ffh
 21315 00000F6A 42                      	inc	dx			;bump address
 21316 00000F6B 42                      	inc	dx			;bump address
 21317 00000F6C EE                      	out	dx,al			;out 06f6h,0ffh
 21318 00000F6D 42                      	inc	dx			;bump address
 21319 00000F6E EE                      	out	dx,al			;out 06f7h,0ffh
 21320                                  
 21321                                  finishrearm:
 21322 00000F6F 07                      	pop	es
 21323 00000F70 5A                      	pop	dx
 21324 00000F71 5B                      	pop	bx
 21325 00000F72 58                      	pop	ax
 21326                                  
 21327                                  ;    global rearm end *******************
 21328                                  
 21329                                  ; ----------------------------------------------------------------------
 21330                                  ; allocate sysinit_base for install= command
 21331                                  ; ----------------------------------------------------------------------
 21332                                  ; sysinit_base allocation.
 21333                                  ;   check if endfile has been called to handle install= command.
 21334                                  
 21335                                  set_sysinit_base:
 21336                                  
 21337                                  ; ----------------------------------------------------------------------
 21338                                  ;sysinit_base will be established in the secure area of
 21339                                  ;lower memory when it handles the first install= command.
 21340                                  ;sysinit_base is the place where the actual exec function will be called and
 21341                                  ;will check sysinit module in high memory if it is damaged by the application
 21342                                  ;program.  if sysinit module has been broken,then "memory error..." message
 21343                                  ;is displayed by sysinit_base.
 21344                                  ; ----------------------------------------------------------------------
 21345                                  
 21346                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 21347                                  	; (SYSINIT:1028h)
 21348                                  
 21349                                  	; 11/12/2022
 21350                                  	; ds = cs
 21351 00000F73 50                      	push	ax			; set devmark for mem command
 21352 00000F74 A1[E003]                	mov	ax,[memhi]
 21353 00000F77 2B06[E403]              	sub	ax,[area]
 21354 00000F7B A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 21355                                  	;mov	al,devmark_inst ; 'T'
 21356 00000F7E B054                    	mov	al,'T'
 21357 00000F80 E86404                  	call	setdevmark
 21358 00000F83 58                      	pop	ax
 21359                                  
 21360 00000F84 8B3E[E003]              	mov	di,[memhi]
 21361 00000F88 8EC7                    	mov	es,di
 21362 00000F8A 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 21363 00000F8E 31FF                    	xor	di,di
 21364 00000F90 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 21365 00000F94 BE[A610]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 21366 00000F97 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 21367                                  	; 24/10/2022 
 21368                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 21369 00000F9A 010E[DE03]              	add	[memlo],cx
 21370                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 21371                                  	; 11/12/2022
 21372                                  	; ds = cs
 21373                                  	;or	byte [cs:setdevmarkflag],2
 21374 00000F9E 800E[0614]02            	or	byte [setdevmarkflag],2
 21375                                  	;or	byte [setdevmarkflag],for_devmark
 21376 00000FA3 E86720                  	call	round			; check mem error. also,readjust memhi for the next use.
 21377 00000FA6 F3A4                    	rep	movsb			; reallocate it.
 21378                                  
 21379 00000FA8 C706[5203][7F10]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 21380 00000FAE 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 21381                                  	;or	word [install_flag],has_installed ; set the flag.
 21382                                  	;or	byte [install_flag],has_installed ; 2
 21383                                  	; 11/12/2022
 21384 00000FB2 800E[4A03]02            	or	byte [install_flag],2
 21385                                  	; 24/10/2022
 21386                                  	;or	word [install_flag],2	
 21387                                  
 21388                                  ; ----------------------------------------------------------------------
 21389                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 21390                                  ; the top of the memory will be allocated for sysinit and config.sys if
 21391                                  ; have_install_cmd.
 21392                                  ; ----------------------------------------------------------------------
 21393                                  
 21394 00000FB7 E85320                  	call	round
 21395 00000FBA 8B1E[E003]              	mov	bx,[memhi]
 21396 00000FBE A1[E403]                	mov	ax,[area]
 21397 00000FC1 A3[DA03]                	mov	[old_area],ax		; save [area]
 21398 00000FC4 8EC0                    	mov	es,ax			;calc what we needed
 21399 00000FC6 29C3                    	sub	bx,ax
 21400                                  	; 24/10/2022
 21401 00000FC8 B44A                    	mov	ah,4Ah ; SETBLOCK
 21402 00000FCA CD21                    	int	21h			;give the rest back
 21403                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21404                                  		; ES = segment address of block to change
 21405                                  		; BX = new size in paragraphs
 21406 00000FCC 06                      	push	es
 21407 00000FCD 8CC0                    	mov	ax,es
 21408 00000FCF 48                      	dec	ax
 21409 00000FD0 8EC0                    	mov	es,ax			;point to arena
 21410                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21411                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21412                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21413                                  	; 24/10/2022
 21414 00000FD2 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21415 00000FD9 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21416 00000FE0 07                      	pop	es
 21417                                  
 21418 00000FE1 BBFFFF                  	mov	bx,0FFFFh
 21419 00000FE4 B448                    	mov	ah,48h ; ALLOC
 21420 00000FE6 CD21                    	int	21h
 21421 00000FE8 B448                    	mov	ah,48h ; ALLOC
 21422 00000FEA CD21                    	int	21h			; allocate the rest of the memory
 21423                                  		; DOS - 2+ - ALLOCATE MEMORY
 21424                                  		; BX = number of 16-byte paragraphs desired
 21425 00000FEC A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 21426 00000FEF C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 21427                                  
 21428                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21429                                  ;;;; allocated.
 21430                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21431                                  ;;;; this time) to the top-of-the memory),here we are going to
 21432                                  ;;;; 1). "setblock" from memhi to confbot.
 21433                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21434                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21435                                  
 21436                                  ;memory allocation for sysinit,confbot module.
 21437                                  
 21438 00000FF5 8EC0                    	mov	es,ax
 21439                                  	;mov	bx,[CONFBOT]
 21440                                  	; 24/10/2022
 21441 00000FF7 8B1E[A102]              	mov	bx,[top_of_cdss]
 21442 00000FFB 29C3                    	sub	bx,ax			; confbot - memhi
 21443 00000FFD 4B                      	dec	bx			; make a room for the memory block id.
 21444 00000FFE 4B                      	dec	bx			; make sure!!!.
 21445 00000FFF B44A                    	mov	ah,4Ah ; SETBLOCK
 21446 00001001 CD21                    	int	21h			; this will free (confbot to top of memory)
 21447                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21448                                  		; ES = segment address of block to change
 21449                                  		; BX = new size in paragraphs
 21450 00001003 BBFFFF                  	mov	bx,0FFFFh
 21451 00001006 B448                    	mov	ah,48h ; ALLOC
 21452 00001008 CD21                    	int	21h
 21453 0000100A B448                    	mov	ah,48h ; ALLOC
 21454 0000100C CD21                    	int	21h			; allocate (confbot to top of memory)
 21455                                  		; DOS - 2+ - ALLOCATE MEMORY
 21456                                  		; BX = number of 16-byte paragraphs desired
 21457 0000100E A3[E403]                	mov	[area],ax		; save allocated memory segment.
 21458                                  					; need this to free this area for command.com.
 21459 00001011 8E06[E003]              	mov	es,[memhi]
 21460 00001015 B449                    	mov	ah,49h			; free allocated memory.
 21461 00001017 CD21                    	int	21h			; free (memhi to confbot(=area))
 21462                                  		; DOS - 2+ - FREE MEMORY
 21463                                  		; ES = segment address of area to be freed
 21464                                  endfile_ret:
 21465 00001019 C3                      	retn
 21466                                  
 21467                                  ; End of "EndFile" DOS structure configuration.
 21468                                  
 21469                                  ; ----------------------------------------------------------------------
 21470                                  ; 26/03/2019 - Retro DOS v4.0
 21471                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21472                                  ; ----------------------------------------------------------------------
 21473                                  ; Do_Install_Exec
 21474                                  ;
 21475                                  ; This procedure is used to EXEC a program being loaded via the 
 21476                                  ; "install=" mechanism in config.sys. It does this by setting up
 21477                                  ; the parameters, and then jumping to sysinit_base, which has been
 21478                                  ; setup in low memory. When complete, sysinit_base will jump back
 21479                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21480                                  ; program).
 21481                                  
 21482                                  ;SYSINIT:10CFh:
 21483                                  
 21484                                  do_install_exec:			; now,handles install= command.
 21485                                  
 21486 0000101A 56                      	push	si			; save si for config.sys again.
 21487                                  
 21488                                  ; we are going to call load/exec function.
 21489                                  ; set es:bx to the parameter block here;;;;;;;
 21490                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21491                                  ; after the filename. so parameter starts after that. if next
 21492                                  ; character is a line feed (i.e. 10),then assume that the 0
 21493                                  ; we already encountered used to be a carrage return. in this
 21494                                  ; case,let's set the length to 0 which will be followed by
 21495                                  ; carridge return.
 21496                                  
 21497                                  ; es:si -> command line in config.sys. points to the first non blank
 21498                                  ;character after =.
 21499                                  
 21500 0000101B 06                      	push	es
 21501 0000101C 1E                      	push	ds
 21502 0000101D 07                      	pop	es
 21503 0000101E 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21504 0000101F 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21505                                  
 21506 00001021 31C9                    	xor	cx,cx
 21507 00001023 FC                      	cld
 21508 00001024 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21509 0000102A BF[6E03]                	mov	di,ldexec_parm
 21510                                  installfilename:			; skip the file name
 21511 0000102D AC                      	lodsb				; al = ds:si; si++
 21512 0000102E 3C00                    	cmp	al,0
 21513 00001030 7402                    	je	short got_installparm
 21514 00001032 EBF9                    	jmp	short installfilename
 21515                                  got_installparm:			; copy the parameters to ldexec_parm
 21516 00001034 AC                      	lodsb
 21517 00001035 268805                  	mov	[es:di],al
 21518 00001038 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21519 0000103A 7405                    	je	short done_installparm
 21520 0000103C FEC1                    	inc	cl			; # of char. in the parm.
 21521 0000103E 47                      	inc	di
 21522 0000103F EBF3                    	jmp	short got_installparm
 21523                                  done_installparm:
 21524 00001041 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21525 00001046 80F900                  	cmp	cl,0			; if no parm,then
 21526 00001049 7506                    	jne	short install_seg_set 	; let the parm area
 21527 0000104B 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21528                                  					; starts with cr.
 21529                                  install_seg_set:
 21530 00001051 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21531 00001058 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21532                                  
 21533                                  ;---------------------------------------------------M067----------------
 21534                                  ;
 21535                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21536                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21537                                  ;
 21538                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21539                                  ;
 21540                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21541                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21542                                  ; 	was fixed. 
 21543                                  ;
 21544                                  ; ----------------------------------------------------------------------
 21545                                  
 21546                                  ;;ifdef   MULTI_CONFIG
 21547                                  
 21548                                  ; If there's any environment data in "config_wrkseg", pass to app
 21549                                  
 21550                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21551                                          ;mov     cx,ax
 21552                                          ;cmp     word [cs:config_envlen],0
 21553                                          ;je      short no_envdata2
 21554                                          ;mov     cx,[cs:config_wrkseg]
 21555                                  ;no_envdata2:
 21556                                  ;;endif  ;MULTI_CONFIG
 21557                                  
 21558                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21559                                  	; 24/10/2022
 21560                                  	;mov	[cs:iexec.environ],cx
 21561                                  	; 02/11/2022
 21562 0000105A 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 21563                                  
 21564                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21565 0000105E 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 21566                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21567 00001062 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21568                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21569 00001066 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21570 0000106A E86E00                  	call	sum_up
 21571 0000106D 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 21572 00001071 31C0                    	xor	ax,ax
 21573 00001073 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21574 00001075 BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 21575 00001078 06                      	push	es			; save es,ds for load/exec
 21576 00001079 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21577 0000107A 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21578                                  					; load/exec function and check sum.
 21579                                  
 21580                                  ;----------------------------------------
 21581                                  
 21582                                  ;j.k. this is the returning address from sysinit_base.
 21583                                  
 21584                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21585                                  
 21586                                  sysinitptr:				; returning far address from sysinit_base
 21587 0000107F 5E                      	pop	si			; restore si for config.sys file.
 21588 00001080 06                      	push	es
 21589 00001081 1E                      	push	ds
 21590 00001082 07                      	pop	es
 21591 00001083 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21592 00001084 7306                            jnc     short install_exit_ret
 21593                                  
 21594 00001086 56                      	push	si			; error in loading the file for install=.
 21595 00001087 E8D121                  	call	badload 		; es:si-> path,filename,0.
 21596 0000108A 5E                      	pop	si
 21597                                  
 21598                                  	; 24/10/2022
 21599                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21600                                  	; 11/12/2022
 21601                                  	; ds = cs
 21602 0000108B C3                      	retn
 21603                                  
 21604                                  install_exit_ret:
 21605                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21606                                  
 21607                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21608                                  ;SYSINIT:1142h:
 21609 0000108C B44D                    	mov     ah,4Dh
 21610 0000108E CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21611 00001090 80FC03                  	cmp     ah,3
 21612 00001093 7404                    	jz      short sysinitptr_retn
 21613 00001095 E80916                  	call    error_line
 21614 00001098 F9                      	stc
 21615                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21616 00001099 C3                      	retn		
 21617                                  
 21618                                  ; ----------------------------------------------------------------------
 21619                                  
 21620                                  ;**	ParaRound - Round Up length to paragraph multiple
 21621                                  ;
 21622                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21623                                  ;	by 16 yielding a "length in paragraphs" value.
 21624                                  ;
 21625                                  ;	ENTRY	(ax) = byte length
 21626                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21627                                  ;	USES	ax, flags
 21628                                  
 21629                                  ParaRound:
 21630 0000109A 83C00F                  	add	ax,15
 21631 0000109D D1D8                    	rcr	ax,1
 21632 0000109F D1E8                    	shr	ax,1
 21633 000010A1 D1E8                    	shr	ax,1
 21634 000010A3 D1E8                    	shr	ax,1
 21635 000010A5 C3                      	retn
 21636                                  
 21637                                  ; ----------------------------------------------------------------------
 21638                                  ; sysinit_base module.
 21639                                  ;
 21640                                  ; This module is relocated by the routine EndFile to a location in low
 21641                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21642                                  ; that are being loaded by the "install=" command. After the EXEC call
 21643                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21644                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21645                                  ; If it did, then this module will print an error message and stop the
 21646                                  ; system. Otherwise, it returns control to SYSINIT.
 21647                                  ;
 21648                                  ;in: after relocation,
 21649                                  ;    ax = 4b00h - load and execute the program dos function.
 21650                                  ;    ds = confbot. segment of config.sys file image
 21651                                  ;    es = sysinitseg. segment of sysinit module itself.
 21652                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21653                                  ;    es:bx = pointer to a parameter block for load.
 21654                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 21655                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21656                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21657                                  ;			word boundary moduler form.
 21658                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21659                                  ;
 21660                                  ;note: sysinit should save necessary registers and when the control is back
 21661                                  
 21662                                  	; 24/10/2022
 21663                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21664                                  sysinit_base:				
 21665 000010A6 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21666 000010AB 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21667 000010B0 CD21                    	int	21h			; load/exec dos call.
 21668 000010B2 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21669 000010B7 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21670 000010BC 1F                      	pop	ds			; restore confbot seg
 21671 000010BD 07                      	pop	es			; restore sysinitseg
 21672 000010BE 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21673                                  					; at this time,i don't have to worry about
 21674                                  					; that sysinit module has been broken or not.
 21675 000010C0 E81800                  	call	sum_up			; otherwise,check if it is good.
 21676 000010C3 263906[5603]            	cmp	[es:checksum],ax
 21677 000010C8 740C                    	je	short sysinit_base_end
 21678                                  
 21679                                  ;	memory broken. show "memory allocation error" message and stall.
 21680                                  
 21681 000010CA B409                    	mov	ah,9
 21682 000010CC 0E                      	push	cs
 21683 000010CD 1F                      	pop	ds
 21684 000010CE BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21685 000010D1 CD21                    	int	21h
 21686                                  		; DOS - PRINT STRING
 21687                                  		; DS:DX -> string terminated by "$"
 21688                                  	; 24/10/2022
 21689                                  _stall: 
 21690                                  	; 11/12/2022
 21691 000010D3 F4                      	hlt 
 21692                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21693                                  	;hlt				;use HLT to minimize energy consumption
 21694 000010D4 EBFD                            jmp	short _stall
 21695                                  
 21696                                  sysinit_base_end: 
 21697 000010D6 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21698                                  
 21699                                  ;-------------------------------------
 21700                                  
 21701                                  sum_up:
 21702                                  
 21703                                  ;in:   es - sysinitseg.
 21704                                  ;out:  ax - result
 21705                                  ;
 21706                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21707                                  ;	 sysinit segment,the data area, and the current stack area are not
 21708                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21709                                  ;	 gaurantee to be safe.
 21710                                  ;
 21711                                  ;first sum up confbot seg.
 21712                                  
 21713 000010DB 1E                      	push	ds
 21714                                  	;mov	ax,[es:CONFBOT]
 21715                                  	; 24/10/2022
 21716 000010DC 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21717 000010E0 8ED8                    	mov	ds,ax
 21718 000010E2 31F6                    	xor	si,si
 21719 000010E4 31C0                    	xor	ax,ax
 21720 000010E6 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21721                                  					;whole test better fail.
 21722 000010EB D1E9                    	shr	cx,1			; make it a word count
 21723 000010ED 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21724                                  sum1:
 21725 000010EF 0304                    	add	ax,[si]
 21726 000010F1 46                      	inc	si
 21727 000010F2 46                      	inc	si
 21728 000010F3 E2FA                    	loop	sum1
 21729                                  ;now,sum up sysinit module.
 21730                                  sum_sys_code:
 21731                                  	; 24/10/2022
 21732 000010F5 BEF410                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21733                                  				        ; starting after the stack.  M069
 21734                                  					;  this does not cover the possible stack code!!!
 21735                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21736                                  	; 02/11/2022
 21737                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21738                                  	; 30/12/2022 (BugFix)
 21739                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21740 000010F8 B9[F037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21741 000010FB 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21742 000010FD D1E9                    	shr	cx,1
 21743                                  sum2:
 21744 000010FF 260304                  	add	ax,[es:si]
 21745 00001102 46                      	inc	si
 21746 00001103 46                      	inc	si
 21747 00001104 E2F9                    	loop	sum2
 21748 00001106 1F                      	pop	ds
 21749 00001107 C3                      	retn
 21750                                  
 21751                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21752                                  
 21753                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21754                                  ;SYSINIT:11BDh:
 21755 00001108 0000                    	dw	0
 21756                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21757                                  ;SYSINIT:11BFh:
 21758 0000110A 0000                    	dw	0
 21759                                  
 21760                                  mem_alloc_err_msgx:
 21761                                  
 21762                                         ;include msbio.cl4		; memory allocation error message
 21763                                  
 21764                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21765 0000110C 0D0A                    	db	0Dh,0Ah
 21766 0000110E 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21766 00001117 6C6F636174696F6E20-
 21766 00001120 6572726F722024     
 21767                                  
 21768                                  end_sysinit_base: ; label byte
 21769                                  	; 24/10/2022
 21770                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21771                                  
 21772                                  ; ----------------------------------------------------------------------
 21773                                  ; Set_Buffer
 21774                                  ;
 21775                                  ;function: set buffers in the real memory.				  
 21776                                  ;	   lastly set the memhi,memlo for the next available free address.
 21777                                  ;
 21778                                  ;input:    ds:bx -> buffinfo.
 21779                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21780                                  ;	   singlebuffersize = buffer header size + sector size		  
 21781                                  ;
 21782                                  ;output:   buffers Queue established.	       				   
 21783                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21784                                  ; ----------------------------------------------------------------------
 21785                                  
 21786                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21787                                  	; (SYSINIT:11DCh)
 21788                                  
 21789                                  set_buffer:
 21790 00001127 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21791 00001129 E85500                  	call	GetBufferAddr
 21792 0000112C 7402                    	jz	short set_buff_1
 21793                                  	;mov	dl,1				; buffers in HMA
 21794                                  	; 17/09/2023
 21795 0000112E FEC2                    	inc	dl ; mov dl,1
 21796                                  set_buff_1:
 21797                                  	; 25/10/2022
 21798                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21799 00001130 893F                    	mov	[bx],di
 21800                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21801 00001132 8C4702                  	mov	[bx+2],es
 21802                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21803 00001135 C747040000              	mov	word [bx+4],0
 21804                                  
 21805 0000113A 89F8                    	mov	ax,di
 21806 0000113C 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21807 00001141 57                      	push	di				; remember first buffer
 21808                                  
 21809                                  ;	for each buffer
 21810                                  
 21811                                  nxt_buff:
 21812 00001142 E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21813 00001145 89C7                    	mov	di,ax
 21814 00001147 E2F9                    	loop	nxt_buff
 21815                                  
 21816 00001149 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21817                                  
 21818 0000114E 59                      	pop	cx				; get first buffer
 21819                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21820 0000114F 26890D                  	mov	[es:di],cx
 21821 00001152 87CF                    	xchg	cx,di
 21822                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21823                                  	; 25/10/2022
 21824 00001154 26894D02                	mov	[es:di+2],cx
 21825                                  
 21826 00001158 08D2                    	or	dl,dl				; In HMA ?
 21827 0000115A 7417                    	jz	short set_buff_2		; no
 21828                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21829 0000115C C6470C01                	mov	byte [bx+12],1
 21830 00001160 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21831                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21832 00001164 C7470D0000              	mov	word [bx+13],0
 21833                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21834 00001169 89470F                  	mov	word [bx+15],ax
 21835 0000116C 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21836                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21837 00001170 83E814                  	sub	ax,20
 21838                                  set_buff_2:
 21839 00001173 2E0106[DE03]            	add	[cs:memlo],ax
 21840                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21841 00001178 2E800E[0614]02          	or	byte [cs:setdevmarkflag],2
 21842                                  	;call	round
 21843                                  	;retn
 21844                                  	; 12/12/2022
 21845 0000117E E98C1E                  	jmp	round
 21846                                  
 21847                                  ; ----------------------------------------------------------------------
 21848                                  ; procedure : GetBufferAddr
 21849                                  ;
 21850                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21851                                  ;
 21852                                  ; returns in es:di the buffer adress
 21853                                  ; returns NZ if allocated in HMA
 21854                                  ; ----------------------------------------------------------------------
 21855                                  
 21856                                  	; 25/10/2022 
 21857                                  GetBufferAddr:
 21858 00001181 53                      	push	bx
 21859 00001182 52                      	push	dx
 21860 00001183 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21861 00001187 2EF726[9702]            	mul	word [cs:buffers]
 21862                                  	;add	ax,0Fh
 21863 0000118C 83C00F                  	add	ax,15 
 21864                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21865                                  	;and	ax,~15	; 0FFF0h	; para round
 21866                                  	; 12/12/2022
 21867 0000118F 24F0                    	and	al,~15	; 0F0h
 21868 00001191 89C3                    	mov	bx,ax
 21869 00001193 B8024A                  	mov	ax,4A02h
 21870                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21871 00001196 CD2F                    	int	2Fh
 21872 00001198 83FFFF                  	cmp	di,0FFFFh
 21873 0000119B 7506                    	jne	short got_hma
 21874                                  
 21875                                  	;mov	di,0			; dont xor di,di Z flag needed
 21876                                  	; 05/09/2023
 21877                                  	; zf=1
 21878 0000119D 47                      	inc	di ; 0FFFFh -> 0
 21879                                  	; zf=1
 21880                                  
 21881                                  	;zf=1
 21882                                  	;xor	di,di	; 25/10/2022
 21883                                  	;zf=1
 21884 0000119E 2E8E06[E003]            	mov	es,[cs:memhi]
 21885                                  got_hma:
 21886 000011A3 5A                      	pop	dx
 21887 000011A4 5B                      	pop	bx
 21888 000011A5 C3                      	retn
 21889                                  
 21890                                  ; ----------------------------------------------------------------------
 21891                                  
 21892                                  set_buffer_info:
 21893                                  
 21894                                  ;function: set buf_link,buf_id,buf_sector
 21895                                  ;
 21896                                  ;in: es:di -> buffer header to be set.
 21897                                  ;    ax = di
 21898                                  ;
 21899                                  ;out:
 21900                                  ;    above entries set.
 21901                                  
 21902                                  	; 25/10/2022 
 21903 000011A6 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21904                                  	;pop	word [es:di+buffinfo.buf_prev]
 21905 000011AB 268F4502                	pop	word [es:di+2]
 21906 000011AF 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21907 000011B3 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21908                                  	;mov	[es:di+buffinfo.buf_next],ax
 21909 000011B8 268905                  	mov	[es:di],ax
 21910                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21911 000011BB 26C74504FF00            	mov	word [es:di+4],00FFh
 21912                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21913 000011C1 26C745060000            	mov	word [es:di+6],0
 21914                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21915 000011C7 26C745080000            	mov	word [es:di+8],0
 21916 000011CD C3                      	retn
 21917                                  
 21918                                  ; ======================================================================
 21919                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21920                                  ; ----------------------------------------------------------------------
 21921                                  ; 27/03/2019 - Retro DOS v4.0
 21922                                  
 21923                                  ; ----------------------------------------------------------------------
 21924                                  ; ibmstack initialization routine.
 21925                                  ;
 21926                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21927                                  ;	has been modified. this initialization routine also has to
 21928                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21929                                  ;	should be set to signal that this interrupt handler is the
 21930                                  ;	first handler hooked to this interrupt vector.
 21931                                  ;	we determine this by looking at the instruction pointed by
 21932                                  ;	this vector. if it is iret, then this handler should be the
 21933                                  ;	first one. in our case, only the interrupt vector 77h is the
 21934                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21935                                  ;
 21936                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21937                                  ;	some design changes are needed to the above interrupt sharing
 21938                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21939                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21940                                  ;	interrupts would only be generated on levels 7 and 15.
 21941                                  ;	these assumptions are not true any more. we have to use the firstflag
 21942                                  ;	for every level of interrupt. we will set the firstflag on the following
 21943                                  ;	conditions:
 21944                                  ;
 21945                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21946                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21947                                  ;	 c. else if cs:ip points to an iret, then "first"
 21948                                  ;	 d. else if cs:ip points to dummy, then "first"
 21949                                  ;
 21950                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21951                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21952                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21953                                  ;	the bioses for all of the machines.
 21954                                  ;
 21955                                  ;	system design group requests bios to handle the phantom interrupts.
 21956                                  ;
 21957                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21958                                  ;	produced by the bogus adapter card even without interrupt request is
 21959                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21960                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21961                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21962                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21963                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21964                                  ;	interrupt line.
 21965                                  ;
 21966                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21967                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21968                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21969                                  ;	control. if it is the first, then the following action should be
 21970                                  ;	taken. we don't have to implement skack logic in this case.
 21971                                  ;
 21972                                  ;	to implement this logic, we rather choose a simple method.
 21973                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21974                                  ;	going to hook this interrupt vector. the reason is if the original
 21975                                  ;	vector points to "iret" and do nothing, we don't need
 21976                                  ;	to implement the stack logic for it. this will simplify implementation
 21977                                  ;	while maintaining compatibility with the old version of dos.
 21978                                  ;	this implies that in the main stack code, there might be a stack code
 21979                                  ;	that will never be used, a dead code.
 21980                                  ;
 21981                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21982                                  
 21983                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21984                                  	; (SYSINIT:1287h)
 21985                                  
 21986                                  	; 14/12/2022
 21987                                  stackinit:
 21988 000011CE 50                      	push	ax
 21989 000011CF 1E                      	push	ds
 21990 000011D0 06                      	push	es
 21991 000011D1 53                      	push	bx
 21992 000011D2 51                      	push	cx
 21993 000011D3 52                      	push	dx
 21994 000011D4 57                      	push	di
 21995 000011D5 56                      	push	si
 21996 000011D6 55                      	push	bp
 21997                                  
 21998                                  ;currently es -> stack code area
 21999                                  
 22000                                  	; 12/12/2022
 22001                                  	; ds = cs
 22002 000011D7 A1[8A02]                	mov	ax,[stack_count]
 22003 000011DA 89C1                    	mov	cx,ax  ; *!*!*  
 22004                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22005                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 22006                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 22007 000011DC 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 22008                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 22009 000011E0 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 22010 000011E3 26A3[0600]              	mov	[es:stacksize],ax
 22011                                  	; 12/12/2022
 22012 000011E7 A1[8E02]                	mov	ax,[stack_addr]			; offset
 22013                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22014                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 22015                                  	;mov	ax,[cs:stack_addr]  ; !!
 22016 000011EA 26A3[0800]              	mov	[es:stacks],ax
 22017                                  	; 12/12/2022
 22018 000011EE 89C5                    	mov	bp,ax ; *!*
 22019 000011F0 A1[9002]                	mov	ax,[stack_addr+2]
 22020                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22021                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 22022                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 22023 000011F3 26A3[0A00]              	mov	[es:stacks+2],ax
 22024                                  
 22025                                  ; initialize the data fields with the parameters
 22026                                  
 22027                                  ; "firstentry" will always be at stacks
 22028                                  
 22029                                  	;mov	bp,[es:stacks]			; get offset of stack
 22030                                  	; 12/12/2022
 22031                                  	; bp = [es:stacks] ; *!*
 22032 000011F7 26892E[0C00]            	mov	[es:firstentry],bp
 22033                                  
 22034                                  ; the stacks will always immediately follow the table entries
 22035                                  
 22036 000011FC B80800                  	mov	ax,entrysize ; 8
 22037                                  	;mov	cx,[es:stackcount]
 22038                                  	; 12/12/2022
 22039                                  	; cx = [es:stackcount] ; *!*!*
 22040 000011FF F7E1                    	mul	cx
 22041 00001201 01E8                    	add	ax,bp
 22042 00001203 26A3[0400]              	mov	[es:stackat],ax
 22043 00001207 89C3                    	mov	bx,ax
 22044 00001209 83EB02                  	sub	bx,2
 22045                                  
 22046                                  ; zero the entire stack area to start with
 22047                                  
 22048 0000120C 268B3E[0400]            	mov	di,[es:stackat]
 22049 00001211 26A1[0600]              	mov	ax,[es:stacksize]
 22050 00001215 F7E1                    	mul	cx
 22051 00001217 89C1                    	mov	cx,ax
 22052 00001219 31C0                    	xor	ax,ax
 22053 0000121B 06                      	push	es
 22054 0000121C 1F                      	pop	ds				;ds = relocated stack code seg.
 22055                                  
 22056                                  ;now, ds -> stack code area
 22057                                  
 22058 0000121D 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 22059 00001221 FC                      	cld
 22060 00001222 F3AA                    	rep	stosb
 22061                                  
 22062 00001224 8B0E[0200]              	mov	cx,[stackcount]
 22063                                  
 22064                                  ; loop for "count" times, building a table entry
 22065                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 22066                                  ;  cx = number of entries
 22067                                  ;  es:bp => base of stacks - 2
 22068                                  ;  es:bx => first table entry
 22069                                  
 22070                                  buildloop:
 22071                                  	; 11/12/2022
 22072                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 22073                                  	; 25/10/2022
 22074                                  	;mov	byte [es:bp],free
 22075                                  	; 14/08/2023
 22076 00001228 26884600                	mov	[es:bp],al ; 0 ; free
 22077 0000122C 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 22078                                  	;mov	[es:bp+1],al
 22079 00001230 26894602                	mov	[es:bp+savedsp],ax
 22080                                  	;mov	[es:bp2],ax
 22081 00001234 26894604                	mov	[es:bp+savedss],ax
 22082                                  	;mov	[es:bp+4],ax
 22083 00001238 031E[0600]              	add	bx,[stacksize]
 22084 0000123C 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 22085                                  	;mov	[es:bp+6],bx
 22086 00001240 26892F                  	mov	[es:bx],bp
 22087 00001243 83C508                  	add	bp,entrysize ; 8
 22088                                  
 22089 00001246 E2E0                    	loop	buildloop
 22090                                  
 22091 00001248 83ED08                  	sub	bp,entrysize ; 8
 22092 0000124B 892E[0E00]              	mov	[lastentry],bp
 22093 0000124F 892E[1000]              	mov	[nextentry],bp
 22094                                  
 22095 00001253 1E                      	push	ds
 22096                                  	;mov	ax,0F000h		;look at the model byte
 22097                                  	; 05/09/2023
 22098 00001254 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 22099 00001256 8ED8                    	mov	ds,ax	
 22100 00001258 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 22101 0000125D 1F                      	pop	ds
 22102 0000125E 7504                    	jne	short skip_disablenmis
 22103                                  
 22104 00001260 B007                    	mov	al,07h			; disable convertible nmis
 22105 00001262 E672                    	out	72h,al
 22106                                  
 22107                                  skip_disablenmis:
 22108 00001264 31C0                    	xor	ax,ax
 22109 00001266 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 22110                                  					;ds - relocated stack code segment
 22111 00001268 FA                      	cli
 22112                                  
 22113                                  	;irp	aa,<02,08,09,70>
 22114                                  	;
 22115                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22116                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 22117                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 22118                                  	;mov	dx,offset int&aa	;pass where new handler is
 22119                                  	;call	new_init_loop		;adjust the vector to new handler,
 22120                                  	;				;saving pointer to original owner
 22121                                  	;endm
 22122                                  
 22123                                  stkinit_02:
 22124 00001269 BE0800                  	mov	si,02h*4 ; 8
 22125 0000126C BF[3906]                	mov	di,INT19OLD02
 22126 0000126F BB[1200]                	mov	bx,old02
 22127 00001272 BA[1600]                	mov	dx,int02
 22128 00001275 E84801                  	call	new_init_loop
 22129                                  stkinit_08:
 22130 00001278 BE2000                  	mov	si,08h*4 ; 32
 22131 0000127B BF[3E06]                	mov	di,INT19OLD08
 22132 0000127E BB[3800]                	mov	bx,old08
 22133 00001281 BA[3C00]                	mov	dx,int08
 22134 00001284 E83901                  	call	new_init_loop
 22135                                  stkinit_09:
 22136 00001287 BE2400                  	mov	si,09h*4 ; 36
 22137 0000128A BF[4306]                	mov	di,INT19OLD09
 22138 0000128D BB[4100]                	mov	bx,old09
 22139 00001290 BA[4500]                	mov	dx,int09
 22140 00001293 E82A01                  	call	new_init_loop
 22141                                  stkinit_70:
 22142 00001296 BEC001                  	mov	si,70h*4 ; 448
 22143 00001299 BF[6106]                	mov	di,INT19OLD70
 22144 0000129C BB[4E00]                	mov	bx,old70
 22145 0000129F BA[5200]                	mov	dx,int70
 22146 000012A2 E81B01                  	call	new_init_loop
 22147                                  
 22148                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 22149                                  	;
 22150                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22151                                  	;push	ds			;save relocated stack code segment
 22152                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 22153                                  	;push	ds
 22154                                  	;pop	dx			;dx = segment value
 22155                                  	;	
 22156                                  	;cmp	dx,0
 22157                                  	;jz	int&aa&_first
 22158                                  	;
 22159                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 22160                                  	;jz	int&aa&_first
 22161                                  	;
 22162                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 22163                                  	;jz	int&aa&_not_first
 22164                                  	;
 22165                                  	;cmp	dx,0f000h		;rom bios segment
 22166                                  	;jnz	int&aa&_not_first
 22167                                  	;
 22168                                  	;push	es
 22169                                  	;push	dx
 22170                                  	;mov	dx,0f000h
 22171                                  	;mov	es,dx
 22172                                  	;cmp	bx,word ptr es:0ff01h
 22173                                         	;pop	dx
 22174                                  	;pop	es
 22175                                  	;jz	int&aa&_first
 22176                                  	;
 22177                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 22178                                  	;pop	ds
 22179                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 22180                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 22181                                  	;mov	dx, offset int&aa	;pass where new handler is
 22182                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 22183                                  	;				;pointer to original owner.
 22184                                  	;jmp	short int&aa&_end
 22185                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 22186                                  	;pop	ds
 22187                                  ;int&aa&_end:
 22188                                  	;
 22189                                  	;endm
 22190                                  
 22191                                  stkinit_0A:
 22192 000012A5 BE2800                  	mov	si,0Ah*4 ; 40
 22193                                  	
 22194                                  ; 14/12/2022
 22195                                  %if 0	
 22196                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22197                                  	push	ds
 22198                                  	
 22199                                  	lds	bx,[es:si]
 22200                                  	push	ds
 22201                                  	pop	dx
 22202                                  		
 22203                                  	cmp	dx,0
 22204                                  	je	short int_0A_first
 22205                                  	
 22206                                  	cmp	byte [bx],0CFh
 22207                                  	je	short int_0A_first
 22208                                  	
 22209                                  	cmp	word [bx+6],424Bh
 22210                                  	je	short int_0A_not_first
 22211                                  	
 22212                                  	cmp	dx,0F000h
 22213                                  	jne	short int_0A_not_first
 22214                                  	
 22215                                  	push	es
 22216                                  	push	dx
 22217                                  	mov	dx,0F000h
 22218                                  	mov	es,dx
 22219                                  	cmp	bx,[es:0FF01h]
 22220                                         	pop	dx
 22221                                  	pop	es
 22222                                  	je	short int_0A_first
 22223                                  %Endif
 22224                                  
 22225                                  	; 14/12/2022
 22226                                  	; 25/10/2022
 22227 000012A8 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22228 000012AB 730C                    	jnc	short int_0A_first
 22229                                  	
 22230                                  int_0A_not_first:
 22231                                  	; 14/12/2022
 22232                                  	; 25/10/2022
 22233                                  	;pop	ds
 22234 000012AD BF[4806]                	mov	di,INT19OLD0A
 22235 000012B0 BB[5900]                	mov	bx,old0A
 22236 000012B3 BA[5700]                	mov	dx,int0A
 22237 000012B6 E80701                  	call	new_init_loop
 22238                                  	
 22239                                  	; 14/12/2022	
 22240                                  	;jmp	short int_0A_end
 22241                                  ;int_0A_first:
 22242                                  	; 25/10/2022
 22243                                  	;pop	ds
 22244                                  
 22245                                  	; 14/12/2022
 22246                                  int_0A_first:
 22247                                  int_0A_end:
 22248                                  
 22249                                  stkinit_0B:
 22250 000012B9 BE2C00                  	mov	si,0Bh*4 ; 44
 22251                                  	
 22252                                  	; 14/12/2022
 22253                                  	; 25/10/2022
 22254 000012BC E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22255 000012BF 730C                    	jnc	short int_0B_end ; int_0B_first
 22256                                  
 22257                                  ; 14/12/2022
 22258                                  %if 0	
 22259                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22260                                  	push	ds
 22261                                  	lds	bx,[es:si]
 22262                                  	push	ds
 22263                                  	pop	dx
 22264                                  		
 22265                                  	cmp	dx,0
 22266                                  	je	short int_0B_first
 22267                                  
 22268                                  	cmp	byte [bx],0CFh
 22269                                  	je	short int_0B_first
 22270                                  	
 22271                                  	cmp	word [bx+6],424Bh
 22272                                  	je	short int_0B_not_first
 22273                                  	
 22274                                  	cmp	dx,0F000h
 22275                                  	jne	short int_0B_not_first
 22276                                  
 22277                                  	push	es
 22278                                  	push	dx
 22279                                  	mov	dx,0F000h
 22280                                  	mov	es,dx
 22281                                  	cmp	bx,[es:0FF01h]
 22282                                  	pop	dx
 22283                                  	pop	es
 22284                                  	je	short int_0B_first
 22285                                  %endif
 22286                                  
 22287                                  int_0B_not_first:
 22288                                  	; 14/12/2022
 22289                                  	; 25/10/2022
 22290                                  	;pop	ds
 22291 000012C1 BF[4D06]                	mov	di,INT19OLD0B
 22292 000012C4 BB[7100]                	mov	bx,old0B
 22293 000012C7 BA[6F00]                	mov	dx,int0B
 22294 000012CA E8F300                  	call	new_init_loop
 22295                                  
 22296                                  	; 14/12/2022
 22297                                  	;jmp	short int_0B_end
 22298                                  ;int_0B_first:
 22299                                  	; 25/10/2022
 22300                                  	;pop	ds
 22301                                  
 22302                                  int_0B_end:
 22303                                  	
 22304                                  stkinit_0C:
 22305 000012CD BE3000                  	mov	si,0Ch*4 ; 48
 22306                                  	
 22307                                  	; 14/12/2022
 22308                                  	; 25/10/2022
 22309 000012D0 E8C300                  	call	int_xx_first_check
 22310 000012D3 730C                    	jnc	short int_0C_end ; int_0C_first
 22311                                  
 22312                                  ; 14/12/2022
 22313                                  %if 0	
 22314                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22315                                  	push	ds
 22316                                  	lds	bx,[es:si]
 22317                                  	push	ds
 22318                                  	pop	dx
 22319                                  		
 22320                                  	cmp	dx,0
 22321                                  	je	short int_0C_first
 22322                                  
 22323                                  	cmp	byte [bx],0CFh
 22324                                  	je	short int_0C_first
 22325                                  	
 22326                                  	cmp	word [bx+6],424Bh
 22327                                  	je	short int_0C_not_first
 22328                                  	
 22329                                  	cmp	dx,0F000h
 22330                                  	jne	short int_0C_not_first
 22331                                  
 22332                                  	push	es
 22333                                  	push	dx
 22334                                  	mov	dx,0F000h
 22335                                  	mov	es,dx
 22336                                  	cmp	bx,[es:0FF01h]
 22337                                  	pop	dx
 22338                                  	pop	es
 22339                                  	je	short int_0C_first
 22340                                  %endif
 22341                                  	
 22342                                  int_0C_not_first:
 22343                                  	; 14/12/2022
 22344                                  	; 25/10/2022
 22345                                  	;pop	ds
 22346 000012D5 BF[5206]                	mov	di,INT19OLD0C
 22347 000012D8 BB[8900]                	mov	bx,old0C
 22348 000012DB BA[8700]                	mov	dx,int0C
 22349 000012DE E8DF00                  	call	new_init_loop
 22350                                  
 22351                                  	; 14/12/2022
 22352                                  	;jmp	short int_0C_end
 22353                                  ;int_0C_first:
 22354                                  	; 25/10/2022
 22355                                  	;pop	ds
 22356                                  
 22357                                  int_0C_end:
 22358                                  
 22359                                  stkinit_0D:
 22360 000012E1 BE3400                  	mov	si,0Dh*4 ; 52
 22361                                  
 22362                                  	; 14/12/2022	
 22363                                  	; 25/10/2022
 22364 000012E4 E8AF00                  	call	int_xx_first_check
 22365 000012E7 730C                    	jnc	short int_0D_end ; int_0D_first
 22366                                  
 22367                                  ; 14/12/2022
 22368                                  %if 0	
 22369                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22370                                  	push	ds
 22371                                  	lds	bx,[es:si]
 22372                                  	push	ds
 22373                                  	pop	dx
 22374                                  		
 22375                                  	cmp	dx,0
 22376                                  	je	short int_0D_first
 22377                                  
 22378                                  	cmp	byte [bx],0CFh
 22379                                  	je	short int_0D_first
 22380                                  	
 22381                                  	cmp	word [bx+6],424Bh
 22382                                  	je	short int_0D_not_first
 22383                                  	
 22384                                  	cmp	dx,0F000h
 22385                                  	jne	short int_0D_not_first
 22386                                  
 22387                                  	push	es
 22388                                  	push	dx
 22389                                  	mov	dx,0F000h
 22390                                  	mov	es,dx
 22391                                  	cmp	bx,[es:0FF01h]
 22392                                  	pop	dx
 22393                                  	pop	es
 22394                                  	je	short int_0D_first
 22395                                  %endif
 22396                                  	
 22397                                  int_0D_not_first:
 22398                                  	; 14/12/2022
 22399                                  	; 25/10/2022
 22400                                  	;pop	ds
 22401 000012E9 BF[5706]                	mov	di,INT19OLD0D
 22402 000012EC BB[A100]                	mov	bx,old0D
 22403 000012EF BA[9F00]                	mov	dx,int0D
 22404 000012F2 E8CB00                  	call	new_init_loop
 22405                                  
 22406                                  	; 14/12/2022
 22407                                  	;jmp	short int_0D_end
 22408                                  	; 02/11/2022
 22409                                  ;int_0D_first:
 22410                                  	;pop	ds
 22411                                  
 22412                                  int_0D_end:
 22413                                  
 22414                                  stkinit_0E:
 22415 000012F5 BE3800                  	mov	si,0Eh*4 ; 56
 22416                                  
 22417                                  	; 14/12/2022	
 22418                                  	; 25/10/2022
 22419 000012F8 E89B00                  	call	int_xx_first_check
 22420 000012FB 730C                    	jnc	short int_0E_end ; int_0E_first
 22421                                  
 22422                                  ; 14/12/2022
 22423                                  %if 0	
 22424                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22425                                  	push	ds
 22426                                  	lds	bx,[es:si]
 22427                                  	push	ds
 22428                                  	pop	dx
 22429                                  		
 22430                                  	cmp	dx,0
 22431                                  	je	short int_0E_first
 22432                                  
 22433                                  	cmp	byte [bx],0CFh
 22434                                  	je	short int_0E_first
 22435                                  	
 22436                                  	cmp	word [bx+6],424Bh
 22437                                  	je	short int_0E_not_first
 22438                                  	
 22439                                  	cmp	dx,0F000h
 22440                                  	jne	short int_0E_not_first
 22441                                  
 22442                                  	push	es
 22443                                  	push	dx
 22444                                  	mov	dx,0F000h
 22445                                  	mov	es,dx
 22446                                  	cmp	bx,[es:0FF01h]
 22447                                  	pop	dx
 22448                                  	pop	es
 22449                                  	je	short int_0E_first
 22450                                  %endif
 22451                                  	
 22452                                  int_0E_not_first:
 22453                                  	; 14/12/2022
 22454                                  	; 25/10/2022
 22455                                  	;pop	ds
 22456 000012FD BF[5C06]                	mov	di,INT19OLD0E
 22457 00001300 BB[B900]                	mov	bx,old0E
 22458 00001303 BA[B700]                	mov	dx,int0E
 22459 00001306 E8B700                  	call	new_init_loop
 22460                                  
 22461                                  	; 14/12/2022
 22462                                  	;jmp	short int_0E_end
 22463                                  ;int_0E_first:
 22464                                  	; 25/10/2022
 22465                                  	;pop	ds	
 22466                                  
 22467                                  int_0E_end:
 22468                                  
 22469                                  stkinit_72:
 22470 00001309 BEC801                  	mov	si,72h*4 ; 456
 22471                                  	
 22472                                  	; 14/12/2022
 22473                                  	; 25/10/2022
 22474 0000130C E88700                  	call	int_xx_first_check
 22475 0000130F 730C                    	jnc	short int_72_end ; int_72_first
 22476                                  
 22477                                  ; 14/12/2022
 22478                                  %if 0	
 22479                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22480                                  	push	ds
 22481                                  	lds	bx,[es:si]
 22482                                  	push	ds
 22483                                  	pop	dx
 22484                                  		
 22485                                  	cmp	dx,0
 22486                                  	je	short int_72_first
 22487                                  
 22488                                  	cmp	byte [bx],0CFh
 22489                                  	je	short int_72_first
 22490                                  	
 22491                                  	cmp	word [bx+6],424Bh
 22492                                  	je	short int_72_not_first
 22493                                  	
 22494                                  	cmp	dx,0F000h
 22495                                  	jne	short int_72_not_first
 22496                                  
 22497                                  	push	es
 22498                                  	push	dx
 22499                                  	mov	dx,0F000h
 22500                                  	mov	es,dx
 22501                                  	cmp	bx,[es:0FF01h]
 22502                                  	pop	dx
 22503                                  	pop	es
 22504                                  	je	short int_72_first
 22505                                  %endif
 22506                                  	
 22507                                  int_72_not_first:
 22508                                  	; 14/12/2022
 22509                                  	; 25/10/2022
 22510                                  	;pop	ds
 22511 00001311 BF[6606]                	mov	di,INT19OLD72
 22512 00001314 BB[D100]                	mov	bx,old72
 22513 00001317 BA[CF00]                	mov	dx,int72
 22514 0000131A E8A300                  	call	new_init_loop
 22515                                  
 22516                                  	; 14/12/2022
 22517                                  	;jmp	short int_72_end
 22518                                  ;int_72_first:
 22519                                  	; 25/10/2022
 22520                                  	;pop	ds
 22521                                  
 22522                                  int_72_end:
 22523                                  
 22524                                  stkinit_73:
 22525 0000131D BECC01                  	mov	si,73h*4 ; 460
 22526                                  	
 22527                                  	; 14/12/2022
 22528                                  	; 25/10/2022
 22529 00001320 E87300                  	call	int_xx_first_check
 22530 00001323 730C                    	jnc	short int_73_end ; int_73_first
 22531                                  
 22532                                  ; 14/12/2022
 22533                                  %if 0	
 22534                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22535                                  	push	ds
 22536                                  	lds	bx,[es:si]
 22537                                  	push	ds
 22538                                  	pop	dx
 22539                                  		
 22540                                  	cmp	dx,0
 22541                                  	je	short int_73_first
 22542                                  
 22543                                  	cmp	byte [bx],0CFh
 22544                                  	je	short int_73_first
 22545                                  	
 22546                                  	cmp	word [bx+6],424Bh
 22547                                  	je	short int_73_not_first
 22548                                  	
 22549                                  	cmp	dx,0F000h
 22550                                  	jne	short int_73_not_first
 22551                                  
 22552                                  	push	es
 22553                                  	push	dx
 22554                                  	mov	dx,0F000h
 22555                                  	mov	es,dx
 22556                                  	cmp	bx,[es:0FF01h]
 22557                                  	pop	dx
 22558                                  	pop	es
 22559                                  	je	short int_73_first
 22560                                  %endif	
 22561                                  	
 22562                                  int_73_not_first:
 22563                                  	; 14/12/2022
 22564                                  	; 25/10/2022
 22565                                  	;pop	ds
 22566 00001325 BF[6B06]                	mov	di,INT19OLD73
 22567 00001328 BB[E900]                	mov	bx,old73
 22568 0000132B BA[E700]                	mov	dx,int73
 22569 0000132E E88F00                  	call	new_init_loop
 22570                                  
 22571                                  	; 14/12/2022
 22572                                  	;jmp	short int_73_end
 22573                                  ;int_73_first:
 22574                                  	; 25/10/2022
 22575                                  	;pop	ds
 22576                                  
 22577                                  int_73_end:
 22578                                  
 22579                                  stkinit_74:
 22580 00001331 BED001                  	mov	si,74h*4 ; 464
 22581                                  	
 22582                                  	; 14/12/2022
 22583                                  	; 25/10/2022
 22584 00001334 E85F00                  	call	int_xx_first_check
 22585 00001337 730C                    	jnc	short int_74_end ; int_74_first
 22586                                  
 22587                                  ; 14/12/2022
 22588                                  %if 0		
 22589                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22590                                  	push	ds
 22591                                  	lds	bx,[es:si]
 22592                                  	push	ds
 22593                                  	pop	dx
 22594                                  		
 22595                                  	cmp	dx,0
 22596                                  	je	short int_74_first
 22597                                  
 22598                                  	cmp	byte [bx],0CFh
 22599                                  	je	short int_74_first
 22600                                  	
 22601                                  	cmp	word [bx+6],424Bh
 22602                                  	je	short int_74_not_first
 22603                                  	
 22604                                  	cmp	dx,0F000h
 22605                                  	jne	short int_74_not_first
 22606                                  
 22607                                  	push	es
 22608                                  	push	dx
 22609                                  	mov	dx,0F000h
 22610                                  	mov	es,dx
 22611                                  	cmp	bx,[es:0FF01h]
 22612                                  	pop	dx
 22613                                  	pop	es
 22614                                  	je	short int_74_first
 22615                                  %endif
 22616                                  
 22617                                  int_74_not_first:
 22618                                  	; 14/12/2022
 22619                                  	; 25/10/2022
 22620                                  	;pop	ds
 22621 00001339 BF[7006]                	mov	di,INT19OLD74
 22622 0000133C BB[0101]                	mov	bx,old74
 22623 0000133F BA[FF00]                	mov	dx,int74
 22624 00001342 E87B00                  	call	new_init_loop
 22625                                  	
 22626                                  	; 14/12/2022
 22627                                  	;jmp	short int_74_end
 22628                                  ;int_74_first:
 22629                                  	; 25/10/2022
 22630                                  	;pop	ds
 22631                                  
 22632                                  int_74_end:
 22633                                  
 22634                                  stkinit_76:
 22635 00001345 BED801                  	mov	si,76h*4 ; 472
 22636                                  	
 22637                                  	; 14/12/2022
 22638                                  	; 25/10/2022
 22639 00001348 E84B00                  	call	int_xx_first_check
 22640 0000134B 730E                    	jnc	short int_76_end ; int_76_first
 22641                                  
 22642                                  ; 14/12/2022
 22643                                  %if 0	
 22644                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22645                                  	push	ds
 22646                                  	lds	bx,[es:si]
 22647                                  	push	ds
 22648                                  	pop	dx
 22649                                  		
 22650                                  	cmp	dx,0
 22651                                  	je	short int_76_first
 22652                                  
 22653                                  	cmp	byte [bx],0CFh
 22654                                  	je	short int_76_first
 22655                                  	
 22656                                  	cmp	word [bx+6],424Bh
 22657                                  	je	short int_76_not_first
 22658                                  	
 22659                                  	cmp	dx,0F000h
 22660                                  	jne	short int_76_not_first
 22661                                  
 22662                                  	push	es
 22663                                  	push	dx
 22664                                  	mov	dx,0F000h
 22665                                  	mov	es,dx
 22666                                  	cmp	bx,[es:0FF01h]
 22667                                  	pop	dx
 22668                                  	pop	es
 22669                                  	je	short int_76_first
 22670                                  %endif
 22671                                  	
 22672                                  int_76_not_first:
 22673                                  	; 14/12/2022
 22674                                  	; 25/10/2022
 22675                                  	;pop	ds
 22676 0000134D BF[7506]                	mov	di,INT19OLD76
 22677 00001350 BB[1901]                	mov	bx,old76
 22678 00001353 BA[1701]                	mov	dx,int76
 22679 00001356 E86700                  	call	new_init_loop
 22680                                  
 22681                                  	; 14/12/2022
 22682 00001359 EB00                    	jmp	short int_76_end
 22683                                  ;int_76_first:
 22684                                  	; 25/10/2022
 22685                                  	;pop	ds
 22686                                  
 22687                                  int_76_end:
 22688                                  
 22689                                  stkinit_77:
 22690 0000135B BEDC01                  	mov	si,77h*4 ; 476
 22691                                  	
 22692                                  	; 14/12/2022
 22693                                  	; 25/10/2022
 22694 0000135E E83500                  	call	int_xx_first_check
 22695 00001361 730C                    	jnc	short int_77_end ; int_77_first
 22696                                  
 22697                                  ; 14/12/2022
 22698                                  %if 0	
 22699                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22700                                  	push	ds
 22701                                  	lds	bx,[es:si]
 22702                                  	push	ds
 22703                                  	pop	dx
 22704                                  		
 22705                                  	cmp	dx,0
 22706                                  	je	short int_77_first
 22707                                  
 22708                                  	cmp	byte [bx],0CFh
 22709                                  	je	short int_77_first
 22710                                  	
 22711                                  	cmp	word [bx+6],424Bh
 22712                                  	je	short int_77_not_first
 22713                                  	
 22714                                  	cmp	dx,0F000h
 22715                                  	jne	short int_77_not_first
 22716                                  
 22717                                  	push	es
 22718                                  	push	dx
 22719                                  	mov	dx,0F000h
 22720                                  	mov	es,dx
 22721                                  	cmp	bx,[es:0FF01h]
 22722                                  	pop	dx
 22723                                  	pop	es
 22724                                  	je	short int_77_first
 22725                                  %endif
 22726                                  	
 22727                                  int_77_not_first:
 22728                                  	; 14/12/2022
 22729                                  	; 25/10/2022
 22730                                  	;pop	ds
 22731 00001363 BF[7A06]                	mov	di,INT19OLD77
 22732 00001366 BB[3101]                	mov	bx,old77
 22733 00001369 BA[2F01]                	mov	dx,int77
 22734 0000136C E85100                  	call	new_init_loop
 22735                                  
 22736                                  	; 14/12/2022
 22737                                  	;jmp	short int_77_end
 22738                                  ;int_77_first:
 22739                                  	; 25/10/2022
 22740                                  	;pop	ds
 22741                                  
 22742                                  int_77_end:
 22743 0000136F 1E                      	push	ds
 22744 00001370 B800F0                  	mov	ax,0F000h		; look at the model byte
 22745 00001373 8ED8                    	mov	ds,ax
 22746 00001375 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22747 0000137A 1F                      	pop	ds
 22748 0000137B 7504                    	jne	short skip_enablenmis
 22749                                  
 22750 0000137D B027                    	mov	al,27h			; enable convertible nmis
 22751 0000137F E672                    	out	72h,al
 22752                                  
 22753                                  ; 25/10/2022
 22754                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22755                                  
 22756                                  skip_enablenmis:
 22757 00001381 FB                      	sti
 22758                                  	;;mov	ax,Bios_Data ; 70h
 22759                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22760                                  	; 21/10/2022
 22761 00001382 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22762 00001385 8ED8                    	mov	ds,ax
 22763                                  
 22764                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22765                                  
 22766 00001387 C606[3706]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22767                                  					; initialization is complete
 22768                                  
 22769 0000138C 5D                      	pop	bp			; restore all
 22770 0000138D 5E                      	pop	si
 22771 0000138E 5F                      	pop	di
 22772 0000138F 5A                      	pop	dx
 22773 00001390 59                      	pop	cx
 22774 00001391 5B                      	pop	bx
 22775 00001392 07                      	pop	es
 22776 00001393 1F                      	pop	ds
 22777 00001394 58                      	pop	ax
 22778 00001395 C3                      	retn
 22779                                  
 22780                                  ; 14/12/2022
 22781                                  ; ----------------------------------------------------------------------
 22782                                  
 22783                                  	; 14/12/2022
 22784                                  	; 25/10/2022
 22785                                  ;%if 0
 22786                                  	; 27/03/2019 - Retro DOS v4.0
 22787                                  int_xx_first_check:
 22788 00001396 1E                      	push	ds
 22789 00001397 26C51C                  	lds	bx,[es:si]
 22790 0000139A 1E                      	push	ds
 22791 0000139B 5A                      	pop	dx
 22792                                  		
 22793                                  	;cmp	dx,0
 22794                                  	;je	short int_xx_first
 22795                                  	; 05/09/2023
 22796 0000139C 21D2                    	and	dx,dx
 22797 0000139E 741E                    	jz	short int_xx_first
 22798                                  
 22799 000013A0 803FCF                  	cmp	byte [bx],0CFh
 22800 000013A3 7419                    	je	short int_xx_first
 22801                                  	
 22802 000013A5 817F064B42              	cmp	word [bx+6],424Bh
 22803 000013AA 7411                    	je	short int_xx_not_first
 22804                                  	
 22805 000013AC 81FA00F0                	cmp	dx,0F000h
 22806 000013B0 750B                    	jne	short int_xx_not_first
 22807                                  
 22808 000013B2 06                      	push	es
 22809                                  	;push	dx
 22810                                  	;mov	dx,0F000h
 22811 000013B3 8EC2                    	mov	es,dx
 22812 000013B5 263B1E01FF              	cmp	bx,[es:0FF01h]
 22813                                        	;pop	dx
 22814 000013BA 07                      	pop	es
 22815 000013BB 7401                    	je	short int_xx_first
 22816                                  
 22817                                  int_xx_not_first:
 22818 000013BD F9                      	stc
 22819                                  int_xx_first:
 22820 000013BE 1F                      	pop	ds
 22821 000013BF C3                      	retn
 22822                                  
 22823                                  ;%endif
 22824                                  
 22825                                  ; ----------------------------------------------------------------------
 22826                                  ; 27/03/2019 - Retro DOS v4.0
 22827                                  
 22828                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22829                                  ; (SYSINIT:1610h)
 22830                                  
 22831                                  new_init_loop:
 22832                                  
 22833                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22834                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22835                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22836                                  ;	di=offset value of int19old&aa variable in bios.
 22837                                  ;	es=zero, segid of vector table
 22838                                  ;	ds=relocated stack code segment
 22839                                  
 22840 000013C0 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22841 000013C3 8907                    	mov	[bx],ax			; to original owner in ds
 22842 000013C5 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22843 000013C9 894702                  	mov	[bx+2],ax		; to original owner in ds
 22844                                  
 22845 000013CC 1E                      	push	ds
 22846                                  	;;mov	ax,Bios_Data ; 70h
 22847                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22848                                  	; 21/10/2022
 22849 000013CD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22850 000013D0 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22851 000013D2 268B04                  	mov	ax,[es:si]		;int 19 handler
 22852 000013D5 8905                    	mov	[di],ax
 22853 000013D7 268B4402                	mov	ax,[es:si+2]
 22854 000013DB 894502                  	mov	[di+2],ax
 22855 000013DE 1F                      	pop	ds
 22856                                  
 22857 000013DF 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22858 000013E2 268C5C02                	mov	[es:si+2],ds
 22859 000013E6 C3                      	retn
 22860                                  
 22861                                  ; End of STACK initialization routine
 22862                                  ; ----------------------------------------------------------------------
 22863                                  
 22864                                  ; ----------------------------------------------------------------------
 22865                                  ;set the devmark for mem command.
 22866                                  ;in: [memhi] - the address to place devmark
 22867                                  ;    [memlo] = 0
 22868                                  ;    al = id for devmark_id
 22869                                  ;out: devmark established.
 22870                                  ;     the address saved in cs:[devmark_addr]
 22871                                  ;     [memhi] increase by 1.
 22872                                  ; ----------------------------------------------------------------------
 22873                                  
 22874                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22875                                  ; (SYSINIT:1637h)
 22876                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22877                                  ; (SYSINIT:176Ch)
 22878                                  
 22879                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22880                                  
 22881                                  setdevmark:
 22882                                  
 22883                                  	; 04/09/2023
 22884                                  	;push	es
 22885                                  	;push	cx
 22886                                  
 22887 000013E7 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22888 000013EC 2E890E[0414]            	mov	[cs:devmark_addr],cx
 22889 000013F1 8EC1                    	mov	es,cx
 22890                                  	; 25/10/2022
 22891                                  	;mov	[es:devmark.id],al
 22892 000013F3 26A20000                	mov	[es:0],al
 22893 000013F7 41                      	inc	cx
 22894                                  	;mov	[es:devmark.seg],cx
 22895 000013F8 26890E0100              	mov	[es:1],cx
 22896                                  
 22897                                  	; 04/09/2023
 22898                                  	;pop	cx
 22899                                  	;pop	es
 22900                                  	
 22901 000013FD 2EFF06[E003]            	inc	word [cs:memhi]
 22902 00001402 C3                      	retn
 22903                                  
 22904                                  ; ----------------------------------------------------------------------
 22905                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22906                                  ; ----------------------------------------------------------------------
 22907                                  ; 27/03/2019 - Retro DOS v4.0
 22908                                  
 22909                                  ;MULTI_CONFIG	equ 1
 22910                                  
 22911                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22912                                                                          ; allocation strategy call
 22913                                  
 22914                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22915                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22916                                  
 22917                                  default_filenum equ 8
 22918                                  
 22919                                  ;stacksw	equ true		; include switchable hardware stacks
 22920                                  
 22921                                  ; external variable defined in ibmbio module for multi-track
 22922                                  
 22923                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22924                                  					; it on after handling config.sys file as a
 22925                                  					; default value,if multrk_flag = multrk_off1.
 22926                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22927                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22928                                  
 22929                                  ; if stacksw
 22930                                  
 22931                                  ; internal stack parameters
 22932                                  
 22933                                  ;entrysize	equ 8
 22934                                  
 22935                                  ;mincount	equ 8
 22936                                  ;defaultcount	equ 9
 22937                                  ;maxcount	equ 64
 22938                                  
 22939                                  ;minsize 	equ 32
 22940                                  ;defaultsize	equ 128
 22941                                  ;maxsize 	equ 512
 22942                                  
 22943                                  DOS_FLAG_OFFSET	equ 86h
 22944                                  
 22945                                  ;ifdef MULTI_CONFIG
 22946                                  ;
 22947                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22948                                  ;   may be loaded as a dword ptr
 22949                                  
 22950                                  ; 25/10/2022
 22951                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22952                                  ;               			;  a scratch env, this is its length
 22953                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22954                                  ;                   			;  segment of work area
 22955                                  ;
 22956                                  ;config_cmd:	db  0  			; current config cmd
 22957                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22958                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22959                                  
 22960                                  ;endif ; MULTI_CONFIG
 22961                                  
 22962 00001403 00                      multdeviceflag:	db  0
 22963                                  
 22964 00001404 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22965                                  
 22966 00001406 00                      setdevmarkflag: db  0			;flag used for devmark
 22967                                  
 22968                                  ; 12/12/2022
 22969                                  ;driver_units:	db  0			;total unitcount for driver
 22970                                  
 22971                                  ; 12/12/2022
 22972                                  ;ems_stub_installed:
 22973                                  ;		db  0
 22974                                  
 22975                                  ; 12/12/2022	
 22976                                  ;align 2
 22977                                  
 22978                                  badparm_ptr:	; label	dword
 22979 00001407 0000                    badparm_off:	dw  0
 22980 00001409 0000                    badparm_seg:	dw  0
 22981                                  
 22982                                  ;******************************************************************************
 22983                                  ;take care of config.sys file.
 22984                                  ;system parser data and code.
 22985                                  ;******************************************************************************
 22986                                  
 22987                                  ;*******************************************************************
 22988                                  ; parser options set for msbio sysconf module
 22989                                  ;*******************************************************************
 22990                                  ;
 22991                                  ;**** default assemble swiches definition **************************
 22992                                  
 22993                                  ;farsw	equ 0		; near call expected
 22994                                  ;datesw	equ 0		; check date format
 22995                                  ;timesw	equ 0		; check time format
 22996                                  ;filesw	equ 1		; check file specification
 22997                                  ;capsw	equ 0		; perform caps if specified
 22998                                  ;cmpxsw	equ 0		; check complex list
 22999                                  ;numsw	equ 1		; check numeric value
 23000                                  ;keysw	equ 0		; support keywords
 23001                                  ;swsw	equ 1		; support switches
 23002                                  ;val1sw	equ 1		; support value definition 1
 23003                                  ;val2sw	equ 0		; support value definition 2
 23004                                  ;val3sw	equ 1		; support value definition 3
 23005                                  ;drvsw	equ 1		; support drive only format
 23006                                  ;qussw	equ 0		; support quoted string format
 23007                                  
 23008                                  ; psdata_seg equ cs
 23009                                  
 23010                                  	;.xlist
 23011                                  	;include parse.asm		;together with psdata.inc
 23012                                  	;.list
 23013                                  
 23014                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 23015                                  ; ======================================================================
 23016                                  ; 27/03/2019 - Retro DOS v4.0
 23017                                  
 23018                                  ; 30/03/2019
 23019                                  ; VERSION.INC (MSDOS 6.0) 
 23020                                  ; Set DBCS Blank constant
 23021                                  
 23022                                  ; ifndef DBCS
 23023                                  DB_SPACE EQU 2020h
 23024                                  DB_SP_HI EQU 20h
 23025                                  DB_SP_LO EQU 20h
 23026                                  ; else
 23027                                  
 23028                                  ;*******************************************************************
 23029                                  ; Parser include file
 23030                                  ;*******************************************************************
 23031                                  
 23032                                  ;**** Equation field
 23033                                  ;-------- Character code definition
 23034                                  
 23035                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 23036                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 23037                                  _$P_Period	   equ	"."             ;AN020;
 23038                                  _$P_Slash	   equ	"/"             ;AN020;
 23039                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 23040                                  _$P_Comma	   equ	","             ;AN000;
 23041                                  _$P_Switch	   equ	"/"             ;AN000;
 23042                                  _$P_Keyword	   equ	"="             ;AN000;
 23043                                  _$P_Colon	   equ	":"             ;AN000;
 23044                                  _$P_Plus 	   equ	"+"             ;AN000;
 23045                                  _$P_Minus	   equ	"-"             ;AN000;
 23046                                  _$P_Rparen	   equ	")"             ;AN000;
 23047                                  _$P_Lparen	   equ	"("             ;AN000;
 23048                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 23049                                  _$P_DQuote	   equ	'"'             ;AN000;
 23050                                  _$P_NULL 	   equ	0		;AN000;
 23051                                  _$P_TAB		   equ	9		;AN000;
 23052                                  _$P_CR		   equ	0Dh		;AN000;
 23053                                  _$P_LF		   equ	0Ah		;AN000;
 23054                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 23055                                  
 23056                                  ;-------- Masks
 23057                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 23058                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 23059                                  
 23060                                  ;-------- DOS function call related equs
 23061                                  
 23062                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 23063                                  					; by this call, following information
 23064                                  struc _$P_CDI	
 23065 00000000 ????                     .DateF: resw 1
 23066 00000002 ??????????               .Money: resb 5
 23067 00000007 ????                     .1000:	 resb 2
 23068 00000009 ????                     .Dec:	 resb 2
 23069 0000000B ????                     .DateS: resb 2
 23070 0000000D ????                     .TimeS: resb 2
 23071 0000000F ??                          	 resb 1
 23072 00000010 ??                      	 resb 1
 23073 00000011 ??                       .TimeF: resb 1	 
 23074 00000012 ????????                	 resw 2
 23075 00000016 ????                    	 resb 2
 23076 00000018 <res Ah>                	 resw 5
 23077                                   .size:
 23078                                  endstruc
 23079                                  
 23080                                  _$P_Date_MDY	   equ	0		;AN000;
 23081                                  _$P_Date_DMY	   equ	1		;AN000;
 23082                                  _$P_Date_YMD	   equ	2		;AN000;
 23083                                  ;-------------
 23084                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 23085                                  					;AN000; DS:SI will points to DBCS EV
 23086                                  ;-------------
 23087                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 23088                                  					;AN000; following parameters are set
 23089                                  					;AN000; to get casemap table.
 23090                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 23091                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 23092                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 23093                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 23094                                  					; By this call following information
 23095                                  					; is returned.
 23096                                  struc _$P_DOS_TBL
 23097 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 23098 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 23099 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 23100                                  endstruc
 23101                                  
 23102                                  ; ----------------------------------------------------------------------------
 23103                                  ; PARMS 	LABEL	BYTE
 23104                                  ;		DW	PARMSX
 23105                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 23106                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23107                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 23108                                  ;					; TYPICAL ARE ";", "="
 23109                                  ;					; "," & WHITESPACE ALWAYS
 23110                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23111                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 23112                                  ; ----------------------------------------------------------------------------
 23113                                  
 23114                                  ;-------------------------------- PARMS block structure
 23115                                  struc _$P_PARMS_Blk
 23116 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 23117 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 23118 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 23119                                  endstruc
 23120                                  
 23121                                  _$P_Len_PARMS	   equ	4		;AN000;
 23122                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 23123                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 23124                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 23125                                  
 23126                                  ; ----------------------------------------------------------------------------
 23127                                  ; PARMSX	LABEL	BYTE
 23128                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 23129                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 23130                                  ;		:			; REPEATS maxp-1 TIMES
 23131                                  ;		DB	maxs		; # OF SWITCHES
 23132                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 23133                                  ;		:			; REPEATS maxs-1 TIMES
 23134                                  ;		DB	maxk		; # OF KEYWORD
 23135                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 23136                                  ;		:			; REPEATS maxk-1 TIMES
 23137                                  ; ----------------------------------------------------------------------------
 23138                                  
 23139                                  ;-------------------------------- PARMSX block structure
 23140                                  struc _$P_PARMSX_Blk		;AN000;
 23141 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 23142 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 23143 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 23144                                  endstruc
 23145                                  
 23146                                  ; ----------------------------------------------------------------------------
 23147                                  ; << Control field definition  >>
 23148                                  ;
 23149                                  ;
 23150                                  ;CONTROL   LABEL   BYTE
 23151                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 23152                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 23153                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 23154                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 23155                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 23156                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 23157                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 23158                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 23159                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 23160                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 23161                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 23162                                  ;				   ; 0002H=REPEATS ALLOWED
 23163                                  ;				   ; 0001H=OPTIONAL
 23164                                  ;	   DW	   FUNCTION_FLAGS
 23165                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 23166                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 23167                                  ;				   ; 0010H=REMOVE ":" AT END
 23168                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 23169                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 23170                                  ;	   DW	   VALUES	   ; VALUE LISTS
 23171                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 23172                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 23173                                  ;	   :
 23174                                  ;
 23175                                  ;Note:
 23176                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 23177                                  ;      DATE bit simalteniously.
 23178                                  ;
 23179                                  ;      The parser examins each bit along with the following priority.
 23180                                  ;
 23181                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 23182                                  ;      FILE SPEC -> SIMPLE STRING.
 23183                                  ;
 23184                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 23185                                  ;      in the result buffer is capitalized.
 23186                                  ;
 23187                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 23188                                  ;
 23189                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 23190                                  ;      switch, for example, '/A', then STRING points to;
 23191                                  ;
 23192                                  ;			DB    1 	; number of following synonyms
 23193                                  ;			DB   '/A',0
 23194                                  ;
 23195                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 23196                                  ;
 23197                                  ;			DB    1 	; number of following synonyms
 23198                                  ;			DB   'CODEPAGE=',0
 23199                                  ;
 23200                                  ;    - "..." must consist of upper case characters only because the parser
 23201                                  ;      performs pattern matching after converting input to upper case (by
 23202                                  ;      using the current country upper case table)
 23203                                  ;
 23204                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 23205                                  ;      example /A and /B, the format will be;
 23206                                  ;
 23207                                  ;			DB    2 	; number of following synonyms
 23208                                  ;			DB    '/A',0
 23209                                  ;			DB    '/B',0
 23210                                  ; ----------------------------------------------------------------------------
 23211                                  
 23212                                  ;**** Match_Flags
 23213                                  
 23214                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 23215                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 23216                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 23217                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 23218                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 23219                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 23220                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 23221                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 23222                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 23223                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 23224                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 23225                                  _$P_Optional	   equ	0001h		;AN000; Optional
 23226                                  
 23227                                  ;**** Function flags
 23228                                  
 23229                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 23230                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 23231                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 23232                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 23233                                  
 23234                                  ;-------------------------------- Control block structure
 23235                                  struc _$P_Control_Blk
 23236 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 23237 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 23238 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 23239 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 23240 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 23241 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 23242                                  endstruc
 23243                                  
 23244                                  ; ----------------------------------------------------------------------------
 23245                                  ; << Value List Definition >>
 23246                                  ;
 23247                                  ;VALUES 	LABEL	BYTE
 23248                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 23249                                  ;	     +-
 23250                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 23251                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 23252                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 23253                                  ;	     |	:
 23254                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 23255                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 23256                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 23257                                  ;	     |	:
 23258                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 23259                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 23260                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 23261                                  ;	     +-	:
 23262                                  ;
 23263                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 23264                                  ;
 23265                                  ;Note:
 23266                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 23267                                  ;      when no choice lists are provided.
 23268                                  ;
 23269                                  ;    - STRING must consist of upper case characters only because the parser
 23270                                  ;      performs pattern matching after converting input to upper case (by
 23271                                  ;      using the current country upper case table)
 23272                                  ; ----------------------------------------------------------------------------
 23273                                  
 23274                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 23275                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 23276                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 23277                                  _$P_nval_String	   equ	3		;AN000; string list ID
 23278                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 23279                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 23280                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 23281                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 23282                                  
 23283                                  struc _$P_Val_List
 23284 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 23285 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 23286 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 23287 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 23288 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 23289                                  endstruc
 23290                                  
 23291                                  ; ----------------------------------------------------------------------------
 23292                                  ; << Result Buffer Definition  >>
 23293                                  ;
 23294                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 23295                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 23296                                  ;						;	1=NUMBER, 2=LIST INDEX,
 23297                                  ;						;	3=STRING, 4=COMPLEX,
 23298                                  ;						;	5=FILESPEC, 6=DRIVE
 23299                                  ;						;	7=DATE, 8=TIME
 23300                                  ;						;	9=QUOTED STRING
 23301                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 23302                                  ;
 23303                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 23304                                  ;
 23305                                  ;            +-
 23306                                  ;	    | DD	n			; VALUE IF NUMBER
 23307                                  ;	    | or
 23308                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 23309                                  ;	    |					; (ES presents Segment address)
 23310                                  ;	    | or
 23311                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 23312                                  ;	    | or
 23313                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 23314                                  ;	    | or
 23315                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 23316                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 23317                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 23318                                  ;	    | or
 23319                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 23320                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 23321                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 23322                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 23323                                  ;	    +-
 23324                                  ;
 23325                                  ;
 23326                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 23327                                  ;      list.
 23328                                  ;
 23329                                  ;      YEAR: If the input value for the year is less than 100, parser
 23330                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 23331                                  ;	     the year value, he returns 1987.
 23332                                  ; ----------------------------------------------------------------------------
 23333                                  
 23334                                  ;-------------------------------- Result block structure
 23335                                  struc _$P_Result_Blk
 23336 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 23337 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 23338 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 23339 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 23340                                  endstruc
 23341                                  
 23342                                  ;--------------------------------
 23343                                  ;**** values for the type field in the result block
 23344                                  
 23345                                  _$P_EOL		   equ	0		;AN000; End of line
 23346                                  _$P_Number	   equ	1		;AN000; Number
 23347                                  _$P_List_Idx	   equ	2		;AN000; List Index
 23348                                  _$P_String	   equ	3		;AN000; String
 23349                                  _$P_Complex	   equ	4		;AN000; Complex
 23350                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 23351                                  _$P_Drive	   equ	6		;AN000; Drive
 23352                                  _$P_Date_F	   equ	7		;AN000; Date
 23353                                  _$P_Time_F	   equ	8		;AN000; Time
 23354                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 23355                                  
 23356                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 23357                                  
 23358                                  ;**** Return code
 23359                                  ;
 23360                                  ; following return code will be returned in the AX register.
 23361                                  
 23362                                  _$P_No_Error	   equ	0		;AN000; No error
 23363                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 23364                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 23365                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 23366                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 23367                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 23368                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 23369                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 23370                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 23371                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 23372                                  
 23373                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 23374                                  
 23375                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 23376                                  
 23377                                  ;********************** Local Data *************************************
 23378 0000140B 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 23379 0000140D 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 23380 0000140F 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 23381 00001411 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 23382 00001413 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 23383 00001414 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 23384 00001416 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 23385 00001418 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 23386                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 23387                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 23388                                  
 23389                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 23390                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 23391                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 23392                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 23393                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 23394                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 23395                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 23396                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 23397                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 23398                                  
 23399                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23400                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23401                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23402                                  
 23403 0000141A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23404 0000141C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23405 0000141E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23406 00001420 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23407                                  
 23408 00001422 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23409                                  _$P_STRING_BUF_END equ	$		;AN000;
 23410                                  
 23411                                  ; 25/10/2022
 23412                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23413                                  
 23414 000014A2 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23415 000014A3 0000                    		   dw	0		;AN000; offset	of char case map table
 23416 000014A5 0000                    		   dw	0		;AN000; segment of char case map table
 23417                                  ; 25/10/2022
 23418                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23419                                  ;		   dw	0		;AN000; offset	of file case map table
 23420                                  ;		   dw	0		;AN000; segment of file case map table
 23421                                  
 23422                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23423                                  ;
 23424                                  
 23425                                  ;M029
 23426                                  ;!!!WARNING!!!
 23427                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23428                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23429                                  ;changes need to be made in SYSPARSE
 23430                                  
 23431                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23432                                  
 23433                                  ; 25/10/2022
 23434                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23435                                  
 23436 000014A7 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23437                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23438                                  
 23439                                  ;ENDIF					;AN000;(of FileSW)
 23440                                  
 23441                                  ; delimiter parsing
 23442                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23443                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23444                                  
 23445                                  ;filespec error flag
 23446 000014B0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23447                                  					;AN033;  was detected.
 23448                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23449                                  
 23450                                  
 23451                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23452                                  ; ======================================================================
 23453                                  ; 27/03/2019 - Retro DOS v4.0
 23454                                  
 23455                                  ;***********************************************************************
 23456                                  ; SysParse;
 23457                                  ;
 23458                                  ;  Function : Parser Entry
 23459                                  ;
 23460                                  ;  Input: DS:SI -> command line
 23461                                  ;	  ES:DI -> parameter block
 23462                                  ;	  cs -> psdata.inc
 23463                                  ;	  CX = operand ordinal
 23464                                  ;
 23465                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23466                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23467                                  ;		 is in DS.
 23468                                  ;
 23469                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23470                                  ;		    invalid value list. But this parser does NOT implement
 23471                                  ;		    this feature. Therefore CY always zero.
 23472                                  ;
 23473                                  ;	   CY = 0   AX = return code
 23474                                  ;		    BL = terminated delimiter code
 23475                                  ;		    CX = new operand ordinal
 23476                                  ;		    SI = set past scaned operand
 23477                                  ;		    DX = selected result buffer
 23478                                  ;
 23479                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23480                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23481                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23482                                  ;
 23483                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23484                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23485                                  ;
 23486                                  ;-------- Modification History -----------------------------------------
 23487                                  ;
 23488                                  ;  4/04/87 : Created by K. K,
 23489                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23490                                  ;	   : JMP SHORT assemble error (tm02)
 23491                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23492                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23493                                  ;	     DateSW equ 1)	      (tm04)
 23494                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23495                                  ;				      (tm05) in PSDATA.INC
 23496                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23497                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23498                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23499                                  ;	     value-list block	      (tm07)
 23500                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23501                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23502                                  ;	     (tm08)
 23503                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23504                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23505                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23506                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23507                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23508                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23509                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23510                                  ;					  (tm12)
 23511                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23512                                  ;					  (tm13)
 23513                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23514                                  ;					  (tm14)
 23515                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23516                                  ;					  (tm15)
 23517                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23518                                  
 23519                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23520                                  
 23521                                  ;  7/28/87 : Kerry S (;AN018;)
 23522                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23523                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23524                                  ;	     affected: _$P_Chk_SW_Control.
 23525                                  
 23526                                  ;  7/29/87 : Kerry S (;AN019;)
 23527                                  ;	     Now allow the optional bit in match flags for switches.  This
 23528                                  ;	     allows the switch to be encountered with a value or without a
 23529                                  ;	     value and no error is returned.
 23530                                  ;
 23531                                  
 23532                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23533                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23534                                  ;	     within a date response, instead of checking just for the one
 23535                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23536                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23537                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23538                                  
 23539                                  ;  9/1/87  : Kerry S (;AN021)
 23540                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23541                                  ;	     the command line with the string in the control block the
 23542                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23543                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23544                                  ;	     string on the command line than in the synonym list in the control
 23545                                  ;	     block.  I put in a test for a null in the control block so the
 23546                                  ;	     string in the control block must be the same length as the string
 23547                                  ;	     preceeding the colon or equal on the command line.
 23548                                  
 23549                                  ;  8/28/87 : Kerry S (;AN022;)
 23550                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23551                                  ;	     problems for people who included it themselves in a segment other
 23552                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23553                                  ;	     segment.
 23554                                  
 23555                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23556                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23557                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23558                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23559                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23560                                  ;	     BL be used if TIME is being parsed.
 23561                                  
 23562                                  ;  9/24/87 : Ed K
 23563                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23564                                  ;	     invocations with their normally expanded code; made comments
 23565                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23566                                  
 23567                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23568                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23569                                  ;	     pointed to by non-existant CONTROL.
 23570                                  
 23571                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23572                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23573                                  ;	     support to frame quoted text string with single quote.
 23574                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23575                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23576                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23577                                  
 23578                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23579                                  ;	     quote chars within a quoted string is supposed to be reported as
 23580                                  ;	     one quote character, but is reported as two quotes.  This changed
 23581                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23582                                  
 23583                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23584                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23585                                  
 23586                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23587                                  
 23588                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23589                                  ;	     psdata buffer should have cs.
 23590                                  
 23591                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23592                                  ;	     positional missing.
 23593                                  
 23594                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23595                                  ;	     as a line delimiter, should use carriage return.
 23596                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23597                                  
 23598                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23599                                  
 23600                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23601                                  ;	     endless loop since SI is returned still pointing to start
 23602                                  ;	     of that parm.
 23603                                  
 23604                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23605                                  ;	     Vector to returned string has CS instead of cs, but
 23606                                  ;	     when tried to fix it on previous version, changed similar
 23607                                  ;	     but wrong place.
 23608                                  
 23609                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23610                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23611                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23612                                  
 23613                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23614                                  ;	     in a filespec, then flag an error.
 23615                                  
 23616                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23617                                  ;	     indexed off of the cs equate instead of the DS register.
 23618                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23619                                  ;  -->	     local parser data. Why were some references to local data changed
 23620                                  ;	     to do this before, but not all ?????
 23621                                  
 23622                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23623                                  
 23624                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23625                                  ;
 23626                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23627                                  
 23628                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23629                                  
 23630                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23631                                  ;	     separator in TIME before hundredths field.
 23632                                  ;
 23633                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23634                                  ;			strings as keywords.
 23635                                  ;
 23636                                  ;***********************************************************************
 23637                                  
 23638                                  ;IF FarSW				;AN000;(Check if need far return)
 23639                                  ;SysParse proc far			;AN000;
 23640                                  ;ELSE					;AN000;
 23641                                  ;SysParse proc near			;AN000;
 23642                                  ;ENDIF					;AN000;(of FarSW)
 23643                                  
 23644                                  ; 27/03/2019 - Retro DOS v4.0
 23645                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23646                                  
 23647                                  ; 25/10/2022 - Retro DOS v4.0
 23648                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23649                                  
 23650                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 23651                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 23652                                  
 23653                                  SysParse:
 23654                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 23655                                  	; dx = 0
 23656 000014B1 1E                      	push	ds ; *!*
 23657 000014B2 0E                      	push	cs
 23658 000014B3 1F                      	pop	ds 
 23659                                  
 23660                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23661                                  	;cld				;AN000; confirm forward direction
 23662                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23663                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23664                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23665                                  	;
 23666                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23667                                  
 23668                                  	; 06/09/2023
 23669 000014B4 8916[1814]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 23670 000014B8 FC                      	cld				;AN000; confirm forward direction
 23671 000014B9 890E[0B14]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 23672 000014BD 8916[0D14]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 23673 000014C1 8916[2014]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 23674 000014C5 8916[1114]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 23675                                  
 23676                                  ;M029 -- Begin changes
 23677                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23678                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23679                                  ;corrupts this table but does not corrupt the checksum region will leave
 23680                                  ;command.com parsing in an inconsistent state.
 23681                                  ; NB: The special characters string has been hardcoded here. If any change
 23682                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23683                                  
 23684                                  ;IF FileSW + DrvSW
 23685                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 23686                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 23687                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 23688                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 23689                                  
 23690                                  	; 06/09/2023
 23691 000014C9 C706[A714]5D5B          	mov	word [_$P_FileSp_Char], ']['
 23692 000014CF C706[A914]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 23693 000014D5 C706[AB14]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 23694 000014DB C706[AD14]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 23695                                  ;ENDIF
 23696                                  	; 06/09/2023
 23697 000014E1 1F                      	pop	ds ; *!*
 23698                                  
 23699                                  ;M029 -- End of changes
 23700                                  
 23701 000014E2 E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23702 000014E5 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23703                                  ;--------------------------- End of Line
 23704 000014E7 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23705 000014EA 53                      	push	bx			;AN000;
 23706                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23707                                  					;AN000; Get the PARMSX address to
 23708 000014EB 268B1D                  	mov	bx,[es:di]
 23709                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23710                                  					;AN000; check ORDINAL to see if the minimum
 23711 000014EE 263A0F                  	cmp	cl,[es:bx]	
 23712 000014F1 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23713                                  
 23714 000014F3 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23715                                  _$P_Fin: 				;AN000;
 23716 000014F6 5B                      	pop	bx			;AN000;
 23717 000014F7 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23718                                  ;---------------------------
 23719                                  _$P_Start:				;AN000;
 23720 000014FA 2E8936[1A14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23721 000014FF 53                      	push	bx			;AN000; quoted string or file spec.
 23722 00001500 57                      	push	di			;AN000;
 23723 00001501 55                      	push	bp			;AN000;
 23724                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23725                                  	; 02/11/2022
 23726                                  	;lea	bx,[_$P_STRING_BUF]
 23727                                  	; 07/09/2023
 23728 00001502 BB[2214]                	mov	bx,_$P_STRING_BUF
 23729 00001505 2EF606[1914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23730 0000150B 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23731                                  
 23732                                  _$P_Pack_Loop:				;AN000;
 23733 0000150D AC                      	lodsb				;AN000; Pick a operand from buffer
 23734 0000150E E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23735 00001511 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23736                                  
 23737 00001513 E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23738 00001516 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23739                                  
 23740 00001518 E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23741 0000151B 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23742                                  
 23743 0000151D 2EF606[1914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23744                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23745 00001523 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23746                                  
 23747 00001525 E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23748 00001528 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23749                                  
 23750                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23751 0000152A 2EF606[1914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23752 00001530 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23753                                  
 23754 00001532 4E                      	dec	si			;AN000; (tm08)
 23755 00001533 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23756                                  
 23757                                  _$P_PL01:				;AN000;
 23758 00001535 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23759 00001538 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23760 0000153A 7506                    	jne	short _$P_PL00 		;AN000; then
 23761                                  
 23762 0000153C 2E800E[1914]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23763                                  _$P_PL00:				;AN000;
 23764 00001542 43                      	inc	bx			;AN000; ready to see next byte
 23765 00001543 E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23766 00001546 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23767                                  
 23768 00001548 AC                      	lodsb				;AN000; if yes, store
 23769 00001549 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23770 0000154C 43                      	inc	bx			;AN000; update pointer
 23771 0000154D EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23772                                  
 23773                                  _$P_Pack_End_BY_EOL:			;AN000;
 23774 0000154F 4E                      	dec	si			;AN000; backup si pointer
 23775                                  _$P_Pack_End:				;AN000;
 23776 00001550 2E8936[0F14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23777                                  	; 07/09/2023
 23778                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23779 00001555 30E4                    	xor	ah,ah ; 0 ; *
 23780 00001557 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23781                                  	;
 23782 0000155A 2E891E[1E14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23783                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23784 0000155F 268B1D                  	mov	bx,[es:di]
 23785                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23786                                  	; 02/11/2022
 23787                                  	;lea	si,[_$P_STRING_BUF]
 23788                                  	; 07/09/2023
 23789 00001562 BE[2214]                	mov	si,_$P_STRING_BUF
 23790 00001565 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23791 00001569 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23792                                  
 23793 0000156B 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23794 0000156F 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23795                                  
 23796 00001571 2EF606[1914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23797 00001577 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23798                                  
 23799                                  _$P_Positional_Manager:			;AN000; else process as positional
 23800 00001579 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23801                                  	; 07/09/2023
 23802                                  	;xor	ah,ah			;AN000; ax = maxp
 23803 0000157D 2E3906[0B14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23804 00001582 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23805                                  
 23806 00001584 2EA1[0B14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23807 00001588 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23808 0000158A 43                      	inc	bx			;AC035; add '2' to
 23809 0000158B 43                      	inc	bx			;AC035;  BX reg
 23810                                  					;AN000; now bx points to 1st CONTROL
 23811 0000158C 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23812 0000158E 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23813 00001591 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23814 00001594 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23815                                  
 23816                                  _$P_Too_Many_Error:			;AN000;
 23817 00001596 2EC706[0D14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23818 0000159D EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23819                                  
 23820                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23821                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23822                                  get_maxp:
 23823                                  	;mov	al,[es:bx+1]
 23824 0000159F 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23825                                  	; 07/09/2023
 23826                                  	; ah=0 ; *
 23827                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23828 000015A3 30ED                    	xor	ch,ch ; **
 23829 000015A5 40                      	inc	ax			;AN000;
 23830 000015A6 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23831 000015A8 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23832 000015AA C3                      	retn
 23833                                  
 23834                                  _$P_SW_Manager:				;AN000;
 23835                                  	; 07/09/2023
 23836                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23837                                  	;xor	ah,ah			;AN000; ax = maxp
 23838                                  	;inc	ax			;AN000;
 23839                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23840                                  	;add	bx,ax			;AN000; now bx points to maxs
 23841 000015AB E8F1FF                  	call	get_maxp ; 07/09/2023
 23842                                  
 23843 000015AE 268A0F                  	mov	cl,[es:bx]		;AN000;
 23844                                  	; 07/09/2023
 23845                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23846                                  	;or	cx,cx			;AN000; at least one switch ?
 23847                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23848                                  	; 07/07/2023
 23849 000015B1 E30F                    	jcxz	_$P_SW_Not_Found	; no
 23850                                  
 23851 000015B3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23852                                  
 23853                                  _$P_SW_Mgr_Loop: 			;AN000;
 23854 000015B4 53                      	push	bx			;AN000;
 23855 000015B5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23856 000015B8 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23857 000015BB 5B                      	pop	bx			;AN000;
 23858 000015BC 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23859                                  
 23860 000015BE 43                      	inc	bx			;AC035; add '2' to
 23861 000015BF 43                      	inc	bx			;AC035;  BX reg
 23862                                  					;AN000; else bx points to the next CONTROL
 23863 000015C0 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23864                                  
 23865                                  _$P_SW_Not_Found:			;AN000;
 23866 000015C2 2EC706[0D14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23867 000015C9 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23868                                  
 23869                                  _$P_Key_Manager: 			;AN000;
 23870                                  	; 07/09/2023
 23871                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23872                                  	;xor	ah,ah			;AN000; ax = maxp
 23873                                  	;inc	ax			;AN000;
 23874                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23875                                  	;add	bx,ax			;AN000; now bx points to maxs
 23876 000015CB E8D1FF                  	call	get_maxp ; 07/09/2023
 23877                                  	
 23878 000015CE 268A07                  	mov	al,[es:bx]		;AN000;
 23879 000015D1 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23880 000015D3 D1E0                    	shl	ax,1			;AN000;
 23881 000015D5 40                      	inc	ax			;AN000; ax = ax*2+1
 23882 000015D6 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23883 000015D8 268A0F                  	mov	cl,[es:bx]		;AN000;
 23884                                  	; 07/09/2023
 23885                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23886                                  	;or	cx,cx			;AN000; at least one keyword ?
 23887                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23888                                  	; 07/07/2023
 23889 000015DB E305                    	jcxz	_$P_Key_Not_Found	; no
 23890                                  
 23891 000015DD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23892                                  
 23893                                  _$P_Key_Mgr_Loop:			;AN000;
 23894                                  	; 07/09/2023
 23895                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23896                                  	; (always returns with cf=1)
 23897                                  	;push	bx			;AN000;
 23898                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23899                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23900                                  	;pop	bx			;AN000;
 23901                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23902                                  	; 07/09/2023
 23903                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23904                                  
 23905 000015DE 43                      	inc	bx			;AC035; add '2' to
 23906 000015DF 43                      	inc	bx			;AC035;  BX reg
 23907                                  					;AN000; else bx points to the next CONTROL
 23908 000015E0 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23909                                  
 23910                                  _$P_Key_Not_Found:			;AN000;
 23911 000015E2 2EC706[0D14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23912                                  _$P_Return_to_Caller:			;AN000;
 23913 000015E9 5D                      	pop	bp			;AN000;
 23914 000015EA 5F                      	pop	di			;AN000;
 23915 000015EB 5B                      	pop	bx			;AN000;
 23916 000015EC 2E8B0E[0B14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23917 000015F1 2EA1[0D14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23918 000015F5 2E8B36[0F14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23919 000015FA 2E8B16[1114]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23920 000015FF 2E8A1E[1314]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23921                                  _$P_Single_Exit: 			;AN000;
 23922 00001604 F8                      	clc				;AN000;
 23923 00001605 C3                      	retn				;AN000;
 23924                                  
 23925                                  ;***********************************************************************
 23926                                  ; _$P_Chk_Pos_Control
 23927                                  ;
 23928                                  ; Function: Parse CONTROL block for a positional
 23929                                  ;
 23930                                  ; Input:     ES:BX -> CONTROL block
 23931                                  ;	     cs:SI -> _$P_STRING_BUF
 23932                                  ;
 23933                                  ; Output:    None
 23934                                  ;
 23935                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23936                                  ;
 23937                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23938                                  ;***********************************************************************
 23939                                  
 23940                                  _$P_Chk_Pos_Control:
 23941 00001606 50                      	push	ax			;AN000;
 23942                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23943 00001607 268B07                  	mov	ax,[es:bx]
 23944                                  	; 12/12/2022
 23945 0000160A A802                    	test	al,_$P_Repeat
 23946                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23947 0000160C 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23948                                  
 23949 0000160E 2EFF06[0B14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23950                                  _$P_CPC00:				;AN000;
 23951 00001613 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23952 00001617 7517                    	jne	short _$P_CPC01		;AN000;
 23953                                  
 23954                                  	; 12/12/2022
 23955 00001619 A801                    	test	al,_$P_Optional
 23956                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23957 0000161B 7509                    	jnz	short _$P_CPC02		;AN000;
 23958                                  
 23959 0000161D 2EC706[0D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23960 00001624 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23961                                  
 23962                                  _$P_CPC02:				;AN000;
 23963 00001626 50                      	push	ax			;AN000;
 23964                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23965                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23966                                  	; 14/08/2023
 23967 00001627 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23968 0000162A E89600                  	call	_$P_Fill_Result		;AN000;
 23969 0000162D 58                      	pop	ax			;AN000;
 23970 0000162E EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23971                                  
 23972                                  _$P_CPC01:				;AN000;
 23973 00001630 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23974                                  _$P_CPC_Exit:				;AN000;
 23975 00001633 58                      	pop	ax			;AN000;
 23976 00001634 C3                      	retn				;AN000;
 23977                                  
 23978                                  ;***********************************************************************
 23979                                  ; _$P_Chk_Key_Control
 23980                                  ;
 23981                                  ; Function: Parse CONTROL block for a keyword
 23982                                  ;
 23983                                  ; Input:     ES:BX -> CONTROL block
 23984                                  ;	     cs:SI -> _$P_STRING_BUF
 23985                                  ;
 23986                                  ; Output:    CY = 1 : not match
 23987                                  ;
 23988                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23989                                  ;
 23990                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23991                                  ;***********************************************************************
 23992                                  
 23993                                  ; 07/09/2023
 23994                                  ;_$P_Chk_Key_Control:
 23995                                  ;	stc				;AN000; this logic works when the KeySW
 23996                                  ;	retn				;AN000; is reset.
 23997                                  
 23998                                  ;***********************************************************************
 23999                                  ; _$P_Search_KEYorSW:
 24000                                  ;
 24001                                  ; Function: Seach specified keyword or switch from CONTROL
 24002                                  ;
 24003                                  ; Input:     ES:BX -> CONTROL block
 24004                                  ;	     cs:SI -> _$P_STRING_BUF
 24005                                  ;
 24006                                  ; Output:    CY = 1 : not match
 24007                                  ;
 24008                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 24009                                  ;***********************************************************************
 24010                                  
 24011                                  	; 25/10/2022 - Retro DOS v4.0
 24012                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 24013                                  
 24014                                  _$P_Search_KEYorSW:			;AN000;
 24015 00001635 55                      	push	bp			;AN000;
 24016 00001636 51                      	push	cx			;AN000;
 24017 00001637 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 24018 0000163B 30ED                    	xor	ch,ch			;AN000; and set it to cx
 24019                                  	;or	cx,cx			;AN000; No synonyms specified ?
 24020                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 24021                                  	; 14/08/2023
 24022 0000163D E30D                    	jcxz	_$P_KEYorSW_Not_Found
 24023                                  
 24024                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 24025                                  	; 25/10/2022
 24026 0000163F 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 24027                                  	;lea	bp,[bx+9]
 24028                                  _$P_KEYorSW_Loop:			;AN000;
 24029 00001642 E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 24030 00001645 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 24031                                  
 24032 00001647 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 24033 0000164A E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 24034                                  _$P_KEYorSW_Not_Found:			;AN000;
 24035 0000164C F9                      	stc				;AN000; indicate not found in synonym list
 24036 0000164D EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 24037                                  
 24038                                  _$P_KEYorSW_Found:			;AN000;
 24039 0000164F 2E892E[2014]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 24040 00001654 F8                      	clc				;AN000; indicate found
 24041                                  _$P_KEYorSW_Exit:			;AN000;
 24042 00001655 59                      	pop	cx			;AN000;
 24043 00001656 5D                      	pop	bp			;AN000;
 24044 00001657 C3                      	retn				;AN000;
 24045                                   
 24046                                  ;***********************************************************************
 24047                                  ; _$P_MoveBP_NUL
 24048                                  ;***********************************************************************
 24049                                  
 24050                                  _$P_MoveBP_NUL:
 24051                                  _$P_MBP_Loop:				;AN000;
 24052                                  	; 11/12/2022
 24053 00001658 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 24054                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 24055                                  	; (SYSINIT:18DBh)
 24056                                   	;cmp     byte [es:bp+0],0
 24057 0000165D 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 24058                                  
 24059 0000165F 45                      	inc	bp			;AN000; until
 24060 00001660 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 24061                                  
 24062                                  _$P_MBP_Exit:				;AN000;
 24063 00001662 45                      	inc	bp			;AN000; bp points to next to NULL
 24064 00001663 C3                      	retn				;AN000;
 24065                                  
 24066                                  ;***********************************************************************
 24067                                  ; _$P_Chk_SW_Control
 24068                                  ;
 24069                                  ; Function: Parse CONTROL block for a switch
 24070                                  ;
 24071                                  ; Input:     ES:BX -> CONTROL block
 24072                                  ;	     cs:SI -> _$P_STRING_BUF
 24073                                  ;
 24074                                  ; Output:    CY = 1 : not match
 24075                                  ;
 24076                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 24077                                  ;
 24078                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 24079                                  ;***********************************************************************
 24080                                  
 24081                                  _$P_Chk_SW_Control:
 24082                                  
 24083                                  ;IF SwSW				;AN000;(Check if switch is supported)
 24084                                  	;or	byte [cs:_$P_Flags+1],10h
 24085 00001664 2E800E[1914]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 24086 0000166A E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 24087 0000166D 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 24088                                  
 24089                                  	;and	[cs:_$P_Flags+],0EFh
 24090 0000166F 2E8026[1914]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 24091                                  					;AC034; reset the indicator previously set
 24092 00001675 50                      	push	ax			;AN000; 	      /switch:
 24093 00001676 2EA1[1C14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 24094 0000167A 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 24095 0000167C 2E0106[1A14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 24096 00001681 58                      	pop	ax			;AN000;
 24097                                  
 24098 00001682 2E8B36[1C14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 24099 00001687 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 24100 0000168B 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 24101                                  
 24102 0000168D 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 24103 00001692 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 24104                                  
 24105 00001694 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 24106 0000169B EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 24107                                  
 24108                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 24109                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 24110 0000169D 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 24111 000016A1 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 24112                                  
 24113                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 24114                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 24115                                  	;test	word [es:bx],1
 24116                                  	; 12/12/2022
 24117                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 24118 000016A3 26F60701                	test	byte [es:bx],_$P_Optional
 24119 000016A7 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 24120                                  
 24121 000016A9 2EC706[0D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 24122 000016B0 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 24123                                  
 24124                                  _$P_CSW00:				;AN000;
 24125 000016B2 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 24126 000016B5 F8                      	clc				;AN000; indicate match
 24127                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24128                                  	; 12/12/2022
 24129 000016B6 C3                      	retn
 24130                                  
 24131                                  _$P_Chk_SW_Err0: 			;AN000;
 24132 000016B7 F9                      	stc				;AN000; not found in switch synonym list
 24133                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24134                                  	; 12/12/2022
 24135 000016B8 C3                      	retn	
 24136                                  
 24137                                  _$P_Chk_SW_Exit: 			;AN000;
 24138 000016B9 50                      	push	ax			;AN000;
 24139                                  	;mov	al,_$P_String		;AN000;
 24140                                  	;mov	ah,_$P_No_Tag		;AN000;
 24141                                  	; 14/08/2023
 24142 000016BA B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24143 000016BD E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 24144 000016C0 58                      	pop	ax			;AN000;
 24145 000016C1 F8                      	clc				;AN000;
 24146                                  _$P_Chk_SW_Single_Exit:			;AN000;
 24147 000016C2 C3                      	retn				;AN000;
 24148                                  ;ELSE					;AN000;(of IF SwSW)
 24149                                  ;	stc				;AN000; this logic works when the SwSW
 24150                                  ;	retn				;AN000; is reset.
 24151                                  
 24152                                  ;***********************************************************************
 24153                                  ; _$P_Fill_Result
 24154                                  ;
 24155                                  ; Function: Fill the result buffer
 24156                                  ;
 24157                                  ; Input:    AH = Item tag
 24158                                  ;	    AL = type
 24159                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 24160                                  ;		  AL = 2: DX has index(offset) into value list
 24161                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 24162                                  ;		  AL = 7: DX has year, CL has month and CH has date
 24163                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 24164                                  ;			  amd CH has hundredths
 24165                                  ;		  AL = else: cs:SI points to returned string buffer
 24166                                  ;	    ES:BX -> CONTROL block
 24167                                  ;
 24168                                  ; Output:   None
 24169                                  ;
 24170                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 24171                                  ;
 24172                                  ; Vars: _$P_DX(W)
 24173                                  ;***********************************************************************
 24174                                  
 24175                                  _$P_Fill_Result:
 24176 000016C3 57                      	push	di			;AN000;
 24177 000016C4 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 24178                                  					;AN000; di points to result buffer
 24179 000016C8 2E893E[1114]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 24180                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 24181                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 24182                                  	; 07/09/2023
 24183                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 24184 000016CD 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 24185                                  
 24186 000016D0 50                      	push	ax			;AN000;
 24187 000016D1 2EA1[2014]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 24188 000016D5 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 24189                                  					;AN000;   then set it to the result
 24190 000016D9 58                      	pop	ax			;AN000;
 24191                                  _$P_RLT04:				;AN000;
 24192 000016DA 3C01                    	cmp	al,_$P_Number		;AN000; if number
 24193 000016DC 750A                    	jne	short _$P_RLT00		;AN000;
 24194                                  
 24195                                  _$P_RLT02:				;AN000;
 24196 000016DE 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 24197 000016E2 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 24198 000016E6 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 24199                                  
 24200                                  _$P_RLT00:				;AN000;
 24201 000016E8 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 24202 000016EA 7506                    	jne	short _$P_RLT01		;AN000;
 24203                                  
 24204 000016EC 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 24205                                  					;AN000; then store list index
 24206 000016F0 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 24207                                  
 24208                                  _$P_RLT01:				;AN000;
 24209 000016F2 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 24210 000016F4 74E8                    	je	short _$P_RLT02		;AN000;
 24211                                  
 24212 000016F6 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 24213 000016F8 74E4                    	je	short _$P_RLT02		;AN000;
 24214                                  
 24215 000016FA 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 24216 000016FC 7506                    	jne	short _$P_RLT03		;AN000;
 24217                                  
 24218 000016FE 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 24219 00001702 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 24220                                  
 24221                                  _$P_RLT03:				;AN000;
 24222 00001704 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 24223 00001706 750F                    	jne	short _$P_RLT05		;AN000;
 24224                                  
 24225 00001708 2EA1[1A14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 24226 0000170C 40                      	inc	ax			;AN000; skip left Parentheses
 24227 0000170D 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 24228 00001711 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 24229 00001715 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 24230                                  
 24231                                  _$P_RLT05:				;AN000;
 24232                                  ;------------------------  AL = 3, 5, or 9
 24233 00001717 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 24234                                  					;AN000; store offset of STRING_BUF
 24235 0000171B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 24236                                  					;AN031; store segment of STRING_BUF
 24237 0000171F 50                      	push	ax			;AN000;
 24238 00001720 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 24239                                  					;AN000; need CAPS by file table?
 24240 00001725 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 24241                                  
 24242 00001727 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 24243 00001729 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 24244                                  
 24245                                  _$P_RLT_CAP00:				;AN000;
 24246 0000172B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 24247                                  					;AN000; need CAPS by char table ?
 24248 00001730 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 24249                                  
 24250 00001732 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 24251                                  _$P_RLT_CAP02:				;AN000;
 24252 00001734 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 24253                                  _$P_RLT_CAP01:				;AN000;
 24254 00001737 58                      	pop	ax			;AN000;
 24255 00001738 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 24256                                  					;AN000; removing colon at end ?
 24257 0000173D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 24258                                  
 24259 0000173F E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 24260                                  _$P_RLT_Exit:				;AN000;
 24261 00001742 5F                      	pop	di			;AN000;
 24262 00001743 C3                      	retn				;AN000;
 24263                                  
 24264                                  ;***********************************************************************
 24265                                  ; _$P_Check_Match_Flags
 24266                                  ;
 24267                                  ; Function:  Check the mutch_flags and make the exit code and set the
 24268                                  ;	     result buffer
 24269                                  ;
 24270                                  ;	    Check for types in this order:
 24271                                  ;		Complex
 24272                                  ;		Date
 24273                                  ;		Time
 24274                                  ;		Drive
 24275                                  ;		Filespec
 24276                                  ;		Quoted String
 24277                                  ;		Simple String
 24278                                  ;
 24279                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24280                                  ;	     ES:BX -> CONTROL block
 24281                                  ;
 24282                                  ; Output:    None
 24283                                  ;
 24284                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 24285                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 24286                                  ;	     _$P_Drive_Format
 24287                                  ;***********************************************************************
 24288                                  
 24289                                  	; 25/10/2022 - Retro DOS v4.0
 24290                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 24291                                  
 24292                                  	; 12/12/2022
 24293                                  _$P_Check_Match_Flags:
 24294 00001744 2EC606[B014]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 24295                                  					;AN033;AC034;; clear filespec error flag.
 24296 0000174A 50                      	push	ax			;AN000;
 24297                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 24298 0000174B 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 24299 0000174E 09C0                    	or	ax,ax			;AC035; test ax for zero
 24300 00001750 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 24301 00001752 50                      	push	ax			;AN000; (tm12)
 24302 00001753 53                      	push	bx			;AN000; (tm12)
 24303 00001754 52                      	push	dx			;AN000; (tm12)
 24304 00001755 57                      	push	di			;AN000; (tm12)
 24305 00001756 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 24306                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 24307                                  	;mov	al,_$P_String		;AN000; (tm12)
 24308                                  	; 14/08/2023
 24309 0000175D B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24310 00001760 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 24311 00001763 5F                      	pop	di			;AN000; (tm12)
 24312 00001764 5A                      	pop	dx			;AN000; (tm12)
 24313 00001765 5B                      	pop	bx			;AN000; (tm12)
 24314 00001766 58                      	pop	ax			;AN000; (tm12)
 24315                                  	; 12/12/2022
 24316                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 24317                                  	; 12/12/2022
 24318                                  ;_$P_Mat: 				;AN000; (tm12)
 24319                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 24320                                  _$P_Bridge:
 24321 00001767 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 24322                                  	
 24323                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24324                                  	; (SYSINIT:19F9h)
 24325                                  	; 12/12/2022
 24326                                  	;nop	; db 90h
 24327                                  
 24328                                  ; 12/12/2022
 24329                                  _$P_Mat:
 24330                                  _$P_Match03:				;AN000;
 24331                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 24332                                  	; 14/08/2023
 24333 00001769 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 24334 0000176C 7412                    	jz	short _$P_Match04	;AN000;
 24335                                  
 24336 0000176E 2EC706[0D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24337 00001775 E81E01                  	call	_$P_Value		;AN000; do process
 24338 00001778 2E833E[0D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24339 0000177E 7557                    	jne	short _$P_Match_Exit	;AN000;
 24340                                  _$P_Match04:				;AN000;
 24341                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 24342                                  	; 14/08/2023
 24343 00001780 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 24344 00001783 7412                    	jz	short _$P_Match05	;AN000;
 24345                                  
 24346 00001785 2EC706[0D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24347 0000178C E8E300                  	call	_$P_SValue		;AN000; do process
 24348 0000178F 2E833E[0D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24349 00001795 7540                    	jne	short _$P_Match_Exit	;AN000;
 24350                                  _$P_Match05:				;AN000;
 24351                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 24352                                  	; 14/08/2023
 24353 00001797 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 24354 0000179A 7415                    	jz	short _$P_Match06	;AN000;
 24355                                  
 24356 0000179C 2EC706[0D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24357 000017A3 E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 24358 000017A6 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 24359 000017A9 2E833E[0D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24360 000017AF 7526                    	jne	short _$P_Match_Exit	;AN000;
 24361                                  _$P_Match06:				;AN000;
 24362                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 24363                                  	; 14/08/2023
 24364 000017B1 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24365 000017B4 7412                    	jz	short _$P_Match07	;AN000;
 24366                                  
 24367 000017B6 2EC706[0D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24368 000017BD E8E102                  	call	_$P_File_Format		;AN000; do process
 24369 000017C0 2E833E[0D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24370 000017C6 750F                    	jne	short _$P_Match_Exit	;AN000;
 24371                                  _$P_Match07:				;AN000;
 24372                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 24373                                  	; 14/08/2023
 24374 000017C8 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 24375 000017CB 740A                    	jz	short _$P_Match09	;AN000;
 24376                                  
 24377 000017CD 2EC706[0D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24378 000017D4 E8C301                  	call	_$P_Simple_String	;AN000; do process
 24379                                  _$P_Match09:				;AN000;
 24380                                  _$P_Match_Exit:				;AN000;
 24381 000017D7 2E833E[B014]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 24382 000017DD 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24383 000017DF 2E833E[0D14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 24384 000017E5 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24385 000017E7 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 24386                                  _$P_Match2_Exit: 			;AN033;
 24387 000017EE 58                      	pop	ax			;AN000;
 24388 000017EF C3                      	retn				;AN000;
 24389                                  
 24390                                  ;***********************************************************************
 24391                                  ; _$P_Remove_Colon;
 24392                                  ;
 24393                                  ; Function: Remove colon at end
 24394                                  ;
 24395                                  ; Input:    cs:SI points to string buffer to be examineed
 24396                                  ;
 24397                                  ; Output:   None
 24398                                  ;
 24399                                  ; Use:	_$P_Chk_DBCS
 24400                                  ;***********************************************************************
 24401                                  
 24402                                  _$P_Remove_Colon:
 24403 000017F0 50                      	push	ax			;AN000;
 24404 000017F1 56                      	push	si			;AN000;
 24405                                  _$P_RCOL_Loop:				;AN000;
 24406 000017F2 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24407 000017F5 08C0                    	or	al,al			;AN000; end of string ?
 24408 000017F7 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 24409                                  
 24410 000017F9 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 24411 000017FB 750D                    	jne	short _$P_RCOL00	;AN000;
 24412                                  
 24413 000017FD 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 24414 00001802 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 24415                                  
 24416 00001804 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 24417 00001808 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 24418                                  
 24419                                  _$P_RCOL00:				;AN000;
 24420 0000180A E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 24421 0000180D 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 24422                                  
 24423 0000180F 46                      	inc	si			;AN000; if yes, skip trailing byte
 24424                                  _$P_RCOL01:				;AN000;
 24425 00001810 46                      	inc	si			;AN000; si points to next byte
 24426 00001811 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 24427                                  
 24428                                  _$P_RCOL_Exit:				;AN000;
 24429 00001813 5E                      	pop	si			;AN000;
 24430 00001814 58                      	pop	ax			;AN000;
 24431 00001815 C3                      	retn				;AN000;
 24432                                  
 24433                                  ;***********************************************************************
 24434                                  ; _$P_Do_CAPS_String;
 24435                                  ;
 24436                                  ; Function: Perform capitalization along with the file case map table
 24437                                  ;	    or character case map table.
 24438                                  ;
 24439                                  ; Input:    AL = 2 : Use character table
 24440                                  ;	    AL = 4 : Use file table
 24441                                  ;	    cs:SI points to string buffer to be capitalized
 24442                                  ;
 24443                                  ; Output:   None
 24444                                  ;
 24445                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 24446                                  ;***********************************************************************
 24447                                  
 24448                                  _$P_Do_CAPS_String:
 24449 00001816 56                      	push	si			;AN000;
 24450 00001817 52                      	push	dx			;AN000;
 24451 00001818 88C2                    	mov	dl,al			;AN000; save info id
 24452                                  
 24453                                  _$P_DCS_Loop:				;AN000;
 24454 0000181A 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 24455 0000181D E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 24456 00001820 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 24457                                  
 24458 00001822 08C0                    	or	al,al			;AN000; end of string ?
 24459 00001824 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 24460                                  
 24461 00001826 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 24462 00001829 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 24463 0000182C EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24464                                  _$P_DCS00:				;AN000;
 24465 0000182E 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24466                                  _$P_DCS01:				;AN000;
 24467 0000182F 46                      	inc	si			;AN000; si point to next byte
 24468 00001830 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24469                                  _$P_DCS_Exit:				;AN000;
 24470 00001832 5A                      	pop	dx			;AN000;
 24471 00001833 5E                      	pop	si			;AN000;
 24472 00001834 C3                      	retn
 24473                                  
 24474                                  ;***********************************************************************
 24475                                  ; _$P_Do_CAPS_Char;
 24476                                  ;
 24477                                  ; Function: Perform capitalization along with the file case map table
 24478                                  ;	    or character case map table.
 24479                                  ;
 24480                                  ; Input:    DL = 2 : Use character table
 24481                                  ;	    DL = 4 : Use file table
 24482                                  ;	    AL = character to be capitalized
 24483                                  ;
 24484                                  ; Output:   None
 24485                                  ;
 24486                                  ; Use:	INT 21h /w AH=65h
 24487                                  ;***********************************************************************
 24488                                  
 24489                                  _$P_Do_CAPS_Char:
 24490 00001835 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24491 00001837 730B                    	jae	short _$P_DCC_Go	;AN000;
 24492                                  
 24493 00001839 3C61                    	cmp	al,"a"                  ;AN000; if no,
 24494 0000183B 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 24495                                  
 24496 0000183D 3C7A                    	cmp	al,"z"                  ;AN000;
 24497 0000183F 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 24498                                  
 24499 00001841 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 24500                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24501                                  	; 14/08/2023
 24502 00001843 C3                      	retn
 24503                                  
 24504                                  _$P_DCC_Go:				;AN000;
 24505 00001844 53                      	push	bx			;AN000;
 24506 00001845 06                      	push	es			;AN000;
 24507 00001846 57                      	push	di			;AN000;
 24508                                  
 24509                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24510                                  	;lea	di,[_$P_Char_CAP_Ptr]
 24511                                  	; 07/09/2023
 24512 00001847 BF[A214]                	mov	di,_$P_Char_CAP_Ptr
 24513                                  _$P_DCC00:				;AN000;
 24514 0000184A 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24515 0000184D 7415                    	je	short _$P_DCC01		;AN000; if no,
 24516                                  
 24517                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24518                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24519                                  ; call, regardless of what base register is currently be defined as cs.
 24520                                  
 24521 0000184F 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24522 00001850 51                      	push	cx			;AN000;
 24523 00001851 52                      	push	dx			;AN000;
 24524                                  
 24525 00001852 0E                      	push	cs			;AC036; pass current base seg into
 24526                                  					;(Note: this used to push CS.  BUG...
 24527 00001853 07                      	pop	es			;AN000;   ES reg, required for
 24528                                  					;get extended country information
 24529                                  	;mov	al,dl ; function	;AN000; upper case table
 24530                                  	; 14/08/2023
 24531 00001854 92                      	xchg	ax,dx
 24532 00001855 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24533 00001857 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24534 0000185A B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24535                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24536                                  	; 14/08/2023
 24537 0000185D 89DA                    	mov	dx,bx ; 0FFFFh
 24538                                  					;DI already set to point to buffer
 24539 0000185F CD21                    	int	21h			;AN000; es:di point to buffer that
 24540                                  					;now has been filled in with info
 24541 00001861 5A                      	pop	dx			;AN000;
 24542 00001862 59                      	pop	cx			;AN000;
 24543 00001863 58                      	pop	ax			;AN000;
 24544                                  
 24545                                  _$P_DCC01:				;AN000;
 24546                                  
 24547                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24548                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 24549                                  ; regardless of which base reg is currently the cs reg.
 24550                                  
 24551                                  	; 14/08/2023
 24552                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24553                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24554 00001864 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24555 00001868 43                      	inc	bx			;AC035; add '2' to
 24556 00001869 43                      	inc	bx			;AC035;  BX reg
 24557                                  					;AN000; skip length field
 24558 0000186A 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24559                                  	;xlat	es:[bx] 		;AN000; perform case map
 24560 0000186C 26                      	es
 24561 0000186D D7                      	xlat
 24562 0000186E 5F                      	pop	di			;AN000;
 24563 0000186F 07                      	pop	es			;AN000;
 24564 00001870 5B                      	pop	bx			;AN000;
 24565                                  _$P_CAPS_Ret:				;AN000;
 24566 00001871 C3                      	retn				;AN000;
 24567                                  
 24568                                  ;***********************************************************************
 24569                                  ; _$P_Value / _$P_SValue
 24570                                  ;
 24571                                  ; Function:  Make 32bit value from cs:SI and see value list
 24572                                  ;	     and make result buffer.
 24573                                  ;	     _$P_SValue is an entry point for the signed value
 24574                                  ;	     and this will simply call _$P_Value after the handling
 24575                                  ;	     of the sign character, "+" or "-"
 24576                                  ;
 24577                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24578                                  ;	     ES:BX -> CONTROL block
 24579                                  ;
 24580                                  ; Output:    None
 24581                                  ;
 24582                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24583                                  ;
 24584                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24585                                  ;***********************************************************************
 24586                                  
 24587                                  	; 26/10/2022 - Retro DOS v4.0
 24588                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24589                                  
 24590                                  _$P_SValue:				;AN000; when signed value here
 24591 00001872 50                      	push	ax			;AN000;
 24592 00001873 2E800E[1914]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24593 00001879 2E8026[1914]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24594 0000187F 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24595 00001882 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24596 00001884 740A                    	je	short _$P_SVal00	;AN000;
 24597                                  
 24598 00001886 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24599 00001888 7507                    	jne	short _$P_Sval01	;AN000; else
 24600                                  
 24601 0000188A 2E800E[1914]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24602                                  _$P_SVal00:				;AN000;
 24603 00001890 46                      	inc	si			;AN000; skip sign char
 24604                                  _$P_Sval01:				;AN000;
 24605 00001891 E80200                  	call	_$P_Value		;AN000; and process value
 24606 00001894 58                      	pop	ax			;AN000;
 24607 00001895 C3                      	retn
 24608                                  
 24609                                  ;***********************************************************************
 24610                                  
 24611                                  	; 26/10/2022
 24612                                  _$P_Value:				;AN000;
 24613 00001896 50                      	push	ax			;AN000;
 24614 00001897 51                      	push	cx			;AN000;
 24615 00001898 52                      	push	dx			;AN000;
 24616 00001899 56                      	push	si			;AN000;
 24617 0000189A 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24618 0000189C 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24619 0000189E 53                      	push	bx			;AN000; save control pointer
 24620                                  _$P_Value_Loop:				;AN000;
 24621 0000189F 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24622 000018A2 08C0                    	or	al,al			;AN000; end of line ?
 24623 000018A4 7442                    	jz	short _$P_Value00	;AN000;
 24624                                  
 24625 000018A6 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24626 000018A9 7239                    	jc	short _$P_Value_Err0	;AN000;
 24627                                  
 24628 000018AB 30E4                    	xor	ah,ah			;AN000;
 24629 000018AD 89C5                    	mov	bp,ax			;AN000; save binary number
 24630 000018AF D1E2                    	shl	dx,1			;AN000; to have 2*x
 24631 000018B1 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24632 000018B3 E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24633 000018B6 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24634                                  
 24635 000018B8 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 24636 000018BA 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 24637 000018BC D1E2                    	shl	dx,1			;AN000; to have 4*x
 24638 000018BE D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24639 000018C0 E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24640 000018C3 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24641                                  
 24642 000018C5 D1E2                    	shl	dx,1			;AN000; to have 8*x
 24643 000018C7 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24644 000018C9 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24645 000018CC 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24646                                  
 24647 000018CE 01DA                    	add	dx,bx			;AN000; now have 10*x
 24648 000018D0 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 24649 000018D2 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24650 000018D5 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24651                                  
 24652 000018D7 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 24653 000018D9 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24654 000018DC E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24655 000018DF 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24656                                  
 24657 000018E1 46                      	inc	si			;AN000; update pointer
 24658 000018E2 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24659                                  ;
 24660                                  _$P_Value_Err0:				;AN000;
 24661 000018E4 5B                      	pop	bx			;AN000;
 24662 000018E5 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24663                                  ;
 24664                                  _$P_Value00:				;AN000;
 24665 000018E8 5B                      	pop	bx			;AN000; restore control pointer
 24666 000018E9 2EF606[1914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24667 000018EF 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24668                                  
 24669 000018F1 F7D1                    	not	cx			;AN000; +
 24670 000018F3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 24671 000018F5 83C201                  	add	dx,1			;AN000; |
 24672 000018F8 83D100                  	adc	cx,0			;AN000; +
 24673                                  
 24674                                  _$P_Value01:				;AN000; / nval = 0
 24675 000018FB 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24676 000018FF 268A04                  	mov	al,[es:si]		;AN000; get nval
 24677                                  	; 07/09/2023
 24678                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 24679                                  	;;*jne	short _$P_Value02	;AN000;
 24680                                  	;;* 07/07/2023
 24681                                  	;je	short _$P_Value05
 24682                                  	; 07/09/2023
 24683 00001902 08C0                    	or	al,al
 24684 00001904 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 24685                                  
 24686                                  	;mov	al,_$P_Number		;AN000; Set type
 24687                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24688                                  	; 07/07/2023
 24689                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24690                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24691                                  
 24692                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24693                                  	; (SYSINIT:1BA5h)
 24694                                  	; 12/12/2022
 24695                                  	;nop	; db  90h
 24696                                  
 24697                                  _$P_Value02:				;AN000; / nval = 1
 24698                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24699                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24700                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24701                                  
 24702 00001906 46                      	inc	si			;AN000;
 24703 00001907 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24704                                  	
 24705                                  	; 07/09/2023
 24706                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24707                                  	;je	short _$P_Value03	;AN000; (tm07)
 24708 0000190A 08C0                    	or	al,al
 24709 0000190C 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24710                                  
 24711 0000190E 46                      	inc	si			;AN000; si points to 1st item_tag
 24712                                  _$P_Val02_Loop:				;AN000;
 24713 0000190F 2EF606[1914]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24714 00001915 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24715                                  
 24716 00001917 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24717 0000191B 7234                    	jb	short _$P_Val02_Next	;AN000;
 24718 0000191D 7706                    	ja	short _$P_Val_In	;AN000;
 24719                                  
 24720 0000191F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24721 00001923 722C                    	jb	short _$P_Val02_Next	;AN000;
 24722                                  
 24723                                  _$P_Val_In:				;AN000;
 24724 00001925 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24725 00001929 7726                    	ja	short _$P_Val02_Next	;AN000;
 24726 0000192B 7237                    	jb	short _$P_Val_Found	;AN000;
 24727                                  
 24728 0000192D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24729 00001931 771E                    	ja	short _$P_Val02_Next	;AN000;
 24730                                  
 24731 00001933 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24732                                  
 24733                                  _$P_Val02_Sign:				;AN000;
 24734 00001935 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24735 00001939 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24736 0000193B 7F06                    	jg	short _$P_SVal_In	;AN000;
 24737                                  
 24738 0000193D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24739 00001941 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24740                                  
 24741                                  _$P_SVal_In:				;AN000;
 24742 00001943 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24743 00001947 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24744                                  
 24745 00001949 7C19                    	jl	short _$P_Val_Found	;AN000;
 24746                                  
 24747 0000194B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24748                                  	;jg	short _$P_Val02_Next	;AN000;
 24749                                  	;jmp	short _$P_Val_Found	;AN000;
 24750                                  	; 14/08/2023
 24751 0000194F 7E13                    	jng	short _$P_Val_Found
 24752                                  
 24753                                  _$P_Val02_Next:				;AN000;
 24754 00001951 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24755 00001954 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24756 00001956 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24757                                  					; / Not found
 24758 00001958 2EC706[0D14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24759                                  	;mov	al,_$P_Number		;AN000;
 24760                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24761                                  _$P_Value05:		;* 14/08/2023
 24762                                  	; 14/08/2023
 24763 0000195F B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24764 00001962 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24765                                  
 24766                                  _$P_Val_Found:				;AN000;
 24767 00001964 B001                    	mov	al,_$P_Number		;AN000;
 24768 00001966 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24769 00001969 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24770                                  
 24771                                  _$P_Value03:				;AN000; / nval = 2
 24772                                  
 24773                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24774                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24775                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24776                                  ;(tm07) inc	si			;AN000;
 24777                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24778                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24779                                  ;	mul	ah			;AN000;  Skip nrng field
 24780                                  ;	inc	ax			;AN000;
 24781                                  ;	add	si,ax			;AN000; si points to nnval
 24782                                  ;	mov	al,es:[si]		;AN000; get nnval
 24783                                  ;	inc	si			;AN000; si points to 1st item_tag
 24784                                  ;$P_Val03_Loop:				;AN000;
 24785                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24786                                  ;	jne	$P_Val03_Next		;AN000;
 24787                                  ;
 24788                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24789                                  ;	je	$P_Val_Found		;AN000;
 24790                                  ;
 24791                                  ;$P_Val03_Next:				;AN000;
 24792                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24793                                  ;	dec	al			;AN000; loop nval times in AL
 24794                                  ;	jne	$P_Val03_Loop		;AN000;
 24795                                  ;					;AN000; / Not found
 24796                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24797                                  ;	mov	al,$P_Number		;AN000;
 24798                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24799                                  ;	jmp	short $P_Value_Exit	;AN000;
 24800                                  ;
 24801                                  ;ENDIF					;AN000;(of Val2SW)
 24802                                  ;$P_Value04:
 24803                                  
 24804                                  _$P_Value_Err:				;AN000;
 24805 0000196B 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24806                                  	;mov	al,_$P_String		;AN000; Set type
 24807                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24808                                  	; 14/08/2023
 24809 00001972 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24810                                  _$P_Value_Exit:				;AN000;
 24811 00001975 E84BFD                  	call	_$P_Fill_Result		;AN000;
 24812 00001978 5E                      	pop	si			;AN000;
 24813 00001979 5A                      	pop	dx			;AN000;
 24814 0000197A 59                      	pop	cx			;AN000;
 24815 0000197B 58                      	pop	ax			;AN000;
 24816 0000197C C3                      	retn				;AN000;
 24817                                  
 24818                                  ; 28/03/2019 - Retro DOS v4.0
 24819                                  
 24820                                  ;***********************************************************************
 24821                                  ; _$P_Check_OVF
 24822                                  ;
 24823                                  ; Function:  Check if overflow is occurred with consideration of
 24824                                  ;	     signed or un-signed numeric value
 24825                                  ;
 24826                                  ; Input:     Flag register
 24827                                  ;
 24828                                  ; Output:    CY = 1  :	Overflow
 24829                                  ;
 24830                                  ; Vars:     _$P_Flags(R)
 24831                                  ;***********************************************************************
 24832                                  
 24833                                  	; 26/10/2022
 24834                                  _$P_Check_OVF:
 24835 0000197D 9C                      	pushf				;AN000;
 24836 0000197E 2EF606[1914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24837 00001984 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24838                                  
 24839 00001986 9D                      	popf				;AN000; by the CY bit
 24840 00001987 C3                      	retn				;AN000;
 24841                                  
 24842                                  _$P_COVF:				;AN000;
 24843 00001988 9D                      	popf				;AN000; else,
 24844 00001989 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24845                                  
 24846 0000198B F8                      	clc				;AN000; indicate it with CY bit
 24847 0000198C C3                      	retn				;AN000; CY=0 means no overflow
 24848                                  
 24849                                  _$P_COVF00:				;AN000;
 24850                                  _$P_0099Err: ; 14/08/2023
 24851 0000198D F9                      	stc				;AN000; and CY=1 means overflow
 24852                                  _$P_0099Err2: ; 14/08/2023
 24853 0000198E C3                      	retn				;AN000;
 24854                                  
 24855                                  ;***********************************************************************
 24856                                  ; _$P_0099;
 24857                                  ;
 24858                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24859                                  ;
 24860                                  ; Input:     AL = character code
 24861                                  ;
 24862                                  ; Output:    CY = 1 : AL is not number
 24863                                  ;	     CY = 0 : AL contains binary value
 24864                                  ;***********************************************************************
 24865                                  
 24866                                  _$P_0099:
 24867 0000198F 3C30                    	cmp	al,"0"                  ;AN000;
 24868                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24869                                  	; 12/12/2022
 24870 00001991 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24871                                  
 24872 00001993 3C39                    	cmp	al,"9"                  ;AN000;
 24873 00001995 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24874                                  
 24875 00001997 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24876                                  	; 12/12/2022
 24877                                  	; cf=0	
 24878                                  	;clc				;AN000; indicate no error
 24879 00001999 C3                      	retn				;AN000;
 24880                                  
 24881                                  	; 14/08/2023
 24882                                  ;_$P_0099Err:				;AN000;
 24883                                  ;	stc				;AN000; indicate error
 24884                                  ;_$P_0099Err2: ; 12/12/2022	
 24885                                  ;	retn				;AN000;
 24886                                  
 24887                                  ;***********************************************************************
 24888                                  ; _$P_Simple_String
 24889                                  ;
 24890                                  ; Function:  See value list for the simple string
 24891                                  ;	     and make result buffer.
 24892                                  ;
 24893                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24894                                  ;	     ES:BX -> CONTROL block
 24895                                  ;
 24896                                  ; Output:    None
 24897                                  ;
 24898                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24899                                  ;
 24900                                  ; Vars: _$P_RC(W)
 24901                                  ;***********************************************************************
 24902                                  
 24903                                  _$P_Simple_String:
 24904 0000199A 50                      	push	ax			;AN000;
 24905 0000199B 53                      	push	bx			;AN000;
 24906 0000199C 52                      	push	dx			;AN000;
 24907 0000199D 57                      	push	di			;AN000;
 24908 0000199E 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24909 000019A2 268A05                  	mov	al,[es:di]		;AN000; get nval
 24910 000019A5 08C0                    	or	al,al			;AN000; no value list ?
 24911 000019A7 7504                    	jnz	short _$P_Sim00		;AN000; then
 24912                                  
 24913 000019A9 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24914 000019AB EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24915                                  
 24916                                  _$P_Sim00:				;AN000;
 24917                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24918 000019AD 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24919 000019AF 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24920                                  
 24921 000019B1 47                      	inc	di			;AN000;
 24922 000019B2 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24923 000019B5 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24924 000019B7 F6E4                    	mul	ah			;AN000; Skip nrng field
 24925 000019B9 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24926 000019BA 01C7                    	add	di,ax			;AN000; di points to nnval
 24927 000019BC 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24928 000019BF B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24929 000019C1 F6E4                    	mul	ah			;AN000; Skip nnval field
 24930 000019C3 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24931 000019C4 01C7                    	add	di,ax			;AN000; di points to nstrval
 24932 000019C6 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24933 000019C9 47                      	inc	di			;AC035; add '2' to
 24934 000019CA 47                      	inc	di			;AC035;  DI reg
 24935                                  					;AN000; di points to 1st string in list
 24936                                  _$P_Sim_Loop:				;AN000;
 24937 000019CB 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24938 000019CE E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24939 000019D1 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24940                                  
 24941 000019D3 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24942 000019D6 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24943 000019D8 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24944                                  					;AN000; / Not found
 24945 000019DA 2EC706[0D14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24946 000019E1 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24947 000019E3 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24948                                  
 24949                                  _$P_Sim_Found:				;AN000;
 24950 000019E5 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24951 000019E9 B002                    	mov	al,_$P_List_Idx		;AN000;
 24952 000019EB 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24953 000019EE EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24954                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24955                                  _$P_Sim01:				;AN000;
 24956 000019F0 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24957 000019F7 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24958                                  _$P_Sim_Exit:				;AN000;
 24959 000019F9 B003                    	mov	al,_$P_String		;AN000; Set type
 24960                                  _$P_Sim_Exit0:				;AN000;
 24961 000019FB E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24962 000019FE 5F                      	pop	di			;AN000;
 24963 000019FF 5A                      	pop	dx			;AN000;
 24964 00001A00 5B                      	pop	bx			;AN000;
 24965 00001A01 58                      	pop	ax			;AN000;
 24966 00001A02 C3                      	retn				;AN000;
 24967                                  
 24968                                  ;***********************************************************************
 24969                                  ; _$P_String_Comp:
 24970                                  ;
 24971                                  ; Function:  Compare two string
 24972                                  ;
 24973                                  ; Input:     cs:SI -> 1st string
 24974                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24975                                  ;	     ES:BX -> CONTROL block
 24976                                  ;
 24977                                  ; Output:    CY = 1 if not match
 24978                                  ;
 24979                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24980                                  ;
 24981                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24982                                  ;***********************************************************************
 24983                                  
 24984                                  _$P_String_Comp:
 24985 00001A03 50                      	push	ax			;AN000;
 24986 00001A04 55                      	push	bp			;AN000;
 24987 00001A05 52                      	push	dx			;AN000;
 24988 00001A06 56                      	push	si			;AN000;
 24989 00001A07 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24990                                  _$P_SCOM_Loop:				;AN000;
 24991 00001A09 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24992 00001A0C E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24993 00001A0F 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24994                                  
 24995 00001A11 E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24996                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24997 00001A14 2EF606[1914]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24998 00001A1A 740D                    	jz	short _$P_SCOM04	;AN000;
 24999                                  
 25000 00001A1C 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 25001 00001A1E 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 25002                                  
 25003 00001A20 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 25004 00001A25 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 25005                                  
 25006 00001A27 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 25007                                  
 25008                                  _$P_SCOM04:				;AN000;
 25009 00001A29 2EF606[1914]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 25010 00001A2F 740E                    	jz	short _$P_SCOM03	;AN000;
 25011                                  
 25012 00001A31 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 25013 00001A33 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 25014                                  
 25015                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25016                                  	;cmp	byte [es:bp+0],_$P_NULL
 25017                                  	; 11/12/2022
 25018 00001A35 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 25019 00001A3A 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 25020                                  
 25021                                  _$P_SCOM05:				;AN000;   found a match
 25022 00001A3C 46                      	inc	si			;AN000; si points to just after "=" or ":"
 25023 00001A3D EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 25024                                  
 25025                                  _$P_SCOM03:				;AN000;
 25026                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 25027                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25028                                  	;cmp	al,[es:bp+0]
 25029                                  	; 11/12/2022
 25030 00001A3F 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 25031 00001A43 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 25032                                  
 25033 00001A45 08C0                    	or	al,al			;AN000; end of line
 25034 00001A47 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 25035                                  
 25036                                  	; 12/12/2022
 25037                                  	;inc	si			;AN000; update operand pointer
 25038                                  	;inc	bp			;AN000;    and synonym pointer
 25039                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25040 00001A49 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 25041                                  
 25042                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 25043                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25044                                  	;cmp	al,[es:bp+0]
 25045                                  	; 11/12/2022
 25046 00001A4B 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 25047 00001A4F 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 25048                                  
 25049 00001A51 46                      	inc	si			;AN000; else, load next byte
 25050 00001A52 2E8A04                  	mov	al,[cs:si]		;AN000; and
 25051 00001A55 45                      	inc	bp			;AN000;
 25052                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25053                                  	;cmp	al,[es:bp+0]
 25054                                  	; 11/12/2022
 25055 00001A56 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 25056 00001A5A 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 25057                                  
 25058                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25059                                  	; 12/12/2022
 25060                                  _$P_SCOM01:
 25061 00001A5C 46                      	inc	si			;AN000; else update operand pointer
 25062 00001A5D 45                      	inc	bp			;AN000; 		and synonym pointer
 25063                                  ;_$P_SCOM01:				;AN000;
 25064 00001A5E EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 25065                                  
 25066                                  _$P_SCOM_Differ0:			;AN000;
 25067                                  ;IF SwSW				;AN000;(tm10)
 25068 00001A60 2EF606[1914]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 25069 00001A66 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 25070                                  
 25071                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25072                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 25073                                  	; 12/12/2022
 25074 00001A68 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 25075 00001A6D 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 25076                                  
 25077                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25078                                  	;cmp	byte [es:bp+0],_$P_NULL
 25079                                  	; 11/12/2022
 25080 00001A6F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 25081                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 25082 00001A74 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 25083                                  
 25084                                  _$P_not_applicable:			;AN000;(tm10)
 25085                                  ;ENDIF					;AN000;(tm10)
 25086                                  
 25087                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25088                                  					;AN000; ignore colon option specified ?
 25089                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 25090                                  	; 12/12/2022
 25091 00001A76 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25092                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25093                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 25094 00001A7A 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 25095                                  
 25096 00001A7C 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 25097 00001A7E 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 25098                                  
 25099                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25100                                  	;cmp	byte [es:bp+0],_$P_NULL
 25101                                  	; 11/12/2022
 25102 00001A80 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 25103 00001A85 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 25104                                  
 25105 00001A87 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 25106                                  
 25107                                  _$P_SCOM02:				;AN000;
 25108 00001A89 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 25109 00001A8B 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 25110                                  
 25111                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25112                                  	;cmp	byte [es:bp+0],_$P_Colon
 25113                                  	; 11/12/2022
 25114 00001A8D 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 25115 00001A92 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 25116                                  
 25117                                  _$P_SCOM_Differ: 			;AN000;
 25118 00001A94 F9                      	stc				;AN000; indicate not found
 25119 00001A95 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 25120                                  
 25121                                  _$P_SCOM_Same:				;AN000;
 25122                                  	; 12/12/2022
 25123                                  	; cf=0
 25124 00001A97 2E8936[1C14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 25125                                  	; 12/12/2022
 25126                                  	;clc				;AN000; indicate found
 25127                                  _$P_SCOM_Exit:				;AN000;
 25128 00001A9C 5E                      	pop	si			;AN000;
 25129 00001A9D 5A                      	pop	dx			;AN000;
 25130 00001A9E 5D                      	pop	bp			;AN000;
 25131 00001A9F 58                      	pop	ax			;AN000;
 25132 00001AA0 C3                      	retn
 25133                                  
 25134                                  ; 30/03/2019
 25135                                  
 25136                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 25137                                  
 25138                                  ;***********************************************************************
 25139                                  ; _$P_File_Format;
 25140                                  ;
 25141                                  ; Function:  Check if the input string is valid file spec format.
 25142                                  ;	     And set the result buffer.
 25143                                  ;
 25144                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25145                                  ;	     ES:BX -> CONTROL block
 25146                                  ;
 25147                                  ; Output:    None
 25148                                  ;
 25149                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 25150                                  ;
 25151                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 25152                                  ;	_$P_SaveSI_Cmpx(R)
 25153                                  ;***********************************************************************
 25154                                  
 25155                                  _$P_File_Format:
 25156 00001AA1 50                      	push	ax			;AN000;
 25157 00001AA2 57                      	push	di			;AN000;
 25158 00001AA3 56                      	push	si			;AN000;
 25159 00001AA4 2E8B3E[1A14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 25160                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 25161 00001AA9 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 25162 00001AAC 08C0                    	or	al,al			;AN000; end of line ?
 25163 00001AAE 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 25164                                  
 25165 00001AB0 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 25166 00001AB3 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 25167                                  
 25168 00001AB5 2EC606[B014]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 25169                                  					;AN033;AC034;; set error flag- bad char.
 25170 00001ABB 5E                      	pop	si			;AN033;
 25171 00001ABC 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 25172 00001AC0 5F                      	pop	di			;AN033;
 25173 00001AC1 EB3E                    	jmp	short _$P_FileF02	;AN033;
 25174                                  
 25175                                  _$P_FileF_Err:				;AN000;
 25176 00001AC3 5E                      	pop	si			;AN000;
 25177 00001AC4 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 25178 00001AC8 5F                      	pop	di			;AN000;
 25179                                  
 25180                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 25181                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 25182                                  	; 12/12/2022
 25183 00001AC9 26F60701                	test	byte [es:bx],_$P_Optional
 25184                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25185                                  	;test	word [es:bx],_$P_Optional
 25186 00001ACD 7532                    	jnz	short _$P_FileF02	;AN000;
 25187                                  
 25188 00001ACF 2EC706[0D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 25189 00001AD6 EB29                    	jmp	short _$P_FileF02	;AN000;
 25190                                  
 25191                                  _$P_FileF03:				;AN000;
 25192 00001AD8 58                      	pop	ax			;AN000; discard save si
 25193 00001AD9 56                      	push	si			;AN000; save new si
 25194                                  _$P_FileF_Loop1: 			;AN000;
 25195 00001ADA 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 25196 00001ADD 08C0                    	or	al,al			;AN000; end of line ?
 25197 00001ADF 741E                    	jz	short _$P_FileF_RLT	;AN000;
 25198                                  
 25199 00001AE1 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 25200 00001AE4 740B                    	je	short _$P_FileF00	;AN000;
 25201                                  
 25202 00001AE6 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 25203 00001AE9 7302                    	jnc	short _$P_FileF01	;AN000;
 25204 00001AEB 47                      	inc	di			;AN000; if yes, skip next byte
 25205 00001AEC 46                      	inc	si			;AN000;
 25206                                  _$P_FileF01:				;AN000;
 25207 00001AED 47                      	inc	di			;AN000;
 25208 00001AEE 46                      	inc	si			;AN000;
 25209 00001AEF EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 25210                                  ;
 25211                                  _$P_FileF00:				;AN000;
 25212 00001AF1 2EA2[1314]              	mov	[cs:_$P_Terminator],al	;AC034;
 25213 00001AF5 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 25214 00001AF9 47                      	inc	di			;AN000;
 25215 00001AFA 2E893E[0F14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 25216                                  _$P_FileF_RLT:				;AN000;
 25217 00001AFF 5E                      	pop	si			;AN000;
 25218 00001B00 5F                      	pop	di			;AN000;
 25219                                  _$P_FileF02:				;AN000;
 25220 00001B01 58                      	pop	ax			;AN000; (tm14)
 25221                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 25222                                  	; 14/08/2023
 25223 00001B02 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 25224 00001B05 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 25225                                  
 25226 00001B07 50                      	push	ax			;AN000;  (tm14)
 25227                                  	;mov	ah,_$P_No_Tag		;AN000; set
 25228                                  	;mov	al,_$P_File_Spec 	;AN000; result
 25229                                  	; 14/08/2023
 25230 00001B08 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 25231                                  					      ; set result
 25232 00001B0B E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 25233 00001B0E 58                      	pop	ax			;AN000;
 25234                                  
 25235                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 25236 00001B0F C3                      	retn				;AN000;
 25237                                  
 25238                                  ;***********************************************************************
 25239                                  ; _$P_FileSp_Chk
 25240                                  ;
 25241                                  ; Function:  Check if the input byte is one of file special characters
 25242                                  ;
 25243                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25244                                  ;	     AL = character code to be examineed
 25245                                  ;
 25246                                  ; Output:    ZF = 1 , AL is one of special characters
 25247                                  ;***********************************************************************
 25248                                  
 25249                                  _$P_FileSp_Chk:
 25250 00001B10 53                      	push	bx			;AN000;
 25251 00001B11 51                      	push	cx			;AN000;
 25252                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 25253                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 25254                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 25255                                  	; 07/09/2023
 25256 00001B12 BB[A714]                	mov	bx,_$P_FileSp_Char
 25257 00001B15 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 25258                                  _$P_FileSp_Loop: 			;AN000;
 25259 00001B18 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 25260 00001B1B 7404                    	je	short _$P_FileSp_Exit	;AN000;
 25261                                  
 25262 00001B1D 43                      	inc	bx			;AN000;
 25263 00001B1E E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 25264                                  
 25265 00001B20 41                      	inc	cx			;AN000; reset ZF
 25266                                  _$P_FileSp_Exit: 			;AN000;
 25267 00001B21 59                      	pop	cx			;AN000;
 25268 00001B22 5B                      	pop	bx			;AN000;
 25269 00001B23 C3                      	retn
 25270                                  
 25271                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 25272                                  
 25273                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 25274                                  
 25275                                  ;***********************************************************************
 25276                                  ; _$P_Drive_Format;
 25277                                  ;
 25278                                  ; Function:  Check if the input string is valid drive only format.
 25279                                  ;	     And set the result buffer.
 25280                                  ;
 25281                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25282                                  ;	     ES:BX -> CONTROL block
 25283                                  ;
 25284                                  ; Output:    None
 25285                                  ;
 25286                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 25287                                  ;
 25288                                  ; Vars: _$P_RC(W)
 25289                                  ;***********************************************************************
 25290                                  
 25291                                  _$P_Drive_Format:
 25292 00001B24 50                      	push	ax			;AN000;
 25293 00001B25 52                      	push	dx			;AN000;
 25294 00001B26 2E8A04                  	mov	al,[cs:si]		;AN000;
 25295 00001B29 08C0                    	or	al,al			;AN000; if null string
 25296 00001B2B 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 25297                                  
 25298 00001B2D E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 25299 00001B30 722A                    	jc	short _$P_Drv_Err	;AN000;
 25300                                  
 25301 00001B32 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 25302 00001B37 740D                    	je	short _$P_DrvF00	;AN000;
 25303                                  
 25304                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25305                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 25306                                  	; 12/12/2022
 25307 00001B39 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25308                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25309                                  	;test	word [es:bx],_$P_Ig_Colon
 25310 00001B3D 741D                    	jz	short _$P_Drv_Err	;AN000;
 25311                                  
 25312 00001B3F 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 25313 00001B44 7516                    	jne	short _$P_Drv_Err	;AN000;
 25314                                  
 25315                                  _$P_DrvF00:				;AN000;
 25316 00001B46 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 25317 00001B48 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 25318 00001B4A 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 25319                                  
 25320 00001B4C 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 25321 00001B4E 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 25322                                  
 25323 00001B50 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 25324 00001B52 88C2                    	mov	dl,al			;AN000; set
 25325                                  	;mov	ah,_$P_No_Tag		;AN000; result
 25326                                  	;mov	al,_$P_Drive		;AN000; buffer
 25327                                  	; 08/07/2023
 25328 00001B54 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 25329                                  					      ; set result buffer
 25330 00001B57 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 25331 00001B5A EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 25332                                  
 25333                                  _$P_Drv_Err:				;AN000;
 25334 00001B5C 2EC706[0D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 25335                                  _$P_Drv_Exit:				;AN000;
 25336 00001B63 5A                      	pop	dx			;AN000;
 25337 00001B64 58                      	pop	ax			;AN000;
 25338 00001B65 C3                      	retn				;AN000;
 25339                                  
 25340                                  ;ENDIF					;AN000;(of DrvSW)
 25341                                  
 25342                                  ;***********************************************************************
 25343                                  ; _$P_Skip_Delim;
 25344                                  ;
 25345                                  ; Function: Skip delimiters specified in the PARMS list, white space
 25346                                  ;	    and comma.
 25347                                  ;
 25348                                  ; Input:    DS:SI -> Command String
 25349                                  ;	    ES:DI -> Parameter List
 25350                                  ;
 25351                                  ; Output:   CY = 1 if the end of line encounterd
 25352                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 25353                                  ;	    AL = Last examineed character
 25354                                  ;
 25355                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 25356                                  ;
 25357                                  ; Vars:     _$P_Flags(R)
 25358                                  ;***********************************************************************
 25359                                  
 25360                                  _$P_Skip_Delim:
 25361                                  _$P_Skip_Delim_Loop:			;AN000;
 25362 00001B66 AC                      	lodsb				;AN000;
 25363 00001B67 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 25364 00001B6A 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 25365                                  
 25366 00001B6C E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 25367 00001B6F 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 25368                                  
 25369 00001B71 2EF606[1914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 25370 00001B77 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 25371                                  
 25372 00001B79 2EF606[1914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 25373                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 25374                                  	; 14/08/2023
 25375                                  	; cf=0
 25376 00001B7F 7505                    	jnz	short _$P_Skip_Delim_Exit
 25377 00001B81 C3                      	retn
 25378                                  
 25379                                  	;dec	si			;AN000; backup si for next call (tm08)
 25380                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 25381                                  	; 12/12/2022
 25382                                  	; cf=0
 25383                                  	; 14/08/2023
 25384                                  	;jmp	short _$P_Skip_Delim_Exit
 25385                                  
 25386                                  _$P_Skip_Delim_CY:			;AN000;
 25387 00001B82 F9                      	stc				;AN000; indicate EOL
 25388 00001B83 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 25389                                  
 25390                                  _$P_Skip_Delim_NCY:			;AN000;
 25391 00001B85 F8                      	clc				;AN000; indicate non delim
 25392                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 25393 00001B86 4E                      	dec	si			;AN000;  backup index pointer
 25394                                  	; 14/08/2023
 25395                                  	; 12/12/2022
 25396                                  ;_$P_Exit_At_Extra:	 ; cf=0
 25397 00001B87 C3                      	retn				;AN000;
 25398                                  
 25399                                  	; 12/12/2022
 25400                                  ;_$P_Exit_At_Extra:			;AN000;
 25401                                  	;clc				;AN000; indicate extra delim
 25402                                  	;retn				;AN000;
 25403                                  
 25404                                  ;***********************************************************************
 25405                                  ; _$P_Chk_EOL;
 25406                                  ;
 25407                                  ; Function: Check if AL is one of End of Line characters.
 25408                                  ;
 25409                                  ; Input:    AL = character code
 25410                                  ;	    ES:DI -> Parameter List
 25411                                  ;
 25412                                  ; Output:   ZF = 1 if one of End of Line characters
 25413                                  ;**********************************************************************
 25414                                  
 25415                                  _$P_Chk_EOL:
 25416 00001B88 53                      	push	bx			;AN000;
 25417 00001B89 51                      	push	cx			;AN000;
 25418 00001B8A 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25419 00001B8C 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25420                                  
 25421 00001B8E 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25422 00001B90 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25423                                  
 25424                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25425 00001B92 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25426 00001B94 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25427                                  ;ENDIF					;AN028;
 25428                                  
 25429 00001B96 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25430                                  					;AN000; EOL character specified ?
 25431 00001B9B 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25432                                  
 25433 00001B9D 31DB                    	xor	bx,bx			;AN000;
 25434 00001B9F 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25435                                  					;AN000; get length of delimiter list
 25436 00001BA3 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25437                                  	; 14/08/2023
 25438 00001BA6 31C9                    	xor	cx,cx ; *
 25439 00001BA8 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25440 00001BAC 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25441                                  	; 14/08/2023
 25442                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25443                                  	;xor	ch,ch ; *
 25444 00001BAE 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25445                                  _$P_Chk_EOL_Loop:			;AN000;
 25446 00001BB1 43                      	inc	bx			;AN000;
 25447 00001BB2 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25448 00001BB5 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25449 00001BB7 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25450                                  	; 14/08/2023
 25451                                  	; cx=0
 25452                                  _$P_Chk_EOL_NZ:				;AN000;
 25453                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25454                                  	; 14/08/2023
 25455 00001BB9 41                      	inc	cx  ; zf=0 (cx=1) ; *
 25456                                  _$P_Chk_EOL_Exit:			;AN000;
 25457 00001BBA 59                      	pop	cx			;AN000;
 25458 00001BBB 5B                      	pop	bx			;AN000;
 25459 00001BBC C3                      	retn
 25460                                  
 25461                                  ;***********************************************************************
 25462                                  ; _$P_Chk_Delim;
 25463                                  ;
 25464                                  ; Function: Check if AL is one of delimiter characters.
 25465                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25466                                  ;	    blanks.
 25467                                  ;
 25468                                  ; Input:    AL = character code
 25469                                  ;	    DS:SI -> Next Character
 25470                                  ;	    ES:DI -> Parameter List
 25471                                  ;
 25472                                  ; Output:   ZF = 1 if one of delimiter characters
 25473                                  ;	    SI points to the next character
 25474                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25475                                  ;***********************************************************************
 25476                                  
 25477                                  _$P_Chk_Delim:
 25478 00001BBD 53                      	push	bx			;AN000;
 25479 00001BBE 51                      	push	cx			;AN000;
 25480 00001BBF 2EC606[1314]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25481                                  					;AC034; Assume terminated by space
 25482                                  	;and	byte [cs:_$P_Flags20,0DFh
 25483 00001BC5 2E8026[1914]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25484 00001BCB 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25485 00001BCD 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25486                                  
 25487 00001BCF 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25488 00001BD1 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25489                                  
 25490 00001BD3 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25491 00001BD5 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25492                                  
 25493                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25494                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25495                                  ;        Erdogan Tan - 14/08/2023
 25496                                  ;_$P_Chk_Delim00:
 25497                                  %if 0
 25498                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25499                                  _$P_Chk_Delim00: 			;AN000;
 25500                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25501                                  	jne	short _$P_Chk_Delim01	;AN000;
 25502                                  
 25503                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25504                                  	jne	short _$P_Chk_Delim01	;AN000;
 25505                                  
 25506                                  	mov	al,_$P_Space		;AN000;
 25507                                  	inc	si			;AN000; make si point to next character
 25508                                  	cmp	al,al			;AN000; Set ZF
 25509                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25510                                  %endif
 25511                                  
 25512                                  _$P_Chk_Delim01: 			;AN000;
 25513 00001BD7 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25514                                  					;AN000; delimiter character specified ?
 25515 00001BDC 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25516                                  
 25517                                  	;xor	cx,cx			;AN000;
 25518 00001BDE 30ED                    	xor	ch,ch
 25519                                  	;mov	cl,[es:di+3]
 25520 00001BE0 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25521                                  					;AN000; get length of delimiter list
 25522                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25523                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25524                                  	; 14/08/2023
 25525 00001BE4 E30B                    	jcxz	_$P_Chk_Delim_NZ
 25526                                  
 25527 00001BE6 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25528                                  _$P_Chk_Delim_Loop:			;AN000;
 25529 00001BE9 43                      	inc	bx			;AN000;
 25530 00001BEA 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25531 00001BED 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25532                                  
 25533 00001BEF E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25534                                  
 25535                                  _$P_Chk_Delim_NZ:			;AN000;
 25536                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25537                                  	; 14/08/2023
 25538                                  	; cx=0 here
 25539 00001BF1 41                      	inc	cx ; cx=1, zf=0
 25540                                  _$P_Chk_Delim_Exit:			;AN000;
 25541                                  _$P_ChkDfin:				;AN000;
 25542 00001BF2 59                      	pop	cx			;AN000;
 25543 00001BF3 5B                      	pop	bx			;AN000;
 25544 00001BF4 C3                      	retn				;AN000;
 25545                                  
 25546                                  _$P_Chk_Delim_Exit0:			;AN000;
 25547 00001BF5 2EA2[1314]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25548 00001BF9 2EF606[1914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25549 00001BFF 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25550                                  
 25551 00001C01 2E800E[1914]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25552                                  					;AC034; flag terminated extra delimiter or comma
 25553                                  _$P_No_Set_Extra:			;AN027;
 25554 00001C07 38C0                    	cmp	al,al			;AN000; set ZF
 25555 00001C09 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25556                                  
 25557                                  
 25558                                  ;***********************************************************************
 25559                                  ; _$P_Chk_Switch;
 25560                                  ;
 25561                                  ; Function: Check if AL is the switch character not in first position of
 25562                                  ;	    _$P_STRING_BUF
 25563                                  ;
 25564                                  ; Input:    AL = character code
 25565                                  ;	    BX = current pointer within _$P_String_Buf
 25566                                  ;	    SI =>next char on command line (following the one in AL)
 25567                                  ;
 25568                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 25569                                  ;		 position, and has no chance of being part of a date string,
 25570                                  ;		 i.e. should be treated as a delimiter.
 25571                                  
 25572                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25573                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25574                                  ;		 should not be treated as a delimiter.
 25575                                  ;
 25576                                  ; Vars:  _$P_Terminator(W)
 25577                                  
 25578                                  ; Use:	 _$P_0099
 25579                                  ;***********************************************************************
 25580                                  
 25581                                  _$P_Chk_Switch:
 25582                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25583                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25584                                  	; 14/08/2023
 25585 00001C0B BD[2214]                	mov	bp,_$P_STRING_BUF
 25586                                  
 25587                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25588 00001C0E 39EB                    	cmp	bx,bp			;AN000;
 25589 00001C10 7406                    	je	short _$P_STRUC_L2	;AN000;
 25590                                  
 25591                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25592 00001C12 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25593 00001C14 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25594                                  
 25595 00001C16 F9                      	stc				;AN020;not in first position and is slash
 25596                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25597                                  	; 12/12/2022
 25598 00001C17 C3                      	retn
 25599                                  
 25600                                  ; 12/12/2022
 25601                                  ;_$P_STRUC_L5:				;AN000;
 25602                                  ;	CLC				;AN020;not a slash
 25603                                  ;;	    .ENDIF			;AN020;
 25604                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25605                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25606                                  
 25607                                  _$P_STRUC_L2:				;AN000;
 25608                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 25609 00001C18 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25610 00001C1A 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25611                                  
 25612 00001C1C 2E800E[1914]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 25613                                  ;	    .ENDIF			;AN020;
 25614                                  
 25615                                  	; 12/12/2022
 25616                                  	; cf=0
 25617                                  	;retn
 25618                                  
 25619                                  _$P_STRUC_L5:
 25620                                  	; 12/12/2022
 25621                                  _$P_STRUC_L12:				;AN000;
 25622 00001C22 F8                      	clc				;AN020;CF=0 indicating first char
 25623                                  ;	.ENDIF				;AN020;
 25624                                  _$P_STRUC_L1:				;AN000;
 25625 00001C23 C3                      	retn				;AN000;
 25626                                  
 25627                                  ;**************************************************************************
 25628                                  ; _$P_Chk_DBCS:
 25629                                  ;
 25630                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25631                                  ;
 25632                                  ;  Input:
 25633                                  ;	  AL	= Code to be examineed
 25634                                  ;
 25635                                  ;  Output:
 25636                                  ;	  If CF is on then a lead byte of DBCS
 25637                                  ;
 25638                                  ; Use: INT 21h w/AH=63
 25639                                  ;
 25640                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25641                                  ;***************************************************************************
 25642                                  
 25643                                  _$P_Chk_DBCS:
 25644 00001C24 1E                      	push	ds			;AN000;
 25645 00001C25 56                      	push	si			;AN000;
 25646 00001C26 53                      	push	bx			;AN000; (tm11)
 25647                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25648                                  	;jne	short _$P_DBCS00	;AN000;
 25649                                  	; 14/08/2023
 25650 00001C27 2E8B36[1614]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25651 00001C2C 21F6                    	and	si,si ; 0 ?
 25652 00001C2E 7525                    	jnz	short _$P_DBCS00 ; already set
 25653 00001C30 50                      	push	ax			;AN000;
 25654 00001C31 1E                      	push	ds			;AN000; (tm11)
 25655 00001C32 51                      	push	cx			;AN000;
 25656 00001C33 52                      	push	dx			;AN000;
 25657 00001C34 57                      	push	di			;AN000;
 25658 00001C35 55                      	push	bp			;AN000;
 25659 00001C36 06                      	push	es			;AN000;
 25660                                  	; si = 0 ; 14/08/2023
 25661                                  	;xor	si,si			;AN000;
 25662 00001C37 8EDE                    	mov	ds,si ; 0		;AN000;
 25663 00001C39 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25664 00001C3C CD21                    	int	21h			;AN000;
 25665                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25666 00001C3E 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25667 00001C40 09DB                    	or	bx,bx			;AN000; (tm11)
 25668 00001C42 07                      	pop	es			;AN000;
 25669 00001C43 5D                      	pop	bp			;AN000;
 25670 00001C44 5F                      	pop	di			;AN000;
 25671 00001C45 5A                      	pop	dx			;AN000;
 25672 00001C46 59                      	pop	cx			;AN000;
 25673 00001C47 1F                      	pop	ds			;AN000; (tm11)
 25674 00001C48 58                      	pop	ax			;AN000;
 25675 00001C49 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25676                                  _$P_DBCS02:				;AN000;
 25677 00001C4B 2E8936[1414]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25678 00001C50 2E891E[1614]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25679                                  _$P_DBCS00:				;AN000;
 25680                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25681                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25682                                  	; 14/08/2023
 25683 00001C55 2EC536[1414]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25684                                  _$P_DBCS_LOOP:				;AN000;
 25685 00001C5A 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25686 00001C5D 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25687 00001C5F 3A04                    	cmp	al,[si] 		;AN000;
 25688 00001C61 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25689 00001C63 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25690 00001C66 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25691 00001C68 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25692 00001C69 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25693                                  _$P_DBCS01:				;AN000;
 25694 00001C6B 46                      	inc	si			;AC035; add '2' to
 25695 00001C6C 46                      	inc	si			;AC035;  SI reg
 25696                                  					;AN000; get next vector
 25697 00001C6D EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25698                                  _$P_NON_DBCS:				;AN000;
 25699                                  	; 12/12/2022
 25700                                  	; cf=0
 25701                                  	;clc				;AN000; indicate SBCS
 25702                                  _$P_DBCS_EXIT:				;AN000;
 25703 00001C6F 5B                      	pop	bx			;AN000; (tm11)
 25704 00001C70 5E                      	pop	si			;AN000;
 25705 00001C71 1F                      	pop	ds			;AN000;
 25706 00001C72 C3                      	retn				;AN000;
 25707                                  
 25708                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25709                                  ; ======================================================================
 25710                                  ; 27/03/2019 - Retro DOS v4.0
 25711                                  
 25712                                  ;control block definitions for parser.
 25713                                  ;-----------------------------------------------------------------------
 25714                                  ; buffer = [n | n,m] {/e}
 25715                                  
 25716                                  ; 30/03/2019
 25717                                  
 25718                                  struc p_parms
 25719 00000000 ????                    	resw	1	; dw ?
 25720 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25721 00000003 ??                      	resb	1	; db 1	; length is 1
 25722 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25723                                  .size:
 25724                                  endstruc
 25725                                  
 25726                                  struc p_pos
 25727 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25728 00000002 ????                    	resw	1	; dw ?	; function
 25729 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25730                                  
 25731                                  ; note: by defining result_val before this structure, we could remove
 25732                                  ;  the "result_val" from every structure invocation
 25733                                  
 25734 00000006 ????                    	resw	1	; dw ?	; value list
 25735 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25736                                  .size:
 25737                                  endstruc
 25738                                  
 25739                                  struc	p_range
 25740 00000000 ??                      	resb	1	; db 1	; range definition
 25741 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25742 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25743 00000003 ????????                	resd	1	; dd ?	; numeric min
 25744 00000007 ????????                	resd	1	; dd ?	; numeric max
 25745                                  .size:
 25746                                  endstruc
 25747                                  
 25748                                  ;-----------------------------------------------------------------------
 25749                                  
 25750                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25751                                  	; (SYSINIT:1F48h)
 25752                                  
 25753                                  ; buffer = [n | n,m] {/e}
 25754                                  
 25755                                  ;buf_parms p_parms <buf_parmsx>
 25756                                  buf_parms: 
 25757 00001C73 [781C]                  	dw	buf_parmsx
 25758 00001C75 01                      	db	1	; an extra delimiter list
 25759 00001C76 01                      	db	1	; length is 1
 25760 00001C77 3B                      	db	';'	; delimiter
 25761                                  
 25762                                  buf_parmsx:
 25763 00001C78 0102[821C][961C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25764 00001C7E 01                      	db	1			; one switch
 25765 00001C7F [AA1C]                  	dw	sw_x_ctrl
 25766 00001C81 00                      	db	0			; no keywords
 25767                                  
 25768                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25769                                  buf_pos1:
 25770 00001C82 0080                    	dw	8000h	; numeric value??
 25771 00001C84 0000                    	dw	0	; function
 25772 00001C86 [BC1C]                  	dw	result_val ; result value buffer	
 25773 00001C88 [8B1C]                  	dw	buf_range_1 ; value list
 25774 00001C8A 00                      	db	0  	; no switches/keywords
 25775                                  
 25776                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25777                                  buf_range_1:
 25778 00001C8B 01                      	db	1	; range definition
 25779 00001C8C 01                      	db	1	; 1 definition of range
 25780 00001C8D 01                      	db	1	; item tag for this range
 25781 00001C8E 01000000                	dd	1	; numeric min
 25782 00001C92 63000000                	dd	99	; numeric max
 25783                                  
 25784                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25785                                  buf_pos2:
 25786 00001C96 0180                    	dw	8001h
 25787 00001C98 0000                    	dw	0
 25788 00001C9A [BC1C]                  	dw	result_val	
 25789 00001C9C [9F1C]                  	dw	buf_range_2
 25790 00001C9E 00                      	db	0
 25791                                  
 25792                                  ;buf_range_2 p_range <,,,0,8>
 25793                                  buf_range_2:
 25794 00001C9F 01                      	db	1
 25795 00001CA0 01                      	db	1
 25796 00001CA1 01                      	db	1
 25797 00001CA2 00000000                	dd	0
 25798 00001CA6 08000000                	dd	8
 25799                                  
 25800                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25801                                  sw_x_ctrl:
 25802 00001CAA 0000                    	dw	0
 25803 00001CAC 0000                    	dw	0
 25804 00001CAE [BC1C]                  	dw	result_val	
 25805 00001CB0 [BB1C]                  	dw	noval
 25806 00001CB2 01                      	db	1	; 1 switch
 25807                                  	
 25808                                  switch_x:
 25809 00001CB3 2F5800                  	db	'/X',0		; M016
 25810                                  
 25811                                  p_buffers:
 25812 00001CB6 0000                    	dw	0	; local variables
 25813                                  p_h_buffers:
 25814 00001CB8 0000                    	dw	0
 25815                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25816                                  p_buffer_slash_x:
 25817 00001CBA 00                      	db	0 ; 31/03/2019
 25818                                  
 25819                                  ;-- common definitions -------------------------------------------------
 25820                                  
 25821 00001CBB 00                      noval:	db	0
 25822                                  
 25823                                  result_val: 	;label	byte
 25824 00001CBC 00                      	db	0		; type returned
 25825                                  result_val_itag:
 25826 00001CBD 00                      	db	0		; item tag returned
 25827                                  result_val_swoff:
 25828 00001CBE 0000                    	dw	0		; es:offset of the switch defined
 25829                                  rv_byte:	;label	byte
 25830 00001CC0 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25831                                  
 25832                                  ;-----------------------------------------------------------------------
 25833                                  
 25834                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25835                                  	; (SYSINIT:1F99h)
 25836                                  
 25837                                  ; break = [ on | off ]
 25838                                  
 25839                                  ;brk_parms p_parms  <brk_parmsx>
 25840                                  brk_parms:
 25841 00001CC4 [C91C]                  	dw	brk_parmsx
 25842 00001CC6 01                      	db	1	; an extra delimiter list
 25843 00001CC7 01                      	db	1	; length is 1
 25844 00001CC8 3B                      	db	';'	; delimiter
 25845                                  
 25846                                  brk_parmsx:
 25847 00001CC9 0101[CF1C]              	dw	101h,brk_pos	; min,max = 1 positional
 25848 00001CCD 00                      	db	0		; no switches
 25849 00001CCE 00                      	db	0		; no keywords
 25850                                  
 25851                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25852                                  brk_pos:
 25853 00001CCF 0020                    	dw	2000h
 25854 00001CD1 0000                    	dw	0
 25855 00001CD3 [BC1C]                  	dw	result_val	
 25856 00001CD5 [D81C]                  	dw	on_off_string
 25857 00001CD7 00                      	db	0
 25858                                  
 25859                                  on_off_string:	;label	byte
 25860 00001CD8 03                      	db	3		; signals that there is a string choice
 25861 00001CD9 00                      	db	0		; no range definition
 25862 00001CDA 00                      	db	0		; no numeric values choice
 25863 00001CDB 02                      	db	2		; 2 strings for choice
 25864 00001CDC 01                      	db	1		; the 1st string tag
 25865 00001CDD [E21C]                  	dw	on_string
 25866 00001CDF 02                      	db	2		; the 2nd string tag
 25867 00001CE0 [E51C]                  	dw	off_string
 25868                                  
 25869                                  on_string:
 25870 00001CE2 4F4E00                  	db	"ON",0
 25871                                  off_string:
 25872 00001CE5 4F464600                	db	"OFF",0
 25873                                  
 25874                                  p_ctrl_break:
 25875 00001CE9 00                      	db	0	; local variable
 25876                                  
 25877                                  ;-----------------------------------------------------------------------
 25878                                  
 25879                                  	; 27/10/2022
 25880                                  
 25881                                  ; country = n {m {path}}
 25882                                  ; or
 25883                                  ; country = n,,path
 25884                                  
 25885                                  ;cntry_parms p_parms <cntry_parmsx>
 25886                                  cntry_parms:
 25887 00001CEA [EF1C]                  	dw	cntry_parmsx
 25888 00001CEC 01                      	db	1
 25889 00001CED 01                      	db	1
 25890 00001CEE 3B                      	db	';'
 25891                                  	
 25892                                  cntry_parmsx:
 25893 00001CEF 0103[F91C][0D1D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25893 00001CF5 [161D]             
 25894 00001CF7 00                      	db	0		; no switches
 25895 00001CF8 00                      	db	0		; no keywords
 25896                                  
 25897                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25898                                  cntry_pos1:
 25899 00001CF9 0080                    	dw	8000h
 25900 00001CFB 0000                    	dw	0
 25901 00001CFD [BC1C]                  	dw	result_val	
 25902 00001CFF [021D]                  	dw	cc_range
 25903 00001D01 00                      	db	0
 25904                                  
 25905                                  ;cc_range p_range <,,,1,999>
 25906                                  cc_range:
 25907 00001D02 01                      	db	1
 25908 00001D03 01                      	db	1
 25909 00001D04 01                      	db	1
 25910 00001D05 01000000                	dd	1
 25911 00001D09 E7030000                	dd	999
 25912                                  
 25913                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25914                                  cntry_pos2:
 25915 00001D0D 0180                    	dw	8001h
 25916 00001D0F 0000                    	dw	0
 25917 00001D11 [BC1C]                  	dw	result_val	
 25918 00001D13 [021D]                  	dw	cc_range
 25919 00001D15 00                      	db	0
 25920                                  
 25921                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25922                                  cntry_pos3:
 25923 00001D16 0102                    	dw	201h
 25924 00001D18 0000                    	dw	0
 25925 00001D1A [BC1C]                  	dw	result_val	
 25926 00001D1C [BB1C]                  	dw	noval
 25927 00001D1E 00                      	db	0	
 25928                                  
 25929                                  p_cntry_code:
 25930 00001D1F 0000                    	dw	0	; local variable
 25931                                  p_code_page:
 25932 00001D21 0000                    	dw	0	; local variable
 25933                                  
 25934                                  ;-----------------------------------------------------------------------
 25935                                  
 25936                                  	; 27/10/2022
 25937                                  
 25938                                  ; files = n
 25939                                  
 25940                                  ;files_parms p_parms <files_parmsx>
 25941                                  files_parms:
 25942 00001D23 [281D]                  	dw	files_parmsx
 25943 00001D25 01                      	db	1
 25944 00001D26 01                      	db	1
 25945 00001D27 3B                      	db	';'
 25946                                  
 25947                                  files_parmsx:
 25948 00001D28 0101[2E1D]              	dw	101h,files_pos	; min,max 1 positional
 25949 00001D2C 00                      	db	0		; no switches
 25950 00001D2D 00                      	db	0		; no keywords
 25951                                  
 25952                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25953                                  files_pos:
 25954 00001D2E 0080                    	dw	8000h
 25955 00001D30 0000                    	dw	0
 25956 00001D32 [BC1C]                  	dw	result_val	
 25957 00001D34 [371D]                  	dw	files_range
 25958 00001D36 00                      	db	0
 25959                                  
 25960                                  ;files_range p_range <,,,8,255>
 25961                                  files_range:
 25962 00001D37 01                      	db	1
 25963 00001D38 01                      	db	1
 25964 00001D39 01                      	db	1
 25965 00001D3A 08000000                	dd	8
 25966 00001D3E FF000000                	dd	255
 25967                                  
 25968                                  p_files:
 25969 00001D42 00                      	db	0		; local variable
 25970                                  
 25971                                  ;-----------------------------------------------------------------------
 25972                                  
 25973                                  	; 27/10/2022
 25974                                  
 25975                                  ; fcbs = n,m
 25976                                  
 25977                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25978                                  fcbs_parms:
 25979 00001D43 [481D]                  	dw	fcbs_parmsx
 25980 00001D45 01                      	db	1
 25981 00001D46 01                      	db	1
 25982 00001D47 3B                      	db	';'
 25983                                  
 25984                                  fcbs_parmsx:
 25985 00001D48 0102[501D][641D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25986 00001D4E 00                      	db	0		; no switches
 25987 00001D4F 00                      	db	0		; no keywords
 25988                                  
 25989                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25990                                  fcbs_pos_1:
 25991 00001D50 0080                    	dw	8000h
 25992 00001D52 0000                    	dw	0
 25993 00001D54 [BC1C]                  	dw	result_val	
 25994 00001D56 [591D]                  	dw	fcbs_range
 25995 00001D58 00                      	db	0
 25996                                  
 25997                                  ;fcbs_range p_range <,,,1,255>
 25998                                  fcbs_range:
 25999 00001D59 01                      	db	1
 26000 00001D5A 01                      	db	1
 26001 00001D5B 01                      	db	1
 26002 00001D5C 01000000                	dd	1
 26003 00001D60 FF000000                	dd	255
 26004                                  
 26005                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 26006                                  fcbs_pos_2:
 26007 00001D64 0080                    	dw	8000h
 26008 00001D66 0000                    	dw	0
 26009 00001D68 [BC1C]                  	dw	result_val	
 26010 00001D6A [6D1D]                  	dw	fcbs_keep_range
 26011 00001D6C 00                      	db	0
 26012                                  
 26013                                  ;fcbs_keep_range p_range <,,,0,255>
 26014                                  fcbs_keep_range:
 26015 00001D6D 01                      	db	1
 26016 00001D6E 01                      	db	1
 26017 00001D6F 01                      	db	1
 26018 00001D70 00000000                	dd	0
 26019 00001D74 FF000000                	dd	255
 26020                                  
 26021 00001D78 00                      p_fcbs:	db	0		; local variable
 26022 00001D79 00                      p_keep:	db	0		; local variable
 26023                                  
 26024                                  ;-----------------------------------------------------------------------
 26025                                  
 26026                                  	; 27/10/2022
 26027                                  
 26028                                  ; lastdrive = x
 26029                                  
 26030                                  ;ldrv_parms p_parms <ldrv_parmsx>
 26031                                  ldrv_parms:
 26032 00001D7A [7F1D]                  	dw	ldrv_parmsx
 26033 00001D7C 01                      	db	1
 26034 00001D7D 01                      	db	1
 26035 00001D7E 3B                      	db	';'
 26036                                  
 26037                                  ldrv_parmsx:
 26038 00001D7F 0101[851D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 26039 00001D83 00                      	db	0		; no switches
 26040 00001D84 00                      	db	0		; no keywords
 26041                                  
 26042                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 26043                                  ldrv_pos:				    ; remove colon at end
 26044 00001D85 1001                    	dw	110h
 26045 00001D87 1000                    	dw	10h
 26046 00001D89 [BC1C]                  	dw	result_val	
 26047 00001D8B [BB1C]                  	dw	noval
 26048 00001D8D 00                      	db	0
 26049                                  	
 26050 00001D8E 00                      p_ldrv:	db	0		; local variable
 26051                                  
 26052                                  ;-----------------------------------------------------------------------
 26053                                  
 26054                                  	; 27/10/2022
 26055                                  
 26056                                  ; stacks = n,m
 26057                                  
 26058                                  ;stks_parms p_parms <stks_parmsx>
 26059                                  stks_parms:
 26060 00001D8F [941D]                  	dw	stks_parmsx
 26061 00001D91 01                      	db	1
 26062 00001D92 01                      	db	1
 26063 00001D93 3B                      	db	';'
 26064                                  
 26065                                  stks_parmsx:
 26066 00001D94 0202[9C1D][B01D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 26067 00001D9A 00                      	db	0		; no switches
 26068 00001D9B 00                      	db	0		; no keywords
 26069                                  
 26070                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 26071                                  stks_pos_1:
 26072 00001D9C 0080                    	dw	8000h
 26073 00001D9E 0000                    	dw	0
 26074 00001DA0 [BC1C]                  	dw	result_val	
 26075 00001DA2 [A51D]                  	dw	stks_range
 26076 00001DA4 00                      	db	0
 26077                                  
 26078                                  ;stks_range p_range <,,,0,64>
 26079                                  stks_range:
 26080 00001DA5 01                      	db	1
 26081 00001DA6 01                      	db	1
 26082 00001DA7 01                      	db	1
 26083 00001DA8 00000000                	dd	0
 26084 00001DAC 40000000                	dd	64
 26085                                  
 26086                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 26087                                  stks_pos_2:
 26088 00001DB0 0080                    	dw	8000h
 26089 00001DB2 0000                    	dw	0
 26090 00001DB4 [BC1C]                  	dw	result_val	
 26091 00001DB6 [B91D]                  	dw	stk_size_range
 26092 00001DB8 00                      	db	0
 26093                                  
 26094                                  ;stk_size_range p_range <,,,0,512>
 26095                                  stk_size_range:
 26096 00001DB9 01                      	db	1
 26097 00001DBA 01                      	db	1
 26098 00001DBB 01                      	db	1
 26099 00001DBC 00000000                	dd	0
 26100 00001DC0 00020000                	dd	512	
 26101                                  
 26102                                  p_stack_count:
 26103 00001DC4 0000                    	dw	0	; local variable
 26104                                  p_stack_size:
 26105 00001DC6 0000                    	dw	0	; local variable
 26106                                  
 26107                                  ;-----------------------------------------------------------------------
 26108                                  
 26109                                  	; 27/10/2022
 26110                                  
 26111                                  ; multitrack = [ on | off ]
 26112                                  
 26113                                  ;mtrk_parms p_parms <mtrk_parmsx>
 26114                                  mtrk_parms:
 26115 00001DC8 [CD1D]                  	dw	mtrk_parmsx
 26116 00001DCA 01                      	db	1
 26117 00001DCB 01                      	db	1
 26118 00001DCC 3B                      	db	';'
 26119                                  
 26120                                  mtrk_parmsx:
 26121 00001DCD 0101[D31D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 26122 00001DD1 00                      	db	0		; no switches
 26123 00001DD2 00                      	db	0		; no keywords
 26124                                  
 26125                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 26126                                  mtrk_pos:
 26127 00001DD3 0020                    	dw	2000h
 26128 00001DD5 0000                    	dw	0
 26129 00001DD7 [BC1C]                  	dw	result_val	
 26130 00001DD9 [D81C]                  	dw	on_off_string
 26131 00001DDB 00                      	db	0
 26132                                  
 26133 00001DDC 00                      p_mtrk:	db	0		; local variable
 26134                                  
 26135                                  ;-----------------------------------------------------------------------
 26136                                  
 26137                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26138                                  	; (SYSINIT:20B2h)
 26139                                  
 26140                                  ; switches=/k
 26141                                  
 26142                                  ;swit_parms p_parms <swit_parmsx>
 26143                                  swit_parms:
 26144 00001DDD [E21D]                  	dw	swit_parmsx
 26145 00001DDF 01                      	db	1
 26146 00001DE0 01                      	db	1
 26147 00001DE1 3B                      	db	';'
 26148                                  
 26149                                  swit_parmsx:
 26150 00001DE2 0000                    	dw	0		; no positionals
 26151                                  	;db	5               ; # of switches
 26152                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26153 00001DE4 03                      	db	3
 26154 00001DE5 [EC1D]                  	dw	swit_k_ctrl	; /k control
 26155                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 26156                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 26157 00001DE7 [F81D]                  	dw	swit_t_ctrl     ; /t control
 26158 00001DE9 [041E]                  	dw	swit_w_ctrl     ; /w control
 26159 00001DEB 00                      	db	0		; no keywords
 26160                                  
 26161                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26162                                  swit_k_ctrl:
 26163 00001DEC 00000000[BC1C]-         	dw	0,0,result_val,noval
 26163 00001DF2 [BB1C]             
 26164 00001DF4 01                      	db	1
 26165 00001DF5 2F4B00                  swit_k:	db	'/K',0
 26166                                  
 26167                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26168                                  ;
 26169                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26170                                  ;swit_n_ctrl:
 26171                                  ;	dw	0,0,result_val,noval
 26172                                  ;	db	1
 26173                                  ;swit_n: db	'/N',0
 26174                                  ;
 26175                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26176                                  ;swit_f_ctrl:
 26177                                  ;	dw	0,0,result_val,noval
 26178                                  ;	db	1
 26179                                  ;swit_f: db 	'/F',0
 26180                                  
 26181                                  	; 27/10/2022
 26182                                  
 26183                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 26184                                  swit_t_ctrl:
 26185 00001DF8 00000000[BC1C]-         	dw	0,0,result_val,noval
 26185 00001DFE [BB1C]             
 26186 00001E00 01                      	db	1
 26187 00001E01 2F5400                  swit_t:	db	'/T',0			   ;				M059
 26188                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 26189                                  swit_w_ctrl:
 26190 00001E04 00000000[BC1C]-         	dw	0,0,result_val,noval
 26190 00001E0A [BB1C]             
 26191 00001E0C 01                      	db	1
 26192 00001E0D 2F5700                  swit_w:	db	'/W',0			   ;				M063
 26193                                  
 26194                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 26195                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 26196                                  ;   in the above table to prevent the parsing code from complaining about them
 26197                                  
 26198 00001E10 00                      p_swit_k:	db     0	; local variable
 26199 00001E11 00                      p_swit_t:	db     0	; local variable			M059
 26200 00001E12 00                      p_swit_w:	db     0	; local variable			M063
 26201                                  
 26202                                  ;-----------------------------------------------------------------------
 26203                                  
 26204                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26205                                  	; (SYSINIT:20E8h)
 26206                                  
 26207                                  ; DOS = [ high | low ]
 26208                                  
 26209                                  ;dos_parms p_parms  <dos_parmsx>
 26210                                  dos_parms:
 26211 00001E13 [181E]                  	dw	dos_parmsx
 26212 00001E15 01                      	db	1
 26213 00001E16 01                      	db	1
 26214 00001E17 3B                      	db	';'
 26215                                  dos_parmsx:
 26216 00001E18 01                      	db	1		; min parameters
 26217 00001E19 02                      	db	2		; max parameters
 26218 00001E1A [201E]                  	dw	dos_pos		; 
 26219 00001E1C [201E]                  	dw	dos_pos		; 
 26220 00001E1E 00                      	db	0		; no switches
 26221 00001E1F 00                      	db	0		; no keywords
 26222                                  
 26223                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26224                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26225                                  dos_pos:
 26226 00001E20 00200000[BC1C]-         	dw	2000h,0,result_val,dos_strings
 26226 00001E26 [321E]             
 26227 00001E28 00                      	db	0
 26228 00001E29 00200000[BC1C]-         	dw	2000h,0,result_val,dos_strings
 26228 00001E2F [321E]             
 26229 00001E31 00                      	db	0	
 26230                                  
 26231                                  dos_strings:	;label	byte
 26232 00001E32 03                      	db	3		; signals that there is a string choice
 26233 00001E33 00                      	db	0		; no range definition
 26234 00001E34 00                      	db	0		; no numeric values choice
 26235 00001E35 04                      	db	4		; 4 strings for choice
 26236 00001E36 01                      	db	1		; the 1st string tag
 26237 00001E37 [421E]                  	dw	hi_string
 26238 00001E39 02                      	db	2		; the 2nd string tag
 26239 00001E3A [471E]                  	dw	lo_string
 26240 00001E3C 03                      	db	3
 26241 00001E3D [4B1E]                  	dw	umb_string
 26242 00001E3F 04                      	db	4
 26243 00001E40 [4F1E]                  	dw	noumb_string
 26244                                  
 26245 00001E42 4849474800              hi_string:	db	"HIGH",0
 26246 00001E47 4C4F5700                lo_string:	db	"LOW",0
 26247 00001E4B 554D4200                umb_string:	db	"UMB",0
 26248 00001E4F 4E4F554D4200            noumb_string:	db	"NOUMB",0
 26249                                  
 26250 00001E55 00                      p_dos_hi:	db	0	; local variable
 26251                                  				; BUGBUG : I dont know whether PARSER uses
 26252                                  				;          this variable or not
 26253                                  
 26254                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26255                                  
 26256                                  %if 0
 26257                                  
 26258                                  ;****************************************************************** RICHID ****
 26259                                  
 26260                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 26261                                  
 26262                                  ; 30/03/2019 - Retro DOS v4.0
 26263                                  ;------------------------------------------------------------------------------
 26264                                  
 26265                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 26266                                  ;
 26267                                  ;   Date:     May 14, 1992
 26268                                  ;
 26269                                  ;******************************************************************************
 26270                                  ;
 26271                                  ;   Modification log:
 26272                                  ;
 26273                                  ;     DATE    WHO      DESCRIPTION
 26274                                  ;   --------  -------  --------------------------------------------------------
 26275                                  ;   05/14/92  t-richj  Original
 26276                                  ;   06/21/92  t-richj  Final revisions before check-in
 26277                                  ;
 26278                                  ;******************************************************************************
 26279                                  ;
 26280                                  ; There are two primary definitions which need to be made, selectively, before
 26281                                  ; this include file should be used.  These are:
 26282                                  ;    HV_Extern - If this has been defined, variables for this module will be
 26283                                  ;                declared as external.  Otherwise, variables will be declared
 26284                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 26285                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 26286                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 26287                                  ;                (as only one module, sysconf.asm, includes this file).
 26288                                  ;    HV_LoadHigh - This should be defined when this module is going into
 26289                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 26290                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 26291                                  ;
 26292                                  ;******************************************************************************
 26293                                  
 26294                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 26295                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 26296                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 26297                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 26298                                  ; space problem (it's just such a nice round number, eh?).
 26299                                  
 26300                                  MAXUMB	equ	16
 26301                                  
 26302                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 26303                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 26304                                  
 26305                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 26306                                  SystemPSPOwner	equ	8
 26307                                  ;JapanPSPOwner	equ	9
 26308                                  
 26309                                  ; for LoadHigh and DeviceHigh:
 26310                                  ;
 26311                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 26312                                  ;	          UnHideUMBs().
 26313                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 26314                                  ;	           line.
 26315                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 26316                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 26317                                  ;	          given a command-line like "/L:3,500;4"
 26318                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 26319                                  ;	          matching its index number was specified on the command-line;
 26320                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 26321                                  ;	          will be set to 1.  All others will be set to 0.
 26322                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 26323                                  ;	          specified by the user for a UMB (in the above example, all
 26324                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 26325                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 26326                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 26327                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 26328                                  ;	           for details).
 26329                                  
 26330                                  fInHigh:  db	0
 26331                                  fUmbTiny: db	0
 26332                                  SegLoad:  dw	0
 26333                                  UmbLoad:  db	0
 26334                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 26335                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 26336                                  fm_umb:   db	0
 26337                                  fm_strat: db	0
 26338                                  fm_argc:  db	0	
 26339                                  
 26340                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 26341                                  ; UmbLoad is set to the UMB number given.
 26342                                  
 26343                                  UNSPECIFIED	equ	-1
 26344                                  
 26345                                  %endif
 26346                                  
 26347                                  ;****************************************************************** RICHID ****
 26348                                  
 26349                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 26350                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 26351                                  
 26352                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26353                                  ; (SYSINIT:212Bh)	
 26354                                  
 26355                                  		;public	DevEntry
 26356                                  
 26357 00001E56 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 26358 00001E58 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 26359 00001E5A 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 26360 00001E5C 00000000                DevEntry:	dd	0	; Entry point to the device driver
 26361 00001E60 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 26362                                  ; 27/10/2022 
 26363                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 26364                                  ;
 26365 00001E64 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 26366 00001E65 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 26367 00001E67 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 26368 00001E69 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 26369                                  ;
 26370 00001E6B 00000000                DevXMSAddr:	dd	0
 26371                                  ;
 26372 00001E6F 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 26373 00001E71 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 26374                                  ;
 26375 00001E73 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 26376                                  				;  is being loaded into UMB
 26377 00001E74 0000                    DevSizeOption:	dw	0	; SIZE= option
 26378                                  ;
 26379 00001E76 00                      Int12Lied:	db	0	; did we trap int 12 ?
 26380 00001E77 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 26381 00001E79 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 26382                                  ;
 26383 00001E81 00                      FirstUMBLinked:	db	0
 26384 00001E82 0000                    DevDOSData:	dw	0	; segment of DOS Data
 26385 00001E84 00000000                DevCmdLine:	dd	0	; Current Command line
 26386 00001E88 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 26387                                  				; to use the file name in the command line
 26388                                  ;
 26389                                  ;	ifdef	dblspace_hooks
 26390                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 26391                                  ;	endif
 26392                                  
 26393                                  ; ===========================================================================
 26394                                  
 26395                                  ; 31/03/2019 - Retro DOS v4.0
 26396                                  
 26397                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26398                                  ; (SYSINIT:215Eh)
 26399                                  
 26400                                  ;----------------------------------------------------------------------------
 26401                                  ;
 26402                                  ; procedure : doconf
 26403                                  ;
 26404                                  ;             Config file is parsed initially with this routine. For the
 26405                                  ;             Subsequent passes 'multi_pass' entry is used .
 26406                                  ;
 26407                                  ;----------------------------------------------------------------------------
 26408                                  
 26409                                  	; 27/10/2022
 26410                                  doconf:
 26411 00001E89 0E                      	push	cs
 26412 00001E8A 1F                      	pop	ds
 26413                                  
 26414 00001E8B B80037                  	mov	ax,3700h
 26415                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26416 00001E8E CD21                    	int	21h
 26417 00001E90 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 26418                                  
 26419                                  ; 27/10/2022
 26420                                  ;;ifdef	MULTI_CONFIG
 26421                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26422                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 26423                                  ;;endif	;MULTI_CONFIG
 26424                                  
 26425 00001E94 BA[0033]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 26426 00001E97 B8003D                  	mov	ax,3D00h
 26427                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 26428 00001E9A F9                      	stc				;in case of int 24
 26429 00001E9B CD21                    	int	21h			;function request
 26430 00001E9D 7306                    	jnc	short noprob		; brif opened okay
 26431                                  
 26432                                  ; 27/10/2022
 26433                                  ;;ifdef	MULTI_CONFIG
 26434                                  ;      	call	kbd_read		; we still want to give the guy
 26435                                  ;					; a chance to select clean boot!
 26436                                  ;;endif					; (ie, no autoexec.bat processing)
 26437 00001E9F C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26438 00001EA4 C3                      	retn
 26439                                  noprob: 				;get file size (note < 64k!!)
 26440 00001EA5 89C3                    	mov	bx,ax  ; File handle
 26441 00001EA7 31C9                    	xor	cx,cx
 26442 00001EA9 31D2                    	xor	dx,dx
 26443                                  	;mov	ax,4202h
 26444 00001EAB B80242                  	mov	ax,(LSEEK<<8)|2
 26445 00001EAE CD21                    	int	21h
 26446 00001EB0 A3[D203]                	mov	[count],ax
 26447                                  
 26448 00001EB3 31D2                    	xor	dx,dx
 26449                                  	;mov	ax,4200h
 26450 00001EB5 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26451 00001EB8 CD21                    	int	21h
 26452                                  
 26453                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 26454                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26455 00001EBA 8B16[A102]              	mov	dx,[top_of_cdss] 
 26456                                  
 26457 00001EBE A1[D203]                	mov	ax,[count]
 26458 00001EC1 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 26459 00001EC4 E8D3F1                  	call	ParaRound
 26460 00001EC7 29C2                    	sub	dx,ax
 26461                                  
 26462                                  ; 27/10/2022
 26463                                  ;;ifdef	MULTI_CONFIG
 26464                                  ;;
 26465                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26466                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 26467                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26468                                  ;;  we (may) add a variable to the environment that does not explicity appear
 26469                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26470                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 26471                                  ;;  of extra space, so here we account for it (the worst case of course is
 26472                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26473                                  ;;
 26474                                  ;       dec     dx                      ;reserve 1 additional paragraph
 26475                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 26476                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 26477                                  ;;endif	;MULTI_CONFIG
 26478                                  
 26479 00001EC9 83EA11                  	sub	dx,11h			;room for header
 26480                                  	
 26481                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26482                                  	;mov	[CONFBOT],dx
 26483                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26484 00001ECC 8916[A102]              	mov	[top_of_cdss],dx
 26485 00001ED0 E8ECEC                  	call    TempCDS 
 26486                                  	; 11/12/2022
 26487                                  	; ds <> cs 
 26488 00001ED3 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 26489                                   
 26490 00001ED8 8EDA                    	mov	ds,dx
 26491 00001EDA 8EC2                    	mov	es,dx
 26492                                  
 26493 00001EDC 31D2                    	xor	dx,dx
 26494 00001EDE 2E8B0E[D203]            	mov	cx,[cs:count]
 26495 00001EE3 B43F                    	mov	ah,3Fh
 26496                                  	;mov	ah,READ  ; 3Fh
 26497 00001EE5 F9                      	stc				;in case of int 24
 26498 00001EE6 CD21                    	int	21h			;function request
 26499 00001EE8 9C                      	pushf
 26500                                  
 26501                                  ; find the eof mark in the file. if present,then trim length.
 26502                                  
 26503 00001EE9 50                      	push	ax
 26504 00001EEA 57                      	push	di
 26505 00001EEB 51                      	push	cx
 26506 00001EEC B01A                    	mov	al,1Ah			; eof mark
 26507 00001EEE 89D7                    	mov	di,dx			; point to buffer
 26508 00001EF0 E305                    	jcxz	puteol			; no chars
 26509 00001EF2 F2AE                    	repnz	scasb			; find end
 26510 00001EF4 7501                    	jnz	short puteol		; none found and count exhausted
 26511                                  
 26512                                  ; we found a 1a. back up
 26513                                  
 26514 00001EF6 4F                      	dec	di			; backup past 1Ah
 26515                                  
 26516                                  ;  just for the halibut, stick in an extra eol
 26517                                  
 26518                                  puteol:
 26519 00001EF7 B00D                    	mov	al,cr ; 0Dh
 26520 00001EF9 AA                      	stosb
 26521 00001EFA B00A                    	mov	al,lf  ;0Ah
 26522 00001EFC AA                      	stosb
 26523 00001EFD 29D7                    	sub	di,dx			; difference moved
 26524                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26525                                  	;mov	[cs:count],di		; new count
 26526                                  
 26527                                  	; 11/12/2022	
 26528                                  	; 31/03/2019 - Retro DOS v4.0
 26529 00001EFF 0E                      	push	cs
 26530 00001F00 1F                      	pop	ds
 26531                                  
 26532 00001F01 893E[D203]              	mov	[count],di		; new count
 26533                                  
 26534 00001F05 59                      	pop	cx
 26535 00001F06 5F                      	pop	di
 26536 00001F07 58                      	pop	ax
 26537                                  
 26538                                  	; 11/12/2022
 26539                                  	; 27/10/2022
 26540                                  	;push	cs
 26541                                  	;pop	ds
 26542                                  
 26543 00001F08 50                      	push	ax
 26544                                  	;mov	ah,CLOSE
 26545 00001F09 B43E                    	mov	ah,3Eh
 26546 00001F0B CD21                    	int	21h
 26547 00001F0D 58                      	pop	ax
 26548 00001F0E 9D                      	popf
 26549 00001F0F 7204                    	jc	short conferr 		;if not we've got a problem
 26550 00001F11 39C1                    	cmp	cx,ax
 26551 00001F13 742C                    	jz	short getcom		;couldn't read the file
 26552                                  conferr:
 26553 00001F15 BA[0033]                	mov	dx,config		;want to print config error
 26554 00001F18 E83C13                  	call	badfil
 26555                                  endconv:
 26556 00001F1B C3                      	retn
 26557                                  
 26558                                  ;----------------------------------------------------------------------------
 26559                                  ;
 26560                                  ; entry : multi_pass
 26561                                  ;
 26562                                  ;             called to execute device=,install= commands
 26563                                  ;
 26564                                  ;----------------------------------------------------------------------------
 26565                                  
 26566                                  	; 27/10/2022
 26567                                  multi_pass:
 26568 00001F1C 0E                      	push	cs
 26569 00001F1D 1F                      	pop	ds
 26570                                  
 26571 00001F1E 803E[4903]0A            	cmp	byte [multi_pass_id],10
 26572                                  ;jae_endconv:
 26573 00001F23 73F6                    	jae	short endconv 		; do nothing. just return.
 26574                                  
 26575                                  	;push	word [CONFBOT]
 26576                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26577 00001F25 FF36[A102]              	push	word [top_of_cdss]
 26578 00001F29 07                      	pop	es			; es -> confbot
 26579                                  
 26580 00001F2A 8B36[D403]              	mov	si,[org_count]
 26581 00001F2E 8936[D203]              	mov	[count],si		; set count
 26582 00001F32 31F6                    	xor	si,si ; 0
 26583 00001F34 8936[D603]                      mov     [chrptr],si		; reset chrptr
 26584 00001F38 8936[2B03]                      mov     [linecount],si		; reset linecount
 26585                                  
 26586 00001F3C E89C10                  	call	getchr
 26587 00001F3F EB06                    	jmp	short conflp
 26588                                  
 26589                                  getcom:
 26590 00001F41 E8800E                          call    organize                ; organize the file
 26591 00001F44 E89410                  	call	getchr
 26592                                  conflp: 
 26593 00001F47 72D2                    	jc	short endconv
 26594                                  
 26595 00001F49 FF06[2B03]                      inc     word [linecount]	; increase linecount
 26596                                  
 26597 00001F4D C606[0314]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26598 00001F52 C606[0614]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26599 00001F57 3C0A                    	cmp	al,lf			; linefeed?
 26600 00001F59 7416                    	je	short blank_line	;  then ignore this line.
 26601                                  
 26602                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26603                                  %if 0
 26604                                  
 26605                                  ;ifdef	MULTI_CONFIG
 26606                                  
 26607                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26608                                  ;   number immediately following it....
 26609                                  
 26610                                          mov     [config_cmd],al         ; save original command code
 26611                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26612                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26613                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26614                                          je      short not_final		; no, line number is not embedded
 26615                                  
 26616                                          push    ax                      ;
 26617                                          call    getchr                  ; ignore end-of-image errors,
 26618                                          mov     ah,al                   ; because if there's an error
 26619                                          call    getchr                  ; fetching the line number that's
 26620                                          xchg    al,ah                   ; supposed to be there, the next
 26621                                          mov     [linecount],ax          ; getchr call will get the same error
 26622                                          pop     ax
 26623                                  ;
 26624                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26625                                  ;   which to obtain its original program name, it grovels through all of
 26626                                  ;   memory to find the filename that was used to exec it; it wants to find
 26627                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26628                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26629                                  ;   immediately before the filename, but since we are now storing line # info
 26630                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26631                                  ;   spot.
 26632                                  ;
 26633                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26634                                  ;   over the line number info, since we no longer need that info anyway. This
 26635                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26636                                  ;   retrieved.
 26637                                  ;
 26638                                          cmp	byte [multi_pass_id],2	; final pass?
 26639                                          jb	short not_final		; no
 26640                                          ;test	word [install_flag],have_install_cmd
 26641                                  	test	byte [install_flag],have_install_cmd ; 1
 26642                                          jz	short final		; no install cmds, so yes it is
 26643                                          cmp	byte [multi_pass_id],3	; final pass?
 26644                                          jb	short not_final		; no
 26645                                  final:                                  ;
 26646                                  	mov	[es:si],al		; save backward-compatible command code
 26647                                  not_final:                              ;
 26648                                  ;endif
 26649                                  
 26650                                  %endif
 26651 00001F5B 88C4                    	mov	ah,al
 26652 00001F5D E87B10                  	call	getchr
 26653 00001F60 7314                    	jnc	short tryi
 26654                                  
 26655 00001F62 803E[4903]02            	cmp	byte [multi_pass_id],2
 26656                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26657                                  	; 27/10/2022
 26658 00001F67 73B2                    	jnb	short endconv	
 26659 00001F69 E90107                  	jmp	badop
 26660                                  	
 26661                                  coff:	
 26662                                  	; 11/12/2022
 26663                                  	; ds = cs
 26664                                  	;push	cs
 26665                                  	;pop	ds
 26666 00001F6C E86310                  	call	newline
 26667 00001F6F EBD6                    	jmp	short conflp	; 13/05/2019
 26668                                  
 26669                                  blank_line:
 26670 00001F71 E86710                  	call	getchr
 26671 00001F74 EBD1                    	jmp	short conflp
 26672                                  
 26673                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26674                                  ; 11/12/2022
 26675                                  ; (there is not a jump or call to here from anywhere!)
 26676                                  ;coff_p:
 26677                                  	;push	cs
 26678                                  	;pop	ds
 26679                                  
 26680                                  ;to handle install= commands,we are going to use multi-pass.
 26681                                  ;the first pass handles the other commands and only set install_flag when
 26682                                  ;it finds any install command. the second pass will only handle the
 26683                                  ;install= command.
 26684                                  
 26685                                  ;------------------------------------------------------------------------------
 26686                                  ;install command
 26687                                  ;------------------------------------------------------------------------------
 26688                                  
 26689                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26690                                  	; (SYSINIT:2250h)
 26691                                  tryi:
 26692 00001F76 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26693 00001F7B 7503                    	jne	short not_init_pass
 26694 00001F7D E92301                  	jmp	multi_try_doshi
 26695                                  not_init_pass:
 26696 00001F80 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26697                                          ; 11/12/2022
 26698                                  	;je	short multi_pass_coff2	; now it is NOPs
 26699 00001F85 74E5                    	je	short coff
 26700                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26701                                  	;je	short multi_pass_coff	
 26702                                  					; This pass can be made use of if
 26703                                  					; we want do some config.sys process
 26704                                  					; after device drivers are loaded
 26705                                  					; and before install= commands
 26706                                  					; are processed
 26707                                  
 26708 00001F87 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26709 00001F8C 7411                    	je	short multi_try_i
 26710 00001F8E 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26711                                  	; 11/12/2022
 26712                                  	;je	short multi_pass_coff2
 26713 00001F91 74D9                    	je	short coff
 26714                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26715                                  	;je	short multi_pass_coff	
 26716                                  
 26717                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26718                                  ;       but don't process them now.        
 26719                                          
 26720 00001F93 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26721                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26722                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26723 00001F96 752A                    	jne	short tryb	
 26724                                  	
 26725                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26726 00001F98 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26727                                  multi_pass_coff2:
 26728 00001F9D EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26729                                  
 26730                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26731                                  ;precheck_installhigh:
 26732                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26733                                  ;       jne     short tryb		; carry on with normal processing
 26734                                  ;	;or	word [install_flag],have_install_cmd
 26735                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26736                                  ;       jmp	short coff
 26737                                  
 26738                                  multi_try_i:
 26739 00001F9F 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26740                                  	;jne	short multi_try_n	; no, check for installhigh
 26741                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26742 00001FA2 7505                    	jne	short multi_pass_filter
 26743                                  
 26744                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26745                                  ;;ifdef	MULTI_CONFIG
 26746                                  ;       call    query_user              ; query the user if config_cmd
 26747                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26748                                  ;;endif
 26749                                  
 26750 00001FA4 E873F0                  	call	do_install_exec 	;install it.
 26751 00001FA7 EBC3                    	jmp	short coff		;to handle next install= command.
 26752                                  
 26753                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26754                                  %if 0
 26755                                  
 26756                                  multi_try_n:
 26757                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26758                                          jne	short multi_pass_filter	; no. ignore this.
 26759                                  ;ifdef	MULTI_CONFIG
 26760                                          call    query_user              ; query the user if config_cmd
 26761                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26762                                  ;endif
 26763                                  
 26764                                  ;       The memory environment is in its normal DOS state, so do
 26765                                  ;       the standard calls to set the alloc strategy for loading high
 26766                                  
 26767                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26768                                  	int	21h			;get alloc strategy
 26769                                  	mov	bx,ax
 26770                                          push    bx                      ; save for the return
 26771                                  
 26772                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26773                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26774                                  	int	21h			;set alloc strategy
 26775                                  
 26776                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26777                                          int     21h                     ; get link state
 26778                                          xor     ah,ah                   ; clear top byte
 26779                                          push    ax                      ; save for return
 26780                                  
 26781                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26782                                  	mov	bx,1
 26783                                  	int	21h			;link in UMBs
 26784                                  
 26785                                  	call	do_install_exec 	;install it.
 26786                                  
 26787                                          mov     ax,(ALLOCOPER<<8)|3
 26788                                          pop     bx                      ; recover original link state
 26789                                          int     21h
 26790                                          pop     bx                      ; recover original alloc strategy
 26791                                          mov     ax,(ALLOCOPER<<8)|1
 26792                                          int     21h
 26793                                  
 26794                                  	jmp	coff			;to handle next install= command.
 26795                                  
 26796                                  %endif
 26797                                  
 26798                                  multi_pass_filter:
 26799 00001FA9 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26800 00001FAC 740A                    	je	short multi_pass_adjust
 26801 00001FAE 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26802 00001FB1 7405                    	je	short multi_pass_adjust
 26803 00001FB3 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26804 00001FB6 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26805                                  
 26806                                  multi_pass_adjust:			; these commands need to
 26807 00001FB8 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26808 00001FBC FF06[D203]              	inc	word [count]		;  for newline proc.
 26809                                  
 26810                                  multi_pass_coff:
 26811                                  	; 11/12/2022
 26812 00001FC0 EBAA                    	jmp	short coff		; to handle next install= commands.
 26813                                  
 26814                                  ;------------------------------------------------------------------------------
 26815                                  ; buffer command
 26816                                  ;------------------------------------------------------------------------------
 26817                                  
 26818                                  ;******************************************************************************
 26819                                  ;									      *
 26820                                  ; function: parse the parameters of buffers= command.			      *
 26821                                  ;									      *
 26822                                  ; input :								      *
 26823                                  ;	es:si -> parameters in command line.				      *
 26824                                  ; output:								      *
 26825                                  ;	buffers set							      *
 26826                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26827                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26828                                  ;									      *
 26829                                  ; subroutines to be called:						      *
 26830                                  ;	sysinit_parse							      *
 26831                                  ; logic:								      *
 26832                                  ; {									      *
 26833                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26834                                  ;	set dx,cx to 0; 						      *
 26835                                  ;	reset buffer_slash_x;						      *
 26836                                  ;	while (end of command line)					      *
 26837                                  ;	{ sysinit_parse;						      *
 26838                                  ;	  if (no error) then						      *
 26839                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26840                                  ;		    buffer_slash_x = 1					      *
 26841                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26842                                  ;			  buffers = result_val._$P_picked_val;		      *
 26843                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26844                                  ;	  else	{show error message;error exit} 			      *
 26845                                  ;	};								      *
 26846                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26847                                  ; };									      *
 26848                                  ;									      *
 26849                                  ;******************************************************************************
 26850                                  
 26851                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26852                                  	; (SYSINIT:229Ch)
 26853                                  tryb:
 26854 00001FC2 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26855 00001FC5 7557                    	jne	short tryc
 26856                                  
 26857                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26858                                  ;;ifdef	MULTI_CONFIG
 26859                                  ;       call    query_user              ; query the user if config_cmd
 26860                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26861                                  ;;endif
 26862                                  
 26863                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26864                                  	; 18/12/2022
 26865 00001FC7 31C9                    	xor	cx,cx
 26866                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26867 00001FC9 880E[BA1C]              	mov	[p_buffer_slash_x],cl ; 0
 26868                                  
 26869 00001FCD BF[731C]                	mov	di,buf_parms
 26870                                  	;xor	cx,cx	; 18/12/2022
 26871                                  	; 04/01/2023
 26872                                  	;mov	dx,cx
 26873                                  do7:
 26874 00001FD0 E87B06                  	call	sysinit_parse
 26875 00001FD3 7303                    	jnc	short if7		; parse error,
 26876                                  	; 04/01/2023
 26877                                  	;call	badparm_p		;  and show messages and end the search loop.
 26878                                  	;;jmp	short sr7
 26879                                  	; 31/12/2022
 26880                                  ;sr7:
 26881                                  	;jmp	coff
 26882                                  	; 04/01/2023
 26883 00001FD5 E9F405                  	jmp	badparm_p_coff
 26884                                  if7:
 26885 00001FD8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26886 00001FDB 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26887                                  	;cmp	word [result_val_swoff],switch_x
 26888 00001FDD 813E[BE1C][B31C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26889                                  	;jne	short if11
 26890                                  	; 31/12/2022
 26891 00001FE3 74EB                    	je	short do7 ;je short en11
 26892                                  
 26893                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26894                                  	;jmp	short en11 ; 31/12/2022
 26895                                  if11:
 26896                                  	;mov	ax,[rv_dword]
 26897 00001FE5 A1[C01C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26898 00001FE8 83F901                  	cmp	cx,1
 26899 00001FEB 7505                    	jne	short if13
 26900                                  
 26901 00001FED A3[B61C]                	mov	[p_buffers],ax
 26902                                  	;jmp	short en11
 26903                                  	; 31/12/2022
 26904 00001FF0 EBDE                    	jmp	short do7
 26905                                  if13:
 26906 00001FF2 A3[B81C]                	mov	[p_h_buffers],ax
 26907                                  en11:
 26908 00001FF5 EBD9                    	jmp	short do7
 26909                                  en7:
 26910 00001FF7 833E[B61C]63            	cmp	word [p_buffers],99
 26911 00001FFC 760B                    	jbe	short if18
 26912                                  
 26913                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26914                                  ;	jne	short if18
 26915                                  
 26916 00001FFE E87806                  	call	badparm_p
 26917 00002001 C706[B81C]0000          	mov	word [p_h_buffers],0
 26918 00002007 EB12                    	jmp	short sr7
 26919                                  if18:
 26920 00002009 A1[B61C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26921 0000200C A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26922                                  
 26923 0000200F A1[B81C]                	mov	ax,[p_h_buffers]
 26924 00002012 A3[9902]                	mov	[h_buffers],ax
 26925                                  
 26926                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26927                                  ;	mov	[buffer_slash_x],al
 26928                                  
 26929 00002015 A1[2B03]                	mov	ax,[linecount]
 26930 00002018 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26931                                  	; 31/12/2022
 26932                                  	;jmp	short sr7
 26933                                  	; 04/01/2023
 26934                                  sr7:
 26935 0000201B E94EFF                  	jmp	coff
 26936                                  
 26937                                  ;------------------------------------------------------------------------------
 26938                                  ; break command
 26939                                  ;------------------------------------------------------------------------------
 26940                                  
 26941                                  ;****************************************************************************
 26942                                  ;									    *
 26943                                  ; function: parse the parameters of break = command.			    *
 26944                                  ;									    *
 26945                                  ; input :								    *
 26946                                  ;	es:si -> parameters in command line.				    *
 26947                                  ; output:								    *
 26948                                  ;	turn the control-c check on or off.				    *
 26949                                  ;									    *
 26950                                  ; subroutines to be called:						    *
 26951                                  ;	sysinit_parse							    *
 26952                                  ; logic:								    *
 26953                                  ; {									    *
 26954                                  ;	set di to brk_parms;						    *
 26955                                  ;	set dx,cx to 0; 						    *
 26956                                  ;	while (end of command line)					    *
 26957                                  ;	{ sysinit_parse;						    *
 26958                                  ;	  if (no error) then						    *
 26959                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26960                                  ;		   set p_ctrl_break,on;					    *
 26961                                  ;	       else					  /*off 	 */ *
 26962                                  ;		   set p_ctrl_break,off;				    *
 26963                                  ;	  else {show message;error_exit};				    *
 26964                                  ;	};								    *
 26965                                  ;	if (no error) then						    *
 26966                                  ;	   dos function call to set ctrl_break check according to	    *
 26967                                  ; };									    *
 26968                                  ;									    *
 26969                                  ;****************************************************************************
 26970                                  
 26971                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26972                                  	; (SYSINIT:22FFh)
 26973                                  tryc:
 26974 0000201E 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26975 00002021 7534                    	jne	short trym
 26976                                  
 26977                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26978                                  ;;ifdef MULTI_CONFIG
 26979                                  ;       call    query_user              ; query the user if config_cmd
 26980                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26981                                  ;;endif
 26982 00002023 BF[C41C]                	mov	di,brk_parms
 26983 00002026 31C9                    	xor	cx,cx
 26984                                  	; 04/01/2023
 26985                                  	;mov	dx,cx
 26986                                  do22:
 26987 00002028 E82306                  	call	sysinit_parse
 26988 0000202B 7303                    	jnc	short if22		; parse error
 26989                                  	;call	badparm_p		;  show message and end the search loop.
 26990                                  	;;jmp	short sr22
 26991                                  	; 31/12/2022
 26992                                  ;sr22:
 26993                                  	;jmp	coff
 26994                                  	; 04/01/2023
 26995 0000202D E99C05                  	jmp	badparm_p_coff
 26996                                  if22:
 26997 00002030 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26998 00002033 7415                    	je	short en22		; then end the $endloop
 26999                                  
 27000                                  	;cmp	byte [result_val_itag],1
 27001 00002035 803E[BD1C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 27002 0000203A 7507                    	jne	short if26
 27003                                  
 27004 0000203C C606[E91C]01            	mov	byte [p_ctrl_break],1	; turn it on
 27005                                  	;jmp	short en26
 27006                                  	; 31/12/2022
 27007 00002041 EBE5                    	jmp	short do22
 27008                                  if26:
 27009 00002043 C606[E91C]00            	mov	byte [p_ctrl_break],0	; turn it off
 27010                                  en26:
 27011 00002048 EBDE                    	jmp	short do22		; we actually set the ctrl break
 27012                                  en22:
 27013 0000204A B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 27014 0000204C B001                    	mov	al,1
 27015 0000204E 8A16[E91C]              	mov	dl,[p_ctrl_break]
 27016 00002052 CD21                    	int	21h
 27017                                  	; 31/12/2022
 27018                                  	;jmp	short sr22
 27019                                  	; 04/01/2023
 27020                                  sr22:
 27021 00002054 E915FF                  	jmp	coff
 27022                                  
 27023                                  ;------------------------------------------------------------------------------
 27024                                  ; multitrack command
 27025                                  ;------------------------------------------------------------------------------
 27026                                  
 27027                                  ;******************************************************************************
 27028                                  ;									      *
 27029                                  ; function: parse the parameters of multitrack= command.		      *
 27030                                  ;									      *
 27031                                  ; input :								      *
 27032                                  ;	es:si -> parameters in command line.				      *
 27033                                  ; output:								      *
 27034                                  ;	turn multrk_flag on or off.					      *
 27035                                  ;									      *
 27036                                  ; subroutines to be called:						      *
 27037                                  ;	sysinit_parse							      *
 27038                                  ; logic:								      *
 27039                                  ; {									      *
 27040                                  ;	set di to brk_parms;						      *
 27041                                  ;	set dx,cx to 0; 						      *
 27042                                  ;	while (end of command line)					      *
 27043                                  ;	{ sysinit_parse;						      *
 27044                                  ;	  if (no error) then						      *
 27045                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 27046                                  ;		   set p_mtrk,on;					      *
 27047                                  ;	       else					  /*off 	 */   *
 27048                                  ;		   set p_mtrk,off;					      *
 27049                                  ;	  else {show message;error_exit};				      *
 27050                                  ;	};								      *
 27051                                  ;	if (no error) then						      *
 27052                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 27053                                  ;									      *
 27054                                  ; };									      *
 27055                                  ;									      *
 27056                                  ;******************************************************************************
 27057                                  
 27058                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27059                                  trym:
 27060 00002057 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 27061 0000205A 7569                    	jne	short tryu
 27062                                  
 27063                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27064                                  ;;ifdef	MULTI_CONFIG
 27065                                  ;       call    query_user      ; query the user if config_cmd
 27066                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 27067                                  ;;endif
 27068 0000205C BF[C81D]                	mov	di,mtrk_parms
 27069 0000205F 31C9                    	xor	cx,cx
 27070                                  	; 04/01/2023
 27071                                  	;mov	dx,cx
 27072                                  do31:
 27073 00002061 E8EA05                  	call	sysinit_parse
 27074 00002064 7303                    	jnc	short if31	; parse error
 27075                                  	;call	badparm_p	;  show message and end the search loop.
 27076                                  	;;jmp	short sr31
 27077                                  	; 31/12/2022
 27078                                  ;sr31:
 27079                                  	;jmp	coff
 27080                                  	; 04/01/2023
 27081 00002066 E96305                  	jmp	badparm_p_coff
 27082                                  if31:
 27083 00002069 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27084 0000206C 7415                    	je	short en31	; then end the $endloop
 27085                                  
 27086                                  	;cmp	byte [result_val_itag],1
 27087 0000206E 803E[BD1C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 27088 00002073 7507                    	jne	short if35
 27089                                  
 27090 00002075 C606[DC1D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 27091                                  	;jmp	short en35
 27092                                  	; 31/12/2022
 27093 0000207A EBE5                    	jmp	short do31
 27094                                  if35:
 27095 0000207C C606[DC1D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 27096                                  en35:
 27097 00002081 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 27098                                  en31:
 27099 00002083 1E                      	push	ds
 27100                                  	;;mov	ax,Bios_Data ; 70h
 27101                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27102                                  	; 21/10/2022
 27103 00002084 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27104 00002087 8ED8                    	mov	ds,ax
 27105                                  
 27106 00002089 2E803E[DC1D]00          	cmp	byte [cs:p_mtrk],0
 27107 0000208F 7508                    	jne	short if39
 27108                                  
 27109 00002091 C706[2605]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 27110 00002097 EB06                    	jmp	short en39
 27111                                  if39:
 27112 00002099 C706[2605]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 27113                                  en39:
 27114 0000209F 1F                      	pop	ds
 27115                                  	; 31/12/2022
 27116                                  	;jmp	short sr31
 27117                                  	; 04/01/2023
 27118                                  sr31:
 27119 000020A0 E9C9FE                  	jmp	coff
 27120                                  
 27121                                  ;----------------------------------------------------------------------------
 27122                                  ; DOS=HIGH/LOW command
 27123                                  ;----------------------------------------------------------------------------
 27124                                  
 27125                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27126                                  multi_try_doshi:
 27127 000020A3 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 27128 000020A6 7403                    	je	short it_is_h
 27129                                  skip_it:
 27130 000020A8 E9FEFE                  	jmp	multi_pass_filter
 27131                                  it_is_h:				; M003 - removed initing DevUMB
 27132                                  					;	 & runhigh
 27133                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27134                                  ;;ifdef	MULTI_CONFIG
 27135                                  ;       call    query_user              ; query the user if config_cmd
 27136                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 27137                                  ;;endif
 27138 000020AB BF[131E]                	mov	di,dos_parms
 27139 000020AE 31C9                    	xor	cx,cx
 27140                                  	; 04/01/2023
 27141                                  	;mov	dx,cx
 27142                                  h_do_parse:
 27143 000020B0 E89B05                  	call	sysinit_parse
 27144 000020B3 7303                    	jnc	short h_parse_ok	; parse error
 27145                                  h_badparm:
 27146                                  	; 04/01/2023
 27147                                  	;call	badparm_p		; show message and end the search loop.
 27148                                  	;;jmp	short h_end
 27149                                  	; 11/12/2022
 27150                                  ;h_end:
 27151                                  	;jmp	coff
 27152                                  	; 04/01/2023
 27153 000020B5 E91405                  	jmp	badparm_p_coff	
 27154                                  h_parse_ok:
 27155 000020B8 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27156 000020BB 7405                    	je	short h_end		; then end the $endloop
 27157 000020BD E81006                  	call	ProcDOS
 27158 000020C0 EBEE                    	jmp	short h_do_parse
 27159                                  	; 11/12/2022
 27160                                  	; 04/01/2023
 27161                                  h_end:
 27162 000020C2 E9A7FE                  	jmp	coff
 27163                                  
 27164                                  ;-----------------------------------------------------------------------------
 27165                                  ; devicehigh command
 27166                                  ;-----------------------------------------------------------------------------
 27167                                  
 27168                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27169                                  tryu:
 27170 000020C5 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 27171 000020C8 7539                    	jne	short tryd
 27172                                  
 27173                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27174                                  ;;ifdef	MULTI_CONFIG
 27175                                  ;       call    query_user              ; query the user if config_cmd
 27176                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 27177                                  ;;endif
 27178                                  
 27179                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27180                                  ;	call	InitVar
 27181                                  ;	call	ParseSize		; process the size= option
 27182                                  ;	;jnc	short tryu_0
 27183                                  	
 27184                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 27185                                  
 27186                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27187                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 27188                                  	;mov	[cs:badparm_seg], es
 27189                                  	; 11/12/2022
 27190                                  	; ds = cs
 27191 000020CA 8936[0714]              	mov	[badparm_off], si
 27192 000020CE 8C06[0914]              	mov	[badparm_seg], es
 27193                                  	;
 27194 000020D2 E86608                  	call	ParseSize
 27195 000020D5 7303                    	jnc	short tryu_2	; 28/10/2022
 27196                                  
 27197                                  	;call	badparm_p
 27198                                  	;jmp	coff
 27199                                  	; 04/01/2023
 27200 000020D7 E9F204                  	jmp	badparm_p_coff
 27201                                  
 27202                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27203                                  ;tryu_0:
 27204                                  ;	mov	ax,[cs:DevSizeOption]
 27205                                  ;	or	ax,ax
 27206                                  ;	jnz	short tryu_2
 27207                                  ;
 27208                                  ;	call	ParseVar
 27209                                  ;	jnc	short tryu_2
 27210                                  ;tryu_1:
 27211                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 27212                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 27213                                  ;	call	badparm_p		; so all we have to do is choke and
 27214                                  ;	jmp	coff			; die, rather verbosely.
 27215                                  
 27216                                  tryu_2:	
 27217 000020DA 56                      	push	si
 27218 000020DB 06                      	push	es
 27219                                  tryu_3:
 27220 000020DC 268A04                  	mov	al,[es:si]
 27221 000020DF 3C0D                    	cmp	al,cr
 27222 000020E1 740C                    	je	short tryu_4
 27223 000020E3 3C0A                    	cmp	al,lf
 27224 000020E5 7408                    	je	short tryu_4
 27225 000020E7 E8CC0E                  	call	delim
 27226 000020EA 7403                    	jz	short tryu_4
 27227 000020EC 46                      	inc	si
 27228 000020ED EBED                    	jmp	short tryu_3
 27229                                  tryu_4:	
 27230                                  	; 11/12/2022
 27231                                  	; ds = cs
 27232 000020EF A2[881E]                	mov	[DevSavedDelim],al
 27233                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 27234                                  					;  it with null
 27235                                  	; 18/12/2022
 27236 000020F2 29DB                    	sub	bx,bx
 27237 000020F4 26881C                  	mov	[es:si],bl ; 0
 27238                                   	;mov	byte [es:si],0
 27239                                  
 27240 000020F7 07                      	pop	es
 27241 000020F8 5E                      	pop	si
 27242                                  
 27243                                  ;------------------------------------------------------------------------------
 27244                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27245                                  ;------------------------------------------------------------------------------
 27246                                  
 27247                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27248                                  ;
 27249                                  ;	call	UmbTest			; See if UMBs are around...
 27250                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 27251                                  ;
 27252                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 27253                                  ;	jmp	short LoadDevice
 27254                                  
 27255                                  ;------------------------------------------------------------------------------
 27256                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27257                                  ;------------------------------------------------------------------------------
 27258                                  
 27259                                  NrmTst:
 27260                                  	; 11/12/2022
 27261                                  	; ds = cs
 27262                                  	;;mov	byte [cs:DeviceHi],0
 27263                                  	;mov	byte [DeviceHi],0
 27264                                  	; 18/12/2022
 27265                                  	; bx = 0
 27266 000020F9 381E[641E]              	cmp	[DevUMB],bl ; 0
 27267                                  	;cmp	byte [DevUMB],0
 27268                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 27269 000020FD 7417                    	je	short LoadDevice	; no, we don't
 27270                                  	;mov	byte [cs:DeviceHi],1
 27271                                  	; 11/12/2022
 27272                                  	;mov	byte [DeviceHi],1
 27273                                  	; 18/12/2022
 27274 000020FF FEC3                    	inc	bl ; mov bl,1 ; (*)
 27275                                  	; 11/12/2022
 27276                                  	;jmp	short LoadDevice2	; 11/12/2022
 27277 00002101 EB13                    	jmp	short LoadDevice
 27278                                  
 27279                                  ;------------------------------------------------------------------------------
 27280                                  ; device command
 27281                                  ;------------------------------------------------------------------------------
 27282                                  
 27283                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27284                                  	; (SYSINIT:2401h)
 27285                                  tryd:
 27286                                  	; 11/12/2022
 27287 00002103 31DB                    	xor 	bx, bx
 27288                                  	;
 27289 00002105 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 27290 00002108 7403                    	je	short gotd
 27291                                  skip_it2:
 27292 0000210A E93302                  	jmp	tryq
 27293                                  gotd:
 27294                                  
 27295                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27296                                  ;;ifdef	MULTI_CONFIG
 27297                                  ;       call    query_user              ; query the user if config_cmd
 27298                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 27299                                  ;;endif
 27300                                  	; 11/12/2022
 27301                                  	; ds = cs
 27302                                  	;mov	byte [DeviceHi],0
 27303                                  	;mov	word [DevSizeOption],0
 27304 0000210D 891E[741E]              	mov	[DevSizeOption],bx ; 0
 27305 00002111 C606[881E]20            	mov	byte [DevSavedDelim],' '
 27306                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27307                                  	;mov	word [cs:DevSizeOption],0
 27308                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27309                                  					;  be replaced with a ' '
 27310                                  LoadDevice:                             ; device= or devicehigh= command.
 27311                                  	; 11/12/2022
 27312                                  	;mov	byte [DeviceHi],0
 27313 00002116 881E[731E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27314                                  LoadDevice2:
 27315                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27316                                  	;
 27317                                  	;push    cs
 27318                                          ;pop     ds
 27319                                  	;
 27320                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 27321                                  	;mov	[bpb_addr+2],es
 27322                                  	;
 27323                                  	;mov	[DevCmdLine],si		; save it for ourself
 27324                                  	;mov	[DevCmdLine+2],es
 27325                                  	;
 27326                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27327                                  
 27328                                  	; 11/12/2022
 27329                                  	; ds = cs
 27330                                  	;mov	bx,cs
 27331                                  	;mov	ds,bx
 27332                                  
 27333                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 27334 0000211A 8936[F803]              	mov	[bpb_addr],si
 27335                                  	;mov	[cs:bpb_addr+2],es
 27336 0000211E 8C06[FA03]              	mov	[bpb_addr+2],es
 27337                                  
 27338                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27339 00002122 8936[841E]              	mov	[DevCmdLine],si
 27340                                  	;mov	[cs:DevCmdLine+2],es	
 27341 00002126 8C06[861E]              	mov	[DevCmdLine+2],es	
 27342                                  
 27343 0000212A E8E00E                  	call	round
 27344                                  	
 27345 0000212D E81B07                  	call	SizeDevice
 27346 00002130 7215                    	jc	short BadFile
 27347                                  
 27348                                  	; 11/12/2022
 27349                                  	; ds = cs
 27350                                  
 27351                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27352                                  
 27353                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27354                                  ;
 27355                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27356                                  ;
 27357                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 27358                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 27359                                  ;	jz	short DevConvLoad	; the actual load.
 27360                                  ;
 27361                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27362                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27363                                  ;
 27364                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 27365                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27366                                  ;
 27367                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27368                                  ;
 27369                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 27370                                  ;	or	ax,ax
 27371                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 27372                                  ;
 27373                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27374                                  ;	jge	short DevConvLoad
 27375                                  ;
 27376                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27377                                  ;	call	StoLoadSize		; minsize for load UMB.
 27378                                  
 27379                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27380                                  
 27381                                  DevConvLoad:
 27382                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27383 00002132 E83206                  	call	InitDevLoad
 27384                                  
 27385                                  	; 11/12/2022
 27386                                  	; ds = cs
 27387 00002135 A1[581E]                	mov	ax,[DevLoadAddr]
 27388 00002138 0306[561E]              	add	ax,[DevSize]
 27389 0000213C 7206                    	jc	short NoMem
 27390 0000213E 3906[5A1E]              	cmp	[DevLoadEnd],ax
 27391 00002142 7312                    	jae	short LoadDev
 27392                                  	
 27393                                  	; 11/12/2022
 27394                                  	;mov	ax,[cs:DevLoadAddr]
 27395                                  	;add	ax,[cs:DevSize]
 27396                                  	;jc	short NoMem
 27397                                  	;cmp	[cs:DevLoadEnd],ax
 27398                                  	;jae	short LoadDev
 27399                                  NoMem:
 27400                                  	; 11/12/2022
 27401                                  	; ds = cs
 27402                                  	;jmp	mem_err
 27403 00002144 E9050F                  	jmp	mem_err2
 27404                                  
 27405                                  BadFile:
 27406                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27407                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27408                                  	;cmp    byte [es:si],' '
 27409                                          ;jae	short tryd_2
 27410 00002147 26803C0D                	cmp	byte [es:si],0Dh	; cr
 27411 0000214B 7503                            jne	short tryd_2
 27412 0000214D E91D05                  	jmp	badop
 27413                                  tryd_2:
 27414 00002150 E80811                  	call	badload
 27415 00002153 E916FE                  	jmp	coff
 27416                                  
 27417                                  LoadDev:
 27418 00002156 06                      	push	es
 27419 00002157 1F                      	pop	ds
 27420                                  
 27421 00002158 89F2                    	mov	dx,si			;ds:dx points to file name
 27422 0000215A E83F07                  	call	ExecDev			; load device driver using exec call
 27423                                  badldreset:
 27424 0000215D 1E                      	push	ds
 27425 0000215E 07                      	pop	es			;es:si back to config.sys
 27426 0000215F 0E                      	push	cs
 27427 00002160 1F                      	pop	ds			;ds back to sysinit
 27428 00002161 72E4                    	jc	short BadFile
 27429                                  goodld:
 27430                                  	; 11/12/2022
 27431                                  	; ds = cs
 27432                                  
 27433 00002163 06                      	push	es
 27434 00002164 56                      	push	si
 27435 00002165 E85107                  	call	RemoveNull
 27436 00002168 06                      	push	es
 27437 00002169 56                      	push	si
 27438                                  
 27439 0000216A 0E                      	push	cs
 27440 0000216B 07                      	pop	es
 27441                                  
 27442 0000216C 1E                      	push	ds
 27443 0000216D 56                      	push	si
 27444                                  
 27445                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27446                                  	; 31/12/2022
 27447                                  	; ds = cs
 27448 0000216E C536[5C1E]              	lds	si,[DevEntry]
 27449                                  	
 27450                                  	;test	word [si+4],8000h
 27451                                  	; 11/12/2022
 27452 00002172 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27453                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27454 00002176 7511                    	jnz	short got_device_com_cont   ; no.
 27455                                  
 27456 00002178 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27457                                  	;cmp	byte [si+32],26
 27458 0000217D 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27459 00002181 7206                    	jb	short got_device_com_cont
 27460                                  
 27461 00002183 5E                      	pop	si
 27462 00002184 1F                      	pop	ds
 27463                                  
 27464 00002185 5E                      	pop	si			; clear the stack
 27465 00002186 07                      	pop	es
 27466                                  
 27467                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27468                                  	;call	RetFromUM		; Do this before we leave
 27469                                  
 27470 00002187 EB55                    	jmp	short badnumblock
 27471                                  
 27472                                  got_device_com_cont:
 27473 00002189 5E                      	pop	si
 27474 0000218A 1F                      	pop	ds
 27475                                  
 27476                                  	; 11/12/2022
 27477                                  	; ds = cs
 27478                                  
 27479 0000218B E86505                  	call	LieInt12Mem
 27480 0000218E E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 27481                                  
 27482                                  	; 11/12/2022
 27483                                  	; ds = cs
 27484                                  	; 08/09/2023
 27485 00002191 31C0                    	xor	ax, ax ; 0
 27486 00002193 3806[0314]              	cmp	byte [multdeviceflag],al ; 0
 27487                                  	;cmp	byte [multdeviceflag],0
 27488                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27489                                  					;  driver in the file ; M027
 27490 00002197 750B                    	jne	short skip_pass_limit	;		      ; M027
 27491                                  
 27492                                  	; 11/12/2022
 27493                                  	; ds = cs
 27494                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27495                                  	;mov	bx,[cs:DevLoadEnd]
 27496                                  	;mov	[cs:break_addr+2],bx
 27497                                  
 27498                                  	;mov	word [break_addr],0
 27499                                  	; 08/09/2023
 27500 00002199 A3[F403]                	mov	[break_addr],ax ; 0
 27501 0000219C 8B1E[5A1E]              	mov	bx,[DevLoadEnd]
 27502 000021A0 891E[F603]              	mov	[break_addr+2],bx
 27503                                  
 27504                                  skip_pass_limit:
 27505                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27506                                  ;	number of installed devices (including DblSpace drives) where
 27507                                  ;	"drivenumber" is the number that the next block device will
 27508                                  ;	be assigned to. Because some naughty device drivers (like
 27509                                  ;	interlnk) look at the internal DOS variable instead of the
 27510                                  ;	value we pass it, we'll temporarily stick our value into
 27511                                  ;	DOS DATA while we're initializing the device drivers.
 27512                                  ;
 27513                                  ;	Note that this will make it impossible for this device
 27514                                  ;	driver to access the DblSpace drive letters, whether
 27515                                  ;	they are swapped-hosts or unswapped compressed drives,
 27516                                  ;	during its initialization phase.
 27517                                  
 27518                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27519                                  	;push	ds
 27520                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27521                                  	;
 27522                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27523                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27524                                  	;mov	ah,al
 27525                                  	;
 27526                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27527                                  	;pop	ds
 27528                                  	;
 27529                                  	;push	ax			; save real sysi_numio/ncds in ax
 27530                                  
 27531                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27532                                  	; (SYSINIT:24B9h)
 27533                                  
 27534 000021A4 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27535 000021A7 E8AB0E                  	call	calldev 		; calldev (sdevstrat);
 27536 000021AA BB0800                  	mov	bx,SYSDEV.INT ; 8
 27537 000021AD E8A50E                  	call	calldev 		; calldev (sdevint);
 27538                                  
 27539                                  	; 11/12/2022
 27540                                  	; ds <> cs
 27541                                  
 27542                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27543                                  	;pop	ax			; get real sysi_numio value
 27544                                  	;push	ds
 27545                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27546                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 27547                                  	;pop	ds
 27548                                  
 27549                                  	; 11/12/2022
 27550 000021B0 0E                      	push	cs
 27551 000021B1 1F                      	pop	ds
 27552                                  
 27553 000021B2 E86E05                  	call	TrueInt12Mem
 27554                                  
 27555                                  	; 11/12/2022
 27556                                  	; ds = cs
 27557                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27558                                  	;mov	[cs:DevBrkAddr],ax
 27559                                  	;mov	ax,[cs:break_addr+2]
 27560                                  	;mov	[cs:DevBrkAddr+2],ax
 27561 000021B5 A1[F403]                	mov	ax,[break_addr]	
 27562 000021B8 A3[601E]                	mov	[DevBrkAddr],ax
 27563 000021BB A1[F603]                	mov	ax,[break_addr+2]
 27564 000021BE A3[621E]                	mov	[DevBrkAddr+2],ax
 27565                                  
 27566                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27567                                  	;call	RetFromUM		; There we go... all done.
 27568                                  
 27569                                  	; 11/12/2022
 27570 000021C1 803E[641E]00            	cmp	byte [DevUMB],0	
 27571                                  	;cmp	byte [cs:DevUMB],0
 27572 000021C6 7403                    	je	short tryd_3
 27573 000021C8 E8D208                  	call	AllocUMB
 27574                                  	; 31/12/2022
 27575                                  	; ds= cs
 27576                                  tryd_3:
 27577                                  
 27578                                  ;ifndef ROMDOS
 27579                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27580                                  
 27581                                  	; 11/12/2022
 27582                                  	; ds = cs
 27583                                  	
 27584                                  	;cmp	byte [cs:runhigh],0FFh
 27585 000021CB 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27586 000021D0 7503                    	jne	short tryd_4
 27587                                  	
 27588                                  	; 11/12/2022
 27589                                  	; ds = cs
 27590 000021D2 E8F8E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27591                                  tryd_4:
 27592                                  ;endif ; ROMDOS
 27593                                  
 27594 000021D5 5E                      	pop	si
 27595 000021D6 1F                      	pop	ds
 27596 000021D7 C60400                  	mov	byte [si],0		; *p = 0;
 27597                                  
 27598 000021DA 0E                      	push	cs
 27599 000021DB 1F                      	pop	ds
 27600                                  
 27601 000021DC EB1F                    	jmp	short was_device_com
 27602                                  
 27603                                  ;----------------------------------------------------------------------------
 27604                                  
 27605                                  ;02/04/2019 - Retro DOS v4.0
 27606                                  
 27607                                  badnumblock:
 27608 000021DE 0E                      	push	cs
 27609 000021DF 1F                      	pop	ds
 27610 000021E0 BA[5437]                	mov	dx,badblock
 27611 000021E3 E89D10                  	call	print
 27612                                  
 27613                                  ;------ fall thru -----------------------------------------------------------
 27614                                  
 27615                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27616                                  	
 27617                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27618                                  	
 27619 000021E6 5E                      	pop	si
 27620 000021E7 07                      	pop	es
 27621                                  
 27622 000021E8 0E                      	push	cs
 27623 000021E9 1F                      	pop	ds
 27624                                  
 27625                                  skip1_resetmemhi:
 27626                                  	; 11/12/2022
 27627                                  	; ds = cs
 27628 000021EA 833E[FD03]00            	cmp	word [configmsgflag],0
 27629                                  	;cmp	word [cs:configmsgflag],0
 27630 000021EF 7409                    	je	short no_error_line_msg
 27631                                  
 27632 000021F1 E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27633                                  	; 11/12/2022
 27634                                  	; ds = cs
 27635                                  	;mov	word [cs:configmsgflag],0
 27636 000021F4 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27637                                  
 27638                                  no_error_line_msg:
 27639 000021FA E96FFD                  	jmp	coff
 27640                                  
 27641                                  ;----------------------------------------------------------------------------
 27642                                  
 27643                                  was_device_com:
 27644                                  	; 14/12/2022
 27645                                  	; ds = cs
 27646 000021FD A1[621E]                	mov	ax,[DevBrkAddr+2]
 27647                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27648 00002200 3B06[5A1E]              	cmp	ax,[DevLoadEnd]
 27649                                  	;cmp	ax,[cs:DevLoadEnd]
 27650 00002204 7605                    	jbe	short breakok
 27651                                  
 27652 00002206 5E                      	pop	si
 27653 00002207 07                      	pop	es
 27654 00002208 E93CFF                  	jmp	BadFile
 27655                                  
 27656                                  breakok:
 27657                                  	; 14/12/2022
 27658                                  	; ds = cs
 27659 0000220B C43E[6B02]              	les	di,[DOSINFO] 
 27660 0000220F C516[5C1E]              	lds	dx,[DevEntry]
 27661                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27662 00002213 89D6                    	mov	si,dx
 27663                                  
 27664                                  	; 14/11/2022
 27665                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27666                                  
 27667                                  	; 14/12/2022
 27668                                  	; ds <> cs
 27669                                  	
 27670                                  	;mov	ax,[si+4]
 27671 00002215 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27672                                  	; 12/12/2022
 27673 00002218 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27674                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27675 0000221B 7426                    	jz	short isblock
 27676                                  
 27677                                  ;------ lets deal with character devices
 27678                                  
 27679 0000221D 2E800E[0614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27680 00002223 E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 27681                                  jc_edd:
 27682 00002226 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27683                                  
 27684                                  	; 12/12/2022
 27685 00002228 A801                    	test	al,ISCIN
 27686                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27687 0000222A 7408                    	jz	short tryclk
 27688                                  
 27689 0000222C 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27690 00002230 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27691                                  tryclk: 
 27692                                  	; 12/12/2022
 27693 00002234 A808                    	test	al,ISCLOCK
 27694                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27695 00002236 7408                    	jz	short golink
 27696                                  
 27697 00002238 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27698 0000223C 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27699                                  golink: 
 27700 00002240 E9B000                  	jmp	linkit
 27701                                  
 27702                                  ;------ deal with block device drivers
 27703                                  
 27704                                  isblock:
 27705 00002243 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27706 00002247 08C0                    	or	al,al
 27707 00002249 749B                    	jz	short erase_dev_do
 27708                                  	;mov	[si+10],al
 27709 0000224B 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27710                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27711                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27712                                  perdrv:
 27713 0000224E 98                      	cbw				; warning no device > 127 units
 27714 0000224F 89C1                    	mov	cx,ax
 27715 00002251 88E6                    	mov	dh,ah
 27716                                  	;mov	dl,[es:di+32]
 27717 00002253 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27718 00002257 88D4                    	mov	ah,dl
 27719 00002259 00C4                    	add	ah,al			; check for too many devices
 27720 0000225B 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27721 0000225E 7603                    	jbe	short ok_block
 27722 00002260 E97BFF                  	jmp	badnumblock
 27723                                  
 27724                                  ok_block:
 27725 00002263 2E800E[0614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27726 00002269 E88006                  	call	DevSetBreak		; alloc the device
 27727 0000226C 72B8                    	jc	short jc_edd
 27728 0000226E 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27729                                  
 27730 00002272 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27731 00002277 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27732                                  perunit:
 27733 0000227C 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27734                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27735                                  	; 11/12/2022
 27736 00002281 26C46E00                	les	bp,[es:bp]
 27737                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27738                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27739                                  scandpb:
 27740                                  	;cmp	word [es:bp+25],-1
 27741 00002285 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27742 0000228A 7406                    	je	short foundpb
 27743                                  	;les	bp,[es:bp+25]
 27744 0000228C 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27745 00002290 EBF3                    	jmp	short scandpb
 27746                                  foundpb:
 27747 00002292 2EA1[601E]              	mov	ax,[cs:DevBrkAddr]
 27748 00002296 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27749 0000229A 2EA1[621E]              	mov	ax,[cs:DevBrkAddr+2]
 27750 0000229E 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27751                                  
 27752 000022A2 2EC42E[601E]            	les	bp,[cs:DevBrkAddr]
 27753 000022A7 2E8306[601E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27754                                  
 27755 000022AD E81B06                  	call	RoundBreakAddr
 27756                                  
 27757 000022B0 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27758 000022B6 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27759                                  
 27760 000022BB 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27761 000022BD 43                      	inc	bx
 27762 000022BE 43                      	inc	bx			;point to next guy
 27763                                  	;mov	[es:bp+DPB.DRIVE],dx
 27764                                  	; 11/12/2022
 27765 000022BF 26895600                	mov	[es:bp],dx ; 13/05/2019
 27766                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27767                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27768                                  	
 27769 000022C3 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27770 000022C5 CD21                    	int	21h
 27771                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27772                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27773                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27774                                  
 27775                                  	;mov	ax,[es:bp+2]
 27776 000022C7 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27777 000022CB 06                      	push	es
 27778 000022CC 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27779                                  	;cmp	ax,[es:di+10h]
 27780 000022D1 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27781 000022D5 07                      	pop	es
 27782                                  	;jna	short iblk_1
 27783                                  	;jmp	short bad_bpb_size_sector
 27784                                  	; 29/10/2022
 27785 000022D6 775A                    	ja	short bad_bpb_size_sector
 27786                                  iblk_1:
 27787 000022D8 1E                      	push	ds
 27788 000022D9 52                      	push	dx
 27789                                  
 27790 000022DA 2EC516[5C1E]            	lds	dx,[cs:DevEntry]
 27791                                  	;mov	[es:bp+13h],dx
 27792 000022DF 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27793                                  	;mov	[es:bp+15h],ds
 27794 000022E3 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27795                                  
 27796 000022E7 5A                      	pop	dx
 27797 000022E8 1F                      	pop	ds
 27798                                  
 27799 000022E9 42                      	inc	dx
 27800 000022EA FEC6                    	inc	dh
 27801 000022EC E28E                    	loop	perunit
 27802                                  
 27803 000022EE 0E                      	push	cs
 27804 000022EF 1F                      	pop	ds
 27805                                  
 27806 000022F0 E8CCE8                  	call	TempCDS 		; set cds for new drives
 27807                                  linkit:
 27808 000022F3 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27809 000022F8 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27810 000022FC 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27811                                  
 27812 00002300 2EC536[5C1E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27813 00002305 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27814 00002309 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27815 0000230D 8B04                    	mov	ax,[si]			;get pointer to next device
 27816 0000230F 2EA3[5C1E]              	mov	[cs:DevEntry],ax	;and save it
 27817                                  
 27818 00002313 890C                    	mov	[si],cx			;link in the driver
 27819 00002315 895402                  	mov	[si+2],dx
 27820                                  enddev:
 27821 00002318 5E                      	pop	si
 27822 00002319 07                      	pop	es
 27823 0000231A 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27824 0000231B 740B                    	jz	short coffj3
 27825                                  
 27826 0000231D 2EFE06[0314]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27827 00002322 E8E905                  	call	DevBreak		; M009
 27828                                  	; 11/12/2022
 27829                                  	; ds = cs (DevBreak)
 27830                                  
 27831                                  	; 03/04/2019 - Retro DOS v4.0
 27832                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27833 00002325 E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27834                                  coffj3: 
 27835                                  	; 18/12/2022
 27836                                  	; ax = 0
 27837 00002328 2EA2[0314]              	mov	[cs:multdeviceflag],al ; 0
 27838                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27839 0000232C E8DF05                  	call	DevBreak
 27840                                  	; 11/12/2022
 27841                                  	; ds = cs (DevBreak)
 27842                                  	
 27843                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27844                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27845                                  ;					;  created a bogus arena to try
 27846                                  ;					;  to protect some of its resident-
 27847                                  ;					;  init code.
 27848                                  	;call	CheckDoubleSpace
 27849 0000232F E93AFC                  	jmp	coff
 27850                                  
 27851                                  ;----------------------------------------------------------------------------
 27852                                  
 27853                                  ;CheckDoubleSpace:
 27854                                  ;;;;	ifdef	dblspace_hooks
 27855                                  ;
 27856                                  ;;	Now check for two special MagicDrv cases:
 27857                                  ;;
 27858                                  ;;       a) the last driver load was MagicDrv final placement:
 27859                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27860                                  ;;
 27861                                  ;;       b) MagicDrv is currently in temporary home:
 27862                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27863                                  ;
 27864                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27865                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27866                                  ;
 27867                                  ;;	Now inquire of driver whether it is present, and final located
 27868                                  ;
 27869                                  ;	mov	ax,multMagicdrv ; 4A11h
 27870                                  ;	mov	bx,MD_VERSION ; 0
 27871                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27872                                  ;	or	ax,ax			; is it there?
 27873                                  ;	jnz	short no_more_magic_calls ; done if not
 27874                                  ;
 27875                                  ;	test	dx,8000h		; is it final placed?
 27876                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27877                                  ;
 27878                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27879                                  ;;	don't keep checking it, and add its number of drive letters
 27880                                  ;;	to drivenumber.
 27881                                  ;
 27882                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27883                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27884                                  ;;					;  the drive number we'll pass to the
 27885                                  ;;					;  next loadable block device.
 27886                                  ;
 27887                                  ;	jmp	short no_more_magic_calls ; and finished.
 27888                                  ;
 27889                                  ;magic_not_yet_home:
 27890                                  ;	push	es
 27891                                  ;	push	si
 27892                                  ;
 27893                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27894                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27895                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27896                                  ;
 27897                                  ;	mov	bx,2
 27898                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27899                                  ;;					;   by this many units
 27900                                  ;
 27901                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27902                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27903                                  ;;					;  sees this, to prevent bad things
 27904                                  ;;					;  from happening if people run the
 27905                                  ;;					;  new driver with an old BIOS
 27906                                  ;	call	far [cs:MagicBackdoor]
 27907                                  ;
 27908                                  ;	pop	si
 27909                                  ;	pop	es
 27910                                  ;
 27911                                  ;no_more_magic_calls:
 27912                                  ;
 27913                                  ;;;;	endif
 27914                                  ;	retn
 27915                                  
 27916                                  ; 03/04/2019 - Retro DOS v4.0
 27917                                  
 27918                                  bad_bpb_size_sector:
 27919 00002332 5E                      	pop	si
 27920 00002333 07                      	pop	es
 27921 00002334 BA[7636]                	mov	dx,badsiz_pre
 27922 00002337 BB[5436]                	mov	bx,crlfm
 27923 0000233A E8240F                  	call	prnerr
 27924                                  
 27925 0000233D E92CFC                  	jmp	coff
 27926                                  
 27927                                  ;------------------------------------------------------------------------------
 27928                                  ; country command
 27929                                  ;      the syntax is:
 27930                                  ;	country=country id {,codepage {,path}}
 27931                                  ;	country=country id {,,path}	:default codepage id in dos
 27932                                  ;------------------------------------------------------------------------------
 27933                                  
 27934                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27935                                  	; (SYSINIT:2663h)
 27936                                  tryq:
 27937 00002340 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27938 00002343 7403                    	je	short tryq_cont
 27939                                  skip_it3:
 27940 00002345 E90801                  	jmp	tryf
 27941                                  tryq_cont:
 27942                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27943                                  ;;ifdef	MULTI_CONFIG
 27944                                  ;       call    query_user		; query the user if config_cmd
 27945                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27946                                  ;;endif
 27947                                  	; 14/12/2022
 27948                                  	; ds = cs
 27949                                  	; bx = 0
 27950                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27951                                  	;mov	word [cs:p_code_page],0
 27952 00002348 881E[0C33]              	mov	[cntry_drv],bl ; 0
 27953 0000234C 891E[211D]              	mov	[p_code_page],bx ; 0
 27954                                  	
 27955 00002350 BF[EA1C]                	mov	di,cntry_parms
 27956 00002353 31C9                    	xor	cx,cx
 27957                                  	; 04/01/2023
 27958                                  	;mov	dx,cx
 27959                                  do52:
 27960 00002355 E8F602                  	call	sysinit_parse
 27961 00002358 730B                    	jnc	short if52		; parse error,check error code and
 27962                                  
 27963 0000235A E8E000                  	call	cntry_error		; show message and end the search loop.
 27964                                  	; 14/12/2022
 27965                                  	; ds = cs
 27966 0000235D C706[1F1D]FFFF          	mov	word [p_cntry_code],-1
 27967                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27968 00002363 EB34                    	jmp	short sr52
 27969                                  if52:
 27970 00002365 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27971 00002368 742F                    	jz	short sr52		; then end the search loop
 27972                                  
 27973                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27974                                  	; 14/12/2022
 27975                                  	; ds = cs
 27976 0000236A 803E[BC1C]01            	cmp	byte [result_val],_$P_Number	
 27977                                  	;cmp	byte [cs:result_val],_$P_Number
 27978 0000236F 7512                    	jnz	short if56
 27979                                  
 27980                                  	;;mov	ax,[cs:rw_dword]
 27981                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27982                                  	; 14/12/2022
 27983 00002371 A1[C01C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27984 00002374 83F901                  	cmp	cx,1
 27985 00002377 7505                    	jne	short if57
 27986                                  
 27987                                  	;mov	[cs:p_cntry_code],ax
 27988                                  	; 14/12/2022
 27989 00002379 A3[1F1D]                	mov	[p_cntry_code],ax
 27990                                  
 27991                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27992                                  	;jmp	short en57
 27993                                  	; 12/12/2022
 27994                                  	;jmp	short en56
 27995 0000237C EBD7                    	jmp	short do52
 27996                                  
 27997                                  if57:
 27998                                  	;mov	[cs:p_code_page],ax
 27999                                  	; 14/12/2022
 28000                                  	; ds = cs
 28001 0000237E A3[211D]                	mov	[p_code_page],ax
 28002                                  en57:
 28003                                  	;jmp	short en56		; path entered
 28004                                  	; 12/12/2022
 28005 00002381 EBD2                    	jmp	short do52
 28006                                  
 28007                                  if56:
 28008 00002383 1E                      	push	ds
 28009 00002384 06                      	push	es
 28010 00002385 56                      	push	si
 28011 00002386 57                      	push	di
 28012                                  
 28013 00002387 0E                      	push	cs
 28014 00002388 07                      	pop	es
 28015                                  
 28016                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 28017                                  	; 14/12/2022
 28018 00002389 C536[C01C]              	lds	si,[rv_dword]
 28019 0000238D BF[0C33]                	mov	di,cntry_drv
 28020 00002390 E8BD0E                  	call	move_asciiz
 28021                                  
 28022 00002393 5F                      	pop	di
 28023 00002394 5E                      	pop	si
 28024 00002395 07                      	pop	es
 28025 00002396 1F                      	pop	ds
 28026                                  
 28027                                  en56:
 28028 00002397 EBBC                    	jmp	short do52
 28029                                  
 28030                                  sr52:
 28031                                  	; 14/12/2022
 28032                                  	; ds = cs
 28033 00002399 833E[1F1D]FF            	cmp	word [p_cntry_code],-1
 28034                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 28035 0000239E 7509                    	jne	short tryq_open
 28036 000023A0 E9C9FB                  	jmp	coff
 28037                                  
 28038                                  tryqbad:				;"invalid country code or code page"
 28039 000023A3 F9                      	stc
 28040 000023A4 BA[BD36]                	mov     dx,badcountry
 28041 000023A7 EB79                    	jmp     tryqchkerr
 28042                                  
 28043                                  tryq_open:
 28044                                  	; 14/12/2022
 28045                                  	; ds = cs
 28046 000023A9 803E[0C33]00            	cmp	byte [cntry_drv],0
 28047                                  	;cmp	byte [cs:cntry_drv],0
 28048 000023AE 7405                    	je	short tryq_def
 28049 000023B0 BA[0C33]                	mov	dx,cntry_drv
 28050 000023B3 EB03                    	jmp	short tryq_openit
 28051                                  
 28052                                  tryq_def:
 28053 000023B5 BA[0E33]                	mov	dx,cntry_root
 28054                                  tryq_openit:
 28055 000023B8 B8003D                  	mov	ax,3D00h		;open a file
 28056 000023BB F9                      	stc
 28057 000023BC CD21                    	int	21h
 28058 000023BE 7242                    	jc	short tryqfilebad	;open failure
 28059                                  
 28060                                  	; 14/12/2022
 28061                                  	; ds = cs
 28062 000023C0 A3[D803]                	mov	[cntryfilehandle],ax
 28063                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 28064 000023C3 89C3                    	mov	bx,ax
 28065 000023C5 A1[1F1D]                	mov	ax,[p_cntry_code]
 28066 000023C8 8B16[211D]              	mov	dx,[p_code_page]
 28067                                  	;mov	ax,[cs:p_cntry_code]
 28068                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 28069                                  	;mov	cx,[cs:memhi]
 28070 000023CC 8B0E[E003]              	mov	cx,[memhi]
 28071 000023D0 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 28072                                  					; M023
 28073                                  	; 14/12/2022
 28074                                  	; ds = cs
 28075 000023D4 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 28076                                  	;cmp	cx,[cs:ALLOCLIM]
 28077 000023D8 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 28078                                  
 28079 000023DA BE[0C33]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 28080 000023DD 803C00                  	cmp	byte [si],0 		;default path?
 28081 000023E0 7502                    	jne	short tryq_set_for_dos
 28082                                  
 28083 000023E2 46                      	inc	si
 28084 000023E3 46                      	inc	si			;ds:si -> cntry_root
 28085                                  
 28086                                  tryq_set_for_dos:
 28087                                  	; 14/12/2022
 28088                                  	; ds = cs
 28089 000023E4 C43E[7702]              	les	di,[sysi_country]
 28090                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 28091 000023E8 57                      	push	di			;save di
 28092                                  	;add	di,8
 28093 000023E9 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 28094 000023EC E8610E                  	call	move_asciiz		;set the path to country.sys in dos.
 28095 000023EF 5F                      	pop	di			;es:di -> country info tab again.
 28096                                  
 28097                                  	; 14/12/2022	
 28098 000023F0 8B0E[E003]              	mov	cx,[memhi]
 28099                                  	;mov	cx,[cs:memhi]
 28100 000023F4 8ED9                    	mov	ds,cx
 28101 000023F6 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 28102 000023F8 E8DD0C                  	call	setdoscountryinfo	;now do the job!!!
 28103                                  	; ds <> cs ; 14/12/2022
 28104 000023FB 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 28105                                  
 28106 000023FD 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 28107 00002400 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 28108                                  
 28109                                  tryqfilebad:
 28110 00002402 0E                      	push	cs
 28111 00002403 07                      	pop	es
 28112 00002404 2E803E[0C33]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 28113 0000240A 7405                    	je	short tryqdefbad
 28114                                  
 28115 0000240C BE[0C33]                	mov	si,cntry_drv
 28116 0000240F EB03                    	jmp	short tryqbadload
 28117                                  
 28118                                  tryqdefbad:				;default file has been used.
 28119 00002411 BE[0E33]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 28120                                  tryqbadload:
 28121 00002414 E8440E                  	call	badload 		;ds will be restored to sysinit_seg
 28122                                  	;mov	cx,[cs:CONFBOT]
 28123                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28124                                  	;mov	cx,[cs:top_of_cdss]
 28125                                  	; 11/12/2022
 28126                                  	; ds = cs
 28127 00002417 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 28128 0000241B 8EC1                    	mov	es,cx			;restore es -> confbot.
 28129 0000241D EB13                    	jmp	short coffj4
 28130                                  
 28131                                  tryqmemory:
 28132 0000241F BA[0037]                	mov	dx,insufmemory
 28133                                  tryqchkerr:
 28134                                  	;mov	cx,[cs:CONFBOT]
 28135                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28136                                  	;mov	cx,[cs:top_of_cdss]
 28137                                  	; 12/12/2022
 28138 00002422 0E                      	push	cs
 28139 00002423 1F                      	pop	ds
 28140 00002424 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 28141 00002428 8EC1                    	mov	es,cx			;restore es -> confbot seg
 28142                                  	;push	cs
 28143                                  	;pop	ds			;restore ds to sysinit_seg
 28144 0000242A 7306                    	jnc	short coffj4		;if no error,then exit
 28145                                  
 28146 0000242C E8540E                  	call	print			;else show error message
 28147 0000242F E86F02                  	call	error_line
 28148                                  coffj4:
 28149                                  	;mov	bx,[cs:cntryfilehandle]
 28150                                  	; 11/12/2022
 28151                                  	; ds = cs
 28152 00002432 8B1E[D803]              	mov	bx,[cntryfilehandle]
 28153 00002436 B43E                    	mov	ah,3Eh
 28154 00002438 CD21                    	int	21h			;close a file. don't care even if it fails.
 28155 0000243A E92FFB                  	jmp	coff
 28156                                  
 28157                                  ;--------------------------------------------
 28158                                  
 28159                                  cntry_error:
 28160                                  
 28161                                  ;function: show "invalid country code or code page" messages,or
 28162                                  ;		"error in country command" depending on the error code
 28163                                  ;		in ax returned by sysparse;
 28164                                  ;in:	ax - error code
 28165                                  ;	ds - sysinitseg
 28166                                  ;	es - confbot
 28167                                  ;out:	show message.  dx destroyed.
 28168                                  
 28169 0000243D 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 28170 00002440 7505                    	jne	short if64
 28171 00002442 BA[BD36]                	mov	dx,badcountry		;"invalid country code or code page"
 28172 00002445 EB03                    	jmp	short en64
 28173                                  if64:
 28174 00002447 BA[E336]                	mov	dx,badcountrycom	;"error in contry command"
 28175                                  en64:
 28176 0000244A E8360E                  	call	print
 28177                                  	;call	error_line
 28178                                  	;retn
 28179                                  	; 11/12/2022
 28180 0000244D E95102                  	jmp	error_line
 28181                                  
 28182                                  ;------------------------------------------------------------------------------
 28183                                  ; files command
 28184                                  ;------------------------------------------------------------------------------
 28185                                  
 28186                                  ;******************************************************************************
 28187                                  ; function: parse the parameters of files= command.			      *
 28188                                  ;									      *
 28189                                  ; input :								      *
 28190                                  ;	es:si -> parameters in command line.				      *
 28191                                  ; output:								      *
 28192                                  ;	variable files set.						      *
 28193                                  ;									      *
 28194                                  ; subroutines to be called:						      *
 28195                                  ;	sysinit_parse							      *
 28196                                  ; logic:								      *
 28197                                  ; {									      *
 28198                                  ;	set di points to files_parms;					      *
 28199                                  ;	set dx,cx to 0; 						      *
 28200                                  ;	while (end of command line)					      *
 28201                                  ;	{ sysinit_parse;						      *
 28202                                  ;	  if (no error) then						      *
 28203                                  ;	     files = result_val._$P_picked_val				      *
 28204                                  ;	  else								      *
 28205                                  ;	     error exit;						      *
 28206                                  ;	};								      *
 28207                                  ; };									      *
 28208                                  ;									      *
 28209                                  ;******************************************************************************
 28210                                  
 28211                                  tryf:
 28212 00002450 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 28213 00002453 7523                    	jne	short tryl
 28214                                  
 28215                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28216                                  ;;ifdef	MULTI_CONFIG
 28217                                  ;       call    query_user              ; query the user if config_cmd
 28218                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 28219                                  ;;endif
 28220                                  
 28221                                  	; 14/12/2022
 28222                                  	; ds = cs
 28223                                  
 28224 00002455 BF[231D]                	mov	di,files_parms
 28225 00002458 31C9                    	xor	cx,cx
 28226                                  	; 04/01/2023
 28227                                  	;mov	dx,cx
 28228                                  do67:
 28229 0000245A E8F101                  	call	sysinit_parse
 28230 0000245D 7303                    	jnc	short if67		; parse error
 28231                                  	;call	badparm_p		;  and show messages and end the search loop.
 28232                                  	;jmp	short sr67
 28233                                  	; 04/01/2023
 28234 0000245F E96A01                  	jmp	badparm_p_coff
 28235                                  if67:
 28236 00002462 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28237 00002465 7408                    	je	short en67		; then end the $endloop
 28238                                  
 28239                                  	; 14/12/2022
 28240                                  	; ds = cs
 28241                                  	;;mov	al,[cs:rv_dword]
 28242                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28243                                  	;mov	[cs:p_files],al		; save it temporarily
 28244                                  	;mov	al,[rv_dword]
 28245 00002467 A0[C01C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28246 0000246A A2[421D]                	mov	[p_files],al
 28247                                  
 28248 0000246D EBEB                    	jmp	short do67
 28249                                  en67:
 28250                                  	; 14/12/2022
 28251                                  	; ds = cs
 28252 0000246F A0[421D]                	mov	al,[p_files]
 28253 00002472 A2[9D02]                	mov	[FILES],al	
 28254                                  	;mov	al,[cs:p_files]
 28255                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28256                                  sr67:
 28257 00002475 E9F4FA                  	jmp	coff
 28258                                  
 28259                                  ; 04/04/2019 - Retro DOS v4.0
 28260                                  
 28261                                  ;------------------------------------------------------------------------------
 28262                                  ; lastdrive command
 28263                                  ;------------------------------------------------------------------------------
 28264                                  
 28265                                  ;******************************************************************************
 28266                                  ; function: parse the parameters of lastdrive= command. 		      *
 28267                                  ;									      *
 28268                                  ; input :								      *
 28269                                  ;	es:si -> parameters in command line.				      *
 28270                                  ; output:								      *
 28271                                  ;	set the variable num_cds.					      *
 28272                                  ;									      *
 28273                                  ; subroutines to be called:						      *
 28274                                  ;	sysinit_parse							      *
 28275                                  ; logic:								      *
 28276                                  ; {									      *
 28277                                  ;	set di points to ldrv_parms;					      *
 28278                                  ;	set dx,cx to 0; 						      *
 28279                                  ;	while (end of command line)					      *
 28280                                  ;	{ sysinit_parse;						      *
 28281                                  ;	  if (no error) then						      *
 28282                                  ;	     set num_cds to the returned value; 			      *
 28283                                  ;	  else	/*error exit*/						      *
 28284                                  ;	     error exit;						      *
 28285                                  ;	};								      *
 28286                                  ; };									      *
 28287                                  ;									      *
 28288                                  ;******************************************************************************
 28289                                  
 28290                                  tryl:
 28291 00002478 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28292 0000247B 7523                    	jne	short tryp
 28293                                  
 28294                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28295                                  ;;ifdef	MULTI_CONFIG
 28296                                  ;       call    query_user      ; query the user if config_cmd
 28297                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28298                                  ;;endif
 28299                                  	; 14/12/2022
 28300                                  	; ds = cs
 28301                                  
 28302 0000247D BF[7A1D]                	mov	di,ldrv_parms
 28303 00002480 31C9                    	xor	cx,cx
 28304                                  	; 04/01/2023
 28305                                  	;mov	dx,cx
 28306                                  do73:
 28307 00002482 E8C901                  	call	sysinit_parse
 28308 00002485 7303                    	jnc	short if73	; parse error
 28309                                  	;call	badparm_p	;  and show messages and end the search loop.
 28310                                  	;jmp	short sr73
 28311                                  	; 04/01/2023
 28312 00002487 E94201                  	jmp	badparm_p_coff
 28313                                  if73:
 28314 0000248A 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28315 0000248D 7408                    	je	short en73	; then end the $endloop
 28316                                  
 28317                                  	; 14/12/2022
 28318                                  	; ds = cs
 28319                                  	;;mov	al,[cs:rv_dword]
 28320                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28321                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28322                                  
 28323                                  	;mov	al,[rv_dword]
 28324 0000248F A0[C01C]                	mov	al,[rv_byte]
 28325 00002492 A2[8E1D]                	mov	[p_ldrv],al
 28326                                  
 28327 00002495 EBEB                    	jmp	short do73
 28328                                  en73:
 28329                                  	; 14/12/2022
 28330                                  	; ds = cs
 28331 00002497 A0[8E1D]                	mov	al,[p_ldrv]
 28332 0000249A A2[A002]                	mov	[NUM_CDS],al
 28333                                  	;mov	al,[cs:p_ldrv]
 28334                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28335                                  sr73:
 28336 0000249D E9CCFA                  	jmp	coff
 28337                                  
 28338                                  ;--------------------------------------------------------------------------
 28339                                  ; setting drive parameters
 28340                                  ;--------------------------------------------------------------------------
 28341                                  
 28342                                  tryp:
 28343 000024A0 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28344 000024A3 7511                    	jne	short tryk
 28345                                  
 28346                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28347                                  ;;ifdef	MULTI_CONFIG
 28348                                  ;       call    query_user      ; query the user if config_cmd
 28349                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 28350                                  ;;endif
 28351                                  
 28352 000024A5 E83508                  	call	parseline
 28353 000024A8 7209                    	jc	short trypbad
 28354 000024AA E85C07                  	call	setparms
 28355 000024AD E89007                  	call	diddleback
 28356                                  
 28357                                  ; No error check here, because setparms and diddleback have no error 
 28358                                  ; returns, and setparms as coded now can return with carry set. 
 28359                                  ;       jc	short trypbad
 28360                                  
 28361                                  	; 12/12/2022
 28362                                  	; cf = 0
 28363                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28364                                  	;jc	short trypbad
 28365                                  	
 28366 000024B0 E9B9FA                  	jmp	coff
 28367                                  trypbad:
 28368 000024B3 E9B701                  	jmp	badop
 28369                                  
 28370                                  ;--------------------------------------------------------------------------
 28371                                  ; setting internal stack parameters
 28372                                  ; stacks=m,n where
 28373                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28374                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28375                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28376                                  ;	any combinations that are not within the specified limits will
 28377                                  ;	result in "unrecognized command" error.
 28378                                  ;--------------------------------------------------------------------------
 28379                                  
 28380                                  ;**************************************************************************
 28381                                  ;									  *
 28382                                  ; function: parse the parameters of stacks= command.			  *
 28383                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28384                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28385                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28386                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28387                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28388                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28389                                  ;	    (or if "0,0" pair has been entered.)			  *
 28390                                  ; input :								  *
 28391                                  ;	es:si -> parameters in command line.				  *
 28392                                  ; output:								  *
 28393                                  ;	set the variables stack_count,stack_size.			  *
 28394                                  ;									  *
 28395                                  ; subroutines to be called:						  *
 28396                                  ;	sysinit_parse							  *
 28397                                  ; logic:								  *
 28398                                  ; {									  *
 28399                                  ;	set di points to stks_parms;					  *
 28400                                  ;	set dx,cx to 0; 						  *
 28401                                  ;	while (end of command line)					  *
 28402                                  ;	{ sysinit_parse;						  *
 28403                                  ;	  if (no error) then						  *
 28404                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28405                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28406                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28407                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28408                                  ;	     }								  *
 28409                                  ;	  else	/*error exit*/						  *
 28410                                  ;	     error exit;						  *
 28411                                  ;	};								  *
 28412                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28413                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28414                                  ;	 else error_exit;						  *
 28415                                  ; };									  *
 28416                                  ;**************************************************************************
 28417                                  
 28418                                  tryk:
 28419                                          ;if      stacksw
 28420                                  
 28421 000024B6 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28422 000024B9 7402                    	je	short do_tryk
 28423                                  skip_it4:
 28424 000024BB EB74                    	jmp	short trys	; 15/12/2022
 28425                                  do_tryk:
 28426                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28427                                  ;;ifdef	MULTI_CONFIG
 28428                                  ;       call    query_user              ; query the user if config_cmd
 28429                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28430                                  ;;endif
 28431                                  	; 14/12/2022
 28432                                  	; ds = cs
 28433                                  
 28434 000024BD BF[8F1D]                	mov	di,stks_parms
 28435 000024C0 31C9                    	xor	cx,cx
 28436                                  	; 04/01/2023
 28437                                  	;mov	dx,cx
 28438                                  do79:
 28439 000024C2 E88901                  	call	sysinit_parse
 28440 000024C5 730B                    	jnc	short if79		; parse error
 28441                                  
 28442 000024C7 BA[6F37]                	mov	dx,badstack		; "invalid stack parameter"
 28443 000024CA E8B60D                  	call	print			;  and show messages and end the search loop.
 28444 000024CD E8D101                  	call	error_line
 28445                                  	;jmp	sr79
 28446                                  	; 11/12/2022
 28447 000024D0 EB39                    	jmp	short sr79
 28448                                  if79:
 28449 000024D2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28450 000024D5 7412                    	je	short en79		; then end the $endloop
 28451                                  
 28452                                  	; 14/12/2022
 28453                                  	; ds = cs
 28454                                  
 28455                                  	;;mov	ax,[cs:rv_dword]
 28456                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28457                                  	;mov	ax,[rv_dword]
 28458 000024D7 A1[C01C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28459                                  
 28460 000024DA 83F901                  	cmp	cx,1
 28461 000024DD 7505                    	jne	short if83
 28462                                  
 28463                                  	; 14/12/2022
 28464                                  	;mov	[cs:p_stack_count],ax
 28465                                  	;jmp	short en83
 28466 000024DF A3[C41D]                	mov	[p_stack_count],ax
 28467 000024E2 EBDE                    	jmp	short do79
 28468                                  if83:
 28469                                  	; 14/12/2022
 28470                                  	;mov	[cs:p_stack_size],ax
 28471 000024E4 A3[C61D]                	mov	[p_stack_size],ax
 28472                                  en83:
 28473 000024E7 EBD9                    	jmp	short do79
 28474                                  en79:
 28475                                  	; 14/12/2022
 28476                                  	; ds = cs
 28477 000024E9 A1[C41D]                	mov	ax,[p_stack_count]
 28478 000024EC 09C0                    	or	ax,ax
 28479 000024EE 741E                    	jz	short if87		
 28480                                  
 28481                                  	; 14/12/2022
 28482                                  	;cmp	word [p_stack_count],0
 28483                                  	;;cmp	word [cs:p_stack_count],0
 28484                                  	;je	short if87
 28485                                  
 28486                                  	; 14/12/2022
 28487 000024F0 83F808                  	cmp	ax, mincount ; 8
 28488                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28489                                  	; 15/12/2022
 28490 000024F3 721F                    	jb	short en87
 28491 000024F5 833E[C61D]20            	cmp	word [p_stack_size],minsize ; 32
 28492                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28493                                  	; 15/12/2022
 28494 000024FA 7218                    	jb	short en87
 28495                                  if94:
 28496                                  	; 14/12/2022
 28497                                  	; ds = cs
 28498                                  	; ax = [p_stack_count]
 28499                                  	;mov	ax,[p_stack_count]
 28500                                  	;;mov	ax,[cs:p_stack_count]
 28501 000024FC A3[8A02]                	mov	[stack_count],ax
 28502                                  	;mov	[cs:stack_count],ax
 28503                                  	;mov	ax,[cs:p_stack_size]
 28504 000024FF A1[C61D]                	mov	ax,[p_stack_size]
 28505                                  	;mov	[cs:stack_size],ax
 28506 00002502 A3[8C02]                	mov	[stack_size],ax
 28507                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28508 00002505 C706[8E02]FFFF          	mov	word [stack_addr],-1
 28509                                  sr79:
 28510 0000250B E95EFA                  	jmp	coff
 28511                                  
 28512                                  if87:
 28513                                  	; 14/12/2022
 28514 0000250E 3906[C61D]              	cmp	[p_stack_size],ax ; 0
 28515 00002512 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28516                                  	;cmp	word [cs:p_stack_size],0
 28517                                  	;je	short if94
 28518                                  en87:
 28519                                  	; 15/12/2022
 28520                                  	; ([p_stack_count] is invalid, use default values)
 28521                                  	; 14/12/2022
 28522                                  	; ds = cs
 28523 00002514 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28524 0000251A C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28525 00002520 C706[8E02]0000          	mov	word [stack_addr],0
 28526                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28527                                  	;				; reset to default value.
 28528                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28529                                  	;mov	word [cs:stack_addr],0
 28530                                  
 28531 00002526 BA[6F37]                	mov	dx,badstack
 28532 00002529 E8570D                  	call	print
 28533 0000252C E87201                  	call	error_line
 28534 0000252F EBDA                    	jmp	short sr79
 28535                                  
 28536                                  ; 15/12/2022
 28537                                  %if 0
 28538                                  	mov	di,stks_parms
 28539                                  	xor	cx,cx
 28540                                  	; 04/01/2023
 28541                                  	;mov	dx,cx
 28542                                  do79:
 28543                                  	call	sysinit_parse
 28544                                  	jnc	short if79		; parse error
 28545                                  
 28546                                  	mov	dx,badstack		; "invalid stack parameter"
 28547                                  	call	print			;  and show messages and end the search loop.
 28548                                  	call	error_line
 28549                                  	;jmp	sr79
 28550                                  	; 11/12/2022
 28551                                  	jmp	short sr79
 28552                                  if79:
 28553                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28554                                  	je	short en79		; then end the $endloop
 28555                                  
 28556                                  	;mov	ax,[cs:rv_dword]
 28557                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28558                                  	cmp	cx,1
 28559                                  	jne	short if83
 28560                                  
 28561                                  	mov	[cs:p_stack_count],ax
 28562                                  	jmp	short en83
 28563                                  if83:
 28564                                  	mov	[cs:p_stack_size],ax
 28565                                  en83:
 28566                                  	jmp	short do79
 28567                                  en79:
 28568                                  	cmp	word [cs:p_stack_count],0
 28569                                  	je	short if87
 28570                                  
 28571                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28572                                  	jb	short ll88
 28573                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28574                                  	jnb	short if88
 28575                                  ll88:
 28576                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28577                                  if88:
 28578                                  	jmp	short en87
 28579                                  
 28580                                  	; 11/12/2022
 28581                                  if94:
 28582                                  	mov	ax,[cs:p_stack_count]
 28583                                  	mov	[cs:stack_count],ax
 28584                                  	mov	ax,[cs:p_stack_size]
 28585                                  	mov	[cs:stack_size],ax
 28586                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28587                                  sr79:
 28588                                  	jmp	coff
 28589                                  
 28590                                  if87:
 28591                                  	cmp	word [cs:p_stack_size],0
 28592                                  	je	short en87
 28593                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28594                                  en87:
 28595                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28596                                  	jne	short if94
 28597                                  
 28598                                  	mov	word [cs:stack_count],defaultcount ; 9
 28599                                  					; reset to default value.
 28600                                  	mov	word [cs:stack_size],defaultsize ; 128
 28601                                  	mov	word [cs:stack_addr],0
 28602                                  
 28603                                  	mov	dx,badstack
 28604                                  	call	print
 28605                                  	call	error_line
 28606                                  	jmp	short sr79
 28607                                  
 28608                                  %endif
 28609                                  
 28610                                  ; 11/12/2022
 28611                                  %if 0 
 28612                                  
 28613                                  if94:
 28614                                  	mov	ax,[cs:p_stack_count]
 28615                                  	mov	[cs:stack_count],ax
 28616                                  	mov	ax,[cs:p_stack_size]
 28617                                  	mov	[cs:stack_size],ax
 28618                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28619                                  sr79:
 28620                                  	jmp	coff
 28621                                  
 28622                                  %endif
 28623                                  
 28624                                  	;endif
 28625                                  
 28626                                  ;------------------------------------------------------------------------
 28627                                  ; shell command
 28628                                  ;------------------------------------------------------------------------
 28629                                  
 28630                                  trys:
 28631 00002531 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28632 00002534 753C                    	jne	short tryx
 28633                                  
 28634                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28635                                  ;;ifdef	MULTI_CONFIG
 28636                                  ;       call    query_user              ; query the user if config_cmd
 28637                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28638                                  ;       mov	byte [cs:newcmd],1
 28639                                  ;;endif
 28640                                  
 28641                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28642                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28643                                  	;mov	byte [cs:command_line+1],0
 28644                                  	; 15/12/2022
 28645                                  	; ds = cs
 28646 00002536 C606[AA02]00            	mov	byte [command_line+1],0
 28647                                  
 28648 0000253B BF[5A33]                        mov     di,commnd+1		; we already have the first char
 28649 0000253E 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28650                                  storeshell:
 28651 00002541 E8970A                  	call	getchr
 28652 00002544 08C0                            or      al,al                   ; this is the normal case: "organize"
 28653 00002546 7419                            jz	short getshparms	; put a ZERO right after the filename
 28654                                  
 28655 00002548 3C20                            cmp     al," "                  ; this may happen if there are no args
 28656 0000254A 7205                            jb	short endofshell	; I suppose...
 28657 0000254C 8805                    	mov	[di],al
 28658 0000254E 47                      	inc	di
 28659                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28660                                          ;jb	short storeshell	; commnd (the filename)
 28661                                          ;jmp	short endofshell
 28662                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28663 0000254F EBF0                    	jmp	short storeshell
 28664                                  
 28665                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28666                                  ;getshparms:
 28667                                  ;	mov     byte [di],0		; zero-terminate the filename
 28668                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28669                                  ;
 28670                                  ;parmloop:
 28671                                  ;	call	getchr
 28672                                  ;	cmp	al," "
 28673                                  ;	jb	short endofparms
 28674                                  ;	mov	[di],al
 28675                                  ;	inc	di
 28676                                  ;	cmp     di,command_line+126
 28677                                  ;	jb	short parmloop
 28678                                  ;endofparms:
 28679                                  ;	mov     cx,di
 28680                                  ;	sub     cx,command_line+1
 28681                                  ;	mov     [cs:command_line],cl
 28682                                  ;
 28683                                  ;endofshell:
 28684                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28685                                  ;					; the command-line as the case may be)
 28686                                  ;skipline:
 28687                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28688                                  ;       je	short endofline		; the line: watch for ever-present LF
 28689                                  ;call	getchr
 28690                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28691                                  ;
 28692                                  ;endofline:
 28693                                  ;       jmp     conflp
 28694                                  
 28695                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28696                                  endofshell:
 28697 00002551 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28698                                  					; the command-line as the case may be)
 28699 00002554 E8840A                  	call	getchr
 28700                                  skipline:
 28701 00002557 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28702 00002559 7403                    	je	short endofline		; the line: watch for ever-present LF
 28703 0000255B E87D0A                  	call	getchr
 28704                                  endofline:
 28705 0000255E E9E6F9                  	jmp     conflp
 28706                                  
 28707                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28708                                  getshparms:
 28709                                  	; 18/12/2022
 28710                                  	; al = 0
 28711 00002561 8805                    	mov	[di],al ; 0
 28712                                  	;mov	byte [di],0		; zero-terminate the filename
 28713 00002563 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28714                                  parmloop:
 28715 00002566 E8720A                  	call	getchr
 28716 00002569 3C20                    	cmp	al," " ; 20h
 28717 0000256B 72E4                    	jb	short endofshell
 28718 0000256D 8805                    	mov	[di],al
 28719 0000256F 47                      	inc	di
 28720 00002570 EBF4                    	jmp	short parmloop
 28721                                  
 28722                                  ;------------------------------------------------------------------------
 28723                                  ; fcbs command
 28724                                  ;------------------------------------------------------------------------
 28725                                  
 28726                                  ;************************************************************************
 28727                                  ; function: parse the parameters of fcbs= command.			*
 28728                                  ;									*
 28729                                  ; input :								*
 28730                                  ;	es:si -> parameters in command line.				*
 28731                                  ; output:								*
 28732                                  ;	set the variables fcbs,keep.					*
 28733                                  ;									*
 28734                                  ; subroutines to be called:						*
 28735                                  ;	sysinit_parse							*
 28736                                  ; logic:								*
 28737                                  ; {									*
 28738                                  ;	set di points to fcbs_parms;					*
 28739                                  ;	set dx,cx to 0; 						*
 28740                                  ;	while (end of command line)					*
 28741                                  ;	{ sysparse;							*
 28742                                  ;	  if (no error) then						*
 28743                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28744                                  ;		   fcbs = result_val._$P_picked_val;			*
 28745                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28746                                  ;		   keep = result_val._$P_picked_val;			*
 28747                                  ;	     }								*
 28748                                  ;	  else	/*error exit*/						*
 28749                                  ;	     error exit;						*
 28750                                  ;	};								*
 28751                                  ; };									*
 28752                                  ;************************************************************************
 28753                                  
 28754                                  tryx:
 28755 00002572 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28756                                          ;jne	short try1
 28757                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28758 00002575 752F                    	jne	short tryy	; comment command
 28759                                  
 28760                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28761                                  ;;ifdef	MULTI_CONFIG
 28762                                  ;       call    query_user      ; query the user if config_cmd
 28763                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28764                                  ;;endif
 28765                                  
 28766 00002577 BF[431D]                	mov	di,fcbs_parms
 28767 0000257A 31C9                    	xor	cx,cx
 28768                                  	; 04/01/2023
 28769                                  	;mov	dx,cx
 28770                                  do98:
 28771 0000257C E8CF00                  	call	sysinit_parse
 28772                                          ; 04/01/2023
 28773                                  	;jnc	short if98	; parse error
 28774                                          ;call	badparm_p	;  and show messages and end the search loop.
 28775                                  	;jmp	short sr98
 28776                                  	;------------------------
 28777                                  	; 04/01/2023
 28778 0000257F 724B                    	jc	short badparm_p_coff
 28779                                  if98:
 28780 00002581 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28781 00002584 7412                    	je	short en98	; then end the $endloop
 28782                                  
 28783                                  	;;mov	al,[cs:rv_dword]
 28784                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28785                                  	; 15/12/2022
 28786                                  	; ds = cs
 28787 00002586 A0[C01C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28788 00002589 83F901                  	cmp	cx,1		; the first positional?
 28789 0000258C 7505                    	jne	short if102
 28790                                  	;mov	[cs:p_fcbs],al
 28791                                  	; 15/12/2022
 28792 0000258E A2[781D]                	mov	[p_fcbs],al
 28793                                  	;jmp	short en102
 28794 00002591 EBE9                    	jmp	short do98
 28795                                  if102:
 28796                                  	;mov	[cs:p_keep],al
 28797                                  	; 15/12/2022
 28798 00002593 A2[791D]                	mov	[p_keep],al
 28799                                  en102:
 28800 00002596 EBE4                    	jmp	short do98
 28801                                  en98:
 28802                                  	; 15/12/2022
 28803                                  	; ds = cs
 28804 00002598 A0[781D]                	mov	al,[p_fcbs]
 28805 0000259B A2[9E02]                	mov	[FCBS],al
 28806 0000259E C606[9F02]00            	mov	byte [KEEP],0
 28807                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28808                                  	;mov	[cs:FCBS],al	 ; M017
 28809                                  	;mov	byte [cs:KEEP],0 ; M017
 28810                                  sr98:
 28811 000025A3 E9C6F9                  	jmp	coff
 28812                                  
 28813                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28814                                  ;-------------------------------------------------------------------------
 28815                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28816                                  ;		line number
 28817                                  ;-------------------------------------------------------------------------
 28818                                  
 28819                                  tryy:
 28820 000025A6 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28821 000025A9 750B                    	jne	short try0
 28822                                  
 28823                                  donothing:
 28824                                  	; 15/12/2022
 28825                                  	; ds = cs
 28826 000025AB FF0E[D603]              	dec	word [chrptr]
 28827 000025AF FF06[D203]              	inc	word [count]
 28828                                  	; 02/11/2022
 28829                                  	;dec	word [cs:chrptr]
 28830                                  	;inc	word [cs:count]
 28831                                  
 28832 000025B3 E9B6F9                  	jmp	coff
 28833                                  
 28834                                  ;------------------------------------------------------------------------
 28835                                  ; rem command
 28836                                  ;------------------------------------------------------------------------
 28837                                  
 28838                                  try0:				; do nothing with this line.
 28839 000025B6 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28840 000025B9 74F0                    	je	short donothing
 28841                                  
 28842                                  ; 07/04/2019 - Retro DOS v4.0
 28843                                  
 28844                                  ;-----------------------------------------------------------------------
 28845                                  ; switches command
 28846                                  ;-----------------------------------------------------------------------
 28847                                  
 28848                                  ;***********************************************************************
 28849                                  ;								       *
 28850                                  ; function: parse the option switches specified.		       *
 28851                                  ; note - this command is intended for the future use also.	       *
 28852                                  ; when we need to set system data flag,use this command.	       *
 28853                                  ;								       *
 28854                                  ; input :							       *
 28855                                  ;	es:si -> parameters in command line.			       *
 28856                                  ; output:							       *
 28857                                  ;	p_swit_k set if /k option chosen.			       *
 28858                                  ;								       *
 28859                                  ; subroutines to be called:					       *
 28860                                  ;	sysinit_parse						       *
 28861                                  ; logic:							       *
 28862                                  ; {								       *
 28863                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28864                                  ;	set dx,cx to 0; 					       *
 28865                                  ;	while (end of command line)				       *
 28866                                  ;	{ sysinit_parse;					       *
 28867                                  ;	  if (no error) then					       *
 28868                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28869                                  ;		    p_swit_k = 1				       *
 28870                                  ;	       endif						       *
 28871                                  ;	  else {show error message;error exit}			       *
 28872                                  ;	};							       *
 28873                                  ; };								       *
 28874                                  ;								       *
 28875                                  ;***********************************************************************
 28876                                  
 28877                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28878                                  
 28879                                  try1:
 28880 000025BB 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28881 000025BE 7402                    	je	short do_try1	; switches= command entered?
 28882                                  skip_it5:
 28883                                  	;jmp	tryv
 28884                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28885 000025C0 EB7A                    	jmp	tryz
 28886                                  
 28887                                  do_try1:
 28888                                  
 28889                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28890                                  ;;ifdef	MULTI_CONFIG
 28891                                  ;       call    query_user      ; query the user if config_cmd
 28892                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28893                                  ;;endif
 28894                                  
 28895 000025C2 BF[DD1D]                	mov	di,swit_parms
 28896 000025C5 31C9                    	xor	cx,cx
 28897                                  	; 04/01/2023
 28898                                  	;mov	dx,cx
 28899                                  do110:
 28900 000025C7 E88400                  	call	sysinit_parse
 28901 000025CA 7306                    	jnc	short if110	; parse error
 28902                                  	;call	badparm_p	;  and show messages and end the search loop.
 28903                                  	;jmp	short sr110
 28904                                  	; -----------------------
 28905                                  	; 04/01/2023
 28906                                  badparm_p_coff:
 28907 000025CC E8AA00                  	call	badparm_p
 28908 000025CF E99AF9                  	jmp	coff
 28909                                  	;------------------------
 28910                                  if110:
 28911 000025D2 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28912 000025D5 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28913                                  
 28914                                  	; 15/12/2022
 28915                                  	; ds = cs
 28916                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28917                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28918 000025D7 813E[BE1C][F51D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28919 000025DD 7507                    	jne	short if115	;				;M059
 28920                                  	; 15/12/2022
 28921 000025DF C606[101E]01            	mov	byte [p_swit_k],1
 28922                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28923 000025E4 EBE1                    	jmp	short do110
 28924                                  if115:	
 28925                                  	; 15/12/2022							;M059
 28926                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28927                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28928 000025E6 813E[BE1C][011E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28929 000025EC 7507                    	jne	short if116					;M059 M063
 28930                                  	; 15/12/2022
 28931 000025EE C606[111E]01            	mov	byte [p_swit_t],1
 28932                                  	;mov	byte [cs:p_swit_t],1				;M059
 28933 000025F3 EBD2                    	jmp	short do110					;M059
 28934                                  if116:
 28935                                  	; 15/12/2022
 28936                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28937                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28938 000025F5 813E[BE1C][0D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28939 000025FB 75CA                    	jne	short do110					;M063
 28940                                  	; 15/12/2022
 28941 000025FD C606[121E]01            	mov	byte [p_swit_w],1
 28942                                  	;mov	byte [cs:p_swit_w],1				;M063
 28943 00002602 EBC3                    	jmp	short do110					;M063
 28944                                  en110:
 28945                                  	; 15/12/2022
 28946                                  	; ds = cs
 28947 00002604 803E[101E]01            	cmp	byte [p_swit_k],1
 28948                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28949 00002609 1E                      	push	ds
 28950                                  	;;mov	ax,Bios_Data
 28951                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28952                                  	; 21/10/2022
 28953 0000260A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28954 0000260D 8ED8                    	mov	ds,ax
 28955 0000260F 750A                    	jne	short if117
 28956 00002611 C606[DE04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28957 00002616 C606[DF04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28958                                  if117:
 28959                                  	; 15/12/2022
 28960                                  	; ds <> cs
 28961 0000261B 2EA0[111E]              	mov	al,[cs:p_swit_t]				;M059
 28962 0000261F A2[EB04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28963                                  
 28964 00002622 2E803E[121E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28965 00002628 740E                    	je	short skip_dos_flag				;M063
 28966 0000262A 06                      	push	es
 28967 0000262B 53                      	push	bx
 28968 0000262C B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28969 0000262E CD21                    	int	21h						;M063
 28970                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28971                                  			; Return: ES:BX -> DOS list of lists
 28972                                  	;or	bytes [es:86h],2
 28973 00002630 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28974 00002636 5B                      	pop	bx
 28975 00002637 07                      	pop	es
 28976                                  skip_dos_flag:							;M063
 28977 00002638 1F                      	pop	ds
 28978                                  sr110:
 28979 00002639 E930F9                  	jmp	coff
 28980                                  
 28981                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28982                                  ;
 28983                                  ;tryv:
 28984                                  ;
 28985                                  ;;ifdef	MULTI_CONFIG
 28986                                  ;;------------------------------------------------------------------------
 28987                                  ;; set command (as in "set var=value<cr/lf>")
 28988                                  ;;------------------------------------------------------------------------
 28989                                  ;
 28990                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28991                                  ;       jne	short tryn
 28992                                  ;       call    query_user      ; query the user if config_cmd
 28993                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28994                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28995                                  ;       jnc	short sr110	; no error
 28996                                  ;err:    
 28997                                  ;	call    error_line      ; whoops, display error in line XXX
 28998                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28999                                  ;
 29000                                  ;;------------------------------------------------------------------------
 29001                                  ;; numlock command (as in "numlock=on|off")
 29002                                  ;;------------------------------------------------------------------------
 29003                                  ;tryn:
 29004                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 29005                                  ;       jne	short tryy            ;
 29006                                  ;       call    query_user      ; query thye user if config_cmd
 29007                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 29008                                  ;       call    set_numlock
 29009                                  ;       jc	short err
 29010                                  ;       jmp	short sr110	; all done
 29011                                  ;
 29012                                  ;;endif	;MULTI_CONFIG
 29013                                  
 29014                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29015                                  ;;-------------------------------------------------------------------------
 29016                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 29017                                  ;;		line number
 29018                                  ;;-------------------------------------------------------------------------
 29019                                  ;
 29020                                  ;tryy:
 29021                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 29022                                  ;	jne	short try0
 29023                                  ;donothing:
 29024                                  ;	dec	word [chrptr]
 29025                                  ;	inc	word [count]
 29026                                  ;	jmp	coff
 29027                                  ;
 29028                                  ;;------------------------------------------------------------------------
 29029                                  ;; rem command
 29030                                  ;;------------------------------------------------------------------------
 29031                                  ;
 29032                                  ;try0:				;do nothing with this line.
 29033                                  ;	cmp     ah,CONFIG_REM ; '0'
 29034                                  ;	je	short donothing
 29035                                  
 29036                                  ; 30/10/2022
 29037                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 29038                                  
 29039                                  ;------------------------------------------------------------------------
 29040                                  ; bogus command
 29041                                  ;------------------------------------------------------------------------
 29042                                  
 29043                                  tryz:
 29044 0000263C 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 29045                                  	;je	short donothing
 29046                                  	; 02/11/2022
 29047 0000263F 740A                    	je	short tryz_donothing
 29048                                  
 29049 00002641 FF0E[D603]              	dec	word [chrptr]
 29050 00002645 FF06[D203]              	inc	word [count]
 29051 00002649 EB22                    	jmp	short badop
 29052                                  
 29053                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 29054                                  tryz_donothing:
 29055 0000264B E95DFF                  	jmp	donothing
 29056                                  
 29057                                  ; 07/04/2019 - Retro DOS v4.0
 29058                                  
 29059                                  ;------------------------------------------------------------------------------
 29060                                  
 29061                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29062                                  ;
 29063                                  ;
 29064                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 29065                                  ;;
 29066                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 29067                                  ;
 29068                                  ;CheckProtmanArena:
 29069                                  ;	push	es
 29070                                  ;	mov	ax,[cs:area]	; get our arena header
 29071                                  ;	dec	ax
 29072                                  ;	mov	es,ax
 29073                                  ;	add	ax,[es:3]	; find end of arena
 29074                                  ;	inc	ax
 29075                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 29076                                  ;	ja	short CheckProtmanDone
 29077                                  ;
 29078                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 29079                                  ;CheckProtmanDone:
 29080                                  ;	pop	es
 29081                                  ;	retn
 29082                                  
 29083                                  ;------------------------------------------------------------------------------
 29084                                  
 29085                                  sysinit_parse:
 29086                                  
 29087                                  ;------------------------------------------------------------------------------
 29088                                  ;set up registers for sysparse
 29089                                  ;in)	es:si -> command line in confbot
 29090                                  ;	di -> offset of the parse control definition.
 29091                                  ;
 29092                                  ;out)	calls sysparse.
 29093                                  ;	carry will set if parse error.
 29094                                  ;	*** the caller should check the eol condition by looking at ax
 29095                                  ;	*** after each call.
 29096                                  ;	*** if no parameters are found,then ax will contain a error code.
 29097                                  ;	*** if the caller needs to look at the synomym@ of the result,
 29098                                  ;	***  the caller should use cs:@ instead of es:@.
 29099                                  ;	cx register should be set to 0 at the first time the caller calls this
 29100                                  ;	 procedure.
 29101                                  ;	ax - exit code
 29102                                  ;	bl - terminated delimeter code
 29103                                  ;	cx - new positional ordinal
 29104                                  ;	si - set to pase scanned operand
 29105                                  ;	dx - selected result buffer
 29106                                  ;------------------------------------------------------------------------------
 29107                                  
 29108                                  	; 24/10/2022
 29109 0000264E 06                      	push	es			;save es,ds
 29110 0000264F 1E                      	push	ds
 29111                                  
 29112                                  	; 09/09/2023
 29113                                  	; ds = cs
 29114 00002650 8C06[0914]              	mov	[badparm_seg],es	;save the pointer to the parm
 29115 00002654 8936[0714]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 29116                                  
 29117 00002658 06                      	push	es
 29118 00002659 1F                      	pop	ds			;now ds:si -> command line
 29119                                  
 29120 0000265A 0E                      	push	cs
 29121 0000265B 07                      	pop	es			;now es:di -> control definition
 29122                                  
 29123                                  	; 09/09/2023
 29124                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 29125                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 29126                                  
 29127                                  	;mov	dx,0
 29128                                  	; 04/01/2023
 29129 0000265C 29D2                    	sub	dx,dx ; 0
 29130 0000265E E850EE                  	call	SysParse
 29131                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 29132                                  	; 06/09/2023
 29133 00002661 21C0                    	and	ax,ax
 29134                                  
 29135                                  ;**cas note: when zero true after cmp, carry clear
 29136                                  
 29137                                  	;je	short ll4
 29138                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 29139                                  	; 12/12/2022
 29140 00002663 7405                    	je	short en4 ; cf=0
 29141 00002665 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 29142                                  	;jne	short if4
 29143                                  	; 12/12/2022
 29144 00002668 7400                    	je	short en4 ; cf=0
 29145                                  	; 06/09/2023
 29146                                  	; cf=1
 29147                                  
 29148                                  ; 12/12/2022
 29149                                  ;ll4:
 29150                                  ;	; 12/12/2022
 29151                                  ;	; cf=0
 29152                                  ;	;clc
 29153                                  ;	jmp	short en4
 29154                                  
 29155                                  if4:
 29156                                  	; 24/10/2022
 29157                                  	; 06/09/2023 (cf=1)
 29158                                  	;stc
 29159                                  en4:
 29160 0000266A 1F                      	pop	ds
 29161 0000266B 07                      	pop	es
 29162 0000266C C3                      	retn
 29163                                  
 29164                                  ; 11/12/2022
 29165                                  %if 0
 29166                                  
 29167                                  ;----------------------------------------------------------------------------
 29168                                  ;
 29169                                  ; procedure : badop_p
 29170                                  ;
 29171                                  ;             same thing as badop,but will make sure to set ds register back
 29172                                  ;             to sysinitseg and return back to the caller.
 29173                                  ;
 29174                                  ;----------------------------------------------------------------------------
 29175                                  
 29176                                  badop_p:
 29177                                  	push	cs
 29178                                  	pop	ds		;set ds to configsys seg.
 29179                                  	mov	dx,badopm
 29180                                  	call	print
 29181                                          ;call	error_line
 29182                                  	;retn
 29183                                  	; 11/12/2022
 29184                                  	jmp	error_line
 29185                                  
 29186                                  %endif
 29187                                  
 29188                                  ;----------------------------------------------------------------------------
 29189                                  ;
 29190                                  ; label : badop
 29191                                  ;
 29192                                  ;----------------------------------------------------------------------------
 29193                                  
 29194                                  badop:	
 29195 0000266D BA[3036]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29196 00002670 E8100C                  	call	print
 29197 00002673 E82B00                  	call	error_line	;show "error in config.sys ..." .
 29198 00002676 E9F3F8                  	jmp	coff
 29199                                  
 29200                                  ;----------------------------------------------------------------------------
 29201                                  ;
 29202                                  ; procedure : badparm_p
 29203                                  ;
 29204                                  ;             show "bad command or parameters - xxxxxx"
 29205                                  ;             in badparm_seg,badparm_off -> xxxxx
 29206                                  ;
 29207                                  ;----------------------------------------------------------------------------
 29208                                  
 29209                                  	; 24/10/2022
 29210                                  badparm_p:
 29211                                  	; 11/12/2022
 29212                                  	; ds = cs
 29213                                  	; 11/12/2022
 29214                                  	;push	ds ; *
 29215 00002679 52                      	push	dx
 29216 0000267A 56                      	push	si
 29217                                  
 29218                                  	; 11/12/2022
 29219                                  	; ds = cs
 29220                                  	;push	cs
 29221                                  	;pop	ds
 29222                                  
 29223 0000267B BA[5736]                	mov	dx,badparm
 29224 0000267E E8020C                  	call	print			; "bad command or parameters - "
 29225 00002681 C536[0714]              	lds	si,[badparm_ptr]
 29226                                  
 29227                                  ;	print "xxxx" until cr.
 29228                                  
 29229                                  do1:
 29230 00002685 8A14                    	mov	dl,[si]			; get next character
 29231 00002687 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29232 0000268A 7407                    	je	short en1		; exit loop if so
 29233                                  
 29234 0000268C B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29235 0000268E CD21                    	int	21h			; display character
 29236 00002690 46                      	inc	si			; next character
 29237 00002691 EBF2                    	jmp	short do1
 29238                                  en1:
 29239 00002693 0E                      	push	cs
 29240 00002694 1F                      	pop	ds
 29241                                  
 29242 00002695 BA[5436]                	mov	dx,crlfm
 29243 00002698 E8E80B                  	call	print
 29244 0000269B E80300                  	call	error_line
 29245                                  
 29246 0000269E 5E                      	pop	si
 29247 0000269F 5A                      	pop	dx
 29248                                  	; 11/12/2022
 29249                                  	;pop	ds ; *
 29250                                  badparmp_ret:
 29251 000026A0 C3                      	retn
 29252                                  
 29253                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 29254                                  %if 0
 29255                                  
 29256                                  ;----------------------------------------------------------------------------
 29257                                  ;
 29258                                  ; procedure : getchr
 29259                                  ;
 29260                                  ;----------------------------------------------------------------------------
 29261                                  
 29262                                  	; 24/10/2022
 29263                                  getchr:
 29264                                  	; 12/12/2022
 29265                                  	;push	cx
 29266                                  	;mov	cx,[count]
 29267                                  	;jcxz	nochar
 29268                                  	; 12/12/2022
 29269                                  	cmp	word [count],1 
 29270                                  	jb	short nochar ; cf=1 ([count] = 0)
 29271                                  	
 29272                                  	mov	si,[chrptr]
 29273                                  	mov	al,[es:si]
 29274                                  	dec	word [count]
 29275                                  	inc	word [chrptr]
 29276                                  	; 12/12/202
 29277                                  	; cf=0
 29278                                  	;clc
 29279                                  ;get_ret:
 29280                                  	;pop	cx
 29281                                  	;retn
 29282                                  nochar: 
 29283                                  	; 12/12/2022
 29284                                  	; cf=1
 29285                                  	;stc
 29286                                  	;jmp	short get_ret
 29287                                  	
 29288                                  	retn
 29289                                  %endif
 29290                                  
 29291                                  ; 11/12/2022
 29292                                  %if 0
 29293                                  
 29294                                  ;----------------------------------------------------------------------------
 29295                                  ;
 29296                                  ; procedure : incorrect_order
 29297                                  ;
 29298                                  ;             show "incorrect order in config.sys ..." message.
 29299                                  ;
 29300                                  ;----------------------------------------------------------------------------
 29301                                  
 29302                                  incorrect_order:
 29303                                  	mov	dx,badorder
 29304                                  	call	print
 29305                                  	call	showlinenum
 29306                                  	retn
 29307                                  
 29308                                  %endif
 29309                                  
 29310                                  ;----------------------------------------------------------------------------
 29311                                  ;
 29312                                  ; procedure : error_line
 29313                                  ;
 29314                                  ;             show "error in config.sys ..." message.
 29315                                  ;
 29316                                  ;----------------------------------------------------------------------------
 29317                                  
 29318                                  	; 11/12/2022
 29319                                  	; 24/10/2022
 29320                                  error_line:
 29321                                  	; 11/12/2022
 29322                                  	; ds = cs
 29323                                  	;push	cs
 29324                                  	;pop	ds
 29325                                  
 29326 000026A1 BA[8C37]                	mov	dx,errorcmd
 29327 000026A4 E8DC0B                  	call	print
 29328                                  	;call	showlinenum
 29329                                  	;retn
 29330                                  	; 11/12/2022
 29331                                  	;jmp	short shortlinemum
 29332                                  
 29333                                  ;----------------------------------------------------------------------------
 29334                                  ;
 29335                                  ; procedure : showlinenum
 29336                                  ;
 29337                                  ; convert the binary linecount to decimal ascii string in showcount
 29338                                  ; and display showcount at the current curser position.
 29339                                  ; in.) linecount
 29340                                  ;
 29341                                  ; out) the number is printed.
 29342                                  ;
 29343                                  ;----------------------------------------------------------------------------
 29344                                  
 29345                                  	; 11/12/2022
 29346                                  	; ds = cs
 29347                                  	; 24/10/2022
 29348                                  showlinenum:
 29349 000026A7 06                      	push	es
 29350                                  	; 11/12/2022
 29351                                  	;push	ds
 29352 000026A8 57                      	push	di
 29353                                  
 29354 000026A9 0E                      	push	cs
 29355 000026AA 07                      	pop	es		; es=cs
 29356                                  
 29357                                  	; 11/12/2022
 29358                                  	;push	cs
 29359                                  	;pop	ds
 29360                                  
 29361 000026AB BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29362 000026AE B90A00                  	mov	cx,10		; decimal divide factor
 29363                                  	;mov	ax,[cs:linecount]
 29364                                  	; 11/12/2022
 29365 000026B1 A1[2B03]                	mov	ax,[linecount]
 29366                                  sln_loop:
 29367                                  	; 11/12/2022
 29368 000026B4 39C8                    	cmp	ax,cx ; < 10 ?
 29369                                  	;cmp	ax,10		; < 10?
 29370 000026B6 720C                    	jb	short sln_last
 29371                                  
 29372 000026B8 31D2                    	xor	dx,dx
 29373 000026BA F7F1                    	div	cx	; cx = 10
 29374 000026BC 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29375 000026BF 8815                    	mov	[di],dl
 29376 000026C1 4F                      	dec	di
 29377 000026C2 EBF0                    	jmp	short sln_loop
 29378                                  
 29379                                  sln_last:
 29380 000026C4 0C30                    	or	al,30h	; "0"
 29381 000026C6 8805                    	mov	[di],al
 29382 000026C8 89FA                    	mov	dx,di
 29383 000026CA E8B60B                  	call	print		; show it.
 29384 000026CD 5F                      	pop	di
 29385                                  	; 11/12/2022
 29386                                  	;pop	ds
 29387 000026CE 07                      	pop	es
 29388 000026CF C3                      	retn
 29389                                  
 29390                                  ; 07/04/2019 - Retro DOS v4.0
 29391                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29392                                  
 29393                                  ;----------------------------------------------------------------------------
 29394                                  ;
 29395                                  ; procedure : ProcDOS
 29396                                  ;
 29397                                  ;	Process the result of DOS= parsing
 29398                                  ;
 29399                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29400                                  ;				= 2 for DOS=LOW
 29401                                  ;				= 3 for DOS=UMB
 29402                                  ;				= 4 for DOS=NOUMB
 29403                                  ;----------------------------------------------------------------------------
 29404                                  
 29405                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29406                                  	; (SYTSINIT:2AB5h)
 29407                                  ProcDOS:
 29408                                  	; 01/01/2023
 29409                                  	; ds = cs
 29410 000026D0 30E4                    	xor	ah,ah
 29411                                  	;;mov	al,[cs:result_val_itag]
 29412                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29413                                  	; 04/01/2023
 29414 000026D2 A0[BD1C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29415 000026D5 48                      	dec	ax
 29416 000026D6 7415                    	jz	short pd_hi
 29417 000026D8 48                      	dec	ax
 29418 000026D9 740E                    	jz	short pd_lo
 29419 000026DB 48                      	dec	ax
 29420 000026DC 7405                    	jz	short pd_umb
 29421                                  	;;mov	byte [cs:DevUMB],0
 29422                                  	; 18/12/2022
 29423                                  	;mov	byte [cs:DevUMB],ah ; 0
 29424                                  	; 01/01/2023
 29425 000026DE 8826[641E]              	mov	byte [DevUMB],ah ; 0
 29426 000026E2 C3                      	retn
 29427                                  pd_umb:
 29428                                  	; 04/01/2023
 29429 000026E3 C606[641E]FF            	mov	byte [DevUMB],0FFh
 29430                                  	;mov	byte [cs:DevUMB],0FFh
 29431 000026E8 C3                      	retn
 29432                                  pd_lo:
 29433                                  	; 04/01/2023
 29434 000026E9 A2[6A02]                	mov	[runhigh],al ; 0
 29435                                  	; 18/12/2022
 29436                                  	;mov	[cs:runhigh],al ; 0
 29437                                  	;;mov	byte [cs:runhigh],0
 29438 000026EC C3                      	retn
 29439                                  pd_hi:
 29440                                  	; 04/01/2023
 29441 000026ED C606[6A02]FF            	mov	byte [runhigh],0FFh
 29442                                  	;mov	byte [cs:runhigh],0FFh
 29443                                  limx:	; 11/12/2022
 29444 000026F2 C3                      	retn
 29445                                  
 29446                                  ;----------------------------------------------------------------------------
 29447                                  ;
 29448                                  ; procedure : LieInt12Mem
 29449                                  ;
 29450                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29451                                  ;		alloclim set to the limit of low memory.
 29452                                  ;
 29453                                  ;	Output : none
 29454                                  ;
 29455                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29456                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29457                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29458                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29459                                  ;	converted into Ks and stored in 40:13h
 29460                                  ;
 29461                                  ;----------------------------------------------------------------------------
 29462                                  
 29463                                  LieInt12Mem:
 29464                                  	; 11/12/2022
 29465                                  	; ds = cs
 29466 000026F3 A1[A302]                	mov	ax,[ALLOCLIM]
 29467                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 29468                                  					; assuming that it is 3Com
 29469 000026F6 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29470 000026F9 740A                    	jz	short lim_set		; yes, lie to him differently
 29471                                  	; 13/05/2019
 29472                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29473                                  	;je	short limx		; no, don't lie
 29474                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 29475                                  	; 11/12/2022
 29476                                  	; ds = cs
 29477 000026FB 803E[731E]00            	cmp	byte [DeviceHi],0
 29478 00002700 74F0                    	je	short limx
 29479 00002702 A1[5A1E]                	mov	ax,[DevLoadEnd]
 29480                                  lim_set:
 29481                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29482                                  	; 11/12/2022
 29483                                  	;call	SetInt12Mem
 29484                                  ;limx:
 29485                                  	;retn
 29486                                  	
 29487                                  	;jmp	short SetInt12Mem 
 29488                                  
 29489                                  ;----------------------------------------------------------------------------
 29490                                  ;
 29491                                  ; procedure : SetInt12Mem
 29492                                  ;
 29493                                  ;	Input : AX = Memory size to be set (in paras)
 29494                                  ;	Output : none
 29495                                  ;
 29496                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29497                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29498                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29499                                  ;	restoring the value of 40:13
 29500                                  ;
 29501                                  ;----------------------------------------------------------------------------
 29502                                  
 29503                                  	; 01/11/2022
 29504                                  SetInt12Mem:
 29505 00002705 1E                      	push	ds
 29506 00002706 BB4000                  	mov	bx,40h
 29507 00002709 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29508 0000270B 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29509 0000270F 2E891E[771E]            	mov	[cs:OldInt12Mem],bx	; save it
 29510 00002714 B106                    	mov	cl,6
 29511 00002716 D3E8                    	shr	ax,cl			; convert paras into Ks
 29512 00002718 A31300                  	mov	[13h],ax		; Lie
 29513 0000271B 2EC606[761E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29514 00002721 1F                      	pop	ds
 29515                                  ;limx:
 29516 00002722 C3                      	retn
 29517                                  
 29518                                  ;----------------------------------------------------------------------------
 29519                                  ;
 29520                                  ; procedure : TrueInt12Mem
 29521                                  ;
 29522                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29523                                  ;			  = 0ffh if we are lying
 29524                                  ;		OldInt12Mem = Saved value of 40:13h
 29525                                  ;
 29526                                  ;	Output : none
 29527                                  ;
 29528                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29529                                  ;	and resets the flag which indicates that we were lying
 29530                                  ;
 29531                                  ;----------------------------------------------------------------------------
 29532                                  
 29533                                  TrueInt12Mem:
 29534                                  	; 11/12/2022
 29535                                  	; ds = cs
 29536 00002723 803E[761E]00            	cmp	byte [Int12Lied],0
 29537                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29538                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29539                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29540 00002728 7412                    	je	short timx		; no, we weren't
 29541                                  	; 18/12/2022
 29542 0000272A B84000                  	mov	ax,40h
 29543 0000272D 8826[761E]              	mov	[Int12Lied],ah ; 0
 29544                                  	;mov	byte [Int12Lied],0
 29545                                  	;mov	byte [cs:Int12Lied],0
 29546 00002731 1E                      	push	ds
 29547                                  	;mov	ax,40h
 29548 00002732 8ED8                    	mov	ds,ax
 29549 00002734 2EA1[771E]              	mov	ax,[cs:OldInt12Mem]
 29550 00002738 A31300                  	mov	[13h],ax		; restore INT 12 memory
 29551 0000273B 1F                      	pop	ds
 29552                                  timx:
 29553 0000273C C3                      	retn
 29554                                  
 29555                                  ;----------------------------------------------------------------------------
 29556                                  ;
 29557                                  ; procedure : IsIt3Com?
 29558                                  ;
 29559                                  ;	Input : DevEntry = Seg:0 of device driver
 29560                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29561                                  ;		 else Zero flag is reset
 29562                                  ;
 29563                                  ;----------------------------------------------------------------------------
 29564                                  
 29565                                  IsIt3Com:
 29566                                  	; 11/12/2022
 29567                                  	; ds = cs
 29568 0000273D 1E                      	push	ds
 29569 0000273E 06                      	push	es
 29570 0000273F 56                      	push	si
 29571                                  	; 11/12/2022
 29572 00002740 C536[5C1E]              	lds	si,[DevEntry]
 29573                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29574 00002744 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29575 00002747 0E                      	push	cs
 29576 00002748 07                      	pop	es
 29577 00002749 BF[791E]                	mov	di,ThreeComName
 29578 0000274C B90800                  	mov	cx,8			; name length
 29579 0000274F F3A6                    	rep	cmpsb
 29580 00002751 5E                      	pop	si
 29581 00002752 07                      	pop	es
 29582 00002753 1F                      	pop	ds
 29583 00002754 C3                      	retn
 29584                                  
 29585                                  ;M020 : BEGIN
 29586                                  ;----------------------------------------------------------------------------
 29587                                  
 29588                                  UpdatePDB:
 29589 00002755 1E                      	push	ds
 29590 00002756 B462                    	mov	ah,62h
 29591 00002758 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29592 0000275A 8EDB                    	mov	ds,bx
 29593 0000275C 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29594                                  	;mov	[2],bx
 29595 00002761 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29596 00002765 1F                      	pop	ds
 29597 00002766 C3                      	retn
 29598                                  
 29599                                  ; M020 : END
 29600                                  
 29601                                  ;----------------------------------------------------------------------------
 29602                                  
 29603                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29604                                  
 29605                                  %if 0
 29606                                  
 29607                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29608                                  ;include highexit.inc	; umb's, etc
 29609                                  
 29610                                  ; ----------------------------------------------------------------------
 29611                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29612                                  ; ----------------------------------------------------------------------
 29613                                  ; 07/04/2019 - Retro DOS v4.0
 29614                                  
 29615                                  ;******************************************************************************
 29616                                  ;
 29617                                  ; This file contains routines needed to parse and implement user-given
 29618                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29619                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29620                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29621                                  ;
 29622                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29623                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29624                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29625                                  ;    DH/LH module opts
 29626                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29627                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29628                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29629                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29630                                  ; available during the load.
 29631                                  ;
 29632                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29633                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29634                                  ; upper-memory block which was not specified by the user... in addition, if
 29635                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29636                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29637                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 29638                                  ; free any UMBs so allocated.
 29639                                  ;
 29640                                  ; When a device driver loads, there is the additional problem of allocating its
 29641                                  ; initial load site; this should be restricted to the first UMB specified on
 29642                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29643                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29644                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29645                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29646                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29647                                  ;
 29648                                  ;******************************************************************************
 29649                                  
 29650                                  SWTCH	equ	'/'		; Switch character
 29651                                  
 29652                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29653                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29654                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29655                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29656                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29657                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29658                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29659                                  
 29660                                  CR	equ	0Dh		; Carriage Return
 29661                                  LF	equ	0Ah		; Line Feed
 29662                                  TAB	equ	09h		; Tab character (^I)
 29663                                  
 29664                                  ; -----------------------------------------------------------------------------
 29665                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29666                                  ; -----------------------------------------------------------------------------
 29667                                  ; ENTRY:       None
 29668                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29669                                  ; ERROR EXIT:  None
 29670                                  ; USES:        Flags, variables in highvar.inc
 29671                                  ; -----------------------------------------------------------------------------
 29672                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 29673                                  ; are largely ignored, but it is initialized nonetheless.
 29674                                  ; -----------------------------------------------------------------------------
 29675                                  
 29676                                  InitVar:
 29677                                  	;pushreg <ax, cx, di, es>
 29678                                  	push	ax
 29679                                  	push	cx
 29680                                  	push	di
 29681                                  	push	es
 29682                                  
 29683                                  	;dataseg es			;Point ES into appropriate data segment
 29684                                  	push	cs
 29685                                  	pop	es
 29686                                  
 29687                                  	xor	ax,ax
 29688                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29689                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29690                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29691                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29692                                  					;Later is the # of the 1st spec'd UMB
 29693                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29694                                  
 29695                                  	cld
 29696                                  
 29697                                  	mov	cx,MAXUMB ; 16		;For each entry
 29698                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29699                                  	rep	stosb			;	Store 0
 29700                                  
 29701                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29702                                  	mov	di,UmbSize		;on the UmbSize array,
 29703                                  	rep	stosw			;	Store 0
 29704                                  
 29705                                  	;normseg es			; Return ES
 29706                                  
 29707                                  	;popreg	<es, di, cx, ax>
 29708                                  	pop	es
 29709                                  	pop	di
 29710                                  	pop	cx
 29711                                  	pop	ax	 	
 29712                                  
 29713                                  	retn
 29714                                  
 29715                                  ; -----------------------------------------------------------------------------
 29716                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29717                                  ; -----------------------------------------------------------------------------
 29718                                  ; ENTRY   : None
 29719                                  ; EXIT    : None
 29720                                  ; ERROR   : None
 29721                                  ; USES    : Flags, fm_umb, fm_strat
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  
 29724                                  FixMem:
 29725                                  	push	ax
 29726                                  	push	bx
 29727                                  	push	cx
 29728                                  	push	dx
 29729                                  	push	es
 29730                                  
 29731                                  	call	fm_link		; Link in UMBs
 29732                                  
 29733                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29734                                  	jc	short fmX	; (if couldn't get it, leave now).
 29735                                  
 29736                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29737                                  
 29738                                  ; - Walk MCB Chain ------------------------------------------------------------
 29739                                  
 29740                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29741                                  	mov 	cx,dx		; in CX... and the last owner
 29742                                  	inc	dx		; in dx as we go through the loop:
 29743                                  
 29744                                  ; ------------------------------------------
 29745                                  ; FM10--DX  = last MCB's owner's PSP address
 29746                                  ;       CX  = last MCB's address (segment)
 29747                                  ; ------------------------------------------
 29748                                  
 29749                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29750                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29751                                  	or	bx,dx			; dx was owner of previous MCB
 29752                                  	jnz	short fm30		; If not both zero, don't cat.
 29753                                  
 29754                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29755                                  
 29756                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29757                                  	mov	es,cx			; Go back to prev MCB's address
 29758                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29759                                  
 29760                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29761                                  	;add	bx,1			; And add one for the header
 29762                                  	; 14/08/2023
 29763                                  	inc	bx
 29764                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29765                                  
 29766                                  	; ---------------------------------------------------------------------
 29767                                  
 29768                                  fm30:	mov	cx,es			; Put this address on the stack
 29769                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29770                                  
 29771                                  	mov	bx,es			; Move to the next MCB
 29772                                  	add	bx,[es:ARENA.SIZE]
 29773                                  	inc	bx
 29774                                  	mov	es,bx
 29775                                  
 29776                                  	;cmp	al,'Z'
 29777                                  	cmp	al,arena_signature_end
 29778                                  	jne	short fm10		; If signature != 'Z', there are more.
 29779                                  fmX:	
 29780                                  	call	fm_unlink		; Unlink UMBs
 29781                                  
 29782                                  	pop	es
 29783                                  	pop	dx
 29784                                  	pop	cx
 29785                                  	pop	bx
 29786                                  	pop	ax
 29787                                  
 29788                                  	retn
 29789                                  
 29790                                  ; -----------------------------------------------------------------------------
 29791                                  ;*** fm_link - links UMBs not already linked in
 29792                                  ; -----------------------------------------------------------------------------
 29793                                  ; ENTRY:    None
 29794                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29795                                  ; ERROR:    None
 29796                                  ; USES:     AX, BX, fm_umb
 29797                                  ; -----------------------------------------------------------------------------
 29798                                  
 29799                                  fm_link:
 29800                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29801                                  	int	21h			; Current link-state is now in al
 29802                                  
 29803                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29804                                  	;
 29805                                  	;push	es
 29806                                  	;push	cs
 29807                                  	;pop	es
 29808                                  	;mov	[es:fm_umb],al
 29809                                  	;pop	es
 29810                                  	
 29811                                  	mov	[cs:fm_umb],al
 29812                                  
 29813                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29814                                  	mov	bx,1
 29815                                  	int	21h
 29816                                  	retn
 29817                                  
 29818                                  ; -----------------------------------------------------------------------------
 29819                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29820                                  ; -----------------------------------------------------------------------------
 29821                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29822                                  ; EXIT:     None
 29823                                  ; ERROR:    None
 29824                                  ; USES:     AX, BX
 29825                                  ; -----------------------------------------------------------------------------
 29826                                  
 29827                                  fm_unlink:
 29828                                  	xor	bx,bx
 29829                                  	
 29830                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29831                                  	;
 29832                                  	;push	ds
 29833                                  	;push	cs
 29834                                  	;pop	ds
 29835                                  	;mov	bl,[fm_umb]	
 29836                                  	;pop	ds
 29837                                  	
 29838                                  	mov	bl,[cs:fm_umb]
 29839                                  
 29840                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29841                                  	int	21h			; so just use that, and call int 21h
 29842                                  	retn
 29843                                  
 29844                                  ; 08/04/2019 - Retro DOS v4.0
 29845                                  
 29846                                  ; -----------------------------------------------------------------------------
 29847                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29848                                  ; laid out in highvar.inc
 29849                                  ; -----------------------------------------------------------------------------
 29850                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29851                                  ; EXIT:     ES:SI points to first character in child program name
 29852                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29853                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29854                                  ; -----------------------------------------------------------------------------
 29855                                  ; Error codes (in AX if carry set on return):
 29856                                  ;
 29857                                  PV_InvArg	equ	1	; Invalid argument passed
 29858                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29859                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29860                                  ;
 29861                                  ; This routine exects ES:SI to point to a string much like the following:
 29862                                  ;    "/S/L:1,200;2 module options"
 29863                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29864                                  ; required, though that's what this routine is supposed to parse.
 29865                                  ;
 29866                                  optS		equ	'S'	; /S
 29867                                  optL		equ	'L'	; /L:...
 29868                                  ;
 29869                                  ; -----------------------------------------------------------------------------
 29870                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29871                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29872                                  ;     lh /l:1,1000;2 print/d:lpt2
 29873                                  ; the arguments would look like (one per line):
 29874                                  ;     lh
 29875                                  ;     /l
 29876                                  ;     1
 29877                                  ;     1000
 29878                                  ;     2
 29879                                  ;     print
 29880                                  ;     /d
 29881                                  ;     :lpt2
 29882                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29883                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29884                                  ; of the number of arguments LH will need to skip in order to get to the
 29885                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29886                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29887                                  ; for:
 29888                                  ;    Each /L
 29889                                  ;    Each /S (there should be only one)
 29890                                  ;    Each UMB number (they follow ":" or ";")
 29891                                  ;    Each UMB size   (they follow ",")
 29892                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29893                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29894                                  ; -----------------------------------------------------------------------------
 29895                                  
 29896                                  ParseVar:
 29897                                  	;pushreg <di, ds, es>
 29898                                  	push	di
 29899                                  	push	ds
 29900                                  	push	es
 29901                                  
 29902                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29903                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29904                                  	cld
 29905                                  
 29906                                  ; ------------------------------------------------
 29907                                  ; PV10--ES:SI = any whitespace on the command-line
 29908                                  ; ------------------------------------------------
 29909                                  
 29910                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29911                                  	call	isWhite
 29912                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29913                                  	;cmp	al,'/'
 29914                                  	cmp	al,SWTCH
 29915                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29916                                  
 29917                                  	dec	si		; Backup--it's now "odule options", and we need
 29918                                  	clc			; that "m" we just read (or whatever it is).
 29919                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29920                                  
 29921                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29922                                  	;toUpper al		; So we make it upper-case, and...
 29923                                  	and	al,0DFh
 29924                                  	;cmp	al,'S'
 29925                                  	cmp	al,optS		; just read 'S'?
 29926                                  	jne	short pv30
 29927                                  
 29928                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29929                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29930                                  
 29931                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29932                                  	;
 29933                                  	;push	es
 29934                                  	;push	cs
 29935                                  	;pop	es
 29936                                  	;mov	[es:fUmbTiny],1	
 29937                                  	;pop	es
 29938                                  
 29939                                  	mov	byte [cs:fUmbTiny],1
 29940                                  
 29941                                  	jmp	short pv10	; possibly even "/L...".
 29942                                  
 29943                                  pv30:	;cmp	al,'L'
 29944                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29945                                  	jne	short pvE1		; switch!
 29946                                  
 29947                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29948                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29949                                  
 29950                                  	call	parseL
 29951                                  	jnc	short pv10	; If no carry, go back and look for more
 29952                                  
 29953                                  	dec	si		; Else, back up and exit.
 29954                                  	jmp	short pvErr	; AX has already been set by parseL
 29955                                  
 29956                                  pvE1:	;mov	ax,3
 29957                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29958                                  pvErr:	dec	si
 29959                                  	dec	si
 29960                                  	stc
 29961                                  pvX:	;popreg	<es, ds, di>
 29962                                  	pop	es
 29963                                  	pop	ds
 29964                                  	pop	di
 29965                                  	retn
 29966                                  
 29967                                  ; -----------------------------------------------------------------------------
 29968                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29969                                  ; -----------------------------------------------------------------------------
 29970                                  ; ENTRY:    ES:SI points to colon
 29971                                  ; EXIT:     ES:SI points to first character not parsed
 29972                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29973                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29974                                  ; -----------------------------------------------------------------------------
 29975                                  ; If the string here is terminated with anything other than whitespace or a
 29976                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29977                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29978                                  ; makes sure the app /L: is reported as being the culprit.
 29979                                  ; -----------------------------------------------------------------------------
 29980                                  
 29981                                  parseL:
 29982                                  	lodsb
 29983                                  	cmp	al,':'		; Make sure they did /L:
 29984                                  	jne	short plE1	; If they didn't, return with carry set.
 29985                                  
 29986                                  ; ------------------------------------------
 29987                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29988                                  ; ------------------------------------------
 29989                                  
 29990                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29991                                  	jc	short plE2	; And error if it's a bad number.
 29992                                  	call	convUMB		; Convert any address to a UMB number
 29993                                  
 29994                                  	mov	cl,al		; Remember the UMB number
 29995                                  	call	stowUMB		; Mark this UMB # as used;
 29996                                  	jc	short plE2	; If it was already marked, it'll error
 29997                                  
 29998                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29999                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30000                                  
 30001                                  	lodsb
 30002                                  	cmp	al,';'		; Did "umb;" ?
 30003                                  	je	short pl10	; Yep: go back and get another UMB.
 30004                                  
 30005                                  	call	isWhite		; Did "umb " ?
 30006                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 30007                                  
 30008                                  	call	isEOL		; Did "umb" ?
 30009                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 30010                                  
 30011                                  	;cmp	al,'/'
 30012                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 30013                                  	je	short plSwX	; If so, back up ES:SI one character and return
 30014                                  
 30015                                  	cmp	al,','		; Did "umb," ?
 30016                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 30017                                  
 30018                                  ; --- Read a size -------------------------------------------------------------
 30019                                  
 30020                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 30021                                  	jc	short plE1	; And error if it's a bad size.
 30022                                  
 30023                                  	call	toPara		; Convert from bytes to paragraphs
 30024                                  
 30025                                  	call	stowSiz		; CL still has the UMB number for this routine
 30026                                  
 30027                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 30028                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30029                                  
 30030                                  	lodsb
 30031                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 30032                                  	je	short pl10	;
 30033                                  
 30034                                  	call	isWhite		; Did it end with whitespace?
 30035                                  	jz	short plX	; If so, we're done here--go back.
 30036                                  
 30037                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 30038                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 30039                                  
 30040                                  	;cmp	al,'/'
 30041                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 30042                                  	je	short plSwX	; If so, again, we're done here.
 30043                                  plE1:	
 30044                                  	;mov	ax,1
 30045                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 30046                                  	dec	si
 30047                                  	stc
 30048                                  	retn
 30049                                  
 30050                                  plE2:	;mov	ax,2
 30051                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 30052                                  	; 12/12/2022
 30053                                  	; cf=1
 30054                                  	;stc
 30055                                  	retn
 30056                                  plSwX:	
 30057                                  	dec	si		; If we hit a '/' character, back up one char
 30058                                  				; so the whitespace checker will see it too.
 30059                                  plX:	; 12/12/2022
 30060                                  	; cf=0
 30061                                  	;clc			; Then just return with carry clear, so
 30062                                  	retn			; ParseVar will go about its business.
 30063                                  
 30064                                  ; -----------------------------------------------------------------------------
 30065                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 30066                                  ; -----------------------------------------------------------------------------
 30067                                  ; ENTRY:    None
 30068                                  ; EXIT:     None
 30069                                  ; ERROR:    None
 30070                                  ; USES:     fm_argc, flags
 30071                                  ; -----------------------------------------------------------------------------
 30072                                  
 30073                                  ;incArgc:
 30074                                  	;push	ax
 30075                                  
 30076                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 30077                                  
 30078                                  	;mov	al,[cs:fm_argc]
 30079                                  
 30080                                  	;inc	al		; Increment it,
 30081                                  
 30082                                  	;;putdata fm_argc, al	; And store it right back.
 30083                                  
 30084                                  	;mov	[cs:fm_argc],al
 30085                                  
 30086                                  	;pop	ax
 30087                                  	;retn
 30088                                  
 30089                                  ; -----------------------------------------------------------------------------
 30090                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 30091                                  ; -----------------------------------------------------------------------------
 30092                                  ; ENTRY:    AL contains character to test
 30093                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 30094                                  ; ERROR:    None
 30095                                  ; USES:     ZF
 30096                                  ; -----------------------------------------------------------------------------
 30097                                  
 30098                                  isEOL:
 30099                                  	cmp	al,0		; Null-terminator
 30100                                  	je	short ieX
 30101                                  	cmp	al,CR ; 0Dh	; Carriage Return
 30102                                  	je	short ieX
 30103                                  	cmp	al,LF ; 0Ah	; LineFeed
 30104                                  ieX:	
 30105                                  	retn
 30106                                  
 30107                                  ; -----------------------------------------------------------------------------
 30108                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 30109                                  ; -----------------------------------------------------------------------------
 30110                                  ; ENTRY:    AL contains character to test
 30111                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 30112                                  ; ERROR:    None
 30113                                  ; USES:     ZF
 30114                                  ; -----------------------------------------------------------------------------
 30115                                  
 30116                                  isWhite:
 30117                                  	cmp	al,' '		; Space
 30118                                  	je	short iwX
 30119                                  	cmp	al,'='		; Equals (treat as whitespace)
 30120                                  	je	short iwX
 30121                                  	cmp	al,tab ; 9	; Tab
 30122                                  iwX:	
 30123                                  	retn
 30124                                  
 30125                                  ; -----------------------------------------------------------------------------
 30126                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30127                                  ; -----------------------------------------------------------------------------
 30128                                  ; ENTRY:    AL contains UMB number
 30129                                  ; EXIT:     None
 30130                                  ; ERROR:    None
 30131                                  ; USES:     Flags, variables in highvar.inc
 30132                                  ; -----------------------------------------------------------------------------
 30133                                  
 30134                                  unMarkUMB:
 30135                                  	push	ax
 30136                                  	push	bx
 30137                                  	push	di
 30138                                  	push	es
 30139                                  
 30140                                  	push	cs
 30141                                  	pop	es
 30142                                  
 30143                                  	xor	ah,ah
 30144                                  	mov	bx,ax
 30145                                  
 30146                                  	; 19/04/2019
 30147                                  	
 30148                                  	;mov	byte [es:bx+UmbUsed],0
 30149                                  	mov	[es:bx+UmbUsed],ah ; 0
 30150                                  
 30151                                  	cmp	[es:UmbLoad],al
 30152                                  	jne	short umu10
 30153                                  
 30154                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30155                                  	mov	[es:UmbLoad],ah ; 0
 30156                                  umu10:	
 30157                                  	pop	es
 30158                                  	pop	di
 30159                                  	pop	bx
 30160                                  	pop	ax
 30161                                  	retn
 30162                                  
 30163                                  ; -----------------------------------------------------------------------------
 30164                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30165                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30166                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30167                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30168                                  ; -----------------------------------------------------------------------------
 30169                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30170                                  ; EXIT:     None
 30171                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30172                                  ; USES:     AX, Flags, variables in highvar.inc
 30173                                  ; -----------------------------------------------------------------------------
 30174                                  
 30175                                  stowUMB:
 30176                                  	cmp	al,MAXUMB ; 16
 30177                                  	jb	short su10
 30178                                  	stc
 30179                                  	retn			; Ooops-- UMB>=MAXUMB
 30180                                  su10:	
 30181                                  	push	bx
 30182                                  	push	di
 30183                                  	push	si
 30184                                  	push	ds
 30185                                  	push	es
 30186                                  	push	cs
 30187                                  	pop	es
 30188                                  	push	cs
 30189                                  	pop	ds
 30190                                  	
 30191                                  	;cmp	byte [UmbLoad],0FFh
 30192                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30193                                  	jne	short su20
 30194                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30195                                  su20:	
 30196                                  	or	al,al		; If they gave UMB 0, there's really nothing
 30197                                  	jz	short su30	; that we should do here.
 30198                                  
 30199                                  	mov	bl,al
 30200                                  	xor	bh,bh
 30201                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30202                                  
 30203                                  	xchg	[es:bx+UmbUsed],al
 30204                                  
 30205                                  	or	al,al		; If it was already 1, then al==1... and that
 30206                                  	jz	short su30	; means an error.
 30207                                  
 30208                                  	stc			; OOOPS!  This one's been used before.  :(
 30209                                  su30:	
 30210                                  	pop	es
 30211                                  	pop	ds
 30212                                  	pop	si
 30213                                  	pop	di
 30214                                  	pop	bx
 30215                                  	retn
 30216                                  
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ; ENTRY:    CL contains UMB number, AX contains size
 30221                                  ; EXIT:     None
 30222                                  ; ERROR:    None
 30223                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  
 30226                                  ; 13/05/2019
 30227                                  
 30228                                  stowSiz:
 30229                                  	push	bx
 30230                                  	;push	di ; ?
 30231                                  	push	es
 30232                                  
 30233                                  	push	cs
 30234                                  	pop	es	
 30235                                  
 30236                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 30237                                  	mov	bh,0			;     bx==UMB number, AX==size
 30238                                  	shl	bl,1			;     bx==offset into array, AX=size
 30239                                  	mov	[es:bx+UmbSize],ax	; Store the size
 30240                                  	
 30241                                  	pop	es
 30242                                  	;pop	di ; ?
 30243                                  	pop	bx
 30244                                  
 30245                                  	retn
 30246                                  
 30247                                  ; -----------------------------------------------------------------------------
 30248                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30249                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30250                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30251                                  ; A-F are considered valid iff gnradix is 16.
 30252                                  ; -----------------------------------------------------------------------------
 30253                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30254                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30255                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30256                                  ; USES:     CL, Flags
 30257                                  ; -----------------------------------------------------------------------------
 30258                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30259                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30260                                  ; will be 10 or 16.
 30261                                  ; -----------------------------------------------------------------------------
 30262                                  
 30263                                  gnradix:
 30264                                  	dw	0		; Must be a word--16x16 multiplication
 30265                                  
 30266                                  toDigit:
 30267                                  	cmp	word [cs:gnradix],16
 30268                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 30269                                  
 30270                                  toDigit_hex:
 30271                                  	cmp	cl,'a'	; 61h
 30272                                  	jb	short td10
 30273                                  	cmp	cl,'f'	; 66h
 30274                                  	ja	short tdE	; Nothing valid above 'z' at all...
 30275                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30276                                  	;clc			; <- CLC is implicit from last SUB
 30277                                  	retn
 30278                                  td10:	
 30279                                  	cmp	cl,'A'  ; 41h
 30280                                  	jb	short td20	; Below 'A'?  Not a letter...
 30281                                  	cmp	cl,'F'	; 46h
 30282                                  	ja	short tdE	; Above 'F'?  Not a digit.
 30283                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30284                                  	;clc			; <- CLC is implicit from last SUB
 30285                                  	retn
 30286                                  toDigit_dec:
 30287                                  td20:	
 30288                                  	cmp	cl,'0'		; If less than zero,
 30289                                  	;jb	short tdE	; Done.
 30290                                  	jb	short tdEr ; 08/04/2019
 30291                                  	cmp	cl,'9'		; Or, if greater than nine,
 30292                                  	ja	short tdE	; Done.
 30293                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30294                                  	;clc			; <- CLC is implicit from last SUB
 30295                                  	retn
 30296                                  tdE:	
 30297                                  	stc
 30298                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30299                                  	retn
 30300                                  
 30301                                  ; -----------------------------------------------------------------------------
 30302                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30305                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30306                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30307                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30310                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30311                                  ; will be 10 or 16.
 30312                                  ; -----------------------------------------------------------------------------
 30313                                  
 30314                                  ; 08/04/2019 - Retro DOS v4.0
 30315                                  
 30316                                  GetXNum:
 30317                                  	;pushreg <bx, cx, ds>
 30318                                  	push	bx
 30319                                  	push	cx
 30320                                  	push	ds
 30321                                  
 30322                                  	cld
 30323                                  	xor	ax,ax
 30324                                  	xor	bx,bx
 30325                                  	xor	cx,cx
 30326                                  	xor	dx,dx			; Start with 0 (makes sense)
 30327                                  
 30328                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30329                                  
 30330                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30331                                  	;call	toDigit
 30332                                  	call	toDigit_dec
 30333                                  	jc	short gxnE		; If it's not a digit, leave now.
 30334                                  
 30335                                  	or	cl,cl
 30336                                  	jnz	short gxn20		; Doesn't have '0x'
 30337                                  	mov	cl,[es:si+1]
 30338                                  	cmp	cl,'x'			; Either 'x'...
 30339                                  	je	short gxn10
 30340                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30341                                  	jne	short gxn20
 30342                                  
 30343                                  gxn10:	
 30344                                  	mov	word [cs:gnradix], 16
 30345                                  	inc	si			; Since we read "0x", march over it.
 30346                                  	inc	si
 30347                                  
 30348                                  ; ------------------------------------------------------
 30349                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30350                                  ;        DX:AX = current total
 30351                                  ;        BX    = 0
 30352                                  ;        CH    = 0
 30353                                  ; ------------------------------------------------------
 30354                                  
 30355                                  gxn20:	
 30356                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30357                                  	inc	si
 30358                                  
 30359                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30360                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30361                                  
 30362                                  	call	mul32		; Multiply DX:AX by gnradix
 30363                                  	jc	short gxnX	; (if it's too big, error out)
 30364                                  
 30365                                  	add	ax,cx		; Add the digit
 30366                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 30367                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30368                                  	;jmp	short gxn20
 30369                                  	jnc	short gxn20
 30370                                  gxnE:	
 30371                                  	;stc			; In this case, we need to set the carry
 30372                                  	jmp	short gxnX	; and leave--there were no digits given.
 30373                                  gxnQ:	
 30374                                  	dec	si		; Don't read in the offensive character.
 30375                                  	clc			; And clear carry, so they know it's okay.
 30376                                  gxnX:	
 30377                                  	pop	ds
 30378                                  	pop	cx
 30379                                  	pop	bx
 30380                                  	retn
 30381                                  
 30382                                  ; -----------------------------------------------------------------------------
 30383                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30384                                  ; -----------------------------------------------------------------------------
 30385                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30386                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30387                                  ; ERROR:   Carry set if number was too large
 30388                                  ; USES:    Flags, AX, DX
 30389                                  ; -----------------------------------------------------------------------------
 30390                                  
 30391                                  mul32:
 30392                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30393                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30394                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30395                                  	jc	short m32E	; Too big?
 30396                                  
 30397                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30398                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30399                                  
 30400                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30401                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 30402                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30403                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30404                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30405                                  	retn
 30406                                  m32E:	
 30407                                  	pop	ax
 30408                                  	retn
 30409                                  
 30410                                  ; -----------------------------------------------------------------------------
 30411                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30412                                  ; -----------------------------------------------------------------------------
 30413                                  ; ENTRY:   DX:AX = the number to be divided
 30414                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30415                                  ; ERROR:   None
 30416                                  ; USES:    Flags, AX, DX
 30417                                  ; -----------------------------------------------------------------------------
 30418                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30419                                  ;       can't ensure a 386 host machine. Sorry.
 30420                                  ; -----------------------------------------------------------------------------
 30421                                  
 30422                                  toPara:
 30423                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30424                                  
 30425                                  	mov	cl,4		;
 30426                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30427                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30428                                  	mov	cl,12
 30429                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30430                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 30431                                  
 30432                                  	pop	cx
 30433                                  	retn
 30434                                  
 30435                                  ; -----------------------------------------------------------------------------
 30436                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30437                                  ; -----------------------------------------------------------------------------
 30438                                  ; ENTRY:  Nothing
 30439                                  ; EXIT:   AX contains 0x9FFF for most systems
 30440                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30441                                  ; USES:   Flags, AX
 30442                                  ; -----------------------------------------------------------------------------
 30443                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30444                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30445                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30446                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30447                                  ; -----------------------------------------------------------------------------
 30448                                  
 30449                                  UmbHead:
 30450                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30451                                  
 30452                                  	;push	si ; ?
 30453                                  	;push	ds ; ? 
 30454                                  	;push	es
 30455                                  	;push	bx ; *	
 30456                                  
 30457                                  	; 09/04/2019
 30458                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30459                                  
 30460                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30461                                  	int	21h
 30462                                  
 30463                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30464                                  	cmp	ax,0FFFFh
 30465                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 30466                                  
 30467                                  	clc				; Else, it isn't (CLC done by prev cmp)
 30468                                  	;jmp	short uhX
 30469                                  	; 12/12/2022
 30470                                  	retn
 30471                                  uhE:	
 30472                                  	stc
 30473                                  uhX:	
 30474                                  	;pop	bx ; *
 30475                                  	;pop	es
 30476                                  	;pop	ds ; ?
 30477                                  	;pop	si ; ?
 30478                                  	retn
 30479                                  
 30480                                  ; -----------------------------------------------------------------------------
 30481                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30482                                  ; -----------------------------------------------------------------------------
 30483                                  ; ENTRY:  ES:0 should point to a valid MCB
 30484                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30485                                  ; USES:   Flags
 30486                                  ; -----------------------------------------------------------------------------
 30487                                  
 30488                                  isSysMCB:
 30489                                  	;push	ax
 30490                                  
 30491                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30492                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30493                                  	;je	short ism10
 30494                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30495                                  	;;je	short ism10
 30496                                  	;;jmp	short ismX		; Anything else isn't.
 30497                                  	;jne	short ismX
 30498                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30499                                  	jne	short ismX 
 30500                                  ism10:	
 30501                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30502                                  	;cmp	ax,'SC' ; 4353h
 30503                                  	cmp	word [es:ARENA.NAME],'SC'
 30504                                  ismX:	
 30505                                  	;pop	ax
 30506                                  	retn
 30507                                  
 30508                                  ; 09/04/2019 - Retro DOS v4.0
 30509                                  
 30510                                  ; -----------------------------------------------------------------------------
 30511                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30512                                  ; -----------------------------------------------------------------------------
 30513                                  ; ENTRY:  AX contains a segment address
 30514                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30515                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30516                                  ; USES:   Flags, AX
 30517                                  ; -----------------------------------------------------------------------------
 30518                                  ; An address in the following areas is treated as:
 30519                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30520                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30521                                  ;      ...
 30522                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30523                                  ; -----------------------------------------------------------------------------
 30524                                  
 30525                                  AddrToUmb:
 30526                                  	push	cx
 30527                                  	push	dx
 30528                                  	push	es
 30529                                  
 30530                                  	mov	dx,ax		; DX = address to search for
 30531                                  
 30532                                  	call	UmbHead		; AX = first segment
 30533                                  	jc	short atuE	; If it couldn't get it, error out.
 30534                                  
 30535                                  	; 14/08/2023
 30536                                  	;mov	es,ax ; *	; ES = first UMB segment
 30537                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30538                                  
 30539                                  	; 22/07/2023
 30540                                  atu10:
 30541                                  	mov	es,ax ; * ; ** ; 14/08/2023
 30542                                  ; ----------------------------------------
 30543                                  ; ATU10--ES - Current MCB address
 30544                                  ;        DX - Address given for conversion
 30545                                  ;        CX - Current UMB #
 30546                                  ; ----------------------------------------
 30547                                  
 30548                                  ;atu10:	
 30549                                  	;mov	ax,es ; * ; 14/08/2023
 30550                                          cmp	ax,dx		; Present segment >= given segment?
 30551                                  	jae	short atuX	; Yep--done.
 30552                                  
 30553                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30554                                  	jnz	short atu20
 30555                                  
 30556                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30557                                  atu20:	
 30558                                  	;mov	al,[es:ARENA.SIGNATURE]
 30559                                  	;cmp	al,arena_signature_end  ; 'Z'
 30560                                  	; 14/08/2023
 30561                                  	; ax = es
 30562                                  	;mov	ax,es ; **
 30563                                  	add	ax,[es:ARENA.SIZE]
 30564                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30565                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30566                                  
 30567                                  	;NextMCB es,ax
 30568                                  
 30569                                  	;mov	ax,es ; **
 30570                                  	;;add	ax,[es:3]
 30571                                  	;add	ax,[es:ARENA.SIZE]
 30572                                  	inc	ax
 30573                                  	; 14/08/2023
 30574                                  	;mov	es,ax ; *
 30575                                  	jmp	short atu10
 30576                                  
 30577                                  ; -----------------------------------------------------------------------------
 30578                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30579                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30580                                  ; -----------------------------------------------------------------------------
 30581                                  
 30582                                  atu30:	
 30583                                  	; 14/08/2023
 30584                                  	; ax = es + [es:ARENA.SIZE] 
 30585                                  	;mov	ax,es ; **
 30586                                  	;add	ax,[es:ARENA.SIZE] ; **
 30587                                  	cmp	ax,dx		; Present >= given?
 30588                                  	jae	short atuX	; Yep! It _was_ inside.
 30589                                  atuE:	
 30590                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30591                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30592                                  atuX:	
 30593                                  	mov	ax,cx		; Return the UMB number in AX
 30594                                  	
 30595                                  	pop	es	
 30596                                  	pop	dx
 30597                                  	pop	cx
 30598                                  	retn
 30599                                  
 30600                                  ; -----------------------------------------------------------------------------
 30601                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30602                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30603                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30604                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30605                                  ; -----------------------------------------------------------------------------
 30606                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30607                                  ; EXIT:   AX will contain a UMB number
 30608                                  ; ERROR:  None
 30609                                  ; USES:   Flags, AX
 30610                                  ; -----------------------------------------------------------------------------
 30611                                  
 30612                                  convUMB:
 30613                                  	cmp	word [cs:gnradix],16
 30614                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 30615                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30616                                  ;cmp	ax,0FFFFh
 30617                                  	;jne	short cu10
 30618                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30619                                  	; 14/08/2023
 30620                                  	inc	ax
 30621                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 30622                                  	dec	ax
 30623                                  cu10:	
 30624                                  	retn
 30625                                  
 30626                                  ; -----------------------------------------------------------------------------
 30627                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 30628                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30629                                  ; of the usual HIGH_FIRST.  See the code.
 30630                                  ; -----------------------------------------------------------------------------
 30631                                  ; ENTRY:  None
 30632                                  ; EXIT:   None
 30633                                  ; ERROR:  None
 30634                                  ; USES:   Flags, fm_umb, fm_strat
 30635                                  ; -----------------------------------------------------------------------------
 30636                                  
 30637                                  setUMBs:
 30638                                  	push	ax
 30639                                  	push	bx
 30640                                  	call	fm_link
 30641                                  	pop	bx
 30642                                  	pop	ax
 30643                                  	retn
 30644                                  
 30645                                  ; -----------------------------------------------------------------------------
 30646                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30647                                  ; -----------------------------------------------------------------------------
 30648                                  ; ENTRY:  None
 30649                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30650                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30651                                  ; ERROR:  None
 30652                                  ; USES:   Flags, fm_strat, fm_umb
 30653                                  ; -----------------------------------------------------------------------------
 30654                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30655                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 30656                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30657                                  ; such that the load UMB is too small, and shouldn't be used.
 30658                                  ; -----------------------------------------------------------------------------
 30659                                  
 30660                                  loadLow:
 30661                                  	;push	ds
 30662                                  	;push	cs		; Point DS into appropriate data segment
 30663                                  	;pop	ds	
 30664                                  
 30665                                  	;mov	al,[UmbLoad]
 30666                                  	mov	al,[cs:UmbLoad]
 30667                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30668                                  	jne	short ll10
 30669                                  
 30670                                  	stc
 30671                                  ll15:
 30672                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30673                                  	;stc
 30674                                  	;jmp	short llX
 30675                                  	retn
 30676                                  ll10:	
 30677                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30678                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30679                                  
 30680                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30681                                  	retn
 30682                                  
 30683                                  	;mov	al,1
 30684                                  	;clc
 30685                                  ;llX:
 30686                                  	;pop	ds		; Return DS to where it was
 30687                                  	;retn
 30688                                  
 30689                                  ; -----------------------------------------------------------------------------
 30690                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30691                                  ; -----------------------------------------------------------------------------
 30692                                  ; ENTRY:  None
 30693                                  ; EXIT:   None
 30694                                  ; ERROR:  None
 30695                                  ; USES:   Flags, fm_strat, fm_umb
 30696                                  ; -----------------------------------------------------------------------------
 30697                                  
 30698                                  HideUMBs:
 30699                                  	push	ax
 30700                                  	push	cx
 30701                                  	push	ds
 30702                                  	push	es
 30703                                  
 30704                                  	call	UmbTest		; See if we REALLY linked in anything...
 30705                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30706                                  
 30707                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30708                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30709                                  
 30710                                  	;putdata fInHigh,1	; Remember that we're now running high
 30711                                  	mov	byte [cs:fInHigh],1
 30712                                  
 30713                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30714                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30715                                  
 30716                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30717                                  	je	short husX	; then we shouldn't do this loop:
 30718                                  
 30719                                  	xor	cx,cx
 30720                                  
 30721                                  ; -----------------------------------------------
 30722                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30723                                  ; -----------------------------------------------
 30724                                  
 30725                                  hus10:	inc	cx		; For each UMB:
 30726                                  	cmp	cx,MAXUMB ; 16
 30727                                  	jae	short hus20
 30728                                  
 30729                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30730                                  	push	es
 30731                                  	call	findUMB		; valid range of UMBs)
 30732                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30733                                  	jc	short hus20
 30734                                  
 30735                                  	call	_hideUMB_	; hide what we need to hide.
 30736                                  
 30737                                  	jmp	short hus10
 30738                                  hus20:	
 30739                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30740                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30741                                  
 30742                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30743                                  	jnz	short husX	; If not, we're done.
 30744                                  
 30745                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30746                                  husX:	
 30747                                  	pop	es
 30748                                  	pop	ds
 30749                                  	pop	cx
 30750                                  	pop	ax
 30751                                  	retn
 30752                                  
 30753                                  ; -----------------------------------------------------------------------------
 30754                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30755                                  ; -----------------------------------------------------------------------------
 30756                                  ; ENTRY:  None
 30757                                  ; EXIT:   AL == load UMB
 30758                                  ; ERROR:  None
 30759                                  ; USES:   Flags, AX
 30760                                  ; -----------------------------------------------------------------------------
 30761                                  
 30762                                  ;GetLoadUMB:
 30763                                  ;	;getdata al, UmbLoad
 30764                                  ;	push	ds
 30765                                  ;	push	cs
 30766                                  ;	pop	ds
 30767                                  ;	mov	al,[UmLoad]
 30768                                  ;	pop	ds
 30769                                  ;	retn
 30770                                  
 30771                                  ; -----------------------------------------------------------------------------
 30772                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30773                                  ; -----------------------------------------------------------------------------
 30774                                  ; ENTRY:  None
 30775                                  ; EXIT:   AX == load UMB minimum size
 30776                                  ; ERROR:  None
 30777                                  ; USES:   Flags, AX
 30778                                  ; -----------------------------------------------------------------------------
 30779                                  
 30780                                  GetLoadSize:
 30781                                  	; 09/04/2019 - Retro DOS v4.0
 30782                                  	mov	al,[cs:UmbLoad]
 30783                                  	jmp	short GetSize
 30784                                  
 30785                                  	;push	bx
 30786                                  	;;push	si
 30787                                  	;push	ds
 30788                                  	;push	cs
 30789                                  	;pop	ds
 30790                                  
 30791                                  	;mov	al,[UmbLoad]
 30792                                  
 30793                                  	;xor	ah,ah			;    ax==UMB
 30794                                  	;mov	bx,UmbSize		;    bx==array
 30795                                  	;shl	al,1	                ;    ax==offset
 30796                                  	;;add	ax,bx			;    ax==element index
 30797                                  	;;mov	si,ax			; ds:si==element index
 30798                                  
 30799                                  	;;lodsw				;    ax==size
 30800                                  
 30801                                  	;add	bx,ax
 30802                                  	;mov	ax,[bx]
 30803                                  
 30804                                  	;pop	ds
 30805                                  	;;pop	si
 30806                                  	;pop	bx
 30807                                  	;retn
 30808                                  
 30809                                  ; -----------------------------------------------------------------------------
 30810                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30811                                  ; -----------------------------------------------------------------------------
 30812                                  ; ENTRY:  AL == a UMB number
 30813                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30814                                  ; ERROR:  None
 30815                                  ; USES:   Flags, AX
 30816                                  ; -----------------------------------------------------------------------------
 30817                                  
 30818                                  GetSize:
 30819                                  	; 09/04/2019 - Retro DOS v4.0
 30820                                  
 30821                                  	push	bx
 30822                                  	;push	si
 30823                                  	;push	ds
 30824                                  	;push	cs
 30825                                  	;pop	ds
 30826                                  
 30827                                  	xor	ah,ah			;    ax==UMB
 30828                                  	mov	bx,UmbSize		;    bx==array
 30829                                  	shl	al,1	                ;    ax==offset
 30830                                  	;add	ax,bx			;    ax==element index
 30831                                  	;mov	si,ax			; ds:si==element index
 30832                                  
 30833                                  	;lodsw				;    ax==size
 30834                                  
 30835                                  	add	bx,ax
 30836                                  	;mov	ax,[bx]
 30837                                  	mov	ax,[cs:bx]
 30838                                  
 30839                                  	;pop	ds
 30840                                  	;pop	si
 30841                                  	pop	bx
 30842                                  	retn
 30843                                  
 30844                                  ; -----------------------------------------------------------------------------
 30845                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30846                                  ; -----------------------------------------------------------------------------
 30847                                  ; ENTRY:   AL == new load UMB
 30848                                  ; EXIT:    None
 30849                                  ; ERROR:   None
 30850                                  ; USES:    Flags, AX
 30851                                  ; -----------------------------------------------------------------------------
 30852                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30853                                  ;          time you would ever need this, so that's okay.
 30854                                  ; -----------------------------------------------------------------------------
 30855                                  
 30856                                  ;StoLoadUMB:
 30857                                  ;	;putdata UmbLoad, al
 30858                                  ;	push	es
 30859                                  ;	push	cs
 30860                                  ;	pop	es
 30861                                  ;	mov	[es:UmbLoad],al
 30862                                  ;	pop	es
 30863                                  ;	retn
 30864                                  
 30865                                  ; -----------------------------------------------------------------------------
 30866                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30867                                  ; -----------------------------------------------------------------------------
 30868                                  ; ENTRY:  AL == new load size
 30869                                  ; EXIT:   None
 30870                                  ; ERROR:  None
 30871                                  ; USES:   Flags, AX
 30872                                  ; -----------------------------------------------------------------------------
 30873                                  
 30874                                  StoLoadSize:
 30875                                  	push	dx
 30876                                  
 30877                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30878                                  	;
 30879                                  	;push	ds
 30880                                  	;push	cs
 30881                                  	;pop	ds
 30882                                  	;mov	dl,[UmbLoad]
 30883                                  	;pop	ds	
 30884                                  
 30885                                  	mov	dl,[cs:UmbLoad]
 30886                                  
 30887                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30888                                  	je	short sls10
 30889                                  
 30890                                  	call	stowSiz			; We've got a function to do just this
 30891                                  sls10:	
 30892                                  	pop	dx
 30893                                  	retn
 30894                                  
 30895                                  ; -----------------------------------------------------------------------------
 30896                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30897                                  ; -----------------------------------------------------------------------------
 30898                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30899                                  ; EXIT:     None; free elements in UMB marked as hidden
 30900                                  ; ERROR:    None
 30901                                  ; USES:     Flags
 30902                                  ; -----------------------------------------------------------------------------
 30903                                  
 30904                                  hideUMB:
 30905                                  	push	ax
 30906                                  	push	es
 30907                                  
 30908                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30909                                  	jc	short huX
 30910                                  
 30911                                  ; ------------------------------------------------
 30912                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30913                                  ;            we're not in the same UMB, so exit.
 30914                                  ; ------------------------------------------------
 30915                                  
 30916                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30917                                  	jz	short huX	; If it is, we've finished the UMB.
 30918                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30919                                  	or	word [es:ARENA.OWNER],0
 30920                                  	jnz	short hu20
 30921                                  
 30922                                  	call	hideMCB
 30923                                  hu20:	
 30924                                  	mov	al,[es:ARENA.SIGNATURE]
 30925                                  	cmp	al,arena_signature_end  ;'Z'
 30926                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30927                                  
 30928                                  	;NextMCB es, ax		; Go on forward.
 30929                                  	mov     ax,es
 30930                                  	;add	ax,[es:3]
 30931                                  	add     ax,[es:ARENA.SIZE]
 30932                                  	inc     ax
 30933                                  	mov     es,ax
 30934                                  
 30935                                  	jmp	short hu10
 30936                                  huX:	
 30937                                  	pop	es
 30938                                  	pop	ax
 30939                                  	retn
 30940                                  
 30941                                  ; -----------------------------------------------------------------------------
 30942                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30943                                  ; -----------------------------------------------------------------------------
 30944                                  ; ENTRY:    None
 30945                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30946                                  ; ERROR:    None
 30947                                  ; USES:     Flags
 30948                                  ; -----------------------------------------------------------------------------
 30949                                  
 30950                                  isTiny:
 30951                                  	push	ax
 30952                                  
 30953                                  	;getdata al, fUmbTiny
 30954                                  	;
 30955                                  	;push	ds
 30956                                  	;push	cs
 30957                                  	;pop	ds
 30958                                  	;mov	al,[fUmbTiny]
 30959                                  	;pop	ds
 30960                                  
 30961                                  	mov	al,[cs:fUmbTiny]		
 30962                                  
 30963                                  	or	al,al
 30964                                  	pop	ax
 30965                                  	retn
 30966                                  
 30967                                  ; -----------------------------------------------------------------------------
 30968                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30969                                  ; -----------------------------------------------------------------------------
 30970                                  ; ENTRY:    ES:0 should point to an MCB
 30971                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30972                                  ; ERROR:    None
 30973                                  ; USES:     Flags
 30974                                  ; -----------------------------------------------------------------------------
 30975                                  
 30976                                  ;isFreeMCB:
 30977                                  ;	or	word [es:ARENA.OWNER],0
 30978                                  ;	retn
 30979                                  
 30980                                  ; -----------------------------------------------------------------------------
 30981                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30982                                  ; -----------------------------------------------------------------------------
 30983                                  ; ENTRY:    ES:0 should point to an MCB
 30984                                  ; EXIT:     None; MCB marked as HIDDEN
 30985                                  ; ERROR:    None
 30986                                  ; USES:     None
 30987                                  ; -----------------------------------------------------------------------------
 30988                                  
 30989                                  hideMCB:
 30990                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30991                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30992                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30993                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30994                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30995                                  	retn
 30996                                  
 30997                                  ; -----------------------------------------------------------------------------
 30998                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30999                                  ; -----------------------------------------------------------------------------
 31000                                  ; ENTRY:    ES:0 should point to an MCB
 31001                                  ; EXIT:     None; MCB marked as FREE
 31002                                  ; ERROR:    None
 31003                                  ; USES:     None
 31004                                  ; -----------------------------------------------------------------------------
 31005                                  
 31006                                  unHideMCB:
 31007                                  	push	ax
 31008                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 31009                                  	mov	ax,'  ' ; 2020h
 31010                                  	mov	[es:ARENA.NAME+0],ax
 31011                                  	mov	[es:ARENA.NAME+2],ax
 31012                                  	mov	[es:ARENA.NAME+4],ax
 31013                                  	mov	[es:ARENA.NAME+6],ax
 31014                                  	pop	ax
 31015                                  	retn
 31016                                  
 31017                                  ; -----------------------------------------------------------------------------
 31018                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 31019                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 31020                                  ; -----------------------------------------------------------------------------
 31021                                  ; ENTRY:    AL should be to a valid UMB number
 31022                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 31023                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 31024                                  ; USES:     Flags, ES
 31025                                  ; -----------------------------------------------------------------------------
 31026                                  
 31027                                  findUMB:
 31028                                  	push	ax
 31029                                  	push	cx
 31030                                  	push	dx
 31031                                  
 31032                                  	xor	ah,ah		; Zap ah, so al==ax
 31033                                  
 31034                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 31035                                  
 31036                                  	call	UmbHead		; Returns first UMB segment in AX
 31037                                  	mov	es,ax
 31038                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31039                                  
 31040                                  ; ---------------------------------------------
 31041                                  ; FU10--CX - This UMB number; 0 == conventional
 31042                                  ;       DX - The UMB number they're looking for
 31043                                  ;       ES - The current MCB address
 31044                                  ; ---------------------------------------------
 31045                                  
 31046                                  fu10:	
 31047                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31048                                  	je	short fuX	; searching for--so exit.
 31049                                  
 31050                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31051                                  	jnz	short fu20
 31052                                  
 31053                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31054                                  fu20:	
 31055                                  	mov	al,[es:ARENA.SIGNATURE]
 31056                                  	cmp	al,arena_signature_end ; 'Z'
 31057                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31058                                  
 31059                                  	;NextMCB es, ax		; Go on forward.
 31060                                  	mov     ax,es
 31061                                  	;add	ax,[es:3]
 31062                                  	add     ax,[es:ARENA.SIZE]
 31063                                  	inc     ax
 31064                                  	mov     es,ax
 31065                                  
 31066                                  	jmp	short fu10
 31067                                  fuE:	
 31068                                  	stc
 31069                                  fuX:
 31070                                  	pop	dx
 31071                                  	pop	cx
 31072                                  	pop	ax		; The address is already in ES.
 31073                                  	retn
 31074                                  
 31075                                  ; -----------------------------------------------------------------------------
 31076                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31077                                  ; -----------------------------------------------------------------------------
 31078                                  ; ENTRY:    AL should be to a valid UMB number
 31079                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31080                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31081                                  ; USES:     Flags, ES
 31082                                  ; -----------------------------------------------------------------------------
 31083                                  
 31084                                  BigFree:
 31085                                  	push	bx
 31086                                  	push	cx
 31087                                  
 31088                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31089                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 31090                                  
 31091                                  	xor	bx,bx			; Segment address of largest free MCB
 31092                                  	xor	cx,cx			; Size of largest free MCB
 31093                                  
 31094                                  ; ---------------------------------------------
 31095                                  ; BF10--ES - Current MCB address
 31096                                  ;       BX - Address of largest free MCB so far
 31097                                  ;       CX - Size of largest free MCB so far
 31098                                  ; ---------------------------------------------
 31099                                  
 31100                                  bf10:	
 31101                                  	call	isSysMCB		; If we've left the MCB, we're done.
 31102                                  	jz	short bf30
 31103                                  
 31104                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31105                                  	or	word [es:ARENA.OWNER],0
 31106                                  	jnz	short bf20
 31107                                  
 31108                                  	mov	ax,[es:ARENA.SIZE]
 31109                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31110                                  	cmp	cx,ax
 31111                                  	jg	short bf20		; Unless we're bigger,
 31112                                  
 31113                                  	mov	bx,es			; Store this new element's address,
 31114                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31115                                  	mov	cx,ax
 31116                                  
 31117                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 31118                                  	cmp	al,arena_signature_end	; 'Z'
 31119                                  	jz	short bf30		; 'Z' means this was the last MCB.
 31120                                  
 31121                                  	;NextMCB es,ax		; Go on forward.
 31122                                  	mov     ax,es
 31123                                  	;add	ax,[es:3]
 31124                                  	add     ax,[es:ARENA.SIZE]
 31125                                  	inc     ax
 31126                                  	mov     es,ax
 31127                                  
 31128                                  	jmp	short bf10
 31129                                  
 31130                                  bf30:	mov	es,bx			; Return the address
 31131                                  	mov	ax,cx			; Return the size
 31132                                  	or	bx,bx
 31133                                  	jnz	short bfX		; (if size==0, there's nothing free)
 31134                                  bfE:	
 31135                                  	stc
 31136                                  bfX:
 31137                                  	pop	cx
 31138                                  	pop	bx
 31139                                  	retn
 31140                                  
 31141                                  ; -----------------------------------------------------------------------------
 31142                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31143                                  ; -----------------------------------------------------------------------------
 31144                                  ; ENTRY:    AL should be to a valid UMB number
 31145                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31146                                  ; ERROR:    None
 31147                                  ; USES:     Flags
 31148                                  ; -----------------------------------------------------------------------------
 31149                                  
 31150                                  isSpecified:
 31151                                  	push	ax
 31152                                  
 31153                                  	xor	bh,bh
 31154                                  	mov	bl,al
 31155                                  
 31156                                  	;getdata al, DS:UmbUsed[bx]
 31157                                  	;
 31158                                  	;push	ds
 31159                                  	;push	cs
 31160                                  	;pop	ds
 31161                                  	;mov	al,[bx+UmbUsed]
 31162                                  	;pop	ds
 31163                                  	
 31164                                  	mov	al,[cs:bx+UmbUsed]
 31165                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31166                                  
 31167                                  	pop	ax
 31168                                  	retn
 31169                                  
 31170                                  ; -----------------------------------------------------------------------------
 31171                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31172                                  ; -----------------------------------------------------------------------------
 31173                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31174                                  ; EXIT:     None; MCB broken if carry clear
 31175                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31176                                  ; USES:     Flags
 31177                                  ; -----------------------------------------------------------------------------
 31178                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31179                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31180                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31181                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31182                                  ; minimum for performing a split.
 31183                                  ; -----------------------------------------------------------------------------
 31184                                  
 31185                                  MIN_SPLIT_SIZE	equ	20h
 31186                                  
 31187                                  shrinkMCB:
 31188                                  	;pushreg <bx, cx, es>
 31189                                  	push	bx
 31190                                  	push	cx
 31191                                  	push	es
 31192                                  
 31193                                  	mov	bx,ax			; Move things around... and
 31194                                  	mov	ax,es			; save this one for later.
 31195                                  
 31196                                  	mov	cx,[es:ARENA.SIZE]
 31197                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 31198                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31199                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31200                                  	; 18/12/2022
 31201                                  	cmp	cx,bx
 31202                                  	jb	short smE ; (*)
 31203                                  
 31204                                  	mov	dl,[es:ARENA.SIGNATURE]
 31205                                  	mov	cx,[es:ARENA.SIZE]
 31206                                  
 31207                                  	mov	[es:ARENA.SIZE],bx
 31208                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 31209                                  
 31210                                  	add	ax,bx
 31211                                  	inc	ax
 31212                                  	mov	es,ax			; Move to new arena area
 31213                                  
 31214                                  	mov	ax,cx
 31215                                  	sub	ax,bx
 31216                                  	; 12/12/2022
 31217                                  	; ax > 0
 31218                                  	dec	ax			; And prepare the new size
 31219                                  
 31220                                  	; 18/12/2022
 31221                                  	mov	[es:ARENA.SIGNATURE],dl
 31222                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31223                                  	mov	[es:ARENA.SIZE],ax
 31224                                  	;mov	ax,'  ' ; 2020h
 31225                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31226                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31227                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31228                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31229                                  
 31230                                  	; 18/12/2022
 31231                                  	call	freeMCB	; (**)
 31232                                  
 31233                                  	; 12/12/2022
 31234                                  	; cf=0
 31235                                  	;clc
 31236                                  	; 18/12/2022
 31237                                  	;jmp	short smX
 31238                                  smE:	
 31239                                  	; 18/12/2022
 31240                                  	; cf=1 (*)
 31241                                  	;stc
 31242                                  smX:	
 31243                                  	;popreg	<es, cx, bx>
 31244                                  	pop	es
 31245                                  	pop	cx
 31246                                  	pop	bx
 31247                                  	retn
 31248                                  
 31249                                  ; -----------------------------------------------------------------------------
 31250                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31251                                  ; -----------------------------------------------------------------------------
 31252                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31253                                  ; EXIT:     None; UMB is hidden as necessary
 31254                                  ; ERROR:    None
 31255                                  ; USES:     Flags, AX, CX
 31256                                  ; -----------------------------------------------------------------------------
 31257                                  ; PRIMARY LOGIC:
 31258                                  ;
 31259                                  ; If the UMB is specified in the DH/LH statement, then:
 31260                                  ;    If the largest free segment is too small (check specified size), then:
 31261                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31262                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31263                                  ;       If /S was given on the command-line, then:
 31264                                  ;          Break that element into two pieces
 31265                                  ;          Set a flag that we're shrinking
 31266                                  ;       Endif
 31267                                  ;    Endif
 31268                                  ; Endif
 31269                                  ; If the UMB is NOT specified (or was removed by the above):
 31270                                  ;    Hide all free elements in the UMB
 31271                                  ;    If the flag that we're shrinking was set, then:
 31272                                  ;       UN-hide the lower portion of the shrunken UMB
 31273                                  ;    ENDIF
 31274                                  ; ENDIF
 31275                                  ; -----------------------------------------------------------------------------
 31276                                  
 31277                                  _hideUMB_:
 31278                                  	push	bx
 31279                                  	push	dx
 31280                                  	push	es
 31281                                  
 31282                                  	mov	al,cl
 31283                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31284                                  	jz	short hu_20
 31285                                  
 31286                                  	mov	al,cl		; Retrieve the size of the largest
 31287                                  	call	BigFree		; free element in AX; put its address in ES
 31288                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 31289                                  
 31290                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31291                                  	mov	al,cl		; Retrieve the user's specified
 31292                                  	call	GetSize		; minimum size for this umb (into AX)
 31293                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 31294                                  
 31295                                  	or	ax,ax		; If they didn't specify one,
 31296                                  	jz	short hu_20	; Skip over all this.
 31297                                  
 31298                                  	cmp	ax,bx		; Ah... if (specified > max free)
 31299                                  	jbe	short hu_10
 31300                                  
 31301                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 31302                                  	call	unMarkUMB
 31303                                  	jmp	short hu_20
 31304                                  hu_10:	
 31305                                  	call	isTiny		; Returns ZF clear if user specified /S
 31306                                  	jz	short hu_20
 31307                                  
 31308                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31309                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31310                                  
 31311                                  	mov	dx,es
 31312                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31313                                  
 31314                                  hu_20:	mov	ax,cx
 31315                                  	call	isSpecified	; If they specified this UMB, we're done...
 31316                                  	jnz	short hu_X	; so leave.
 31317                                  
 31318                                  	xor	dx,dx
 31319                                  hu_30:	
 31320                                  	mov	al,cl
 31321                                  
 31322                                  	call	hideUMB		; Hides everything in UMB #al
 31323                                  
 31324                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31325                                  	jz	short hu_X	; So we should leave.
 31326                                  
 31327                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31328                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31329                                  hu_X:	
 31330                                  	pop	es
 31331                                  	pop	dx
 31332                                  	pop	bx
 31333                                  	retn
 31334                                  
 31335                                  ; -----------------------------------------------------------------------------
 31336                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31337                                  ; -----------------------------------------------------------------------------
 31338                                  ; Entry:  None
 31339                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31340                                  ; Error:  None
 31341                                  ; Uses:   Flags
 31342                                  ; -----------------------------------------------------------------------------
 31343                                  
 31344                                  UnFreeze:
 31345                                  	push	ax
 31346                                  	push	es
 31347                                  
 31348                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31349                                  	jc	short ufX
 31350                                  
 31351                                  	mov	es,ax
 31352                                  
 31353                                  ; ------------------------------
 31354                                  ; UF10--ES - Current MCB address
 31355                                  ; ------------------------------
 31356                                  
 31357                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31358                                  	jnz	short uf20
 31359                                  	call	unHideMCB
 31360                                  uf20:	
 31361                                  	mov	al,[es:ARENA.SIGNATURE]
 31362                                  
 31363                                  	cmp	al,arena_signature_end ; 'Z'
 31364                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 31365                                  
 31366                                  	;NextMCB es, ax		; Go on forward.
 31367                                  	mov     ax,es
 31368                                  	;add	ax,[es:3]
 31369                                  	add     ax,[es:ARENA.SIZE]
 31370                                  	inc     ax
 31371                                  	mov     es,ax
 31372                                  
 31373                                  	jmp	short uf10
 31374                                  ufX:	
 31375                                  	pop	es
 31376                                  	pop	ax
 31377                                  	retn
 31378                                  
 31379                                  ; -----------------------------------------------------------------------------
 31380                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31381                                  ; -----------------------------------------------------------------------------
 31382                                  ; ENTRY:    ES:0 should point to an MCB
 31383                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31384                                  ; ERROR:    None
 31385                                  ; USES:     Flags
 31386                                  ; -----------------------------------------------------------------------------
 31387                                  
 31388                                  isFrozMCB:
 31389                                  	;push	ax
 31390                                  
 31391                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31392                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31393                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31394                                  	jne	short ifmX
 31395                                  
 31396                                  	;mov	ax,[es:ARENA.NAME+0]
 31397                                  	;cmp	ax,'FR' ; 5246h
 31398                                  	cmp	word [es:ARENA.NAME+0],'FR'
 31399                                  	jne	short ifmX
 31400                                  	;mov	ax,[es:ARENA.NAME+2]
 31401                                  	;cmp	ax,'OZ' ; 5A4Fh
 31402                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 31403                                  	jne	short ifmX
 31404                                  	;mov	ax,[es:ARENA.NAME+4]
 31405                                  	;cmp	ax,'EN' ; 4E45h
 31406                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31407                                  	jne	short ifmX
 31408                                  	;mov	ax,[es:ARENA.NAME+6]
 31409                                  	;cmp	ax,'  ' ; 2020h
 31410                                  	cmp	word [es:ARENA.NAME+6],'  '
 31411                                  ifmX:	
 31412                                  	;pop	ax
 31413                                  	retn
 31414                                  
 31415                                  ; -----------------------------------------------------------------------------
 31416                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31417                                  ; -----------------------------------------------------------------------------
 31418                                  ; ENTRY:    ES:0 should point to an MCB
 31419                                  ; EXIT:     None; MCB frozen
 31420                                  ; ERROR:    None
 31421                                  ; USES:     None
 31422                                  ; -----------------------------------------------------------------------------
 31423                                  
 31424                                  frezMCB:
 31425                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31426                                  	mov	word [es:ARENA.NAME+0],'FR'
 31427                                  	mov	word [es:ARENA.NAME+2],'OZ'
 31428                                  	mov	word [es:ARENA.NAME+4],'EN'
 31429                                  	mov	word [es:ARENA.NAME+6],'  '
 31430                                  	retn
 31431                                  
 31432                                  ; -----------------------------------------------------------------------------
 31433                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31434                                  ; -----------------------------------------------------------------------------
 31435                                  ; Entry:  None
 31436                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31437                                  ; Error:  None
 31438                                  ; Uses:   Flags
 31439                                  ; -----------------------------------------------------------------------------
 31440                                  
 31441                                  FreezeUM:
 31442                                  	push	ax
 31443                                  	push	cx
 31444                                  	push	dx
 31445                                  	push	es
 31446                                  
 31447                                  	;call	GetLoadUMB
 31448                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31449                                  
 31450                                  	xor	ah,ah		; Zap ah, so al==ax
 31451                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31452                                  
 31453                                  	call	UmbHead		; Returns first UMB segment in AX
 31454                                  	mov	es,ax
 31455                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31456                                  
 31457                                  ; -----------------------------------------
 31458                                  ; FUM10--ES - Current MCB address
 31459                                  ;        CX - Current UMB number
 31460                                  ;        DX - UMB number to skip (load UMB)
 31461                                  ; -----------------------------------------
 31462                                  
 31463                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31464                                  	jnz	short fum20
 31465                                  
 31466                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31467                                  fum20:	
 31468                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 31469                                  	je	short fum30	; freeze anything... so skip that section.
 31470                                  
 31471                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31472                                  	or	word [es:ARENA.OWNER],0
 31473                                  	jnz	short fum30	; either.
 31474                                  
 31475                                  	call	frezMCB
 31476                                  fum30:	
 31477                                  	mov	al,[es:ARENA.SIGNATURE]
 31478                                  	cmp	al,arena_signature_end ; 'Z'
 31479                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 31480                                  
 31481                                  	;NextMCB es, ax		; Go on forward.
 31482                                  	mov     ax,es
 31483                                  	;add	ax,[es:3]
 31484                                  	add     ax,[es:ARENA.SIZE]
 31485                                  	inc     ax
 31486                                  	mov     es,ax
 31487                                  	
 31488                                  	jmp	short fum10
 31489                                  
 31490                                  fumX:	pop	es
 31491                                  	pop	dx
 31492                                  	pop	cx
 31493                                  	pop	ax
 31494                                  	retn
 31495                                  
 31496                                  ; -----------------------------------------------------------------------------
 31497                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31498                                  ; -----------------------------------------------------------------------------
 31499                                  ; ENTRY:    None
 31500                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31501                                  ; ERROR:    None
 31502                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31503                                  ; -----------------------------------------------------------------------------
 31504                                  
 31505                                  UmbTest:
 31506                                  	push	ax
 31507                                  	push	bx
 31508                                  	push	ds
 31509                                  	push	es
 31510                                  
 31511                                  	call	fm_link			; Link in UMBs (if not already linked)
 31512                                  	call	WalkMem			; Check to see if they're really linked
 31513                                  	pushf				; And remember what we found out
 31514                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31515                                  	popf				; And restore what we found out.
 31516                                  
 31517                                  	pop	es
 31518                                  	pop	ds
 31519                                  	pop	bx
 31520                                  	pop	ax
 31521                                  	retn
 31522                                  
 31523                                  ; -----------------------------------------------------------------------------
 31524                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 31525                                  ; -----------------------------------------------------------------------------
 31526                                  ; ENTRY:    None
 31527                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31528                                  ; ERROR:    None
 31529                                  ; USES:     Flags
 31530                                  ; -----------------------------------------------------------------------------
 31531                                  
 31532                                  WalkMem:
 31533                                  	push	ax ; ?
 31534                                  	push	bx ; ?
 31535                                  	push	es ; ? no need to save contents of these registers ?
 31536                                  		   	
 31537                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31538                                  	int	21h
 31539                                  
 31540                                  	mov	ax,[es:bx-2]
 31541                                  	mov	es,ax
 31542                                  
 31543                                  ; ------------------------------
 31544                                  ; UM10: ES = Current MCB pointer
 31545                                  ; ------------------------------
 31546                                  
 31547                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 31548                                  	cmp	al,arena_signature_end ;  'Z'
 31549                                  	je	short um20		; If signature == 'Z', hay no more.
 31550                                  
 31551                                  	;NextMCB es, bx			; Move to the next MCB
 31552                                  
 31553                                  	mov     bx,es
 31554                                  	;add	bx,[es:3]
 31555                                  	add     bx,[es:ARENA.SIZE]
 31556                                  	inc     bx
 31557                                  	mov     es,bx
 31558                                  		
 31559                                  	jmp	short um10		; And restart the loop.
 31560                                  um20:	
 31561                                  	mov	ax,es
 31562                                  
 31563                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 31564                                  
 31565                                  	pop	es ; ?
 31566                                  	pop	bx ; ?
 31567                                  	pop	ax ; ?
 31568                                  	retn
 31569                                  
 31570                                  ; -----------------------------------------------------------------------------
 31571                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31572                                  ; -----------------------------------------------------------------------------
 31573                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31574                                  ; EXIT:     None
 31575                                  ; ERROR:    None
 31576                                  ; USES:     AX, BX
 31577                                  ; -----------------------------------------------------------------------------
 31578                                  
 31579                                  hl_unlink:
 31580                                  	xor	bh,bh
 31581                                  
 31582                                  	;getdata bl,fm_umb		; Restore original link-state
 31583                                  	;
 31584                                  	;push	ds
 31585                                  	;push	cs
 31586                                  	;pop	ds
 31587                                  	;mov	bl,[fm_umb]
 31588                                  	;pop	ds
 31589                                  
 31590                                  	mov	bl,[cs:fm_umb]
 31591                                  
 31592                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31593                                  	int	21h
 31594                                  	retn
 31595                                  
 31596                                  ; ----------------------------------------------------------------------
 31597                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31598                                  ; ----------------------------------------------------------------------
 31599                                  ; 09/04/2019 - Retro DOS v4.0
 31600                                  
 31601                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31602                                  ;   Date:     May 14, 1992
 31603                                  
 31604                                  ;   Modification log:
 31605                                  ;
 31606                                  ;     DATE    WHO      DESCRIPTION
 31607                                  ;   --------  -------  --------------------------------------------------------
 31608                                  ;   05/14/92  t-richj  Original
 31609                                  ;   06/21/92  t-richj  Final revisions before check-in
 31610                                  
 31611                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31612                                  
 31613                                  ; -----------------------------------------------------------------------------
 31614                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31615                                  ; -----------------------------------------------------------------------------
 31616                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31617                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31618                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31619                                  ; ERROR:  None
 31620                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31621                                  ; -----------------------------------------------------------------------------
 31622                                  
 31623                                  UnHideUMBs:
 31624                                  	push	ax		; Save ax for what we're about to do
 31625                                  
 31626                                  ; -----------------------------------------------------------------------------
 31627                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31628                                  ;    length of time. Those six constitute a check of whether or not we should
 31629                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31630                                  ;    will destroy the current link-state and memory-allocation strategy after
 31631                                  ;    every command execution.
 31632                                  ; -----------------------------------------------------------------------------
 31633                                  
 31634                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31635                                  	;
 31636                                  	;push	ds
 31637                                  	;push	cs
 31638                                  	;pop	ds
 31639                                  	;mov	al,[fInHigh]
 31640                                  	;pop	ds	
 31641                                  
 31642                                  	mov	al,[cs:fInHigh]
 31643                                  
 31644                                  	or	al,al
 31645                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31646                                  
 31647                                  	pop	ax		; then there's nothing to do here... so
 31648                                  	stc			; restore everything and return. Just like
 31649                                  	retn			; that.
 31650                                  uhu10:	
 31651                                  	call	linkumb		; Make sure UMBs are linked in.
 31652                                  	call	FreeUMBs
 31653                                  
 31654                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31655                                  	;
 31656                                  	;push	es
 31657                                  	;push	cs
 31658                                  	;pop	es
 31659                                  	;mov	byte [es:fInHigh],0
 31660                                  	;pop	ds	
 31661                                  
 31662                                  	mov	byte [cs:fInHigh],0	
 31663                                  
 31664                                  	call	he_unlink	; Unlink UMBs
 31665                                  
 31666                                  	pop	ax
 31667                                  	; 12/12/2022
 31668                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31669                                  	retn
 31670                                  
 31671                                  ; -----------------------------------------------------------------------------
 31672                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31673                                  ; -----------------------------------------------------------------------------
 31674                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31675                                  ; EXIT:     None
 31676                                  ; ERROR:    None
 31677                                  ; USES:     AX, BX
 31678                                  ; -----------------------------------------------------------------------------
 31679                                  
 31680                                  he_unlink:
 31681                                  	xor	bh, bh
 31682                                  
 31683                                  	;getdata bl, fm_umb	; Restore original link-state
 31684                                  	mov	bl,[cs:fm_umb]	
 31685                                  
 31686                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31687                                  	int	21h
 31688                                  	retn
 31689                                  
 31690                                  ; -----------------------------------------------------------------------------
 31691                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31692                                  ; -----------------------------------------------------------------------------
 31693                                  ; ENTRY:    None
 31694                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31695                                  ; ERROR:    None (ignore CF)
 31696                                  ; USES:     Flags
 31697                                  ; -----------------------------------------------------------------------------
 31698                                  
 31699                                  FreeUMBs:
 31700                                  	push	ax
 31701                                  	push	es
 31702                                  
 31703                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31704                                  	jc	short fusX
 31705                                  
 31706                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31707                                  fus10:	
 31708                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31709                                  	jnz	short fus20
 31710                                  	call	freeMCB
 31711                                  fus20:	   
 31712                                  	mov	al,[es:ARENA.SIGNATURE]
 31713                                  	cmp	al,arena_signature_end ; 'Z'
 31714                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31715                                  
 31716                                  	mov	ax,es
 31717                                  	add	ax,[es:ARENA.SIZE]
 31718                                  	inc	ax
 31719                                  	mov	es,ax		; Go on forward.
 31720                                  
 31721                                  	jmp	short fus10
 31722                                  fusX:	
 31723                                  	pop	es
 31724                                  	pop	ax
 31725                                  	retn
 31726                                  
 31727                                  ; -----------------------------------------------------------------------------
 31728                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31729                                  ; -----------------------------------------------------------------------------
 31730                                  ; ENTRY:    ES:0 should point to an MCB
 31731                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31732                                  ; ERROR:    None
 31733                                  ; USES:     Flags
 31734                                  ; -----------------------------------------------------------------------------
 31735                                  
 31736                                  isHideMCB:
 31737                                  	;push	ax
 31738                                  
 31739                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31740                                  	jne	short ihm_x				; then check for HIDDEN
 31741                                  
 31742                                  	;mov	ax,[es:ARENA.NAME]
 31743                                  	;cmp	ax,'HI' ; 4948h
 31744                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31745                                  	jne	short ihm_x
 31746                                  	;mov	ax,[es:ARENA.NAME+2]
 31747                                  	;cmp	ax,'DD' ; 4444h
 31748                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31749                                  	jne	short ihm_x
 31750                                  	;mov	ax,[es:ARENA.NAME+4]
 31751                                  	;cmp	ax,'EN' ; 4E45h
 31752                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31753                                  	jne	short ihm_x
 31754                                  	;mov	ax,[es:ARENA.NAME+6]
 31755                                  	;cmp	ax,'  ' ; 2020h
 31756                                  	cmp	word [es:ARENA.NAME+6],'  '
 31757                                  ihm_x:	
 31758                                  	;pop	ax
 31759                                  	retn
 31760                                  
 31761                                  ; -----------------------------------------------------------------------------
 31762                                  ;*** freeMCB - marks as free the MCB at ES:0
 31763                                  ; -----------------------------------------------------------------------------
 31764                                  ; ENTRY:    ES:0 should point to an MCB
 31765                                  ; EXIT:     None; MCB free'd
 31766                                  ; ERROR:    None
 31767                                  ; USES:     AX
 31768                                  ; -----------------------------------------------------------------------------
 31769                                  
 31770                                  freeMCB:
 31771                                  	mov	word [es:ARENA.OWNER],0
 31772                                  	mov	ax,'  '
 31773                                  	mov	[es:ARENA.NAME+0],ax
 31774                                  	mov	[es:ARENA.NAME+2],ax
 31775                                  	mov	[es:ARENA.NAME+4],ax
 31776                                  	mov	[es:ARENA.NAME+6],ax
 31777                                  	retn
 31778                                  
 31779                                  ; -----------------------------------------------------------------------------
 31780                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31781                                  ; -----------------------------------------------------------------------------
 31782                                  ; ENTRY:  Nothing
 31783                                  ; EXIT:   AX contains 0x9FFF for most systems
 31784                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31785                                  ; USES:   Flags, AX
 31786                                  ; -----------------------------------------------------------------------------
 31787                                  
 31788                                  HeadUmb:
 31789                                  	; 13/05/2019
 31790                                  
 31791                                  	;push	si ; ?
 31792                                  	;push	ds ; ?
 31793                                  	;push	es
 31794                                  	;push	bx ; *
 31795                                  
 31796                                  	; 09/04/2019
 31797                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31798                                  
 31799                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31800                                  	int	21h
 31801                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31802                                  			; Return: ES:BX -> DOS list of lists
 31803                                  	;mov	ax,[es:8Ch]
 31804                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31805                                  	cmp	ax,0FFFFh
 31806                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31807                                  
 31808                                  	;clc				; Else, it isn't.
 31809                                  	;jmp	short xhu_x
 31810                                  xhu_e:	
 31811                                  	;stc
 31812                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31813                                  xhu_x:	
 31814                                  	;pop	bx ; *
 31815                                  	;pop	es	
 31816                                  	;pop	ds ; ?
 31817                                  	;pop	si ; ?
 31818                                  	retn
 31819                                  
 31820                                  ; -----------------------------------------------------------------------------
 31821                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31822                                  ; -----------------------------------------------------------------------------
 31823                                  ; ENTRY:    None
 31824                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31825                                  ; ERROR:    None
 31826                                  ; USES:     AX, BX, fm_umb
 31827                                  ; -----------------------------------------------------------------------------
 31828                                  
 31829                                  linkumb:
 31830                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31831                                  	int	21h			; Current link-state is now in al
 31832                                  
 31833                                  	or	al,al			; BUGBUG: proper check?
 31834                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31835                                  
 31836                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31837                                  	mov	bx,1
 31838                                  	int	21h
 31839                                  lumbX:
 31840                                  	retn
 31841                                  
 31842                                  %endif
 31843                                  
 31844                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31845                                  ; (SYSINIT:2B5Fh)
 31846                                  
 31847                                  ; ----------------------------------------------------------------------
 31848                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31849                                  ; ----------------------------------------------------------------------
 31850                                  ; 09/04/2019 - Retro DOS v4.0
 31851                                  
 31852                                  ;----------------------------------------------------------------------------
 31853                                  ;
 31854                                  ; procedure : InitDevLoad
 31855                                  ;
 31856                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31857                                  ;			 = 1 indicates load in UMB:
 31858                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31859                                  ;		                    = 1 indicates a DOS 5-style load
 31860                                  ;		DevSize  = Size of the device driver file in paras
 31861                                  ;
 31862                                  ;	Output : none
 31863                                  ;
 31864                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31865                                  ;	Also sets up a header for the Device driver entry for mem utility
 31866                                  ;
 31867                                  ;----------------------------------------------------------------------------
 31868                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31869                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31870                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31871                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31872                                  ;----------------------------------------------------------------------------
 31873                                  
 31874                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31875                                  InitDevLoad:
 31876                                  	; 11/12/2022
 31877                                  	; ds = cs
 31878 00002767 803E[731E]00            	cmp	byte [DeviceHi],0
 31879                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31880                                  	;je	short InitForLo		; no, init for lo mem
 31881 0000276C 741F                    	je	short initforlo_x ; 09/04/2019
 31882                                  
 31883                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31884                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31885                                  ;	je	short InitForConv
 31886                                  ;
 31887                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31888                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31889                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31890                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31891                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31892                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31893                                  ;
 31894                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31895                                  ;
 31896                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31897                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31898                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31899                                  ;	pushf
 31900                                  ;	call	UnFreeze		; Then unhide everything frozen
 31901                                  ;	popf
 31902                                  ;
 31903                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31904                                  ;
 31905                                  ;	jmp	short InitForHi
 31906                                  
 31907                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31908                                  	; (SYSINIT:2B67h)
 31909                                  InitForConv:
 31910                                  	; 11/12/2022
 31911                                  	; ds = cs
 31912 0000276E E83700                  	call	SpaceInUMB		; Do we have space left in the
 31913                                  					;  current UMB ?
 31914 00002771 7308                    	jnc	short InitForHi		; yes, we have
 31915 00002773 E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31916 00002776 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31917 00002779 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31918                                  					;  in low memory
 31919                                  InitForHi:
 31920                                  	; 11/12/2022
 31921                                  	; ds = cs
 31922                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31923                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31924                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31925 0000277B A1[691E]                	mov	ax,[DevUMBFree]
 31926 0000277E 8B16[651E]              	mov	dx,[DevUMBAddr]
 31927 00002782 0316[671E]              	add	dx,[DevUMBSize]
 31928 00002786 EB0C                    	jmp	short idl1
 31929                                  
 31930                                  InitForLo:
 31931                                  	; 11/12/2022
 31932                                  	; ds = cs
 31933                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31934 00002788 C606[731E]00            	mov	byte [DeviceHi],0
 31935                                  initforlo_x:
 31936                                  	; 11/12/2022
 31937                                  	; ds = cs
 31938                                  					;  into UMB indicate that
 31939                                  					;  we are loading low
 31940                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31941                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31942 0000278D A1[E003]                	mov	ax,[memhi]
 31943 00002790 8B16[A302]              	mov	dx,[ALLOCLIM]
 31944                                  idl1:
 31945 00002794 E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31946                                  	; 11/12/2022
 31947                                  	; ds = cs
 31948                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31949                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31950                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31951                                  	;mov	[cs:DevEntry+2],ax
 31952 00002797 A3[581E]                	mov	[DevLoadAddr],ax
 31953 0000279A 8916[5A1E]              	mov	[DevLoadEnd],dx
 31954 0000279E C706[5C1E]0000          	mov	word [DevEntry],0
 31955 000027A4 A3[5E1E]                	mov	[DevEntry+2],ax
 31956 000027A7 C3                      	retn
 31957                                  
 31958                                  ;----------------------------------------------------------------------------
 31959                                  ;
 31960                                  ; procedure : SpaceInUMB?
 31961                                  ;
 31962                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31963                                  ;	Output : Carry set if no space in UMB
 31964                                  ;		 Carry clear if Space is available for the device in
 31965                                  ;		   current UMB
 31966                                  ;
 31967                                  ;----------------------------------------------------------------------------
 31968                                  
 31969                                  SpaceInUMB:
 31970                                  	; 11/12/2022
 31971                                  	; ds = cs
 31972                                  	;mov	ax,[cs:DevUMBSize]
 31973                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31974                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31975 000027A8 A1[671E]                	mov	ax,[DevUMBSize]
 31976 000027AB 0306[651E]              	add	ax,[DevUMBAddr]		; End of UMB
 31977 000027AF 2B06[691E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31978                                  	; 11/12/2022
 31979                                  	;or	ax,ax			; Nospace ?
 31980                                  	;jnz	short spcinumb1
 31981                                  	;stc
 31982                                  	;retn
 31983                                  	; 11/12/2022
 31984 000027B3 83F801                  	cmp	ax,1
 31985 000027B6 7205                    	jb	short spcinumb2	; cf=1
 31986                                  spcinumb1:
 31987 000027B8 48                      	dec	ax			; space for sub-arena
 31988                                  	; 11/12/2022
 31989                                  	; ds = cs
 31990 000027B9 3B06[561E]              	cmp	ax,[DevSize]
 31991                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31992                                  spcinumb2:
 31993 000027BD C3                      	retn
 31994                                  
 31995                                  ;----------------------------------------------------------------------------
 31996                                  ;
 31997                                  ; procedure : PrepareMark
 31998                                  ;
 31999                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 32000                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 32001                                  ;
 32002                                  ;----------------------------------------------------------------------------
 32003                                  
 32004                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32005                                  ;
 32006                                  ;PrepareMark:
 32007                                  ;	push	ds
 32008                                  ;	mov	ds,ax
 32009                                  ;	mov	word [ARENA.OWNER],8
 32010                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 32011                                  ;	pop	ds
 32012                                  ;
 32013                                  ;	inc	ax
 32014                                  ;	mov	[cs:DevUMBAddr],ax
 32015                                  ;	mov	[cs:DevUMBFree],ax
 32016                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32017                                  ;	retn
 32018                                  
 32019                                  ;----------------------------------------------------------------------------
 32020                                  ;
 32021                                  ; procedure : GetUMBForDev
 32022                                  ;
 32023                                  ;	Input : DevSize
 32024                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 32025                                  ;		 the device.
 32026                                  ;		 If success carry clear
 32027                                  ;
 32028                                  ;	Allocates the biggest UMB for loading devices and updates
 32029                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32030                                  ;	UMB.
 32031                                  ;
 32032                                  ;	This routine relies on the fact that all of the low memory
 32033                                  ;	is allocated, and any DOS alloc calls should return memory
 32034                                  ;	from the UMB pool.
 32035                                  ;
 32036                                  ;----------------------------------------------------------------------------
 32037                                  
 32038                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32039                                  	; (SYSINIT:2BC6h)
 32040                                  
 32041                                  GetUMBForDev:
 32042                                  	; 11/12/2022
 32043                                  	; ds = cs
 32044 000027BE BBFFFF                  	mov	bx,0FFFFh
 32045 000027C1 B80048                  	mov	ax,4800h
 32046 000027C4 CD21                    	int	21h
 32047                                  		; DOS - 2+ - ALLOCATE MEMORY
 32048                                  		; BX = number of 16-byte paragraphs desired
 32049                                  
 32050 000027C6 09DB                    	or	bx,bx
 32051                                  	;jz	short gufd_err
 32052                                  	; 09/09/2023
 32053 000027C8 742E                    	jz	short gufd_error ; bx = 0
 32054                                  
 32055 000027CA 4B                      	dec	bx
 32056                                  	; 11/12/2022
 32057                                  	; ds = cs
 32058 000027CB 391E[561E]              	cmp	[DevSize],bx
 32059                                  	;cmp	[cs:DevSize],bx
 32060 000027CF 7725                    	ja	short gufd_err
 32061                                  
 32062 000027D1 43                      	inc	bx
 32063                                  
 32064 000027D2 B80048                  	mov	ax,4800h
 32065 000027D5 CD21                    	int	21h
 32066 000027D7 721D                    	jc	short gufd_err
 32067                                  
 32068                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32069                                  	;dec	ax
 32070                                  	;call	PrepareMark
 32071                                  	;
 32072                                  PrepareMark:
 32073 000027D9 1E                      	push	ds
 32074 000027DA 48                      	dec	ax
 32075 000027DB 8ED8                    	mov	ds,ax
 32076 000027DD C70601000800            	mov	word [ARENA.OWNER],8
 32077 000027E3 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32078 000027E9 40                      	inc	ax
 32079 000027EA 1F                      	pop	ds
 32080                                  	; 11/12/2022
 32081                                  	; ds = cs
 32082                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32083                                  	;mov	[cs:DevUMBAddr],ax
 32084                                  	;mov	[cs:DevUMBFree],ax
 32085                                  gufd_x:		; 09/09/2023
 32086 000027EB 891E[671E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32087 000027EF A3[651E]                	mov	[DevUMBAddr],ax
 32088 000027F2 A3[691E]                	mov	[DevUMBFree],ax
 32089                                  	;
 32090                                  	; 11/12/2022
 32091                                  	; cf=0
 32092                                  	;clc				; mark no error
 32093 000027F5 C3                      	retn
 32094                                  
 32095                                  	; 09/09/2023
 32096                                  %if 1
 32097                                  gufd_err:
 32098 000027F6 31DB                    	xor	bx,bx ; 0
 32099                                  gufd_error:
 32100 000027F8 31C0                    	xor	ax,ax ; 0
 32101 000027FA F9                      	stc	; cf=1
 32102 000027FB EBEE                    	jmp	short gufd_x	
 32103                                  %endif
 32104                                  
 32105                                  ; 09/09/2023
 32106                                  %if 0
 32107                                  gufd_err:
 32108                                  	xor	ax,ax ; 0
 32109                                  	; 11/12/2022
 32110                                  	; ds = cs
 32111                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32112                                  	;mov	[cs:DevUMBAddr],ax
 32113                                  	;mov	[cs:DevUMBFree],ax
 32114                                  	mov	[DevUMBSize],ax		; erase the previous values
 32115                                  	mov	[DevUMBAddr],ax
 32116                                  	mov	[DevUMBFree],ax
 32117                                  	stc
 32118                                  	retn
 32119                                  %endif
 32120                                  
 32121                                  ;----------------------------------------------------------------------------
 32122                                  ;
 32123                                  ; procedure : DevSetMark
 32124                                  ;
 32125                                  ;	Input : AX - Free segment were device is going to be loaded
 32126                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32127                                  ;
 32128                                  ;	Creates a sub-arena for the device driver
 32129                                  ;	puts 'D' marker in the sub-arena
 32130                                  ;	Put the owner of the sub-arena as (AX+1)
 32131                                  ;	Copies the file name into sub-arena name field
 32132                                  ;
 32133                                  ;	Size field of the sub-arena will be set only at succesful
 32134                                  ;	completion of Device load.
 32135                                  ;
 32136                                  ;----------------------------------------------------------------------------
 32137                                  
 32138                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32139                                  	; (SYSINIT:2C13h)
 32140                                  
 32141                                  DevSetMark:
 32142 000027FD 06                      	push	es
 32143 000027FE 57                      	push	di
 32144 000027FF 1E                      	push	ds
 32145 00002800 56                      	push	si
 32146 00002801 8EC0                    	mov	es,ax
 32147 00002803 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32148 00002809 40                      	inc	ax
 32149 0000280A 26A30100                	mov	[es:devmark.seg],ax
 32150                                  
 32151                                  ;-------------- Copy file name
 32152                                  
 32153 0000280E 50                      	push	ax			; save load addr
 32154                                  
 32155                                  	; 09/09/2023
 32156                                  	; ds = cs
 32157                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 32158 0000280F C536[F803]              	lds	si,[bpb_addr]
 32159                                  
 32160 00002813 89F7                    	mov	di,si
 32161 00002815 FC                      	cld
 32162                                  dsm_again:
 32163 00002816 AC                      	lodsb
 32164 00002817 3C3A                    	cmp	al,':'
 32165 00002819 7504                    	jne	short isit_slash
 32166 0000281B 89F7                    	mov	di,si
 32167 0000281D EBF7                    	jmp	short dsm_again
 32168                                  isit_slash:
 32169 0000281F 3C5C                    	cmp	al, '\'
 32170 00002821 7504                    	jne	short isit_null
 32171 00002823 89F7                    	mov	di,si
 32172 00002825 EBEF                    	jmp	short dsm_again
 32173                                  isit_null:
 32174 00002827 08C0                    	or	al,al
 32175 00002829 75EB                    	jnz	short dsm_again
 32176 0000282B 89FE                    	mov	si,di
 32177                                  
 32178 0000282D BF0800                  	mov	di,devmark.filename ; 8
 32179 00002830 B90800                  	mov	cx,8			; maximum 8 characters
 32180                                  dsm_next_char:
 32181 00002833 AC                      	lodsb
 32182 00002834 08C0                    	or	al, al
 32183 00002836 7407                    	jz	short blankout
 32184 00002838 3C2E                    	cmp	al, '.'
 32185 0000283A 7403                    	je	short blankout
 32186 0000283C AA                      	stosb
 32187 0000283D E2F4                    	loop	dsm_next_char
 32188                                  blankout:
 32189 0000283F E304                    	jcxz	dsm_exit
 32190 00002841 B020                    	mov	al, ' '
 32191 00002843 F3AA                    	rep	stosb			; blank out the rest
 32192                                  dsm_exit:
 32193 00002845 58                      	pop	ax			; restore load addr
 32194 00002846 5E                      	pop	si
 32195 00002847 1F                      	pop	ds
 32196 00002848 5F                      	pop	di
 32197 00002849 07                      	pop	es
 32198 0000284A C3                      	retn
 32199                                  
 32200                                  ;----------------------------------------------------------------------------
 32201                                  ;
 32202                                  ; procedure : SizeDevice
 32203                                  ;
 32204                                  ;	Input : ES:SI - points to device file to be sized
 32205                                  ;
 32206                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32207                                  ;
 32208                                  ;	Calculates the size of the device file in paras and stores it
 32209                                  ;	in DevSize
 32210                                  ;
 32211                                  ;----------------------------------------------------------------------------
 32212                                  
 32213                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32214                                  SizeDevice:
 32215                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32216                                  	; 11/12/2022 ; *
 32217 0000284B 1E                      	push	ds ; *
 32218 0000284C 06                      	push	es
 32219 0000284D 1F                      	pop	ds
 32220 0000284E 89F2                    	mov	dx,si			; ds:dx -> file name
 32221 00002850 B8003D                  	mov	ax,3D00h		; open
 32222 00002853 CD21                    	int	21h
 32223 00002855 7243                    	jc	short sd_err		; open failed
 32224                                  
 32225 00002857 89C3                    	mov	bx,ax			; BX - file handle
 32226 00002859 B80242                  	mov	ax,4202h		; seek
 32227 0000285C 31C9                    	xor	cx,cx
 32228 0000285E 89CA                    	mov	dx,cx			; to end of file
 32229 00002860 CD21                    	int	21h
 32230 00002862 722F                    	jc	short sd_close		; did seek fail (impossible)
 32231 00002864 83C00F                  	add	ax,15			; para convert
 32232 00002867 83D200                  	adc	dx,0
 32233 0000286A F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 32234 0000286E 7409                    	jz	short szdev1		; no
 32235 00002870 2EC706[561E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32236                                  					; assuming that we fail later
 32237 00002877 EB1A                    	jmp	short sd_close
 32238                                  szdev1:
 32239 00002879 B104                    	mov	cl,4			; convert it to paras
 32240 0000287B D3E8                    	shr	ax,cl
 32241 0000287D B10C                    	mov	cl,12
 32242 0000287F D3E2                    	shl	dx,cl
 32243 00002881 09D0                    	or	ax,dx
 32244                                  	;
 32245                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32246 00002883 2E3B06[741E]            	cmp     ax,[cs:DevSizeOption]
 32247                                  	;ja	short szdev2
 32248                                  	; 14/08/2023
 32249 00002888 7305                    	jnb	short szdev2
 32250                                  
 32251 0000288A 2EA1[741E]              	mov     ax,[cs:DevSizeOption]
 32252                                  	; 12/12/2022
 32253 0000288E F8                      	clc
 32254                                  szdev2:
 32255 0000288F 2EA3[561E]              	mov	[cs:DevSize],ax		; save file size
 32256                                  
 32257                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32258                                  	; 12/12/2022
 32259                                  	; cf=0
 32260                                  	;clc
 32261                                  sd_close:
 32262 00002893 9C                      	pushf				; let close not spoil our
 32263                                  					;  carry flag
 32264 00002894 B8003E                  	mov	ax,3E00h		; close
 32265 00002897 CD21                    	int	21h			; we are not checking for err
 32266 00002899 9D                      	popf
 32267                                  sd_err:
 32268                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32269                                  	; 11/12/2022 ; *
 32270 0000289A 1F                      	pop     ds ; *
 32271 0000289B C3                      	retn
 32272                                  
 32273                                  ;----------------------------------------------------------------------------
 32274                                  ;
 32275                                  ; procedure : ExecDev
 32276                                  ;
 32277                                  ;	Input : ds:dx -> device to be executed
 32278                                  ;		DevLoadAddr - contains where device has to be loaded
 32279                                  ;
 32280                                  ;	Output : Carry if error
 32281                                  ;		 Carry clear if no error
 32282                                  ;
 32283                                  ;	Loads a device driver using the 4b03h function call
 32284                                  ;
 32285                                  ;----------------------------------------------------------------------------
 32286                                  
 32287                                  	; 01/11/2022
 32288                                  ExecDev:
 32289 0000289C 2E8B1E[581E]            	mov	bx,[cs:DevLoadAddr]
 32290 000028A1 2E891E[6F1E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32291                                  					;  block for exec with
 32292                                  					;  Load address
 32293 000028A6 2E891E[711E]            	mov	[cs:DevExecReloc],bx
 32294 000028AB 8CCB                    	mov	bx,cs
 32295 000028AD 8EC3                    	mov	es,bx
 32296 000028AF BB[6F1E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 32297 000028B2 B003                    	mov	al,3	; (load program only)
 32298 000028B4 B44B                    	mov	ah,EXEC ; 4Bh
 32299 000028B6 CD21                    	int	21h			;load in the device driver
 32300                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32301                                  		; DS:DX -> ASCIZ filename
 32302                                  		; ES:BX -> parameter block
 32303                                  		; AL = subfunction 
 32304 000028B8 C3                      	retn
 32305                                  
 32306                                  ;----------------------------------------------------------------------------
 32307                                  ;
 32308                                  ; procedure : RetFromUM
 32309                                  ;
 32310                                  ;	Input : None
 32311                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32312                                  ;		 ConvLoad clear if did.
 32313                                  ;
 32314                                  ;	Prepares memory for more devices after returning from loading one
 32315                                  ;	using the DOS 6 options (/L:... etc).
 32316                                  ;
 32317                                  ;----------------------------------------------------------------------------
 32318                                  
 32319                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32320                                  ;RetFromUM:
 32321                                  ;	pushf
 32322                                  ;	mov	byte [cs:ConvLoad],1
 32323                                  ;	call	UnHideUMBs
 32324                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 32325                                  ;	mov	byte [cs:ConvLoad],0
 32326                                  ;rfUM1:	
 32327                                  ;	popf
 32328                                  ;	retn
 32329                                  
 32330                                  ;----------------------------------------------------------------------------
 32331                                  ;
 32332                                  ; procedure : RemoveNull
 32333                                  ;
 32334                                  ;	Input : ES:SI points to a null terminated string
 32335                                  ;
 32336                                  ;	Output : none
 32337                                  ;
 32338                                  ;	Replaces the null at the end of a string with blank
 32339                                  ;
 32340                                  ;----------------------------------------------------------------------------
 32341                                  
 32342                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32343                                  	; (SYSINIT:2CCEh)
 32344                                  RemoveNull:
 32345                                  	; 11/12/2022
 32346                                  	; ds = cs
 32347                                  rn_next:
 32348 000028B9 268A1C                  	mov	bl,[es:si]
 32349 000028BC 08DB                    	or	bl,bl			; null ?
 32350 000028BE 7403                    	jz	short rn_gotnull
 32351 000028C0 46                      	inc	si			; advance the pointer
 32352 000028C1 EBF6                    	jmp	short rn_next
 32353                                  rn_gotnull:
 32354                                  	; 11/12/2022
 32355 000028C3 8A1E[881E]              	mov	bl,[DevSavedDelim]
 32356                                  	;mov	bl,[cs:DevSavedDelim]
 32357 000028C7 26881C                  	mov	[es:si],bl		; replace null with blank
 32358                                  	; 02/11/2022
 32359                                  ; 11/12/2022
 32360                                  rba_ok:		; 10/04/2019
 32361 000028CA C3                      	retn
 32362                                  
 32363                                  ;----------------------------------------------------------------------------
 32364                                  ;
 32365                                  ; procedure : RoundBreakAddr
 32366                                  ;
 32367                                  ;	Input : DevBrkAddr
 32368                                  ;	Output : DevBrkAddr
 32369                                  ;
 32370                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32371                                  ;
 32372                                  ;----------------------------------------------------------------------------
 32373                                  
 32374                                  RoundBreakAddr:
 32375 000028CB 2EA1[601E]              	mov	ax,[cs:DevBrkAddr]
 32376 000028CF E8C8E7                  	call	ParaRound
 32377 000028D2 2E0106[621E]            	add	[cs:DevBrkAddr+2],ax
 32378 000028D7 2EC706[601E]0000        	mov	word [cs:DevBrkAddr],0
 32379 000028DE 2EA1[5A1E]              	mov	ax,[cs:DevLoadEnd]
 32380 000028E2 2E3906[621E]            	cmp	[cs:DevBrkAddr+2],ax
 32381 000028E7 76E1                    	jbe	short rba_ok
 32382 000028E9 E95E07                  	jmp	mem_err
 32383                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32384                                  	; 11/12/2022
 32385                                  ;rba_ok:
 32386                                  ;	retn
 32387                                  
 32388                                  ;----------------------------------------------------------------------------
 32389                                  ;
 32390                                  ; procedure : DevSetBreak
 32391                                  ;
 32392                                  ;	Input : DevBrkAddr
 32393                                  ;	Output : Carry set if Device returned Init failed
 32394                                  ;		 Else carry clear
 32395                                  ;
 32396                                  ;----------------------------------------------------------------------------
 32397                                  
 32398                                  DevSetBreak:
 32399 000028EC 50                      	push	ax
 32400                                  
 32401 000028ED 2EA1[621E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32402 000028F1 2E803E[0314]00          	cmp	byte [cs:multdeviceflag],0
 32403 000028F7 750F                    	jne	short set_break_continue ;do not check it.
 32404 000028F9 2E3B06[581E]            	cmp	ax,[cs:DevLoadAddr]
 32405 000028FE 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32406                                  
 32407                                  	;cmp	word [cs:DevBrkAddr],0
 32408                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32409                                  	; 12/12/2022
 32410 00002900 2E833E[601E]01          	cmp	word [cs:DevBrkAddr],1
 32411 00002906 7204                    	jb	short break_failed
 32412                                  
 32413                                  set_break_continue:
 32414 00002908 E8C0FF                  	call	RoundBreakAddr
 32415                                  	; 12/12/2022
 32416 0000290B F8                      	clc
 32417                                  break_failed:
 32418 0000290C 58                      	pop	ax
 32419                                  	;clc
 32420 0000290D C3                      	retn
 32421                                  
 32422                                  	; 12/12/2022
 32423                                  ;break_failed:
 32424                                  	;pop	ax
 32425                                  	;stc
 32426                                  	;retn
 32427                                  
 32428                                  ;----------------------------------------------------------------------------
 32429                                  ;
 32430                                  ; procedure : DevBreak
 32431                                  ;
 32432                                  ;	Input : DevLoadAddr & DevBrkAddr
 32433                                  ;	Output : none
 32434                                  ;
 32435                                  ;	Marks a succesful install of a device driver
 32436                                  ;	Sets device size field in sub-arena &
 32437                                  ;	Updates Free ptr in UMB or adjusts memhi
 32438                                  ;
 32439                                  ;----------------------------------------------------------------------------
 32440                                  
 32441                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32442                                  DevBreak:
 32443                                  	;push	ds ; 11/12/2022
 32444                                  
 32445                                  	; 11/12/2022
 32446 0000290E 0E                      	push	cs
 32447 0000290F 1F                      	pop	ds
 32448                                  	;mov	ax,[cs:DevLoadAddr]
 32449                                  	;mov	bx,[cs:DevBrkAddr+2]
 32450 00002910 A1[581E]                	mov	ax,[DevLoadAddr]
 32451 00002913 8B1E[621E]              	mov	bx,[DevBrkAddr+2]
 32452                                  	; 11/12/2022
 32453 00002917 1E                      	push	ds
 32454                                  
 32455 00002918 48                      	dec	ax			; seg of sub-arena
 32456 00002919 8ED8                    	mov	ds,ax
 32457 0000291B 40                      	inc	ax			; Back to Device segment
 32458 0000291C 29D8                    	sub	ax,bx
 32459 0000291E F7D8                    	neg	ax			; size of device in paras
 32460 00002920 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32461                                  	
 32462                                  	; 11/12/2022
 32463 00002923 1F                      	pop	ds
 32464                                  	; ds = cs
 32465                                   	
 32466 00002924 803E[731E]00            	cmp	byte [DeviceHi],0
 32467                                  	;cmp	byte [cs:DeviceHi],0
 32468 00002929 7405                    	je	short db_lo
 32469                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32470                                  	;jmp	short db_exit
 32471                                  	; 11/12/2022
 32472 0000292B 891E[691E]              	mov	[DevUMBFree],bx
 32473 0000292F C3                      	retn	
 32474                                  db_lo:
 32475                                  	; 11/12/2022
 32476                                  	; ds = cs
 32477                                  	;mov	[cs:memhi],bx
 32478                                  	;mov	word [cs:memlo],0
 32479 00002930 891E[E003]              	mov	[memhi],bx
 32480 00002934 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 32481                                  db_exit:
 32482                                  	;pop	ds ; 11/12/2022
 32483                                  	; 17/09/2023
 32484                                  ;sd_ret:	; 09/09/2023
 32485 0000293A C3                      	retn
 32486                                  
 32487                                  ; 10/04/2019 - Retro DOS v4.0
 32488                                  
 32489                                  ;----------------------------------------------------------------------------
 32490                                  ;
 32491                                  ; procedure : ParseSize
 32492                                  ;
 32493                                  ;	Parses the command line for SIZE= command
 32494                                  ;
 32495                                  ;	ES:SI = command line to parsed
 32496                                  ;
 32497                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32498                                  ;	updates the DevSizeOption variable with value supplied
 32499                                  ;	in SIZE=option
 32500                                  ;	Returns carry if the SIZE option was invalid
 32501                                  ;
 32502                                  ;----------------------------------------------------------------------------
 32503                                  
 32504                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32505                                  	; (SYSINIT:2D5Ah)
 32506                                  
 32507                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 32508                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 32509                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 32510                                  ParseSize:
 32511                                  	;push	bx
 32512                                  	;mov	bx,si
 32513                                  
 32514                                  	; 09/09/2023
 32515 0000293B 56                      	push	si ; * ; mov bx,si
 32516                                  
 32517                                  	; 11/12/2022
 32518                                  	; ds = cs
 32519                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32520                                  	;mov	[cs:DevCmdLine],si
 32521                                  	;mov	[cs:DevCmdLine+2],es
 32522 0000293C C706[741E]0000          	mov	word [DevSizeOption],0 ; init the value
 32523 00002942 8936[841E]              	mov	[DevCmdLine],si
 32524 00002946 8C06[861E]              	mov	[DevCmdLine+2],es	
 32525 0000294A E82400                  	call	SkipDelim
 32526 0000294D 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32527 00002952 7528                    	jne	short ps_no_size
 32528 00002954 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32529 0000295A 7520                    	jne	short ps_no_size
 32530 0000295C 268A4404                	mov	al,[es:si+4]
 32531 00002960 E85306                  	call	delim
 32532                                  	;jne	short ps_no_size
 32533                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 32534 00002963 7518                    	jne	short ps_no_size_2 ; cf=0 here
 32535 00002965 83C605                  	add	si,5
 32536 00002968 E81400                  	call	GetHexNum
 32537 0000296B 7210                    	jc	short ps_err
 32538                                  	; 11/12/2022
 32539                                  	; ds = cs
 32540                                  	;mov	[cs:DevSizeOption],ax
 32541 0000296D A3[741E]                	mov	[DevSizeOption],ax
 32542                                  	
 32543                                  	; 09/09/2023
 32544 00002970 58                      	pop	ax  ; * (discard previous si value on top of stack)
 32545                                  
 32546                                  ;	call	SkipDelim ; **
 32547                                  ;	
 32548                                  ;	; 22/07/2023
 32549                                  ;;ps_no_size_2:
 32550                                  ;	; cf = 0
 32551                                  ;	retn
 32552                                  
 32553                                  	; 09/09/2023
 32554                                  	;jmp	short SkipDelim
 32555                                  
 32556                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32557                                  %if 1
 32558                                  	; 01/11/2022
 32559                                  SkipDelim:
 32560                                  sd_next_char:
 32561 00002971 268A04                  	mov	al,[es:si]
 32562 00002974 E83F06                  	call	delim
 32563 00002977 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 32564 00002979 46                      	inc	si
 32565 0000297A EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32566                                  	; 11/12/2022
 32567                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32568                                  ;sd_ret:
 32569                                  	;retn
 32570                                  %endif
 32571                                  
 32572                                  	;;;call	SkipDelim ; **
 32573                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32574                                  	;mov	bx,si
 32575                                  ps_no_size:
 32576                                  	;mov	si,bx
 32577                                  	;pop	bx
 32578 0000297C F8                      	clc	; cf=0
 32579                                  	;retn
 32580                                  	; 11/12/2022
 32581                                  ps_err:		; cf=1
 32582                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 32583                                  	; 09/09/2023
 32584 0000297D 5E                      	pop	si ; * ; mov si,bx
 32585                                  	; 17/09/2023
 32586                                  sd_ret:	; cf=?
 32587 0000297E C3                      	retn
 32588                                  
 32589                                  ;ps_err:
 32590                                  	; 02/11/2022
 32591                                  	;pop	bx
 32592                                  	;stc
 32593                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32594                                  	; 11/12/2022
 32595                                  	; cf=1
 32596                                  	;stc
 32597                                  	; 11/12/2022
 32598                                  ;sd_ret: 
 32599                                  	; 22/07/2023
 32600                                  	; 12/04/2019
 32601                                  	;retn
 32602                                  
 32603                                  ; 12/04/2019 - Retro DOS v4.0
 32604                                  
 32605                                  ;----------------------------------------------------------------------------
 32606                                  ;
 32607                                  ; procedure : SkipDelim
 32608                                  ;
 32609                                  ;	Skips delimiters in the string pointed to by ES:SI
 32610                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32611                                  ;
 32612                                  ;----------------------------------------------------------------------------
 32613                                  
 32614                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32615                                  %if 0
 32616                                  	; 01/11/2022
 32617                                  SkipDelim:
 32618                                  sd_next_char:
 32619                                  	mov	al,[es:si]
 32620                                  	call	delim
 32621                                  	jnz	short sd_ret
 32622                                  	inc	si
 32623                                  	jmp	short sd_next_char ; 01/11/2022
 32624                                  	; 11/12/2022
 32625                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32626                                  ;sd_ret:
 32627                                  	;retn
 32628                                  %endif
 32629                                  
 32630                                  ;----------------------------------------------------------------------------
 32631                                  ;
 32632                                  ; procedure : GetHexNum
 32633                                  ;
 32634                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32635                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32636                                  ;
 32637                                  ;	Returns in AX the number number of paras equivalent to the
 32638                                  ;	hex number of bytes specified by the hexadecimal string.
 32639                                  ;
 32640                                  ;	Returns carry in case it encountered a non-hex character or
 32641                                  ;	if it encountered crlf
 32642                                  ;
 32643                                  ;----------------------------------------------------------------------------
 32644                                  
 32645                                  ; 13/05/2019
 32646                                  
 32647                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32648                                  	; (SYSINIT:2DA5h)
 32649                                  GetHexNum:
 32650 0000297F 31C0                    	xor	ax,ax
 32651 00002981 31D2                    	xor	dx,dx
 32652                                  ghn_next:
 32653 00002983 268A1C                  	mov	bl,[es:si]
 32654 00002986 80FB0D                  	cmp	bl,cr  ; 0Dh
 32655 00002989 7436                    	je	short ghn_err
 32656 0000298B 80FB0A                  	cmp	bl,lf  ; 0Ah
 32657 0000298E 7431                    	je	short ghn_err
 32658 00002990 50                      	push	ax
 32659 00002991 88D8                    	mov	al,bl
 32660 00002993 E82006                  	call	delim
 32661 00002996 58                      	pop	ax
 32662                                  	; 04/01/2023
 32663 00002997 B90400                  	mov	cx,4
 32664 0000299A 7410                    	jz	short ghn_into_paras
 32665 0000299C E82400                  	call	GetNibble
 32666                                  	;jc	short ghn_err
 32667                                  	; 11/12/2022
 32668 0000299F 7221                    	jc	short ghn_ret ; cf=1
 32669                                  	; 04/01/2023
 32670                                  	;mov	cx,4
 32671                                  ghn_shift1:
 32672 000029A1 D1E0                    	shl	ax,1
 32673 000029A3 D1D2                    	rcl	dx,1
 32674 000029A5 E2FA                    	loop	ghn_shift1
 32675 000029A7 08D8                    	or	al,bl
 32676 000029A9 46                      	inc	si
 32677 000029AA EBD7                    	jmp	short ghn_next
 32678                                  ghn_into_paras:
 32679 000029AC 83C00F                  	add	ax,15
 32680 000029AF 83D200                  	adc	dx,0
 32681 000029B2 F7C2F0FF                	test	dx,0FFF0h
 32682 000029B6 7509                    	jnz	short ghn_err
 32683                                  	; 04/01/2023
 32684                                  	;mov	cx,4
 32685                                  ghn_shift2:
 32686 000029B8 F8                      	clc
 32687 000029B9 D1DA                    	rcr	dx,1
 32688 000029BB D1D8                    	rcr	ax,1
 32689 000029BD E2F9                    	loop	ghn_shift2
 32690 000029BF F8                      	clc
 32691 000029C0 C3                      	retn
 32692                                  	; 11/12/2022
 32693                                  ghn_err:
 32694                                  gnib_err:
 32695 000029C1 F9                      	stc
 32696                                  ghn_ret:
 32697                                  gnib_ret:
 32698 000029C2 C3                      	retn
 32699                                  
 32700                                  ;----------------------------------------------------------------------------
 32701                                  ;
 32702                                  ; procedure : GetNibble
 32703                                  ;
 32704                                  ;	Convert one nibble (hex digit) in BL into binary
 32705                                  ;
 32706                                  ;	Retruns binary value in BL
 32707                                  ;
 32708                                  ;	Returns carry if BL contains non-hex digit
 32709                                  ;
 32710                                  ;----------------------------------------------------------------------------
 32711                                  
 32712                                  GetNibble:
 32713 000029C3 80FB30                  	cmp	bl,'0'
 32714                                  	;jb	short gnib_err
 32715                                  	; 11/12/2022
 32716 000029C6 72FA                    	jb	short gnib_ret ; cf=1
 32717 000029C8 80FB39                  	cmp	bl,'9'
 32718 000029CB 7704                    	ja	short is_it_hex
 32719 000029CD 80EB30                  	sub	bl,'0'		; clc
 32720 000029D0 C3                      	retn
 32721                                  is_it_hex:
 32722 000029D1 80FB41                  	cmp	bl,'A'
 32723                                  	;jb	short gnib_err
 32724                                  	; 11/12/2022
 32725 000029D4 72EC                    	jb	short gnib_ret ; cf=1
 32726 000029D6 80FB46                  	cmp	bl,'F'
 32727 000029D9 77E6                    	ja	short gnib_err ; 11/12/2022
 32728 000029DB 80EB37                  	sub	bl,'A'- 10	; clc
 32729 000029DE C3                      	retn
 32730                                  
 32731                                  	; 11/12/2022
 32732                                  ;gnib_err:
 32733                                  ;	stc
 32734                                  ;gnib_ret:
 32735                                  ;	retn
 32736                                  
 32737                                  ;============================================================================
 32738                                  
 32739                                  ; 12/04/2019 - Retro DOS v4.0
 32740                                  
 32741                                  ; umb.inc (MSDOS 6.0, 1991)
 32742                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32743                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32744                                  
 32745                                  XMM_REQUEST_UMB	equ 10h
 32746                                  XMM_RELEASE_UMB	equ 11h
 32747                                  
 32748                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32749                                  
 32750                                  ;---------------------------------------------------------------------------
 32751                                  ;
 32752                                  ; Procedure Name	: umb_insert
 32753                                  ;
 32754                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32755                                  ;			: BX = seg address of UMB to be linked in
 32756                                  ;			: DX = size of UMB to be linked in paras
 32757                                  ;			; DS = data
 32758                                  ;
 32759                                  ; Outputs		: links the UMB into the arena chain
 32760                                  ;
 32761                                  ; Uses			: AX, CX, ES, DX, BX
 32762                                  ;
 32763                                  ;---------------------------------------------------------------------------
 32764                                  
 32765                                  umb_insert:
 32766 000029DF 1E                      	push	ds
 32767                                  
 32768                                  	; 31/12/2022
 32769                                  	; ds = cs
 32770                                  
 32771                                  	;mov	ds,[cs:DevDOSData]
 32772 000029E0 8E1E[821E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32773                                  	;mov	ds,[8Ch]
 32774 000029E4 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32775 000029E8 8CD8                    	mov	ax,ds
 32776 000029EA 8EC0                    	mov	es,ax
 32777                                  ui_next:
 32778 000029EC 39D8                    	cmp	ax,bx			; Q: is current block above
 32779                                  					;    new block
 32780 000029EE 770F                    	ja	short ui_insert		; Y: insert it
 32781                                  					; Q: is current block the
 32782                                  					;    last
 32783 000029F0 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32784 000029F6 745C                    	je	short ui_append		; Y: append new block to chain
 32785                                  					; N: get next block
 32786 000029F8 8ED8                    	mov	ds,ax			; M005
 32787                                  	;call	get_next		; ax = es = next block
 32788 000029FA E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32789 000029FD EBED                    	jmp	short ui_next
 32790                                  
 32791                                  ui_insert:
 32792 000029FF 8CD9                    	mov	cx,ds			; ds = previous arena
 32793 00002A01 41                      	inc	cx			; top of previous block
 32794                                  
 32795 00002A02 29D9                    	sub	cx,bx
 32796 00002A04 F7D9                    	neg	cx			; cx = size of used block
 32797                                  	;mov	byte [0],'M'
 32798 00002A06 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32799                                  	;mov	word [1],8
 32800 00002A0B C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32801                                  	;mov	[3],cx
 32802 00002A11 890E0300                	mov	[ARENA.SIZE],cx	
 32803                                  	;mov	word [8],4353h ; 'SC'
 32804 00002A15 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32805                                  
 32806                                  ; prepare the arena at start of new block
 32807                                  
 32808 00002A1B 8EC3                    	mov	es,bx
 32809 00002A1D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32810 00002A23 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32811                                  					; mark as free
 32812 00002A2A 83EA02                  	sub	dx,2			; make room for arena at
 32813                                  					; start & end of new block
 32814 00002A2D 2689160300              	mov	[es:ARENA.SIZE],dx
 32815                                  
 32816                                  ; prepare arena at end of new block
 32817                                  	
 32818 00002A32 01D3                    	add	bx,dx
 32819 00002A34 43                      	inc	bx
 32820 00002A35 8EC3                    	mov	es,bx			; es=arena at top of new block
 32821 00002A37 43                      	inc	bx			; bx=top of new block
 32822                                  
 32823                                  					; ax contains arena just above
 32824                                  					; this block
 32825 00002A38 29D8                    	sub	ax,bx			; ax = size of used block
 32826                                  	
 32827 00002A3A 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32828 00002A40 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32829 00002A47 26A30300                	mov	[es:ARENA.SIZE],ax	
 32830 00002A4B 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32831                                  
 32832 00002A52 EB47                    	jmp	short ui_done
 32833                                  
 32834                                  ui_append:
 32835                                  					; es = arena of last block	
 32836 00002A54 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32837 00002A59 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32838                                  					; going to rsrv on top of this 
 32839                                  					; block for the next arena.
 32840                                  	; 13/05/2019
 32841 00002A5F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32842                                  
 32843 00002A65 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32844 00002A67 40                      	inc	ax
 32845 00002A68 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32846                                  					;    seg. address of new block
 32847 00002A6A F7D8                    	neg	ax
 32848                                  
 32849 00002A6C 8EC1                    	mov	es,cx			; ds = arena of unused block
 32850                                  
 32851 00002A6E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32852 00002A74 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32853 00002A7B 26A30300                	mov	[es:ARENA.SIZE],ax	
 32854 00002A7F 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32855                                  
 32856                                  ; prepare the arena at start of new block
 32857 00002A86 8EC3                    	mov	es,bx
 32858 00002A88 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32859 00002A8E 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32860                                  					; mark as free
 32861 00002A95 4A                      	dec	dx			; make room for arena
 32862 00002A96 2689160300              	mov	[es:ARENA.SIZE],dx	
 32863                                  ui_done:
 32864                                  uc_done: ; 31/12/2022 ; *!
 32865 00002A9B 1F                      	pop	ds
 32866                                  	; ds = cs ; 31/12/2022
 32867                                  ;uc_done:	; 18/12/2022
 32868                                  au_exit:	; 09/09/2023
 32869 00002A9C C3                      	retn
 32870                                  
 32871                                  ;----------------------------------------------------------------------------
 32872                                  ;
 32873                                  ; procedure : AllocUMB
 32874                                  ;
 32875                                  ;	Allocate all UMBs and link it to DOS arena chain
 32876                                  ;
 32877                                  ;----------------------------------------------------------------------------
 32878                                  
 32879                                  AllocUMB:
 32880                                  	; 31/12/2022
 32881                                  	; ds = cs
 32882 00002A9D E84700                  	call	InitAllocUMB		; link in the first UMB
 32883 00002AA0 72FA                    	jc	short au_exit		; quit on error
 32884                                  au_next:
 32885 00002AA2 E87000                  	call	umb_allocate		; allocate
 32886 00002AA5 7205                    	jc	short au_coalesce
 32887 00002AA7 E835FF                  	call	umb_insert		; & insert till no UMBs
 32888 00002AAA EBF6                    	jmp	short au_next
 32889                                  au_coalesce:
 32890                                  	; 09/09/2023
 32891                                  ;	call	umb_coalesce		; coalesce all UMBs
 32892                                  ;au_exit:
 32893                                  ;	; 31/12/2022
 32894                                  ;	; ds = cs
 32895                                  ;	retn
 32896                                  
 32897                                  	; 09/09/2023
 32898                                  	;jmp	short umb_coalesce
 32899                                  
 32900                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32901                                  
 32902                                  ;----------------------------------------------------------------------------
 32903                                  ;
 32904                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32905                                  ;
 32906                                  ;	Coalesce adds the block following the argument to the argument block,
 32907                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32908                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32909                                  ;	preceeding allocated block.
 32910                                  ;
 32911                                  ;	EXIT	'C' clear if OK
 32912                                  ;		  (ds) unchanged, this block updated
 32913                                  ;		  (ax) = address of next block, IFF not at end
 32914                                  ;		'C' set if arena trashed
 32915                                  ;	USES	cx, di, ds, es
 32916                                  ;
 32917                                  ;----------------------------------------------------------------------------
 32918                                  
 32919                                  umb_coalesce:
 32920                                  	; 31/12/2022
 32921                                  	; ds = cs
 32922 00002AAC 1E                      	push	ds ; *!
 32923                                  
 32924 00002AAD 31FF                    	xor	di, di
 32925                                  
 32926                                  	;mov	es,[cs:DevDOSData]
 32927                                  	; 31/12/2022
 32928 00002AAF 8E06[821E]              	mov	es,[DevDOSData]
 32929 00002AB3 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32930                                  uc_nextfree:
 32931 00002AB8 8CC0                    	mov	ax,es
 32932 00002ABA 8ED8                    	mov	ds,ax
 32933                                  	;cmp	[es:1],di
 32934 00002ABC 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32935 00002AC1 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32936                                  					; N: get next arena
 32937 00002AC3 E86B00                  	call	get_next		; es, ax = next arena
 32938 00002AC6 72D3                    	jc	short uc_done	; *!
 32939 00002AC8 EBEE                    	jmp	short uc_nextfree
 32940                                  uc_again:
 32941 00002ACA E86400                  	call	get_next		; ES, AX <- next block
 32942 00002ACD 72CC                    	jc	short uc_done	; *!
 32943                                  uc_check:
 32944 00002ACF 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32945 00002AD4 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32946                                  					; Y: coalesce
 32947 00002AD6 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32948 00002ADB 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32949                                  	;add	[3],cx
 32950 00002ADC 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32951 00002AE0 268A0D                  	mov     cl,[es:di]              ; move up signature
 32952 00002AE3 880D                    	mov     [di],cl
 32953 00002AE5 EBE3                    	jmp     short uc_again		; try again
 32954                                  
 32955                                  	; 18/12/2022
 32956                                  ;uc_done:
 32957                                  	;retn
 32958                                  
 32959                                  ;----------------------------------------------------------------------------
 32960                                  ;
 32961                                  ; procedure : InitAllocUMB
 32962                                  ;
 32963                                  ;----------------------------------------------------------------------------
 32964                                  
 32965                                  InitAllocUMB:
 32966                                  	; 31/12/2022
 32967                                  	; ds = cs
 32968 00002AE7 E824DF                  	call	IsXMSLoaded
 32969 00002AEA 7527                    	jnz	short iau_err		; quit on no XMS driver
 32970 00002AEC B452                    	mov	ah,52h
 32971 00002AEE CD21                    	int	21h			; get DOS DATA seg
 32972                                  	; 31/12/2022
 32973                                  	; ds = cs
 32974                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32975 00002AF0 8C06[821E]              	mov	[DevDOSData],es		; & save it for later
 32976 00002AF4 B81043                  	mov	ax,4310h
 32977 00002AF7 CD2F                    	int	2Fh
 32978                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32979                                  	;mov	[cs:DevXMSAddr+2],es
 32980 00002AF9 891E[6B1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32981 00002AFD 8C06[6D1E]              	mov	[DevXMSAddr+2],es	
 32982                                  	; 31/12/2022
 32983 00002B01 803E[811E]00            	cmp	byte [FirstUMBLinked],0 
 32984                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32985                                  	;jne	short ia_1		; quit if we already did it
 32986                                  	; 12/12/2022
 32987 00002B06 770A                    	ja	short ia_1 ; cf=0
 32988 00002B08 E83900                  	call	LinkFirstUMB		; else link the first UMB
 32989                                  	;jc	short iau_err
 32990                                  	; 12/12/2022
 32991 00002B0B 7207                    	jc	short iau_err2  ; cf=1
 32992                                  	; 31/12/2022
 32993                                  	; ds = cs
 32994 00002B0D C606[811E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32995                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32996                                  ia_1:
 32997                                  	; 12/12/2022
 32998                                  	; cf=0
 32999                                  	;clc
 33000 00002B12 C3                      	retn
 33001                                  iau_err:
 33002 00002B13 F9                      	stc
 33003                                  iau_err2:
 33004 00002B14 C3                      	retn
 33005                                  
 33006                                  ;-------------------------------------------------------------------------
 33007                                  ;
 33008                                  ; Procedure Name	: umb_allocate
 33009                                  ;
 33010                                  ; Inputs		: DS = data
 33011                                  ;
 33012                                  ; Outputs		: if UMB available
 33013                                  ;				Allocates the largest available UMB and 
 33014                                  ;			  	BX = segment of allocated block
 33015                                  ;				DX = size of allocated block
 33016                                  ;				NC
 33017                                  ;			  else 
 33018                                  ;				CY
 33019                                  ;
 33020                                  ; Uses			: BX, DX
 33021                                  ;
 33022                                  ;-------------------------------------------------------------------------
 33023                                  
 33024                                  umb_allocate:
 33025                                  	; 31/12/2022
 33026                                  	; ds = cs
 33027 00002B15 50                      	push	ax
 33028 00002B16 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33029 00002B18 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 33030                                  					;   possible
 33031                                  	; 31/12/2022
 33032 00002B1B FF1E[6B1E]              	call	far [DevXMSAddr]
 33033                                  	;call	far [cs:DevXMSAddr]
 33034                                  					; dx now contains the size of
 33035                                  					; the largest UMB
 33036 00002B1F 09D2                    	or	dx,dx
 33037 00002B21 740B                    	jz	short ua_err
 33038                                  	
 33039 00002B23 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33040                                  
 33041                                  	; 31/12/2022
 33042 00002B25 FF1E[6B1E]              	call	far [DevXMSAddr]
 33043                                  	;call	far [cs:DevXMSAddr]
 33044                                  
 33045 00002B29 83F801                  	cmp	ax,1			; Q: was the reqst successful
 33046                                  	;jne	short ua_err		; N: error
 33047                                  	; 14/08/2023
 33048 00002B2C 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 33049                                  ua_err:
 33050 00002B2E F9                      	stc	
 33051                                  
 33052                                  	;clc
 33053                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33054                                  	; 12/12/2022
 33055                                  	; cf=0
 33056                                  	;clc 
 33057                                  ua_done:
 33058 00002B2F 58                      	pop	ax
 33059 00002B30 C3                      	retn
 33060                                  	; 14/08/2023
 33061                                  ;ua_err:
 33062                                  	;stc
 33063                                  	;jmp	short ua_done
 33064                                  
 33065                                  ; 13/04/2019 - Retro DOS v4.0
 33066                                  
 33067                                  ;----------------------------------------------------------------------------
 33068                                  ;
 33069                                  ;**	get_next - Find Next item in Arena
 33070                                  ;
 33071                                  ;	ENTRY	dS - pointer to block head
 33072                                  ;	EXIT	AX,ES - pointers to next head
 33073                                  ;		'C' set if arena damaged
 33074                                  ;
 33075                                  ;----------------------------------------------------------------------------
 33076                                  
 33077                                  	; 01/11/2022
 33078                                  get_next:
 33079 00002B31 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33080 00002B36 740A                    	je	short gn_err
 33081                                  _get_next_:
 33082 00002B38 8CD8                    	mov     ax,ds                   ; ax=current block
 33083 00002B3A 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33084 00002B3E 40                      	inc     ax                      ; remember that header!
 33085 00002B3F 8EC0                    	mov	es,ax
 33086                                  	;clc
 33087                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33088                                  	; 11/12/2022
 33089                                  	; cf=0
 33090                                  	;clc
 33091 00002B41 C3                      	retn
 33092                                  gn_err:
 33093 00002B42 F9                      	stc
 33094                                  	; 11/12/2022	
 33095                                  lfu_err:	 ; cf=1
 33096 00002B43 C3                      	retn
 33097                                  
 33098                                  ;----------------------------------------------------------------------------
 33099                                  ;
 33100                                  ; procedure : LinkFirstUMB
 33101                                  ;
 33102                                  ;----------------------------------------------------------------------------
 33103                                  
 33104                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33105                                  	; (SYSINIT:2F81h)
 33106                                  LinkFirstUMB:
 33107                                  	; 31/12/2022
 33108                                  	; ds = cs
 33109 00002B44 E8CEFF                  	call	umb_allocate
 33110 00002B47 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33111                                  
 33112                                  ; bx = segment of allocated UMB
 33113                                  ; dx = size of UMB
 33114                                  
 33115                                  	; 31/12/2022
 33116                                  	; ds = cs
 33117                                  
 33118 00002B49 CD12                    	int	12h			; ax = size of memory
 33119 00002B4B B106                    	mov	cl,6
 33120 00002B4D D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33121                                  
 33122 00002B4F 89C1                    	mov	cx,ax			; cx = size in paras
 33123 00002B51 29D8                    	sub	ax,bx			; ax = - size of unused block
 33124                                  
 33125 00002B53 F7D8                    	neg	ax
 33126                                  
 33127                                  	;sub	cx,1			; cx = first umb_arena
 33128                                  	; 09/09/2023
 33129 00002B55 49                      	dec	cx
 33130 00002B56 8EC1                    	mov	es,cx			; es = first umb_arena
 33131                                  	
 33132 00002B58 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33133 00002B5E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33134                                  					
 33135 00002B65 26A30300                	mov	[es:ARENA.SIZE],ax	
 33136 00002B69 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33137                                  
 33138                                  ; put in the arena for the first UMB
 33139                                  
 33140 00002B70 8EC3                    	mov	es,bx			; es has first free umb seg
 33141 00002B72 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33142 00002B78 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33143                                  					; mark as free 
 33144 00002B7F 4A                      	dec	dx			; make room for arena
 33145 00002B80 2689160300              	mov	[es:ARENA.SIZE],dx	
 33146                                  
 33147                                  	;mov	es,[cs:DevDOSData]
 33148                                  	; 31/12/2022
 33149 00002B85 8E06[821E]              	mov	es,[DevDOSData] ; ds = cs
 33150                                  	; 18/09/2023
 33151 00002B89 26890E8C00              	mov	[es:UMB_ARENA],cx
 33152                                  	;mov	di,UMB_ARENA ; 8Ch
 33153                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 33154                                  					;  data segment with the arena
 33155                                  					;  just below Top of Mem
 33156                                  
 33157                                  ; we must now scan the arena chain and update the size of the last arena
 33158                                  
 33159                                  	;mov	di,DOS_ARENA ; 24h
 33160                                  	;mov	es,[es:di]		; es = start arena
 33161                                  	; 18/09/2023
 33162 00002B8E 268E062400              	mov	es,[es:DOS_ARENA]
 33163 00002B93 31FF                    	xor	di,di
 33164                                  ;scan_next
 33165                                  ; 09/12/2022
 33166                                  scannext:
 33167 00002B95 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33168 00002B99 740C                    	je	short got_last
 33169                                  	
 33170 00002B9B 8CC0                    	mov	ax,es
 33171 00002B9D 2603060300              	add	ax,[es:ARENA.SIZE]
 33172 00002BA2 40                      	inc	ax
 33173 00002BA3 8EC0                    	mov	es,ax
 33174                                  	;jmp	short scan_next
 33175                                  	; 09/12/2022
 33176 00002BA5 EBEE                    	jmp	short scannext
 33177                                  got_last:
 33178                                  	;sub	word [es:ARENA.SIZE],1
 33179                                  	; 09/09/2023
 33180 00002BA7 26FF0E0300              	dec	word [es:ARENA.SIZE]
 33181                                  
 33182 00002BAC 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33183                                  	;clc
 33184                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33185                                  	; 11/12/2022
 33186                                  	; cf=0
 33187                                  	;clc
 33188 00002BB2 C3                      	retn
 33189                                  
 33190                                  ; 11/12/2022
 33191                                  ;;lfu_err:
 33192                                  ;	;stc
 33193                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33194                                  ;	; 11/12/2022
 33195                                  ;	; cf=1
 33196                                  ;	;stc
 33197                                  ;	retn
 33198                                  
 33199                                  ;----------------------------------------------------------------------------
 33200                                  ;
 33201                                  ; procedure : ShrinkUMB
 33202                                  ;
 33203                                  ;	Shrinks the current UMB in use, so that the unused portions
 33204                                  ;	of the UMB is given back to the DOS free mem pool
 33205                                  ;
 33206                                  ;----------------------------------------------------------------------------
 33207                                  
 33208                                  ShrinkUMB:
 33209                                  	; 12/12/2022
 33210                                  	; ds = cs
 33211 00002BB3 833E[651E]00            	cmp	word [DevUMBAddr],0
 33212                                  	;cmp	word [cs:DevUMBAddr],0
 33213 00002BB8 7421                    	je	short su_exit
 33214 00002BBA 06                      	push	es
 33215 00002BBB 53                      	push	bx
 33216                                  	; 12/12/2022
 33217                                  	;mov	bx,[cs:DevUMBFree]
 33218                                  	;sub	bx,[cs:DevUMBAddr]
 33219                                  	;mov	es,[cs:DevUMBAddr]
 33220 00002BBC 8B1E[691E]              	mov	bx,[DevUMBFree]
 33221 00002BC0 2B1E[651E]              	sub	bx,[DevUMBAddr]
 33222 00002BC4 8E06[651E]              	mov	es,[DevUMBAddr]
 33223                                  	
 33224 00002BC8 B8004A                  	mov	ax,4A00h
 33225 00002BCB CD21                    	int	21h
 33226                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33227                                  		; ES = segment address of block to change
 33228                                  		; BX = new size in paragraphs
 33229 00002BCD 8CC0                    	mov	ax,es
 33230 00002BCF 48                      	dec	ax
 33231 00002BD0 8EC0                    	mov	es,ax
 33232 00002BD2 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33233 00002BD9 5B                      	pop	bx
 33234 00002BDA 07                      	pop	es
 33235                                  su_exit:
 33236 00002BDB C3                      	retn
 33237                                  
 33238                                  ;----------------------------------------------------------------------------
 33239                                  ;
 33240                                  ; procedure : UnlinkUMB
 33241                                  ;
 33242                                  ;	Unlinks the UMBs from the DOS arena chain
 33243                                  ;
 33244                                  ;----------------------------------------------------------------------------
 33245                                  
 33246                                  UnlinkUMB:
 33247                                  	; 12/12/2022
 33248                                  	; ds = cs
 33249 00002BDC 1E                      	push	ds
 33250 00002BDD 06                      	push	es
 33251                                  	; 12/12/2022
 33252 00002BDE 803E[811E]00            	cmp	byte [FirstUMBLinked],0
 33253                                  	;cmp	byte [cs:FirstUMBLinked],0
 33254 00002BE3 7420                    	je	short ulu_x		; nothing to unlink
 33255                                  	; 12/12/2022
 33256 00002BE5 8E06[821E]              	mov	es,[DevDOSData]
 33257                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33258 00002BE9 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33259 00002BEE 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33260                                  ulu_next:
 33261 00002BF3 E83BFF                  	call	get_next
 33262 00002BF6 720D                    	jc	short ulu_x
 33263 00002BF8 39C7                    	cmp	di,ax			; is the next one UMB ?
 33264 00002BFA 7404                    	je	short ulu_found
 33265 00002BFC 8ED8                    	mov	ds,ax
 33266 00002BFE EBF3                    	jmp	short ulu_next
 33267                                  ulu_found:
 33268                                  	;mov	byte [0],'Z'
 33269 00002C00 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33270                                  ulu_x:
 33271 00002C05 07                      	pop	es
 33272 00002C06 1F                      	pop	ds
 33273 00002C07 C3                      	retn
 33274                                  
 33275                                  ; ----------------------------------------------------------------------
 33276                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33277                                  ; ----------------------------------------------------------------------
 33278                                  ; 14/04/2019 - Retro DOS v4.0
 33279                                  
 33280                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33281                                  ;
 33282                                  ; Summary:
 33283                                  ;
 33284                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33285                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33286                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33287                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33288                                  ;   and/or config.inc for the full list.
 33289                                  ;
 33290                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33291                                  ;   configuration support. blockname is either MENU, which contains one
 33292                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33293                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33294                                  ;   INCLUDE allows the current block to name another block for inclusion
 33295                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33296                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33297                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33298                                  ;
 33299                                  ; Example:
 33300                                  ;
 33301                                  ;   [menu]
 33302                                  ;   menuitem=misc,Miscellaneous
 33303                                  ;   menuitem=network,Network Configuration
 33304                                  ;   menudefault=network,15
 33305                                  ;
 33306                                  ;   [network]
 33307                                  ;   include misc
 33308                                  ;   device=foo
 33309                                  ;
 33310                                  ;   [misc]
 33311                                  ;   device=bar
 33312                                  ;   include alternate
 33313                                  ;
 33314                                  ;   [alternate]
 33315                                  ;   device=tar
 33316                                  ;
 33317                                  ;
 33318                                  ;   When the menu is displayed
 33319                                  ;
 33320                                  ;    1. Miscellaneous
 33321                                  ;    2. Network Configuration
 33322                                  ;
 33323                                  ;   #2 is highlighted as the default option, and will be automatically
 33324                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33325                                  ;   following order:
 33326                                  ;
 33327                                  ;       DEVICE=BAR
 33328                                  ;       DEVICE=TAR
 33329                                  ;       DEVICE=FOO
 33330                                  ;
 33331                                  
 33332                                  ;MULTI_CONFIG equ 1
 33333                                  
 33334                                  ; the following depend on the positions of the various letters in switchlist
 33335                                  
 33336                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33337                                  
 33338                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33339                                  flagdrive	equ 00001000b ; 8 
 33340                                  flagcyln	equ 00010000b ; 16
 33341                                  flagseclim	equ 00100000b ; 32
 33342                                  flagheads	equ 01000000b ; 64
 33343                                  flagff		equ 10000000b ; 128
 33344                                  
 33345                                  ;----------------------------------------------------------------------------
 33346                                  ; 19/04/2019 - Retro DOS v4.0
 33347                                  
 33348                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33349                                  
 33350                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33351                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33352                                  
 33353 00002C08 00                      insert_blank:	db 	0
 33354                                  
 33355                                  ;----------------------------------------------------------------------------
 33356                                  ;
 33357                                  ; procedure : setparms
 33358                                  ;
 33359                                  ; the following set of routines is used to parse the drivparm = command in
 33360                                  ; the config.sys file to change the default drive parameters.
 33361                                  ;
 33362                                  ;----------------------------------------------------------------------------
 33363                                  
 33364                                  setparms:
 33365 00002C09 1E                      	push	ds
 33366 00002C0A 50                      	push	ax
 33367 00002C0B 53                      	push	bx
 33368 00002C0C 51                      	push	cx
 33369 00002C0D 52                      	push	dx
 33370                                  
 33371 00002C0E 0E                      	push	cs
 33372 00002C0F 1F                      	pop	ds
 33373                                  
 33374 00002C10 31DB                    	xor	bx,bx
 33375 00002C12 8A1E[9235]              	mov	bl,[drive]
 33376                                  	; 18/12/2022
 33377 00002C16 43                      	inc	bx
 33378                                  	;inc	bl			; get it correct for ioctl call
 33379                                  					; (1=a,2=b...)
 33380 00002C17 BA[6A34]                	mov	dx,deviceparameters
 33381                                  	;mov	ah,IOCTL ; 44h
 33382                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33383                                  	; 14/08/2023
 33384 00002C1A B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33385                                  	;mov	ch,RAWIO ; 8
 33386                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33387                                  	; 14/08/2023
 33388 00002C1D B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33389 00002C20 CD21                    	int	21h
 33390                                  
 33391                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33392                                  ;
 33393                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33394                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33395                                  ;	; 21/10/2022
 33396                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 33397                                  ;	mov	ds,ax			; set Bios_Data segment
 33398                                  ;
 33399                                  ;	test	word [cs:switches],flagec35 ; 4
 33400                                  ;	jz	short not_ec35
 33401                                  
 33402                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33403                                  	;test	word [switches],flagec35 ; 4
 33404                                  	; 12/12/2022
 33405 00002C22 F606[9335]04            	test	byte [switches],flagec35 ; 4
 33406 00002C27 7411                    	jz	short eot_ok
 33407                                  
 33408                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33409                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33410 00002C29 8A0E[9235]              	mov	cl,[drive]
 33411 00002C2D B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 33412 00002C30 8ED8                    	mov	ds,ax	
 33413                                  
 33414 00002C32 B001                    	mov	al,1			; assume drive 0
 33415 00002C34 D2E0                    	shl	al,cl			; set proper bit depending on drive
 33416                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33417 00002C36 0806[2805]              	or	[ec35_flag],al		; set the bit in the permanent flags
 33418                                  
 33419                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33420                                  ;
 33421                                  ;not_ec35:
 33422                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 33423                                  ;;	sectors per track than any old ones.
 33424                                  ;
 33425                                  ;	;mov	al,[cs:deviceparameters+20]
 33426                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33427                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33428                                  ;	cmp	al,[EOT]
 33429                                  ;	jbe	short eot_ok
 33430                                  ;	mov	[EOT],al
 33431                                  
 33432                                  eot_ok:
 33433 00002C3A 5A                      	pop	dx			; fix up all the registers
 33434 00002C3B 59                      	pop	cx
 33435 00002C3C 5B                      	pop	bx
 33436 00002C3D 58                      	pop	ax
 33437 00002C3E 1F                      	pop	ds ; 13/05/2019
 33438 00002C3F C3                      	retn
 33439                                  
 33440                                  ;----------------------------------------------------------------------------
 33441                                  ;
 33442                                  ; procedure : diddleback
 33443                                  ;
 33444                                  ; replace default values for further drivparm commands
 33445                                  ;
 33446                                  ;----------------------------------------------------------------------------
 33447                                  
 33448                                  diddleback:
 33449 00002C40 1E                      	push	ds
 33450 00002C41 0E                      	push	cs
 33451 00002C42 1F                      	pop	ds
 33452                                  	;mov	word [deviceparameters+4],80
 33453 00002C43 C706[6E34]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33454                                  	;mov	byte [deviceparameters+1],2
 33455 00002C49 C606[6B34]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33456                                  	;mov	word [deviceparameters+2],0
 33457 00002C4E C706[6C34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33458 00002C54 C706[9335]0000          	mov	word [switches],0	    ; zero all switches
 33459 00002C5A 1F                      	pop	ds
 33460 00002C5B C3                      	retn
 33461                                  
 33462                                  ; 04/01/2023
 33463                                  %if 0
 33464                                  
 33465                                  ; 15/04/2019 - Retro DOS v4.0
 33466                                  
 33467                                  ;----------------------------------------------------------------------------
 33468                                  ;
 33469                                  ; procedure : parseline
 33470                                  ;
 33471                                  ; entry point is parseline. al contains the first character in command line.
 33472                                  ;
 33473                                  ;----------------------------------------------------------------------------
 33474                                  
 33475                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33476                                  	; (SYSINIT:30ACh)
 33477                                  
 33478                                  parseline:
 33479                                  	push	ds
 33480                                  
 33481                                  	push	cs
 33482                                  	pop	ds
 33483                                  
 33484                                  nextswtch:
 33485                                  	cmp	al,cr			; carriage return?
 33486                                  	je	short done_line
 33487                                  	cmp	al,lf			; linefeed?
 33488                                  	je	short put_back		; put it back and done
 33489                                  
 33490                                  ; anything less or equal to a space is ignored.
 33491                                  
 33492                                  	cmp	al,' '                  ; space?
 33493                                  	jbe	short getnext		; skip over space
 33494                                  	cmp	al,'/'
 33495                                  	je	short getparm
 33496                                  	stc				; mark error invalid-character-in-input
 33497                                  	jmp	short exitpl
 33498                                  
 33499                                  getparm:
 33500                                  	call	check_switch
 33501                                  	mov	[switches],bx		; save switches read so far
 33502                                  	jc	short swterr
 33503                                  getnext:
 33504                                  	call	getchr
 33505                                  	jc	short done_line
 33506                                  	jmp	short nextswtch
 33507                                  swterr:
 33508                                  	jmp	short exitpl		; exit if error
 33509                                  
 33510                                  done_line:
 33511                                  	; 12/12/2022
 33512                                  	test	byte [switches],flagdrive ; 8
 33513                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33514                                  	jnz	short okay
 33515                                  	stc				; mark error no-drive-specified
 33516                                  	jmp	short exitpl
 33517                                  
 33518                                  okay:
 33519                                  	mov	ax,[switches]
 33520                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33521                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33522                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33523                                  	;clc			    ; everything is fine
 33524                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33525                                  	; 12/12/2022
 33526                                  	; cf=0
 33527                                  	;clc
 33528                                  	call	setdeviceparameters
 33529                                  exitpl:
 33530                                  	pop	ds
 33531                                  	retn
 33532                                  put_back:
 33533                                  	inc	word [count]		; one more char to scan
 33534                                  	dec	word [chrptr]		; back up over linefeed
 33535                                  	jmp	short done_line
 33536                                  
 33537                                  %endif
 33538                                  
 33539                                  ;----------------------------------------------------------------------------
 33540                                  ;
 33541                                  ; procedure : check_switch
 33542                                  ;
 33543                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33544                                  ; gets the number, if any required, following the switch. the switch and the
 33545                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33546                                  ; error.
 33547                                  ;
 33548                                  ;----------------------------------------------------------------------------
 33549                                  
 33550                                  ; 09/09/2023
 33551                                  
 33552                                  err_swtch:
 33553 00002C5C 31CB                    	xor	bx,cx			; remove this switch from the records
 33554                                  err_check:
 33555 00002C5E F9                      	stc
 33556                                  err_chk:
 33557                                  done_swtch:	; 09/09/2023 (cf=0)
 33558 00002C5F C3                      	retn
 33559                                  
 33560                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 33561                                  
 33562                                  check_switch:
 33563 00002C60 E87803                  	call	getchr
 33564                                  	;jc	short err_check
 33565 00002C63 72FA                    	jc	short err_chk
 33566 00002C65 24DF                            and     al,0DFh                 ; convert it to upper case
 33567 00002C67 3C41                    	cmp	al,'A'
 33568                                  	;jb	short err_check
 33569 00002C69 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33570 00002C6B 3C5A                    	cmp	al,'Z'
 33571 00002C6D 77EF                    	ja	short err_check
 33572                                  
 33573 00002C6F 06                      	push	es
 33574                                  
 33575 00002C70 0E                      	push	cs
 33576 00002C71 07                      	pop	es
 33577                                  
 33578                                  	;mov	cl,[switchlist]		; get number of valid switches
 33579                                  	;mov	ch,0
 33580                                  	;mov	di,1+switchlist		; point to string of valid switches
 33581                                  	; 09/09/2023
 33582 00002C72 BF[2636]                	mov	di,switchlist
 33583 00002C75 8A0D                    	mov	cl,[di]
 33584 00002C77 B500                    	mov	ch,0
 33585 00002C79 47                      	inc	di	; 1+switchlist
 33586                                  
 33587 00002C7A F2AE                    	repne	scasb
 33588                                  
 33589 00002C7C 07                      	pop	es
 33590 00002C7D 75DF                    	jnz	short err_check
 33591                                  
 33592 00002C7F B80100                  	mov	ax,1
 33593 00002C82 D3E0                    	shl	ax,cl			; set bit to indicate switch
 33594 00002C84 8B1E[9335]              	mov	bx,[switches]		; get switches so far
 33595 00002C88 09C3                    	or	bx,ax			; save this with other switches
 33596 00002C8A 89C1                    	mov	cx,ax
 33597                                  	; 12/12/2022
 33598 00002C8C A8F8                    	test	al,switchnum ; 0F8h
 33599                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33600 00002C8E 74CF                    	jz	short done_swtch
 33601                                  
 33602 00002C90 E84803                  	call	getchr
 33603 00002C93 72C7                    	jc	short err_swtch
 33604                                  
 33605 00002C95 3C3A                    	cmp	al,':'
 33606 00002C97 75C3                    	jne	short err_swtch
 33607                                  
 33608 00002C99 E83F03                  	call	getchr
 33609 00002C9C 53                      	push	bx			; preserve switches
 33610                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33611                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33612                                  	; 12/12/2022
 33613                                  	; ds = cs
 33614 00002C9D C606[2A03]20            	mov	byte [sepchr],' '
 33615 00002CA2 E8DB03                  	call	getnum
 33616                                  	;mov	byte [cs:sepchr],0
 33617                                  	; 12/12/2022
 33618 00002CA5 C606[2A03]00            	mov	byte [sepchr],0
 33619 00002CAA 5B                      	pop	bx			; restore switches
 33620                                  
 33621                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33622                                  ; not check for carry set here. if there is an error, it will be detected
 33623                                  ; further on (hopefully).
 33624                                  
 33625                                  	; 09/09/2023
 33626                                  	;call	process_num
 33627                                  	;jmp	short process_num
 33628                                  
 33629                                  ;done_swtch:
 33630                                  ;	;clc
 33631                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33632                                  ;	; 12/12/2022
 33633                                  ;	; cf=0
 33634                                  ;	;clc
 33635                                  ;	retn
 33636                                  
 33637                                  ;----------------------------------------------------------------------------
 33638                                  ;
 33639                                  ; procedure : process_num
 33640                                  ;
 33641                                  ; this routine takes the switch just input, and the number following (if any),
 33642                                  ; and sets the value in the appropriate variable. if the number input is zero
 33643                                  ; then it does nothing - it assumes the default value that is present in the
 33644                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33645                                  ;
 33646                                  ;----------------------------------------------------------------------------
 33647                                  
 33648                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33649                                  	; (SYSINIT:3156h)
 33650                                  process_num:
 33651 00002CAB 850E[9335]              	test	[switches],cx		; if this switch has been done before,
 33652 00002CAF 752B                    	jnz	short done_ret		; ignore this one.
 33653                                  	; 12/12/2022
 33654 00002CB1 F6C108                  	test	cl,flagdrive ; 8
 33655                                  	;test	cx,flagdrive ; 8
 33656 00002CB4 7404                    	jz	short try_f
 33657 00002CB6 A2[9235]                	mov	byte [drive],al
 33658                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33659                                  	;jmp	short done_ret
 33660                                  	; 12/12/2022
 33661                                  	; cf=0
 33662 00002CB9 C3                      	retn	; 13/05/2019
 33663                                  try_f:
 33664                                  	; 12/12/2022
 33665 00002CBA F6C180                  	test	cl,flagff ; 80h
 33666                                  	;test	cx,flagff ; 80h
 33667 00002CBD 7404                    	jz	short try_t
 33668                                  
 33669                                  ; ensure that we do not get bogus form factors that are not supported
 33670                                  
 33671                                  	;mov	[deviceparameters+1],al
 33672 00002CBF A2[6B34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33673                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33674                                  	;jmp	short done_ret
 33675                                  	; 12/12/2022
 33676                                  	; cf=0
 33677 00002CC2 C3                      	retn	; 13/05/2019
 33678                                  try_t:
 33679 00002CC3 09C0                    	or	ax,ax
 33680 00002CC5 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33681                                  	; 12/12/2022
 33682 00002CC7 F6C110                  	test	cl,flagcyln ; 10h
 33683                                  	;test	cx,flagcyln ; 10h
 33684 00002CCA 7404                    	jz	short try_s
 33685                                  
 33686                                  	;mov	[deviceparameters+4],ax
 33687 00002CCC A3[6E34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33688                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33689                                  	;jmp	short done_ret
 33690                                  	; 12/12/2022
 33691                                  	; cf=0
 33692 00002CCF C3                      	retn	; 13/05/2019
 33693                                  try_s:
 33694                                  	; 12/12/2022
 33695 00002CD0 F6C120                  	test	cl,flagseclim ; 20h
 33696                                  	;test	cx,flagseclim ; 20h
 33697 00002CD3 7404                    	jz	short try_h
 33698 00002CD5 A3[9035]                	mov	[slim],ax
 33699                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33700                                  	;jmp	short done_ret
 33701                                  	; 12/12/2022
 33702                                  	; cf=0
 33703 00002CD8 C3                      	retn	; 13/05/2019
 33704                                  
 33705                                  ; must be for number of heads
 33706                                  
 33707                                  try_h:
 33708 00002CD9 A3[8E35]                	mov	[hlim],ax
 33709                                  done_ret:
 33710                                  	;clc
 33711                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33712                                  	; 12/12/2022
 33713                                  	; cf=0 (test instruction resets cf)
 33714                                  	;clc
 33715 00002CDC C3                      	retn
 33716                                  
 33717                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33718                                  %if 1
 33719                                  
 33720                                  ; 15/04/2019 - Retro DOS v4.0
 33721                                  
 33722                                  ;----------------------------------------------------------------------------
 33723                                  ;
 33724                                  ; procedure : parseline
 33725                                  ;
 33726                                  ; entry point is parseline. al contains the first character in command line.
 33727                                  ;
 33728                                  ;----------------------------------------------------------------------------
 33729                                  
 33730                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33731                                  	; (SYSINIT:30ACh)
 33732                                  parseline:
 33733                                  	; 04/01/2023
 33734                                  	; ds = cs ; *
 33735                                  
 33736                                  	;push	ds ; *
 33737                                  
 33738                                  	;push	cs ; *
 33739                                  	;pop	ds ; *
 33740                                  
 33741                                  nextswtch:
 33742 00002CDD 3C0D                    	cmp	al,cr			; carriage return?
 33743 00002CDF 741C                    	je	short done_line
 33744 00002CE1 3C0A                    	cmp	al,lf			; linefeed?
 33745 00002CE3 7421                    	je	short put_back		; put it back and done
 33746                                  
 33747                                  ; anything less or equal to a space is ignored.
 33748                                  
 33749 00002CE5 3C20                    	cmp	al,' '                  ; space?
 33750 00002CE7 760F                    	jbe	short getnext		; skip over space
 33751 00002CE9 3C2F                    	cmp	al,'/'
 33752 00002CEB 7402                    	je	short getparm
 33753 00002CED F9                      	stc				; mark error invalid-character-in-input
 33754                                  	;jmp	short exitpl
 33755                                  	; 04/01/2023
 33756                                  swterr:
 33757 00002CEE C3                      	retn
 33758                                  
 33759                                  getparm:
 33760 00002CEF E86EFF                  	call	check_switch
 33761 00002CF2 891E[9335]              	mov	[switches],bx		; save switches read so far
 33762 00002CF6 72F6                    	jc	short swterr
 33763                                  getnext:
 33764 00002CF8 E8E002                  	call	getchr
 33765                                  	;jc	short done_line
 33766                                  	;jmp	short nextswtch
 33767                                  	; 04/01/2023
 33768 00002CFB 73E0                    	jnc	short nextswtch
 33769                                  ;swterr:
 33770                                  	;jmp	short exitpl		; exit if error
 33771                                  
 33772                                  done_line:
 33773                                  	; 12/12/2022
 33774 00002CFD F606[9335]08            	test	byte [switches],flagdrive ; 8
 33775                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33776 00002D02 750C                    	jnz	short okay
 33777 00002D04 F9                      	stc				; mark error no-drive-specified
 33778                                  	;jmp	short exitpl
 33779                                  	; 04/01/2023
 33780 00002D05 C3                      	retn
 33781                                  
 33782                                  ;exitpl:
 33783                                  	; 04/01/2023
 33784                                  	; ds = cs
 33785                                  	;;pop	ds ; *
 33786                                  	;retn
 33787                                  
 33788                                  put_back:
 33789 00002D06 FF06[D203]              	inc	word [count]		; one more char to scan
 33790 00002D0A FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33791 00002D0E EBED                    	jmp	short done_line
 33792                                  
 33793                                  okay:
 33794 00002D10 A1[9335]                	mov	ax,[switches]
 33795 00002D13 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33796 00002D16 A3[6C34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33797 00002D19 C706[9034]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33798                                  	;clc			    ; everything is fine
 33799                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33800                                  	; 12/12/2022
 33801                                  	; cf=0
 33802                                  	;clc
 33803                                  	;call	setdeviceparameters
 33804                                  	; 04/01/2023
 33805                                  	;jmp	short setdeviceparameters
 33806                                  
 33807                                  %endif
 33808                                  
 33809                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33810                                  
 33811                                  ;----------------------------------------------------------------------------
 33812                                  ;
 33813                                  ; procedure : setdeviceparameters
 33814                                  ;
 33815                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33816                                  ; system based on the form factor. it is assumed that the bpbs for the
 33817                                  ; various form factors are present in the bpbtable. for hard files,
 33818                                  ; the recommended bpb is the same as the bpb on the drive.
 33819                                  ; no attempt is made to preserve registers since we are going to jump to
 33820                                  ; sysinit straight after this routine.
 33821                                  ;
 33822                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33823                                  ;	  we always return no carry
 33824                                  ;
 33825                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33826                                  ;
 33827                                  ;----------------------------------------------------------------------------
 33828                                  
 33829                                  ; 15/04/2019 - Retro DOS v4.0
 33830                                  
 33831                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33832                                  setdeviceparameters:
 33833                                  	; 04/01/2023
 33834                                  	; ds = cs
 33835                                  	
 33836 00002D1F 06                      	push	es
 33837                                  
 33838 00002D20 0E                      	push	cs
 33839 00002D21 07                      	pop	es
 33840                                  
 33841 00002D22 31DB                    	xor	bx,bx
 33842 00002D24 8A1E[6B34]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33843 00002D28 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33844 00002D2B 7506                    	jne	short got_80
 33845                                  
 33846 00002D2D C706[6E34]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33847                                  							; 48 tpi=40 cyl
 33848                                  got_80:
 33849 00002D33 D1E3                    	shl	bx,1			; get index into bpb table
 33850 00002D35 8BB7[1236]              	mov	si,[bpbtable+bx]	; get address of bpb
 33851                                  
 33852                                  	;mov	di,deviceparameters+7	
 33853                                  	; 02/11/2022
 33854 00002D39 BF[7134]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33855 00002D3C B91F00                  	mov	cx,A_BPB.size ; 31
 33856 00002D3F FC                      	cld
 33857                                  	;repe	movsb
 33858                                  	; 02/11/2022
 33859 00002D40 F3A4                    	rep	movsb
 33860                                  
 33861 00002D42 07                      	pop	es
 33862                                  
 33863                                  	; 12/12/2022
 33864 00002D43 F606[9335]20            	test	byte [switches],flagseclim ; 20h
 33865                                  	;test	word [switches],flagseclim ; 20h
 33866 00002D48 7406                    	jz	short see_heads
 33867                                  
 33868 00002D4A A1[9035]                	mov	ax,[slim]
 33869                                  	;mov	[deviceparameters+20],ax
 33870 00002D4D A3[7E34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33871                                  
 33872                                  see_heads:
 33873                                  	; 12/12/2022
 33874 00002D50 F606[9335]40            	test	byte [switches],flagheads ; 40h
 33875                                  	;test	word [switches],flagheads ; 40h
 33876 00002D55 7406                    	jz	short heads_not_altered
 33877                                  
 33878 00002D57 A1[8E35]                	mov	ax,[hlim]
 33879                                  	;mov	[deviceparameters+22],ax	
 33880 00002D5A A3[8034]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33881                                  
 33882                                  heads_not_altered:
 33883                                  
 33884                                  ; set up correct media descriptor byte and sectors/cluster
 33885                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33886                                  
 33887                                  	;mov	byte [deviceparameters+9],2
 33888                                  	; 02/11/2022
 33889                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33890                                  	; 04/01/2023
 33891 00002D5D B80200                  	mov	ax,2	
 33892 00002D60 A2[7334]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33893                                  
 33894 00002D63 B3F0                    	mov	bl,0F0h			; get default mediabyte
 33895                                  
 33896                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33897                                  
 33898                                  	;mov	bh,[deviceparameters+17]
 33899                                  	; 02/11/2022
 33900 00002D65 8A3E[7B34]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33901                                  
 33902                                  	; 04/01/2023
 33903                                  	; ax = 2
 33904 00002D69 3906[8034]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33905                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33906 00002D6D 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33907                                  
 33908 00002D6F 7524                    	jne	short only_one_head	; one head, do one head stuff
 33909                                  
 33910                                  ;	two head drives will use the mediadescriptor from the bpb
 33911                                  
 33912 00002D71 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33913                                  
 33914                                  ;	two sided drives have two special cases to look for. One is
 33915                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33916                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33917                                  ;	   one sector/cluster.
 33918                                  
 33919                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33920                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33921                                  ;	   type of 2 headed drive is all set.
 33922                                  
 33923 00002D73 833E[7E34]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33924 00002D78 7509                    	jne	short not_144m
 33925 00002D7A 833E[6E34]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33926 00002D7F 7502                    	jne	short not_144m
 33927                                  
 33928                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33929                                  
 33930 00002D81 EB24                    	jmp	short got_one_secperclus_drive
 33931                                  
 33932                                  ;	check for 320K
 33933                                  
 33934                                  not_144m:
 33935 00002D83 833E[6E34]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33936 00002D88 7521                    	jne	short got_correct_mediad
 33937 00002D8A 833E[7E34]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33938 00002D8F 751A                    	jne	short got_correct_mediad
 33939                                  
 33940 00002D91 B3FC                    	mov	bl,0FCh
 33941 00002D93 EB16                    	jmp	short got_correct_mediad
 33942                                  
 33943                                  only_one_head:
 33944                                  
 33945                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33946                                  
 33947 00002D95 803E[6B34]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33948 00002D9A 740B                    	je	short got_one_secperclus_drive
 33949                                  
 33950                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33951                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33952                                  ;	  besides 8 will be considered 0fch
 33953                                  
 33954 00002D9C B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33955 00002D9E 833E[7E34]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33956                                  	; 12/12/2022
 33957 00002DA3 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33958                                  
 33959 00002DA5 B3FE                    	mov	bl,0FEh			; 160K mediaid
 33960                                  
 33961                                  ;	we've either got a one sided drive, or a 1.44M drive
 33962                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33963                                  
 33964                                  got_one_secperclus_drive:
 33965                                  	; 04/01/2023
 33966                                  	; ax = 2
 33967 00002DA7 48                      	dec	ax  ; ax = 1
 33968 00002DA8 A2[7334]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33969                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33970                                  
 33971                                  got_correct_mediad:
 33972 00002DAB 881E[7B34]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33973                                  
 33974                                  ;	 Calculate the correct number of Total Sectors on medium
 33975                                  
 33976 00002DAF A1[6E34]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33977 00002DB2 F726[8034]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33978 00002DB6 F726[7E34]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33979 00002DBA A3[7934]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33980 00002DBD F8                      	clc				; we currently return no errors
 33981                                  
 33982 00002DBE C3                      	retn
 33983                                  
 33984                                  ;	M047 -- end rewritten routine
 33985                                  
 33986                                  ;----------------------------------------------------------------------------
 33987                                  ;
 33988                                  ; procedure : organize
 33989                                  ;
 33990                                  ;----------------------------------------------------------------------------
 33991                                  
 33992                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33993                                  %if 1
 33994                                  end_commd_line:
 33995 00002DBF AA                      	stosb				; store line feed char in buffer for the linecount.
 33996                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33997                                  	; 03/01/2023
 33998                                  	; ds = cs
 33999                                  	;mov	byte [com_level],0
 34000                                  	;jmp	short org1
 34001                                  	; 09/09/2023
 34002 00002DC0 EB11                    	jmp	short org0
 34003                                  nochar1:
 34004 00002DC2 F9                      	stc
 34005 00002DC3 C3                      	retn
 34006                                  %endif
 34007                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34008                                  	; (SYSINIT:3234h)
 34009                                  
 34010                                  organize:
 34011                                  	; 04/01/2023
 34012                                  	; ds = cs
 34013 00002DC4 8B0E[D203]              	mov	cx,[count]
 34014                                  	;mov	cx,[cs:count]
 34015 00002DC8 E3F8                    	jcxz	nochar1
 34016                                  
 34017                                  ;ifndef	MULTI_CONFIG
 34018                                  ;
 34019                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 34020                                  ;;   because we the case of values in SET commands preserved
 34021                                  ;
 34022                                  ;	call	mapcase
 34023                                  ;endif
 34024                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34025 00002DCA E82502                  	call	mapcase
 34026                                  
 34027 00002DCD 31F6                    	xor	si,si
 34028 00002DCF 89F7                    	mov	di,si
 34029 00002DD1 31C0                    	xor	ax,ax
 34030                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34031                                  	;;mov	byte [cs:com_level],0
 34032                                  	; 12/12/2022
 34033                                  	;mov	[cs:com_level],al ; 0
 34034                                  	; 04/01/2023
 34035                                  	; ds = cs
 34036                                  	; 09/09/2023
 34037                                  	;mov	[com_level],al ; 0
 34038                                  org0:
 34039 00002DD3 C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 34040                                  org1:
 34041 00002DD8 E8A501                  	call	skip_comment
 34042 00002DDB 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 34043 00002DDD E88A01                  	call	get2			; not a comment string. then get a char.
 34044 00002DE0 3C0A                    	cmp	al,lf ; 0Ah
 34045 00002DE2 74DB                    	je	short end_commd_line	; starts with a blank line.
 34046 00002DE4 3C20                    	cmp	al,' ' ; 20h
 34047 00002DE6 76F0                    	jbe	short org1		; skip leading control characters
 34048                                  	; 09/09/2023
 34049                                  	;jmp	short findit
 34050                                  
 34051                                  ; 09/09/2023
 34052                                  %if 0
 34053                                  end_commd_line:
 34054                                  	stosb				; store line feed char in buffer for the linecount.
 34055                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34056                                  	; 03/01/2023
 34057                                  	; ds = cs
 34058                                  	mov	byte [com_level],0
 34059                                  	jmp	short org1
 34060                                  
 34061                                  nochar1:
 34062                                  	stc
 34063                                  	retn
 34064                                  %endif
 34065                                  
 34066                                  findit:
 34067 00002DE8 51                      	push	cx
 34068 00002DE9 56                      	push	si
 34069 00002DEA 57                      	push	di
 34070 00002DEB 89F5                    	mov	bp,si
 34071 00002DED 4D                      	dec	bp
 34072 00002DEE BE[D933]                        mov     si,comtab		; prepare to search command table
 34073 00002DF1 B500                    	mov	ch,0
 34074                                  findcom:
 34075 00002DF3 89EF                    	mov	di,bp
 34076 00002DF5 8A0C                    	mov	cl,[si]
 34077 00002DF7 46                      	inc	si
 34078 00002DF8 E324                    	jcxz	nocom
 34079                                  
 34080                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34081                                  
 34082                                  ;ifdef	MULTI_CONFIG
 34083                                  ;
 34084                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34085                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 34086                                  ;;   anything in particular)
 34087                                  ;
 34088                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 34089                                  ;       je	short semicolon
 34090                                  ;loopcom:
 34091                                  ;       mov     al,[es:di]
 34092                                  ;       inc     di
 34093                                  ;       and     al,~20h ; 0DFh		; force upper case
 34094                                  ;       inc     si                      ; compare to byte @es:di
 34095                                  ;       cmp     al,[si-1]
 34096                                  ;       loope   loopcom
 34097                                  ;;else
 34098                                  ;;	repe	cmpsb
 34099                                  ;endif
 34100                                  	; 02/11/2022
 34101 00002DFA F3A6                    	repe	cmpsb
 34102                                  
 34103 00002DFC 9F                      	lahf
 34104 00002DFD 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34105 00002DFF 9E                      	sahf
 34106 00002E00 AC                              lodsb                           ; get indicator letter
 34107 00002E01 75F0                    	jnz	short findcom
 34108 00002E03 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 34109 00002E07 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34110 00002E09 26803D0A                	cmp	byte [es:di],lf
 34111 00002E0D 740A                    	je	short gotcom0
 34112                                  
 34113                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34114                                  ;
 34115                                  ;;ifdef	MULTI_CONFIG
 34116                                  ;
 34117                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34118                                  ;
 34119                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 34120                                  ;       je	short gotcom0
 34121                                  ;;endif
 34122                                  ;	push	ax
 34123                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 34124                                  ;
 34125                                  ;;ifdef	MULTI_CONFIG
 34126                                  ;
 34127                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 34128                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34129                                  ;;   stored in the CONFIG.SYS memory image.
 34130                                  ;
 34131                                  ;       cmp     al,'?'                  ; explicit interactive command?
 34132                                  ;       jne	short no_query		; no
 34133                                  ;       pop     ax                      ; yes, so retrieve the original code
 34134                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34135                                  ;       jmp     short gotcom0           ;
 34136                                  ;semicolon:
 34137                                  ;       mov     al,CONFIG_REM
 34138                                  ;       jmp     short gotcom0
 34139                                  ;no_query:
 34140                                  ;;endif  ;MULTI_CONFIG
 34141                                  
 34142                                  	; 02/11/2022
 34143 00002E0F 50                      	push	ax
 34144 00002E10 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34145                                  
 34146 00002E13 E8A001                  	call	delim
 34147                                  no_delim:
 34148 00002E16 58                      	pop	ax
 34149 00002E17 75DA                    	jnz	short findcom
 34150                                  gotcom0:
 34151 00002E19 5F                      	pop	di
 34152 00002E1A 5E                      	pop	si
 34153 00002E1B 59                      	pop	cx
 34154 00002E1C EB0F                    	jmp	short gotcom
 34155                                  nocom:
 34156 00002E1E 5F                      	pop	di
 34157 00002E1F 5E                      	pop	si
 34158 00002E20 59                      	pop	cx
 34159 00002E21 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34160 00002E23 AA                      	stosb				; save indicator char.
 34161                                  _skipline:
 34162 00002E24 E84301                  	call	get2
 34163 00002E27 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34164 00002E29 75F9                            jne     short _skipline
 34165 00002E2B EB92                    	jmp	short end_commd_line	; handle next command line
 34166                                  gotcom:
 34167 00002E2D AA                              stosb                           ; save indicator char in buffer
 34168                                  
 34169                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34170                                  ;;ifdef	MULTI_CONFIG
 34171                                  ;
 34172                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34173                                  ;;   it screws up the direct comparisons below.
 34174                                  ;
 34175                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34176                                  ;;endif
 34177                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 34178                                  ;
 34179                                  ;;ifdef	MULTI_CONFIG
 34180                                  ;
 34181                                  ;;   There is no whitespace/delimiter between the "begin block" character
 34182                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34183                                  ;;   skipping code
 34184                                  ;
 34185                                  ;       cmp     al,CONFIG_BEGIN
 34186                                  ;       je	short org31
 34187                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 34188                                  ;       je      short no_mapcase
 34189                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 34190                                  ;       je      short no_mapcase
 34191                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 34192                                  ;       je      short no_mapcase
 34193                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 34194                                  ;       je      short no_mapcase
 34195                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 34196                                  ;no_mapcase:
 34197                                  ;;endif
 34198                                  
 34199                                  	; 02/11/2022
 34200                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34201                                  	; 04/01/2023
 34202                                  	; ds = cs
 34203 00002E2E A2[D003]                	mov	[cmd_indicator],al
 34204                                  org2:	
 34205 00002E31 E83601                  	call    get2                    ; skip the command name until delimiter
 34206 00002E34 3C0A                            cmp     al,lf
 34207 00002E36 740B                    	je	short org21
 34208 00002E38 3C0D                    	cmp	al,cr
 34209 00002E3A 7407                    	je	short org21
 34210                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34211                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34212                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 34213                                  
 34214 00002E3C E87701                  	call	delim
 34215 00002E3F 75F0                            jnz	short org2
 34216 00002E41 EB02                    	jmp	short org3
 34217                                  org21:					;if cr or lf then
 34218 00002E43 4E                      	dec	si			; undo si, cx register
 34219 00002E44 41                      	inc	cx			;  and continue
 34220                                  org3:	
 34221                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34222                                  	;je	short get_cmt_token
 34223                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34224                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34225                                  	;;je	short org_file
 34226                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34227                                  	;je	short org_file
 34228                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34229                                          ;;je	short org_file
 34230                                  	;; 02/11/2022
 34231                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34232                                  	;je	short org_file
 34233                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34234                                  	;je	short org_file
 34235                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34236                                  	;je	short org_switch
 34237                                  
 34238                                  	; 04/01/2023
 34239                                  	; ds = cs
 34240                                  
 34241 00002E45 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34242 00002E4A 7456                    	je	short get_cmt_token
 34243                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34244                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34245                                  	;je	short org_file
 34246 00002E4C 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34247 00002E51 7429                    	je	short org_file
 34248                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34249                                          ;je	short org_file
 34250                                  	; 02/11/2022
 34251 00002E53 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34252 00002E58 7422                    	je	short org_file
 34253 00002E5A 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34254 00002E5F 741B                    	je	short org_file
 34255 00002E61 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34256 00002E66 7403                    	je	short org_switch
 34257                                  	
 34258                                  org31:
 34259 00002E68 E99500                  	jmp	org4
 34260                                  
 34261                                  org_switch:
 34262 00002E6B E81201                  	call	skip_comment
 34263 00002E6E 7472                    	jz	short end_commd_line_brdg
 34264                                  
 34265 00002E70 E8F700                  	call	get2
 34266 00002E73 E84801                  	call	org_delim
 34267 00002E76 74F3                    	jz	short org_switch
 34268                                  
 34269 00002E78 AA                      	stosb
 34270 00002E79 E99300                  	jmp	org5
 34271                                  
 34272                                  org_file:			; get the filename and put 0 at end
 34273 00002E7C E80101                  	call	skip_comment
 34274 00002E7F 7464                    	jz	short org_put_zero
 34275                                  
 34276 00002E81 E8E600                  	call	get2		; not a comment
 34277 00002E84 E82F01                  	call	delim
 34278 00002E87 74F3                    	jz	short org_file	; skip the possible delimiters
 34279                                  
 34280 00002E89 AA                      	stosb			; copy the first non delim char found in buffer
 34281                                  
 34282                                  org_copy_file:
 34283 00002E8A E8F300                  	call	skip_comment	; comment char in the filename?
 34284 00002E8D 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34285                                  
 34286 00002E8F E8D800                  	call	get2
 34287 00002E92 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34288 00002E94 7457                    	je	short end_file_slash ; this will be the special case.
 34289                                  
 34290 00002E96 AA                      	stosb			; save the char. in buffer
 34291 00002E97 E81C01                  	call	delim
 34292 00002E9A 7459                    	jz	short end_copy_file
 34293                                  
 34294 00002E9C 3C20                    	cmp	al, ' '
 34295 00002E9E 77EA                    	ja	short org_copy_file ; keep copying
 34296 00002EA0 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34297                                  
 34298                                  get_cmt_token:			; get the token. just max. 2 char.
 34299 00002EA2 E8C500                  	call	get2
 34300 00002EA5 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34301 00002EA7 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34302 00002EA9 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34303 00002EAB 74F5                    	je	short get_cmt_token ;  character.)
 34304 00002EAD 3C3D                    	cmp	al,'='		; = is special in this case.
 34305 00002EAF 74F1                    	je	short get_cmt_token
 34306 00002EB1 3C0D                    	cmp	al,cr
 34307 00002EB3 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34308 00002EB5 3C0A                    	cmp	al,lf
 34309 00002EB7 7422                    	je	short get_cmt_end
 34310                                  
 34311                                  	; 04/01/2023
 34312                                  	; ds = cs
 34313                                  	;mov	[cs:cmmt1],al	; store it
 34314                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34315 00002EB9 A2[CE03]                	mov	[cmmt1],al	; store it
 34316 00002EBC C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 34317 00002EC1 E8A600                  	call	get2
 34318 00002EC4 3C20                    	cmp	al,' ' ; 20h
 34319 00002EC6 7413                    	je	short get_cmt_end
 34320 00002EC8 3C09                    	cmp	al,tab ; 9
 34321 00002ECA 740F                    	je	short get_cmt_end
 34322 00002ECC 3C0D                    	cmp	al,cr  ; 0Dh
 34323 00002ECE 740B                    	je	short get_cmt_end
 34324 00002ED0 3C0A                    	cmp	al,lf  ; 0Ah
 34325 00002ED2 740E                    	je	short end_commd_line_brdg
 34326                                  
 34327                                  	;mov	[cs:cmmt2],al
 34328                                  	;inc	byte [cs:cmmt]
 34329                                  	; 04/01/2023
 34330 00002ED4 A2[CF03]                	mov	[cmmt2],al
 34331 00002ED7 FE06[CD03]              	inc	byte [cmmt]
 34332                                  
 34333                                  get_cmt_end:
 34334 00002EDB E88C00                  	call	get2
 34335 00002EDE 3C0A                    	cmp	al,lf
 34336 00002EE0 75F9                    	jne	short get_cmt_end	; skip it.
 34337                                  end_commd_line_brdg: 
 34338 00002EE2 E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34339                                  
 34340                                  org_put_zero:				; make the filename in front of
 34341 00002EE5 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34342 00002EE9 47                      	inc	di
 34343 00002EEA E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34344                                  
 34345                                  end_file_slash: 			; al = "/" option char.
 34346 00002EED 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34347 00002EF1 47                      	inc	di			; and
 34348 00002EF2 AA                      	stosb				; store "/" after that.
 34349 00002EF3 EB1A                    	jmp	short org5		; continue with the rest of the line
 34350                                  
 34351                                  end_copy_file:
 34352 00002EF5 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34353 00002EFA 3C0A                    	cmp	al,lf
 34354 00002EFC 74E4                    	je	short end_commd_line_brdg
 34355 00002EFE EB0F                    	jmp	short org5
 34356                                  
 34357                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34358 00002F00 E87D00                  	call	skip_comment
 34359 00002F03 74DD                    	jz	short end_commd_line_brdg
 34360                                  
 34361 00002F05 E86200                  	call	get2
 34362 00002F08 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34363 00002F0B 74F3                    	jz	short org4
 34364 00002F0D EB08                    	jmp	short org51
 34365                                  
 34366                                  org5:					; rest of the line
 34367 00002F0F E86E00                  	call	skip_comment		; comment?
 34368 00002F12 74CE                    	jz	short end_commd_line_brdg
 34369 00002F14 E85300                  	call	get2			; not a comment.
 34370                                  
 34371                                  org51:
 34372 00002F17 AA                      	stosb				; copy the character
 34373 00002F18 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34374 00002F1A 743A                    	je	short at_quote
 34375 00002F1C 3C20                    	cmp	al,' '  ; 20h
 34376 00002F1E 77EF                    	ja	short org5
 34377                                  					; M051 - Start
 34378                                  	; 04/01/2023
 34379                                  	; ds = cs
 34380 00002F20 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34381                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34382 00002F25 7514                    	jne	short not_dh		; N: 
 34383 00002F27 3C0A                    	cmp	al,lf			; Q: is this line feed
 34384 00002F29 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34385 00002F2B 3C0D                    	cmp	al,cr			; Q: is this a cr
 34386 00002F2D 75E0                    	jne	short org5		; N: 
 34387 00002F2F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34388 00002F34 AA                      	stosb				; put cr after blank
 34389 00002F35 FE06[082C]              	inc	byte [insert_blank]
 34390                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34391                                  					; inserted
 34392 00002F39 EBD4                    	jmp	short org5
 34393                                  not_dh:					; M051 - End
 34394                                  
 34395 00002F3B 3C0A                    	cmp	al,lf			; line feed?
 34396 00002F3D 740F                    	je	short org1_brdg		; handles the next command line.
 34397 00002F3F EBCE                    	jmp	short org5		; handles next char in this line.
 34398                                  
 34399                                  org_dhlf:				; M051 - Start
 34400                                  	; 04/01/2023
 34401                                  	; ds = cs
 34402 00002F41 803E[082C]01            	cmp	byte [insert_blank],1
 34403                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34404 00002F46 7406                    	je	short org1_brdg		; Y:
 34405 00002F48 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34406 00002F4D AA                      	stosb				; put lf after blank
 34407                                  					; M051 - End
 34408                                  org1_brdg:
 34409 00002F4E C606[082C]00            	mov	byte [insert_blank],0 
 34410                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34411                                  					; M051: devicehigh
 34412 00002F53 E982FE                  	jmp	org1
 34413                                  
 34414                                  at_quote:
 34415 00002F56 803E[CC03]00            	cmp	byte [com_level],0
 34416                                  	;cmp	byte [cs:com_level],0
 34417 00002F5B 7407                    	je	short up_level
 34418                                  	;mov	byte [cs:com_level],0	; reset it.
 34419 00002F5D C606[CC03]00            	mov	byte [com_level],0
 34420 00002F62 EBAB                    	jmp	short org5
 34421                                  
 34422                                  up_level:
 34423                                  	;inc	byte [cs:com_level]	; set it.
 34424 00002F64 FE06[CC03]              	inc	byte [com_level]
 34425 00002F68 EBA5                    	jmp	short org5
 34426                                  
 34427                                  ;----------------------------------------------------------------------------
 34428                                  ;
 34429                                  ; procedure : get2
 34430                                  ;
 34431                                  ;----------------------------------------------------------------------------
 34432                                  
 34433                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34434                                  	; (SYSINIT:33FAh)
 34435                                  	; 04/01/2023
 34436                                  get2:
 34437 00002F6A E304                    	jcxz	noget
 34438                                  	;
 34439                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34440                                  	;;lods	byte ptr es:[si]
 34441                                  	; 12/12/2022
 34442 00002F6C 26                      	es	
 34443 00002F6D AC                      	lodsb
 34444                                  	;mov	al, [es:si]
 34445                                  	;inc	si
 34446                                  	;
 34447 00002F6E 49                      	dec	cx
 34448 00002F6F C3                      	retn
 34449                                  noget:
 34450 00002F70 59                      	pop	cx
 34451                                  	; 04/01/2023
 34452                                  	; ds = cs
 34453                                  	;mov	[cs:count],di ; 13/05/2019
 34454                                  	;mov	[cs:org_count],di
 34455 00002F71 893E[D203]              	mov	[count],di
 34456 00002F75 893E[D403]              	mov	[org_count],di
 34457 00002F79 31F6                    	xor	si,si
 34458                                  	;mov	[cs:chrptr],si
 34459 00002F7B 8936[D603]              	mov	[chrptr],si
 34460                                  
 34461                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34462                                  ;;ifndef MULTI_CONFIG
 34463                                  ;;	retn
 34464                                  ;;else
 34465                                  ;
 34466                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 34467                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34468                                  ;;   and the new boot menu stuff...
 34469                                  ;
 34470                                  ;	mov     cx,di
 34471                                  ;	jmp     menu_check
 34472                                  ;;endif
 34473                                  
 34474                                  	; 02/11/2022
 34475 00002F7F C3                      	retn
 34476                                  
 34477                                  ;----------------------------------------------------------------------------
 34478                                  ;
 34479                                  ; procedure : skip_comment
 34480                                  ;
 34481                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34482                                  ;in) es:si-> string
 34483                                  ;	 cx -> length.
 34484                                  ;out) zero flag not set if not found a comment string.
 34485                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34486                                  ;	  the line feed character at this moment when return.
 34487                                  ;	  ax register destroyed.
 34488                                  ;	  if found, si, cx register adjusted accordingly.
 34489                                  ;
 34490                                  ;----------------------------------------------------------------------------
 34491                                  
 34492                                  	; 04/01/2023 - Retro DOS v4.0
 34493                                  
 34494                                  skip_comment:
 34495 00002F80 E3EE                    	jcxz	noget		; get out of the organize routine.
 34496                                  
 34497                                  	; 04/01/2023
 34498                                  	; ds = cs	
 34499                                  
 34500 00002F82 803E[CC03]00            	cmp	byte [com_level],0
 34501                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34502 00002F87 752C                    	jne	short no_commt	 ; (not inside quotations)
 34503                                  
 34504 00002F89 803E[CD03]01            	cmp	byte [cmmt],1
 34505                                  	;cmp	byte [cs:cmmt],1
 34506 00002F8E 7225                    	jb	short no_commt
 34507                                  
 34508 00002F90 268A04                  	mov	al,[es:si]
 34509                                  	
 34510 00002F93 3806[CE03]              	cmp	[cmmt1],al
 34511                                  	;cmp	[cs:cmmt1],al
 34512 00002F97 751C                    	jne	short no_commt
 34513                                  
 34514 00002F99 803E[CD03]02            	cmp	byte [cmmt],2
 34515                                  	;cmp	byte [cs:cmmt],2
 34516 00002F9E 750A                    	jne	short skip_cmmt
 34517                                  
 34518 00002FA0 268A4401                	mov	al,[es:si+1]
 34519                                  	
 34520 00002FA4 3806[CF03]              	cmp	[cmmt2],al
 34521                                  	;cmp	[cs:cmmt2],al
 34522 00002FA8 750B                    	jne	short no_commt
 34523                                  skip_cmmt:
 34524 00002FAA E3C4                    	jcxz	noget		; get out of organize routine.
 34525 00002FAC 268A04                  	mov	al,[es:si]
 34526 00002FAF 46                      	inc	si
 34527 00002FB0 49                      	dec	cx
 34528 00002FB1 3C0A                    	cmp	al,lf		; line feed?
 34529 00002FB3 75F5                    	jne	short skip_cmmt
 34530                                  no_commt:
 34531 00002FB5 C3                      	retn
 34532                                  
 34533                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34534                                  %if 0
 34535                                  
 34536                                  ;ifdef	MULTI_CONFIG
 34537                                  
 34538                                  ;----------------------------------------------------------------------------
 34539                                  ;
 34540                                  ;   kbd_read: wait for keystroke
 34541                                  ;
 34542                                  ;   INPUT
 34543                                  ;       DS == CS == sysinitseg
 34544                                  ;
 34545                                  ;   OUTPUT
 34546                                  ;       Carry SET to clean boot, CLEAR otherwise
 34547                                  ;
 34548                                  ;   OTHER REGS USED
 34549                                  ;       All
 34550                                  ;
 34551                                  ;   HISTORY
 34552                                  ;       Created 16-Nov-1992 by JeffPar
 34553                                  ;
 34554                                  ;----------------------------------------------------------------------------
 34555                                  
 34556                                  kbd_read:
 34557                                          test    byte [bDisableUI],2
 34558                                          jnz     short kbd_nodelay
 34559                                  
 34560                                          push    ds              ; the bios timer tick count is incremented
 34561                                          sub     ax,ax           ; 18.2 times per second;
 34562                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 34563                                  	;mov	dx,[046Ch]	; get initial value
 34564                                  kbd_loop:
 34565                                          mov     ah,1            ;
 34566                                          int     16h             ; peek the keyboard
 34567                                          jnz	short kbd_loopdone ; something's there, get out
 34568                                          mov     ah,2            ; peek the shift states
 34569                                          int     16h             ;
 34570                                          test    al,03h          ; either right or left shift key bits set?
 34571                                          jnz	short kbd_loopdone ; yes
 34572                                          mov     ax,[046Ch]	;
 34573                                  	;sub	ax,dx           ; get difference
 34574                                  	; 15/04/2019 - Retro DOS v4.0
 34575                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34576                                  
 34577                                  	cmp     al,37           ; reached limit?
 34578                                          jb	short kbd_loop	; not yet
 34579                                  kbd_loopdone:
 34580                                          pop     ds              ; delay complete!
 34581                                  kbd_nodelay:
 34582                                          sub     bx,bx           ; assume clean boot
 34583                                          mov     ah,2            ; peek the shift states
 34584                                          int     16h             ;
 34585                                          test    al,03h          ; either right or left shift key bits set?
 34586                                          jz      short kbd_notshift ; no
 34587                                          inc     bx              ; yes
 34588                                          inc     bx
 34589                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34590                                  	or	byte [bQueryOpt],4
 34591                                  kbd_notshift:                   ;
 34592                                          mov     ah,1            ; peek the keyboard
 34593                                          int     16h             ;
 34594                                          jz	short kbd_test	; no key present
 34595                                          or      al,al           ; is it a function key?
 34596                                          jnz	short kbd_test	; no
 34597                                  
 34598                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34599                                          cmp     ah,62h          ; CTRL F5
 34600                                          je	short kbd_cfg_bypass
 34601                                  	
 34602                                          cmp     ah,3Fh          ; F5 function key?
 34603                                          jne	short kbd_notf5	; no
 34604                                  kbd_cfg_bypass:
 34605                                          mov     dx,_$CleanMsg
 34606                                          call    print
 34607                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34608                                  	or	byte [bQueryOpt],4           ;
 34609                                          jmp     short kbd_eat   ; yes, clean boot selected
 34610                                  kbd_notf5:
 34611                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34612                                          cmp     ah,65h          ; CTRL F8
 34613                                          je	short kbd_cfg_confirm
 34614                                  
 34615                                          cmp     ah,42h          ; F8 function key?
 34616                                          jne	short kbd_exit	; no
 34617                                  kbd_cfg_confirm:
 34618                                          mov     dx,_$InterMsg
 34619                                          call    print           ;
 34620                                          mov     bl,1            ; yes, interactive-boot option enabled
 34621                                          mov     [bQueryOpt],bl  ; change default setting
 34622                                  kbd_eat:                        ;
 34623                                          mov     ah,0            ;
 34624                                          int     16h             ; eat the key we assumed was a signal
 34625                                          mov	byte [secElapsed],-1
 34626                                          or      bx,bx           ;
 34627                                          jz	short kbd_clean	;
 34628                                  kbd_test:                       ;
 34629                                          cmp     bl,2            ;
 34630                                          jb	short kbd_exit	;
 34631                                  kbd_clean:                      ;
 34632                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34633                                          stc                     ; set carry to indicate abort
 34634                                          retn			;
 34635                                  kbd_exit:                       ;
 34636                                          clc                     ; clear carry to indicate success
 34637                                          retn			;
 34638                                  
 34639                                  ;----------------------------------------------------------------------------
 34640                                  ;
 34641                                  ;   set_numlock: set numlock LED
 34642                                  ;
 34643                                  ;   INPUT
 34644                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34645                                  ;
 34646                                  ;   OUTPUT
 34647                                  ;       None
 34648                                  ;
 34649                                  ;   OTHER REGS USED
 34650                                  ;       None
 34651                                  ;
 34652                                  ;   HISTORY
 34653                                  ;       Created 16-Nov-1992 by JeffPar
 34654                                  ;
 34655                                  ;----------------------------------------------------------------------------
 34656                                  
 34657                                  set_numlock:
 34658                                          push    ax
 34659                                          push    ds
 34660                                          sub     ax,ax
 34661                                          mov     ds,ax
 34662                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34663                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34664                                          jne	short not_off	; no
 34665                                          and     byte [0417h],~20h ; 0DFh
 34666                                          jmp     short set_done
 34667                                  not_off:
 34668                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 34669                                          stc
 34670                                          jne	short set_done	; no
 34671                                          or      byte [0417h],20h
 34672                                  set_done:
 34673                                          pop     ds
 34674                                          pop     ax
 34675                                          retn
 34676                                  
 34677                                  ; 16/04/2019 - Retro DOS v4.0
 34678                                  
 34679                                  ;----------------------------------------------------------------------------
 34680                                  ;
 34681                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 34682                                  ;
 34683                                  ;   INPUT
 34684                                  ;       CX == "organized" config.sys memory image length
 34685                                  ;    ES:SI -> "organized" config.sys memory image
 34686                                  ;       DS == CS == sysinitseg
 34687                                  ;
 34688                                  ;   OUTPUT
 34689                                  ;       Same as above;  the idea is that menu_check simply transforms
 34690                                  ;       a block-structured config.sys image into a conventional image,
 34691                                  ;       based on the user's block selection and any other boot-time options
 34692                                  ;       the user may have employed...
 34693                                  ;
 34694                                  ;   OTHER REGS USED
 34695                                  ;       All
 34696                                  ;
 34697                                  ;   NOTES
 34698                                  ;       [count] and [org_count] are set to the new config.sys image length
 34699                                  ;
 34700                                  ;   HISTORY
 34701                                  ;       Created 16-Mar-1992 by JeffPar
 34702                                  ;
 34703                                  ;----------------------------------------------------------------------------
 34704                                  
 34705                                  menu_check:
 34706                                  
 34707                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34708                                  ;   disable clean/interactive boot options
 34709                                  
 34710                                          push    cx              ;
 34711                                          push    si              ;
 34712                                          sub     bx,bx           ; remains ZERO until first block
 34713                                  swchk_loop:                     ;
 34714                                          call    get_char        ; get first char of current line
 34715                                          jc	short swchk_end	; hit eof
 34716                                          cmp     al,CONFIG_BEGIN ;
 34717                                          jne	short swchk_next1 ;
 34718                                          inc     bx              ; remember that we've seen a block
 34719                                          jmp     short swchk_nextline
 34720                                  swchk_next1:                    ;
 34721                                          cmp     al,CONFIG_NUMLOCK
 34722                                          jne	short swchk_next2 ;
 34723                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34724                                          jnz	short swchk_nextline ; before the first block
 34725                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34726                                          mov     byte [es:si-1],CONFIG_REM
 34727                                          jmp     short swchk_nextline
 34728                                  swchk_next2:                    ;
 34729                                          cmp     al,CONFIG_SWITCHES
 34730                                          jne	short swchk_nextline ; this line ain't it
 34731                                  swchk_scan:                     ;
 34732                                          call    get_char        ; look for /N or /F
 34733                                  swchk_scan1:                    ;
 34734                                          cmp     al,LF           ; end of line?
 34735                                          je	short swchk_nextline ; yes
 34736                                          cmp     al,'/'          ; switch-char?
 34737                                          jne	short swchk_scan ; no
 34738                                          call    get_char        ;
 34739                                          and     al,~20h ; 0DFh	; convert to upper case
 34740                                          cmp     al,[swit_n+1]
 34741                                          jne	short swchk_scan2 ; no
 34742                                          or      byte [bDisableUI],1
 34743                                          jmp	short swchk_scan ; continue looking for switches of interest
 34744                                  swchk_scan2:                    ;
 34745                                          cmp     al,[swit_f+1]
 34746                                          jne	short swchk_scan1 ; no
 34747                                          or      byte [bDisableUI],2
 34748                                          jmp     short swchk_scan ; continue looking for switches of interest
 34749                                  swchk_nextline:                 ;
 34750                                          call    skip_opt_line   ;
 34751                                          jmp     short swchk_loop ;
 34752                                  swchk_end:                      ;
 34753                                          pop     si              ;
 34754                                          pop     cx              ;
 34755                                  
 34756                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34757                                  ;   the DisableUI flag is still clear
 34758                                  
 34759                                          test    byte [bDisableUI],1
 34760                                          jnz	short menu_search
 34761                                  ;
 34762                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34763                                  ;   there is anything at all in the keyboard buffer
 34764                                  ;
 34765                                          call    kbd_read
 34766                                          jnc	short menu_search
 34767                                          jmp	menu_abort
 34768                                  
 34769                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34770                                  
 34771                                  menu_search:
 34772                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34773                                          mov     di,szMenu	;
 34774                                          call    find_block      ; find the MENU block
 34775                                          jnc	short menu_found ;
 34776                                          mov     byte [szBoot],0
 34777                                          jmp	no_selection ; not found
 34778                                  
 34779                                  ;   Process the requested menu color(s)
 34780                                  
 34781                                  menu_color:
 34782                                          push    cx              ;
 34783                                          push    dx              ;
 34784                                          mov     dx,0007h        ; default color setting
 34785                                          call    get_number	; get first number
 34786                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34787                                          mov     ch,bl           ; save it in CH
 34788                                          and     dl,0F0h         ;
 34789                                          or      dl,bl           ;
 34790                                          call    delim           ; did we hit a delimiter
 34791                                          jne	short check_color ; no, all done
 34792                                          call    get_number	; get next number
 34793                                          and     bl,0Fh		; second # is background color (for high nibble)
 34794                                          mov     dh,bl           ; save it in DH
 34795                                          and     dl,0Fh		;
 34796                                          mov     cl,4            ;
 34797                                          shl     bl,cl           ;
 34798                                          or      dl,bl           ;
 34799                                  check_color:                    ;
 34800                                          cmp     ch,dh           ; are foreground/background the same?
 34801                                          jne	short set_color	; no
 34802                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34803                                  set_color:
 34804                                          mov     [bMenuColor],dl ;
 34805                                          pop     dx              ;
 34806                                          pop     cx              ;
 34807                                          jmp	menu_nextitem
 34808                                  
 34809                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34810                                  ;   above is there simply to alleviate short jump problems)
 34811                                  
 34812                                  menu_found:
 34813                                          mov     byte [bDefBlock],1
 34814                                          mov     word [offDefBlock],0
 34815                                          mov     byte [secTimeOut],-1
 34816                                          and     byte [bQueryOpt],~2 ; 0FDh
 34817                                  
 34818                                          call    skip_opt_line   ; skip to next line
 34819                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34820                                  
 34821                                  ;   Process the menu block now
 34822                                  
 34823                                  menu_process:
 34824                                          call    get_char        ; get first char of current line
 34825                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34826                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34827                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34828                                          je	short to_menu_getdefault
 34829                                          cmp     al,CONFIG_SUBMENU
 34830                                          je	short menu_item	; go process sub-menu
 34831                                          cmp     al,CONFIG_MENUITEM
 34832                                          je	short menu_item	; go process menu item
 34833                                          cmp     al,CONFIG_MENUDEFAULT
 34834                                          je	short menu_default ; go process menu default
 34835                                          cmp     al,CONFIG_MENUCOLOR
 34836                                          je	short menu_color ; go process menu color
 34837                                          cmp     al,CONFIG_NUMLOCK
 34838                                          je	short menu_numlock ;
 34839                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34840                                          je	short menu_nextitem ;
 34841                                          call    any_delim       ; allow blank lines and such
 34842                                          je	short menu_nextitem ;
 34843                                          stc                     ;
 34844                                          call    print_error     ; non-MENU command!
 34845                                          jmp     short menu_nextitem
 34846                                  menu_numlock:
 34847                                          call    set_numlock
 34848                                          jmp     short menu_nextitem
 34849                                  to_menu_getdefault:
 34850                                          jmp     short menu_getdefault
 34851                                  
 34852                                  ;   Save the offset of the default block name, we'll need it later
 34853                                  
 34854                                  menu_default:
 34855                                          mov     [offDefBlock],si; save address of default block name
 34856                                          cmp     byte [secElapsed],0
 34857                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34858                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34859                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34860                                          call    skip_delim      ; something is typed
 34861                                          jc	short menu_nextitem ;
 34862                                          mov     si,bx           ;
 34863                                          call    get_number      ; get number (of seconds for timeout)
 34864                                          cmp     bl,90           ; limit it to a reasonable number
 34865                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34866                                          mov     bl,90           ;  display function can handle)
 34867                                  timeout_ok:                     ;
 34868                                          mov     [secTimeOut],bl ;
 34869                                  timeout_skip:
 34870                                          jmp     short menu_nextitem
 34871                                  
 34872                                  ;   Verify that this is a valid menu item by searching for the named block
 34873                                  
 34874                                  menu_item:
 34875                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34876                                          jae	short menu_nextitem ;
 34877                                          mov     di,si           ; DS:DI -> block name to search for
 34878                                          call    srch_block      ;
 34879                                          je	short menu_itemfound ;
 34880                                          stc                     ;
 34881                                          call    print_error     ; print error and pause
 34882                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34883                                  
 34884                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34885                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34886                                  ;   and CX are unmodified
 34887                                  
 34888                                  menu_itemfound:
 34889                                          inc     dx              ; otherwise, increment total block count
 34890                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34891                                          mov	[abBlockType+bx],al
 34892                                          add     bx,bx           ; of recorded block names and descriptions
 34893                                  
 34894                                  ;   There should be a description immediately following the block name on
 34895                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34896                                  ;   description...
 34897                                  
 34898                                          mov     [aoffBlockName+bx],si
 34899                                          mov     [aoffBlockDesc+bx],si
 34900                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34901                                          call    skip_token      ;
 34902                                          jc	short menu_nextitem ; hit eol/eof
 34903                                          call    skip_delim      ;
 34904                                          jc	short menu_nextitem ; hit eol/eof
 34905                                          xchg    bx,di           ;
 34906                                          mov     [aoffBlockDesc+bx],di
 34907                                  
 34908                                  menu_nextitem:
 34909                                          call    skip_opt_line   ;
 34910                                          jmp     menu_process    ; go back for more lines
 34911                                  
 34912                                  ;   Display menu items now, after determining which one is default
 34913                                  
 34914                                  menu_getdefault:
 34915                                          or      dl,dl           ; where there any valid blocks at all?
 34916                                          jnz	short menu_valid ; yes
 34917                                          sub     bx,bx           ; no, so force autoselect of 0
 34918                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34919                                  menu_valid:
 34920                                          sub     bx,bx           ;
 34921                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34922                                          mov     di,[offDefBlock];
 34923                                          or      di,di           ; does a default block exist?
 34924                                          jz	short menu_nodefault ; no
 34925                                          inc     bx              ; yes, walk name table, looking for default
 34926                                  menu_chkdefault:
 34927                                          push    bx              ;
 34928                                          add     bx,bx           ;
 34929                                          mov     si,[aoffBlockName+bx]
 34930                                          mov     cx,128          ; arbitrary maximum length of a name
 34931                                          push    ds              ;
 34932                                          push    es              ;
 34933                                          pop     ds              ;
 34934                                          call    comp_names      ; is this block the same as the default?
 34935                                          pop     ds              ;
 34936                                          pop     bx              ;
 34937                                          je	short menu_setdefault ; yes
 34938                                          inc     bx              ;
 34939                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34940                                          jbe	short menu_chkdefault ; not yet
 34941                                  menu_nodefault:
 34942                                          mov     bl,1            ; if no default, force default to #1
 34943                                  menu_setdefault:
 34944                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34945                                  
 34946                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34947                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34948                                  ;   supposed to skip menu display and run with the specified default block;
 34949                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34950                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34951                                  ;   with no timeout)
 34952                                  
 34953                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34954                                          jne	short menu_display ; no
 34955                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34956                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34957                                          jmp     not_topmenu	;
 34958                                  
 34959                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34960                                  
 34961                                  menu_display:
 34962                                          mov     ah,0Fh          ; get current video mode
 34963                                          int     10h             ;
 34964                                          mov     ah,00h          ; just re-select that mode
 34965                                          int     10h             ;
 34966                                          push    es              ;
 34967                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34968                                          mov     es,ax           ; and save the current (default) video page
 34969                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34970                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34971                                          mov     al,[es:0062h]   ;
 34972                                          mov     [bCRTPage],al   ;
 34973                                          mov     ax,[bMenuPage]	; select new page for menu
 34974                                          int     10h             ;
 34975                                          mov     ax,0600h        ; clear entire screen
 34976                                          mov     bh,[bMenuColor] ; using this color
 34977                                          sub     cx,cx           ; upper left row/col
 34978                                          ;mov	dl,[es:CRT_Cols] 
 34979                                          mov	dl,[es:4Ah]
 34980                                  	dec     dl              ;
 34981                                          ;mov	dh,[es:CRT_Rows];
 34982                                          mov	dh,[es:84h]
 34983                                  	or      dh,dh           ; # of rows valid?
 34984                                          jnz	short menu_clear ; hopefully
 34985                                          mov     dh,[bLastRow]   ; no, use a default
 34986                                  menu_clear:
 34987                                          int     10h             ; clear the screen using the req. attribute
 34988                                          pop     es              ;
 34989                                          mov     [bLastRow],dh   ; save DH
 34990                                          mov     dx,_$MenuHeader
 34991                                          call    print           ; cursor now on row 3 (numbered from 0)
 34992                                  
 34993                                          test    byte [bDisableUI],1
 34994                                          jnz     short menu_nostatus
 34995                                          mov     bh,[bMenuPage]  ;
 34996                                          mov     dh,[bLastRow]   ; restore DH
 34997                                          mov     dl,0            ; print the status line on row DH, col 0,
 34998                                          mov     ah,02h          ; now that we can trash the cursor position
 34999                                          int     10h             ;
 35000                                          mov     dx,_$StatusLine
 35001                                          call    print           ;
 35002                                          mov     ah,3            ; get cursor position
 35003                                          int     10h             ;
 35004                                          sub     dl,2            ;
 35005                                          mov     [bLastCol],dl   ; save column where status char will go
 35006                                  
 35007                                  menu_nostatus:
 35008                                          mov     bx,1            ; now prepare to display all the menu items
 35009                                  menu_disploop:
 35010                                          call    print_item	; print item #BL
 35011                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 35012                                          cmp     bl,[bMaxBlock]  ; all done?
 35013                                          jbe	short menu_disploop ; not yet
 35014                                  
 35015                                  ;   Set cursor position to just below the menu items
 35016                                  
 35017                                          mov     dl,0            ; select column
 35018                                          mov     dh,bl           ;
 35019                                          add     dh,4            ; select row below menu
 35020                                          mov     bh,[bMenuPage]  ;
 35021                                          mov     ah,02h          ; set cursor position beneath the block list
 35022                                          int     10h             ;
 35023                                  
 35024                                          mov     dx,_$MenuPrmpt
 35025                                          call    print           ;
 35026                                          call    select_item     ; make a selection, return # in BX
 35027                                          mov     dx,crlfm	
 35028                                          call    print           ;
 35029                                          push    word [bDisableUI]
 35030                                          or      byte [bDisableUI],1
 35031                                          call    show_status     ; clear the status line now
 35032                                          pop     word [bDisableUI]
 35033                                  
 35034                                  ;   Now begins the "re-organization" process...
 35035                                  
 35036                                  menu_autoselect:
 35037                                          cmp     bx,-1           ; clean boot requested?
 35038                                          jne	short normal_boot ; no
 35039                                          call    disable_autoexec; basically, add a /D to the command.com line
 35040                                  menu_abort:
 35041                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 35042                                          jmp	menu_exit	;
 35043                                  
 35044                                  normal_boot:
 35045                                          cmp     bx,-2           ; back to top-level menu?
 35046                                          jne	short not_topmenu ; no
 35047                                          mov     cx,[count]      ; yes, start all over
 35048                                          sub     si,si           ;
 35049                                          jmp     menu_search
 35050                                  
 35051                                  not_topmenu:
 35052                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35053                                          jne	short not_submenu
 35054                                          add     bx,bx           ;
 35055                                          mov     di,[aoffBlockName+bx]
 35056                                          call    srch_block      ; THIS CANNOT FAIL!
 35057                                          mov     si,di           ;
 35058                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 35059                                          jmp     menu_found
 35060                                  
 35061                                  not_submenu:
 35062                                          add     bx,bx           ; get BX -> name of selected block
 35063                                          mov     bx,[aoffBlockName+bx]
 35064                                  
 35065                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35066                                  ;   the offset relative to ES of the block name to be processed (along with
 35067                                  ;   all the "common" lines of course)
 35068                                  
 35069                                  no_selection:
 35070                                          mov     [offDefBlock],bx; save selection
 35071                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35072                                          sub     si,si           ;
 35073                                          push    ds              ;
 35074                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35075                                          sub     di,di           ;
 35076                                  
 35077                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35078                                  ;
 35079                                  ;   Work our way through the config.sys image again, this time copying
 35080                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35081                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 35082                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 35083                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35084                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35085                                  ;
 35086                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35087                                  ;   stack we're running on, then we should check it inside copy_block
 35088                                  
 35089                                  copyblock_loop:
 35090                                          push    bx              ; save selected block name
 35091                                          call    copy_block      ; process (named or common) block
 35092                                          pop     bx              ;
 35093                                          jc	short move_config ; hit eof
 35094                                  
 35095                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 35096                                  
 35097                                  copyblock_begin:
 35098                                          push    ax              ;
 35099                                          push    cx              ;
 35100                                          push    si              ;
 35101                                          push    di              ; always do "common" blocks
 35102                                          mov     di,szCommon
 35103                                          push    ds              ;
 35104                                          push    cs              ;
 35105                                          pop     ds              ;
 35106                                          call    comp_names      ;
 35107                                          pop     ds              ;
 35108                                          pop     di              ;
 35109                                          pop     si              ;
 35110                                          pop     cx              ;
 35111                                          pop     ax              ;
 35112                                          je	short copyblock_check
 35113                                          or      bx,bx           ; is there a block name to check?
 35114                                          jz	short copyblock_skip ; no
 35115                                          push    di              ;
 35116                                          mov     di,bx           ; check block against given block name
 35117                                          push    ds              ;
 35118                                          push    es              ;
 35119                                          pop     ds              ;
 35120                                          call    comp_names      ; is this the block we really want to do?
 35121                                          pop     ds              ;
 35122                                          pop     di              ;
 35123                                  copyblock_check:
 35124                                          jc	short move_config ; hit eof
 35125                                          jne	short copyblock_skip  ;
 35126                                          call    skip_opt_line   ;
 35127                                          jmp	short copyblock_loop 
 35128                                  
 35129                                  copyblock_skip:                 ;
 35130                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35131                                          call    get_char        ;
 35132                                          jc	short move_config ; hit eof
 35133                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35134                                          cmp     al,CONFIG_BEGIN ;
 35135                                          je	short copyblock_begin
 35136                                          jmp     short copyblock_skip ; anything else is just skipped
 35137                                  ;
 35138                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35139                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35140                                  ;   copy the new config.sys image to "confbot"
 35141                                  ;
 35142                                  move_config:
 35143                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35144                                          push    cx              ;
 35145                                  ;
 35146                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35147                                  ;   since the configuration name only currently exists in the "confbot" area
 35148                                  ;
 35149                                   	;mov	cx,7
 35150                                  	mov     cx,szMenu-szBoot-1
 35151                                          mov     si,szBoot	; first copy the CONFIG= part
 35152                                          inc     di              ; skip a byte, in case absolutely nothing
 35153                                                                  ; was copied to the workspace, because we always
 35154                                                                  ; zero the first byte of the workspace (below)
 35155                                  copy_boot: 
 35156                                  	;lods    byte ptr cs:[si];
 35157                                          cs
 35158                                  	lodsb
 35159                                  	mov     [di],al         ;
 35160                                          inc     di              ;
 35161                                          loop    copy_boot       ;
 35162                                  
 35163                                          push    es              ; then copy the configuration name
 35164                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 35165                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35166                                          or      si,si           ; valid?
 35167                                          jnz	short l1	; yes
 35168                                          push    cs              ;
 35169                                          pop     es              ;
 35170                                          mov     si,szCommon
 35171                                  l1:     mov     al,[es:si]      ;
 35172                                          call    any_delim       ;
 35173                                          je	short l2	;
 35174                                          mov     [di],al         ;
 35175                                          inc     si              ;
 35176                                          inc     di              ;
 35177                                          loop    l1              ;
 35178                                  l2:     mov     byte [di],lf	; terminate the configuration string
 35179                                          pop     es              ;
 35180                                  
 35181                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35182                                  
 35183                                          sub     di,di           ;
 35184                                          mov     [cs:config_envlen],di
 35185                                          sub     si,si           ;
 35186                                          pop     cx              ; recover the size of "config_wrkseg"
 35187                                  
 35188                                          push    cx              ;
 35189                                          rep     movsb           ; moved!
 35190                                          pop     cx              ;
 35191                                          mov     ax,ds           ;
 35192                                          pop     ds              ;
 35193                                  
 35194                                  ;   Now that the config_wrkseg is available once again, we shall
 35195                                  ;   use it to create an environment. The first thing to go in will be
 35196                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35197                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35198                                  ;   is empty.
 35199                                  
 35200                                          push    es              ;
 35201                                          mov     es,ax           ;
 35202                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 35203                                          mov     byte [es:0],0	;empty the environment block
 35204                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35205                                          pop     es
 35206                                  
 35207                                  ;   Before returning, restore the default video page setting but do NOT
 35208                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35209                                  ;   displayed on a different page, then it's because we don't want to see
 35210                                  ;   all the device driver/TSR goop (which goes to the default page)
 35211                                  
 35212                                  menu_done:
 35213                                          cmp     byte [bMenuPage],0
 35214                                          je	short menu_exit	;
 35215                                          push    es              ;
 35216                                          mov     ax,40h          ;
 35217                                          mov     es,ax           ;
 35218                                          mov     ax,[wCRTStart]  ;
 35219                                          mov     [es:004Eh],ax   ;
 35220                                          mov     al,[bCRTPage]   ;
 35221                                          mov     [es:0062h],al   ;
 35222                                          pop     es              ;
 35223                                  menu_exit:
 35224                                          mov     [count],cx      ; set new counts
 35225                                          mov     [org_count],cx  ;
 35226                                          sub     si,si           ; always return ES:SI pointing to config.sys
 35227                                          retn
 35228                                  
 35229                                  ;----------------------------------------------------------------------------
 35230                                  ;
 35231                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 35232                                  ;
 35233                                  ;   INPUT
 35234                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35235                                  ;
 35236                                  ;   OUTPUT
 35237                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35238                                  ;       carry set if error (eg, missing =); clear otherwise
 35239                                  ;
 35240                                  ;   OTHER REGS USED
 35241                                  ;       None
 35242                                  ;
 35243                                  ;   NOTES
 35244                                  ;       None
 35245                                  ;
 35246                                  ;   HISTORY
 35247                                  ;       Created 29-Mar-1992 by JeffPar
 35248                                  ;
 35249                                  ;----------------------------------------------------------------------------
 35250                                  
 35251                                  copy_envvar:
 35252                                          push    cx              ;
 35253                                          push    si              ;
 35254                                          push    ds              ;
 35255                                          push    es              ;
 35256                                          push    es              ;
 35257                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35258                                          pop     ds                 ; DS:SI to point to envvar
 35259                                  
 35260                                  ;   Have to calculate the length of the variable name (and if we hit
 35261                                  ;   the end of the line before we hit '=', then it's curtains for this
 35262                                  ;   config.sys line)
 35263                                  ;
 35264                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35265                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35266                                  ;   menu block existed (in order to prevent the creation of an environment)
 35267                                  
 35268                                          sub     cx,cx           ;
 35269                                  copy_varlen:                    ;
 35270                                          lodsb                   ;
 35271                                          or      al,al           ; NULL?
 35272                                          stc                     ;
 35273                                          jz	short copy_envexit ; yes, abort
 35274                                          cmp     al,cr          ;
 35275                                          stc                     ;
 35276                                          je	short copy_envexit
 35277                                          cmp     al,lf          ;
 35278                                          stc                     ;
 35279                                          je	short copy_envexit
 35280                                          inc     cx              ;
 35281                                          cmp     al,'='          ;
 35282                                          jne	short copy_varlen
 35283                                          mov     al,0            ;
 35284                                          mov     ah,[si]         ; save char after '='
 35285                                          sub     si,cx           ; back up to given varname
 35286                                          dec     cx              ; CX == # of bytes in varname
 35287                                          sub     di,di           ; start looking for DS:SI at ES:0
 35288                                  copy_varsrch:
 35289                                          cmp     byte [es:di],al
 35290                                          je	short copy_envprep ; search failed, just copy var
 35291                                          mov     bx,di           ; ES:BX -> start of this varname
 35292                                          push    cx              ;
 35293                                          push    si              ;
 35294                                          repe    cmpsb           ;
 35295                                          pop     si              ;
 35296                                          pop     cx              ;
 35297                                          jne	short copy_varnext ; no match, skip to next varname
 35298                                          cmp     byte [es:di],'='
 35299                                          jne     short copy_varnext ; no match, there's more characters
 35300                                  
 35301                                  ;   Previous occurrence of variable has been found; determine the
 35302                                  ;   entire length and then destroy it
 35303                                  
 35304                                          mov     cx,-1           ;
 35305                                          repne   scasb           ; guaranteed to get null (since we put it there)
 35306                                          push    si              ;
 35307                                          mov     si,di           ;
 35308                                          mov     di,bx           ;
 35309                                          mov     cx,[cs:config_envlen]
 35310                                          sub     cx,si           ; destroy variable now
 35311                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35312                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 35313                                  
 35314                                  	rep	; 0F3h
 35315                                  	es	; 26h
 35316                                  	movsb	; 0A4h
 35317                                  
 35318                                  	pop     si
 35319                                  copy_envprep:
 35320                                          cmp     ah,cr          ; if there is nothing after the '='
 35321                                          je	short copy_envdel ; then just exit with variable deleted
 35322                                          cmp     ah,lf           ;
 35323                                          je	short copy_envdel
 35324                                          jmp     short copy_envloop
 35325                                  
 35326                                  copy_varnext:                   ;
 35327                                          push    cx              ;
 35328                                          mov     cx,-1           ;
 35329                                          repne   scasb           ;
 35330                                          pop     cx              ;
 35331                                          jmp	short copy_varsrch
 35332                                  
 35333                                  copy_envloop:                   ;
 35334                                          lodsb                   ;
 35335                                          cmp     al,cr           ;
 35336                                          je	short copy_envdone
 35337                                          cmp     al,lf           ;
 35338                                          je	short copy_envdone
 35339                                          stosb                   ;
 35340                                          jmp     short copy_envloop
 35341                                  
 35342                                  copy_envdone:                   ;
 35343                                          sub     al,al           ; do SUB to clear carry as well
 35344                                          stosb                   ; always null-terminate these puppies
 35345                                  copy_envdel:                    ;
 35346                                          mov     [es:di],al      ; and stick another null to terminate the env.
 35347                                          mov     [cs:config_envlen],di
 35348                                  
 35349                                  copy_envexit:                   ;
 35350                                          pop     es              ;
 35351                                          pop     ds              ;
 35352                                          pop     si              ;
 35353                                          pop     cx              ;
 35354                                  
 35355                                  copy_done:	; 18/12/2022
 35356                                          retn
 35357                                  
 35358                                  ;----------------------------------------------------------------------------
 35359                                  ;
 35360                                  ;   copy_block:  copy the current block to the new config.sys workspace
 35361                                  ;
 35362                                  ;   INPUT
 35363                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35364                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35365                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35366                                  ;             config.sys image) where the current block is to be copied
 35367                                  ;
 35368                                  ;   OUTPUT
 35369                                  ;       Same as above
 35370                                  ;       AL also equals the last character read from the organized image
 35371                                  ;
 35372                                  ;   OTHER REGS USED
 35373                                  ;       All
 35374                                  ;
 35375                                  ;   NOTES
 35376                                  ;       None
 35377                                  ;
 35378                                  ;   HISTORY
 35379                                  ;       Created 16-Mar-1992 by JeffPar
 35380                                  ;
 35381                                  ;----------------------------------------------------------------------------
 35382                                  
 35383                                  copy_block:
 35384                                          call    get_char        ; check for include
 35385                                          jc	short copy_done	;
 35386                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35387                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35388                                          je	short copy_done ;
 35389                                  
 35390                                          cmp     al,CONFIG_INCLUDE ; 'J'
 35391                                          mov     al,ah           ; AL == the original line code
 35392                                          jne	short copy_line	; not an "include" line
 35393                                  
 35394                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35395                                  ;   never try to include the block again (no infinite include loops please),
 35396                                  ;   then search for the named block and call copy_block again.
 35397                                  
 35398                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 35399                                          push    di              ;
 35400                                  
 35401                                          mov     di,szMenu
 35402                                          call    comp_names_safe ; don't allow INCLUDE MENU
 35403                                          je	short copy_skip	;
 35404                                  
 35405                                          mov     di,szCommon
 35406                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35407                                          je	short copy_skip	;
 35408                                  
 35409                                          mov     di,si           ; try to find the block
 35410                                          call    srch_block      ;
 35411                                          mov     dx,di           ;
 35412                                          pop     di              ;
 35413                                          jne	short copy_error ; no such block
 35414                                          push    cx              ;
 35415                                          mov     cx,bx           ;
 35416                                          push    si              ;
 35417                                          dec     dx              ;
 35418                                          mov     si,dx           ;
 35419                                          call    skip_line       ; skip the rest of the "block name" line
 35420                                          call    copy_block      ; and copy in the rest of that block
 35421                                          pop     si              ;
 35422                                          pop     cx              ;
 35423                                          sub     al,al           ; force skip_opt_line to skip...
 35424                                          jmp     short copy_nextline
 35425                                  
 35426                                  copy_skip:
 35427                                          pop     di
 35428                                  copy_error:
 35429                                          clc                     ;
 35430                                          call    print_error     ; note that carry is clear, no pause
 35431                                          jmp     short copy_nextline
 35432                                  
 35433                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35434                                  
 35435                                  copy_line:
 35436                                          mov     [di],al         ;
 35437                                          inc     di              ;
 35438                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 35439                                          jb	short copy_nextline ; no
 35440                                          cmp     byte [cs:config_multi],0
 35441                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35442                                          call    get_linenum	; BX == line # of line @ES:SI
 35443                                          mov     [di],bx         ; stash it immediately following the line code
 35444                                          inc     di              ;
 35445                                          inc     di              ;
 35446                                          jmp     short copy_next ;
 35447                                  copy_loop:                      ;
 35448                                          call    get_char        ;
 35449                                          jc	short copy_done ; end of file
 35450                                          mov     [di],al         ;
 35451                                          inc     di              ;
 35452                                  copy_next:
 35453                                          cmp     al,lf ; 0Ah	; done with line?
 35454                                          jne	short copy_loop	; nope
 35455                                  
 35456                                  copy_nextline:
 35457                                          call    skip_opt_line   ;
 35458                                          jmp     short copy_block
 35459                                  
 35460                                  	; 18/12/2022
 35461                                  ;copy_done:
 35462                                          ;retn
 35463                                  
 35464                                  ;----------------------------------------------------------------------------
 35465                                  ;
 35466                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 35467                                  ;
 35468                                  ;   INPUT
 35469                                  ;    ES:SI -> some line in the config.sys memory image
 35470                                  ;
 35471                                  ;   OUTPUT
 35472                                  ;       BX == line # (relative to 1)
 35473                                  ;
 35474                                  ;   OTHER REGS USED
 35475                                  ;       DX
 35476                                  ;
 35477                                  ;   NOTES
 35478                                  ;       None
 35479                                  ;
 35480                                  ;   HISTORY
 35481                                  ;       Created 16-Mar-1992 by JeffPar
 35482                                  ;
 35483                                  ;----------------------------------------------------------------------------
 35484                                  
 35485                                  get_linenum:
 35486                                          push    ax              ;
 35487                                          sub     bx,bx           ; BX == line # (to be returned)
 35488                                          push    cx              ;
 35489                                          mov     dx,si           ; DX == the offset we're looking for
 35490                                          push    si              ;
 35491                                          mov     cx,[cs:count]   ;
 35492                                          sub     si,si           ; prepare to scan entire file
 35493                                  get_linenum_loop:               ;
 35494                                          call    skip_line       ;
 35495                                          jc	short get_linenum_done
 35496                                          inc     bx              ;
 35497                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 35498                                          jb	short get_linenum_loop ; no
 35499                                  get_linenum_done:               ;
 35500                                          pop     si              ;
 35501                                          pop     cx              ;
 35502                                          pop     ax              ;
 35503                                          retn
 35504                                  
 35505                                  ;----------------------------------------------------------------------------
 35506                                  ;
 35507                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 35508                                  ;
 35509                                  ;   INPUT
 35510                                  ;       ES -> config.sys image
 35511                                  ;    ES:DI -> block name to find
 35512                                  ;
 35513                                  ;   OUTPUT
 35514                                  ;       ZF flag set, if found
 35515                                  ;    ES:DI -> just past the name in the block heading, if found
 35516                                  ;       BX == # bytes remaining from that point, if found
 35517                                  ;
 35518                                  ;   OTHER REGS USED
 35519                                  ;       None
 35520                                  ;
 35521                                  ;   NOTES
 35522                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35523                                  ;       config.sys image, not merely the remaining portion, and that it
 35524                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35525                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35526                                  ;
 35527                                  ;   HISTORY
 35528                                  ;       Created 16-Mar-1992 by JeffPar
 35529                                  ;
 35530                                  ;----------------------------------------------------------------------------
 35531                                  
 35532                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35533                                          push    ax              ;
 35534                                          push    cx              ;
 35535                                          mov     cx,[cs:count]   ;
 35536                                          push    si              ;
 35537                                          sub     si,si           ;
 35538                                          push    ds              ;
 35539                                          push    es              ;
 35540                                          pop     ds              ;
 35541                                          call    find_block      ;
 35542                                          mov     di,si           ;
 35543                                          mov     bx,cx           ;
 35544                                          pop     ds              ;
 35545                                          pop     si              ;
 35546                                          pop     cx              ;
 35547                                          pop     ax              ;
 35548                                  find_exit: ; 16/04/2019
 35549                                          retn			;
 35550                                  
 35551                                  ;----------------------------------------------------------------------------
 35552                                  ;
 35553                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 35554                                  ;
 35555                                  ;   INPUT
 35556                                  ;    DS:DI -> block name to find
 35557                                  ;    ES:SI -> remainder of config.sys image
 35558                                  ;       CX == remaining size of config.sys image
 35559                                  ;
 35560                                  ;   OUTPUT
 35561                                  ;       ZF flag set, if found (also, CF set if EOF)
 35562                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35563                                  ;       CX == # bytes remaining from that point
 35564                                  ;
 35565                                  ;   OTHER REGS USED
 35566                                  ;       AX
 35567                                  ;
 35568                                  ;   NOTES
 35569                                  ;       This differs from "srch_block" in that it searches only the
 35570                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35571                                  ;       pointing to where the search left off, and that it takes a pointer
 35572                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35573                                  ;
 35574                                  ;   HISTORY
 35575                                  ;       Created 16-Mar-1992 by JeffPar
 35576                                  ;
 35577                                  ;----------------------------------------------------------------------------
 35578                                  
 35579                                  find_block:
 35580                                          call    get_char        ; get line code
 35581                                          jc	short find_exit	; end of file
 35582                                          and     al,~CONFIG_OPTION_QUERY
 35583                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 35584                                          je	short check_line ; no
 35585                                          cmp     al,CONFIG_INCLUDE
 35586                                          jne	short next_line	;
 35587                                          or	byte [cs:config_multi],1
 35588                                          jmp     short next_line ;
 35589                                  check_line:
 35590                                          or      byte [cs:config_multi],1
 35591                                          call    comp_names      ; compare block names
 35592                                          jbe	short find_exit	; end of file, or names matched
 35593                                  next_line:
 35594                                          call    skip_opt_line   ; no, so skip to next line
 35595                                          jmp	short find_block  ;
 35596                                  ;find_exit:
 35597                                  ;	retn
 35598                                  
 35599                                  ;----------------------------------------------------------------------------
 35600                                  ;
 35601                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 35602                                  ;
 35603                                  ;   INPUT
 35604                                  ;    DS:DI -> keyword to compare
 35605                                  ;    ES:SI -> position in config.sys
 35606                                  ;       CX == remaining bytes in config.sys
 35607                                  ;
 35608                                  ;   OUTPUT
 35609                                  ;       ZF flag set, if match (also, CF set if EOF)
 35610                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35611                                  ;       CX == # bytes remaining from that point
 35612                                  ;
 35613                                  ;   OTHER REGS USED
 35614                                  ;       AX
 35615                                  ;
 35616                                  ;   NOTES
 35617                                  ;       None
 35618                                  ;
 35619                                  ;   HISTORY
 35620                                  ;       Created 16-Mar-1992 by JeffPar
 35621                                  ;
 35622                                  ;----------------------------------------------------------------------------
 35623                                  
 35624                                  comp_names:
 35625                                          push    di              ;
 35626                                  comp_loop:                      ;
 35627                                          call    get_char        ;
 35628                                          jc	short comp_exit	;
 35629                                          call    any_delim       ; is next character a delimiter?
 35630                                          mov     ah,[di]         ; (get next character we're supposed to match)
 35631                                          je	short comp_almost ; yes, it *could* be a match
 35632                                          inc     di              ;
 35633                                          and     ax,~2020h ; 0DFDFh 
 35634                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35635                                          cmp     al,ah           ; match?
 35636                                          je	short comp_loop ; yes, keep looking at the characters
 35637                                          clc                     ; prevent erroneous eof indication: clear carry
 35638                                  comp_exit:                      ;
 35639                                          pop     di              ;
 35640                                          retn			;
 35641                                  comp_almost:                    ;
 35642                                          xchg    al,ah           ; we don't know for sure if it's a match
 35643                                          call    any_delim       ; until we verify that the second string has
 35644                                          xchg    al,ah           ; been exhausted also...
 35645                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 35646                                  
 35647                                  ;----------------------------------------------------------------------------
 35648                                  
 35649                                  comp_names_safe:
 35650                                          push    ax
 35651                                          push    cx
 35652                                          push	si
 35653                                          push    ds
 35654                                          push    cs
 35655                                          pop     ds
 35656                                          call    comp_names
 35657                                          pop     ds
 35658                                  	pop	si
 35659                                          pop     cx
 35660                                          pop     ax
 35661                                          retn
 35662                                  
 35663                                  ;----------------------------------------------------------------------------
 35664                                  ;
 35665                                  ;   print_item:  display menu item #BL
 35666                                  ;
 35667                                  ;   INPUT
 35668                                  ;       BL == menu item # to display
 35669                                  ;
 35670                                  ;   OUTPUT
 35671                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35672                                  ;
 35673                                  ;   OTHER REGS USED
 35674                                  ;       None
 35675                                  ;
 35676                                  ;   NOTES
 35677                                  ;       This function saves/restores the current cursor position, so you
 35678                                  ;       needn't worry about it.
 35679                                  ;
 35680                                  ;   HISTORY
 35681                                  ;       Created 16-Mar-1992 by JeffPar
 35682                                  ;
 35683                                  ;----------------------------------------------------------------------------
 35684                                  
 35685                                  print_item:		; prints menu item #BL (1 to N)
 35686                                          push    ax              ;
 35687                                          push    bx              ;
 35688                                          push    cx              ;
 35689                                          push    dx              ;
 35690                                          push    si              ;
 35691                                          mov     ah,03h          ; get cursor position
 35692                                          mov     bh,[bMenuPage]  ; always page zero
 35693                                          int     10h             ; DH/DL = row/column
 35694                                          push    dx              ; save it
 35695                                          mov     ah,02h          ; set cursor position
 35696                                          mov     dh,bl           ;
 35697                                          add     dh,3            ;
 35698                                          mov     dl,5            ;
 35699                                          int     10h             ; set cursor position for correct row/col
 35700                                          mov     al,bl           ;
 35701                                          add     al,'0'          ; convert menu item # to ASCII digit
 35702                                          mov     ah,[bMenuColor] ; normal attribute
 35703                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35704                                          jne	short print_other ; no
 35705                                          or      ah,70h          ; yes, set bgnd color to white
 35706                                          mov     ch,ah           ;
 35707                                          mov     cl,4            ;
 35708                                          rol     ch,cl           ;
 35709                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35710                                          jne	short print_other ; no
 35711                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35712                                  print_other:                    ;
 35713                                          mov     bh,0            ;
 35714                                          add     bx,bx           ;
 35715                                          mov     di,[aoffBlockDesc+bx]
 35716                                          mov     bl,ah           ; put the attribute in the correct register now
 35717                                          mov     bh,[bMenuPage]  ; get correct video page #
 35718                                          mov     ah,09h          ; write char/attr
 35719                                          mov     cx,1            ;
 35720                                          int     10h             ;
 35721                                          inc     dl              ; increment column
 35722                                          mov     ah,02h          ;
 35723                                          int     10h             ;
 35724                                          ;mov	ax,0900h+'.'    ;
 35725                                          mov	ax,092Eh
 35726                                  	int     10h             ; display '.'
 35727                                          inc     dl              ; increment column
 35728                                          mov     ah,02h          ;
 35729                                          int     10h             ;
 35730                                          ;mov	ax,0900h+' '    ;
 35731                                          mov	ax,0920h
 35732                                  	int     10h             ; display ' '
 35733                                          inc     dl              ; increment column
 35734                                          mov     ah,02h          ;
 35735                                          int     10h             ;
 35736                                          push    es              ;
 35737                                  print_loop:                     ;
 35738                                          mov     al,[es:di]	; get a character of the description
 35739                                          inc     di              ;
 35740                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35741                                          jne	short print_nontab ;
 35742                                          mov     al,' '          ;
 35743                                  print_nontab:                   ;
 35744                                          cmp     al,' '          ;
 35745                                          jb	short print_done ; stop at the 1st character < space
 35746                                          cmp     al,'$'          ;
 35747                                          je	short print_done ; also stop on $
 35748                                          mov     ah,09h          ; display function #
 35749                                          int     10h             ;
 35750                                          inc     dl              ; increment column
 35751                                          cmp     dl,78           ; far enough?
 35752                                          jae	short print_done ; yes
 35753                                          mov     ah,02h          ;
 35754                                          int     10h             ;
 35755                                          jmp     print_loop      ;
 35756                                  print_done:                     ;
 35757                                          pop     es              ;
 35758                                          pop     dx              ;
 35759                                          mov     ah,02h          ;
 35760                                          int     10h             ; restore previous row/col
 35761                                          pop     si              ;
 35762                                          pop     dx              ;
 35763                                          pop     cx              ;
 35764                                          pop     bx              ;
 35765                                          pop     ax              ;
 35766                                          retn			;
 35767                                  
 35768                                  ;----------------------------------------------------------------------------
 35769                                  ;
 35770                                  ;   select_item:  wait for user to select menu item, with time-out
 35771                                  ;
 35772                                  ;   INPUT
 35773                                  ;       None
 35774                                  ;
 35775                                  ;   OUTPUT
 35776                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35777                                  ;       Selected menu item highlighted
 35778                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35779                                  ;
 35780                                  ;   OTHER REGS USED
 35781                                  ;       None
 35782                                  ;
 35783                                  ;   NOTES
 35784                                  ;       None
 35785                                  ;
 35786                                  ;   HISTORY
 35787                                  ;       Created 16-Mar-1992 by JeffPar
 35788                                  ;
 35789                                  ;----------------------------------------------------------------------------
 35790                                  
 35791                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35792                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35793                                          mov     al,bl           ;
 35794                                          call    disp_num        ;
 35795                                          call    show_status     ; display current interactive status
 35796                                          cmp     byte [secTimeOut],-1
 35797                                          je	short input_key	; no time-out, just go to input
 35798                                          mov     ah,GET_TIME ; 2Ch
 35799                                          int     21h             ;
 35800                                          mov     bh,dh           ; BH = initial # of seconds
 35801                                  check_time:
 35802                                          mov     al,[secTimeOut] ;
 35803                                          sub     al,[secElapsed] ;
 35804                                          jae	short show_time	;
 35805                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35806                                          mov     byte [secElapsed],0
 35807                                          jmp	select_done	; time's up!
 35808                                  show_time:
 35809                                          push    bx              ;
 35810                                          mov     bl,al           ; save # in BL
 35811                                          mov     bh,[bMenuPage]  ;
 35812                                          mov     ah,03h          ; get cursor position
 35813                                          int     10h             ;
 35814                                          push    dx              ;
 35815                                  	add	dl,8		; move cursor to the right
 35816                                          mov     ah,02h          ; set cursor position
 35817                                          int     10h             ;
 35818                                          mov     dx,_$TimeOut
 35819                                          call    print           ; print the "Time remaining: " prompt
 35820                                          mov     al,bl           ; recover # from BL
 35821                                          cbw                     ; this works because AL is always <= 90
 35822                                          mov     cl,10           ;
 35823                                          div     cl              ; AL = tens digit, AH = ones digit
 35824                                          mov     cl,ah           ;
 35825                                          add     al,'0'          ;
 35826                                          mov     ah,0Eh          ;
 35827                                          int     10h             ; write TTY tens digit
 35828                                          mov     al,cl           ;
 35829                                          add     al,'0'          ;
 35830                                          mov     ah,0Eh          ;
 35831                                          int     10h             ; write TTY ones digit
 35832                                          pop     dx
 35833                                          mov     ah,02h          ; set cursor position back to where it was
 35834                                          int     10h             ;
 35835                                          pop     bx              ;
 35836                                  input_key:
 35837                                          mov     ah,RAW_CON_IO ; 6
 35838                                          mov     dl,0FFh         ; input request
 35839                                          int     21h             ;
 35840                                          jnz	short got_key	;
 35841                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35842                                          je	short input_key	; no, just go back to input
 35843                                          mov     ah,GET_TIME     ;
 35844                                          int     21h             ; DH = seconds
 35845                                          mov     ah,dh           ;
 35846                                          sub     dh,bh           ; should generally be zero or one
 35847                                          mov     bh,ah           ;
 35848                                          jnc	short got_time	;
 35849                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35850                                  got_time:
 35851                                          or      dh,dh           ; any change?
 35852                                          jz	short input_key	; no
 35853                                          add     [secElapsed],dh ;
 35854                                          jmp	short check_time ;
 35855                                  got_key:
 35856                                          push    ax              ;
 35857                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35858                                          xchg    [secTimeOut],ax
 35859                                          cmp     al,-1           ; was time-out already disabled?
 35860                                          je	short timeout_disabled ; yes
 35861                                          push    bx              ; let's disable # seconds display
 35862                                          mov     ax,0A20h        ; write multiple spaces
 35863                                          mov     bx,[bMenuColor]
 35864                                          mov     cx,80           ; 80 of them, to be safe
 35865                                          int     10h             ; to completely obliterate # seconds display
 35866                                          pop     bx   		;
 35867                                  
 35868                                  timeout_disabled:
 35869                                          pop     ax              ;
 35870                                          or      al,al           ; extended key pressed?
 35871                                          jnz	short normal_key ; no
 35872                                          int     21h             ; get the next part of the key then
 35873                                          jz	short input_key	; hmmm, what happened to the second part?
 35874                                  
 35875                                          cmp     al,48h          ; up arrow?
 35876                                          jne	short not_up	; no
 35877                                          cmp     bl,1            ; are we as up as up can get?
 35878                                          jbe	short input_key	; yes, ignore it
 35879                                          dec     byte [bDefBlock] ;
 35880                                          call    print_item      ; re-print the current item
 35881                                          dec     bl              ; and then print the new current item
 35882                                          jmp     short print1
 35883                                  not_up:
 35884                                          cmp     al,50h          ; down arrow?
 35885                                          jne	short not_down	; no
 35886                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35887                                          jae	short to_input_key ; yes, ignore it
 35888                                          inc     byte [bDefBlock] ;
 35889                                          call    print_item      ; re-print the current item
 35890                                          inc     bx              ; and then print the new current item
 35891                                  print1: 
 35892                                  	mov     al,bl           ;
 35893                                  print2: 
 35894                                  	call    print_item      ;
 35895                                          call    disp_num        ;
 35896                                  to_input_key:
 35897                                          jmp     input_key       ;
 35898                                  not_down:
 35899                                          test    byte [bDisableUI],1
 35900                                          jnz	short to_input_key ; don't allow F8 or F5
 35901                                          cmp     al,42h          ; F8 function key?
 35902                                          jne	short not_f8	; no
 35903                                          xor     byte [bQueryOpt],1
 35904                                          call    show_status     ;
 35905                                          jmp     input_key	;
 35906                                  not_f8:
 35907                                          cmp     al,3Fh          ; F5 function key?
 35908                                          jne	short to_input_key ; no
 35909                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35910                                          mov     al,' '          ; don't want to display anything really;
 35911                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35912                                  
 35913                                  normal_key:
 35914                                          cmp     al,0Dh          ; Enter?
 35915                                          je	short select_done ; yes
 35916                                          cmp     al,08h          ; backspace?
 35917                                          jne	short not_backspace ; no
 35918                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35919                                          retn			;
 35920                                  not_backspace:
 35921                                          sub     al,'0'          ; is greater than '0'?
 35922                                          jbe	short to_input_key ; no
 35923                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35924                                          ja	short to_input_key ; no
 35925                                          mov	[bDefBlock],al  ;
 35926                                          call    print_item      ; redisplay the current selection
 35927                                          mov     bl,al           ; set new selection
 35928                                          jmp	short print2
 35929                                  
 35930                                  select_done:
 35931                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35932                                          mov     al,bl           ;
 35933                                          add     al,'0'          ; convert it into a digit, then display it
 35934                                  
 35935                                  	; fall into disp_input
 35936                                  
 35937                                  ; 16/04/2019 - Retro DOS v4.0
 35938                                  
 35939                                  ;----------------------------------------------------------------------------
 35940                                  ;
 35941                                  ;   disp_input:  display a single character + cr/lf
 35942                                  ;
 35943                                  ;   INPUT
 35944                                  ;       AL == character to display
 35945                                  ;
 35946                                  ;   OUTPUT
 35947                                  ;       None
 35948                                  ;
 35949                                  ;   OTHER REGS USED
 35950                                  ;       None
 35951                                  ;
 35952                                  ;   NOTES
 35953                                  ;       This function is used not only for the menu input selection but
 35954                                  ;       also for the interactive line prompting (the y/n/a thing).
 35955                                  ;
 35956                                  ;   HISTORY
 35957                                  ;       Created 16-Mar-1992 by JeffPar
 35958                                  ;
 35959                                  ;----------------------------------------------------------------------------
 35960                                  
 35961                                  disp_input:
 35962                                          push    ax
 35963                                          cmp     al,' '
 35964                                          jae	short disp_ok
 35965                                          mov     al,' '
 35966                                  disp_ok:
 35967                                          mov     dl,al
 35968                                          mov     ah,STD_CON_OUTPUT ; 2
 35969                                          int     21h
 35970                                          mov     dx,crlfm
 35971                                          call    print
 35972                                          pop     ax
 35973                                          retn
 35974                                  
 35975                                  ;----------------------------------------------------------------------------
 35976                                  
 35977                                  disp_num:
 35978                                          push    bx
 35979                                          add     al,'0'
 35980                                          mov     ah,0Ah
 35981                                          mov     bx,[bMenuColor]
 35982                                          mov     cx,1
 35983                                          int     10h
 35984                                          pop     bx
 35985                                          retn
 35986                                  
 35987                                  ;----------------------------------------------------------------------------
 35988                                  ;
 35989                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35990                                  ;
 35991                                  ;   INPUT
 35992                                  ;       None
 35993                                  ;
 35994                                  ;   OUTPUT
 35995                                  ;       None
 35996                                  ;
 35997                                  ;   OTHER REGS USED
 35998                                  ;       None
 35999                                  ;
 36000                                  ;   NOTES
 36001                                  ;       None
 36002                                  ;
 36003                                  ;   HISTORY
 36004                                  ;       Created 16-Mar-1992 by JeffPar
 36005                                  ;
 36006                                  ;----------------------------------------------------------------------------
 36007                                  
 36008                                  show_status:
 36009                                          push    bx              ; BL = video page #
 36010                                          mov     bx,[bMenuColor]
 36011                                          mov     ah,03h          ; get cursor position
 36012                                          int     10h             ;
 36013                                          push    dx              ; save it
 36014                                          mov     ah,02h          ; set cursor position
 36015                                          mov     dx,[bLastCol]   ; set correct row/col
 36016                                          test    byte [bDisableUI],1
 36017                                          jz	short show_onoff ; just show on/off
 36018                                          mov     dl,0            ;
 36019                                          int     10h             ;
 36020                                          mov     ax,0A20h        ; write multiple spaces
 36021                                          mov     cx,80           ; 80 of them, to be exact
 36022                                          int     10h             ; to obliterate the status line
 36023                                          jmp     short show_done ;
 36024                                  show_onoff: 
 36025                                          int     10h
 36026                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 36027                                  		; AL = character, BH = display page - alpha mode
 36028                                  		; BL = color of character (graphics mode, PCjr only)
 36029                                  		; CX = number of times to write character
 36030                                  
 36031                                          mov     al,[_$NO]	; assume OFF
 36032                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36033                                          jne	short show_noton ; no
 36034                                          mov     al,[_$YES]	; yes
 36035                                  show_noton:                     ;
 36036                                          mov     ah,0Eh          ; write TTY
 36037                                          int     10h             ;
 36038                                  show_done:                      ;
 36039                                          pop     dx              ;
 36040                                          mov     ah,02h          ;
 36041                                          int     10h             ; restore original cursor position
 36042                                          pop     bx              ;
 36043                                          retn			;
 36044                                  
 36045                                  ; 16/04/2019 - Retro DOS v4.0
 36046                                  
 36047                                  ;----------------------------------------------------------------------------
 36048                                  ;
 36049                                  ;   skip_token: advances ES:SI/CX past the current token
 36050                                  ;
 36051                                  ;   INPUT
 36052                                  ;    ES:SI -> position in config.sys
 36053                                  ;       CX == remaining bytes in config.sys
 36054                                  ;
 36055                                  ;   OUTPUT
 36056                                  ;       CF set if EOL/EOF hit
 36057                                  ;       AL == 1st char of delimiter
 36058                                  ;    ES:SI -> just past the delimiter
 36059                                  ;       CX == # bytes remaining from that point
 36060                                  ;
 36061                                  ;   OTHER REGS USED
 36062                                  ;       AX
 36063                                  ;
 36064                                  ;   NOTES
 36065                                  ;       None
 36066                                  ;
 36067                                  ;   HISTORY
 36068                                  ;       Created 16-Mar-1992 by JeffPar
 36069                                  ;
 36070                                  ;----------------------------------------------------------------------------
 36071                                  
 36072                                  skip_token:
 36073                                          call    get_char
 36074                                          jc	short skip_token_done
 36075                                          call    any_delim
 36076                                          jne	short skip_token
 36077                                  skip_check_eol:
 36078                                          cmp     al,cr ; 0Dh
 36079                                          je	short skip_token_eol
 36080                                          cmp     al,lf ; 0Ah
 36081                                          je	short skip_token_eol
 36082                                          clc
 36083                                          ;jmp	short skip_token_done
 36084                                  	retn
 36085                                  skip_token_eol:
 36086                                          stc
 36087                                  skip_token_done:
 36088                                          retn
 36089                                  
 36090                                  ;----------------------------------------------------------------------------
 36091                                  ;
 36092                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36093                                  ;
 36094                                  ;   INPUT
 36095                                  ;    ES:SI -> position in config.sys
 36096                                  ;       CX == remaining bytes in config.sys
 36097                                  ;
 36098                                  ;   OUTPUT
 36099                                  ;       CF set if EOF hit
 36100                                  ;       AL == 1st char of token
 36101                                  ;    ES:SI -> just past the token
 36102                                  ;       CX == # bytes remaining from that point
 36103                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36104                                  ;
 36105                                  ;   OTHER REGS USED
 36106                                  ;       AX
 36107                                  ;
 36108                                  ;   NOTES
 36109                                  ;       None
 36110                                  ;
 36111                                  ;   HISTORY
 36112                                  ;       Created 16-Mar-1992 by JeffPar
 36113                                  ;
 36114                                  ;----------------------------------------------------------------------------
 36115                                  
 36116                                  skip_delim:       ; returns carry set if eol/eof
 36117                                          call    get_char        ;
 36118                                          lea     bx,[si-1]       ; also returns BX -> next token
 36119                                          jc	short skip_token_done ;
 36120                                          call    delim           ;
 36121                                          je	short skip_delim ;
 36122                                          jmp	short skip_check_eol  ; 13/05/2019
 36123                                  
 36124                                  ;----------------------------------------------------------------------------
 36125                                  ;
 36126                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36127                                  ;
 36128                                  ;   INPUT
 36129                                  ;       AL == last character read
 36130                                  ;    ES:SI -> position in config.sys
 36131                                  ;       CX == remaining bytes in config.sys
 36132                                  ;
 36133                                  ;   OUTPUT
 36134                                  ;       CF set if EOF hit
 36135                                  ;       AL == 1st char of new line
 36136                                  ;    ES:SI -> just past 1st char of new line
 36137                                  ;       CX == # bytes remaining from that point
 36138                                  ;
 36139                                  ;   OTHER REGS USED
 36140                                  ;       AX
 36141                                  ;
 36142                                  ;   NOTES
 36143                                  ;       In other words, the purpose here is to skip to the next line,
 36144                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36145                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36146                                  ;
 36147                                  ;   HISTORY
 36148                                  ;       Created 16-Mar-1992 by JeffPar
 36149                                  ;
 36150                                  ;----------------------------------------------------------------------------
 36151                                  
 36152                                  skip_opt_line:
 36153                                          cmp     al,lf ; 0Ah
 36154                                          je	short skip_line_done
 36155                                       
 36156                                  	; fall into skip_line
 36157                                  
 36158                                  ;----------------------------------------------------------------------------
 36159                                  ;
 36160                                  ;   skip_line: skip to the next line
 36161                                  ;
 36162                                  ;   INPUT
 36163                                  ;    ES:SI -> position in config.sys
 36164                                  ;       CX == remaining bytes in config.sys
 36165                                  ;
 36166                                  ;   OUTPUT
 36167                                  ;       CF set if EOF hit
 36168                                  ;    ES:SI -> just past 1st char of new line
 36169                                  ;       CX == # bytes remaining from that point
 36170                                  ;
 36171                                  ;   OTHER REGS USED
 36172                                  ;       AX
 36173                                  ;
 36174                                  ;   NOTES
 36175                                  ;       None
 36176                                  ;
 36177                                  ;   HISTORY
 36178                                  ;       Created 16-Mar-1992 by JeffPar
 36179                                  ;
 36180                                  ;----------------------------------------------------------------------------
 36181                                  
 36182                                  skip_line:
 36183                                          call    get_char
 36184                                          jc	short skip_line_done
 36185                                          cmp     al,lf ; 0Ah
 36186                                          jne	short skip_line
 36187                                  skip_line_done:
 36188                                  num_done:	; 18/12/2022
 36189                                          retn
 36190                                  
 36191                                  ;----------------------------------------------------------------------------
 36192                                  ;
 36193                                  ;   get_number: return binary equivalent of numeric string
 36194                                  ;
 36195                                  ;   INPUT
 36196                                  ;    ES:SI -> position in config.sys
 36197                                  ;       CX == remaining bytes in config.sys
 36198                                  ;
 36199                                  ;   OUTPUT
 36200                                  ;       AL == non-digit encountered
 36201                                  ;       BX == binary #
 36202                                  ;    ES:SI -> just past 1st non-digit
 36203                                  ;       CX == # bytes remaining from that point
 36204                                  ;
 36205                                  ;   OTHER REGS USED
 36206                                  ;       AX
 36207                                  ;
 36208                                  ;   NOTES
 36209                                  ;       None
 36210                                  ;
 36211                                  ;   HISTORY
 36212                                  ;       Created 16-Mar-1992 by JeffPar
 36213                                  ;
 36214                                  ;----------------------------------------------------------------------------
 36215                                  
 36216                                  ; 13/05/2019
 36217                                  
 36218                                  get_number:
 36219                                          sub     bx,bx           ; BX = result
 36220                                  num_loop:
 36221                                          call    get_char        ;
 36222                                          jc	short num_done	;
 36223                                          cmp     al,'0'          ; convert to value
 36224                                          jb	short num_done	; no more number
 36225                                          cmp     al,'9'          ;
 36226                                          ja	short num_done	;
 36227                                          push    ax              ;
 36228                                          mov     ax,10           ;
 36229                                          push    dx              ;
 36230                                          mul     bx              ;
 36231                                          pop     dx              ;
 36232                                          mov     bx,ax           ;
 36233                                          pop     ax              ;
 36234                                          sub     al,'0'          ;
 36235                                          cbw                     ;
 36236                                          add     bx,ax           ;
 36237                                          jmp	short num_loop	;
 36238                                  
 36239                                  	; 18/12/2022
 36240                                  ;num_done:
 36241                                          ;retn
 36242                                  
 36243                                  ;----------------------------------------------------------------------------
 36244                                  ;
 36245                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 36246                                  ;
 36247                                  ;   INPUT
 36248                                  ;    ES:SI -> position in config.sys
 36249                                  ;       CX == remaining bytes in config.sys
 36250                                  ;
 36251                                  ;   OUTPUT
 36252                                  ;       AL == next character
 36253                                  ;    ES:SI -> just past next character
 36254                                  ;       CX == # bytes remaining from that point
 36255                                  ;
 36256                                  ;   OTHER REGS USED
 36257                                  ;       AX
 36258                                  ;
 36259                                  ;   NOTES
 36260                                  ;       None
 36261                                  ;
 36262                                  ;   HISTORY
 36263                                  ;       Created 16-Mar-1992 by JeffPar
 36264                                  ;
 36265                                  ;----------------------------------------------------------------------------
 36266                                  
 36267                                  get_char:
 36268                                          sub     cx,1            ; use SUB to set carry,zero
 36269                                          jb	short get_fail	; out of data
 36270                                          ;lods	byte ptr es:[si] ;
 36271                                  	es	
 36272                                  	lodsb
 36273                                          mov     ah,al           ;
 36274                                          retn			;
 36275                                  get_fail:                       ; restore CX to zero
 36276                                          mov     cx,0            ; leave carry set, zero not set
 36277                                  nearby_ret:
 36278                                          retn
 36279                                  
 36280                                  ;----------------------------------------------------------------------------
 36281                                  ;
 36282                                  ;   query_user: ask user whether to execute current config.sys command
 36283                                  ;
 36284                                  ;   INPUT
 36285                                  ;       AL == current command code
 36286                                  ;    ES:SI -> current command line in config.sys
 36287                                  ;    config_cmd == current command code, but with QUERY bit intact
 36288                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36289                                  ;
 36290                                  ;   OUTPUT
 36291                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36292                                  ;
 36293                                  ;   OTHER REGS USED
 36294                                  ;       BX, CX, DX, DI
 36295                                  ;
 36296                                  ;   NOTES
 36297                                  ;       None
 36298                                  ;
 36299                                  ;   HISTORY
 36300                                  ;       Created 16-Mar-1992 by JeffPar
 36301                                  ;
 36302                                  ;----------------------------------------------------------------------------
 36303                                  
 36304                                  	; 12/12/2022
 36305                                  query_user:
 36306                                          test    byte [bQueryOpt],4	; answer no to everything?
 36307                                          ;jz	short qu_1		;
 36308                                          ; 12/12/2022
 36309                                  	;jmp	short skip_all		;
 36310                                  	jnz	short skip_all
 36311                                  qu_1:
 36312                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 36313                                          jnz	short nearby_ret	; yes (and return carry clear!)
 36314                                          push    ax                      ;
 36315                                          mov     al,[config_cmd]         ;
 36316                                          test    byte [bQueryOpt],1	; query every command?
 36317                                          jnz	short query_all		; yes
 36318                                          test    al,CONFIG_OPTION_QUERY  ;
 36319                                          ;jnz	short query_all		;
 36320                                          ; 12/12/2022
 36321                                  	;jmp	short do_cmd		;
 36322                                  	jz	short do_cmd ; cf=0
 36323                                  query_all:
 36324                                  
 36325                                  ;   Search for the command code (AL) in "comtab", and then print
 36326                                  ;   out the corresponding keyword, followed by the rest of the actual
 36327                                  ;   line pointed to by ES:SI
 36328                                  
 36329                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 36330                                          mov     dx,_$AutoPrmpt    	;
 36331                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36332                                          jz	short generic_prompt	; config_cmd must have been 0
 36333                                  
 36334                                          mov     dh,al                   ; save config_cmd in DH
 36335                                          sub     bx,bx                   ;
 36336                                          mov     di,comtab		;
 36337                                  find_match:                             ;
 36338                                          mov     bl,[di]                 ; get size of current keyword
 36339                                          or      bl,bl                   ;
 36340                                          jz	short line_print	; end of table
 36341                                          inc     di                      ;
 36342                                          cmp     al,[di+bx]              ; match?
 36343                                          je	short cmd_match		; yes
 36344                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36345                                  	; 13/05/2019	
 36346                                          jmp	short find_match	; loop
 36347                                  cmd_match:                              ;
 36348                                          mov     cl,[di-1]               ;
 36349                                          mov     ch,0                    ;
 36350                                          mov     ah,STD_CON_OUTPUT ; 2
 36351                                  cmd_print:                              ;
 36352                                          mov     al,[di]                 ;
 36353                                          inc     di                      ;
 36354                                          mov     dl,al                   ;
 36355                                          int     21h                     ;
 36356                                          loop    cmd_print               ;
 36357                                          mov     dl,'='                  ;
 36358                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36359                                          jne	short cmd_notset	;
 36360                                          mov     dl,' '                  ;
 36361                                  cmd_notset:
 36362                                          int     21h                     ; '=' looks funny on SET commands
 36363                                  line_print:                             ;
 36364                                  	;lods	byte ptr es:[si]        ;
 36365                                          es
 36366                                  	lodsb
 36367                                  	or      al,al                   ;
 36368                                          jnz	short non_null		;
 36369                                          mov     al,' '                  ;
 36370                                  non_null:                               ;
 36371                                          cmp     al,' '                  ; control code?
 36372                                          jb	short prompt_user	; yes, assume end of line
 36373                                          jne	short non_space		;
 36374                                          cmp     byte [es:si],' '	;
 36375                                          jb	short prompt_user	;
 36376                                  non_space:                              ;
 36377                                          mov     dl,al                   ;
 36378                                          mov     ah,STD_CON_OUTPUT ; 2	;
 36379                                          int     21h                     ;
 36380                                          jmp	short line_print	;
 36381                                  prompt_user:                            ;
 36382                                          mov     dx,_$InterPrmpt		;
 36383                                  
 36384                                  generic_prompt:
 36385                                          call    print                   ;
 36386                                  input_loop:                             ;
 36387                                          mov     ah,0                    ; read a key
 36388                                          int     16h                     ;
 36389                                          or      al,al                   ; is it a function key?
 36390                                          jnz	short not_func		; no
 36391                                          cmp     ah,3Fh                  ; F5 function key?
 36392                                          jne	short input_loop	; no
 36393                                          mov     al,[_$NO]                  ;
 36394                                          or      byte [bQueryOpt],4	; no more queries
 36395                                          jmp     short legal_char        ;
 36396                                  not_func:
 36397                                          and     al,~20h ; 0DFh		; converting to upper case
 36398                                          cmp     al,[_$NO]		; verify character is legal
 36399                                          je	short legal_char	;
 36400                                          cmp     al,[_$YES]		;
 36401                                          je	short legal_char	;
 36402                                          cmp     byte [config_cmd],0	;
 36403                                          je	short input_loop	; don't allow Esc on this query
 36404                                          cmp     al,1Bh                  ; Esc?
 36405                                          jne	short input_loop	;
 36406                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 36407                                          mov     al,[_$YES]
 36408                                  legal_char:                             ;
 36409                                          call    disp_input              ;
 36410                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36411                                  
 36412                                          cmp     al,[_$NO]		; process line?
 36413                                          je	short skip_cmd		; no
 36414                                  	; 12/12/2022
 36415                                  	clc
 36416                                  do_cmd:
 36417                                  	pop     ax			;
 36418                                  	; 12/12/2022
 36419                                  	; cf=0
 36420                                  	;clc				; just do the command
 36421                                  	retn
 36422                                  
 36423                                  skip_cmd:
 36424                                  	pop     ax			;
 36425                                  skip_all:
 36426                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36427                                  	stc
 36428                                  	retn
 36429                                  
 36430                                  ;----------------------------------------------------------------------------
 36431                                  ;
 36432                                  ;   print_error: displays multi-config error conditions
 36433                                  ;
 36434                                  ;   INPUT
 36435                                  ;    Carry set to pause, clear to not
 36436                                  ;    ES:SI -> current command line in config.sys
 36437                                  ;
 36438                                  ;   OUTPUT
 36439                                  ;       None
 36440                                  ;
 36441                                  ;   OTHER REGS USED
 36442                                  ;       None
 36443                                  ;
 36444                                  ;   NOTES
 36445                                  ;       None
 36446                                  ;
 36447                                  ;   HISTORY
 36448                                  ;       Created 16-Mar-1992 by JeffPar
 36449                                  ;
 36450                                  ;----------------------------------------------------------------------------
 36451                                  
 36452                                  print_error:
 36453                                          push    ax
 36454                                          push    bx
 36455                                          push    cx
 36456                                          push    dx
 36457                                          push    ds
 36458                                          push    cs
 36459                                          pop     ds
 36460                                          pushf
 36461                                          call    get_linenum
 36462                                          mov     [linecount],bx
 36463                                          call    error_line
 36464                                          popf
 36465                                          jnc	short pe_ret
 36466                                          mov     dx,_$PauseMsg
 36467                                          call    print
 36468                                          mov     ax,0C07h		; flush input buffer, then wait for key
 36469                                          int     21h			; wait for a key
 36470                                          or      al,al			; extended key?
 36471                                          jnz	short pe_1		; no
 36472                                          mov     ah,07h			; yes
 36473                                          int     21h			; eat it too
 36474                                  pe_1:     
 36475                                  	mov     dx,crlfm
 36476                                          call    print
 36477                                  pe_ret: 
 36478                                  	pop     ds
 36479                                          pop     dx
 36480                                          pop     cx
 36481                                          pop     bx
 36482                                          pop     ax
 36483                                  	retn
 36484                                  
 36485                                  ;----------------------------------------------------------------------------
 36486                                  
 36487                                  ;   This function is very simple:  it merely prepends a "/D" to the
 36488                                  ;   command-line for the shell;  this (undocumented) switch disables
 36489                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36490                                  ;   displayed when there's no AUTOEXEC.BAT.
 36491                                  
 36492                                  disable_autoexec:
 36493                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36494                                  	; 17/04/2019 - Retro DOS v4.0
 36495                                  
 36496                                  	test	byte [bQueryOpt],4
 36497                                  	jz	short disable_exit
 36498                                  	test	byte [dae_flag],1
 36499                                  	jnz	short disable_exit
 36500                                  	or	byte [dae_flag],1
 36501                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36502                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36503                                  	mov     dx,'D ' ; 2044h
 36504                                  dae_1:
 36505                                          ;mov	al,[def_swchr]
 36506                                  	mov     al,[command_line-1]     ; get default switchchar
 36507                                          or      al,al                   ; anything there?
 36508                                          jz	short disable_exit	; no, disable_autoexec already called
 36509                                          mov     bl,[command_line]       ;
 36510                                          mov     bh,0                    ; BX == command-line length
 36511                                          mov     cx,bx                   ;
 36512                                          add     bl,3                    ;
 36513                                          cmp     bl,126                  ;
 36514                                          ja	short disable_exit	;
 36515                                          mov     [command_line],bl       ; update length
 36516                                          add     bx,command_line+1	; make sure we move the NULL too
 36517                                          inc     cx                      ; (just for consistency sake)
 36518                                  disable_loop:                           ;
 36519                                          mov     ah,[bx-3]               ;
 36520                                          mov     [bx],ah                 ;
 36521                                          dec     bx                      ;
 36522                                          loop    disable_loop            ;
 36523                                          mov     [bx-2],al               ;
 36524                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36525                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36526                                          ;mov	byte [command_line-1],0 ;
 36527                                  disable_exit:                           ;
 36528                                          retn
 36529                                  
 36530                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36531                                  	cmp     byte [bQueryOpt],1
 36532                                  	jnz     short disable_exit
 36533                                  	test	byte [dae_flag],2
 36534                                  	jnz     short disable_exit
 36535                                  	or      byte [dae_flag],2
 36536                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 36537                                  	jmp     short dae_1
 36538                                  
 36539                                  ;endif  ;MULTI_CONFIG
 36540                                  
 36541                                  %endif	; 02/11/2022
 36542                                  
 36543                                  
 36544                                  ; 19/04/2019 - Retro DOS v4.0
 36545                                  
 36546                                  ;----------------------------------------------------------------------------
 36547                                  ;
 36548                                  ; procedure : delim
 36549                                  ;
 36550                                  ;----------------------------------------------------------------------------
 36551                                  
 36552                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36553                                  ;
 36554                                  ;;ifdef	MULTI_CONFIG
 36555                                  ;
 36556                                  ;any_delim:
 36557                                  ;       cmp     al,cr
 36558                                  ;       je	short delim_ret
 36559                                  ;       cmp     al,lf
 36560                                  ;       je	short delim_ret
 36561                                  ;       cmp     al,'['
 36562                                  ;       je	short delim_ret
 36563                                  ;       cmp     al,']'
 36564                                  ;       je	short delim_ret
 36565                                  ;
 36566                                  ;;endif  ;MULTI_CONFIG
 36567                                  
 36568                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36569                                  	; (SYSINIT:3450h)	
 36570                                  delim:
 36571 00002FB6 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36572 00002FB8 7417                    	je	short delim_ret
 36573                                  
 36574 00002FBA 3C00                    	cmp	al,0		; special case for sysinit!!!
 36575 00002FBC 7413                    	je	short delim_ret
 36576                                  
 36577                                  org_delim:			; used by organize routine except for getting
 36578 00002FBE 3C20                    	cmp	al,' '          ; the filename.
 36579 00002FC0 740F                    	je	short delim_ret
 36580 00002FC2 3C09                            cmp     al,tab ; 9
 36581 00002FC4 740B                    	je	short delim_ret
 36582 00002FC6 3C3D                    	cmp	al,'='
 36583 00002FC8 7407                    	je	short delim_ret
 36584 00002FCA 3C2C                    	cmp	al,','
 36585 00002FCC 7403                    	je	short delim_ret
 36586 00002FCE 3C3B                    	cmp	al,';'
 36587                                  
 36588                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36589                                  ;ifdef	MULTI_CONFIG
 36590                                  ;   Make sure there's no chance of a false EOF indication
 36591 00002FD0 F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 36592                                  ;endif
 36593                                  	; 02/11/2022
 36594                                  delim_ret:
 36595                                  nl_ret:	; 10/09/2023
 36596 00002FD1 C3                      	retn
 36597                                  
 36598                                  ;----------------------------------------------------------------------------
 36599                                  ;
 36600                                  ; procedure : newline
 36601                                  ;
 36602                                  ;  newline returns with first character of next line
 36603                                  ;
 36604                                  ;----------------------------------------------------------------------------
 36605                                  
 36606                                  newline:
 36607 00002FD2 E80600                  	call	getchr			;skip non-control characters
 36608 00002FD5 72FA                    	jc	short nl_ret
 36609 00002FD7 3C0A                    	cmp	al,lf			;look for line feed
 36610 00002FD9 75F7                    	jne	short newline
 36611                                  
 36612                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36613                                  	;call	getchr
 36614                                  ;nl_ret:
 36615                                  	;retn
 36616                                  	; 10/09/2023
 36617                                  	;jmp	short getchr
 36618                                  
 36619                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36620                                  %if 1
 36621                                  
 36622                                  ;----------------------------------------------------------------------------
 36623                                  ;
 36624                                  ; procedure : getchr
 36625                                  ;
 36626                                  ;----------------------------------------------------------------------------
 36627                                  
 36628                                  	; 24/10/2022
 36629                                  getchr:
 36630                                  	; 12/12/2022
 36631                                  	;push	cx
 36632                                  	;mov	cx,[count]
 36633                                  	;jcxz	nochar
 36634                                  	; 12/12/2022
 36635 00002FDB 833E[D203]01            	cmp	word [count],1 
 36636 00002FE0 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 36637                                  	
 36638 00002FE2 8B36[D603]              	mov	si,[chrptr]
 36639 00002FE6 268A04                  	mov	al,[es:si]
 36640 00002FE9 FF0E[D203]              	dec	word [count]
 36641 00002FED FF06[D603]              	inc	word [chrptr]
 36642                                  	; 12/12/202
 36643                                  	; cf=0
 36644                                  	;clc
 36645                                  ;get_ret:
 36646                                  	;pop	cx
 36647                                  	;retn
 36648                                  nochar: 
 36649                                  	; 12/12/2022
 36650                                  	; cf=1
 36651                                  	;stc
 36652                                  	;jmp	short get_ret
 36653                                  	
 36654 00002FF1 C3                      	retn
 36655                                  %endif
 36656                                  
 36657                                  ;----------------------------------------------------------------------------
 36658                                  ; 
 36659                                  ; procedure : mapcase
 36660                                  ;
 36661                                  ;----------------------------------------------------------------------------
 36662                                  
 36663                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36664                                  mapcase:
 36665 00002FF2 51                      	push	cx
 36666 00002FF3 56                      	push	si
 36667 00002FF4 1E                      	push	ds
 36668                                  
 36669 00002FF5 06                      	push	es
 36670 00002FF6 1F                      	pop	ds
 36671                                  
 36672                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36673                                  ;;ifdef	MULTI_CONFIG
 36674                                  ;
 36675                                  ;	mov	bl,al                   ; same cmd code this line
 36676                                  ;;else
 36677                                  ;;	xor	si,si
 36678                                  ;;endif
 36679                                  	; 02/11/2022
 36680 00002FF7 31F6                    	xor	si, si
 36681                                  
 36682                                  convloop:
 36683 00002FF9 AC                      	lodsb
 36684 00002FFA 3C61                    	cmp	al,'a'
 36685 00002FFC 7209                    	jb	short noconv
 36686 00002FFE 3C7A                    	cmp	al,'z'
 36687 00003000 7705                    	ja	short noconv
 36688 00003002 2C20                    	sub	al,20h
 36689 00003004 8844FF                  	mov	[si-1],al
 36690                                  noconv:
 36691                                  
 36692                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36693                                  ;;ifdef	MULTI_CONFIG
 36694                                  ;;
 36695                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36696                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36697                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36698                                  ;;   anything after the "=" in a SET)
 36699                                  ;;
 36700                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36701                                  ;       jne	short check_eol		; no, just check for end-of-line
 36702                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36703                                  ;       je	short convdone		; yes
 36704                                  ;check_eol:
 36705                                  ;       cmp     al,cr
 36706                                  ;       je	short convdone
 36707                                  ;       cmp     al,lf
 36708                                  ;       je	short convdone
 36709                                  ;;endif
 36710                                  	
 36711                                  	; 02/11/2022
 36712 00003007 E2F0                    	loop	convloop
 36713                                  convdone:
 36714 00003009 1F                      	pop	ds
 36715 0000300A 5E                      	pop	si
 36716 0000300B 59                      	pop	cx
 36717 0000300C C3                      	retn
 36718                                  
 36719                                  ;----------------------------------------------------------------------------
 36720                                  ;
 36721                                  ; procedure : round
 36722                                  ;
 36723                                  ; round the values in memlo and memhi to paragraph boundary.
 36724                                  ; perform bounds check.
 36725                                  ;
 36726                                  ;----------------------------------------------------------------------------
 36727                                  
 36728                                  round:
 36729                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36730 0000300D 1E                      	push	ds
 36731 0000300E 0E                      	push	cs
 36732 0000300F 1F                      	pop	ds
 36733                                  
 36734 00003010 50                      	push	ax
 36735                                  	;mov	ax,[cs:memlo]
 36736 00003011 A1[DE03]                	mov	ax,[memlo]
 36737                                  
 36738 00003014 E883E0                  	call	ParaRound		; para round up
 36739                                  
 36740                                  	;add	[cs:memhi],ax
 36741 00003017 0106[E003]              	add	[memhi],ax
 36742                                  	;mov	word [cs:memlo],0
 36743 0000301B C706[DE03]0000          	mov	word [memlo],0
 36744                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36745 00003021 A1[E003]                	mov	ax,[memhi]
 36746                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36747 00003024 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36748                                  	;jae	short mem_err
 36749                                  	; 17/09/2023
 36750 00003028 7322                    	jae	short mem_err2 ; ds = cs
 36751                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36752 0000302A F606[0614]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36753 0000302F 7416                    	jz	short skip_set_devmarksize
 36754 00003031 06                      	push	es
 36755 00003032 56                      	push	si
 36756                                  	;mov	si,[cs:devmark_addr]
 36757 00003033 8B36[0414]              	mov	si,[devmark_addr]
 36758 00003037 8EC6                    	mov	es,si
 36759 00003039 29F0                    	sub	ax,si
 36760 0000303B 48                      	dec	ax
 36761                                  	;mov	[es:3],ax
 36762 0000303C 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36763                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36764 00003040 8026[0614]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36765 00003045 5E                      	pop	si
 36766 00003046 07                      	pop	es
 36767                                  skip_set_devmarksize:
 36768 00003047 58                      	pop	ax
 36769                                  
 36770                                  	; 10/09/2023
 36771 00003048 1F                      	pop	ds
 36772                                  
 36773                                  	; 11/12/2022
 36774                                  	; cf = 0
 36775                                  	; 02/11/2022
 36776                                  	;clc	; ? (not needed here)	; clear carry
 36777 00003049 C3                      	retn
 36778                                  
 36779                                  ;----------------------------------------------------------------------------
 36780                                  
 36781                                  mem_err:
 36782                                  	; 11/12/2022
 36783 0000304A 0E                      	push	cs
 36784 0000304B 1F                      	pop	ds
 36785                                  mem_err2:
 36786 0000304C BA[2D37]                	mov	dx,badmem
 36787                                  	;push	cs
 36788                                  	;pop	ds
 36789 0000304F E83102                  	call	print
 36790 00003052 E9EFD7                  	jmp	stall
 36791                                  
 36792                                  ;----------------------------------------------------------------------------
 36793                                  ;
 36794                                  ; procedure : calldev
 36795                                  ;
 36796                                  ;----------------------------------------------------------------------------
 36797                                  
 36798                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36799                                  	; (SYSINIT:34E0h)
 36800                                  calldev:
 36801 00003055 2E8E1E[5E1E]            	mov	ds,[cs:DevEntry+2]
 36802 0000305A 2E031E[5C1E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36803 0000305F 8B07                    	mov	ax,[bx]
 36804                                  
 36805 00003061 2EFF36[5C1E]            	push	word [cs:DevEntry]
 36806 00003066 2EA3[5C1E]              	mov	[cs:DevEntry],ax
 36807 0000306A BB[E603]                	mov	bx,packet
 36808 0000306D 2EFF1E[5C1E]            	call	far [cs:DevEntry]
 36809 00003072 2E8F06[5C1E]            	pop	word [cs:DevEntry]
 36810 00003077 C3                      	retn
 36811                                  
 36812                                  ;----------------------------------------------------------------------------
 36813                                  ;
 36814                                  ; procedure : todigit
 36815                                  ;
 36816                                  ;----------------------------------------------------------------------------
 36817                                  
 36818                                  todigit:
 36819 00003078 2C30                    	sub	al,'0'
 36820                                  	;jb	short notdig  ; 02/11/2022
 36821                                  	; 12/12/2022
 36822 0000307A 7203                    	jb	short notdig2
 36823                                  	;cmp	al,9
 36824                                  	;ja	short notdig
 36825                                  	;clc
 36826                                  	;retn
 36827                                  	; 12/12/2022
 36828 0000307C 3C0A                    	cmp	al,10
 36829 0000307E F5                      	cmc
 36830                                  notdig:
 36831                                  	;stc
 36832                                  notdig2:
 36833 0000307F C3                      	retn
 36834                                  
 36835                                  ;----------------------------------------------------------------------------
 36836                                  ;
 36837                                  ; procedure : getnum
 36838                                  ;
 36839                                  ; getnum parses a decimal number.
 36840                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36841                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36842                                  ;
 36843                                  ;----------------------------------------------------------------------------
 36844                                  
 36845                                  getnum:
 36846 00003080 53                      	push	bx
 36847 00003081 31DB                    	xor	bx,bx			; running count is zero
 36848                                  b2:
 36849 00003083 E8F2FF                  	call	todigit 		; do we have a digit ?
 36850 00003086 7247                    	jc	short badnum		; no, bomb
 36851                                  
 36852 00003088 93                      	xchg	ax,bx			; put total in ax
 36853 00003089 53                      	push	bx			; save digit (0 to 9)
 36854                                  	;mov	bx,10			; base of arithmetic
 36855                                  	; 12/12/2022
 36856 0000308A B30A                    	mov	bl,10
 36857 0000308C F7E3                    	mul	bx			; shift by one decimal digit
 36858 0000308E 5B                      	pop	bx			; get back digit (0 to 9)
 36859 0000308F 00D8                    	add	al,bl			; get total
 36860 00003091 80D400                  	adc	ah,0			; make that 16 bits
 36861 00003094 7239                    	jc	short badnum		; too big a number
 36862                                  
 36863 00003096 93                      	xchg	ax,bx			; stash total
 36864                                  
 36865 00003097 E841FF                  	call	getchr			;get next digit
 36866 0000309A 722D                    	jc	short b1		; no more characters
 36867 0000309C 3C20                    	cmp	al,' ' 			; space?
 36868 0000309E 741F                    	je	short b15		; then end of digits
 36869 000030A0 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36870 000030A2 741B                    	je	short b15		; then end of digits.
 36871 000030A4 3C09                    	cmp	al, tab ; 9		; tab
 36872 000030A6 7417                    	je	short b15
 36873 000030A8 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36874 000030AD 7410                    	je	short b15
 36875 000030AF 3C2F                    	cmp	al,'/'			; see if another switch follows
 36876                                  	;nop				; cas - remnant of old bad code
 36877                                  	;nop
 36878                                  	; 12/12/2022
 36879                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36880                                  	;nop
 36881                                  	;nop
 36882 000030B1 740C                    	je	short b15
 36883 000030B3 3C0A                    	cmp	al,lf			; line-feed?
 36884 000030B5 7408                    	je	short b15
 36885 000030B7 3C0D                    	cmp	al,cr			; carriage return?
 36886 000030B9 7404                    	je	short b15
 36887 000030BB 08C0                    	or	al,al			; end of line separator?
 36888 000030BD 75C4                    	jnz	short b2		; no, try as a valid char...
 36889                                  b15:
 36890 000030BF 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36891 000030C4 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36892                                  b1:
 36893 000030C9 89D8                    	mov	ax,bx			; get proper count
 36894 000030CB 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36895 000030CD 5B                      	pop	bx
 36896 000030CE C3                      	retn
 36897                                  badnum:
 36898                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36899                                  	;mov	byte [cs:sepchr],0
 36900 000030CF 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36901                                  	; 12 /12/2022
 36902 000030D1 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36903 000030D5 5B                      	pop	bx
 36904 000030D6 F9                      	stc				; and carry set
 36905 000030D7 C3                      	retn
 36906                                  
 36907                                  ;****************************************************************************
 36908                                  
 36909                                  setdoscountryinfo:
 36910                                  
 36911                                  ;----------------------------------------------------------------------------
 36912                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36913                                  ;	ds:0  -> buffer.
 36914                                  ;	si = 0
 36915                                  ;	ax = country id
 36916                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36917                                  ;	bx = file handle
 36918                                  ;	this routine can handle maximum 438 country_data entries.
 36919                                  ;
 36920                                  ;output: dos_country_cdpg_info set.
 36921                                  ;	 carry set if any file read failure or wrong information in the file.
 36922                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36923                                  ;	 codepage_id in the file.
 36924                                  ;----------------------------------------------------------------------------
 36925                                  
 36926                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36927                                  
 36928 000030D8 57                      	push	di
 36929 000030D9 50                      	push	ax
 36930 000030DA 52                      	push	dx
 36931                                  
 36932 000030DB 31C9                    	xor	cx,cx
 36933 000030DD 31D2                    	xor	dx,dx
 36934 000030DF B80002                  	mov	ax,512			;read 512 bytes
 36935 000030E2 E84301                  	call	readincontrolbuffer	;read the file header
 36936 000030E5 724A                    	jc	short setdosdata_fail
 36937                                  
 36938 000030E7 06                      	push	es
 36939 000030E8 56                      	push	si
 36940                                  
 36941 000030E9 0E                      	push	cs
 36942 000030EA 07                      	pop	es
 36943                                  
 36944 000030EB BF[4F33]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36945 000030EE B90800                  	mov	cx,8			;length of the signature
 36946 000030F1 F3A6                    	repz	cmpsb
 36947                                  
 36948 000030F3 5E                      	pop	si
 36949 000030F4 07                      	pop	es
 36950 000030F5 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36951                                  
 36952 000030F7 83C612                  	add	si,18			;si -> county info type
 36953 000030FA 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36954 000030FD 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36955                                  
 36956 000030FF 46                      	inc	si			;si -> file offset
 36957 00003100 8B14                    	mov	dx,[si]			;get the info file offset.
 36958 00003102 8B4C02                  	mov	cx,[si+2]
 36959 00003105 B80018                  	mov	ax,6144			;read 6144 bytes.
 36960 00003108 E81D01                  	call	readincontrolbuffer	;read info
 36961 0000310B 7224                    	jc	short setdosdata_fail
 36962                                  
 36963 0000310D 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36964 0000310F 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36965 00003113 771C                    	ja	short setdosdata_fail
 36966                                  
 36967 00003115 46                      	inc	si
 36968 00003116 46                      	inc	si			;si -> entry information packet
 36969 00003117 5A                      	pop	dx			;restore code page id
 36970 00003118 58                      	pop	ax			;restore country id
 36971 00003119 5F                      	pop	di
 36972                                  
 36973                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36974 0000311A 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36975 0000311D 7509                    	jne	short setdoscntry_next
 36976                                  
 36977                                  	;cmp	dx,0			;no user specified code page ?
 36978                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36979                                  	; 10/09/2023
 36980 0000311F 09D2                    	or	dx,dx ; cmp dx,0
 36981 00003121 7413                    	jz	short setdoscntry_any_codepage
 36982 00003123 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36983 00003126 7411                    	je	short setdoscntry_got_it
 36984                                  
 36985                                  setdoscntry_next:
 36986 00003128 0334                    	add	si,[si]			;next entry
 36987 0000312A 46                      	inc	si
 36988 0000312B 46                      	inc	si			;take a word for size of entry itself
 36989 0000312C E2EC                    	loop	setdoscntry_find
 36990                                  
 36991                                  	;mov	cx,-1			;signals that bad country id entered.
 36992                                  	; 10/09/2023
 36993 0000312E 49                      	dec	cx ; 0 -> -1
 36994                                  setdoscntry_fail:
 36995 0000312F F9                      	stc
 36996 00003130 C3                      	retn
 36997                                  
 36998                                  setdosdata_fail:
 36999 00003131 5E                      	pop	si
 37000 00003132 59                      	pop	cx
 37001 00003133 5F                      	pop	di
 37002 00003134 EBF9                    	jmp	short setdoscntry_fail
 37003                                  
 37004                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 37005 00003136 8B5404                  	mov	dx,[si+4]
 37006                                  
 37007                                  setdoscntry_got_it:			;found the matching entry
 37008 00003139 2E8916[5733]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 37009 0000313E 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 37010 00003141 8B4C0C                  	mov	cx,[si+12]
 37011 00003144 B80002                  	mov	ax,512 			;read 512 bytes
 37012 00003147 E8DE00                  	call	readincontrolbuffer
 37013 0000314A 72E3                    	jc	short setdoscntry_fail
 37014                                  
 37015 0000314C 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 37016 0000314E 46                      	inc	si
 37017 0000314F 46                      	inc	si			;si -> first entry
 37018                                  
 37019                                  setdoscntry_data:
 37020 00003150 57                      	push	di			;es:di -> dos_country_cdpg_info
 37021 00003151 51                      	push	cx			;save # of entry left
 37022 00003152 56                      	push	si			;si -> current entry in control buffer
 37023                                  
 37024 00003153 8A4402                  	mov	al,[si+2]		;get data entry id
 37025 00003156 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 37026 00003159 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 37027                                  
 37028 0000315B 8B5404                  	mov	dx,[si+4]		;get offset of data
 37029 0000315E 8B4C06                  	mov	cx,[si+6]
 37030 00003161 B80042                  	mov	ax,4200h
 37031 00003164 F9                      	stc
 37032 00003165 CD21                    	int	21h			;move pointer
 37033 00003167 72C8                    	jc	short setdosdata_fail
 37034                                  
 37035 00003169 BA0002                  	mov	dx,512			;start of data buffer
 37036 0000316C B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37037 0000316F B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37038 00003171 F9                      	stc
 37039 00003172 CD21                    	int	21h			;read the country.sys data
 37040 00003174 72BB                    	jc	short setdosdata_fail 	;read failure
 37041                                  
 37042 00003176 39C8                    	cmp	ax,cx
 37043 00003178 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37044                                  
 37045 0000317A 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37046 0000317D 8B4C06                  	mov	cx,[si+6]
 37047 00003180 B80042                  	mov	ax,4200h
 37048 00003183 F9                      	stc
 37049 00003184 CD21                    	int	21h			;move pointer back again
 37050 00003186 72A9                    	jc	short setdosdata_fail
 37051                                  
 37052 00003188 56                      	push	si
 37053 00003189 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37054 0000318C 8B0C                    	mov	cx,[si]
 37055 0000318E 5E                      	pop	si
 37056 0000318F BA0002                  	mov	dx,512			;start of data buffer
 37057 00003192 83C10A                  	add	cx,10			;signature + a word for the length itself
 37058 00003195 B43F                    	mov	ah,3Fh			;read the data from the file.
 37059 00003197 F9                      	stc
 37060 00003198 CD21                    	int	21h
 37061 0000319A 7295                    	jc	short setdosdata_fail
 37062                                  
 37063 0000319C 39C8                    	cmp	ax,cx
 37064 0000319E 7591                    	jne	short setdosdata_fail
 37065                                  
 37066 000031A0 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37067 000031A3 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37068 000031A6 8B0C                    	mov	cx,[si]			;get the length of the file
 37069 000031A8 41                      	inc	cx			;take care of a word for lenght of tab
 37070 000031A9 41                      	inc	cx			;itself.
 37071 000031AA 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37072 000031AE 7781                    	ja	short setdosdata_fail
 37073                                  
 37074                                  	;if	bugfix
 37075 000031B0 E83100                  	call	setdbcs_before_copy
 37076                                  	;endif
 37077                                  
 37078 000031B3 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37079 000031B5 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 37080                                  
 37081 000031B7 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37082                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37083 000031BB 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37084                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37085                                  	
 37086 000031BF 57                      	push	di			;save di
 37087                                  
 37088                                  	;push	ax
 37089                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37090                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 37091                                  	;pop	ax
 37092                                  	; 10/09/2023
 37093 000031C0 2EFF36[5733]            	push	word [cs:cntrycodepage_id]
 37094 000031C5 8F4404                  	pop	word [si+4]
 37095                                  
 37096                                  setdoscntry_mov:
 37097 000031C8 F3A4                    	rep	movsb			;copy the table into dos
 37098 000031CA 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37099 000031CC 7509                    	jne	short setdoscntry_data_next
 37100                                  
 37101 000031CE 5F                      	pop	di			;restore di
 37102 000031CF 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37103                                  	;pop	word [es:di+26]		;restore
 37104 000031D3 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37105                                  	;pop	word [es:di+24]
 37106                                  
 37107                                  setdoscntry_data_next:
 37108 000031D7 5E                      	pop	si			;restore control buffer pointer
 37109 000031D8 59                      	pop	cx			;restore # of entries left
 37110 000031D9 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37111 000031DA 0334                    	add	si,[si]			;try to get the next entry
 37112 000031DC 46                      	inc	si
 37113 000031DD 46                      	inc	si			;take a word of entry length itself
 37114 000031DE 49                      	dec	cx
 37115                                  	; 10/09/2023
 37116 000031DF 741B                    	jz	short setdoscntry_ok 
 37117                                  	;cmp	cx,0
 37118                                  	;je	short setdoscntry_ok
 37119 000031E1 E96CFF                  	jmp	setdoscntry_data
 37120                                  
 37121                                  	; 18/12/2022
 37122                                  ;setdoscntry_ok:
 37123                                  	;retn
 37124                                  
 37125                                  ;----------------------------------------------------------------------------
 37126                                  
 37127                                  	;if	bugfix
 37128                                  
 37129                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37130                                  
 37131                                  setdbcs_before_copy:
 37132 000031E4 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37133 000031E6 7514                    	jne	short sdbcsbc		; jump if not
 37134                                  	
 37135                                  	; 10/09/2023
 37136 000031E8 50                      	push	ax
 37137 000031E9 31C0                    	xor	ax,ax
 37138 000031EB 263905                  	cmp	[es:di],ax ; 0
 37139 000031EE 740B                    	je	short sdbcsbc_pop
 37140                                  	
 37141                                  	;cmp	word [es:di],0		; zero byte data block?
 37142                                  	;je	short sdbcsbc		; jump if so
 37143                                  
 37144 000031F0 57                      	push	di
 37145                                  	; 10/09/2023
 37146                                  	;push	ax
 37147 000031F1 51                      	push	cx
 37148 000031F2 268B0D                  	mov	cx,[es:di]		; load block length
 37149                                  	;add	di,2			; points actual data
 37150 000031F5 47                      	inc	di
 37151 000031F6 47                      	inc	di
 37152                                  	;xor	al,al			; fill bytes
 37153 000031F7 F3AA                    	rep	stosb			; clear data block
 37154 000031F9 59                      	pop	cx
 37155                                  	;pop	ax
 37156 000031FA 5F                      	pop	di
 37157                                  
 37158                                  sdbcsbc_pop:	; 10/09/2023
 37159 000031FB 58                      	pop	ax
 37160                                  sdbcsbc:
 37161                                  setdoscntry_ok:	; 18/12/2022
 37162 000031FC C3                      	retn
 37163                                  
 37164                                  	;endif
 37165                                  
 37166                                  ;----------------------------------------------------------------------------
 37167                                  
 37168                                  getcountrydestination:
 37169                                  
 37170                                  ;----------------------------------------------------------------------------
 37171                                  ;get the destination address in the dos country info table.
 37172                                  ;
 37173                                  ;input: al - data id
 37174                                  ;	es:di -> dos_country_cdpg_info
 37175                                  ;on return:
 37176                                  ;	es:di -> destination address of the matching data id
 37177                                  ;	carry set if no matching data id found in dos.
 37178                                  ;----------------------------------------------------------------------------
 37179                                  
 37180                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37181                                  
 37182 000031FD 51                      	push	cx
 37183                                  	;add	di,74
 37184 000031FE 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37185                                  					;skip the reserved area, syscodepage etc.
 37186 00003201 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37187 00003204 47                      	inc	di
 37188 00003205 47                      	inc	di			;si -> the first start entry id
 37189                                  
 37190                                  getcntrydest:
 37191 00003206 263805                  	cmp	byte [es:di],al
 37192 00003209 7413                    	je	short getcntrydest_ok
 37193                                  
 37194 0000320B 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37195 0000320F 7405                    	je	short getcntrydest_1
 37196                                  
 37197 00003211 83C705                  	add	di,5			;next data id
 37198 00003214 EB03                    	jmp	short getcntrydest_loop
 37199                                  
 37200                                  getcntrydest_1:
 37201                                  	;add	di,41
 37202 00003216 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37203                                  getcntrydest_loop:
 37204 00003219 E2EB                    	loop	getcntrydest
 37205 0000321B F9                      	stc
 37206                                  	;jmp	short getcntrydest_exit
 37207                                  getcntrydest_exit:
 37208                                  	; 10/09/2023
 37209 0000321C 59                      	pop	cx
 37210 0000321D C3                      	retn
 37211                                  
 37212                                  getcntrydest_ok:
 37213                                  	; 10/09/2023
 37214 0000321E 47                      	inc	di
 37215                                  
 37216                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 37217                                  ;	jne	short getcntrydest_ok1
 37218                                  ;
 37219                                  ;	;inc	di			;now di -> cccountryinfolen
 37220                                  ;	jmp	short getcntrydest_exit
 37221                                  
 37222                                  	; 10/09/2023
 37223 0000321F 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37224 00003221 74F9                    	je	short getcntrydest_exit
 37225                                  
 37226                                  getcntrydest_ok1:
 37227                                  	;les	di,[es:di+1]		;get the destination in es:di
 37228                                  	; 10/09/2023
 37229 00003223 26C43D                  	les	di,[es:di]
 37230                                  ;getcntrydest_exit:
 37231 00003226 59                      	pop	cx
 37232 00003227 C3                      	retn
 37233                                  
 37234                                  ;----------------------------------------------------------------------------
 37235                                  
 37236                                  readincontrolbuffer:
 37237                                  
 37238                                  ;----------------------------------------------------------------------------
 37239                                  ;move file pointer to cx:dx
 37240                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37241                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37242                                  ;
 37243                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37244                                  ;	 be moved.
 37245                                  ;	 ax - # of bytes to read
 37246                                  ;	 bx - file handle
 37247                                  ;	 ds - buffer seg.
 37248                                  ;return: the control data information is read into ds:0 - ds:0200.
 37249                                  ;	 cx,dx value destroyed.
 37250                                  ;	 carry set if error in reading file.
 37251                                  ;----------------------------------------------------------------------------
 37252                                  
 37253 00003228 50                      	push	ax			;# of bytes to read
 37254 00003229 B80042                  	mov	ax,4200h
 37255 0000322C F9                      	stc
 37256 0000322D CD21                    	int	21h			;move pointer
 37257 0000322F 59                      	pop	cx			;# of bytes to read
 37258 00003230 7209                    	jc	short ricb_exit
 37259                                  
 37260 00003232 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37261 00003234 31F6                    	xor	si,si
 37262 00003236 B43F                    	mov	ah,3Fh			;read into the buffer
 37263 00003238 F9                      	stc
 37264 00003239 CD21                    	int	21h			;should be less than 1024 bytes.
 37265                                  ricb_exit:
 37266 0000323B C3                      	retn
 37267                                  
 37268                                  ;----------------------------------------------------------------------------
 37269                                  
 37270                                  ;! set_country_path procedure is not called from anywhere !
 37271                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 37272                                  %if 0
 37273                                  
 37274                                  set_country_path:
 37275                                  
 37276                                  ;----------------------------------------------------------------------------
 37277                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37278                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37279                                  ;     assumes current directory is the root directory.
 37280                                  ;out: ds:di -> full path (cntry_drv).
 37281                                  ;     set the cntry_drv string from the country=,,path command.
 37282                                  ;     ds, es, si value saved.
 37283                                  ;----------------------------------------------------------------------------
 37284                                  
 37285                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37286                                  	; (SYSINIT:4EF4h)
 37287                                  
 37288                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37289                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 37290                                  
 37291                                  	push	si
 37292                                  
 37293                                  	push	ds			;switch ds, es
 37294                                  	push	es
 37295                                  	pop	ds
 37296                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37297                                  
 37298                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37299                                  	jc	short scp_default_drv 	;no, use current default drive.
 37300                                  
 37301                                  	mov	al,[si]
 37302                                  	inc	si
 37303                                  	inc	si			;si -> next char after ":"
 37304                                  	jmp	short scp_setdrv
 37305                                  
 37306                                  scp_default_drv:
 37307                                  	mov	ah,19h
 37308                                  	int	21h
 37309                                  	add	al,"A"			;convert it to a character.
 37310                                  
 37311                                  scp_setdrv:
 37312                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37313                                  	mov	di,cntry_path
 37314                                  	mov	al,[si]
 37315                                  	cmp	al, "\"
 37316                                  	je	short scp_root_dir
 37317                                  
 37318                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37319                                  	;je	short scp_root_dir
 37320                                  	;jmp	short scp_path
 37321                                  	; 04/01/2023
 37322                                  	jne	short scp_path
 37323                                  
 37324                                  scp_root_dir:
 37325                                  	dec	di			;di -> cntry_root
 37326                                  scp_path:
 37327                                  	call	move_asciiz		;copy it
 37328                                  
 37329                                  	mov	di,cntry_drv
 37330                                  scpath_exit:
 37331                                  
 37332                                  	push	ds			;switch ds, es
 37333                                  	push	es
 37334                                  	pop	ds
 37335                                  	pop	es			;ds, es value restored
 37336                                  
 37337                                  	pop	si
 37338                                  	retn
 37339                                  
 37340                                  %endif
 37341                                  
 37342                                  ;----------------------------------------------------------------------------
 37343                                  
 37344                                  chk_drive_letter:
 37345                                  
 37346                                  ;check if ds:[si] is a drive letter followed by ":".
 37347                                  ;assume that every alpha character is already converted to upper case.
 37348                                  ;carry set if not.
 37349                                  
 37350                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37351                                  
 37352 0000323C 50                      	push	ax
 37353 0000323D 803C41                  	cmp	byte [si],"A"
 37354                                  	;jb	short cdletter_no
 37355 00003240 720C                    	jb	short cdletter_exit
 37356 00003242 803C5A                  	cmp	byte [si],"Z"
 37357 00003245 7706                    	ja	short cdletter_no
 37358 00003247 807C013A                	cmp	byte [si+1],":"
 37359                                  	;jne	short cdletter_no
 37360                                  	;jmp	short cdletter_exit
 37361                                  	; 10/09/2023
 37362 0000324B 7401                    	je	short cdletter_exit
 37363                                  
 37364                                  cdletter_no:
 37365 0000324D F9                      	stc
 37366                                  cdletter_exit:
 37367 0000324E 58                      	pop	ax
 37368 0000324F C3                      	retn
 37369                                  
 37370                                  ;----------------------------------------------------------------------------
 37371                                  
 37372                                  move_asciiz:
 37373                                  
 37374                                  ;in: ds:si -> source es:di -> target
 37375                                  ;out: copy the string until 0.
 37376                                  ;assumes there exists a 0.
 37377                                  
 37378                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37379                                  
 37380                                  masciiz_loop:
 37381                                  	; 10/09/2023
 37382 00003250 F604FF                  	test	byte [si],0FFh
 37383 00003253 A4                      	movsb
 37384                                  	;cmp	byte [si-1],0	; was it 0?
 37385                                  	;jne	short masciiz_loop
 37386 00003254 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 37387 00003256 C3                      	retn
 37388                                  
 37389                                  
 37390                                  ;----------------------------------------------------------------------------
 37391                                  
 37392                                  ;	ds:dx points to string to output (asciz)
 37393                                  ;
 37394                                  ;	prints <badld_pre> <string> <badld_post>
 37395                                  
 37396                                  badfil:
 37397 00003257 0E                      	push	cs
 37398 00003258 07                      	pop	es
 37399                                  
 37400 00003259 89D6                    	mov	si,dx
 37401                                  badload:
 37402 0000325B BA[9736]                	mov	dx,badld_pre	; want to print config error
 37403 0000325E BB[5436]                	mov	bx,crlfm
 37404                                  prnerr:
 37405 00003261 0E                      	push	cs
 37406 00003262 1F                      	pop	ds ; *
 37407 00003263 E81D00                  	call	print
 37408                                  prn1:
 37409 00003266 268A14                  	mov	dl,[es:si]
 37410 00003269 08D2                    	or	dl,dl
 37411 0000326B 7407                    	jz	short prn2
 37412 0000326D B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37413 0000326F CD21                    	int	21h
 37414 00003271 46                      	inc	si
 37415 00003272 EBF2                    	jmp	short prn1
 37416                                  prn2:
 37417 00003274 89DA                    	mov	dx,bx
 37418 00003276 E80A00                  	call	print
 37419                                  	; 11/12/2022
 37420                                  	; ds = cs ; *
 37421 00003279 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 37422                                  	;cmp	byte [cs:donotshownum],1 
 37423 0000327E 7407                    	je	short prnexit
 37424                                  	
 37425                                  	; 18/12/2022
 37426                                  	;call	error_line
 37427 00003280 E91EF4                  	jmp	error_line
 37428                                  ;prnexit:
 37429                                  	;retn
 37430                                  
 37431                                  ;----------------------------------------------------------------------------
 37432                                  
 37433                                  print:
 37434 00003283 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37435 00003285 CD21                    	int	21h
 37436                                  prnexit:	; 18/12/2022
 37437 00003287 C3                      	retn
 37438                                  
 37439                                  ;----------------------------------------------------------------------------
 37440                                  
 37441                                  ;  open device pointed to by dx, al has access code
 37442                                  ;   if unable to open do a device open null device instead
 37443                                  
 37444                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37445                                  	; (SYSINIT:3764h)
 37446                                  open_dev:
 37447 00003288 E80500                  	call	open_file
 37448 0000328B 7309                    	jnc	short open_dev3
 37449                                  
 37450                                  open_dev1:
 37451 0000328D BA[F032]                	mov	dx,nuldev
 37452                                  	; 18/12/2022
 37453                                  	;call	open_file
 37454                                  ;of_retn:
 37455                                  	;retn
 37456                                  	; 18/12/2022
 37457                                  	;jmp	short open_file
 37458                                  open_file:
 37459 00003290 B43D                    	mov	ah,OPEN	; 3Dh
 37460 00003292 F9                      	stc
 37461 00003293 CD21                    	int	21h
 37462                                  of_retn:	; 18/12/2022
 37463 00003295 C3                      	retn
 37464                                  
 37465                                  open_dev3:
 37466 00003296 89C3                    	mov	bx,ax			; handle from open to bx
 37467                                  	;;xor	ax,ax			; get device info
 37468                                  	;;mov	ah,IOCTL ; 44h
 37469                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37470                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37471                                  	;xor	ax,ax
 37472                                  	;mov	ah,44h	; IOCTL
 37473                                  	; 11/12/2022
 37474 00003298 B80044                  	mov	ax,4400h ; IOCTL<<8 
 37475                                  
 37476 0000329B CD21                    	int	21h
 37477                                  
 37478 0000329D F6C280                  	test	dl,10000000b ; 80h
 37479 000032A0 75F3                    	jnz	short of_retn
 37480                                  
 37481 000032A2 B43E                    	mov	ah,CLOSE ; 3Eh
 37482 000032A4 CD21                    	int	21h
 37483 000032A6 EBE5                    	jmp	short open_dev1
 37484                                  
 37485                                  ;----------------------------------------------------------------------------
 37486                                  
 37487                                  ; 18/12/2022
 37488                                  %if 0
 37489                                  open_file:
 37490                                  	mov	ah,OPEN	; 3Dh
 37491                                  	stc
 37492                                  	int	21h
 37493                                  	retn
 37494                                  %endif
 37495                                  
 37496                                  ;----------------------------------------------------------------------------
 37497                                  
 37498                                  ; test int24. return back to dos with the fake user response of "fail"
 37499                                  
 37500                                  int24:
 37501 000032A8 B003                    	mov	al,3			; fail the system call
 37502 000032AA CF                      	iret				; return back to dos.
 37503                                  
 37504                                  ; 19/04/2019 - Retro DOS v4.0
 37505                                  
 37506                                  ;----------------------------------------------------------------------------
 37507                                  ; DATA
 37508                                  ;----------------------------------------------------------------------------
 37509                                  
 37510                                  ;include copyrigh.inc			; copyright statement
 37511                                  
 37512                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37513                                  
 37514                                  ;MsDosVersion6Copyr:
 37515                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37516                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37517                                  
 37518                                  ; 22/10/2022
 37519                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37520                                  
 37521                                  ; 28/12/2022
 37522                                  %if 0
 37523                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37524                                  MsDosVersion5Copyr:
 37525                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37526                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37527                                  %endif
 37528                                  
 37529                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37530                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37531                                  ; 20/04/2019 - Retro DOS v4.0
 37532                                  ;BOOTMES:
 37533                                  ;	db      13
 37534                                  ;	db      10
 37535                                  ;	db      "MS-DOS version "
 37536                                  ;	db      MAJOR_VERSION + "0"
 37537                                  ;	db      "."
 37538                                  ;	db      (MINOR_VERSION / 10) + "0"
 37539                                  ;	db      (MINOR_VERSION % 10) + "0"
 37540                                  ;	db      13,10
 37541                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37542                                  ;	; 22/10/2022
 37543                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37544                                  ;	;
 37545                                  ;	db	0
 37546                                  
 37547                                  	; 12/12/2022
 37548 000032AB 00                      	db	0
 37549                                  ; 12/12/2022
 37550                                  BOOTMES:
 37551 000032AC 0D0A                    	db	13,10
 37552                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37553                                  	; 28/12/2022
 37554 000032AE 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37554 000032B7 2076342E3120284D6F-
 37554 000032C0 646966696564204D53-
 37554 000032C9 444F5320352E302920 
 37555 000032D2 0D0A                    	db	13,10
 37556                                  	;;db	"by Erdogan Tan [2022] "
 37557                                  	;db	"by Erdogan Tan [2023] " ; 04/01/2023
 37558 000032D4 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 05/01/2024
 37558 000032DD 6E2054616E205B3230-
 37558 000032E6 32345D20           
 37559 000032EA 0D0A                    	db	13,10
 37560 000032EC 0D0A2400                	db	13,10,"$",0
 37561                                  
 37562 000032F0 4E554C00                nuldev:	db	"NUL",0
 37563 000032F4 434F4E00                condev:	db	"CON",0
 37564 000032F8 41555800                auxdev:	db	"AUX",0
 37565 000032FC 50524E00                prndev:	db	"PRN",0
 37566                                  
 37567                                  ;IFDEF	CONFIGPROC
 37568 00003300 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37568 00003309 595300             
 37569                                  
 37570 0000330C 413A                    cntry_drv:  db	"A:"
 37571 0000330E 5C                      cntry_root: db	"\"
 37572 0000330F 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37572 00003318 595300             
 37573                                  	    ;db	52 dup (0)
 37574 0000331B 00<rep 34h>             	    times 52 db 0	
 37575                                  
 37576                                  country_file_signature:
 37577 0000334F FF434F554E545259        	db	0FFh,'COUNTRY'
 37578                                  
 37579                                  cntrycodepage_id: 
 37580 00003357 0000                    	dw	0 	
 37581                                  
 37582                                  ;ENDIF ; CONFIGPROC
 37583                                  
 37584                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37585                                  ;;ifdef	MULTI_CONFIG
 37586                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 37587                                  ;tmplate: db	64                      ; must precede commnd
 37588                                  ;;endif
 37589                                  	; 02/11/2022
 37590                                  	;db	12                      ; size of commnd line (excl. null)
 37591                                  
 37592 00003359 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37592 00003362 434F4D00           
 37593                                  	;db	51 dup (0)
 37594 00003366 00<rep 33h>             	times	51 db 0
 37595                                  ;endif
 37596                                  
 37597                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37598                                  ;;ifdef	MULTI_CONFIG
 37599                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37600                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 37601                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37602                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37603                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 37604                                  ;	 db	9,"A:\DOS /P",0		;
 37605                                  ;def_swchr:	
 37606                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 37607                                  ;;endif
 37608                                  
 37609                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37610                                  ;command_line:
 37611                                  ;	db	2,"/P"			; default command.com args
 37612                                  ;	;db	125 dup (0)
 37613                                  ;	times	125 db 0
 37614                                  
 37615                                  pathstring:
 37616                                  	;db	64 dup (0)
 37617 00003399 00<rep 40h>             	times	64 db 0
 37618                                  
 37619                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37620                                  %if 0
 37621                                  
 37622                                  dae_flag:
 37623                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37624                                  
 37625                                  ;ifdef	MULTI_CONFIG
 37626                                  
 37627                                  MAX_MULTI_CONFIG equ 10
 37628                                  
 37629                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37630                                  
 37631                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 37632                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37633                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37634                                  bLastCol:	db      0               ; ending column on status line
 37635                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37636                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 37637                                                                          ; 2=disable default 2-second delay
 37638                                  bCRTPage:	db      0               ; value saved from BIOS data area
 37639                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 37640                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37641                                  bDefBlock:	db      1               ; default block #
 37642                                  bMaxBlock:	db      0               ; maxmimum block #
 37643                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 37644                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 37645                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37646                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37647                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37648                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37649                                  
 37650                                  szBoot:		db      "CONFIG=",0
 37651                                  szMenu:		db      "MENU",0
 37652                                  szCommon:	db      "COMMON",0
 37653                                  
 37654                                  ;endif	;MULTI_CONFIG
 37655                                  
 37656                                  comtab:	 ; label byte
 37657                                  
 37658                                  ;            cmd len    command         cmd code
 37659                                  ;            -------    -------         --------
 37660                                  
 37661                                  ;ifdef MULTI_CONFIG
 37662                                          db      1,      "[",            CONFIG_BEGIN
 37663                                  ;endif
 37664                                          db      5,      "BREAK",        CONFIG_BREAK
 37665                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 37666                                          db      7,      "COMMENT",      CONFIG_COMMENT
 37667                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 37668                                          db      6,      "DEVICE",       CONFIG_DEVICE
 37669                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37670                                          db      3,      "DOS",          CONFIG_DOS
 37671                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37672                                          db      4,      "FCBS",         CONFIG_FCBS
 37673                                          db      5,      "FILES",        CONFIG_FILES
 37674                                  ;ifdef MULTI_CONFIG
 37675                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 37676                                  ;endif
 37677                                          db      7,      "INSTALL",      CONFIG_INSTALL
 37678                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37679                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37680                                  ;ifdef MULTI_CONFIG
 37681                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 37682                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37683                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37684                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 37685                                  ;endif
 37686                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37687                                  ;ifdef MULTI_CONFIG
 37688                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37689                                  ;endif
 37690                                          db      3,      "REM",          CONFIG_REM
 37691                                  ;ifdef MULTI_CONFIG
 37692                                          db      3,      "SET",          CONFIG_SET
 37693                                  ;endif
 37694                                          db      5,      "SHELL",        CONFIG_SHELL
 37695                                  ;if    STACKSW
 37696                                          db      6,      "STACKS",       CONFIG_STACKS
 37697                                  ;endif
 37698                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37699                                  	db	0
 37700                                  %endif
 37701                                  
 37702                                  comtab:
 37703                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37704                                  	; (SYSINIT:38EDh)
 37705 000033D9 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37706 000033E2 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37707 000033E9 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37708 000033F1 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37708 000033FA 474855             
 37709 000033FD 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37710 00003404 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37711 0000340A 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37711 00003413 454C               
 37712 00003415 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37712 0000341E 434B4D             
 37713 00003421 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37713 0000342A 50                 
 37714 0000342B 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37715 00003433 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37716 0000343C 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37717 00003443 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37718 0000344C 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37719 00003455 0352454D30              	db      3,      "REM",          CONFIG_REM
 37720 0000345A 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37720 00003463 31                 
 37721 00003464 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37722 00003469 00                      	db	0
 37723                                  
 37724                                  deviceparameters:	
 37725                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37726                                  devp.specialfunc:	; deviceparameters +
 37727 0000346A 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37728                                  devp.devtype:
 37729 0000346B 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37730                                  devp.devattr:
 37731 0000346C 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37732                                  devp.cylinders:
 37733 0000346E 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37734                                  
 37735 00003470 00<rep 11Eh>            	times	286	db 0
 37736                                  	
 37737 0000358E 0200                    hlim:	dw	2
 37738 00003590 0900                    slim:	dw	9
 37739                                  
 37740 00003592 00                      drive:	db	0
 37741                                  
 37742                                  switches:
 37743 00003593 0000                    	dw	0
 37744                                  
 37745                                  ; the following are the recommended bpbs for the media that
 37746                                  ; we know of so far.
 37747                                  
 37748                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37749                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37750                                  
 37751                                  ; 48 tpi diskettes
 37752                                  
 37753 00003595 0002                    bpb48t	dw	512
 37754 00003597 02                      	db	2
 37755 00003598 0100                    	dw	1
 37756 0000359A 02                      	db	2
 37757 0000359B 7000                    	dw	112
 37758 0000359D D002                    	dw	2*9*40 ; 720
 37759 0000359F FD                      	db	0FDh
 37760 000035A0 0200                    	dw	2
 37761 000035A2 0900                    	dw	9
 37762 000035A4 0200                    	dw	2
 37763 000035A6 00000000                	dd	0
 37764 000035AA 00000000                        dd      0
 37765                                  
 37766                                  ; 96tpi diskettes
 37767                                  
 37768 000035AE 0002                    bpb96t:	dw	512
 37769 000035B0 01                      	db	1
 37770 000035B1 0100                    	dw	1
 37771 000035B3 02                      	db	2
 37772 000035B4 E000                    	dw	224
 37773 000035B6 6009                    	dw	2*15*80 ; 2400
 37774 000035B8 F9                      	db	0F9h
 37775 000035B9 0700                    	dw	7
 37776 000035BB 0F00                    	dw	15
 37777 000035BD 0200                    	dw	2
 37778 000035BF 00000000                	dd	0
 37779 000035C3 00000000                        dd      0
 37780                                  
 37781                                  ; 3 1/2 inch diskette bpb
 37782                                  
 37783 000035C7 0002                    bpb35:	dw	512
 37784 000035C9 02                      	db	2
 37785 000035CA 0100                    	dw	1
 37786 000035CC 02                      	db	2
 37787 000035CD 7000                    	dw	112
 37788 000035CF A005                    	dw	2*9*80 ; 1440
 37789 000035D1 F9                      	db	0F9h
 37790 000035D2 0300                    	dw	3
 37791 000035D4 0900                    	dw	9
 37792 000035D6 0200                    	dw	2
 37793 000035D8 00000000                	dd	0
 37794 000035DC 00000000                        dd      0
 37795                                        
 37796 000035E0 0002                    bpb35h:	dw	512
 37797 000035E2 01                      	db	1
 37798 000035E3 0100                    	dw	1
 37799 000035E5 02                      	db	2
 37800 000035E6 E000                    	dw	224
 37801 000035E8 400B                    	dw	2*18*80 ; 2880
 37802 000035EA F0                      	db	0F0h
 37803 000035EB 0900                    	dw	9
 37804 000035ED 1200                    	dw	18
 37805 000035EF 0200                    	dw	2
 37806 000035F1 00000000                	dd	0
 37807 000035F5 00000000                        dd      0
 37808                                  
 37809                                  ; m037 - BEGIN
 37810                                  
 37811 000035F9 0002                    bpb288:	dw	512
 37812 000035FB 02                      	db	2
 37813 000035FC 0100                    	dw	1
 37814 000035FE 02                      	db	2
 37815 000035FF F000                    	dw	240
 37816 00003601 8016                    	dw	2*36*80 ; 5760
 37817 00003603 F0                      	db	0F0h
 37818 00003604 0900                    	dw	9
 37819 00003606 2400                    	dw	36
 37820 00003608 0200                    	dw	2
 37821 0000360A 00000000                	dd	0
 37822 0000360E 00000000                        dd      0
 37823                                  
 37824                                  ; m037 - END
 37825                                  
 37826                                  ; 12/05/2019
 37827                                  
 37828                                  align 2
 37829                                  
 37830                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37831                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37832                                  
 37833 00003612 [9535]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37834 00003614 [AE35]                  	    dw	    bpb96t		; 96tpi drives
 37835 00003616 [C735]                  	    dw	    bpb35		; 3.5" drives
 37836                                  ; the following are not supported, so default to 3.5" media layout
 37837 00003618 [C735]                  	    dw	    bpb35		; not used - 8" drives
 37838 0000361A [C735]                  	    dw	    bpb35		; not used - 8" drives
 37839 0000361C [C735]                  	    dw	    bpb35		; not used - hard files
 37840 0000361E [C735]                  	    dw	    bpb35		; not used - tape drives
 37841 00003620 [E035]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37842 00003622 [C735]                  	    dw	    bpb35		; ERIMO				m037
 37843 00003624 [F935]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37844                                  
 37845                                  switchlist: 
 37846 00003626 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37847                                  
 37848                                  ;----------------------------------------------------------------------------
 37849                                  ; Messages
 37850                                  ;----------------------------------------------------------------------------
 37851                                  
 37852                                  ; 19/04/2019 - Retro DOS v4.0
 37853                                  
 37854                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37855                                  
 37856 0000362F 00                      	db 	0
 37857                                  
 37858                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37859                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37860                                  
 37861                                  badopm:
 37862 00003630 0D0A                    	db	0Dh,0Ah 
 37863 00003632 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37863 0000363B 7A656420636F6D6D61-
 37863 00003644 6E6420696E20434F4E-
 37863 0000364D 4649472E535953     
 37864                                  crlfm:
 37865 00003654 0D0A24                  	db	0Dh,0Ah,'$'
 37866                                  badparm:
 37867 00003657 0D0A                    	db	0Dh,0Ah
 37868 00003659 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37868 00003662 6E64206F7220706172-
 37868 0000366B 616D6574657273202D-
 37868 00003674 2024               
 37869                                  badsiz_pre:
 37870 00003676 0D0A                    	db	0Dh,0Ah
 37871 00003678 536563746F72207369-     	db	'Sector size too large in file $'
 37871 00003681 7A6520746F6F206C61-
 37871 0000368A 72676520696E206669-
 37871 00003693 6C652024           
 37872                                  badld_pre:
 37873 00003697 0D0A                    	db	0Dh,0Ah
 37874 00003699 426164206F72206D69-     	db	'Bad or missing $'
 37874 000036A2 7373696E672024     
 37875                                  badcom:
 37876 000036A9 436F6D6D616E642049-     	db	'Command Interpreter',0
 37876 000036B2 6E7465727072657465-
 37876 000036BB 7200               
 37877                                  badcountry:
 37878 000036BD 0D0A                    	db	0Dh,0Ah
 37879 000036BF 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37879 000036C8 6F756E74727920636F-
 37879 000036D1 6465206F7220636F64-
 37879 000036DA 6520706167650D0A24 
 37880                                  badcountrycom:
 37881 000036E3 0D0A                    	db	0Dh,0Ah
 37882 000036E5 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37882 000036EE 434F554E5452592063-
 37882 000036F7 6F6D6D616E640D0A24 
 37883                                  insufmemory:
 37884 00003700 0D0A                    	db	0Dh,0Ah
 37885 00003702 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37885 0000370B 656E74206D656D6F72-
 37885 00003714 7920666F7220434F55-
 37885 0000371D 4E5452592E53595320-
 37885 00003726 66696C650D0A24     
 37886                                  badmem:
 37887 0000372D 0D0A                    	db	0Dh,0Ah
 37888 0000372F 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37888 00003738 74696F6E20746F6F20-
 37888 00003741 6C6172676520666F72-
 37888 0000374A 206D656D6F72790D0A-
 37888 00003753 24                 
 37889                                  badblock:
 37890 00003754 0D0A                    	db	0Dh,0Ah
 37891 00003756 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37891 0000375F 626C6F636B20646576-
 37891 00003768 696365730D0A24     
 37892                                  badstack:
 37893 0000376F 0D0A                    	db	0Dh,0Ah
 37894 00003771 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37894 0000377A 5441434B2070617261-
 37894 00003783 6D65746572730D0A24 
 37895                                  	; 18/12/2022
 37896                                  ;badorder:
 37897                                  	;db	0Dh,0Ah
 37898                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37899                                  errorcmd:
 37900 0000378C 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37900 00003795 434F4E4649472E5359-
 37900 0000379E 53206C696E652024   
 37901                                  
 37902                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37903                                  %if 0
 37904                                  
 37905                                  OnOff:	db	'ON'
 37906                                  OnOff2:	db	'OFF'
 37907                                  
 37908                                  StartMsg:
 37909                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37910                                  	db	0Ah,0
 37911                                  _$PauseMsg:
 37912                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37913                                  _$CleanMsg:
 37914                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37915                                  _$InterMsg:
 37916                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37917                                  _$MenuHeader:
 37918                                  	db	0Dh,0Ah
 37919                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37920                                  	db	'  =======================',0Dh,0Ah,'$'
 37921                                  _$MenuPrmpt:
 37922                                  	db	'  Enter a choice: $'
 37923                                  _$StatusLine:
 37924                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37925                                  	db	'and AUTOEXEC.BAT [ ]$'
 37926                                  _$InterPrmpt:
 37927                                  	db	' [Y,N]?$'
 37928                                  _$YES:	db	'YES$'
 37929                                  _$NO:	db	'NO $'
 37930                                  _$TimeOut:
 37931                                  	db	'Time remaining: $'
 37932                                  badcomprmpt:
 37933                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37934                                  	db	0Dh,0Ah,'$'
 37935                                  _$AutoPrmpt:
 37936                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37937                                  
 37938                                  %endif
 37939                                  
 37940                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37941                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37942                                  
 37943                                  TooManyDrivesMsg:
 37944 000037A6 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37944 000037AF 4C6F676963616C2064-
 37944 000037B8 726976657320706173-
 37944 000037C1 74205A3A2065786973-
 37944 000037CA 7420616E642077696C-
 37944 000037D3 6C2062652069676E6F-
 37944 000037DC 7265640D0A24       
 37945                                  
 37946                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37947                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37948                                  	;db	7 dup(0)
 37949                                  
 37950                                  	;times	7 db 0
 37951                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37952                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37953                                  	; 09/12/2022
 37954                                  	;times 4 db 0
 37955                                  
 37956                                  ;----------------------------------------------------------------------------
 37957                                  		; 09/12/2022
 37958                                  		;db 0
 37959                                  
 37960                                  number3div	equ ($-SYSINIT$)
 37961                                  number3mod	equ (number3div % 16)
 37962                                  
 37963                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 37964 000037E2 00<rep Eh>              		times (16-number3mod) db 0
 37965                                  %endif
 37966                                  
 37967                                  ;----------------------------------------------------------------------------
 37968                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37969                                  ;----------------------------------------------------------------------------
 37970                                  
 37971                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37972                                  
 37973                                  ;----------------------------------------------------------------------------
 37974                                  ; 20/04/2019 - Retro DOS v4.0
 37975                                  
 37976                                  ; 09/12/2022
 37977                                  ;
 37978                                  ;bss_start:
 37979                                  ;
 37980                                  ;ABSOLUTE bss_start
 37981                                  ;
 37982                                  ;alignb 16
 37983                                  
 37984                                  SI_end:  ; SI_end equ $
 37985                                  
 37986                                  ;----------------------------------------------------------------------------
 37987                                  
 37988                                  ;sysinitseg	ends
 37989                                  
 37990                                  ; ***************************************************************************
 37991                                  
 37992                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37993                                  
 37994                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37995                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37996                                  
 37997                                  ;----------------------------------------------------------------------------
 37998                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37999                                  ;----------------------------------------------------------------------------
 38000                                  
 38001                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 38002                                  ;----------------------------------------------------------------------------
 38003                                  ;----------------------------------------------------------------------------
 38004                                  
 38005                                  ; ----------------------------------------------------------------------------
 38006                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 38007                                  ; ----------------------------------------------------------------------------
 38008                                  ; 18/03/2019 - Retro DOS v4.0 
 38009                                  ; 11/06/2018 - Retro DOS v3.0 
 38010                                  
 38011                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 38012                                  		;; 28/06/2019 ('msdos6.s') 
 38013                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 38014                                  		
 38015                                  		; 25/03/2024
 38016                                  		; 10/03/2024
 38017                                  		; 29/02/2024
 38018                                  		; 24/02/2024
 38019                                  		; 15/02/2024
 38020                                  		; 06/02/2024
 38021                                  		; 30/01/2024
 38022                                  		; 22/01/2024 (BugFix)
 38023                                  		; 21/01/2024
 38024                                  		; 16/01/2024 (BugFix)
 38025                                  		; 15/01/2024
 38026                                  		; 27/09/2023 (BugFix)
 38027                                  		; 25/09/2023
 38028                                  		; 29/12/2022
 38029 000037F0 <bin 8C7Fh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 38030                                  		
 38031                                  		;; 28/12/2022 (BugFix)
 38032                                  		;; 22/12/2022
 38033                                  		;; 21/12/2022 ('msdos5.s')
 38034                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 38035                                  	
 38036                                  ; 28/09/2023	
 38037                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 38038                                  
 38039 0000C46F 90                      align 2
 38040                                  
 38041                                  ; 21/12/2022
 38042                                  ;;END_OF_KERNEL:
 38043                                  ;END_OF_KERNEL equ $
 38044                                  
 38045                                  ; 28/09/2023
 38046                                  S3SIZE equ $-$$
 38047                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 38048                                  
 38049                                  ;=============================================================================
 38050                                  ;	END
 38051                                  ;=============================================================================
 38052                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38053                                  ; ------------------------------
 38054                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
