     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 10/02/2024 - Retro DOS v4.2 ((Previous: 29/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E9EA75                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [1E61]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [3C16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [4516]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [F716]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [1217]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [1817]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [8315]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [AF15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [5D13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [B613]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [C213]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [2C17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [3617]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [810F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [680E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [051E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [D517]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [F41E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [3A1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [7B17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [5C1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [601C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [E41E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [4118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [5306]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [630E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [580E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [100F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [120F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [5306]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [5306]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [510F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [5306]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [641C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [681C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [8D17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [6317]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [890E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [8E10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [581C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [541C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [050F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [5E0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [7B0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [9A0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [AB0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [490C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [450E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [200C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [C260]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [530F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [3B0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [7A0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [220E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [B60E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [500C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [C021]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [0C21]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [4721]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [E06E]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [096E]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [3A66]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [4B67]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [B167]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [306F]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [B667]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [ED6E]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [2122]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [6B68]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [8968]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [A820]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [B561]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [2F63]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [0B63]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [9C5A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [FA60]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [925A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [F21F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [4620]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [470F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [B60F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [440C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [7D10]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [566F]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [1D68]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [6463]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [CA0E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [E16F]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [C96F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [C271]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [4A64]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [5369]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [B868]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [A46D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [5306]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [EA0E]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [D30C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [D00D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [8766]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [6D66]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [8011]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [6D66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [5306]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [7770]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [1007]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [3509]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [AE2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [AB0E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2F09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [C74F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [4716]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [9D52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [1C58]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [A32F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [E159]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [7672]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [FA2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [E42B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [E60A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [EC11]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [1558]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [EC11]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [B911]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [D111]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [724F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [5958]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [B859]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [B565]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [186A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [C369]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [C96D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [870B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [160C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [7D0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [9711]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [0669]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [8265]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [A46D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7A06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [EF40]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [EC11]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [DF11]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [8E12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [3A66]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [9412]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [4B67]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [5012]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [D112]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [C012]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [EE12]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [F212]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [5306]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[F211]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8F54B                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E86355                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8970D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8A90D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E83431                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E86733                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E8100D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E89103                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E81F0D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E8F135                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E8C930                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7216                    	JC	SHORT SKIPGET
  5022 000005FE E8C263                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025 00000603 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5026 00000605 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5027 00000608 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5028 0000060A F9                      	STC				;DCR.			;AN000;
  5029 0000060B A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5030 0000060E C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5031                                  SKIPGET:
  5032 00000614 58                      	POP	AX
  5033 00000615 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5034                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5035                                  	;jnc	short getbp_t
  5036                                  	;retn
  5037                                  getbp_t:
  5038 00000617 C42E[A205]              	LES	BP,[THISCDS]
  5039                                  	; 15/12/2022
  5040 0000061B 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5041                                  	; 07/12/2022
  5042                                  	;TEST	WORD [ES:BP+43H],8000H
  5043                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5044 00000620 7408                    	JZ	SHORT GETBP_CDS
  5045 00000622 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5046 00000628 F9                      	STC
  5047                                  GETBP_RETN:
  5048 00000629 C3                      	RETN
  5049                                  
  5050                                  GETBP_CDS:
  5051                                  	;LES	BP,[ES:BP+45H]
  5052 0000062A 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5053                                  GOTDPB:
  5054                                  	; Load THISDPB from ES:BP
  5055 0000062E 892E[8A05]              	MOV	[THISDPB],BP
  5056 00000632 8C06[8C05]              	MOV	[THISDPB+2],ES
  5057 00000636 C3                      	RETN
  5058                                  
  5059                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5060                                  
  5061                                  ;----------------------------------------------------------------------------
  5062                                  ;
  5063                                  ; Procedure Name : SYS_RETURN
  5064                                  ;
  5065                                  ; These are the general system call exit mechanisms. All internal system
  5066                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5067                                  ; is to set the user's flags and set his AX register for return.
  5068                                  ;
  5069                                  ;----------------------------------------------------------------------------
  5070                                  
  5071                                          ;procedure   SYS_RETURN,NEAR
  5072                                  SYS_RETURN:        
  5073                                          ;entry	SYS_RET_OK
  5074                                  SYS_RET_OK:   
  5075 00000637 E847FE                  	call    Get_User_Stack
  5076                                  		; turn off user's carry flag
  5077                                  SYS_RET_OK_clc: ; 25/06/2019 
  5078                                          ;;and	word [SI+16h],0FFFEh 
  5079                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5080                                          ; 25/06/2019
  5081 0000063A 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5082 0000063E EB10                    	JMP     SHORT DO_RET
  5083                                  
  5084                                          ;entry   SYS_RET_ERR
  5085                                  SYS_RET_ERR:        
  5086 00000640 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5087 00000642 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5088 00000645 E81A00                  	CALL	ErrorMap
  5089                                  
  5090                                  	;entry	From_GetSet
  5091                                  From_GetSet:
  5092 00000648 E836FE                          call    Get_User_Stack
  5093                                  		 ; signal carry to user
  5094                                  	;;or	word [SI+16h],1
  5095                                  	;OR	word [SI+user_env.user_F],f_Carry
  5096                                  	; 25/06/2019
  5097 0000064B 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5098 0000064F F9                      	STC			; also, signal internal error
  5099                                  DO_RET:
  5100                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5101 00000650 8904                    	MOV	[SI],AX
  5102 00000652 C3                      	RETN
  5103                                  
  5104                                  	;entry	FCB_RET_OK
  5105                                  FCB_RET_OK:
  5106                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5107                                  NO_OP:
  5108 00000653 30C0                    	XOR	AL,AL
  5109 00000655 C3                      	retn
  5110                                  
  5111                                  	;entry	FCB_RET_ERR
  5112                                  FCB_RET_ERR:
  5113 00000656 30E4                    	XOR	AH,AH
  5114 00000658 36A3[2403]              	mov	[ss:EXTERR],AX
  5115 0000065C E80300                  	CALL	ErrorMap
  5116 0000065F B0FF                    	MOV	AL,-1
  5117 00000661 C3                      	retn
  5118                                  
  5119                                  	;entry	ErrorMap
  5120                                  ErrorMap:
  5121 00000662 56                      	PUSH	SI
  5122                                  				; ERR_TABLE_21 is now in DOSDATA
  5123 00000663 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5124                                  				; SS override for FAILERR and EXTERR
  5125 00000666 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5126 0000066C 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5127                                  		 ; Ooops, this is the REAL reason
  5128                                  	;mov	word [SS:EXTERR],53h
  5129 0000066E 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5130                                  EXTENDED_NORMAL:
  5131 00000675 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5132 00000678 5E                      	POP	SI
  5133 00000679 C3                      	retn
  5134                                  
  5135                                  	;EndProc SYS_RETURN
  5136                                  
  5137                                  ;---------------------------------------------------------------------------
  5138                                  ;
  5139                                  ; Procedure Name : CAL_LK
  5140                                  ;
  5141                                  ; Inputs:
  5142                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5143                                  ;		(DS NEED not be DOSDATA)
  5144                                  ;	[EXTERR] is set with error
  5145                                  ; Function:
  5146                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5147                                  ; Outputs:
  5148                                  ;	[EXTERR_CLASS] set
  5149                                  ;	[EXTERR_ACTION] set
  5150                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5151                                  ; Destroys SI, FLAGS
  5152                                  ;
  5153                                  ;---------------------------------------------------------------------------
  5154                                  
  5155                                  	;procedure CAL_LK,NEAR
  5156                                  CAL_LK:
  5157 0000067A 1E                      	PUSH	DS
  5158 0000067B 50                      	PUSH	AX
  5159 0000067C 53                      	PUSH	BX
  5160                                  
  5161                                  ;M048	Context DS		; DS:SI -> Table
  5162                                  ;
  5163                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5164                                  ; is DOSDATA
  5165                                  
  5166                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5167                                  	; 15/05/2019 - Retro DOS v4.0
  5168 0000067D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5169                                  
  5170                                  	; 18/07/2018
  5171                                  	;push	ss
  5172                                  	;pop	ds
  5173                                  
  5174 00000682 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5175                                  TABLK1:
  5176 00000686 AC                      	LODSB
  5177                                  
  5178 00000687 3CFF                    	CMP	AL,0FFH
  5179 00000689 7409                    	JZ	short GOT_VALS	; End of table
  5180 0000068B 38D8                    	CMP	AL,BL
  5181 0000068D 7405                    	JZ	short GOT_VALS	; Got entry
  5182 0000068F 83C603                  	ADD	SI,3		; Next table entry
  5183                                  	; 15/08/2018
  5184 00000692 EBF2                    	JMP	short TABLK1
  5185                                  
  5186                                  GOT_VALS:
  5187 00000694 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5188                                  
  5189 00000695 80FCFF                  	CMP	AH,0FFH
  5190 00000698 7404                    	JZ	short NO_SET_ACT
  5191 0000069A 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5192                                  NO_SET_ACT:
  5193 0000069E 3CFF                    	CMP	AL,0FFH
  5194 000006A0 7403                    	JZ	short NO_SET_CLS
  5195 000006A2 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5196                                  NO_SET_CLS:
  5197 000006A5 AC                      	LODSB			; Get LOCUS
  5198                                  
  5199 000006A6 3CFF                    	CMP	AL,0FFH
  5200 000006A8 7403                    	JZ	short NO_SET_LOC
  5201 000006AA A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5202                                  NO_SET_LOC:
  5203 000006AD 5B                      	POP	BX
  5204 000006AE 58                      	POP	AX
  5205 000006AF 1F                      	POP	DS
  5206 000006B0 C3                      	retn
  5207                                  
  5208                                  	;EndProc CAL_LK
  5209                                  
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ;
  5212                                  ; Procedure Name : ETAB_LK
  5213                                  ;
  5214                                  ; Inputs:
  5215                                  ;	AX is error code
  5216                                  ;	[USER_IN_AX] has AH value of system call involved
  5217                                  ; Function:
  5218                                  ;	Make sure error code is appropriate to this call.
  5219                                  ; Outputs:
  5220                                  ;	AX MAY be mapped error code
  5221                                  ;	[EXTERR] = Input AX
  5222                                  ; Destroys ONLY AX and FLAGS
  5223                                  ;
  5224                                  ;---------------------------------------------------------------------------
  5225                                  
  5226                                  	;procedure ETAB_LK,NEAR
  5227                                  
  5228                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5229 000006B1 1E                      	PUSH	DS
  5230 000006B2 56                      	PUSH	SI
  5231 000006B3 51                      	PUSH	CX
  5232 000006B4 53                      	PUSH	BX
  5233                                  
  5234                                  	;Context DS			; SS is DOSDATA
  5235                                  
  5236 000006B5 16                      	push	ss
  5237 000006B6 1F                      	pop	ds
  5238                                  
  5239 000006B7 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5240                                  
  5241                                  					; I21_MAP_E_TAB is now in DOSCODE
  5242 000006BA BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5243 000006BD 88C7                    	MOV	BH,AL			; Real code to BH
  5244 000006BF 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5245                                  TABLK2:
  5246                                  	; 15/05/2019 - Retro DOS v4.0
  5247 000006C3 2E                      	cs
  5248 000006C4 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5249                                  	
  5250                                  	; 18/07/2018 - Retro DOS v3.0
  5251                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5252                                  
  5253 000006C5 3CFF                    	CMP	AL,0FFH 		; End of table?
  5254 000006C7 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5255 000006C9 38D8                    	CMP	AL,BL			; Found call?
  5256 000006CB 740C                    	JZ	short GOT_CALL		; Yes
  5257 000006CD 86E0                    	XCHG	AH,AL			; Count to AL
  5258 000006CF 30E4                    	XOR	AH,AH			; Make word for add
  5259 000006D1 01C6                    	ADD	SI,AX			; Next table entry
  5260 000006D3 EBEE                    	JMP	short TABLK2
  5261                                  
  5262                                  NOT_IN_TABLE:
  5263 000006D5 88F8                    	MOV	AL,BH			; Restore original code
  5264 000006D7 EB0C                    	JMP	SHORT NO_MAP
  5265                                  
  5266                                  GOT_CALL:
  5267 000006D9 88E1                    	MOV	CL,AH
  5268 000006DB 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5269                                  CHECK_CODE:
  5270                                  	; 15/05/2019 - Retro DOS v4.0
  5271 000006DD 2E                      	cs
  5272 000006DE AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5273                                  
  5274                                  	; 18/07/2018
  5275                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5276                                  
  5277 000006DF 38F8                    	CMP	AL,BH			; Code OK?
  5278 000006E1 7402                    	JZ	short NO_MAP		; Yes
  5279 000006E3 E2F8                    	LOOP	CHECK_CODE
  5280                                  NO_MAP:
  5281 000006E5 30E4                    	XOR	AH,AH			; AX is now valid code
  5282 000006E7 5B                      	POP	BX
  5283 000006E8 59                      	POP	CX
  5284 000006E9 5E                      	POP	SI
  5285 000006EA 1F                      	POP	DS
  5286 000006EB C3                      	retn
  5287                                  
  5288                                  	;EndProc ETAB_LK
  5289                                  
  5290                                  ; 18/07/2018 - Retro DOS v3.0
  5291                                  ;---------------------------------------------------------------------------
  5292                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5293                                  
  5294                                  ;IF installed ; (*)
  5295                                  
  5296                                  ;---------------------------------------------------------------------------
  5297                                  ;
  5298                                  ; Procedure Name : SetBad
  5299                                  ;
  5300                                  ; SetBad sets up info for bad functions
  5301                                  ;
  5302                                  ;---------------------------------------------------------------------------
  5303                                  
  5304                                  SetBad:
  5305                                  	;mov	ax,1
  5306 000006EC B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5307                                  
  5308                                  	; MSDOS 3.3
  5309                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5310                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5311                                  
  5312                                  ;	set up ds to point to DOSDATA
  5313                                  
  5314                                  	; 15/05/2019 - Retro DOS v4.0
  5315                                  	; MSDOS 6.0
  5316 000006EF 1E                      	push	ds
  5317                                  
  5318                                  	;getdseg <ds>
  5319 000006F0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5320                                  
  5321 000006F5 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5322                                  
  5323 000006FA 1F                      	pop	ds	  	;hkn; restore ds
  5324                                  
  5325 000006FB F9                      	STC
  5326 000006FC C3                      	retn
  5327                                  
  5328                                  ;--------------------------------------------------------------------------
  5329                                  ;
  5330                                  ; Procedure Name : BadCall
  5331                                  ;
  5332                                  ; BadCall is the initial routine for bad function calls
  5333                                  ;
  5334                                  ;--------------------------------------------------------------------------
  5335                                  
  5336                                  BadCall:
  5337 000006FD E8ECFF                  	call	SetBad
  5338 00000700 CB                      	retf
  5339                                  
  5340                                  ;--------------------------------------------------------------------------
  5341                                  ;
  5342                                  ; OKCall always sets carry to off.
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------
  5345                                  
  5346                                  OKCall:
  5347 00000701 F8                      	CLC
  5348 00000702 CB                      	retf
  5349                                  
  5350                                  ;---------------------------------------------------------------------------
  5351                                  ;
  5352                                  ; Procedure Name : INT2F
  5353                                  ;
  5354                                  ; INT 2F handler works as follows:
  5355                                  ;   PUSH    AX
  5356                                  ;   MOV     AX,multiplex:function
  5357                                  ;   INT     2F
  5358                                  ;   POP     ...
  5359                                  ; The handler itself needs to make the AX available for the various routines.
  5360                                  ;
  5361                                  ;----------------------------------------------------------------------------
  5362                                  
  5363                                  ; 15/05/2019 - Retro DOS v4.0
  5364                                  
  5365                                  ;KERNEL_SEGMENT equ 70h
  5366                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5367                                  DOSBIODATASEG equ 70h
  5368                                  
  5369                                  ; retrodos4.s - offset in BIOSDATA
  5370                                  bios_i2f equ 5
  5371                                  
  5372                                  ;PUBLIC	Int2F
  5373                                  ;INT2F	PROC	FAR
  5374                                  
  5375                                  ; 15/05/2019
  5376                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5377                                  
  5378                                  ; 04/11/2022
  5379                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5380                                  
  5381                                  	; 05/01/2024
  5382                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5383                                  	; 18/07/2018 - Retro DOS v3.0
  5384                                  INT2F:
  5385                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5386                                  INT2FNT:
  5387                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5388 00000703 FB                      	STI
  5389                                  	;cmp	ah,11h
  5390 00000704 80FC11                  	CMP	AH,MultNET
  5391 00000707 750A                    	JNZ	short INT2FSHR
  5392                                  TestInstall:
  5393 00000709 08C0                    	OR	AL,AL
  5394 0000070B 7403                    	JZ	short Leave2F
  5395                                  BadFunc:
  5396 0000070D E8DCFF                  	CALL	SetBad
  5397                                  
  5398                                  	;entry	Leave2F
  5399                                  Leave2F:
  5400 00000710 CA0200                  	RETF	2			; long return + clear flags off stack
  5401                                  
  5402                                  INT2FSHR:
  5403                                  	;cmp	ah,10h
  5404 00000713 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5405 00000716 74F1                    	JZ	short TestInstall	; yes, check for installation
  5406                                  INT2FNLS:
  5407                                  	;cmp	ah,14h
  5408 00000718 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5409 0000071B 74EC                    	JZ	short TestInstall	; yes check for installation
  5410                                  INT2FDOS:
  5411                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5412                                  
  5413                                  	; 18/07/2018
  5414                                  	; MSDOS 3.3
  5415                                  	;;cmp	ah,12h	
  5416                                  	;CMP	AH,MultDOS
  5417                                  	;jz	short DispatchDOS
  5418                                  	;iret
  5419                                  
  5420                                  	; 15/05/2019
  5421                                  	; MSDOS 6.0
  5422                                  	;cmp	ah,12h	; 07/12/2022
  5423 0000071D 80FC12                  	CMP	AH,MultDOS
  5424 00000720 7503                    	JNZ	short check_win		;check if win386 broadcast
  5425 00000722 E9F201                  	jmp	DispatchDOS
  5426                                  
  5427                                  	; .... win386 .... 
  5428                                  
  5429                                  check_win:
  5430                                  	;cmp	ah,16h
  5431 00000725 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5432 00000728 7408                    	je	short Win386_Msg
  5433                                  
  5434                                  	; M044
  5435                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5436                                  	; of Windows. If so, do special action of going and saving last para
  5437                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5438                                  	; bug
  5439                                  
  5440 0000072A 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5441                                  	;jne	short next_i2f		; no, chain on
  5442                                  	; 15/12/2022
  5443                                  	;jmp	winold_swap		; yes, do desired action
  5444 0000072D 7442                    	je	short winold_swap
  5445 0000072F E90501                  	jmp	next_i2f
  5446                                  
  5447                                  	; 15/12/2022
  5448                                  ;next_i2f:
  5449                                  ;	;;;jmp	bios_i2f
  5450                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5451                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5452                                  ;	; 04/11/2022
  5453                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5454                                  
  5455                                  ;	IRET				; This assume that we are at the head
  5456                                  					; of the list
  5457                                  ;INT2F	ENDP
  5458                                  
  5459                                  ; 15/05/2019 - Retro DOS v4.0
  5460                                  
  5461                                  ; We have received a message from Win386. There are three possible
  5462                                  ; messages we could get from Win386:
  5463                                  ;
  5464                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5465                                  ;		  to the Win386 startup info structure.
  5466                                  ; Exit		- for this, we clear the IsWin386 flag.
  5467                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5468                                  ;		  has already been handled. this is indicated by setting
  5469                                  ;		  CX to a non-zero value.
  5470                                  
  5471                                  Win386_Msg:
  5472 00000732 1E                      	push	ds
  5473                                  
  5474                                  	;getdseg <DS>			; ds is DOSDATA
  5475 00000733 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5476                                  
  5477                                  	; For WIN386 2.xx instance data
  5478                                  
  5479 00000738 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5480 0000073A 7503                    	jne	short Win386_Msg_exit
  5481 0000073C E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5482                                  Win386_Msg_exit:
  5483 0000073F 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5484 00000741 7503                    	jne	short Win386_Msg_devcall
  5485 00000743 E92C01                  	jmp	Win386_Leaving
  5486                                  Win386_Msg_devcall:
  5487 00000746 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5488 00000748 7503                    	jne	short Win386_Msg_init
  5489 0000074A E96001                  	jmp	Win386_Query
  5490                                  Win386_Msg_init:
  5491 0000074D 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5492 0000074F 7403                    	je	short Win386_Starting
  5493 00000751 E9E200                  	jmp	win_nexti2f		; no, return
  5494                                  Win386_Starting:
  5495                                  	; 17/12/2022
  5496 00000754 F6C201                  	test	dl,1
  5497                                  	;test	dx,1			; is this really win386?
  5498 00000757 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5499 00000759 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5500                                  Win386_vchk:
  5501                                  	; M018 -- start of block changes
  5502                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5503                                  	; than 030Ah, we skip the VxD presence check
  5504                                  
  5505                                  ;M067 -- Begin changes
  5506                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5507                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5508                                  ;So, we null out the VxD ptr before the check.
  5509                                  
  5510                                  	;mov	word [Win386_Info+6],0
  5511 0000075C C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5512                                  	;mov	word [Win386_Info+8],0
  5513 00000762 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5514                                  
  5515                                  ;M067 -- End changes
  5516                                  
  5517                                  ;ifdef JAPAN
  5518                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5519                                  ;else
  5520 00000768 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5521                                  ;endif
  5522                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5523 0000076C 724E                    	jb	short Win386_vxd
  5524 0000076E E9DD00                  	jmp	noVxD31
  5525                                  
  5526                                  	; 15/12/2022
  5527                                  winold_swap:
  5528 00000771 1E                      	push	ds
  5529 00000772 06                      	push	es
  5530 00000773 56                      	push	si
  5531 00000774 57                      	push	di
  5532 00000775 51                      	push	cx
  5533                                  
  5534                                  	;getdseg <ds>			;ds = DOSDATA
  5535 00000776 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5536                                  
  5537 0000077B 3C01                    	cmp	al,1			;swap Windows out call
  5538 0000077D 751B                    	jne	short swapin		;no, check if Swap in call
  5539 0000077F E88801                  	call	getwinlast
  5540 00000782 1E                      	push	ds
  5541 00000783 07                      	pop	es
  5542 00000784 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5543 00000786 31F6                    	xor	si,si
  5544 00000788 BF[0600]                	mov	di,WinoldPatch1
  5545 0000078B B90800                  	mov	cx,8
  5546 0000078E FC                      	cld
  5547 0000078F 51                      	push	cx
  5548 00000790 F3A4                    	rep	movsb			;save first 8 bytes
  5549 00000792 59                      	pop	cx
  5550 00000793 BF[CD0D]                	mov	di,WinoldPatch2
  5551 00000796 F3A4                    	rep	movsb			;save next 8 bytes
  5552 00000798 EB1B                    	jmp	short winold_done
  5553                                  swapin:
  5554 0000079A 3C02                    	cmp	al,2			;swap Windows in call?
  5555 0000079C 7517                    	jne	short winold_done	;no, something else, pass it on
  5556 0000079E E86901                  	call	getwinlast
  5557 000007A1 8EC6                    	mov	es,si
  5558 000007A3 31FF                    	xor	di,di
  5559 000007A5 BE[0600]                	mov	si,WinoldPatch1
  5560 000007A8 B90800                  	mov	cx,8
  5561 000007AB FC                      	cld
  5562 000007AC 51                      	push	cx
  5563 000007AD F3A4                    	rep	movsb			;restore first 8 bytes
  5564 000007AF 59                      	pop	cx
  5565 000007B0 BE[CD0D]                	mov	si,WinoldPatch2
  5566 000007B3 F3A4                    	rep	movsb			;restore next 8 bytes
  5567                                  winold_done:
  5568 000007B5 59                      	pop	cx
  5569 000007B6 5F                      	pop	di
  5570 000007B7 5E                      	pop	si
  5571 000007B8 07                      	pop	es
  5572 000007B9 1F                      	pop	ds
  5573 000007BA EB7B                    	jmp	short next_i2f		;chain on
  5574                                  	; 15/12/2022
  5575                                  	;jmp	next_i2f	
  5576                                  
  5577                                  Win386_vxd:
  5578 000007BC 50                      	push	ax
  5579 000007BD 53                      	push	bx
  5580 000007BE 51                      	push	cx
  5581 000007BF 52                      	push	dx
  5582 000007C0 56                      	push	si
  5583 000007C1 57                      	push	di			; save regs !!dont change order!!
  5584                                  
  5585 000007C2 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5586 000007C6 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5587 000007C9 741F                    	je	short Vxd31		; N: continue
  5588                                  					; Y: save arena associated with 
  5589                                  					;    umb_head
  5590                                  
  5591 000007CB C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5592                                  					; umb_arena
  5593 000007D0 1E                      	push	ds
  5594 000007D1 06                      	push	es
  5595                                  
  5596                                  	;mov	ax,ds
  5597                                  	;mov	es,ax			; es - > dosdata
  5598                                  	; 05/01/2024
  5599 000007D2 1E                      	push	ds
  5600 000007D3 07                      	pop	es
  5601                                  
  5602 000007D4 8EDB                    	mov	ds,bx
  5603 000007D6 31F6                    	xor	si,si			; ds:si -> umb_head
  5604                                  
  5605 000007D8 FC                      	cld
  5606                                  
  5607 000007D9 BF[F511]                	mov	di,UmbSave1
  5608 000007DC B90B00                  	mov	cx,11
  5609 000007DF F3A4                    	rep	movsb
  5610                                  
  5611 000007E1 BF[D50D]                	mov	di,UmbSave2
  5612                                  	;mov	cx,5
  5613                                  	; 18/12/2022
  5614 000007E4 B105                    	mov	cl,5
  5615 000007E6 F3A4                    	rep	movsb	
  5616                                  
  5617 000007E8 07                      	pop	es
  5618 000007E9 1F                      	pop	ds			; M062 - End
  5619                                  
  5620                                  Vxd31:
  5621                                  	;test	byte [DOS_FLAG],2
  5622 000007EA F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5623 000007EF 7408                    	jz	short Dont_Supress		; M066
  5624 000007F1 5F                      	pop	di				; M066
  5625 000007F2 5E                      	pop	si				; M066
  5626 000007F3 5A                      	pop	dx				; M066
  5627 000007F4 59                      	pop	cx				; M066
  5628 000007F5 5B                      	pop	bx				; M066
  5629 000007F6 58                      	pop	ax				; M066
  5630 000007F7 EB55                    	jmp	short noVxD31			; M066
  5631                                  
  5632                                  	; We check here if the VxD is available in the root of the boot drive. 
  5633                                  	; We do an extended open to suppress any error messages
  5634                                  	
  5635                                  Dont_Supress:
  5636 000007F9 A0[6900]                	mov	al,[BOOTDRIVE]
  5637 000007FC 0440                    	add	al,'A' - 1		; get drive letter
  5638 000007FE A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5639                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5640                                  	;mov	al,0			; no extended attributes
  5641                                  	; 18/12/2022
  5642 00000801 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5643 00000804 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5644                                  					; no inherit, suppress crit err
  5645 00000807 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5646 0000080A BA0100                  	mov	dx,1			; fail if file does not exist
  5647 0000080D BE[3110]                	mov	si,VxDpath	
  5648                                  					; path of VxD file
  5649 00000810 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5650                                  
  5651 00000813 CD21                    	int	21h			; do extended open
  5652                                  
  5653 00000815 5F                      	pop	di
  5654 00000816 5E                      	pop	si
  5655 00000817 5A                      	pop	dx
  5656 00000818 59                      	pop	cx
  5657                                  
  5658 00000819 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5659                                  
  5660                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5661                                  	; to indicate error to Windows after displaying message to user that 
  5662                                  	; VxD needs to be present to run Windows in enhanced mode.
  5663                                  
  5664 0000081B 52                      	push	dx
  5665 0000081C 1E                      	push	ds
  5666 0000081D 56                      	push	si
  5667 0000081E BE[B209]                	mov	si,NoVxDErrMsg
  5668 00000821 0E                      	push	cs
  5669 00000822 1F                      	pop	ds
  5670 00000823 B96300                  	mov	cx,VxDMesLen ; 99	;
  5671 00000826 B402                    	mov	ah,2			; write char to console
  5672 00000828 FC                      	cld
  5673                                  vxdlp:
  5674 00000829 AC                      	lodsb
  5675 0000082A 86D0                    	xchg	dl,al			; get char in dl
  5676 0000082C CD21                    	int	21h
  5677 0000082E E2F9                    	loop	vxdlp
  5678                                  
  5679 00000830 5E                      	pop	si
  5680 00000831 1F                      	pop	ds
  5681 00000832 5A                      	pop	dx
  5682 00000833 5B                      	pop	bx
  5683 00000834 58                      	pop	ax			;all registers restored
  5684 00000835 41                      	inc	cx			;cx != 0 to indicate error
  5685                                  	; 15/12/22022
  5686                                  	;jmp	win_nexti2f		;chain on
  5687                                  	;jmp	short win_nexti2f
  5688                                  
  5689                                  	; 15/12/2022
  5690                                  win_nexti2f:
  5691 00000836 1F                      	pop	ds
  5692                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5693                                  	; 15/12/2022
  5694                                  next_i2f:
  5695                                  	;;;jmp	bios_i2f
  5696                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5697                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5698                                  	; 04/11/2022
  5699 00000837 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5700                                  
  5701                                  VxDthere:
  5702 0000083C 89C3                    	mov	bx,ax
  5703 0000083E B43E                    	mov	ah,CLOSE ; 3Eh
  5704 00000840 CD21                    	int	21h			;close the file
  5705                                  
  5706                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5707                                  
  5708                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5709                                  	;mov	bx,Win386_Info
  5710                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5711                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5712                                  	; 15/12/2022
  5713 00000842 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5714 00000848 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5715                                  
  5716 0000084C 5B                      	pop	bx
  5717 0000084D 58                      	pop	ax
  5718                                  noVxD31:
  5719                                  	; M018; End of block changes
  5720                                  
  5721 0000084E 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5722 00000853 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5723                                  
  5724                                  	; M002;
  5725                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5726                                  
  5727 00000858 52                      	push	dx			; M002
  5728 00000859 89DA                    	mov	dx,bx			; M002
  5729                                  					; point ES:BX to Win386_Info ; M002
  5730 0000085B BB[E20F]                	mov	bx,Win386_Info 
  5731 0000085E 895702                  	mov	[bx+2],dx		; M002
  5732 00000861 8C4704                  	mov	[bx+4],es		; M002
  5733 00000864 5A                      	pop	dx			; M002
  5734 00000865 1E                      	push	ds			; M002
  5735 00000866 07                      	pop	es			; M002
  5736                                  	;jmp	win_nexti2f		; M002
  5737                                  	; 15/12/2022
  5738 00000867 EBCD                    	jmp	short win_nexti2f
  5739                                  
  5740                                  	; 15/12/2022
  5741                                  	; Code to return Win386 2.xx instance table
  5742                                  OldWin386Init:
  5743 00000869 58                      	pop	ax			; discard ds pushed on stack
  5744 0000086A BE[C811]                	mov	si,OldInstanceJunk 
  5745                                  					; ds:si = instance table
  5746 0000086D B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5747                                  	;jmp	next_i2f
  5748                                  	; 15/12/2022
  5749 00000870 EBC5                    	jmp	short next_i2f
  5750                                  
  5751                                  Win386_Leaving:
  5752                                  	; 15/12/2022
  5753 00000872 F6C201                  	test 	dl,1
  5754                                  	;test	dx,1			; is this really win386?
  5755                                  	;jz	short Win386_Leaving_c
  5756                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5757                                  	; 15/12/2022
  5758 00000875 75BF                    	jnz	short win_nexti2f	
  5759                                  
  5760                                  Win386_Leaving_c:
  5761                                  					; M062 - Start
  5762 00000877 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5763                                  					;    up.
  5764 0000087C 7523                    	jne	short noumb		; N: not saved 
  5765 0000087E C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5766                                  					;    previously saved umb_head
  5767                                  	; 05/01/2024
  5768                                  	;push	ax ; (not necessary)
  5769 00000883 06                      	push	es
  5770 00000884 51                      	push	cx
  5771 00000885 56                      	push	si
  5772 00000886 57                      	push	di
  5773                                  
  5774                                  	;mov	ax,[UMB_HEAD]
  5775                                  	;mov	es,ax
  5776                                  	; 05/01/2024
  5777 00000887 8E06[8C00]              	mov	es,[UMB_HEAD]
  5778 0000088B 31FF                    	xor	di,di			; es:di -> umb_head
  5779                                  
  5780 0000088D FC                      	cld
  5781                                  
  5782 0000088E BE[F511]                	mov	si,UmbSave1
  5783 00000891 B90B00                  	mov	cx,11
  5784 00000894 F3A4                    	rep	movsb
  5785 00000896 BE[D50D]                	mov	si,UmbSave2
  5786                                  	;mov	cx,5
  5787                                  	; 18/12/2022
  5788 00000899 B105                    	mov	cl,5
  5789 0000089B F3A4                    	rep	movsb
  5790                                  
  5791 0000089D 5F                      	pop	di
  5792 0000089E 5E                      	pop	si
  5793 0000089F 59                      	pop	cx
  5794 000008A0 07                      	pop	es
  5795                                  	; 05/01/2024
  5796                                  	;pop	ax
  5797                                  noumb:					; M062 - End
  5798 000008A1 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5799 000008A6 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5800 000008AB EB89                    	jmp	short win_nexti2f
  5801                                  
  5802                                  ;	; 15/12/2022
  5803                                  ;	; Code to return Win386 2.xx instance table
  5804                                  ;OldWin386Init:
  5805                                  ;	pop	ax			; discard ds pushed on stack
  5806                                  ;	mov	si,OldInstanceJunk 
  5807                                  ;					; ds:si = instance table
  5808                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5809                                  ;	;jmp	next_i2f
  5810                                  ;	; 15/12/2022
  5811                                  ;	jmp	short _next_i2f
  5812                                  
  5813                                  Win386_Query:
  5814 000008AD 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5815 000008B0 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5816 000008B2 09C9                    	or	cx,cx			; is it an instance query?
  5817 000008B4 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5818 000008B6 41                      	inc	cx			; indicate that data is instanced
  5819                                  ;
  5820                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5821                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5822                                  ; M001;  
  5823                                  ; M001; OFFSETS STRUC
  5824                                  ; M001; 	Major_version	db	?
  5825                                  ; M001; 	Minor_version	db	?
  5826                                  ; M001; 	SaveDS		dw	?
  5827                                  ; M001; 	SaveBX		dw	?
  5828                                  ; M001; 	Indos		dw	?
  5829                                  ; M001; 	User_id		dw	?
  5830                                  ; M001; 	CritPatch	dw	?
  5831                                  ; M001; OFFSETS	ENDS
  5832                                  ; M001; 
  5833                                  ; M001; User_Id is the only variable really important for proper functioning  
  5834                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5835                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5836                                  ; M001; pass this table because Win386 depends on this table to get the 
  5837                                  ; M001; User_Id offset.
  5838                                  ; M001; 
  5839 000008B7 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5840 000008BA 1E                      	push	ds			; M001
  5841 000008BB 07                      	pop	es			; es:bx points at offset table ; M001
  5842 000008BC EB40                    	jmp	short PopIret		; M001
  5843                                  
  5844                                  ; 15/12/2022
  5845                                  ;	; Code to return Win386 2.xx instance table
  5846                                  ;OldWin386Init:
  5847                                  ;	pop	ax			; discard ds pushed on stack
  5848                                  ;	mov	si,OldInstanceJunk 
  5849                                  ;					; ds:si = instance table
  5850                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5851                                  ;	;jmp	next_i2f
  5852                                  ;	; 15/12/2022
  5853                                  ;	jmp	short _next_i2f
  5854                                  
  5855                                  dosmgr_func:
  5856 000008BE 49                      	dec	cx
  5857 000008BF 7435                    	jz	short win386_patch	; call to patch DOS
  5858 000008C1 49                      	dec	cx
  5859 000008C2 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5860 000008C4 49                      	dec	cx
  5861 000008C5 7439                    	jz	short win386_size	; get size of DOS data structures
  5862 000008C7 49                      	dec	cx
  5863 000008C8 7428                    	jz	short win386_inst	; instance more data
  5864                                  	;dec	cx
  5865                                  	;jnz	short PopIret		; no functions above this
  5866                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5867 000008CA E232                    	loop	PopIret
  5868                                  
  5869                                  	; Get DOS device driver size -- es:di points at device driver header
  5870                                  	; In DOS 4.x, the para before the device header contains an arena 
  5871                                  	; header for the driver.
  5872                                  
  5873 000008CC 8CC0                    	mov	ax,es			; ax = device header segment
  5874                                  
  5875                                  	; We check to see if we have a memory arena for this device driver. 
  5876                                  	; The way to do this would be to look at the previous para to see if
  5877                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5878                                  	; in the arena is the same as the device header segment. These two 
  5879                                  	; checks together should take care of all cases
  5880                                  
  5881 000008CE 48                      	dec	ax			; get arena header
  5882 000008CF 06                      	push	es
  5883 000008D0 8EC0                    	mov	es,ax			; arena header for device driver
  5884                                  
  5885 000008D2 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5886 000008D6 7517                    	jnz	short cantsize		; no, cant size this driver
  5887 000008D8 40                      	inc	ax			; get back device header segment
  5888 000008D9 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5889 000008DD 7510                    	jnz	short cantsize		; no, not a proper arena
  5890                                  
  5891 000008DF 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5892 000008E3 07                      	pop	es
  5893                                  
  5894                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5895                                  	; Speed is not critical and so we choose the shortest method 
  5896                                  	; -- use "mul"
  5897                                  
  5898 000008E4 BB1000                  	mov	bx,16
  5899 000008E7 F7E3                    	mul	bx
  5900 000008E9 89C1                    	mov	cx,ax
  5901 000008EB 89D3                    	mov	bx,dx
  5902 000008ED EB09                    	jmp	short win386_done	; return with device driver size
  5903                                  cantsize:
  5904 000008EF 07                      	pop	es
  5905 000008F0 31C0                    	xor	ax,ax
  5906                                  win386_inst:	; 05/01/2024
  5907 000008F2 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5908 000008F4 EB08                    	jmp	short PopIret		; return
  5909                                  
  5910                                  win386_patch:
  5911                                  	; dx contains bits marking the patches to be applied. We return 
  5912                                  	; the field with all bits set to indicate that all patches have been
  5913                                  	; done
  5914                                  
  5915 000008F6 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5916                                   	;jmp	short win386_done	; done, return
  5917                                  	; 15/12/2022
  5918                                  	; 15/12/2022
  5919                                  win386_done:
  5920 000008F8 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5921 000008FB BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5922                                  PopIret:
  5923 000008FE 1F                      	pop	ds
  5924 000008FF CF                      	iret	
  5925                                  
  5926                                  win386_size:
  5927                                  	; Return the size of DOS data structures -- currently only CDS size
  5928                                  
  5929                                  	; 17/12/2022
  5930 00000900 F6C201                  	test	dl,1
  5931                                  	;test	dx,1			; check for CDS size bit
  5932 00000903 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5933                                  
  5934 00000905 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5935 00000908 EBEE                    	jmp	short win386_done	; return with the size
  5936                                  
  5937                                  ; 05/01/2024
  5938                                  %if 0
  5939                                  win386_inst:
  5940                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5941                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5942                                  	; this by returning a status of not previously instanced. The basic
  5943                                  	; structure of these things have not changed and so the current
  5944                                  	; DOSMGR code should be able to work it out
  5945                                  
  5946                                  	xor	dx,dx			; make sure dx has a not done value
  5947                                  	jmp	short PopIret		; skip done indication
  5948                                  %endif
  5949                                  
  5950                                  	; 15/12/2022
  5951                                  ;win386_done:
  5952                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5953                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5954                                  ;PopIret:
  5955                                  ;	pop	ds
  5956                                  ;	iret				; return back up the chain
  5957                                  
  5958                                  	; 15/12/2022
  5959                                  ;win_nexti2f:
  5960                                  	;pop	ds
  5961                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5962                                  
  5963                                  ;End WIN386 support
  5964                                  
  5965                                  ; 15/05/2019
  5966                                  
  5967                                  ;M044; Start of changes
  5968                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5969                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5970                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5971                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5972                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5973                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5974                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5975                                  ; last para of the Windows memory block and then restore this para on the
  5976                                  ; Windows swapin callout. 
  5977                                  
  5978                                  getwinlast:
  5979                                  	; 07/12/2022
  5980 0000090A 8B36[3003]              	mov	si,[CurrentPDB]
  5981 0000090E 4E                      	dec	si
  5982 0000090F 8EC6                    	mov	es,si
  5983 00000911 2603360300              	add	si,[es:3]
  5984 00000916 C3                      	retn
  5985                                  
  5986                                  ; 15/12/2022
  5987                                  %if 0
  5988                                  winold_swap:
  5989                                  	push	ds
  5990                                  	push	es
  5991                                  	push	si
  5992                                  	push	di
  5993                                  	push	cx
  5994                                  
  5995                                  	;getdseg <ds>			;ds = DOSDATA
  5996                                  	mov	ds,[cs:DosDSeg]
  5997                                  
  5998                                  	cmp	al,1			;swap Windows out call
  5999                                  	jne	short swapin		;no, check if Swap in call
  6000                                  	call	getwinlast
  6001                                  	push	ds
  6002                                  	pop	es
  6003                                  	mov	ds,si			;ds = memory arena of Windows
  6004                                  	xor	si,si
  6005                                  	mov	di,WinoldPatch1
  6006                                  	mov	cx,8
  6007                                  	cld
  6008                                  	push	cx
  6009                                  	rep	movsb			;save first 8 bytes
  6010                                  	pop	cx
  6011                                  	mov	di,WinoldPatch2
  6012                                  	rep	movsb			;save next 8 bytes
  6013                                  	jmp	short winold_done
  6014                                  swapin:
  6015                                  	cmp	al,2			;swap Windows in call?
  6016                                  	jne	short winold_done	;no, something else, pass it on
  6017                                  	call	getwinlast
  6018                                  	mov	es,si
  6019                                  	xor	di,di
  6020                                  	mov	si,WinoldPatch1
  6021                                  	mov	cx,8
  6022                                  	cld
  6023                                  	push	cx
  6024                                  	rep	movsb			;restore first 8 bytes
  6025                                  	pop	cx
  6026                                  	mov	si,WinoldPatch2
  6027                                  	rep	movsb			;restore next 8 bytes
  6028                                  winold_done:
  6029                                  	pop	cx
  6030                                  	pop	di
  6031                                  	pop	si
  6032                                  	pop	es
  6033                                  	pop	ds
  6034                                  	jmp	next_i2f		;chain on
  6035                                  
  6036                                  %endif
  6037                                  
  6038                                  ;M044; End of changes
  6039                                  
  6040                                  ; 15/05/2019
  6041                                  
  6042                                  DispatchDOS:
  6043 00000917 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6044 0000091C 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6045 00000921 50                      	PUSH	AX			; push index
  6046 00000922 55                      	PUSH	BP
  6047 00000923 89E5                    	MOV	BP,SP
  6048                                  		; stack looks like:
  6049                                  		;   0	BP
  6050                                  		;   2	DISPATCH
  6051                                  		;   4	TABLE
  6052                                  		;   6	RETURN
  6053                                  		;   8	LONG-RETURN
  6054                                  		;   C	FLAGS
  6055                                  		;   E	AX
  6056                                  	
  6057 00000925 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6058 00000928 5D                      	POP	BP
  6059 00000929 E8DA08                  	call	TableDispatch
  6060 0000092C E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6061                                  
  6062                                  INT2F_etcetera:
  6063                                  	;entry	DosGetGroup
  6064                                  DosGetGroup:
  6065                                  	; MSDOS 3.3
  6066                                  	;push	cs
  6067                                  	;pop	ds
  6068                                  	;retn
  6069                                  
  6070                                  	; MSDOS 6.0
  6071                                  ;SR; Cannot use CS now
  6072                                  ;
  6073                                  ;	PUSH	CS
  6074                                  ;	POP	DS
  6075                                  
  6076                                  	; 04/11/2022
  6077                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6078                                  
  6079                                  	;getdseg <ds>
  6080 0000092F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6081 00000934 C3                      	retn
  6082                                  
  6083                                  	;entry	DOSInstall
  6084                                  DOSInstall:
  6085 00000935 B0FF                    	MOV	AL,0FFh
  6086 00000937 C3                      	retn
  6087                                  
  6088                                  ;ENDIF ; (*)
  6089                                  
  6090                                  
  6091                                  ; 15/05/2019 - Retro DOS v4.0
  6092                                  
  6093                                  ;------------------------------------------------------------------------
  6094                                  ;
  6095                                  ; Procedure Name : RW32_CONVERT
  6096                                  ;
  6097                                  ;Input: same as ABSDRD and ABSDWRT
  6098                                  ;	 ES:BP -> DPB
  6099                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6100                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6101                                  ;	 carry clear, parms ok
  6102                                  ;
  6103                                  ;------------------------------------------------------------------------
  6104                                  
  6105                                  	; 06/01/2024
  6106                                  RW32_CONVERT:
  6107                                  	;inc	cx ; *	; 01 -> 0
  6108 00000938 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6109 0000093B 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6110                                  	;dec	cx ; *
  6111 0000093D 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6112 0000093E 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6113                                  	;mov	ax,[es:bp+0Dh]
  6114 0000093F 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6115                                  	;mov	dl,[es:bp+4]
  6116 00000943 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6117 00000947 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6118 0000094A 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6119                                  	;INC	DL			;>32mb			;AN000;
  6120                                  	; 17/12/2022
  6121 0000094C 42                      	inc	dx
  6122 0000094D 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6123 0000094F F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6124 00000951 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6125                                  letold:
  6126 00000953 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6127 00000954 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6128 00000955 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6129                                  
  6130 00000957 1E                      	push	ds
  6131                                  	;getdseg <ds>
  6132 00000958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6133 0000095D C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6134 00000963 1F                      	pop	ds
  6135                                  
  6136 00000964 F9                      	STC				;>32mb			;AN000;
  6137 00000965 C3                      	retn				;>32mb			;AN000;
  6138                                  
  6139                                  new32format:
  6140                                  	;mov	dx,[bx+2]
  6141 00000966 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6142                                  
  6143 00000969 1E                      	push	ds			; set up ds to DOSDATA
  6144                                  	;getdseg <ds>
  6145 0000096A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6146 0000096F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6147 00000973 1F                      	pop	ds
  6148                                  
  6149 00000974 8B17                    	mov	dx,[bx]
  6150                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6151                                  	;mov	cx,[bx+4]
  6152 00000976 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6153                                  	;lds	bx,[bx+6]
  6154 00000979 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6155                                  old_style:				;>32mb			;AN000;
  6156                                  	; 06/01/2024
  6157                                  	; cf=0
  6158                                  	;CLC				;>32mb			;AN000;
  6159 0000097C C3                      	retn				;>32mb			;AN000;
  6160                                  
  6161                                  ;------------------------------------------------------------------------
  6162                                  ;
  6163                                  ; Procedure Name : Fastxxx_Purge
  6164                                  ;
  6165                                  ; Input: None
  6166                                  ; Functions: Purge Fastopen/ Cache Buffers
  6167                                  ; Output: None
  6168                                  ;
  6169                                  ;------------------------------------------------------------------------
  6170                                  
  6171                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6172                                  
  6173                                  Fastxxx_Purge:
  6174 0000097D 50                      	PUSH	AX			; save regs.	;AN000;
  6175 0000097E 56                      	PUSH	SI						;AN000;
  6176 0000097F 52                      	PUSH	DX						;AN000;
  6177                                  topen:
  6178 00000980 1E                      	push	ds			; set up ds to DOSDATA
  6179                                  	;getdseg <ds>
  6180 00000981 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6181                                  
  6182 00000986 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6183                                  					; fastopen installed ?	;AN000;
  6184 0000098B 1F                      	pop	ds
  6185 0000098C 740B                    	JZ	short nofast		; no			;AN000;
  6186 0000098E B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6187                                  dofast:
  6188 00000990 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6189                                  	;;mov	dl,[es:bp+0]
  6190                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6191                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6192                                  	; 15/12/2022
  6193 00000992 268A5600                	mov	dl,[es:bp]
  6194                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6195 00000996 E8F31C                  	call	Fast_Dispatch
  6196                                  nofast:
  6197 00000999 5A                      	POP	DX						;AN000;
  6198 0000099A 5E                      	POP	SI			; restore regs		;AN000;
  6199 0000099B 58                      	POP	AX			 			;AN000;
  6200 0000099C C3                      	retn				; exit
  6201                                  
  6202                                  ;============================================================================
  6203                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6204                                  ;============================================================================
  6205                                  ; 29/04/2019 - Retro DOS v4.0
  6206                                  
  6207                                  ;include dossym.inc
  6208                                  ;include dosmac.inc
  6209                                  ;include doscntry.inc
  6210                                  
  6211                                  ; DOSCODE Segment
  6212                                  
  6213                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6214                                  ; ---------------------------------------------------------------------------
  6215                                  ;include divmes.inc
  6216                                  
  6217                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; -------------------------------------
  6219                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6220                                  
  6221                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6222                                  	;PUBLIC	DIVMES
  6223                                  
  6224 0000099D 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6224 000009A6 6F766572666C6F770D-
  6224 000009AF 0A                 
  6225                                  
  6226                                  	;PUBLIC	DivMesLen
  6227                                  DivMesLen:
  6228 000009B0 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6229                                  
  6230                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6231                                  ; -------------------------------------
  6232                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6233                                  
  6234                                  ; (MSDOS 6.0)
  6235                                  ; VxD not found error message
  6236                                  
  6237                                  NoVxDErrMsg:
  6238 000009B2 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6238 000009BB 686176652074686520-
  6238 000009C4 66696C652057494E41-
  6238 000009CD 32302E33383620696E-
  6238 000009D6 2074686520726F6F74-
  6238 000009DF 206F6620796F757220-
  6238 000009E8 626F6F742064726976-
  6238 000009F1 65                 
  6239 000009F2 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6239 000009FB 57696E646F77732069-
  6239 00000A04 6E20456E68616E6365-
  6239 00000A0D 64204D6F64650D0A   
  6240                                  
  6241                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6242                                  
  6243                                  ; 13/05/2019 - Retro DOS v4.0
  6244                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6245                                  
  6246                                  ;include yesno.asm  (MNSDOS 6.0)
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6249                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6250                                  
  6251                                  ; This is for country Yes and No
  6252                                  
  6253 00000A15 59                      NLS_YES:	db 'Y'
  6254 00000A16 4E                      NLS_NO:		db 'N'
  6255 00000A17 79                      NLS_yes2:	db 'y'
  6256 00000A18 6E                      NLS_no2:	db 'n'
  6257                                  
  6258                                  ; ---------------------------------------------------------------------------
  6259                                  
  6260                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6261                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6262                                  
  6263                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6264                                  
  6265                                  ; The following two tables implement the current buffered input editing
  6266                                  ; routines. The tables are pairwise associated in reverse order for ease
  6267                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6268                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6269                                  
  6270                                  	;PUBLIC	CANCHAR
  6271                                  CANCHAR:
  6272 00000A19 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6273                                  	
  6274                                  	;PUBLIC	ESCCHAR
  6275                                  ESCCHAR:
  6276 00000A1A 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6277                                  	
  6278                                  	;IF	NOT Rainbow
  6279                                  
  6280                                  ESCTAB:	; LABEL BYTE
  6281                                  
  6282                                  	;IF	IBM
  6283 00000A1B 40                      	DB	64		; Ctrl-Z - F6
  6284 00000A1C 4D                      	DB	77		; Copy one char - -->
  6285 00000A1D 3B                      	DB	59		; Copy one char - F1
  6286 00000A1E 53                      	DB	83		; Skip one char - DEL
  6287 00000A1F 3C                      	DB	60		; Copy to char - F2
  6288 00000A20 3E                      	DB	62		; Skip to char - F4
  6289 00000A21 3D                      	DB	61		; Copy line - F3
  6290 00000A22 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6291 00000A23 3F                      	DB	63		; Reedit line (new template) - F5
  6292 00000A24 4B                      	DB	75		; Backspace - <--
  6293 00000A25 52                      	DB	82		; Enter insert mode - INS (toggle)
  6294 00000A26 52                      	DB	82		; Exit insert mode - INS (toggle)
  6295 00000A27 41                      	DB	65		; Escape character - F7
  6296 00000A28 41                      	DB	65		; End of table
  6297                                  	;ENDIF
  6298                                  
  6299                                  ESCEND: ; LABEL BYTE
  6300                                  
  6301                                  ESCTABLEN EQU ESCEND-ESCTAB
  6302                                  
  6303                                  ESCFUNC: ; LABEL WORD
  6304                                  	
  6305 00000A29 [FB13]                  	short_addr  GETCH	; Ignore the escape sequence
  6306 00000A2B [7814]                  	short_addr  TWOESC
  6307 00000A2D [6D15]                  	short_addr  EXITINS
  6308 00000A2F [6D15]                  	short_addr  ENTERINS
  6309 00000A31 [7314]                  	short_addr  BACKSP
  6310 00000A33 [5915]                  	short_addr  REEDIT
  6311 00000A35 [6014]                  	short_addr  KILNEW
  6312 00000A37 [EF14]                  	short_addr  COPYLIN
  6313 00000A39 [2115]                  	short_addr  SKIPSTR
  6314 00000A3B [F514]                  	short_addr  COPYSTR
  6315 00000A3D [1815]                  	short_addr  SKIPONE
  6316 00000A3F [FA14]                  	short_addr  COPYONE
  6317 00000A41 [FA14]                  	short_addr  COPYONE
  6318 00000A43 [7415]                  	short_addr  CTRLZ
  6319                                  
  6320                                  	;ENDIF
  6321                                  
  6322                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6323                                  ; ---------------------------------------------------------------------------
  6324                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6325                                  
  6326                                  ; OEMFunction key is expected to process a single function
  6327                                  ;   key input from a device and dispatch to the proper
  6328                                  ;   routines leaving all registers UNTOUCHED.
  6329                                  ;
  6330                                  ; Inputs:   CS, SS are DOSGROUP
  6331                                  ; Outputs:  None. This function is expected to JMP to onw of
  6332                                  ;           the following labels:
  6333                                  ;
  6334                                  ;           GetCh       - ignore the sequence
  6335                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6336                                  ;           ExitIns     - toggle insert mode
  6337                                  ;           EnterIns    - toggle insert mode
  6338                                  ;           BackSp      - move backwards one space
  6339                                  ;           ReEdit      - reedit the line with a new template
  6340                                  ;           KilNew      - discard the current line and start from scratch
  6341                                  ;           CopyLin     - copy the rest of the template into the line
  6342                                  ;           SkipStr     - read the next character and skip to it in the template
  6343                                  ;           CopyStr     - read next char and copy from template to line until char
  6344                                  ;           SkipOne     - advance position in template one character
  6345                                  ;           CopyOne     - copy next character in template into line
  6346                                  ;           CtrlZ       - place a ^Z into the template
  6347                                  ; Registers that are allowed to be modified by this function are:
  6348                                  ;           AX, CX, BP
  6349                                  
  6350                                  ; 13/05/2019 - Retro DOS v4.0
  6351                                  ; -------------------------------------
  6352                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6353                                  
  6354                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6357                                  
  6358                                  OEMFunctionKey:
  6359 00000A45 E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6360 00000A48 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6361 00000A4A 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6362 00000A4B BF[1B0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6363 00000A4E 06                      	push	es
  6364 00000A4F 0E                      	push	cs
  6365 00000A50 07                      	pop	es
  6366 00000A51 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6367 00000A53 07                      	pop	es
  6368 00000A54 5F                      	POP     DI                      ; restore DI
  6369 00000A55 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6370 00000A57 89CD                    	MOV     BP,CX                   ; move to indexable register
  6371                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6372 00000A59 2EFFA6[290A]            	JMP	word [CS:BP+ESCFUNC]
  6373                                  
  6374                                  ;DOSCODE ENDS
  6375                                  	
  6376                                  ;============================================================================
  6377                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6378                                  ;============================================================================
  6379                                  ; Retro DOS v3.0 - 18/07/2018
  6380                                  
  6381                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6382                                  ;----------------------------------------------------------------------------
  6383                                  ; Retro DOS v2.0 - 13/03/2018
  6384                                  
  6385                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6386                                  
  6387                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6388                                  
  6389                                  ;**	$GET_DATE - Get Current Date
  6390                                  ;----------------------------------------
  6391                                  ;	ENTRY	none
  6392                                  ;	EXIT	(cx:dx) = current date
  6393                                  ;	USES	all
  6394                                  
  6395                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6396                                  
  6397                                  _$GET_DATE:	;System call 42
  6398                                  
  6399 00000A5E 16                      	PUSH	SS
  6400 00000A5F 1F                      	POP	DS
  6401 00000A60 E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6402 00000A63 A1[5203]                	MOV	AX,[YEAR]
  6403                                  
  6404                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6405                                  
  6406 00000A66 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6407 00000A6A E814FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6408                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6409 00000A6D 895C06                  	MOV	[SI+user_env.user_DX],BX
  6410 00000A70 05BC07                  	ADD	AX,1980		;Put bias back
  6411                                  	;MOV	[SI+4],AX	;CX=year
  6412 00000A73 894404                  	MOV	[SI+user_env.user_CX],AX
  6413 00000A76 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6414                                  RET20:	; 05/11/2022
  6415                                  RET24:	; 18/12/2022
  6416 00000A7A C3                      	RETN
  6417                                  
  6418                                  ;**	$SET_DATE - Set Current Date
  6419                                  ;----------------------------------------
  6420                                  ;	ENTRY	(cx:dx) = current date
  6421                                  ;	EXIT	(al) = -1 iff bad date
  6422                                  ;		(al) = 0 if ok
  6423                                  ;	USES	all
  6424                                  
  6425                                  _$SET_DATE:	;System call 43
  6426                                  
  6427 00000A7B B0FF                    	MOV	AL,-1		;Be ready to flag error
  6428 00000A7D 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6429                                  	;JC	SHORT RET24	;Error if not big enough
  6430                                  	; 05/11/2022
  6431 00000A81 72F7                    	jc	short RET20
  6432 00000A83 83F977                  	CMP	CX,119		;Year must be less than 2100
  6433 00000A86 77F2                    	JA	SHORT RET24
  6434 00000A88 08F6                    	OR	DH,DH
  6435                                  	;JZ	SHORT RET24
  6436                                   	; 05/11/2022
  6437 00000A8A 74EE                    	jz	short RET20
  6438 00000A8C 08D2                    	OR	DL,DL
  6439                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6440                                  	; 05/11/2022
  6441 00000A8E 74EA                    	jz	short RET20
  6442 00000A90 80FE0C                  	CMP	DH,12		;Check against max. month
  6443 00000A93 77E5                    	JA	SHORT RET24
  6444 00000A95 16                      	PUSH	SS
  6445 00000A96 1F                      	POP	DS
  6446                                  	;CALL	DODATE
  6447                                  	; 18/12/2022
  6448 00000A97 E90301                  	jmp	DODATE
  6449                                  ;RET24:  
  6450                                  	;RETN
  6451                                  
  6452                                  ;**	$GET_TIME - Get Current Time
  6453                                  ;----------------------------------------
  6454                                  ;	ENTRY	none
  6455                                  ;	EXIT	(cx:dx) = current time
  6456                                  ;	USES	all
  6457                                  
  6458                                  _$GET_TIME:			;System call 44
  6459                                  
  6460 00000A9A 16                      	PUSH	SS
  6461 00000A9B 1F                      	POP	DS
  6462 00000A9C E87100                  	CALL	READTIME
  6463 00000A9F E8DFF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6464                                  	;MOV	[SI+6],DX
  6465 00000AA2 895406                  	MOV	[SI+user_env.user_DX],DX
  6466                                  	;MOV	[SI+4],CX
  6467 00000AA5 894C04                  	MOV	[SI+user_env.user_CX],CX
  6468                                  set_time_ok:	; 06/01/2024
  6469 00000AA8 30C0                    	XOR	AL,AL
  6470                                  RET26:  
  6471 00000AAA C3                      	RETN
  6472                                  
  6473                                  ;**	$SET_TIME - Set Current Time
  6474                                  ;----------------------------------------
  6475                                  ;	ENTRY	(cx:dx) = time
  6476                                  ;	EXIT	(al) = 0 if 0k
  6477                                  ;		(al) = -1 if invalid
  6478                                  ;	USES	ALL
  6479                                  
  6480                                  _$SET_TIME:			;System call 45
  6481                                  
  6482 00000AAB B0FF                    	MOV	AL,-1		;Flag in case of error
  6483 00000AAD 80FD18                  	CMP	CH,24		;Check hours
  6484 00000AB0 73F8                    	JAE	SHORT RET26
  6485 00000AB2 80F93C                  	CMP	CL,60		;Check minutes
  6486 00000AB5 73F3                    	JAE	SHORT RET26
  6487 00000AB7 80FE3C                  	CMP	DH,60		;Check seconds
  6488 00000ABA 73EE                    	JAE	SHORT RET26
  6489 00000ABC 80FA64                  	CMP	DL,100		;Check 1/100's
  6490 00000ABF 73E9                    	JAE	SHORT RET26
  6491 00000AC1 51                      	PUSH	CX
  6492 00000AC2 52                      	PUSH	DX
  6493 00000AC3 16                      	PUSH	SS
  6494 00000AC4 1F                      	POP	DS
  6495                                  
  6496                                  ; 07/02/2024
  6497                                  %if 0
  6498                                  	MOV	BX,TIMEBUF
  6499                                  	MOV	CX,6
  6500                                  	; 06/02/2024 ; *
  6501                                  	;;XOR	DX,DX
  6502                                  	;;MOV	AX,DX
  6503                                  	;xor	ax,ax
  6504                                  	;cwd	; 06/01/2024
  6505                                  	PUSH	BX
  6506                                  	;CALL	SETREAD
  6507                                  	; 06/02/2024 ; *
  6508                                  	call	SETREAD_X
  6509                                  %else
  6510 00000AC5 E83E3B                  	call	SETREAD_XT
  6511                                  %endif
  6512                                  
  6513 00000AC8 1E                      	PUSH	DS
  6514 00000AC9 C536[2E00]              	LDS	SI,[BCLOCK]
  6515 00000ACD E8BC3A                  	CALL	DEVIOCALL2	;Get correct day count
  6516 00000AD0 1F                      	POP	DS
  6517 00000AD1 5B                      	POP	BX
  6518 00000AD2 E86E3B                  	CALL	SETWRITE
  6519 00000AD5 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6520 00000AD9 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6521 00000ADD C536[2E00]              	LDS	SI,[BCLOCK]
  6522 00000AE1 E8A83A                  	CALL	DEVIOCALL2	;Set the time
  6523                                  	; 06/01/2024
  6524                                  	;XOR	AL,AL
  6525                                  	;RETN
  6526 00000AE4 EBC2                    	jmp	short set_time_ok
  6527                                  
  6528                                  ; 11/07/2018 - Retro DOS v3.0
  6529                                  ; Retro DOS v2.0 - 14/03/2018
  6530                                  
  6531                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6532                                  
  6533                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6534                                  ;----------------------------------------------------------
  6535                                  ; Date16 returns the current date in AX, current time in DX
  6536                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6537                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6538                                  
  6539                                  DATE16:
  6540                                  	
  6541                                  ;M048	Context DS
  6542                                  ;
  6543                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6544                                  ; is DOSDATA
  6545                                  
  6546                                  	;push	ss
  6547                                  	;pop	ds
  6548                                  
  6549                                  	;getdseg <ds>		; M048
  6550                                  
  6551                                  	; 13/05/2019 - Retro DOS v4.0
  6552 00000AE6 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6553                                  
  6554 00000AEB 51                      	PUSH	CX
  6555 00000AEC 06                      	PUSH	ES
  6556 00000AED E82000                  	CALL	READTIME
  6557 00000AF0 07                      	POP	ES
  6558 00000AF1 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6559 00000AF3 D0E1                    	SHL	CL,1
  6560 00000AF5 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6561 00000AF7 D1E1                    	SHL	CX,1
  6562 00000AF9 D1E1                    	SHL	CX,1
  6563 00000AFB D0EE                    	SHR	DH,1		;Count every two seconds
  6564 00000AFD 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6565 00000AFF 89CA                    	MOV	DX,CX
  6566                                  
  6567                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6568                                  
  6569 00000B01 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6570 00000B04 B104                    	MOV	CL,4
  6571 00000B06 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6572 00000B08 D1E0                    	SHL	AX,1
  6573 00000B0A 59                      	POP	CX
  6574 00000B0B 0A06[5003]              	OR	AL,[DAY]
  6575                                  RET21:
  6576 00000B0F C3                      	RETN
  6577                                  
  6578                                  ;----------------------------------------------------------
  6579                                  
  6580                                  READTIME:
  6581                                  
  6582                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6583                                  ;Uses AX, CX, DX.
  6584                                  
  6585 00000B10 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6586 00000B16 56                      	PUSH	SI
  6587 00000B17 53                      	PUSH	BX
  6588                                  
  6589 00000B18 BB[B603]                	MOV	BX,TIMEBUF
  6590                                  ; 07/02/2024
  6591                                  %if 0
  6592                                  	MOV	CX,6
  6593                                  	; 06/02/2024
  6594                                  	;;XOR	DX,DX
  6595                                  	;;MOV	AX,DX
  6596                                  	;; 06/01/2024
  6597                                  	;xor	ax,ax
  6598                                  	;cwd
  6599                                  	;CALL	SETREAD
  6600                                  	; 06/02/2024
  6601                                  	call	SETREAD_X
  6602                                  %else
  6603 00000B1B E8EC3A                  	call	SETREAD_XTC
  6604                                  %endif
  6605 00000B1E 1E                      	PUSH	DS
  6606 00000B1F C536[2E00]              	LDS	SI,[BCLOCK]
  6607 00000B23 E8663A                  	CALL	DEVIOCALL2	;Get correct date and time
  6608 00000B26 1F                      	POP	DS
  6609 00000B27 5B                      	POP	BX
  6610 00000B28 5E                      	POP	SI
  6611 00000B29 A1[B603]                	MOV	AX,[TIMEBUF]
  6612 00000B2C 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6613 00000B30 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6614 00000B34 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6615                                  	;JZ	SHORT RET22
  6616 00000B38 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6617                                  	;cmp	ax,43830
  6618 00000B3A 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6619 00000B3D 733D                    	JAE	SHORT RET22	;Ignore if too large
  6620 00000B3F A3[5403]                	MOV	[DAYCNT],AX
  6621 00000B42 56                      	PUSH	SI
  6622 00000B43 51                      	PUSH	CX
  6623 00000B44 52                      	PUSH	DX		;Save time
  6624 00000B45 31D2                    	XOR	DX,DX
  6625                                  	;mov	cx,1461
  6626 00000B47 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6627 00000B4A F7F1                    	DIV	CX		;Compute number of 4-year units
  6628 00000B4C D1E0                    	SHL	AX,1
  6629 00000B4E D1E0                    	SHL	AX,1
  6630 00000B50 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6631 00000B52 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6632                                  
  6633 00000B54 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6634                                  
  6635 00000B57 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6636 00000B5A D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6637 00000B5C 7304                    	JNC	SHORT SK	;Extra half-year?
  6638 00000B5E 81C2C800                	ADD	DX,200
  6639                                  SK:
  6640 00000B62 E82200                  	CALL	SETYEAR
  6641 00000B65 B101                    	MOV	CL,1		;At least at first month in year
  6642                                  
  6643 00000B67 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6644                                  	
  6645 00000B6A E81000                  	CALL	DSLIDE		;Find out which month we're in
  6646 00000B6D 880E[5103]              	MOV	[MONTH],CL
  6647 00000B71 42                      	INC	DX		;Remainder is day of month (start with one)
  6648 00000B72 8816[5003]              	MOV	[DAY],DL
  6649 00000B76 E88A00                  	CALL	WKDAY		;Set day of week
  6650 00000B79 5A                      	POP	DX
  6651 00000B7A 59                      	POP	CX
  6652 00000B7B 5E                      	POP	SI
  6653                                  RET22:  
  6654 00000B7C C3                      	RETN
  6655                                  
  6656                                  ;----------------------------------------------------------
  6657                                  
  6658                                  DSLIDE:
  6659                                  	;MOV	AH,0
  6660                                  	; 06/01/2024
  6661                                  	; (AH=0)
  6662                                  DSLIDE1:
  6663 00000B7D AC                      	LODSB			;Get count of days
  6664 00000B7E 39C2                    	CMP	DX,AX		;See if it will fit
  6665                                  	;JB	SHORT RET23	;If not, done
  6666 00000B80 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6667 00000B82 29C2                    	SUB	DX,AX
  6668 00000B84 41                      	INC	CX		;Count one more month/year
  6669 00000B85 EBF6                    	JMP	SHORT DSLIDE1
  6670                                  
  6671                                  ;----------------------------------------------------------
  6672                                  
  6673                                  SETYEAR:
  6674                                  
  6675                                  ;Set year with value in CX. Adjust length of February for this year.
  6676                                  
  6677                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6678                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6679                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6680                                  ;	preserve DS as CHKYR is also called as a routine.
  6681                                  
  6682                                  	; MSDOS 6.0 (18/07/2018) ; *
  6683                                  
  6684                                  	;GETDSEG DS
  6685                                  
  6686                                  	;PUSH	CS  ; *
  6687                                  	;POP	DS  ; *
  6688                                  
  6689                                  	; 13/05/2019 - Retro DOS v4.0
  6690 00000B87 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6691                                  
  6692                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6693                                  	; 05/11/2022 
  6694                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6695                                  
  6696 00000B8C 880E[5203]              	MOV	[YEAR],CL
  6697                                  CHKYR:
  6698 00000B90 F6C103                  	TEST	CL,3		;Check for leap year
  6699 00000B93 B01C                    	MOV	AL,28
  6700 00000B95 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6701 00000B97 FEC0                    	INC	AL		;Add leap day
  6702                                  SAVFEB:
  6703 00000B99 A2[1D0D]                	mov	[february],al
  6704                                  	;MOV	[MONTAB+1],AL	;Store for February
  6705                                  RET23:  
  6706 00000B9C C3                      	RETN
  6707                                  
  6708                                  ;----------------------------------------------------------
  6709                                  
  6710                                  DODATE:
  6711 00000B9D E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6712 00000BA0 88F0                    	MOV	AL,DH
  6713                                  
  6714 00000BA2 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6715                                  
  6716 00000BA5 D7                      	XLAT			;Look up days in month
  6717 00000BA6 38D0                    	CMP	AL,DL
  6718 00000BA8 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6719                                  	;JB	SHORT RET25	;Error if too many days
  6720 00000BAA 72F0                    	jb	short RET23 ; 18/07/2018
  6721 00000BAC E8D8FF                  	CALL	SETYEAR
  6722                                  ;
  6723                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6724                                  ;
  6725 00000BAF 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6726 00000BB3 D1E9                    	SHR	CX,1
  6727 00000BB5 D1E9                    	SHR	CX,1
  6728                                  	;mov	ax,1461
  6729 00000BB7 B8B505                  	MOV	AX,FOURYEARS
  6730 00000BBA 89D3                    	MOV	BX,DX
  6731 00000BBC F7E1                    	MUL	CX
  6732 00000BBE 8A0E[5203]              	MOV	CL,[YEAR]
  6733 00000BC2 80E103                  	AND	CL,3
  6734                                  
  6735 00000BC5 BE[140D]                	MOV	SI,YRTAB
  6736                                  
  6737 00000BC8 89C2                    	MOV	DX,AX
  6738 00000BCA D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6739 00000BCC E84700                  	CALL	DSUM		;Add up the days in each year
  6740 00000BCF 88F9                    	MOV	CL,BH		;Month of year
  6741                                  
  6742 00000BD1 BE[1C0D]                	MOV	SI,MONTAB
  6743                                  
  6744 00000BD4 49                      	DEC	CX		;Account for months starting with one
  6745 00000BD5 E83E00                  	CALL	DSUM		;Add up days in each month
  6746 00000BD8 88D9                    	MOV	CL,BL		;Day of month
  6747 00000BDA 49                      	DEC	CX		;Account for days starting with one
  6748 00000BDB 01CA                    	ADD	DX,CX		;Add in to day total
  6749 00000BDD 92                      	XCHG	AX,DX		;Get day count in AX
  6750 00000BDE A3[5403]                	MOV	[DAYCNT],AX
  6751 00000BE1 56                      	PUSH	SI
  6752 00000BE2 53                      	PUSH	BX
  6753 00000BE3 50                      	PUSH	AX
  6754                                  
  6755                                  ; 07/02/2024
  6756                                  %if 0
  6757                                  	MOV	BX,TIMEBUF
  6758                                  	MOV	CX,6
  6759                                  	; 06/02/2024 ; *
  6760                                  	;;XOR	DX,DX
  6761                                  	;;MOV	AX,DX
  6762                                  	;; 06/01/2024
  6763                                  	;xor	ax,ax
  6764                                  	;cwd
  6765                                  	PUSH	BX
  6766                                  	;CALL	SETREAD
  6767                                  	; 06/02/2024 ; *
  6768                                  	call	SETREAD_X
  6769                                  %else
  6770 00000BE4 E81F3A                  	call	SETREAD_XT
  6771                                  %endif
  6772                                  
  6773 00000BE7 1E                      	PUSH	DS
  6774 00000BE8 C536[2E00]              	LDS	SI,[BCLOCK]
  6775 00000BEC E89D39                  	CALL	DEVIOCALL2	;Get correct date and time
  6776 00000BEF 1F                      	POP	DS
  6777 00000BF0 5B                      	POP	BX
  6778 00000BF1 E84F3A                  	CALL	SETWRITE
  6779 00000BF4 8F06[B603]              	POP	WORD [TIMEBUF]
  6780 00000BF8 1E                      	PUSH	DS
  6781 00000BF9 C536[2E00]              	LDS	SI,[BCLOCK]
  6782 00000BFD E88C39                  	CALL	DEVIOCALL2	;Set the date
  6783 00000C00 1F                      	POP	DS
  6784 00000C01 5B                      	POP	BX
  6785 00000C02 5E                      	POP	SI
  6786                                  WKDAY:
  6787 00000C03 A1[5403]                	MOV	AX,[DAYCNT]
  6788 00000C06 31D2                    	XOR	DX,DX
  6789 00000C08 B90700                  	MOV	CX,7
  6790 00000C0B 40                      	INC	AX
  6791 00000C0C 40                      	INC	AX		;First day was Tuesday
  6792 00000C0D F7F1                    	DIV	CX		;Compute day of week
  6793 00000C0F 8816[5603]              	MOV	[WEEKDAY],DL
  6794 00000C13 30C0                    	XOR	AL,AL		;Flag OK
  6795                                  RET25:
  6796 00000C15 C3                      	RETN
  6797                                  
  6798                                  ;----------------------------------------------------------
  6799                                  
  6800                                  ;**	DSUM - Compute the sum of a string of bytes
  6801                                  ;
  6802                                  ;	ENTRY	(cx) = byte count
  6803                                  ;		(ds:si) = byte address
  6804                                  ;		(dx) = sum register, initialized by caller
  6805                                  ;	EXIT	(dx) updated
  6806                                  ;	USES	ax, cx, dx, si, flags
  6807                                  
  6808                                  DSUM:
  6809 00000C16 B400                    	MOV	AH,0
  6810 00000C18 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6811                                  	;JCXZ	RET25 ; 18/07/2018
  6812                                  DSUM1:
  6813 00000C1A AC                      	LODSB
  6814 00000C1B 01C2                    	ADD	DX,AX
  6815 00000C1D E2FB                    	LOOP	DSUM1
  6816                                  DSUM9:
  6817 00000C1F C3                      	RETN
  6818                                  
  6819                                  ;============================================================================
  6820                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6821                                  ;============================================================================
  6822                                  ; 29/04/2019 - Retro DOS v4.0
  6823                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6824                                  
  6825                                  ; 12/03/2018 - Retro DOS v2.0 
  6826                                  
  6827                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6828                                  ;NAME	GETSET
  6829                                  
  6830                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6831                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6832                                  
  6833                                  ;USERNUM:
  6834                                  ;	DW	0			; 24 bit user number
  6835                                  ;       DB      0
  6836                                  ;;	IF      IBM
  6837                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6838                                  ;;	ELSE
  6839                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6840                                  ;;	ENDIF
  6841                                  
  6842                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6843                                  ;; 08/07/2018 - Retro DOS v3.0
  6844                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6845                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6846                                  
  6847                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6848                                  ;----------------------------------------------------------------------------
  6849                                  
  6850                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6851                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6852                                  
  6853                                  _$GET_VERSION:
  6854                                  
  6855                                  ; Inputs:
  6856                                  ;       None
  6857                                  ; Function:
  6858                                  ;       Return MS-DOS version number
  6859                                  ; Outputs:
  6860                                  ;       OEM number in BH
  6861                                  ;       User number in BL:CX (24 bits)
  6862                                  ;       Version number as AL.AH in binary
  6863                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6864                                  
  6865                                  ; MSDOS 6.0
  6866                                  ;
  6867                                  ;	Fake_Count is used to lie about the version numbers to support
  6868                                  ;	old binarys. See ms_table.asm for more info.
  6869                                  ;
  6870                                  ;		if input al = 00
  6871                                  ;		  (bh) = OEM number			
  6872                                  ;		else if input al = 01
  6873                                  ;		  (bh) = version flags
  6874                                  ;		 
  6875                                  ;		       	 bits 0-2 = DOS internal revision
  6876                                  ;		       	 bits 3-7 = DOS type flags
  6877                                  ;		              bit 3    = DOS is in ROM
  6878                                  ;		              bit 4    = DOS in in HMA
  6879                                  ;		              bits 5-7 = reserved
  6880                                  ;               M007 change - only bit 3 is now valid. Other bits
  6881                                  ;               are 0 when AL = 1
  6882                                  
  6883                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6884 00000C20 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6885 00000C25 8CDB                    	mov	bx, ds
  6886                                  
  6887                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6888                                  	;--------------------------------------
  6889                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6890                                  
  6891 00000C27 16                              PUSH    SS
  6892 00000C28 1F                              POP     DS
  6893                                          
  6894                                  	; 06/01/2024
  6895                                  	;MOV	BX,[USERNUM+2]
  6896                                          ;MOV	CX,[USERNUM]
  6897                                  
  6898                                  	; 13/05/2019 - Retro DOS v4.0
  6899                                  
  6900                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6901                                  	;DOS flags
  6902                                  
  6903 00000C29 3C01                    	cmp	AL,1
  6904 00000C2B 7502                    	jne	short Norm_Vers
  6905                                  
  6906                                  ;ifdef ROMDOS
  6907                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6908                                  ;				(DOSINROM = 8)
  6909                                  ;else
  6910 00000C2D 30FF                            xor     bh,bh		; Otherwise return 0
  6911                                  ;endif				;M007 end
  6912                                  
  6913                                  Norm_Vers:
  6914                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6915                                  
  6916                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6917                                  	; 13/05/2019 - Retro DOS v4.0
  6918 00000C2F 1E                      	push	ds		; Get the version number from the
  6919 00000C30 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6920                                  	;mov	ax,[40h]
  6921 00000C34 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6922                                  	; 07/12/2022
  6923 00000C37 1F                      	pop	ds
  6924 00000C38 E846F8                  	call	Get_User_Stack
  6925                                  				; Put values for return registers
  6926                                  				; in the proper place on the user's	 
  6927                                  				; stack addressed by DS:SI
  6928                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6929                                  gdrvfspc_ret:
  6930                                          ;MOV	[SI+user_env.user_AX],AX
  6931 00000C3B 8904                            MOV	[SI],AX
  6932                                          ;MOV	[SI+4],CX
  6933 00000C3D 894C04                  	mov	[SI+user_env.user_CX],CX
  6934                                  set_user_bx:
  6935                                  	;MOV	[SI+2],BX
  6936 00000C40 895C02                  	mov	[SI+user_env.user_BX],BX
  6937                                  
  6938 00000C43 C3                      	RETN
  6939                                  
  6940                                  ; 18/07/2018 - Retro DOS v3.0
  6941                                  
  6942                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6943                                  ;----------------------------------------------------------------------------
  6944                                  
  6945                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6946                                  ;
  6947                                  ;	ENTRY	none
  6948                                  ;	EXIT	(al) = value of VERIFY flag
  6949                                  ;	USES	all
  6950                                  
  6951                                  
  6952                                  _$GET_VERIFY_ON_WRITE:
  6953                                  
  6954                                  ;hkn; SS override
  6955 00000C44 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6956 00000C48 C3                      	retn
  6957                                  
  6958                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6959                                  ;
  6960                                  ;	ENTRY	(al) = value of VERIFY flag
  6961                                  ;	EXIT	none
  6962                                  ;	USES	all
  6963                                  
  6964                                  _$SET_VERIFY_ON_WRITE:
  6965                                  
  6966 00000C49 2401                    	AND	AL,1
  6967                                  ;hkn; SS override
  6968 00000C4B 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6969                                  RET27:	; 18/07/2018
  6970 00000C4F C3                      	retn
  6971                                  
  6972                                  ; 19/07/2018 - Retro DOS v3.0
  6973                                  
  6974                                  ;BREAK <$International - return country-dependent information>
  6975                                  ;----------------------------------------------------------------------------
  6976                                  ;
  6977                                  ; Procedure Name : $INTERNATIONAL
  6978                                  ;
  6979                                  ; Inputs:
  6980                                  ;	MOV	AH,International
  6981                                  ;	MOV	AL,country	(al = 0 => current country)
  6982                                  ;      [MOV	BX,country]
  6983                                  ;	LDS	DX,block
  6984                                  ;	INT	21
  6985                                  ; Function:
  6986                                  ;	give users an idea of what country the application is running
  6987                                  ; Outputs:
  6988                                  ;	IF DX != -1 on input (get country)
  6989                                  ;	  AL = 0 means return current country table.
  6990                                  ;	  0<AL<0FFH means return country table for country AL
  6991                                  ;	  AL = 0FF means return country table for country BX
  6992                                  ;	  No Carry:
  6993                                  ;	     Register BX will contain the 16-bit country code.
  6994                                  ;	     Register AL will contain the low 8 bits of the country code.
  6995                                  ;	     The block pointed to by DS:DX is filled in with the information
  6996                                  ;	     for the particular country.
  6997                                  ;		BYTE  Size of this table excluding this byte and the next
  6998                                  ;		BYTE  Country code represented by this table
  6999                                  ;			A sequence of n bytes, where n is the number specified
  7000                                  ;			by the first byte above and is not > internat_block_max,
  7001                                  ;			in the correct order for being returned by the
  7002                                  ;			INTERNATIONAL call as follows:
  7003                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7004                                  ;		5 BYTE	Currency symbol null terminated
  7005                                  ;		2 BYTE	thousands separator null terminated
  7006                                  ;		2 BYTE	Decimal point null terminated
  7007                                  ;		2 BYTE	Date separator null terminated
  7008                                  ;		2 BYTE	Time separator null terminated
  7009                                  ;		1 BYTE	Bit field.  Currency format.
  7010                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7011                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7012                                  ;		1 BYTE	No. of significant decimal digits in currency
  7013                                  ;		1 BYTE	Bit field.  Time format.
  7014                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7015                                  ;		DWORD	Call address of case conversion routine
  7016                                  ;		2 BYTE	Data list separator null terminated.
  7017                                  ;	  Carry:
  7018                                  ;	     Register AX has the error code.
  7019                                  ;	IF DX = -1 on input (set current country)
  7020                                  ;	  AL = 0 is an error
  7021                                  ;	  0<AL<0FFH means set current country to country AL
  7022                                  ;	  AL = 0FF means set current country to country BX
  7023                                  ;	  No Carry:
  7024                                  ;	    Current country SET
  7025                                  ;	    Register AL will contain the low 8 bits of the country code.
  7026                                  ;	  Carry:
  7027                                  ;	     Register AX has the error code.
  7028                                  ;-----------------------------------------------------------------------------
  7029                                  
  7030                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7031                                  
  7032                                  ; 13/05/2019 - Retro DOS v4.0
  7033                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7034                                  
  7035                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7036                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7037                                  
  7038                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7039                                  	 
  7040 00000C50 3CFF                    	CMP	AL,0FFH
  7041 00000C52 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7042 00000C54 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7043 00000C56 30FF                    	XOR	BH,BH
  7044                                  BX_HAS_CODE:
  7045 00000C58 1E                      	PUSH	DS
  7046 00000C59 07                      	POP	ES
  7047 00000C5A 52                      	PUSH	DX
  7048 00000C5B 5F                      	POP	DI			; User buffer to ES:DI
  7049                                  
  7050                                  ;hkn; SS is DOSDATA
  7051                                  ;	context DS
  7052                                  
  7053 00000C5C 16                      	push	ss
  7054 00000C5D 1F                      	pop	ds
  7055                                  
  7056 00000C5E 83FFFF                  	CMP	DI,-1
  7057 00000C61 745D                    	JZ	short international_set
  7058 00000C63 09DB                    	OR	BX,BX
  7059 00000C65 7505                    	JNZ	short international_find
  7060                                  
  7061                                  ;hkn; country_cdpg is in DOSDATA segment.
  7062 00000C67 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7063                                  
  7064 00000C6A EB39                    	JMP	SHORT international_copy
  7065                                  
  7066                                  international_find:
  7067                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7068                                  	; 06/01/2024
  7069 00000C6C 31ED                    	xor	bp,bp ; 0
  7070 00000C6E E80A00                  	CALL	international_get
  7071 00000C71 7255                    	JC	short errtn
  7072                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7073                                  	; 06/01/2024
  7074 00000C73 09DB                    	or	bx,bx
  7075 00000C75 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7076 00000C77 89D3                    	MOV	BX,DX			 ; put country back
  7077 00000C79 EB3A                    	JMP	SHORT international_ok3
  7078                                  
  7079                                  international_get:
  7080 00000C7B BE[0012]                	MOV	SI,COUNTRY_CDPG
  7081                                  
  7082                                  ;hkn; country_cdpg is in DOSDATA segment.
  7083                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7084                                  
  7085                                  	; MSDOS 3.3
  7086                                  	;;cmp	bx,[SI+63h]
  7087                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7088                                  	;jz	short RET27
  7089                                  
  7090                                  	; 13/05/2019 - Retro DOS v4.0
  7091                                  
  7092                                  	; MSDOS 6.0
  7093                                  	;cmp	bx,[ss:si+68h]
  7094 00000C7E 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7095 00000C82 74CB                    	jz	short RET27			; return if equal
  7096                                  
  7097 00000C84 89DA                    	MOV	DX,BX
  7098 00000C86 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7099                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7100 00000C88 B80014                  	mov	ax,1400h
  7101 00000C8B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7102                                  			; Return: AL = 00h not installed, OK to install
  7103                                  			; 01h not installed, not OK
  7104                                  			; FFh installed
  7105 00000C8D 3CFF                    	CMP	AL,0FFH
  7106 00000C8F 7510                    	JNZ	short interr		; not in memory
  7107                                  	
  7108                                  	; 06/01/2024
  7109 00000C91 B80314                  	mov	ax,1403h		; set country info
  7110                                  
  7111                                  	;cmp	bp,0
  7112 00000C94 09ED                    	or	bp,bp			; GetCntry ?
  7113 00000C96 7501                    	JNZ	short stcdpg
  7114                                  	
  7115                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7116                                  	;mov	ax,1404h
  7117 00000C98 40                      	inc	ax	; AX = 1404h ; get country info
  7118                                  
  7119                                  	; 06/01/2024
  7120                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7121                                  	;		; BX = code page, DX = country code,
  7122                                  	;		; DS:SI -> internal code page structure
  7123                                  	;		; ES:DI -> user buffer
  7124                                  	;		; Return: AL = status
  7125                                  	;
  7126                                  	;JMP	short chkok
  7127                                  	
  7128                                  	;nop
  7129                                  
  7130                                  stcdpg:
  7131                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7132                                  	; 06/01/2024
  7133                                  	;mov     ax,1403h
  7134                                  gscdpg:
  7135 00000C99 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7136                                  			; DS:SI -> internal code page structure
  7137                                  			; BX = code page, DX = country code
  7138                                  			; Return: AL = status
  7139                                  chkok:
  7140 00000C9B 08C0                    	or	al,al			; success ?
  7141                                  	;retz				; yes
  7142 00000C9D 74B0                    	jz	short RET27
  7143                                  
  7144                                  setcarry:
  7145 00000C9F F9                      	STC				; set carry
  7146 00000CA0 C3                      	retn
  7147                                  interr:
  7148 00000CA1 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7149 00000CA3 EBFA                    	JMP	short setcarry
  7150                                  
  7151                                  international_copy:
  7152                                  
  7153                                  ;hkn; country_cdpg is in DOSDATA segment.
  7154                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7155                                  
  7156                                  	; MSDOS 3.3
  7157                                  	;;mov	bx,[SI+63h]
  7158                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7159                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7160                                  
  7161                                  	; 13/05/2019 - Retro DOS v4.0
  7162                                  
  7163                                  	; MSDOS 6.0
  7164                                  	;mov	bx,[ss:si+68h]
  7165 00000CA5 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7166 00000CA9 BE[6C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7167                                  
  7168                                  	;mov	cx,24
  7169 00000CAC B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7170                                  
  7171                                  	; MSDOS 6.0
  7172                                  
  7173                                  ;hkn;	must set up DS to SS so that international info can be copied
  7174                                  	
  7175 00000CAF 1E                      	push	ds
  7176                                  
  7177 00000CB0 16                      	push	ss			; cs -> ss
  7178 00000CB1 1F                      	pop	ds
  7179                                  
  7180 00000CB2 F3A4                    	REP	MOVSB			; copy country info
  7181                                  
  7182                                  	; MSDOS 6.0
  7183                                  
  7184 00000CB4 1F                      	pop	ds	;hkn;	restore ds
  7185                                  
  7186                                  international_ok3:
  7187 00000CB5 E8C9F7                  	call	Get_User_Stack
  7188                                  ;ASSUME	DS:NOTHING
  7189                                  	;MOV	[SI+2],BX
  7190 00000CB8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7191                                  international_ok:
  7192 00000CBB 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7193                                  ;SYS_RET_OK_jmp:
  7194                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7195                                  nono:	; 15/12/2022
  7196                                  SYS_RET_OK_jmp:
  7197 00000CBD E977F9                  	jmp	SYS_RET_OK
  7198                                  
  7199                                  international_set:
  7200                                  
  7201                                  ;hkn; ASSUME	DS:DOSGROUP
  7202                                  ;ASSUME	DS:DOSDATA
  7203                                  
  7204 00000CC0 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7205 00000CC3 E8B5FF                  	CALL	international_get
  7206 00000CC6 73F3                    	JNC	short international_ok
  7207                                  errtn:
  7208 00000CC8 3CFF                    	CMP	AL,0FFH
  7209 00000CCA 7403                    	JZ	short errtn2
  7210                                  errtn1:
  7211 00000CCC E971F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7212                                  errtn2:
  7213                                  	;error	error_invalid_function	; NLSFUNC not existent
  7214                                  
  7215                                  	;mov	al,1
  7216 00000CCF B001                    	mov	al,error_invalid_function 
  7217 00000CD1 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7218                                  ;errtn3:
  7219                                  ;	jmp	SYS_RET_ERR
  7220                                  
  7221                                  ;EndProc $INTERNATIONAL
  7222                                  
  7223                                  ; 19/07/2018
  7224                                  
  7225                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7226                                  
  7227                                  ;----------------------------------------------------------------------------
  7228                                  ;
  7229                                  ; Procedure Name : $GetExtCntry
  7230                                  ;
  7231                                  ; Inputs:
  7232                                  ;	if AL >= 20H
  7233                                  ;	  AL= 20H    capitalize single char, DL= char
  7234                                  ;	      21H    capitalize string, CX= string length
  7235                                  ;	      22H    capitalize ASCIIZ string
  7236                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7237                                  ;	      80H bit 0 = use normal upper case table
  7238                                  ;		      1 = use file upper case table
  7239                                  ;	   DS:DX points to string
  7240                                  ;
  7241                                  ;	else
  7242                                  ;
  7243                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7244                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7245                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7246                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7247                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7248                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7249                                  ;	INT	21
  7250                                  ; Function:
  7251                                  ;	give users extended country dependent information
  7252                                  ;	or capitalize chars
  7253                                  ; Outputs:
  7254                                  ;	  No Carry:
  7255                                  ;	     extended country info is succesfully returned
  7256                                  ;	  Carry:
  7257                                  ;	     Register AX has the error code.
  7258                                  ;	     AX=0, NO	 for YES/NO CHECK
  7259                                  ;		1, YES
  7260                                  ;----------------------------------------------------------------------------
  7261                                  
  7262                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7263                                  
  7264                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7265                                  
  7266                                  	; MSDOS 6.0
  7267                                  _$GetExtCntry:
  7268 00000CD3 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7269 00000CD5 7269                    	JB	short notcap
  7270                                  capcap: 				;
  7271 00000CD7 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7272 00000CD9 7505                    	JNZ	short fileupper		; file upper case
  7273                                  
  7274                                  ;hkn; UCASE_TAB in DOSDATA
  7275 00000CDB BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7276 00000CDE EB05                    	JMP	SHORT capit
  7277                                  
  7278                                  fileupper:
  7279                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7280                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7281                                  	; AL >= 80h
  7282 00000CE0 247F                    	and	al,7Fh 
  7283                                  
  7284                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7285 00000CE2 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7286                                  capit:					;
  7287 00000CE5 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7288 00000CE7 750D                    	JNZ	short chkyes		; no
  7289 00000CE9 88D0                    	MOV	AL,DL			; set up AL
  7290 00000CEB E8A942                  	call	GETLET3 		; upper case it
  7291 00000CEE E890F7                  	call	Get_User_Stack		; get user stack
  7292                                  	;mov	[si+6],al
  7293 00000CF1 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7294 00000CF4 EBC7                    	JMP	SHORT nono		; done
  7295                                  chkyes: 				;
  7296 00000CF6 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7297 00000CF8 7522                    	JNZ	short capstring		; no
  7298                                  
  7299 00000CFA 31C0                    	XOR	AX,AX			; presume NO
  7300                                  		      
  7301                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7302                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7303                                  
  7304                                  	; 06/08/2018 - Retro DOS v3.0
  7305                                  	; 13/05/2019 - Retro DOS v4.0
  7306                                  	;cmp	dl,'Y'
  7307 00000CFC 2E3A16[150A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7308 00000D01 7416                    	JZ	short yesyes		; yes
  7309                                  	;cmp	dl,'y'
  7310 00000D03 2E3A16[170A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7311 00000D08 740F                    	JZ	short yesyes		; yes
  7312                                  	;cmp	dl,'N'
  7313 00000D0A 2E3A16[160A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7314 00000D0F 74AC                    	JZ	short nono		; no
  7315                                  	;cmp	dl,'n'
  7316 00000D11 2E3A16[180A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7317 00000D16 74A5                    	JZ	short nono		; no
  7318                                  ;dbcs_char:				;
  7319 00000D18 40                      	INC	AX			; not YES or NO
  7320                                  yesyes: 				;
  7321 00000D19 40                      	INC	AX			; return 1
  7322                                  	; 15/12/2022
  7323                                  ;nono:	
  7324 00000D1A EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7325                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7326                                  	;jmp	SYS_RET_OK		; done
  7327                                  
  7328                                  capstring:				;
  7329 00000D1C 89D6                    	MOV	SI,DX			; si=dx
  7330 00000D1E 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7331 00000D20 750D                    	JNZ	short capascii		; no
  7332                                  	;OR	CX,CX			; check count 0
  7333                                  	;JZ	short nono		; yes finished
  7334                                  	; 06/01/2024
  7335 00000D22 E399                    	jcxz	nono
  7336                                  concap: 				;
  7337 00000D24 AC                      	LODSB				; get char
  7338 00000D25 E86F42                  	call	GETLET3 		; upper case it
  7339 00000D28 8844FF                  	MOV	byte [SI-1],AL		; store back
  7340                                  ;next99: 				;
  7341 00000D2B E2F7                    	LOOP	concap			; continue
  7342 00000D2D EB8E                    	JMP	short nono		; done
  7343                                  capascii:				;
  7344 00000D2F 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7345 00000D31 7545                    	JNZ	short capinval		; no
  7346                                  concap2:				;
  7347 00000D33 AC                      	LODSB				; get char
  7348 00000D34 08C0                    	or	al,al			; end of string ?
  7349 00000D36 7485                    	JZ	short nono		; yes
  7350 00000D38 E85C42                  	call	GETLET3 		; upper case it
  7351 00000D3B 8844FF                  	MOV	[SI-1],AL		; store back
  7352 00000D3E EBF3                    	JMP	short concap2 		; continue
  7353                                  
  7354                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7355                                  
  7356                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7357                                  ; _$GetExtCntry:
  7358                                  
  7359                                  notcap:
  7360 00000D40 83F905                  	CMP	CX,5			; minimum size is 5
  7361 00000D43 7277                    	jb	short sizeerror
  7362                                  
  7363                                  GEC_CONT:
  7364                                  ;hkn; SS is DOSDATA
  7365                                  	;context DS
  7366                                  
  7367 00000D45 16                      	push	ss
  7368                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7369 00000D46 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7370                                  	
  7371                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7372 00000D47 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7373                                  
  7374 00000D4A 83FAFF                  	CMP	DX,-1			; active country ?
  7375 00000D4D 7503                    	JNZ	short GETCDPG 		; no
  7376                                  
  7377                                  ;hkn; use DS override to accesss country_cdpg fields
  7378                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7379                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7380 00000D4F 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7381                                  					; get active country id;smr;use DS
  7382                                  GETCDPG:
  7383 00000D52 83FBFF                  	CMP	BX,-1			; active code page?
  7384 00000D55 7503                    	JNZ	short CHKAGAIN		; no, check again
  7385                                  
  7386                                  ;hkn; use DS override to accesss country_cdpg fields
  7387                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7388                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7389 00000D57 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7390                                  					; get active code page id;smr;Use DS
  7391                                  CHKAGAIN:
  7392                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7393 00000D5A 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7394                                  					; same as active country id?;smr;use DS
  7395 00000D5D 7550                    	JNZ	short CHKNLS		; no
  7396                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7397 00000D5F 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7398                                  					; same as active code pg id?;smr;use DS
  7399 00000D62 754B                    	JNZ	short CHKNLS		; no
  7400                                  CHKTYPE:
  7401                                  	;mov	bx,[si+48h]
  7402 00000D64 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7403                                  					; bx = sys code page id;smr;use DS
  7404 00000D67 51                      	PUSH	CX			; save cx
  7405                                  	;mov	cx,[si+4Ah]
  7406 00000D68 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7407                                  	;mov	si,COUNTRY_CDPG+76
  7408 00000D6B BE[4C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7409                                  NXTENTRY:
  7410 00000D6E 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7411 00000D70 740B                    	JZ	short FOUNDIT
  7412 00000D72 83C605                  	ADD	SI,5			; next entry
  7413 00000D75 E2F7                    	LOOP	NXTENTRY
  7414 00000D77 59                      	POP	CX
  7415                                  capinval:
  7416                                  	;error	error_invalid_function	; info type not found
  7417                                  	;mov	al,1
  7418 00000D78 B001                    	mov	al,error_invalid_function
  7419                                  ;SYS_RET_ERR_jmp:
  7420                                  	;jmp	SYS_RET_ERR
  7421                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7422                                  SYS_RET_ERR_jmp:
  7423 00000D7A E9C3F8                  	jmp	SYS_RET_ERR	
  7424                                  
  7425                                  FOUNDIT:
  7426 00000D7D A4                      	MOVSB				; move info id byte
  7427 00000D7E 59                      	POP	CX			; restore char count
  7428                                  	;cmp	al,1
  7429 00000D7F 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7430 00000D81 7415                    	JZ	short setsize
  7431 00000D83 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7432 00000D86 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7433                                  OK_RETN:
  7434 00000D89 F3A4                    	REP	MOVSB			; copy info
  7435 00000D8B 89C1                    	MOV	CX,AX			; CX = actual length returned
  7436 00000D8D 89D8                    	MOV	AX,BX			; return sys code page in ax
  7437                                  GETDONE:
  7438 00000D8F E8EFF6                  	call	Get_User_Stack		; return actual length to user's CX
  7439                                  	;mov	[si+4],cx 
  7440 00000D92 894C04                  	MOV	[SI+user_env.user_CX],CX
  7441                                  	;jmp	SYS_RET_OK
  7442                                  	; 15/12/2022
  7443                                  	; 25/06/2019
  7444 00000D95 E9A2F8                  	jmp	SYS_RET_OK_clc
  7445                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7446                                  	; 15/12/2022
  7447                                  ;nono_jmp:
  7448                                  	;jmp	short nono
  7449                                  setsize:
  7450 00000D98 83E903                  	SUB	CX,3			; size after length field
  7451 00000D9B 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7452 00000D9D 7302                    	JAE	short setsize2		; no
  7453 00000D9F 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7454                                  setsize2:
  7455 00000DA1 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7456                                  	;ADD	DI,2			; update index
  7457                                  	;ADD	SI,2
  7458                                  	; 06/01/2024
  7459 00000DA4 47                      	inc	di
  7460 00000DA5 47                      	inc	di
  7461 00000DA6 46                      	inc	si
  7462 00000DA7 46                      	inc	si
  7463 00000DA8 89C8                    	MOV	AX,CX
  7464 00000DAA 83C003                  	ADD	AX,3			; AX has the actual length
  7465 00000DAD EBDA                    	JMP	short OK_RETN 		; go move it
  7466                                  CHKNLS:
  7467 00000DAF 30E4                    	XOR	AH,AH
  7468                                  	;PUSH	AX			; save info type
  7469                                  	;POP	BP			; bp = info type
  7470                                  	; 06/01/2024
  7471 00000DB1 89C5                    	mov	bp,ax
  7472                                  	
  7473                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7474 00000DB3 B80014                  	mov     ax,1400h
  7475 00000DB6 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7476                                  			; Return: AL = 00h not installed, OK to install
  7477                                  			; 01h not installed, not OK
  7478                                  			; FFh installed
  7479 00000DB8 3CFF                    	CMP	AL,0FFH
  7480 00000DBA 7404                    	JZ	short NLSNXT		; in memory
  7481                                  
  7482                                  sizeerror:
  7483                                  	;error	error_invalid_function
  7484                                  	;mov	al,1
  7485 00000DBC B001                    	mov	al,error_invalid_function
  7486                                  	;jmp	SYS_RET_ERR
  7487                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7488                                  sys_ret_err_jmp2:
  7489 00000DBE EBBA                    	jmp	short SYS_RET_ERR_jmp
  7490                                  
  7491                                  NLSNXT: 
  7492                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7493 00000DC0 B80214                  	mov     ax,1402h
  7494 00000DC3 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7495                                  			; BP = subfunction, BX = code page
  7496                                  			; DX = country code, DS:SI -> internal code page structure
  7497                                  			; ES:DI -> user buffer, CX = size of user buffer
  7498                                  			; Return: AL = status
  7499                                  			; 00h successful
  7500                                  			; else DOS error code
  7501                                  
  7502 00000DC5 3C00                    	CMP	AL,0			; success ?
  7503 00000DC7 7505                    	JNZ	short NLSERROR
  7504                                  	;mov	ax,[si+48h] ; 13/05/2019
  7505 00000DC9 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7506                                  			; ax = sys code page id;smr;use ds;
  7507                                  			;BUGBUG;check whether DS is OK after the above calls
  7508 00000DCC EBC1                    	JMP	short GETDONE
  7509                                  seterr:
  7510                                  	; 15/12/2022
  7511                                  NLSERROR:
  7512                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7513                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7514                                  	;jmp	short sys_ret_err_jmp2
  7515                                  	; 15/12/2022
  7516 00000DCE EBAA                    	jmp	short SYS_RET_ERR_jmp
  7517                                  
  7518                                  ;EndProc $GetExtCntry
  7519                                  
  7520                                  ; 13/05/2019 - Retro DOS v4.0
  7521                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7522                                  
  7523                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7524                                  ;----------------------------------------------------------------------------
  7525                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7526                                  ;
  7527                                  ;   System call format:
  7528                                  ;
  7529                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7530                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7531                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7532                                  ;	INT	21
  7533                                  ;
  7534                                  ;	ENTRY	(al) = n
  7535                                  ;		(bx) = code page
  7536                                  ;	EXIT	'C' clear
  7537                                  ;		  global code page is set	(set global code page)
  7538                                  ;		  (BX) = active code page id	(get global code page)
  7539                                  ;		  (DX) = system code page id	(get global code page)
  7540                                  ;		'C' set
  7541                                  ;		  (AX) = error code
  7542                                  
  7543                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7544                                  
  7545                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7546                                  	; DOSCODE:4BC9h
  7547                                  
  7548                                  _$GetSetCdPg:
  7549                                  
  7550                                  ;hkn; SS is DOSDATA
  7551                                  	;context DS
  7552                                  
  7553 00000DD0 16                      	push	ss
  7554 00000DD1 1F                      	pop	ds
  7555                                  
  7556                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7557 00000DD2 BE[0012]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7558                                  
  7559 00000DD5 3C01                    	CMP	AL,1		       ; get global code page
  7560 00000DD7 7512                    	JNZ	short setglpg 	       ; set global code page
  7561                                  	
  7562                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7563                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7564 00000DD9 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7565                                  					; get active code page id;smr;use ds
  7566                                  	;mov	dx,[si+48h]
  7567 00000DDC 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7568                                  				  	; get sys code page id;smr;use ds
  7569 00000DDF E89FF6                  	call	Get_User_Stack
  7570                                  ;ASSUME DS:NOTHING
  7571                                  	;;mov	[si+2],bx
  7572                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7573                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7574 00000DE2 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7575                                  	;mov	[si+6],dx
  7576 00000DE5 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7577                                  OK_RETURN:
  7578                                  	; 15/12/2022
  7579                                  	;transfer SYS_RET_OK
  7580 00000DE8 E94CF8                  	jmp	SYS_RET_OK
  7581                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7582                                  	;jmp	short nono_jmp
  7583                                  
  7584                                  ;hkn; ASSUME DS:DOSGROUP
  7585                                  ;ASSUME	DS:DOSDATA
  7586                                  
  7587                                  setglpg:
  7588 00000DEB 3C02                    	CMP	AL,2
  7589 00000DED 752F                    	JNZ	short nomem
  7590                                  	
  7591                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7592                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7593 00000DEF 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7594                                  	
  7595                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7596 00000DF2 B80014                  	mov     ax,1400h
  7597 00000DF5 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7598                                  			; Return: AL = 00h not installed, OK to install
  7599                                  			; 01h not installed, not OK
  7600                                  			; FFh installed
  7601 00000DF7 3CFF                    	CMP	AL,0FFH
  7602 00000DF9 7523                    	JNZ	short nomem		; not in memory
  7603                                  
  7604                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7605 00000DFB B80114                  	mov     ax,1401h
  7606 00000DFE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7607                                  			; DS:SI -> internal code page structure
  7608                                  			; BX = new code page, DX = country code???
  7609                                  			; Return: AL = status
  7610                                  			; 00h successful
  7611                                  			; else DOS error code
  7612                                  	;cmp	al,0
  7613 00000E00 08C0                    	or	al,al			; success ?
  7614 00000E02 74E4                    	JZ	short OK_RETURN		; yes
  7615                                  
  7616 00000E04 3C41                    	CMP	AL,65			; set device code page failed
  7617 00000E06 75C6                    	JNZ	short seterr
  7618                                  	;MOV	AX,65
  7619                                  	; 06/01/2024
  7620 00000E08 98                      	cbw
  7621 00000E09 A3[2403]                	MOV	[EXTERR],AX
  7622                                  	;mov	byte [EXTERR_ACTION],6
  7623                                  	;mov	byte [EXTERR_CLASS],5
  7624                                  	;mov	byte [EXTERR_LOCUS],4
  7625 00000E0C C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7626 00000E11 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7627 00000E16 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7628                                  	;transfer From_GetSet
  7629 00000E1B E92AF8                  	jmp	From_GetSet
  7630                                  
  7631                                  	; 15/12/2022
  7632                                  ;seterr:
  7633                                  	;;;transfer SYS_RET_ERR
  7634                                  	;;jmp	SYS_RET_ERR
  7635                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7636                                  	;jmp	short NLSERROR
  7637                                  
  7638                                  nomem:
  7639                                  	;error	error_invalid_function	; function not defined
  7640                                  	;mov	al,1
  7641 00000E1E B001                    	mov	al,error_invalid_function
  7642 00000E20 EBAC                    	jmp	short seterr
  7643                                  
  7644                                  ;EndProc $GetSetCdPg
  7645                                  
  7646                                  ; 09/01/2024
  7647                                  ; 13/05/2019 - Retro DOS v4.0
  7648                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7649                                  
  7650                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7651                                  ;----------------------------------------------------------------------------
  7652                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7653                                  ;
  7654                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7655                                  ;		drive.
  7656                                  ;
  7657                                  ;	This call returns the same info in the same registers (except for the
  7658                                  ;	FAT pointer) as the old FAT pointer calls
  7659                                  ;
  7660                                  ;	ENTRY	DL = Drive number
  7661                                  ;	EXIT	AX = Sectors per allocation unit
  7662                                  ;		   = -1 if bad drive specified
  7663                                  ;		On User Stack
  7664                                  ;		    BX = Number of free allocation units
  7665                                  ;		    DX = Total Number of allocation units on disk
  7666                                  ;		    CX = Sector size
  7667                                  
  7668                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7669                                  
  7670                                  _$GET_DRIVE_FREESPACE:
  7671                                  
  7672                                  ;hkn; SS is DOSDATA
  7673                                  	;context DS
  7674 00000E22 16                      	push	ss
  7675 00000E23 1F                      	pop	ds
  7676                                  
  7677 00000E24 88D0                    	MOV	AL,DL
  7678                                  	;invoke	GetThisDrv		; Get drive
  7679 00000E26 E89A5B                  	call	GETTHISDRV
  7680                                  SET_AX_RET:
  7681 00000E29 7212                    	JC	short BADFDRV
  7682                                  	;invoke	DISK_INFO
  7683 00000E2B E8321E                  	call	DISK_INFO
  7684 00000E2E 87D3                    	XCHG	DX,BX
  7685                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7686                                  	; 06/01/2024
  7687 00000E30 720B                    	jc	short BADFDRV
  7688 00000E32 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7689                                  DoSt:
  7690 00000E34 E84AF6                  	call	Get_User_Stack
  7691                                  ;ASSUME	DS:NOTHING
  7692                                  	;mov	[si+6],dx
  7693                                  	;;mov	[si+4],cx
  7694                                  	;;mov	[si+2],bx
  7695                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7696 00000E37 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7697                                  	;MOV	[SI+user_env.user_CX],CX
  7698                                  	;MOV	[SI+user_env.user_BX],BX
  7699                                  	;;MOV	[SI+user_env.user_AX],AX
  7700                                  	;mov	[si],ax
  7701                                  	;;return
  7702                                  	;retn
  7703                                  	; 09/01/2024
  7704 00000E3A E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7705                                  
  7706                                  BADFDRV:
  7707                                  	; MSDOS 3.3
  7708                                  	;;mov	al,0Fh
  7709                                  	;mov	al,error_invalid_drive	; Assume error
  7710                                  
  7711                                  	; 13/05/2019 - Retro DOS v4.0
  7712                                  
  7713                                  	; MSDOS 6.0 & MSDOS 3.3
  7714                                  	;invoke	FCB_RET_ERR
  7715 00000E3D E816F8                  	call	FCB_RET_ERR
  7716                                  	
  7717 00000E40 B8FFFF                  	MOV	AX,-1
  7718 00000E43 EBEF                    	JMP	short DoSt
  7719                                  
  7720                                  ;EndProc $GET_DRIVE_FREESPACE
  7721                                  
  7722                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7723                                  ;----------------------------------------------------------------------------
  7724                                  ;**	$Get_DMA - Get Disk Transfer Address
  7725                                  ;
  7726                                  ;	ENTRY	none
  7727                                  ;	EXIT	ES:BX is current transfer address
  7728                                  ;	USES	all
  7729                                  
  7730                                  	; 09/01/2024
  7731                                  _$GET_DMA:
  7732 00000E45 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7733 00000E4A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7734 00000E4F E82FF6                  	call	Get_User_Stack
  7735                                  	;mov	[si+2],bx
  7736                                  	;mov	[si+10h],cx
  7737                                  	; 09/01/2024
  7738                                  	;MOV	[SI+user_env.user_BX],BX
  7739 00000E52 894C10                  	MOV	[SI+user_env.user_ES],CX
  7740                                  	;retn
  7741                                  	; 09/01/2024
  7742 00000E55 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7743                                  
  7744                                  ;**	$Set_DMA - Set Disk Transfer Address
  7745                                  ;----------------------------------------------------------------------------
  7746                                  ;	ENTRY	DS:DX is current transfer address
  7747                                  ;	EXIT	none
  7748                                  ;	USES	all
  7749                                  
  7750                                  _$SET_DMA:
  7751 00000E58 368916[2C03]            	MOV	[SS:DMAADD],DX
  7752 00000E5D 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7753 00000E62 C3                      	retn
  7754                                  
  7755                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7756                                  ;------------------------------------------------------------------------------
  7757                                  
  7758                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7759                                  ;-----------------------------------------------------
  7760                                  ;	ENTRY	none
  7761                                  ;	EXIT	(AL) = drive number
  7762                                  ;	USES	all
  7763                                  
  7764                                  _$GET_DEFAULT_DRIVE:
  7765 00000E63 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7766 00000E67 C3                      	retn
  7767                                  
  7768                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7769                                  ;-----------------------------------------------------
  7770                                  ;	ENTRY	(DL) = Drive number for new default drive
  7771                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7772                                  
  7773                                  _$SET_DEFAULT_DRIVE:
  7774 00000E68 88D0                    	MOV	AL,DL
  7775 00000E6A FEC0                    	INC	AL			; A=1, B=2...
  7776 00000E6C E8385B                  	call	GetVisDrv		; see if visible drive
  7777 00000E6F 7204                    	JC	short SETRET		; errors do not set
  7778 00000E71 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7779                                  
  7780                                  SETRET:
  7781 00000E75 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7782 00000E79 C3                      	retn
  7783                                  
  7784                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7785                                  ;----------------------------------------------------------------------------
  7786                                  
  7787                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7788                                  ;---------------------------------------------------
  7789                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7790                                  ;	contents of an interrupt vector.
  7791                                  ;
  7792                                  ;	ENTRY	(AL) = interrupt number
  7793                                  ;	EXIT	(ES:BX) = current interrupt vector
  7794                                  
  7795                                  _$GET_INTERRUPT_VECTOR:
  7796 00000E7A E82E00                  	CALL	RECSET
  7797 00000E7D 26C41F                  	LES	BX,[ES:BX]
  7798 00000E80 E8FEF5                  	call	Get_User_Stack
  7799                                  set_user_es_bx:
  7800                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7801                                  	;;mov	[si+2],bx
  7802                                  	;mov	[si+10h],es
  7803                                  	;MOV	[SI+user_env.user_BX],BX
  7804 00000E83 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7805                                  	;retn
  7806 00000E86 E9B7FD                  	jmp	set_user_bx
  7807                                  
  7808                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7809                                  ;---------------------------------------------------
  7810                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7811                                  ;	contents of an interrupt vector.
  7812                                  ;
  7813                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7814                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7815                                  ;	for explanation.
  7816                                  ;
  7817                                  ;	ENTRY	(AL) = interrupt number
  7818                                  ;		(ds:dx) = desired new vector value
  7819                                  ;	EXIT	none
  7820                                  ;	USES	all
  7821                                  
  7822                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7823                                  ; 13/05/2019 - Retro DOS v4.0
  7824                                  
  7825                                  _$SET_INTERRUPT_VECTOR:
  7826 00000E89 E81F00                  	CALL	RECSET
  7827 00000E8C FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7828 00000E8D 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7829 00000E90 268C5F02                	MOV	[ES:BX+2],DS
  7830 00000E94 FB                      	STI
  7831                                  					; M004, M068 - Start
  7832                                  	; MSDOS 6.0
  7833 00000E95 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7834                                  					; Q: was the previous call an int 21h
  7835                                  					;    exec call
  7836                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7837                                  	;jnz	short siv_1		; Y: go set count
  7838                                  	;retn				; N: return
  7839                                  	; 15/12/2022
  7840 00000E9B 740D                    	jz	short siv_2
  7841                                  siv_1:	
  7842 00000E9D 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7843 00000EA3 7505                    	jnz	short siv_2		 ; N: done
  7844                                  	; 20/09/2023
  7845 00000EA5 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7846                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7847                                  					 ; dispatcher to turn A20 Off before
  7848                                  					 ; returning to user.
  7849                                  siv_2:
  7850                                  	; 07/12/2022
  7851 00000EAA C3                      	retn				; M004, M068 - End
  7852                                  	
  7853                                  RECSET:
  7854 00000EAB 31DB                    	XOR	BX,BX
  7855 00000EAD 8EC3                    	MOV	ES,BX
  7856 00000EAF 88C3                    	MOV	BL,AL
  7857 00000EB1 D1E3                    	SHL	BX,1
  7858 00000EB3 D1E3                    	SHL	BX,1
  7859 00000EB5 C3                      	retn
  7860                                  
  7861                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7862                                  ;-------------------------------------------------------------------------------------
  7863                                  
  7864                                  ;**	$Char_Oper - Manipulate Switch Character
  7865                                  ;
  7866                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7867                                  ;
  7868                                  ;	ENTRY	AL = function:
  7869                                  ;		    0 - read switch char
  7870                                  ;		    1 - set switch char (char in DL)
  7871                                  ;		    2 - read device availability
  7872                                  ;			Always returns available
  7873                                  ;		    3 - set device availability
  7874                                  ;			No longer supported (NOP)
  7875                                  ;	EXIT	(al) = 0xff iff error
  7876                                  ;		(al) != 0xff if ok
  7877                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7878                                  ;	USES	AL, DL
  7879                                  ;
  7880                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7881                                  ;		The character / is always returned for subfunction 0,
  7882                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7883                                  
  7884                                  ; 13/05/2019 - Retro DOS v4.0
  7885                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7886                                  
  7887                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7888                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7889                                  
  7890                                  _$CHAR_OPER:
  7891                                  	; MSDOS 6.0
  7892 00000EB6 08C0                    	or	al,al				; get switch?
  7893 00000EB8 B22F                    	mov	dl,'/'				; assume yes
  7894 00000EBA 7407                    	jz	short chop_1			; jump if yes
  7895 00000EBC 3C02                    	cmp	al,2				; check device availability?
  7896 00000EBE B2FF                    	mov	dl,-1				; assume yes
  7897 00000EC0 7401                    	jz	short chop_1			; jump if yes
  7898 00000EC2 C3                      	retn					; otherwise just quit
  7899                                  
  7900                                  ; subfunctions requiring return of value to user come here. DL holds
  7901                                  ; value to return
  7902                                  
  7903                                  chop_1:
  7904 00000EC3 E8BBF5                  	call	Get_User_Stack
  7905 00000EC6 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7906 00000EC9 C3                      	retn
  7907                                  
  7908                                  	; MSDOS 3.3
  7909                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7910                                  	;push	ss
  7911                                  	;pop	ds
  7912                                  	;cmp	al,1
  7913                                  	;jb	short chop_1
  7914                                  	;jz	short chop_2
  7915                                  	;cmp	al,3
  7916                                  	;jb	short chop_3
  7917                                  	;jz	short chop_5
  7918                                  	;mov	al,0FFh
  7919                                  	;retn
  7920                                  ;chop_1:
  7921                                  	;mov	dl,[chSwitch]
  7922                                  	;jmp	short chop_4
  7923                                  ;chop_2:
  7924                                  	;mov	[chSwitch],dl
  7925                                  	;retn
  7926                                  ;chop_3:
  7927                                  	;mov	dl, FFh
  7928                                  ;chop_4:
  7929                                  	;call	Get_User_Stack
  7930                                  	;mov	[si+6],dx
  7931                                  ;chop_5:
  7932                                  	;retn
  7933                                  
  7934                                  ;**	$GetExtendedError - Return Extended error code
  7935                                  ;----------------------------------------------------------------------------
  7936                                  ;	This function reads up the extended error info from the static
  7937                                  ;	variables where it was stored.
  7938                                  ;
  7939                                  ;	ENTRY	none
  7940                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7941                                  ;		BL = recommended action
  7942                                  ;		BH = class of error
  7943                                  ;		CH = locus of error
  7944                                  ;		ES:DI = may be pointer
  7945                                  ;	USES	ALL
  7946                                  
  7947                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7948                                  
  7949                                  _$GetExtendedError:
  7950 00000ECA 16                      	push	ss
  7951 00000ECB 1F                      	pop	ds
  7952 00000ECC A1[2403]                	MOV	AX,[EXTERR]
  7953 00000ECF C43E[2803]              	LES	DI,[EXTERRPT]
  7954 00000ED3 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7955 00000ED7 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7956 00000EDB E8A3F5                  	call	Get_User_Stack
  7957                                  	;mov	[si+0Ah],di
  7958 00000EDE 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7959                                  
  7960                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7961                                  	;;mov	[si+10h],es
  7962                                  	;MOV	[SI+user_env.user_ES],ES
  7963                                  	;;mov	[si+2],bx
  7964                                  	;MOV	[SI+user_env.user_BX],BX
  7965 00000EE1 E89FFF                  	call	set_user_es_bx
  7966                                  
  7967                                  	;mov	[si+4],cx
  7968 00000EE4 894C04                  	MOV	[SI+user_env.user_CX],CX
  7969                                  jmp_SYS_RET_OK:
  7970                                  	; 15/12/2022
  7971                                  	;jmp	SYS_RET_OK
  7972                                  	; 25/06/2019
  7973 00000EE7 E950F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7974                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7975                                  ;jmp_SYS_RET_OK:
  7976                                  	;jmp	SYS_RET_OK
  7977                                  
  7978                                  ; --------------------------------------------------------------------------
  7979                                  ; 09/01/2024
  7980                                  %if 0
  7981                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7982                                  	; DOSCODE:4CF3h
  7983                                  ;patch_or_unknown:
  7984                                  ;get_code_page:
  7985                                  	push    si
  7986                                  	mov     si, COUNTRY_CDPG
  7987                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7988                                  	mov     ax, [ss:si+6Ah]
  7989                                  	pop     si
  7990                                  	retn
  7991                                  %endif
  7992                                  ; --------------------------------------------------------------------------
  7993                                  
  7994                                  ; 29/04/2019 - Retro DOS v4.0
  7995                                  
  7996                                  ;BREAK	<ECS_call - Extended Code System support function>
  7997                                  ;---------------------------------------------------------------------------
  7998                                  ; Inputs:
  7999                                  ;	AL = 0	get lead byte table
  8000                                  ;		on return DS:SI has the table location
  8001                                  ;
  8002                                  ;	AL = 1	set / reset interim console flag
  8003                                  ;		DL = flag (00H or 01H)
  8004                                  ;		no return
  8005                                  ;
  8006                                  ;	AL = 2	get interim console flag
  8007                                  ;		on return DL = current flag value
  8008                                  ;
  8009                                  ;	AL = OTHER then error, and returns with:
  8010                                  ;		AX = error_invalid_function
  8011                                  ;
  8012                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  8013                                  ;	 SS:SP WILL BE PRESERVED!
  8014                                  ;---------------------------------------------------------------------------
  8015                                  
  8016                                  _$ECS_Call:
  8017 00000EEA 08C0                    	or	al,al			; AL = 0 (get table)?
  8018                                  	;jnz	short _okok
  8019                                  	; 15/12/2022
  8020 00000EEC 7403                    	jz	short get_lbt
  8021                                  ;_okok:
  8022 00000EEE E946F7                  	jmp	SYS_RET_OK
  8023                                  get_lbt:
  8024 00000EF1 E88DF5                  	call	Get_User_Stack		; *
  8025                                  
  8026                                  ;hkn; dbcs_table moved low to dosdata
  8027                                  	;mov	word [si+8],DBCS_TAB+2
  8028 00000EF4 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8029                                  
  8030 00000EF9 06                      	push	es
  8031                                  	;getdseg <es>			; es = DOSDATA
  8032 00000EFA 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8033                                  	;mov	[si+14],es
  8034 00000EFF 8C440E                  	mov	[SI+user_env.user_DS],es
  8035 00000F02 07                      	pop	es
  8036                                  
  8037                                  	; 15/12/2022
  8038 00000F03 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8039                                  ;_okok:
  8040                                  	; 15/12/2022	
  8041                                  	;;transfer SYS_RET_OK
  8042                                  	;jmp	short jmp_SYS_RET_OK
  8043                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8044                                  	;;jmp	SYS_RET_OK
  8045                                  	;jmp	short jmp_SYS_RET_OK
  8046                                  
  8047                                  ;============================================================================
  8048                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8049                                  ;============================================================================
  8050                                  ; 19/07/2018 - Retro DOS v3.0
  8051                                  ; 15/05/2019 - Retro DOS v4.0
  8052                                  
  8053                                  ; System calls for parsing command lines
  8054                                  ;
  8055                                  ;   $PARSE_FILE_DESCRIPTOR
  8056                                  ;
  8057                                  ;   Modification history:
  8058                                  ;
  8059                                  ;       Created: ARR 30 March 1983
  8060                                  ;               EE PathParse 10 Sept 1983
  8061                                  ;
  8062                                  
  8063                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8064                                  ;---------------------------------------------------------------------------
  8065                                  ; Inputs:
  8066                                  ;       DS:SI Points to a command line
  8067                                  ;       ES:DI Points to an empty FCB
  8068                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8069                                  ;                   = 0 Parse stops if separator encountered
  8070                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8071                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8072                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8073                                  ;                   = 0  "       "      "       - put blanks in FCB
  8074                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8075                                  ;                   = 0  "       "      "        - put blanks in FCB
  8076                                  ; Function:
  8077                                  ;       Parse command line into FCB
  8078                                  ; Returns:
  8079                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8080                                  ;       DS:SI points to first character after filename
  8081                                  ;---------------------------------------------------------------------------
  8082                                  
  8083                                  _$PARSE_FILE_DESCRIPTOR:
  8084 00000F05 E8313F                  	call	MAKEFCB
  8085 00000F08 56                      	PUSH    SI
  8086 00000F09 E875F5                  	call	Get_User_Stack
  8087                                  	;pop	word [si+8]
  8088 00000F0C 8F4408                  	POP     word [SI+user_env.user_SI]
  8089 00000F0F C3                      	retn
  8090                                  
  8091                                  ;============================================================================
  8092                                  ; MISC.ASM, MSDOS 6.0, 1991
  8093                                  ;============================================================================
  8094                                  ; 19/07/2018 - Retro DOS v3.0
  8095                                  
  8096                                  ; 29/04/2019 - Retro DOS v4.0
  8097                                  
  8098                                  ;ENTRYPOINTSEG	EQU	0CH
  8099                                  ;MAXDIF		EQU	0FFFH
  8100                                  ;SAVEXIT 	EQU	10
  8101                                  ;WRAPOFFSET	EQU	0FEF0h
  8102                                  
  8103                                  ;
  8104                                  ;----------------------------------------------------------------------------
  8105                                  ;
  8106                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8107                                  ;
  8108                                  ;	Return Stuff sort of like old get fat call
  8109                                  ;
  8110                                  ;	ENTRY	none
  8111                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8112                                  ;			GOD help anyone who tries to do ANYTHING except
  8113                                  ;			READ this ONE byte.
  8114                                  ;		DX = Total Number of allocation units on disk
  8115                                  ;		CX = Sector size
  8116                                  ;		AL = Sectors per allocation unit
  8117                                  ;		   = -1 if bad drive specified
  8118                                  ;	USES	all
  8119                                  ;
  8120                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8121                                  ;
  8122                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8123                                  ;
  8124                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8125                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8126                                  ;			GOD help anyone who tries to do ANYTHING except
  8127                                  ;			READ this ONE byte.
  8128                                  ;		DX = Total Number of allocation units on disk
  8129                                  ;		CX = Sector size
  8130                                  ;		AL = Sectors per allocation unit
  8131                                  ;		   = -1 if bad drive specified
  8132                                  ;	USES	all
  8133                                  ;
  8134                                  ;----------------------------------------------------------------------------
  8135                                  ;
  8136                                  
  8137                                  _$SLEAZEFUNC:
  8138                                  	; 10/01/2024
  8139                                  	; 15/05/2019 - Retro DOS v4.0
  8140 00000F10 B200                    	MOV	DL,0
  8141                                  _$SLEAZEFUNCDL:
  8142 00000F12 16                      	push	ss
  8143 00000F13 1F                      	pop	ds
  8144                                  	
  8145 00000F14 88D0                    	MOV	AL,DL
  8146 00000F16 E8AA5A                  	call	GETTHISDRV		; Get CDS structure
  8147                                  SET_AL_RET:
  8148                                  	; MSDOS 3.3
  8149                                  	;;mov	al, 0Fh
  8150                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8151                                  	
  8152                                  	; MSDOS 6.0 & MSDOS 3.3
  8153 00000F19 721D                    	JC	short BADSLDRIVE
  8154                                  
  8155 00000F1B E8421D                  	call	DISK_INFO
  8156                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8157 00000F1E 7218                    	jc	short BADSLDRIVE
  8158 00000F20 8826[9805]              	MOV	[FATBYTE],AH
  8159                                  
  8160                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8161                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8162                                  ; CALL AGAIN
  8163                                  
  8164                                  	; 10/01/2024
  8165                                  	;MOV	DI,FATBYTE
  8166 00000F24 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8167 00000F26 E858F5                  	call	Get_User_Stack
  8168                                  	;mov	[si+4],cx
  8169                                  	;mov	[si+6],bx
  8170                                  	;mov	[si+2],di
  8171 00000F29 894C04                  	MOV	[SI+user_env.user_CX],CX
  8172 00000F2C 895C06                  	MOV	[SI+user_env.user_DX],BX
  8173                                  	;MOV	[SI+user_env.user_BX],DI
  8174                                  	; 10/01/2024
  8175 00000F2F C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8176                                  	
  8177                                  	;mov	[si+0Eh],ss
  8178 00000F34 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8179                                  
  8180 00000F37 C3                      	retn
  8181                                  
  8182                                  BADSLDRIVE:
  8183 00000F38 E91BF7                  	jmp	FCB_RET_ERR
  8184                                  
  8185                                  ;
  8186                                  ;----------------------------------------------------------------------------
  8187                                  ;
  8188                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8189                                  ;
  8190                                  ;	Returns location of DOS status for interrupt routines
  8191                                  ;
  8192                                  ;	ENTRY	none
  8193                                  ;	EXIT	(es:bx) = flag location
  8194                                  ;	USES	all
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  
  8199                                  _$GET_INDOS_FLAG:
  8200 00000F3B E843F5                          CALL	Get_User_Stack
  8201                                          ;MOV	WORD [SI+2],INDOS
  8202 00000F3E C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8203                                  getin_segm:	; 13/01/2024
  8204                                  	;MOV	[SI+10H],SS
  8205 00000F43 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8206 00000F46 C3                      	RETN 
  8207                                  ;
  8208                                  ;----------------------------------------------------------------------------
  8209                                  ;
  8210                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8211                                  ;
  8212                                  ;	Return a pointer to interesting DOS variables This call is version
  8213                                  ;	dependent and is subject to change without notice in future versions.
  8214                                  ;	Use at risk.
  8215                                  ;
  8216                                  ;	ENTRY	none
  8217                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8218                                  ;	uses	ALL
  8219                                  ;
  8220                                  ;----------------------------------------------------------------------------
  8221                                  ;
  8222                                  
  8223                                  	; 13/01/2024
  8224                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8225                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8226                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8227                                  
  8228                                  _$GET_IN_VARS:
  8229 00000F47 E837F5                  	CALL	Get_User_Stack
  8230                                  	;MOV	WORD [SI+2],SYSINITVAR
  8231                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8232 00000F4A C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8233                                  	; 13/01/2024
  8234                                  	;;MOV	[SI+10H],SS
  8235                                  	;MOV	[SI+user_env.user_ES],SS
  8236                                  	;RETN
  8237 00000F4F EBF2                    	jmp	short getin_segm
  8238                                  
  8239                                  ;
  8240                                  ;----------------------------------------------------------------------------
  8241                                  ;
  8242                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8243                                  ;
  8244                                  ;	Return pointer to drive parameter table for default drive
  8245                                  ;
  8246                                  ;	ENTRY	none
  8247                                  ;	EXIT	(ds:bx) = DPB address
  8248                                  ;	USES	all
  8249                                  ;
  8250                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8251                                  ;
  8252                                  ;	Return pointer to a specified drive parameter table
  8253                                  ;
  8254                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8255                                  ;	EXIT	(al) = 0 iff ok
  8256                                  ;		  (ds:bx) = DPB address
  8257                                  ;		(al) = -1 if bad drive
  8258                                  ;	USES	all
  8259                                  ;
  8260                                  ;----------------------------------------------------------------------------
  8261                                  ;
  8262                                  
  8263                                  ; 15/05/2019 - Retro DOS v4.0
  8264                                  
  8265                                  _$GET_DEFAULT_DPB:
  8266 00000F51 B200                    	MOV	DL,0
  8267                                  _$GET_DPB:
  8268 00000F53 16                      	push	ss
  8269 00000F54 1F                      	pop	ds
  8270                                  
  8271 00000F55 88D0                    	MOV	AL,DL
  8272 00000F57 E8695A                  	call	GETTHISDRV		; Get CDS structure
  8273 00000F5A 7222                    	JC	short ISNODRV 		; no valid drive
  8274 00000F5C C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8275                                  	;;test	word [es:di+43h],8000h
  8276                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8277                                  	;test	byte [es:di+44h],80h
  8278 00000F60 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8279 00000F65 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8280 00000F67 E88903                  	call	ECritDisk
  8281 00000F6A E89346                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8282 00000F6D E89E03                  	call	LCritDisk
  8283 00000F70 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8284                                  					;   have.
  8285 00000F72 E80CF5                  	call	Get_User_Stack
  8286                                  	;mov	[si+2],bp
  8287 00000F75 896C02                  	MOV	[SI+user_env.user_BX],BP
  8288                                  	;mov	[si+0Eh],es
  8289 00000F78 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8290 00000F7B 30C0                    	XOR	AL,AL
  8291 00000F7D C3                      	retn
  8292                                  ISNODRV:
  8293 00000F7E B0FF                    	MOV	AL,-1
  8294 00000F80 C3                      	retn
  8295                                  
  8296                                  ;
  8297                                  ;----------------------------------------------------------------------------
  8298                                  ;
  8299                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8300                                  ;
  8301                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8302                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8303                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8304                                  ;
  8305                                  ;	ENTRY	none
  8306                                  ;	EXIT	none
  8307                                  ;	USES	all
  8308                                  ;
  8309                                  ;----------------------------------------------------------------------------
  8310                                  ;
  8311                                  
  8312                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8313                                  	; DOSCODE:4D94h
  8314                                  _$DISK_RESET:
  8315                                  	; 15/05/2019 - Retro DOS v4.0
  8316 00000F81 B0FF                    	mov	al,0FFh	; -1
  8317 00000F83 16                      	push	ss
  8318 00000F84 1F                      	pop	ds
  8319                                  	; 06/11/2022
  8320                                  	;MOV	AL,-1
  8321 00000F85 E86B03                  	call	ECritDisk
  8322                                  	; MSDOS 6.0
  8323                                  	;;or	word [DOS34_FLAG],4
  8324                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8325 00000F88 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8326 00000F8D E8E949                  	call	FLUSHBUF
  8327                                  	; MSDOS 6.0
  8328                                  	;and	word [DOS34_FLAG],0FFFBh
  8329                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8330                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8331                                  	; 15/12/2022
  8332 00000F90 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8333 00000F95 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8334                                  ;
  8335                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8336                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8337                                  ; let's do it.
  8338                                  ;
  8339                                  ; Invalidate 'last-buffer' used
  8340                                  ;
  8341 00000F9B BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8342 00000F9E 891E[2000]              	MOV	[LastBuffer+2],BX
  8343 00000FA2 891E[1E00]              	MOV	[LastBuffer],BX
  8344                                  
  8345                                  	; MSDOS 3.3 
  8346                                  	; IBMDOS.COM, Offset 1C66h
  8347                                  	;;;;
  8348                                  	;lds	si,[BUFFHEAD]
  8349                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8350                                  				; .buf_flags, AH = 0, reset/clear
  8351                                  ;DRST_1:
  8352                                  	;;mov	[si+4],ax
  8353                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8354                                  	;lds	si,[SI]
  8355                                  	;cmp	si,bx ; -1
  8356                                  	;je	short DRST_2
  8357                                  	;;mov	[si+4],ax
  8358                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8359                                  	;lds	si,[SI]
  8360                                  	;cmp	si,bx
  8361                                  	;jne	short DRST_1
  8362                                  	;;;;
  8363                                  ;DRST_2:
  8364 00000FA6 E86503                  	call	LCritDisk
  8365 00000FA9 B8FFFF                  	MOV	AX,-1
  8366                                  	; 07/12/2022
  8367                                  	;mov	ax,0FFFFh
  8368                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8369 00000FAC 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8370 00000FAD B82011                  	mov     ax,1120h
  8371 00000FB0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8372                                  			; DS = DOS CS
  8373                                  			; Return: CF clear (successful)
  8374 00000FB2 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8375                                  	
  8376 00000FB3 C3                      	retn
  8377                                  
  8378                                  	; 19/07/2018 - Retro DOS v3.0
  8379                                  
  8380                                  ;
  8381                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8382                                  ;
  8383                                  ;----------------------------------------------------------------------------
  8384                                  ;
  8385                                  ;**	$SetDPB - Create a DPB
  8386                                  ;
  8387                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8388                                  ;
  8389                                  ;	ENTRY	ES:BP Points to DPB
  8390                                  ;		DS:SI Points to BPB
  8391                                  ;	EXIT	DPB setup
  8392                                  ;	USES	ALL but BP, DS, ES
  8393                                  ;
  8394                                  ;----------------------------------------------------------------------------
  8395                                  ;
  8396                                  
  8397                                  ; 10/05/2019 - Retro DOS v4.0
  8398                                  
  8399                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8400                                  
  8401                                  ; MSDOS 6.0
  8402 00000FB4 0300                    word3:	dw	3			; M008 -- word value for divides
  8403                                  
  8404                                  ; 13/01/2024
  8405                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8406                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8407                                  
  8408                                  ;procedure   $SETDPB,NEAR
  8409                                  
  8410                                  _$SETDPB:
  8411 00000FB6 89EF                    	MOV	DI,BP
  8412                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8413                                  	; 13/01/2024
  8414 00000FB8 47                      	inc	di
  8415 00000FB9 47                      	inc	di
  8416 00000FBA AD                      	LODSW
  8417 00000FBB AB                      	STOSW				; dpb_sector_size
  8418                                  	; MSDOS 6.0
  8419                                  	;cmp	byte [si+3],0
  8420 00000FBC 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8421 00000FC0 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8422                                  	;mov	byte [es:di+4],0
  8423 00000FC2 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8424                                  	; 13/01/2024
  8425 00000FC7 89C3                    	mov	bx,ax
  8426 00000FC9 EB70                    	JMP	short setend			     ; NO		;AN000;
  8427                                  
  8428                                  yesfat: ; 10/08/2018
  8429 00000FCB 89C2                    	MOV	DX,AX
  8430 00000FCD AC                      	LODSB
  8431                                  	;DEC	AL
  8432                                  	; 17/12/2022
  8433 00000FCE 48                      	dec	ax
  8434 00000FCF AA                      	STOSB				; dpb_cluster_mask
  8435                                  	;INC	AL
  8436 00000FD0 40                      	inc	ax
  8437 00000FD1 30E4                    	XOR	AH,AH
  8438                                  LOG2LOOP:
  8439 00000FD3 A801                    	test	AL,1
  8440 00000FD5 7506                    	JNZ	short SAVLOG
  8441 00000FD7 FEC4                    	INC	AH
  8442 00000FD9 D0E8                    	SHR	AL,1
  8443 00000FDB EBF6                    	JMP	SHORT LOG2LOOP
  8444                                  SAVLOG:
  8445 00000FDD 88E0                    	MOV	AL,AH
  8446 00000FDF AA                      	STOSB				; dpb_cluster_shift
  8447 00000FE0 88C3                    	MOV	BL,AL
  8448 00000FE2 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8449 00000FE3 AC                      	LODSB
  8450 00000FE4 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8451                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8452                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8453 00000FE5 88C7                    	MOV	BH,AL
  8454 00000FE7 AD                      	LODSW
  8455 00000FE8 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8456 00000FE9 B105                    	MOV	CL,5
  8457 00000FEB D3EA                    	SHR	DX,CL			; Directory entries per sector
  8458 00000FED 48                      	DEC	AX
  8459 00000FEE 01D0                    	ADD	AX,DX			; Cause Round Up
  8460 00000FF0 89D1                    	MOV	CX,DX
  8461 00000FF2 31D2                    	XOR	DX,DX
  8462 00000FF4 F7F1                    	DIV	CX
  8463 00000FF6 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8464 00000FF8 47                      	INC	DI
  8465 00000FF9 47                      	INC	DI			; Skip dpb_first_sector
  8466 00000FFA A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8467 00000FFB AC                      	LODSB
  8468                                  	;mov	[es:bp+17h],al
  8469 00000FFC 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8470 00001000 AD                      	LODSW				; Number of sectors in a FAT
  8471                                  	
  8472                                  	;;;
  8473                                  	;MSDOS 3.3
  8474                                  	;
  8475                                  	;STOSB		; DPB.FAT_SIZE
  8476                                  	;MUL	BH
  8477                                  	
  8478                                  	;MSDOS 6.0
  8479                                  	;
  8480 00001001 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8481 00001002 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8482 00001004 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8483 00001006 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8484                                  	;;;
  8485                                  	
  8486                                  	;add	ax,[es:bp+6]
  8487 00001008 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8488 0000100C AB                      	STOSW				; dpb_dir_sector
  8489 0000100D 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8490                                  	;mov	[es:bp+0Bh],ax
  8491 0000100F 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8492                                  	
  8493                                  	; MSDOS 6.0
  8494 00001013 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8495                                  	;;cmp	word [es:bp+0Dh],0
  8496                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8497                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8498                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8499                                  	; 15/12/2022
  8500                                  	; 28/07/2019
  8501 00001015 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8502 00001019 09DB                    	or	bx,bx
  8503 0000101B 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8504                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8505                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8506                                  	
  8507                                  
  8508 0000101D 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8509                                  	;mov	bx,[si+8]
  8510 0000101F 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8511                                  	;mov	dx,[si+10]
  8512 00001022 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8513 00001025 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8514 00001027 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8515 0000102A 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8516 0000102C 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8517                                  rott:					;AN000;;F.C. >32mb
  8518 0000102E F8                      	CLC				;AN000;;F.C. >32mb
  8519 0000102F D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8520 00001031 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8521 00001033 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8522                                  norot:					;AN000;
  8523                                  	; 15/12/2022
  8524                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8525 00001035 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8526                                  normal_dpb:
  8527                                  	;;sub	ax,[es:bp+0Dh]
  8528                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8529                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8530                                  	; 15/12/2022
  8531                                  	; bx = [es:bp+DSKSIZ]
  8532                                  	;sub	ax,bx ; 28/07/2019
  8533                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8534                                  	; 15/12/2022
  8535 00001037 29C3                    	sub	bx,ax
  8536                                  	;NEG	AX			; Sectors in data area
  8537                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8538                                  	; 15/12/2022
  8539                                  	; CL = cluster shift
  8540                                  	; BX = number of data sectors 
  8541                                  	;SHR	AX,CL			; Div by sectors/cluster
  8542 00001039 D3EB                    	shr	bx,cl 
  8543                                  setend:
  8544                                  ;	M008 - CAS
  8545                                  ;
  8546                                  	; 15/12/2022
  8547 0000103B 43                      	inc	bx
  8548                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8549                                  ;
  8550                                  ;	There has been a bug in our fatsize calculation for so long
  8551                                  ;	  that we can't correct it now without causing some user to
  8552                                  ;	  experience data loss. There are even cases where allowing
  8553                                  ;	  the number of clusters to exceed the fats is the optimal
  8554                                  ;	  case -- where adding 2 more fat sectors would make the
  8555                                  ;	  data field smaller so that there's nothing to use the extra
  8556                                  ;	  fat sectors for.
  8557                                  ;
  8558                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8559                                  ;	  still report that there was a cluster left when the disk was
  8560                                  ;	  actually full. Very graceful failure for a corrupt system
  8561                                  ;	  configuration. There may be worse cases that were never
  8562                                  ;	  properly traced back to this bug. The problem cases only
  8563                                  ;	  occurred when partition sizes were very near FAT sector
  8564                                  ;	  rounding boundaries, which were rare cases.
  8565                                  ;
  8566                                  ;	Also, it's possible that some third-party partition program might
  8567                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8568                                  ;	  scheme. In this hypothetical case, the number of allocation
  8569                                  ;	  clusters which don't actually have FAT entries to represent
  8570                                  ;	  them might be larger and might create a more catastrophic
  8571                                  ;	  failure. So we'll provide the safeguard of limiting the
  8572                                  ;	  max_cluster to the amount that will fit in the FATs.
  8573                                  ;
  8574                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8575                                  
  8576                                  ;	make sure the number of fat sectors is actually enough to
  8577                                  ;	  hold that many clusters. otherwise, back the number of
  8578                                  ;	  clusters down
  8579                                  
  8580                                  	; 15/12/2022
  8581                                  	; bx = number of clusters
  8582                                  
  8583                                  	; 19/07/2018 - Retro DOS v3.0
  8584                                  	; MSDOS 6.0
  8585                                  	; 15/12/2022
  8586                                  	;mov	bx,ax			; remember calculated # clusters
  8587                                  
  8588                                  	; 01/08/2018 (MSDOS 3.3)
  8589                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8590                                  	;xor	ah,ah 
  8591                                  
  8592                                  	; 10/05/2019 - Retro DOS v4.0
  8593                                  	;mov	ax,[ES:BP+0Fh]
  8594 0000103C 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8595                                  
  8596                                  	;mul	word [es:bp+2]	
  8597 00001040 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8598 00001044 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8599 00001048 720D                    	jb	short setend_fat12
  8600 0000104A D1EA                    	shr	dx,1
  8601                                  
  8602                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8603                                  	; 15/12/2022
  8604                                  ;cs3 7/2/92
  8605 0000104C 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8606                                  					; than enough for the maximum FAT,
  8607                                  					; so go ahead and use the calculated
  8608                                  					; number of clusters.
  8609                                  ;cs3 7/2/92
  8610                                  
  8611 0000104E D1D8                    	rcr	ax,1			; find number of entries
  8612 00001050 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8613                                  ;					;  into 12-bit fatland?
  8614 00001053 7215                    	jb	short setend_faterr	; then go ahead and let the
  8615                                  ;					;  inconsistency pass through
  8616                                  ;					;  rather than lose data by
  8617                                  ;					;  correcting the fat type
  8618 00001055 EB0E                    	jmp	short setend_fat16
  8619                                  
  8620                                  setend_fat12:
  8621 00001057 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8622 00001059 11D2                    	adc	dx,dx
  8623                                  
  8624                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8625                                  ;cs3 7/2/92
  8626                                  	; 15/12/2022
  8627 0000105B 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8628 0000105E 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8629                                  					; here. Check for it and use
  8630                                  					; the calculated size in this case.
  8631                                  ;cs3 7/2/92
  8632                                  
  8633 00001060 2EF736[B40F]            	div	word [cs:word3]
  8634                                  
  8635                                  setend_fat16:
  8636 00001065 48                      	dec	ax			; limit at 1
  8637 00001066 39D8                    	cmp	ax,bx			; is fat big enough?
  8638 00001068 7602                    	jbe	short setend_fat	; use max value that'll fit
  8639                                  
  8640                                  setend_faterr:
  8641 0000106A 89D8                    	mov	ax,bx			; use calculated value
  8642                                  
  8643                                  setend_fat:
  8644                                  
  8645                                  ;	now ax = maximum legal cluster
  8646                                  
  8647                                  ;	end M008
  8648                                  
  8649                                  	;mov	[es:bp+0Dh], ax
  8650 0000106C 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8651                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8652                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8653 00001070 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8654                                  					; Init so first ALLOC starts at
  8655                                  					; begining of FAT
  8656                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8657                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8658 00001076 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8659                                  
  8660 0000107C C3                      	retn
  8661                                  
  8662                                  ;EndProc $SETDPB
  8663                                  
  8664                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8665                                  
  8666                                  ;
  8667                                  ;----------------------------------------------------------------------------
  8668                                  ;
  8669                                  ;**	$Dup_PDB
  8670                                  ;
  8671                                  ; Inputs:   DX is new segment address of process
  8672                                  ;	    SI is end of new allocation block
  8673                                  ;
  8674                                  ;----------------------------------------------------------------------------
  8675                                  ;
  8676                                  
  8677                                  _$DUP_PDB:
  8678                                  
  8679                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8680                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8681                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8682                                  
  8683                                  	; MSDOS 3.3
  8684                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8685                                  	;MOV	DS,[CS:CurrentPDB]
  8686                                  
  8687                                  	; 15/05/2019 - Retro DOS v4.0
  8688                                  	; MSDOS 6.0
  8689 0000107D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8690 00001082 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8691 00001087 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8692                                  
  8693 0000108B 56                      	PUSH	SI
  8694 0000108C EB0A                    	JMP	SHORT CreateCopy
  8695                                  
  8696                                  ;
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ;
  8699                                  ; Inputs:
  8700                                  ;	DX = Segment number of new base
  8701                                  ; Function:
  8702                                  ;	Set up program base and copy term and ^C from int area
  8703                                  ; Returns:
  8704                                  ;	None
  8705                                  ; Called at DOS init
  8706                                  ;
  8707                                  ;----------------------------------------------------------------------------
  8708                                  ;
  8709                                  
  8710                                  ; 15/05/2019 - Retro DOS v4.0
  8711                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8712                                  
  8713                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8714                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8715                                  
  8716                                  _$CREATE_PROCESS_DATA_BLOCK:
  8717                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8718 0000108E E8F0F3                  	CALL	Get_User_Stack
  8719                                  	;mov	ds,[si+14h]
  8720 00001091 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8721                                  	;push	word [2]
  8722 00001094 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8723                                  CreateCopy:
  8724 00001098 8EC2                    	MOV	ES,DX
  8725                                  
  8726 0000109A 31F6                    	XOR	SI,SI			; copy entire PDB
  8727 0000109C 89F7                    	MOV	DI,SI
  8728 0000109E B98000                  	MOV	CX,128
  8729 000010A1 F3A5                    	REP	MOVSW
  8730                                  
  8731                                  ; DOS 3.3 7/9/86
  8732                                  	;mov	cx,20
  8733                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8734                                  	; 15/12/2022
  8735 000010A3 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8736                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8737                                  	;mov	cx,FILPERPROC
  8738                                  
  8739                                  	;mov	di,18h
  8740 000010A5 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8741                                  	;;PUSH	DS ; * 15/05/2019
  8742                                  	;;lds	si,[34h]
  8743                                  	;LDS	SI,[PDB.JFN_Pointer]
  8744                                  	;REP	MOVSB
  8745                                  	;;POP	DS ; * 15/05/2019
  8746                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8747                                  	; 05/12/2022
  8748                                  	; (push ds then pop ds is not needed here!)
  8749                                  	;push	ds
  8750                                  	;lds	si,[34h]
  8751 000010A8 C5363400                	lds	si,[PDB.JFN_Pointer]
  8752 000010AC F3A4                    	rep	movsb
  8753                                  	;pop	ds
  8754                                  
  8755                                  ; DOS 3.3 7/9/86
  8756                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8757                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8758                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8759                                  
  8760 000010AE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8761                                  
  8762                                  	;;test	byte [cs:CreatePDB],0FFh
  8763                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8764                                  	; 17/12/2022
  8765 000010B3 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8766                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8767 000010B7 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8768                                  
  8769                                  ; Here we set up for a new process...
  8770                                  
  8771                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8772                                  	;POP	DS
  8773                                  
  8774                                  	; MSDOS 6.0
  8775                                  	;;getdseg <ds>			; ds -> dosdata
  8776                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8777                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8778                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8781                                  
  8782 000010B9 31DB                    	XOR	BX,BX			; dup all jfns
  8783                                  	;mov	cx,20
  8784                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8785                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8786                                  	; 15/12/2022
  8787 000010BB B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8788                                  
  8789                                  Create_dup_jfn:
  8790 000010BD 06                      	PUSH	ES ;**			; save new PDB
  8791 000010BE E8DE54                  	call	SFFromHandle		; get sf pointer
  8792 000010C1 B0FF                    	MOV	AL,-1			; unassigned JFN
  8793 000010C3 7224                    	JC	short CreateStash	; file was not really open
  8794                                  	;;test	word [es:di+5],1000h
  8795                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8796                                  	; 15/05/2019
  8797                                  	;test	byte [es:di+6],10h
  8798 000010C5 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8799 000010CA 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8800                                  
  8801                                  ; We do not inherit network file handles.
  8802                                  
  8803                                  	;mov	ah,[es:di+2]
  8804 000010CC 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8805                                  	;and	ah,0F0h
  8806 000010D0 80E4F0                  	AND	AH,SHARING_MASK
  8807                                  	;cmp	ah,70h
  8808 000010D3 80FC70                  	CMP	AH,SHARING_NET_FCB
  8809 000010D6 7411                    	jz	short CreateStash
  8810                                  
  8811                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8812                                  ; duplication operation.
  8813                                  
  8814 000010D8 893E[9E05]              	MOV	[THISSFT],DI
  8815 000010DC 8C06[A005]              	MOV	[THISSFT+2],ES
  8816 000010E0 E8D918                  	call	DOS_DUP 		; signal duplication
  8817                                  
  8818                                  ; get the old sfn for copy
  8819                                  
  8820 000010E3 E89C54                  	call	pJFNFromHandle		; ES:DI is jfn
  8821 000010E6 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8822                                  
  8823                                  ; Take AL (old sfn or -1) and stash it into the new position
  8824                                  
  8825                                  CreateStash:
  8826 000010E9 07                      	POP	ES ;**
  8827                                  	;mov	[es:bx+18h],al
  8828 000010EA 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8829 000010EE 43                      	INC	BX			; next jfn...
  8830 000010EF E2CC                    	LOOP	Create_dup_jfn
  8831                                  
  8832 000010F1 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8833                                  	; 06/11/2022
  8834                                  	;mov	[es:16h],bx
  8835 000010F5 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8836 000010FA 8C06[3003]              	MOV	[CurrentPDB],ES
  8837                                  	;MOV	DS,BX ; 28/07/2019
  8838                                  	; 07/12/2022
  8839                                  	;mov	ds,[cs:DosDSeg]
  8840                                  	; 15/12/2022
  8841                                  	; ds = [cs:DosDSeg]
  8842 000010FE C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8843                                  	;mov	ds,bx
  8844                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8845                                  	; 15/12/2022
  8846                                  	;mov	ds,bx
  8847                                  
  8848                                  ; end of new process create
  8849                                  
  8850                                  Create_PDB_cont:
  8851                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8852                                  
  8853                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8854                                  
  8855                                  	;; 28/07/2019
  8856                                  	;;push	ds
  8857                                  	;;mov	ds,[cs:DosDSeg]
  8858                                  	;mov	byte [CreatePDB],0
  8859                                  	;;pop	ds
  8860                                  
  8861                                  ; 05/12/2022
  8862                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8863                                  ;	; (push-pop ds is nonsense here! 
  8864                                  ;	;  but i am using same code with original MSDOS.SYS
  8865                                  ;	;  for address compatibility.)
  8866                                  ;	push	ds
  8867                                  ;	; ds = [cs:DosDSeg] !
  8868                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8869                                  ;	mov	byte [CreatePDB],0
  8870                                  ;	pop	ds
  8871                                  
  8872 00001103 58                      	POP	AX ;*
  8873                                  
  8874                                  	;entry	SETMEM
  8875                                  
  8876                                  	; 17/12/2022
  8877                                  	; cx = 0
  8878                                  
  8879                                  ;---------------------------------------------------------------------------
  8880                                  ; Inputs:
  8881                                  ;	AX = Size of memory in paragraphs
  8882                                  ;	DX = Segment
  8883                                  ; Function:
  8884                                  ;	Completely prepares a program base at the
  8885                                  ;	specified segment.
  8886                                  ; Called at DOS init
  8887                                  ; Outputs:
  8888                                  ;	DS = DX
  8889                                  ;	ES = DX
  8890                                  ;	[0] has INT int_abort
  8891                                  ;	[2] = First unavailable segment
  8892                                  ;	[5] to [9] form a long call to the entry point
  8893                                  ;	[10] to [13] have exit address (from int_terminate)
  8894                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8895                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8896                                  ; DX,BP unchanged. All other registers destroyed.
  8897                                  ;---------------------------------------------------------------------------
  8898                                  
  8899                                  SETMEM:
  8900                                  	;XOR	CX,CX
  8901                                  	; 17/12/2022
  8902                                  	; cx = 0
  8903 00001104 8ED9                    	MOV	DS,CX
  8904 00001106 8EC2                    	MOV	ES,DX
  8905                                  	;mov	si,88h
  8906 00001108 BE8800                  	MOV	SI,addr_int_terminate
  8907                                  	;mov	di,10 ; 0Ah
  8908 0000110B BF0A00                  	MOV	DI,SAVEXIT
  8909                                  	;MOV	CX,6
  8910                                  	; 15/12/2022
  8911 0000110E B106                    	mov	cl,6
  8912 00001110 F3A5                    	REP	MOVSW
  8913 00001112 26A30200                	MOV	[ES:2],AX
  8914 00001116 29D0                    	SUB	AX,DX
  8915 00001118 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8916 0000111B 7603                    	JBE	short HAVDIF
  8917 0000111D B8FF0F                  	MOV	AX,MAXDIF
  8918                                  HAVDIF:
  8919 00001120 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8920 00001123 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8921 00001126 29C3                    	SUB	BX,AX
  8922 00001128 B104                    	MOV	CL,4
  8923 0000112A D3E0                    	SHL	AX,CL
  8924 0000112C 8EDA                    	MOV	DS,DX
  8925                                  
  8926                                  	; (MSDOS 6.0 note)
  8927                                  	;
  8928                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8929                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8930                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8931                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8932                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8933                                  	; making this equvalence valid for this particular case. If however
  8934                                  	; there is less than 64K remaining the address in BX:AX will not 
  8935                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8936                                  	; into the PSP.
  8937                                  	;
  8938                                  	; Therefore for the case where there is less than 64K remaining in 
  8939                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8940                                  	; requirements will not work. Call 5, however will continue to work
  8941                                  	; for all cases.
  8942                                  	;
  8943                                  
  8944                                  	;mov	[6],ax
  8945                                  	;mov	[8],bx
  8946                                  
  8947 0000112E A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8948 00001131 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8949                                  
  8950                                  	; 06/05/2019 - Retro DOS v4.0
  8951 00001135 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8952                                  					;    memory left
  8953 00001138 740C                    	je	short addr_ok		; Y: the above calculated address is
  8954                                  					;    OK
  8955                                  					; N: 
  8956                                  
  8957 0000113A C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8958 00001140 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8959                                  addr_ok:
  8960                                  	;mov	word [0],20CDh
  8961 00001146 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8962                                  	;mov	byte [5],9Ah
  8963 0000114C C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8964                                  	;mov	word [50h],21CDh
  8965 00001151 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8966                                  	;mov	byte [52h],0CBh
  8967 00001157 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8968                                  	;mov	word [34h],18h
  8969 0000115C C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8970                                  	;mov	word [36h],ds
  8971 00001162 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8972                                  	;mov	word [32h],20
  8973 00001166 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8974                                  ;
  8975                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8976                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8977                                  ; particular SFT.  We perform this by requiring that the server link together
  8978                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8979                                  ; initialize this pointer.
  8980                                  ;
  8981                                   	;mov	word [38h],-1
  8982 0000116C C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8983                                  	;mov	word [3Ah],-1
  8984 00001172 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8985                                  
  8986                                  	; 06/05/2019
  8987                                  	; Set the real version number in the PSP - 5.00
  8988                                  
  8989                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8990                                  	; 07/12/2022
  8991 00001178 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8992                                  
  8993 0000117F C3                      	retn
  8994                                  
  8995                                  ; 29/04/2019 - Retro DOS v4.0
  8996                                  
  8997                                  ;BREAK <$GSetMediaID -- get set media ID>
  8998                                  
  8999                                  ;---------------------------------------------------------------------------
  9000                                  ; Inputs:
  9001                                  ;	BL= drive number as defined in IOCTL
  9002                                  ;	AL= 0 get media ID
  9003                                  ;	    1 set media ID
  9004                                  ;	DS:DX= buffer containing information
  9005                                  ;		DW  0  info level (set on input)
  9006                                  ;		DD  ?  serial #
  9007                                  ;		DB  11 dup(?)  volume id
  9008                                  ;		DB   8 dup(?)  file system type
  9009                                  ; Function:
  9010                                  ;	Get or set media ID
  9011                                  ; Returns:
  9012                                  ;	carry clear, DS:DX is filled
  9013                                  ;	carry set, error
  9014                                  ;---------------------------------------------------------------------------
  9015                                  
  9016                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9017                                  _$GSetMediaID:
  9018                                  	; RAWIO - GET_MEDIA_ID
  9019 00001180 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  9020 00001183 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  9021 00001185 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  9022                                  	;cmp	al,1		      ;AN000;MS.; set ?
  9023                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9024                                  	; 15/12/2022
  9025 00001187 FEC8                    	dec	al
  9026 00001189 7507                    	jnz	short errorfunc ; al > 1
  9027                                  	; RAWIO - SET_MEDIA_ID
  9028                                  	;mov	cx,0846h	      ;AN001;MS.;
  9029                                  	; 15/12/2022
  9030 0000118B B146                    	mov	cl,46h	; cx = 0846h 
  9031                                  doioctl:			      ;AN000;
  9032 0000118D B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9033                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9034                                  	;call	_$IOCTL
  9035                                  	;retn			      ;AN000;MS.;
  9036                                  	; 15/12/2022
  9037 0000118F E98F10                  	jmp	_$IOCTL
  9038                                  errorfunc:			      ;AN000;
  9039                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9040                                  	;mov	al,1
  9041 00001192 B001                    	mov	al,error_invalid_function
  9042 00001194 E9A9F4                  	jmp	SYS_RET_ERR
  9043                                  
  9044                                  ; 16/05/2019 - Retro DOS v4.0
  9045                                  
  9046                                  ;============================================================================
  9047                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9048                                  ;============================================================================
  9049                                  ; 20/07/2018 - Retro DOS v3.0
  9050                                  ; 29/04/2019 - Retro DOS v4.0
  9051                                  
  9052                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9053                                  ;----------------------------------------------------------------------------
  9054                                  ;
  9055                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9056                                  ;	     Strings of different lengths don't match.
  9057                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9058                                  ;   Outputs: Z if strings same, NZ if different
  9059                                  ;   Registers modified: NONE
  9060                                  ;----------------------------------------------------------------------------
  9061                                  
  9062                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9063                                  StrCmp:
  9064 00001197 56                      	push	si
  9065 00001198 57                      	push	di
  9066 00001199 50                      	push	ax
  9067                                  Cmplp:
  9068 0000119A AC                      	LODSB
  9069 0000119B E8D43D                  	call	UCase			; convert to upper case
  9070 0000119E E8263E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9071 000011A1 88C4                    	MOV	AH,AL
  9072 000011A3 268A05                  	MOV	AL,[ES:DI]
  9073 000011A6 47                      	INC	DI
  9074 000011A7 E8C83D                  	call	UCase			; convert to upper case
  9075 000011AA E81A3E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9076 000011AD 38C4                    	CMP	AH,AL
  9077 000011AF 7504                    	JNZ	short PopRet		; Strings dif
  9078                                  
  9079 000011B1 08C0                    	OR	AL,AL
  9080 000011B3 75E5                    	JNZ	short Cmplp		; More string
  9081                                  PopRet:
  9082 000011B5 58                      	pop	ax
  9083 000011B6 5F                      	pop	di
  9084 000011B7 5E                      	pop	si
  9085 000011B8 C3                      	retn
  9086                                  
  9087                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9088                                  ;----------------------------------------------------------------------------
  9089                                  ;
  9090                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9091                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9092                                  ;	characters.
  9093                                  ;
  9094                                  ;   Inputs:	DS:SI - pointer to source string
  9095                                  ;		ES:DI - pointer to destination string
  9096                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9097                                  ;		DS:SI point byte after nul byte at end of source string
  9098                                  ;   Registers modified: SI,DI
  9099                                  ;----------------------------------------------------------------------------
  9100                                  
  9101                                  StrCpy:
  9102 000011B9 50                      	push	ax
  9103                                  CPYLoop:
  9104 000011BA AC                      	LODSB
  9105 000011BB E8B43D                  	call	UCase			; convert to upper case
  9106 000011BE E8063E                  	call	PATHCHRCMP		; convert / to \ ;
  9107 000011C1 AA                      	STOSB
  9108                                  
  9109 000011C2 08C0                    	OR	AL,AL
  9110 000011C4 75F4                    	JNZ	short CPYLoop
  9111 000011C6 58                      	pop	ax
  9112 000011C7 C3                      	retn
  9113                                  
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ; Procedure Name : FStrCpy
  9116                                  ;----------------------------------------------------------------------------
  9117                                  
  9118                                  FStrCpy:
  9119 000011C8 50                      	push	ax
  9120                                  FCPYLoop:
  9121 000011C9 AC                      	LODSB
  9122 000011CA AA                      	STOSB
  9123 000011CB 08C0                    	OR	AL,AL
  9124 000011CD 75FA                    	JNZ	short FCPYLoop
  9125 000011CF 58                      	pop	ax
  9126 000011D0 C3                      	retn
  9127                                  
  9128                                  ; 20/07/2018 - Retro DOS v3.0
  9129                                  ;----------------------------------------------------------------------------
  9130                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9131                                  ;----------------------------------------------------------------------------
  9132                                  ;
  9133                                  ;UCase:	
  9134                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9135                                  ;	retn
  9136                                  
  9137                                  ;Break <StrLen - compute length of string ES:DI>
  9138                                  ;----------------------------------------------------------------------------
  9139                                  ;**	StrLen - Compute Length of String
  9140                                  ;
  9141                                  ;	StrLen computes the length of a string, including the trailing 00
  9142                                  ;
  9143                                  ;	ENTRY	(es:di) = address of string
  9144                                  ;	EXIT	(cx) = size of string
  9145                                  ;	USES	cx, flags
  9146                                  ;----------------------------------------------------------------------------
  9147                                  
  9148                                  StrLen:
  9149 000011D1 57                      	push	di
  9150 000011D2 50                      	push	ax
  9151                                  	;MOV	CX,-1
  9152 000011D3 B9FFFF                  	mov	cx,65535
  9153 000011D6 30C0                    	XOR	AL,AL
  9154 000011D8 F2AE                    	REPNE	SCASB
  9155 000011DA F7D1                    	NOT	CX
  9156 000011DC 58                      	pop	ax
  9157 000011DD 5F                      	pop	di
  9158 000011DE C3                      	retn
  9159                                  
  9160                                  ;----------------------------------------------------------------------------
  9161                                  ;**	DStrLen - Compute Length of String
  9162                                  ;
  9163                                  ;	ENTRY	(ds:si) = address of string
  9164                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9165                                  ;	USES	cx, flags
  9166                                  ;----------------------------------------------------------------------------
  9167                                  
  9168                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9169 000011DF E80300                  	CALL	XCHGP
  9170 000011E2 E8ECFF                  	CALL	StrLen
  9171                                  	;CALL	XCHGP
  9172                                  	;retn
  9173                                  	; 18/12/2022
  9174                                  	;jmp	short XCHGP
  9175                                  
  9176                                  ;----------------------------------------------------------------------------
  9177                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9178                                  ;
  9179                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9180                                  ;
  9181                                  ;	ENTRY	none
  9182                                  ;	EXIT	pairs exchanged
  9183                                  ;	USES	SI, DI, DS, ES
  9184                                  ;----------------------------------------------------------------------------
  9185                                  
  9186                                  XCHGP:
  9187 000011E5 1E                      	push	ds
  9188 000011E6 06                      	push	es
  9189 000011E7 1F                      	pop	ds
  9190 000011E8 07                      	pop	es
  9191 000011E9 87F7                    	XCHG	SI,DI
  9192                                  xchgp_retn:
  9193 000011EB C3                      	retn
  9194                                  
  9195                                  ;Break	<Idle - wait for a specified amount of time>
  9196                                  ;----------------------------------------------------------------------------
  9197                                  ;
  9198                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9199                                  ;   	   we spin until RetryLoop is exhausted.
  9200                                  ;
  9201                                  ;   Inputs:	RetryLoop is the number of times we spin
  9202                                  ;   Outputs:	Wait
  9203                                  ;   Registers modified: none
  9204                                  ;----------------------------------------------------------------------------
  9205                                  
  9206                                  Idle:
  9207                                  	;test	byte [SS:FSHARING],0FFh
  9208 000011EC 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9209                                  	;retnz
  9210 000011F2 75F7                    	jnz	short xchgp_retn
  9211                                  	;SAVE	<CX>
  9212 000011F4 51                      	push	cx
  9213 000011F5 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9214 000011FA E308                    	JCXZ	Idle3
  9215                                  Idle1:	
  9216 000011FC 51                      	PUSH	CX
  9217 000011FD 31C9                    	XOR	CX,CX
  9218                                  Idle2:	
  9219 000011FF E2FE                    	LOOP	Idle2
  9220 00001201 59                      	POP	CX
  9221 00001202 E2F8                    	LOOP	Idle1
  9222                                  Idle3:	
  9223                                  	;RESTORE <CX>
  9224 00001204 59                      	pop	cx
  9225 00001205 C3                      	retn
  9226                                  
  9227                                  ;Break	<TableDispatch - dispatch to a table>
  9228                                  ;----------------------------------------------------------------------------
  9229                                  ;
  9230                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9231                                  ;   routine. Preserve all input registers to the routine.
  9232                                  ;
  9233                                  ;   Inputs:	Push	return address
  9234                                  ;		Push	Table address
  9235                                  ;		Push	index (byte)
  9236                                  ;   Outputs:	appropriate routine gets jumped to.
  9237                                  ;		return indicates invalid index
  9238                                  ;   Registers modified: none.
  9239                                  ;----------------------------------------------------------------------------
  9240                                  
  9241                                  struc TFrame	 ; TableFrame
  9242 00000000 ????                    .OldBP:	 resw 1  ; 0
  9243 00000002 ????                    .OldRet: resw 1  ; 2
  9244 00000004 ??                      .Index:	 resb 1  ; 4
  9245 00000005 ??                      .Pad:	 resb 1  ; 5  
  9246 00000006 ????                    .Tab:	 resw 1  ; 6
  9247 00000008 ????                    .NewRet: resw 1  ; 8
  9248                                  endstruc
  9249                                  
  9250                                  TableDispatch:
  9251 00001206 55                      	PUSH	BP
  9252 00001207 89E5                    	MOV	BP,SP
  9253 00001209 53                      	PUSH	BX			; save BX
  9254                                  	;mov	bx,[bp+6]
  9255 0000120A 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9256 0000120D 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9257                                  	;cmp	[bp+4],bl
  9258 00001210 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9259 00001213 7317                    	JAE	short TableError	; yes
  9260                                  	;mov	bl,[bp+4]
  9261 00001215 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9262 00001218 30FF                    	XOR	BH,BH			; convert to word
  9263 0000121A D1E3                    	SHL	BX,1			; convert to word pointer
  9264 0000121C 43                      	INC	BX			; point past first length byte
  9265                                  	; 17/08/2018
  9266                                  	;add	bx,[bp+6]
  9267 0000121D 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9268 00001220 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9269                                  	;mov	[bp+6],bx
  9270 00001223 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9271 00001226 5B                      	POP	BX			; restore BX
  9272 00001227 5D                      	POP	BP			; restore BP
  9273 00001228 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9274 0000122B C3                      	retn				; do operation
  9275                                  TableError:
  9276 0000122C 5B                      	POP	BX			; restore BX
  9277 0000122D 5D                      	POP	BP			; restore BP
  9278 0000122E C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9279                                  
  9280                                  ;Break	<TestNet - determine if a CDS is for the network>
  9281                                  ;----------------------------------------------------------------------------
  9282                                  ;
  9283                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9284                                  ;	network CDS. This will handle NULL cds also.
  9285                                  ;
  9286                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9287                                  ;   Outputs:	ES:DI = ThisCDS
  9288                                  ;		carry Set => network
  9289                                  ;		carry Clear => local
  9290                                  ;   Registers modified: none.
  9291                                  ;----------------------------------------------------------------------------
  9292                                  
  9293                                  TestNet:
  9294                                  	;LES	DI,[CS:THISCDS]
  9295                                  
  9296                                  	; 16/05/2019 - Retro DOS v4.0
  9297 00001231 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9298 00001236 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9299 0000123B 83FFFF                  	CMP	DI,-1
  9300 0000123E 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9301                                  	;;test	word [es:di+43h],8000h
  9302                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9303                                  	;test	byte [es:di+44h],80h
  9304 00001240 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9305 00001245 7501                    	JNZ	short CMCRet		; jump has carry clear
  9306 00001247 C3                      	retn				; carry is clear
  9307                                  CMCRet: 
  9308 00001248 F5                      	CMC
  9309 00001249 C3                      	retn
  9310                                  
  9311                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9312                                  ;----------------------------------------------------------------------------
  9313                                  ;
  9314                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9315                                  ;	network file.
  9316                                  ;
  9317                                  ;   Inputs:	ES:DI point to SFT
  9318                                  ;   Outputs:	Zero set if not network sft
  9319                                  ;		zero reset otherwise
  9320                                  ;		Carry CLEAR!!!
  9321                                  ;   Registers modified: none.
  9322                                  ;----------------------------------------------------------------------------
  9323                                  
  9324                                  IsSFTNet:
  9325                                  	;;test	word [es:di+5],8000h
  9326                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9327                                  	; 16/05/2019 
  9328                                  	;test	byte [es:di+6],80h
  9329 0000124A 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9330 0000124F C3                      	retn
  9331                                  
  9332                                  ;Break	<FastInit - Initialize FastTable entries >
  9333                                  ;----------------------------------------------------------------------------
  9334                                  ;   DOS 4.00   2/9/87
  9335                                  ;   FastInit  - initialize the FASTXXX routine entry
  9336                                  ;		  in the FastTable
  9337                                  ;
  9338                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9339                                  ;		DS:SI = address of FASTXXX routine entry
  9340                                  ;		   SI = -1 for query only
  9341                                  ;   Outputs:	Carry flag clear, if success
  9342                                  ;		Carry flag set,   if failure
  9343                                  ;
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  ;Procedure FastInit,NEAR
  9348                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9349                                  
  9350                                  ;	; MSDOS 3.3
  9351                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9352                                  ;FastInit:
  9353                                  ;	mov	di,FastTable ; FastOpenTable
  9354                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9355                                  ;	mov	bx,cs			; get DOS segment
  9356                                  ;	cmp	ax,bx			; first time installed ?	
  9357                                  ;	je	short ok_install	; yes
  9358                                  ;	stc				; set carry
  9359                                  ;	retn				; (cf=1 means) already installed !
  9360                                  ;
  9361                                  ;ok_install:
  9362                                  ;	mov	bx,FastTable ; FastOpenTable
  9363                                  ;	mov	cx,ds
  9364                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9365                                  ;	mov	[cs:bx+4],cx
  9366                                  ;	mov	[cs:bx+2],si
  9367                                  ;	retn
  9368                                  
  9369                                  ; 16/05/2019 - Retro DOS v4.0
  9370                                  
  9371                                  FastInit:
  9372                                  	; MSDOS 6.0
  9373                                  	;hkn; set up es to dosdataseg.
  9374 00001250 06                      	push	es
  9375                                  	;getdseg <es>			; es -> dosdata
  9376 00001251 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9377                                  
  9378                                  	;hkn; FastTable is in DOSDATA
  9379 00001256 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9380 00001259 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9381 0000125A 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9382 0000125C D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9383 0000125E D1E3                    	SHL	BX,1			;AN000;FO.
  9384 00001260 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9385 00001262 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9386                                  fcheck: 				;AN000;
  9387 00001266 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9388 00001268 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9389 0000126A 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9390 0000126C 09C0                    	OR	AX,AX			;AN000;FO.;
  9391                                  	;JZ	short ok_install	;AN000;FO.;
  9392                                  	;STC				;AN000;FO.;; already installed !
  9393                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9394                                  	; 14/01/2024
  9395 0000126E F9                      	stc
  9396 0000126F 7517                    	jnz	short FSret
  9397                                  ok_install:				;AN000;
  9398 00001271 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9399 00001274 7412                    	JZ	short FSret		;AN000;FO.; yes
  9400 00001276 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9401 00001278 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9402 0000127C 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9403                                  
  9404                                  ;hkn; FastFlg moved to DOSDATA
  9405 0000127F BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9406 00001282 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9407                                  	;or	byte [es:di],80h
  9408 00001284 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9409                                  FSret:					;AN000;
  9410 00001288 07                      	pop	es
  9411 00001289 C3                      	retn				;AN000;FO.
  9412                                  
  9413                                  ;EndProc FastInit
  9414                                  
  9415                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9416                                  ;----------------------------------------------------------------------------
  9417                                  ;   DOS 3.3   6/10/86
  9418                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9419                                  ;
  9420                                  ;   Inputs:	None
  9421                                  ;   Outputs:	AX = -1 and carry flag set
  9422                                  ;
  9423                                  ;   Registers modified: none.
  9424                                  ;----------------------------------------------------------------------------
  9425                                  
  9426                                  FastRet:
  9427                                  	;mov	ax,-1
  9428                                  	;stc
  9429                                  	;retf
  9430 0000128A F9                      	STC
  9431 0000128B 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9432 0000128D CB                      	RETF
  9433                                  
  9434                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9435                                  ;----------------------------------------------------------------------------
  9436                                  ;   DOS 3.3   6/10/86
  9437                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9438                                  ;
  9439                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9440                                  ;   Outputs:	same output as $OPEN
  9441                                  ;
  9442                                  ;----------------------------------------------------------------------------
  9443                                  
  9444                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9445                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9446                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9447                                  
  9448                                  NLS_OPEN:
  9449                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9450                                  ;	MOV	BYTE [CPSWFLAG],0
  9451                                  ;	PUSH	BX		 ; save current state
  9452                                  
  9453 0000128E 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9454 00001290 E8765B                  	call	_$OPEN
  9455                                  
  9456                                  ;	POP	BX		 ; restore current state
  9457                                  ;	MOV	[CPSWFLAG],BL
  9458                                  
  9459 00001293 C3                      	RETN
  9460                                  
  9461                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9462                                  ;----------------------------------------------------------------------------
  9463                                  ;   DOS 3.3   6/10/86
  9464                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9465                                  ;
  9466                                  ;   Inputs:	BP = open mode
  9467                                  ;   Outputs:	same output as $LSEEK
  9468                                  ;
  9469                                  ;----------------------------------------------------------------------------
  9470                                  
  9471                                  ; 16/05/2019 - Retro DOS v4.0
  9472                                  
  9473                                  NLS_LSEEK:
  9474 00001294 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9475 00001299 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9476 0000129E E81000                  	CALL	Fake_User_Stack
  9477 000012A1 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9478 000012A3 E81055                  	call	_$LSEEK
  9479 000012A6 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9480 000012AB 368F06[8405]            	POP	word [SS:USER_SP]
  9481 000012B0 C3                      	RETN
  9482                                  
  9483                                  ;Break	<Fake_User_Stack - save user stack>
  9484                                  ;----------------------------------------------------------------------------
  9485                                  ;   DOS 3.3   6/10/86
  9486                                  ;   Fake_User_Stack - save user stack pointer
  9487                                  ;
  9488                                  ;----------------------------------------------------------------------------
  9489                                  
  9490                                  Fake_User_Stack:
  9491 000012B1 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9492 000012B5 36A3[8405]              	MOV	[SS:USER_SP],AX
  9493 000012B9 8CD0                    	MOV	AX,SS
  9494 000012BB 36A3[8605]              	MOV	[SS:USER_SS],AX
  9495 000012BF C3                      	RETN
  9496                                  
  9497                                  ;Break	<GetDevList - get device header list pointer>
  9498                                  ;----------------------------------------------------------------------------
  9499                                  ;   DOS 3.3   7/25/86
  9500                                  ;   GetDevList - get device header list pointer
  9501                                  ;
  9502                                  ;   Output: AX:BX points to the device header list
  9503                                  ;----------------------------------------------------------------------------
  9504                                  
  9505                                  GetDevList:
  9506                                  	; 16/05/2019 - Retro DOS v4.0
  9507 000012C0 BE[280D]                	MOV	SI,SysInitTable
  9508 000012C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9509 000012C8 C534                    	LDS	SI,[SI]
  9510                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9511 000012CA 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9512                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9513 000012CD 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9514 000012D0 C3                      	RETN
  9515                                  
  9516                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9517                                  ;----------------------------------------------------------------------------
  9518                                  ;   DOS 3.3   7/25/86
  9519                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9520                                  ;
  9521                                  ;   Inputs:	BP = function code 0CH
  9522                                  ;   Outputs:	same output as generic $IOCTL
  9523                                  ;
  9524                                  ;----------------------------------------------------------------------------
  9525                                  
  9526                                  NLS_IOCTL:
  9527                                  	; 16/05/2019 - Retro DOS v4.0
  9528 000012D1 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9529 000012D6 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9530 000012DB E8D3FF                  	CALL	Fake_User_Stack
  9531 000012DE 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9532 000012E0 E83E0F                  	call	_$IOCTL
  9533 000012E3 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9534 000012E8 368F06[8405]            	POP	word [SS:USER_SP]
  9535 000012ED C3                      	RETN
  9536                                  
  9537                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9538                                  ;----------------------------------------------------------------------------
  9539                                  ;   DOS 3.3   7/25/86
  9540                                  ;   NLS_GETEXT	-
  9541                                  ;
  9542                                  ;   Inputs:	none
  9543                                  ;   Outputs:	AX = extended error
  9544                                  ;
  9545                                  ;----------------------------------------------------------------------------
  9546                                  
  9547                                  NLS_GETEXT:
  9548                                  	; 16/05/2019 - Retro DOS v4.0
  9549 000012EE 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9550                                  	; 23/09/2023
  9551                                  MSG_RETRIEVAL:
  9552 000012F2 C3                      	RETN
  9553                                  
  9554                                  ; 29/04/2019 - Retro DOS v4.0
  9555                                  
  9556                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9557                                  
  9558                                  ;----------------------------------------------------------------------------
  9559                                  ;   DOS 4.00
  9560                                  ;
  9561                                  ;   Inputs:	DL=0 get extended error message addr
  9562                                  ;		  =1 set extended error message addr
  9563                                  ;		  =2 get parser error message addr
  9564                                  ;		  =3 set parser error message addr
  9565                                  ;		  =4 get critical error message addr
  9566                                  ;		  =5 set critical error message addr
  9567                                  ;		  =6 get file system error message addr
  9568                                  ;		  =7 set file system error message addr
  9569                                  ;		  =8 get address for code reduction
  9570                                  ;		  =9 set address for code reduction
  9571                                  ;   Function:	get/set message address
  9572                                  ;   Outputs:	ES:DI points to addr when get
  9573                                  ;----------------------------------------------------------------------------
  9574                                  
  9575                                  ;Procedure MSG_RETRIEVAL,NEAR
  9576                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9577                                  
  9578                                  ; 23/09/2023
  9579                                  ;MSG_RETRIEVAL:
  9580                                  
  9581                                  ;;	NOTE:  This function lives in command.com resident code now.
  9582                                  ;;	If the int 2F ever gets this far, we'll return registers
  9583                                  ;;	unchanged, which produces the same result as before, if
  9584                                  ;;	command.com wasn't present (and therefore no messages available).
  9585                                  ;;
  9586                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9587                                  ;;	No_Op zeroes AL.
  9588                                  ;;
  9589                                  ;;;hkn; set up ds to point to DOSDATA
  9590                                  ;;	push	ds
  9591                                  ;;	getdseg	<ds>			; ds -> dosdata
  9592                                  ;;
  9593                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9594                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9595                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9596                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9597                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9598                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9599                                  ;;	DEC	AL		    ;AN000;;MS.
  9600                                  ;;toget:				    ;AN000;
  9601                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9602                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9603                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9604                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9605                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9606                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9607                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9608                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9609                                  ;;getget: 				     ;AN000;
  9610                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9611                                  ;;MSGret: 				     ;AN000;
  9612                                  ;;	POP	SI			     ;AN000;;MS.
  9613                                  ;;	POP	AX			     ;AN000;;MS.
  9614                                  ;;
  9615                                  ;;	pop	ds
  9616                                  
  9617                                  ;	return				     ;AN000;;MS. exit
  9618                                  
  9619                                  ; 23/09/2023
  9620                                  ;	retn	; 29/04/2019
  9621                                  
  9622                                  ;============================================================================
  9623                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9624                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9625                                  ;============================================================================
  9626                                  ; 20/07/2018 - Retro DOS v3.0
  9627                                  
  9628                                  ;	; MSDOS 3.3
  9629                                  ;	; 08/08/2018 - Retro DOS v3.0
  9630                                  ;ECritMEM:
  9631                                  ;ECritSFT:
  9632                                  ;	;
  9633                                  ;ECritDisk:
  9634                                  ;	retn
  9635                                  ;	;push	ax
  9636                                  ;	
  9637                                  ;	mov	ax,8001h
  9638                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9639                                  ;			; AL = critical section number (00h-0Fh)
  9640                                  ;	pop	ax
  9641                                  ;	retn
  9642                                  ;
  9643                                  ;	; MSDOS 3.3
  9644                                  ;	; 08/08/2018 - Retro DOS v3.0
  9645                                  ;LCritMEM:
  9646                                  ;LCritSFT:
  9647                                  ;	;
  9648                                  ;LCritDisk:
  9649                                  ;	retn
  9650                                  ;	;push	ax
  9651                                  ;	
  9652                                  ;	mov	ax,8101h
  9653                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9654                                  ;			; AL = critical section number (00h-0Fh)
  9655                                  ;	pop	ax
  9656                                  ;	retn
  9657                                  ;
  9658                                  ;ECritDevice:
  9659                                  ;	retn
  9660                                  ;	;push	ax
  9661                                  ;	
  9662                                  ;	mov	ax,8002h
  9663                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9664                                  ;			; AL = critical section number (00h-0Fh)
  9665                                  ;	pop	ax
  9666                                  ;	retn
  9667                                  ;
  9668                                  ;LCritDevice:
  9669                                  ;	retn
  9670                                  ;	;push	ax
  9671                                  ;	
  9672                                  ;	mov	ax,8102h
  9673                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9674                                  ;			; AL = critical section number (00h-0Fh)
  9675                                  ;	pop	ax
  9676                                  ;	retn
  9677                                  
  9678                                  ;============================================================================
  9679                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9680                                  ;============================================================================
  9681                                  ; 12/05/2019 - Retro DOS v4.0
  9682                                  
  9683                                  ; Critical Section Routines
  9684                                  
  9685                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9686                                  
  9687                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9688                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9689                                  
  9690                                  ; ---------------------------------------------------------------------------
  9691                                  ; Each handler must leave everything untouched; including flags!
  9692                                  ;
  9693                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9694                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9695                                  ; ---------------------------------------------------------------------------
  9696                                  
  9697                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9698                                  ; ---------------------------------------------------------------------------
  9699                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9700                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9701                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9702                                  ; ---------------------------------------------------------------------------
  9703                                  
  9704                                  ;%macro POPFF 0
  9705                                  ;	jmp	$+3
  9706                                  ;	iret
  9707                                  ;	push	cs
  9708                                  ;	call	$-2
  9709                                  ;%endmacro
  9710                                  
  9711                                  ; ---------------------------
  9712                                  
  9713                                  ;Procedure  ECritDisk,NEAR
  9714                                  	;public  ECritMEM
  9715                                  	;public  ECritSFT
  9716                                  ECritMEM:
  9717                                  ECritSFT:
  9718                                  ;
  9719                                  ECritDisk:
  9720                                  
  9721                                  ;SR; Check if critical section is to be entered
  9722                                  
  9723 000012F3 9C                      	pushf
  9724 000012F4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9725 000012FA 740D                    	jz	short ECritDisk_2
  9726                                  
  9727                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9728                                  ;	;popff  ; * (macro)
  9729                                  ;	jmp	short ECritDisk_1 ; *
  9730                                  ;
  9731                                  ;ECritDisk_iret: ; *
  9732                                  ;	iret ; *
  9733                                  
  9734                                  	; 16/12/2022
  9735                                  	; 13/11/2022
  9736                                  	;jmp	short ECritDisk_1
  9737                                  	; 06/11/2022
  9738                                  ;ECritDisk_iret:
  9739                                  ;	iret	
  9740                                  
  9741                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9742                                  ECritDisk_1:
  9743 000012FC 0E                      	push	cs ; *
  9744 000012FD E80800                  	call	ECritDisk_iret ; *		
  9745                                  	
  9746                                  ECritDisk_0:
  9747 00001300 50                      	PUSH    AX
  9748                                  	;MOV	AX,8000h+critDisk
  9749                                  	;INT	int_IBM
  9750 00001301 B80180                  	mov	ax,8001h
  9751 00001304 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9752                                  			; AL = critical section number (00h-0Fh)
  9753 00001306 58                      	POP     AX
  9754 00001307 C3                      	retn
  9755                                  
  9756                                  	; 16/12/2022
  9757                                  	; 13/11/2022
  9758                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9759                                  LCritDisk_iret: 
  9760 00001308 CF                      	iret
  9761                                  
  9762                                  ECritDisk_2:
  9763                                  	;;popff ; *
  9764                                  	;;retn
  9765                                  ;	jmp	short ECritDisk_3 ; *
  9766                                  ;ECritDisk_iret2: ; *
  9767                                  ;	iret
  9768                                  	
  9769                                  	; 16/12/2022
  9770                                  	; 13/11/2022
  9771                                  	;jmp	short ECritDisk_3
  9772                                  ;ECritDisk_iret2:
  9773                                  	;iret
  9774                                  
  9775                                  ECritDisk_3:
  9776 00001309 0E                      	push    cs ; *
  9777                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9778                                  	;call	ECritDisk_iret2 ; *
  9779                                  	;retn
  9780                                  	; 16/12/2022
  9781 0000130A E8FBFF                  	call	ECritDisk_iret
  9782 0000130D C3                      	retn
  9783                                  
  9784                                  ;EndProc ECritDisk
  9785                                  
  9786                                  ; ---------------------------
  9787                                  
  9788                                  ;Procedure   LCritDisk,NEAR
  9789                                  	;public  LCritMEM
  9790                                  	;public  LCritSFT
  9791                                  LCritMEM:
  9792                                  LCritSFT:
  9793                                  ;
  9794                                  LCritDisk:
  9795                                  
  9796                                  ;SR; Check if critical section is to be entered
  9797                                  
  9798 0000130E 9C                      	pushf
  9799 0000130F 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9800 00001315 740C                    	jz	short LCritDisk_2
  9801                                  	;popff  ; * (macro)
  9802                                  ;	jmp	short LCritDisk_1 ; *
  9803                                  ;
  9804                                  ;LCritDisk_iret: ; *
  9805                                  ;	iret ; *
  9806                                  
  9807                                  	; 16/12/2022
  9808                                  	; 13/11/2022
  9809                                  	;jmp	short LCritDisk_1
  9810                                  ;LCritDisk_iret:
  9811                                  	;iret
  9812                                  
  9813                                  LCritDisk_1:
  9814 00001317 0E                      	push	cs ; *
  9815 00001318 E8EDFF                  	call	LCritDisk_iret ; *		
  9816                                  	
  9817                                  LCritDisk_0:
  9818 0000131B 50                      	PUSH	AX
  9819                                  	;MOV	AX,8100h+critDisk
  9820                                  	;INT	int_IBM
  9821 0000131C B80181                  	mov	ax,8101h
  9822 0000131F CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9823                                  			; AL = critical section number (00h-0Fh)
  9824 00001321 58                      	POP	AX
  9825 00001322 C3                      	retn
  9826                                  
  9827                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9828                                  ;	iret
  9829                                  
  9830                                  LCritDisk_2:
  9831                                  	;;popff ; *
  9832                                  	;;retn
  9833                                  ;	jmp	short LCritDisk_3 ; *
  9834                                  ;LCritDisk_iret2: ; *
  9835                                  ;	iret
  9836                                  
  9837                                  	; 16/12/2022
  9838                                  	; 13/11/2022
  9839                                  	;jmp	short LCritDisk_3
  9840                                  ;LCritDisk_iret2:
  9841                                  	;iret
  9842                                  
  9843                                  LCritDisk_3:
  9844 00001323 0E                      	push    cs ; *
  9845                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9846                                  	;call	LCritDisk_iret2 ; *
  9847                                  	;retn
  9848                                  	; 16/12/2022
  9849 00001324 E8E1FF                  	call	LCritDisk_iret
  9850 00001327 C3                      	retn
  9851                                  
  9852                                  ;EndProc LCritDisk
  9853                                  
  9854                                  ; ---------------------------
  9855                                  
  9856                                  ;Procedure   ECritDevice,NEAR
  9857                                  
  9858                                  ECritDevice:
  9859                                  
  9860                                  ;SR; Check if critical section is to be entered
  9861                                  
  9862 00001328 9C                      	pushf
  9863 00001329 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9864 0000132F 740D                    	jz	short ECritDevice_2
  9865                                  	;popff  ; * (macro)
  9866                                  ;	jmp	short ECritDevice_1 ; *
  9867                                  ;
  9868                                  ;ECritDevice_iret: ; *
  9869                                  ;	iret ; *
  9870                                  
  9871                                  	; 16/12/2022	
  9872                                  	; 13/11/2022
  9873                                  	;jmp	short ECritDevice_1
  9874                                  ;ECritDevice_iret:
  9875                                  	;iret
  9876                                  
  9877                                  ECritDevice_1:
  9878 00001331 0E                      	push	cs ; *
  9879 00001332 E80800                  	call	ECritDevice_iret ; *		
  9880                                  	
  9881                                  ECritDevice_0:
  9882 00001335 50                      	PUSH	AX
  9883                                  	;MOV	AX,8000h+critDevice
  9884                                  	;INT	int_IBM
  9885 00001336 B80280                  	mov	ax,8002h
  9886 00001339 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9887                                  			; AL = critical section number (00h-0Fh)
  9888 0000133B 58                      	POP     AX
  9889 0000133C C3                      	retn
  9890                                  
  9891                                  	; 16/12/2022
  9892                                  	; 06/12/2022
  9893                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9894                                  LCritDevice_iret: 
  9895 0000133D CF                      	iret
  9896                                  
  9897                                  ECritDevice_2:
  9898                                  	;;popff ; *
  9899                                  	;;retn
  9900                                  ;	jmp	short ECritDevice_3 ; *
  9901                                  ;ECritDevice_iret2: ; *
  9902                                  ;	iret
  9903                                  
  9904                                  	; 16/12/2022
  9905                                  	; 13/11/2022
  9906                                  	;jmp	short ECritDevice_3
  9907                                  ;ECritDevice_iret2:
  9908                                  	;iret
  9909                                  
  9910                                  ECritDevice_3:
  9911 0000133E 0E                      	push    cs ; *
  9912                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9913                                  	;call	ECritDevice_iret2 ; *
  9914                                  	;retn
  9915                                  	; 16/12/2022
  9916 0000133F E8FBFF                  	call	ECritDevice_iret
  9917 00001342 C3                      	retn
  9918                                  
  9919                                  ;EndProc ECritDevice
  9920                                  
  9921                                  ; ---------------------------
  9922                                  
  9923                                  ;Procedure   LCritDevice,NEAR
  9924                                  
  9925                                  LCritDevice:
  9926                                  
  9927                                  ;SR; Check if critical section is to be entered
  9928                                  
  9929 00001343 9C                      	pushf
  9930 00001344 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9931 0000134A 740C                    	jz	short LCritDevice_2
  9932                                  	;popff  ; * (macro)
  9933                                  ;	jmp	short LCritDevice_1 ; *
  9934                                  ;
  9935                                  ;LCritDevice_iret: ; *
  9936                                  ;	iret ; *
  9937                                  
  9938                                  	; 16/12/2022
  9939                                  	; 13/11/2022
  9940                                  	;jmp	short LCritDevice_1
  9941                                  ;LCritDevice_iret:
  9942                                  	;iret
  9943                                  
  9944                                  LCritDevice_1:
  9945 0000134C 0E                      	push	cs ; *
  9946 0000134D E8EDFF                  	call	LCritDevice_iret ; *		
  9947                                  	
  9948                                  LCritDevice_0:
  9949 00001350 50                      	PUSH	AX
  9950                                  	;MOV	AX,8100h+critDevice
  9951                                  	;INT	int_IBM
  9952 00001351 B80281                  	mov	ax,8102h
  9953 00001354 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9954                                  			; AL = critical section number (00h-0Fh)
  9955 00001356 58                      	POP     AX
  9956 00001357 C3                      	retn
  9957                                  
  9958                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9959                                  ;	iret
  9960                                  
  9961                                  LCritDevice_2:
  9962                                  	;;popff ; *
  9963                                  	;;retn
  9964                                  ;	jmp	short LCritDevice_3 ; *
  9965                                  ;LCritDevice_iret2: ; *
  9966                                  ;	iret
  9967                                  
  9968                                  	; 16/12/2022
  9969                                  	; 13/11/2022
  9970                                  	;jmp	short LCritDevice_3
  9971                                  ;LCritDevice_iret2:
  9972                                  	;iret
  9973                                  
  9974                                  LCritDevice_3:
  9975 00001358 0E                      	push    cs ; *
  9976                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9977                                  	;call	LCritDevice_iret2 ; *
  9978                                  	;retn
  9979                                  	; 16/12/2022
  9980 00001359 E8E1FF                  	call	LCritDevice_iret
  9981 0000135C C3                      	retn
  9982                                  
  9983                                  ;EndProc LCritDevice
  9984                                  
  9985                                  ;============================================================================
  9986                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9987                                  ;============================================================================
  9988                                  ; 20/07/2018 - Retro DOS v3.0
  9989                                  
  9990                                  ;============================================================================
  9991                                  ; STDIO.ASM - (MSDOS 2.0)
  9992                                  ;============================================================================
  9993                                  
  9994                                  ;
  9995                                  ; Standard device IO for MSDOS (first 12 function calls)
  9996                                  ;
  9997                                  
  9998                                  ;.xlist
  9999                                  ;.xcref
 10000                                  ;INCLUDE STDSW.ASM
 10001                                  ;INCLUDE DOSSEG.ASM
 10002                                  ;.cref
 10003                                  ;.list
 10004                                  
 10005                                  ;TITLE   STDIO - device IO for MSDOS
 10006                                  ;NAME    STDIO
 10007                                  
 10008                                  ;INCLUDE IO.ASM
 10009                                  
 10010                                  ; ---------------------------------------------------------------------------
 10011                                  ;
 10012                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10013                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10014                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10015                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10016                                  ;			    to restore MSDOS 2.0 device IO source code 
 10017                                  ;
 10018                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
 10019                                  	
 10020                                  ;============================================================================
 10021                                  ; STDIO.ASM - (MSDOS 2.0)
 10022                                  ;============================================================================
 10023                                  
 10024                                  ;
 10025                                  ; Standard device IO for MSDOS (first 12 function calls)
 10026                                  ;
 10027                                  
 10028                                  ;.xlist
 10029                                  ;.xcref
 10030                                  ;INCLUDE STDSW.ASM
 10031                                  ;INCLUDE DOSSEG.ASM
 10032                                  ;.cref
 10033                                  ;.list
 10034                                  
 10035                                  ;TITLE   STDIO - device IO for MSDOS
 10036                                  ;NAME    STDIO
 10037                                  
 10038                                  ;INCLUDE IO.ASM
 10039                                  
 10040                                  ; ---------------------------------------------------------------------------
 10041                                  ;
 10042                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10043                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10044                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10045                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10046                                  ;			    to restore MSDOS 2.0 device IO source code 
 10047                                  ;
 10048                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10049                                  ;
 10050                                  ;============================================================================
 10051                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10052                                  ;============================================================================
 10053                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10054                                  
 10055                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10056                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10057                                  
 10058                                  ;============================================================================
 10059                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10060                                  ;============================================================================
 10061                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10062                                  
 10063                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10064                                  
 10065                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10066                                  ;
 10067                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10068                                  ;	NAME	IBMCPMIO
 10069                                  
 10070                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10071                                  ;
 10072                                  ;	$Std_Con_Input_No_Echo
 10073                                  ;	$Std_Con_String_Output
 10074                                  ;	$Std_Con_String_Input
 10075                                  ;	$RawConIO
 10076                                  ;	$RawConInput
 10077                                  ;	RAWOUT
 10078                                  ;	RAWOUT2
 10079                                  ;
 10080                                  
 10081                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10082                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10083                                  ; references to be SS or CS relative which is desired.
 10084                                  
 10085                                  ; ---------------------------------------------------------------------------
 10086                                  
 10087                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10088                                  ;	NAME	CPMIO2
 10089                                  
 10090                                  ;
 10091                                  ;	Microsoft Confidential
 10092                                  ;	Copyright (C) Microsoft Corporation 1991
 10093                                  ;	All Rights Reserved.
 10094                                  ;
 10095                                  
 10096                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10097                                  ;
 10098                                  ;	$Std_Con_Input
 10099                                  ;	$Std_Con_Output
 10100                                  ;	OUTT
 10101                                  ;	TAB
 10102                                  ;	BUFOUT
 10103                                  ;	$Std_Aux_Input
 10104                                  ;	$Std_Aux_Output
 10105                                  ;	$Std_Printer_Output
 10106                                  ;	$Std_Con_Input_Status
 10107                                  ;	$Std_Con_Input_Flush
 10108                                  ;
 10109                                  ;	Revision History:
 10110                                  ;
 10111                                  ;	  AN000	 version 4.00 - Jan. 1988
 10112                                  
 10113                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10114                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10115                                  ; references to be SS or CS relative which is desired.
 10116                                  
 10117                                  ;DOSCODE SEGMENT
 10118                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10119                                  
 10120                                  
 10121                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10122                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10123                                  ;hkn;	not valid. 
 10124                                  
 10125                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10126                                  ; 08/11/2022
 10127                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10128                                  
 10129                                  ;
 10130                                  ;----------------------------------------------------------------------------
 10131                                  ;
 10132                                  ; Procedure : $Std_Con_Input_No_Echo
 10133                                  ;
 10134                                  ;----------------------------------------------------------------------------
 10135                                  ;
 10136                                  
 10137                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10138                                  
 10139                                  ; Inputs:
 10140                                  ;	None
 10141                                  ; Function:
 10142                                  ;	Input character from console, no echo
 10143                                  ; Returns:
 10144                                  ;	AL = character
 10145                                  
 10146 0000135D 1E                      	push	ds
 10147 0000135E 56                      	push	si
 10148                                  INTEST:
 10149 0000135F E82F3D                  	call	STATCHK
 10150 00001362 753B                    	jnz	short GET ; 08/09/2018
 10151                                  ;*************************************************************************
 10152                                  ;hkn; SS override
 10153 00001364 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10154 0000136A 7505                    	jnz	short no_sys_wait
 10155 0000136C B405                    	mov	ah,5			; get input status with system wait
 10156 0000136E E84630                  	call	IOFUNC
 10157                                  no_sys_wait:
 10158                                  ;**************************************************************************
 10159 00001371 B484                    	MOV	AH,84h
 10160 00001373 CD2A                    	INT	int_IBM	 ; int 2Ah
 10161                                  
 10162                                  ;;; 7/15/86  update the date in the idle loop
 10163                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10164                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10165                                  
 10166                                  ;hkn; SS override
 10167 00001375 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10168 0000137B 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10169                                  
 10170 0000137D 50                      	PUSH	AX
 10171 0000137E 53                      	PUSH	BX			; following is tricky,
 10172 0000137F 51                      	PUSH	CX			; it may be called by critical handler
 10173 00001380 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10174                                  					; other's READ or WRITE
 10175 00001381 1E                      	PUSH	DS			; save DS = SFT's segment
 10176                                  
 10177                                  ;hkn; READTIME must use ds = DOSDATA
 10178                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10179                                  
 10180 00001382 16                      	PUSH	SS ; 04/05/2019
 10181 00001383 1F                      	POP	DS
 10182                                  
 10183 00001384 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10184 00001387 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10185                                  	;invoke	READTIME		; readtime
 10186 0000138A E883F7                  	call	READTIME
 10187 0000138D B80100                  	MOV	AX,1
 10188 00001390 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10189                                  
 10190                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10191                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10192                                  ;	push	bx
 10193                                  ;	mov	bx,DATE_FLAG
 10194                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10195                                  ;	cmp	word [cs:bx],5872h
 10196                                  ;	jz	short FETCHI_TAG_chk_ok
 10197                                  ;	call	DOSINIT
 10198                                  ;FETCHI_TAG_chk_ok:
 10199                                  ;	pop	bx
 10200                                  
 10201 00001393 1F                      	POP	DS			; restore DS
 10202 00001394 5A                      	POP	DX
 10203 00001395 59                      	POP	CX
 10204 00001396 5B                      	POP	BX
 10205 00001397 58                      	POP	AX
 10206                                  NoUpdate:
 10207                                  
 10208                                  ;hkn; SS override
 10209 00001398 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10210                                  
 10211                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10212 0000139D EBC0                    	JMP	short INTEST
 10213                                  GET:
 10214 0000139F 30E4                    	XOR	AH,AH
 10215 000013A1 E81330                  	call	IOFUNC
 10216 000013A4 5E                      	POP	SI
 10217 000013A5 1F                      	POP	DS
 10218                                  ;;; 7/15/86
 10219                                  
 10220                                  ;hkn; SS override
 10221                                  	; MSDOS 6.0
 10222 000013A6 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10223                                  	;
 10224 000013AC 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10225 000013AE 7505                    	JNZ	short noscan
 10226                                  
 10227                                  ;hkn; SS override
 10228                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10229                                  	; 20/06/2023
 10230 000013B0 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10231                                  noscan:
 10232 000013B5 C3                      	retn
 10233                                  ;
 10234                                  ;----------------------------------------------------------------------------
 10235                                  ;
 10236                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10237                                  ;
 10238                                  ;
 10239                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10240                                  ;	EXIT	none
 10241                                  ;	USES	ALL
 10242                                  ;
 10243                                  ;----------------------------------------------------------------------------
 10244                                  ;
 10245                                  
 10246                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10247                                  
 10248 000013B6 89D6                    	mov	si,dx
 10249                                  STRING_OUT1:	
 10250 000013B8 AC                      	lodsb
 10251 000013B9 3C24                    	cmp	al,'$'
 10252 000013BB 74F8                    	je	short noscan
 10253                                  NEXT_STR1:
 10254 000013BD E88702                  	call	OUTT
 10255 000013C0 EBF6                    	jmp	short STRING_OUT1
 10256                                  
 10257                                  ;----------------------------------------------------------------------------
 10258                                  ;
 10259                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10260                                  ;
 10261                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10262                                  ;
 10263                                  ;	ENTRY	(ds:dx) = input buffer
 10264                                  ;	EXIT	none
 10265                                  ;	USES	ALL
 10266                                  ;
 10267                                  ;----------------------------------------------------------------------------
 10268                                  
 10269                                  	; 15/01/2024
 10270                                  
 10271                                  _$STD_CON_STRING_INPUT:		;System call 10
 10272                                  
 10273                                  	; 15/01/2024
 10274                                  	;mov	ax,ss
 10275                                  	;mov	es,ax
 10276 000013C2 16                      	push	ss
 10277 000013C3 07                      	pop	es
 10278                                  
 10279 000013C4 89D6                    	mov	si,dx
 10280 000013C6 30ED                    	xor	ch,ch
 10281 000013C8 AD                      	lodsw
 10282                                  
 10283                                  ;	(AL) = the buffer length
 10284                                  ;	(AH) = the template length
 10285                                  
 10286 000013C9 08C0                            or	al,al
 10287 000013CB 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10288 000013CD 88E3                    	mov	bl,ah		;Init template counter
 10289 000013CF 88EF                            mov	bh,ch		;Init template counter
 10290                                  
 10291                                  ;	(BL) = the number of bytes in the template
 10292                                  
 10293 000013D1 38D8                            cmp	al,bl
 10294 000013D3 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10295 000013D5 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10296 000013D8 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10297                                  
 10298                                  ; The number of chars in the template is >= the number of chars in buffer or
 10299                                  ; there is no CR at the end of the template. This is an inconsistant state
 10300                                  ; of affairs. Pretend that the template was empty:
 10301                                  ;
 10302                                  
 10303                                  NOEDIT:	
 10304 000013DA 88EB                    	mov	bl,ch		;Reset buffer
 10305                                  EDITON: 
 10306 000013DC 88C2                    	mov	dl,al
 10307 000013DE 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10308                                  
 10309                                  ;	Top level. We begin to read a line in.
 10310                                  
 10311                                  NEWLIN: 
 10312 000013DF 36A0[F901]              	mov	al,[SS:CARPOS]
 10313 000013E3 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10314                                  
 10315 000013E7 56                      	push	si
 10316 000013E8 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10317 000013EB 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10318 000013F0 88EF                    	mov	bh,ch		;No chars from template yet
 10319 000013F2 88EE                    	mov	dh,ch		;No chars to new line yet
 10320 000013F4 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10321 000013F7 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10322 000013F9 7503                    	jnz	short GOTCH
 10323                                  
 10324                                  ;	This is the main loop of reading in a character and processing it.
 10325                                  ;
 10326                                  ;	(BH) = the index of the next byte in the template
 10327                                  ;	(BL) = the length of the template
 10328                                  ;	(DH) = the number of bytes in the buffer
 10329                                  ;	(DL) = the length of the buffer
 10330                                  
 10331                                  GETCH:
 10332 000013FB E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10333                                  GOTCH:
 10334                                  ;
 10335                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10336                                  ; input queue.
 10337                                  ;
 10338 000013FE 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10339 00001400 74F9                    	jz	short GETCH
 10340                                  
 10341                                  ;	If the leading char is the function-key lead byte
 10342                                  
 10343                                  	;cmp	al,[SS:ESCCHAR]
 10344                                  
 10345                                  	; 04/05/2019 - Retro DOS v4.0
 10346                                  
 10347                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10348                                  
 10349 00001402 2E3A06[1A0A]            	CMP	AL,[cs:ESCCHAR]
 10350 00001407 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10351                                  
 10352                                  ;	Rubout and ^H are both destructive backspaces.
 10353                                  
 10354 00001409 3C7F                            cmp	al,c_DEL ; 7FH
 10355                                          ;jz	short BACKSPJ
 10356                                          ; 15/01/2024
 10357 0000140B 7466                    	je	short BACKSP
 10358 0000140D 3C08                    	cmp	al,c_BS  ; 8
 10359                                          ;jz	short BACKSPJ
 10360                                          ; 15/01/2024
 10361 0000140F 7462                    	je	short BACKSP
 10362                                  
 10363                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10364                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10365                                  	;	   	after CMP and a CMP again!
 10366                                  	;		
 10367                                  	;		-It would be better if they use a 'JMP short' to 
 10368                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10369                                  	;		between them. Then, they would be able use a patch
 10370                                  	;		between 5271h and 5279h when if it will be required.
 10371                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10372                                  	;	
 10373                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10374                                  
 10375                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10376                                  	;
 10377                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10378                                  
 10379                                  ;DOSCODE:526D	cmp     al, 8
 10380                                  ;DOSCODE:526F	jz      short BACKSPJ
 10381                                  ;DOSCODE:5271	cmp     al, 17h
 10382                                  ;DOSCODE:5273	nop
 10383                                  ;DOSCODE:5274	nop
 10384                                  ;DOSCODE:5275	cmp     al, 15h
 10385                                  ;DOSCODE:5277	nop
 10386                                  ;DOSCODE:5278	nop
 10387                                  ;DOSCODE:5279	cmp     al, 0Dh
 10388                                  ;DOSCODE:527B	jz      short ENDLIN
 10389                                  ;DOSCODE:527D	cmp     al, 0Ah
 10390                                  ;DOSCODE:527F	jz      short PHYCRLF
 10391                                  	
 10392                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10393                                  	; DOSCODE:525Dh
 10394                                  
 10395                                  ; 16/12/2022
 10396                                  %if 0
 10397                                  	; MSDOS 6.0
 10398                                  ;	^W deletes backward once and then backs up until a letter is before the
 10399                                  ;	cursor
 10400                                  
 10401                                  	CMP     AL,"W"-"@" ; 17h
 10402                                  
 10403                                  ;	The removal of the comment characters before the jump statement will
 10404                                  ;	cause ^W to backup a word.
 10405                                  
 10406                                  ;***	JZ	short WordDel
 10407                                  	NOP
 10408                                  	NOP
 10409                                  
 10410                                  	CMP     AL,"U"-"@" ; 15h
 10411                                  
 10412                                  ;	The removal of the comment characters before the jump statement will
 10413                                  ;	cause ^U to clear a line.
 10414                                  
 10415                                  ;***	JZ	short LineDel
 10416                                  	NOP
 10417                                  	NOP
 10418                                  
 10419                                  %endif
 10420                                  
 10421                                  ;	CR terminates the line.
 10422                                  
 10423 00001411 3C0D                            cmp	al,c_CR ; 0Dh
 10424 00001413 7430                            jz	short ENDLIN
 10425                                  
 10426                                  ;	LF goes to a new line and keeps on reading.
 10427                                  
 10428 00001415 3C0A                            cmp	al,c_LF ; 0Ah
 10429 00001417 7442                    	jz	short PHYCRLF
 10430                                  
 10431                                  ;	^X (or ESC) deletes the line and starts over
 10432                                  
 10433                                  	; MSDOS 3.3
 10434                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10435                                  	;jz	short KILNEW
 10436                                  
 10437                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10438                                  
 10439                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10440                                  
 10441 00001419 2E3A06[190A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10442 0000141E 7440                    	jz	short KILNEW
 10443                                  	
 10444                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10445                                  	;jz	short KILNEW
 10446                                  
 10447                                  ; Otherwise, we save the input character.
 10448                                  
 10449                                  SAVCH:	
 10450 00001420 38D6                    	cmp	dh,dl
 10451 00001422 7317                    	jnb	short BUFFUL		; buffer is full.
 10452 00001424 AA                              stosb
 10453 00001425 FEC6                    	inc	dh                      ; increment count in buffer.
 10454 00001427 E8B102                  	call	BUFOUT			; Print control chars nicely
 10455                                  
 10456 0000142A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10457 00001430 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10458 00001432 38DF                            cmp	bh,bl
 10459 00001434 73C5                            jnb	short GETCH		; no more characters in template
 10460 00001436 46                              inc	si                      ; Skip to next char in template
 10461 00001437 FEC7                            inc	bh                      ; remember position in template
 10462 00001439 EBC0                            jmp	short GETCH
 10463                                  
 10464                                  	; 15/01/2024
 10465                                  ;BACKSPJ: 
 10466                                  	;jmp	short BACKSP
 10467                                  
 10468                                  BUFFUL: 
 10469 0000143B B007                    	mov	al, 7			; Bell to signal full buffer
 10470 0000143D E80702                  	call	OUTT
 10471 00001440 EBB9                    	jmp	short GETCH
 10472                                  
 10473                                  ESCAPE: 
 10474                                  	;transfer OEMFunctionKey
 10475 00001442 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10476                                  
 10477                                  ENDLIN:
 10478 00001445 AA                              stosb				; Put the CR in the buffer
 10479 00001446 E8FE01                  	call	OUTT                    ; Echo it
 10480 00001449 5F                              pop	di                      ; Get start of user buffer
 10481 0000144A 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10482 0000144D FEC6                            inc	dh			; DH is length including CR
 10483                                  
 10484                                  COPYNEW:
 10485                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10486                                  	;mov	bp, es
 10487                                  	;mov	bx, ds
 10488                                  	;mov	es, bx
 10489                                  	;mov	ds, bp
 10490                                  	;mov	si, INBUF
 10491                                  	;mov	cl, dh
 10492                                  	;rep	movsb
 10493                                  	;retn
 10494                                  
 10495                                  	; CPMIO.ASM (MSDOS 6.0)
 10496                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10497                                  	;SAVE	<DS,ES>
 10498 0000144F 1E                      	PUSH	DS
 10499 00001450 06                      	PUSH	ES
 10500                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10501 00001451 1F                      	POP	DS
 10502 00001452 07                      	POP	ES
 10503                                  
 10504                                  ;;hkn; INBUF is in DOSDATA
 10505 00001453 BE[FB01]                        MOV     SI,INBUF
 10506 00001456 88F1                            MOV     CL,DH                   ; set up count
 10507 00001458 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10508                                  OLDBAK_RETN:
 10509 0000145A C3                              RETN
 10510                                  
 10511                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10512                                  
 10513                                  PHYCRLF:
 10514 0000145B E81B01                  	CALL	CRLF
 10515 0000145E EB9B                            JMP	short GETCH
 10516                                  
 10517                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10518                                  
 10519                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10520                                  
 10521                                  	; Note: Following routines were not used in IBMDOS.COM
 10522                                  	;	-CRTL+W, CRTL+U is not activated-
 10523                                  	;	but they were in the kernel code!?)
 10524                                  
 10525                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10526                                  	; DOSCODE:52B6h
 10527                                  
 10528                                  ;;;;;;;;
 10529                                  
 10530                                  ; 16/12/2022
 10531                                  %if 0
 10532                                  ;
 10533                                  ; Delete the previous line
 10534                                  ;
 10535                                  LineDel:
 10536                                  	OR      DH,DH
 10537                                  	JZ	short GETCH	 ; 06/12/2022
 10538                                  	Call    BackSpace
 10539                                  	JMP	short LineDel
 10540                                  
 10541                                  %endif
 10542                                  
 10543                                  ;
 10544                                  ; delete the previous word.
 10545                                  ;
 10546                                  WordDel:
 10547                                  WordLoop:
 10548                                  ;	Call    BackSpace               ; backspace the one spot
 10549                                  ;	OR      DH,DH
 10550                                  ;	JZ	short GetChj
 10551                                  ;	MOV     AL,[ES:DI-1]
 10552                                  ;	cmp     al,'0'
 10553                                  ;	jb	short GetChj
 10554                                  ;	cmp     al,'9'
 10555                                  ;	jbe	short WordLoop
 10556                                  ;	OR      AL,20h
 10557                                  ;	CMP     AL,'a'
 10558                                  ;	JB	short GetChj
 10559                                  ;	CMP     AL,'z'
 10560                                  ;	JBE	short WordLoop
 10561                                  ;GetChj: 
 10562                                  ;	JMP	GETCH
 10563                                  
 10564                                  ; 16/12/2022
 10565                                  %if 0
 10566                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10567                                  	; (Worddel is not called or jumped from anywhere!)
 10568                                  WordDel:
 10569                                  WordLoop:
 10570                                  	Call    BackSpace               ; backspace the one spot
 10571                                  	OR      DH,DH
 10572                                  	JZ	short GetChj
 10573                                  	MOV     AL,[ES:DI-1]
 10574                                  	cmp     al,'0'
 10575                                  	jb	short GetChj
 10576                                  	cmp     al,'9'
 10577                                  	jbe	short WordLoop
 10578                                  	OR      AL,20h
 10579                                  	CMP     AL,'a'
 10580                                  	JB	short GetChj
 10581                                  	CMP     AL,'z'
 10582                                  	JBE	short WordLoop
 10583                                  GetChj: 
 10584                                  	JMP	GETCH
 10585                                  
 10586                                  %endif
 10587                                  
 10588                                  ;;;;;;;;
 10589                                  
 10590                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10591                                  
 10592                                  ; The user wants to throw away what he's typed in and wants to start over.
 10593                                  ; We print the backslash and then go to the next line and tab to the correct
 10594                                  ; spot to begin the buffered input.
 10595                                  
 10596                                  KILNEW:
 10597 00001460 B05C                            mov	al,'\'
 10598 00001462 E8E201                          call	OUTT            ;Print the CANCEL indicator
 10599 00001465 5E                              pop	si		;Remember start of edit buffer
 10600                                  PUTNEW:
 10601 00001466 E81001                  	call	CRLF            ;Go to next line on screen
 10602 00001469 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10603 0000146D E84B02                  	call	TAB             ;Tab over
 10604 00001470 E96CFF                          JMP     NEWLIN		;Start over again
 10605                                  
 10606                                  ;	Destructively back up one character position
 10607                                  
 10608                                  BACKSP:
 10609                                  	; 09/09/2018
 10610 00001473 E80800                  	Call    BackSpace
 10611 00001476 EB83                    	JMP     short GETCH	; 15/01/2024
 10612                                  
 10613                                  	; 15/01/2024
 10614                                  ;User really wants an ESC character in his line
 10615                                  TWOESC:	
 10616 00001478 2EA0[1A0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10617 0000147C EBA2                    	jmp	short SAVCH
 10618                                  
 10619                                  BackSpace:
 10620 0000147E 08F6                    	or	dh,dh
 10621 00001480 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10622 00001482 E85800                  	call	BACKUP          ;Do the backup
 10623 00001485 268A05                  	mov	al,[es:di]	;Get the deleted char
 10624 00001488 3C20                            cmp	al,20h	; ' '
 10625 0000148A 730F                    	jnb	short OLDBAK	;Was a normal char
 10626 0000148C 3C09                            cmp	al,c_HT ; 9
 10627 0000148E 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10628                                  ;; 9/27/86 fix for ctrl-U backspace
 10629 00001490 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10630 00001492 7407                    	JZ	short OLDBAK
 10631 00001494 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10632 00001496 7403                    	JZ	short OLDBAK
 10633                                  ;; 9/27/86 fix for ctrl-U backspace
 10634 00001498 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10635                                  OLDBAK:
 10636 0000149B 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10637 000014A1 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10638 000014A3 08FF                    	or	bh,bh
 10639 000014A5 74B3                            jz	short OLDBAK_RETN 
 10640                                  				;Not advanced in template, stay where we are
 10641 000014A7 FECF                    	dec	bh		;Go back in template
 10642 000014A9 4E                              dec	si
 10643 000014AA C3                      	retn
 10644                                  BAKTAB:
 10645 000014AB 57                              push	di
 10646 000014AC 4F                              dec	di		;Back up one char
 10647 000014AD FD                              std			;Go backward
 10648 000014AE 88F1                            mov	cl,dh		;Number of chars currently in line
 10649 000014B0 B020                            mov	al,20h	; ' '
 10650 000014B2 53                              push	bx
 10651 000014B3 B307                            mov	bl,7		;Max
 10652 000014B5 E30E                            jcxz	FIGTAB		;At start, do nothing
 10653                                  FNDPOS:
 10654 000014B7 AE                              scasb			;Look back
 10655 000014B8 7609                    	jbe	short CHKCNT
 10656 000014BA 26807D0109              	cmp	byte [es:di+1],9
 10657 000014BF 7409                    	jz	short HAVTAB	;Found a tab
 10658 000014C1 FECB                    	dec	bl		;Back one char if non tab control char
 10659                                  CHKCNT:
 10660 000014C3 E2F2                            loop	FNDPOS
 10661                                  FIGTAB:		
 10662 000014C5 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10663                                  HAVTAB:
 10664 000014CA 28F3                    	sub	bl,dh
 10665 000014CC 00D9                    	add	cl,bl
 10666 000014CE 80E107                  	and	cl,7		;CX has correct number to erase
 10667 000014D1 FC                      	cld			;Back to normal
 10668 000014D2 5B                      	pop	bx
 10669 000014D3 5F                      	pop	di
 10670 000014D4 74C5                    	jz	short OLDBAK	;Nothing to erase
 10671                                  TABBAK:
 10672 000014D6 E80700                  	call	BACKMES
 10673 000014D9 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10674 000014DB EBBE                    	jmp	short OLDBAK
 10675                                  
 10676                                  BACKUP:
 10677 000014DD FECE                            dec	dh		;Back up in line
 10678 000014DF 4F                              dec	di
 10679                                  BACKMES:
 10680 000014E0 B008                            mov	al,c_BS ; 8	;Backspace
 10681 000014E2 E86201                          call	OUTT
 10682 000014E5 B020                            mov	al,20h ; ' '	;Erase
 10683 000014E7 E85D01                          call	OUTT
 10684 000014EA B008                            mov	al,c_BS ; 8	;Backspace
 10685 000014EC E95801                  	jmp	OUTT		;Done
 10686                                  
 10687                                  	; 15/01/2024
 10688                                  ;User really wants an ESC character in his line
 10689                                  ;TWOESC:	
 10690                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10691                                  ;	jmp	SAVCH
 10692                                  
 10693                                  ;Copy the rest of the template
 10694                                  COPYLIN:
 10695 000014EF 88D9                            mov	cl,bl		;Total size of template
 10696 000014F1 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10697 000014F3 EB07                            jmp	short COPYEACH
 10698                                  
 10699                                  COPYSTR:
 10700 000014F5 E83200                  	call	FINDOLD         ;Find the char
 10701 000014F8 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10702                                  
 10703                                  ;Copy one char from template to line
 10704                                  COPYONE:
 10705 000014FA B101                            mov	cl,1
 10706                                  ;Copy CX chars from template to line
 10707                                  COPYEACH:
 10708 000014FC 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10709 00001502 38D6                    	cmp	dh,dl
 10710 00001504 740F                            jz	short GETCH2		;At end of line, can't do anything
 10711 00001506 38DF                            cmp	bh,bl
 10712 00001508 740B                            jz	short GETCH2		;At end of template, can't do anything
 10713 0000150A AC                              lodsb
 10714 0000150B AA                              stosb
 10715 0000150C E8CC01                  	call	BUFOUT
 10716 0000150F FEC7                            inc	bh			;Ahead in template
 10717 00001511 FEC6                            inc	dh			;Ahead in line
 10718 00001513 E2E7                            loop	COPYEACH
 10719                                  GETCH2:
 10720 00001515 E9E3FE                          jmp	GETCH
 10721                                  
 10722                                  ;Skip one char in template
 10723                                  SKIPONE:
 10724 00001518 38DF                    	cmp	bh,bl
 10725 0000151A 74F9                    	jz	short GETCH2		;At end of template
 10726 0000151C FEC7                    	inc	bh			;Ahead in template
 10727 0000151E 46                      	inc	si
 10728                                          ;jmp	GETCH
 10729                                  	; 15/01/2024
 10730 0000151F EBF4                    	jmp	short GETCH2
 10731                                  
 10732                                  SKIPSTR:
 10733 00001521 E80600                  	call	FINDOLD                 ;Find out how far to go
 10734 00001524 01CE                            add	si,cx			;Go there
 10735 00001526 00CF                            add	bh,cl
 10736                                          ;jmp	GETCH
 10737                                  	; 15/01/2024
 10738 00001528 EBEB                    	jmp	short GETCH2
 10739                                  
 10740                                  ;Get the next user char, and look ahead in template for a match
 10741                                  ;CX indicates how many chars to skip to get there on output
 10742                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10743                                  ;       address is popped off and a jump to GETCH is taken.
 10744                                  ;       Make sure nothing extra on stack when this routine
 10745                                  ;       is called!!! (no PUSHes before calling it).
 10746                                  
 10747                                  FINDOLD:
 10748 0000152A E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10749                                  
 10750                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10751                                  
 10752                                  	;CMP	AL,[SS:ESCCHAR]	
 10753                                  	;JNZ	SHORT FINDSETUP
 10754                                  
 10755                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10756                                  
 10757                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10758                                  
 10759 0000152D 2E3A06[1A0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10760 00001532 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10761                                  
 10762 00001534 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10763 00001537 EB1D                            JMP	SHORT NOTFND		; go try again
 10764                                  FINDSETUP:
 10765 00001539 88D9                    	mov	cl,bl
 10766 0000153B 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10767 0000153D 7417                    	jz	short NOTFND	;At end of template
 10768 0000153F 49                              dec	cx		;Cannot point past end, limit search
 10769 00001540 7414                            jz	short NOTFND	;If only one char in template, forget it
 10770 00001542 06                      	push	es
 10771 00001543 1E                      	push	ds
 10772 00001544 07                      	pop	es
 10773 00001545 57                      	push	di
 10774 00001546 89F7                    	mov	di,si		;Template to ES:DI
 10775 00001548 47                      	inc	di
 10776 00001549 F2AE                    	repne	scasb		;Look
 10777 0000154B 5F                      	pop	di
 10778 0000154C 07                      	pop	es
 10779 0000154D 7507                    	jnz	short NOTFND	;Didn't find the char
 10780 0000154F F6D1                            not	cl		;Turn how far to go into how far we went
 10781 00001551 00D9                            add	cl,bl		;Add size of template
 10782 00001553 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10783                                  FINDOLD_RETN:
 10784 00001555 C3                      	retn
 10785                                  
 10786                                  NOTFND:
 10787 00001556 5D                      	pop	bp              ;Chuck return address
 10788                                  	;jmp	GETCH
 10789                                  	; 15/01/2024
 10790                                  GETCH2_j:
 10791 00001557 EBBC                    	jmp	short GETCH2
 10792                                  
 10793                                  REEDIT:
 10794 00001559 B040                    	mov	al,'@'		;Output re-edit character
 10795 0000155B E8E900                  	call	OUTT
 10796 0000155E 5F                      	pop	di
 10797 0000155F 57                      	push	di
 10798 00001560 06                      	push	es
 10799 00001561 1E                      	push	ds
 10800 00001562 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10801 00001565 1F                      	pop	ds
 10802 00001566 07                      	pop	es
 10803 00001567 5E                      	pop	si
 10804 00001568 88F3                    	mov	bl,dh		;Size of line is new size template
 10805 0000156A E9F9FE                  	jmp	PUTNEW		;Start over again
 10806                                  
 10807                                  EXITINS:
 10808                                  ENTERINS:
 10809 0000156D 36F616[7905]            	not	byte [SS:INSMODE]
 10810                                  	;jmp	GETCH
 10811                                  	; 15/01/2024
 10812 00001572 EBE3                    	jmp	short GETCH2_j
 10813                                  
 10814                                  ;Put a real live ^Z in the buffer (embedded)
 10815                                  CTRLZ:
 10816 00001574 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10817 00001576 E9A7FE                          jmp	SAVCH
 10818                                  
 10819                                  ;Output a CRLF
 10820                                  CRLF:
 10821 00001579 B00D                    	mov	al,c_CR ; 0Dh 
 10822 0000157B E8C900                  	call	OUTT
 10823 0000157E B00A                    	mov	al,c_LF ; 0Ah
 10824 00001580 E9C400                  	jmp	OUTT
 10825                                  
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10830                                  ;
 10831                                  ;	Input or output raw character from console, no echo
 10832                                  ;
 10833                                  ;	ENTRY	DL = -1 if input
 10834                                  ;		   =  output character if output
 10835                                  ;	EXIT	(AL) = input character if input
 10836                                  ;	USES	all
 10837                                  ;
 10838                                  ;----------------------------------------------------------------------------
 10839                                  ; 20/07/2018 - Retro DOS v3.0
 10840                                  
 10841                                  ; 04/05/2019 - Retro DOS v4.0
 10842                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10843                                  
 10844                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10845                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10846                                  
 10847                                  _$RAW_CON_IO:			; System call 6
 10848 00001583 88D0                    	MOV	AL,DL
 10849 00001585 3CFF                    	CMP	AL,-1
 10850 00001587 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10851                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10852                                  	;jz	short rci1
 10853                                  	;jmp	short RAWOUT
 10854                                  	; 16/12/202
 10855                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10856                                  	;nop
 10857                                  rci1:
 10858                                  			; Get pointer to register save area
 10859 00001589 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10860 0000158E 31DB                    	XOR	BX,BX
 10861                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10862 00001590 E80120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10863                                          ;JC	SHORT RET17
 10864 00001593 72C0                            jc	short FINDOLD_RETN
 10865 00001595 B401                    	MOV	AH,1
 10866 00001597 E81D2E                  	CALL	IOFUNC
 10867 0000159A 750B                    	JNZ	SHORT RESFLG
 10868 0000159C E8C43A                  	CALL	SPOOLINT
 10869                                  	;OR	BYTE [ES:DI+16H],40H
 10870 0000159F 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10871 000015A4 30C0                    	XOR	AL,AL
 10872                                  RET17:
 10873 000015A6 C3                      	RETN
 10874                                  
 10875                                  RESFLG:
 10876                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10877 000015A7 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10878                                  				; Reset user's zero flag
 10879                                  ;RILP:
 10880                                  rci0:
 10881 000015AC E8B43A                  	CALL	SPOOLINT
 10882                                  ;
 10883                                  ;----------------------------------------------------------------------------
 10884                                  ;
 10885                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10886                                  ;
 10887                                  ;	Input raw character from console, no echo
 10888                                  ;
 10889                                  ;	ENTRY	none
 10890                                  ;	EXIT	(al) = character
 10891                                  ;	USES	all
 10892                                  ;
 10893                                  ;----------------------------------------------------------------------------
 10894                                  ;
 10895                                  
 10896                                  ;rci0:	invoke	SPOOLINT
 10897                                  
 10898                                  	;entry	$RAW_CON_INPUT
 10899                                  
 10900                                  	; 04/05/2019 - Retro DOS v4.0
 10901                                  
 10902                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10903                                  
 10904                                  _$RAW_CON_INPUT:		; System call 7
 10905 000015AF 53                      	push	bx
 10906 000015B0 31DB                    	XOR	BX,BX
 10907                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10908 000015B2 E8DF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10909 000015B5 5B                      	pop	bx
 10910 000015B6 72EE                    	JC	SHORT RET17
 10911 000015B8 B401                    	MOV	AH,1
 10912 000015BA E8FA2D                  	CALL	IOFUNC
 10913                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10914                                  	;XOR	AH,AH
 10915                                          ;CALL	IOFUNC
 10916                                          ;RETN
 10917 000015BD 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10918 000015BF B484                    	MOV	AH,84h
 10919 000015C1 CD2A                    	INT	int_IBM  ; int 2Ah
 10920 000015C3 EBE7                    	JMP	short rci0
 10921                                  rci5:	
 10922 000015C5 30E4                    	XOR	AH,AH
 10923                                  	;CALL	IOFUNC
 10924                                  	;RETN
 10925                                  	; 18/12/2022
 10926 000015C7 E9ED2D                  	jmp	IOFUNC
 10927                                  
 10928                                  ;       Output the character in AL to stdout
 10929                                  ;
 10930                                  	;entry	RAWOUT
 10931                                  RAWOUT:
 10932 000015CA 53                      	PUSH    BX
 10933 000015CB BB0100                  	MOV     BX,1
 10934                                  
 10935                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10936 000015CE E8C31F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10937 000015D1 721B                    	JC	SHORT RAWRET1
 10938                                  
 10939                                  	;
 10940                                  	; MSDOS 2.11
 10941                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10942                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10943                                          ;PUSH	DS
 10944                                          ;PUSH	SI
 10945                                          ;LDS	SI,[SI+19H]		; output to special?
 10946                                  	;TEST	BYTE [SI+4],ISSPEC
 10947                                  	;POP	SI
 10948                                  	;
 10949                                          
 10950                                  	; MSDOS 3.3 & MSDOS 6.0
 10951                                  	;mov	bx,[si+5]
 10952 000015D3 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10953                                   ;
 10954                                   ; If we are a network handle OR if we are not a local device then go do the
 10955                                   ; output the hard way.
 10956                                   ;	
 10957                                  	;and	bx,8080h
 10958 000015D6 81E38080                	AND	BX,sf_isnet+devid_device
 10959                                  	;cmp	bx,80h
 10960 000015DA 81FB8000                	CMP	BX,devid_device
 10961 000015DE 7510                    	jnz     short RAWNORM
 10962 000015E0 1E                      	push    ds
 10963                                  	;lds	bx,[si+7]
 10964 000015E1 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10965                                  	;test	byte [bx+4],10h
 10966 000015E4 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10967                                  	;
 10968                                  
 10969 000015E8 1F                      	POP	DS
 10970 000015E9 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10971                                  
 10972 000015EB CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10973                                  
 10974                                  	;JMP	SHORT RAWRET
 10975                                  ;RAWNORM:
 10976                                  ;	CALL    RAWOUT3
 10977                                  RAWRET: 
 10978 000015ED F8                      	CLC
 10979                                  RAWRET1:
 10980 000015EE 5B                      	POP     BX
 10981                                  RAWRET2:
 10982 000015EF C3                      	RETN
 10983                                  RAWNORM:
 10984 000015F0 E80700                  	CALL    RAWOUT3
 10985 000015F3 EBF8                    	jmp	short RAWRET
 10986                                  
 10987                                  ;	Output the character in AL to handle in BX
 10988                                  ;
 10989                                  ;	entry	RAWOUT2
 10990                                  
 10991                                  RAWOUT2:
 10992                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10993                                  	;JC	SHORT RET18
 10994 000015F5 E89C1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10995 000015F8 72F5                    	JC	SHORT RAWRET2
 10996                                  RAWOUT3:
 10997 000015FA 50                      	PUSH	AX
 10998 000015FB EB0C                    	JMP	SHORT RAWOSTRT
 10999                                  ROLP:
 11000 000015FD E8633A                  	CALL	SPOOLINT
 11001                                  
 11002                                  	; 01/05/2019 - Retro DOS v4.0
 11003                                  
 11004                                  	; MSDOS 6.0
 11005                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 11006                                  	; 17/12/2022
 11007 00001600 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 11008                                  	;or	word [ss:DOS34_FLAG],200h
 11009                                  				;AN002; set control break
 11010                                  	;invoke DSKSTATCHK
 11011 00001606 E8D739                  	call	DSKSTATCHK	;AN002; check control break
 11012                                  RAWOSTRT:
 11013 00001609 B403                    	MOV	AH,3
 11014 0000160B E8A92D                  	CALL	IOFUNC
 11015 0000160E 74ED                    	JZ	SHORT ROLP
 11016                                  
 11017                                  	; MSDOS 6.0
 11018                                  ;SR;
 11019                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 11020                                  ;the user failed. We do not send a char if this happens. We however return
 11021                                  ;to the caller with carry clear because this DOS call does not return any
 11022                                  ;status. 
 11023                                  ;
 11024 00001610 40                      	inc	ax		;fail on I24 if ax = -1
 11025 00001611 58                      	POP	AX
 11026 00001612 7405                    	jz	short nosend	;yes, do not send char
 11027 00001614 B402                    	MOV	AH,2
 11028 00001616 E89E2D                  	call	IOFUNC
 11029                                  nosend:
 11030 00001619 F8                      	CLC			; Clear carry indicating successful
 11031 0000161A C3                      	retn
 11032                                  
 11033                                  	; MSDOS 3.3 & MSDOS 2.11
 11034                                  	;POP	AX
 11035                                  	;MOV	AH,2
 11036                                          ;CALL	IOFUNC
 11037                                  	;CLC			; Clear carry indicating successful
 11038                                  ;RET18:    
 11039                                  	;RETN
 11040                                  
 11041                                  ;;10/08/2018
 11042                                  ; 20/07/2018 - Retro DOS v3.0
 11043                                  ; ---------------------------------------------------------------------------
 11044                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11045                                  ; ---------------------------------------------------------------------------
 11046                                  
 11047                                  ; This routine is called at DOS init
 11048                                  
 11049                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11050                                  ;;OUTMES:
 11051                                  ;;	;LODS	CS:BYTE PTR [SI]
 11052                                  ;;	CS	LODSB
 11053                                  ;;	CMP     AL,"$" ; 24h
 11054                                  ;;	JZ	SHORT RET18
 11055                                  ;;	CALL	OUTT
 11056                                  ;;	JMP     SHORT OUTMES
 11057                                  
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  ; 20/07/2018 - Retro DOS v3.0
 11061                                  
 11062                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11063                                  
 11064                                  ;
 11065                                  ;----------------------------------------------------------------------------
 11066                                  ;
 11067                                  ; Inputs:
 11068                                  ;	AX=0 save the DEVCALL request packet
 11069                                  ;	  =1 restore the DEVCALL request packet
 11070                                  ; Function:
 11071                                  ;	save or restore the DEVCALL packet
 11072                                  ; Returns:
 11073                                  ;	none
 11074                                  ;
 11075                                  ;----------------------------------------------------------------------------
 11076                                  ;
 11077                                  
 11078                                  ; 04/05/2019 - Retro DOS v4.0
 11079                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11080                                  
 11081                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11082                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11083                                  
 11084                                  ; 12/05/2019
 11085                                  
 11086                                  	; 15/01/2024
 11087                                  
 11088                                  Save_Restore_Packet:
 11089 0000161B 1E                      	PUSH	DS
 11090 0000161C 06                      	PUSH	ES
 11091 0000161D 56                      	PUSH	SI
 11092 0000161E 57                      	PUSH	DI
 11093                                  
 11094                                  	; 16/12/2022
 11095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11096                                  	; 09/09/2018
 11097 0000161F BF[6C0D]                	mov	di,FAKE_STACK_2F
 11098 00001622 BE[5A03]                	mov	si,DEVCALL
 11099 00001625 BE[5A03]                	mov	si,DEVCALL
 11100                                  	;
 11101                                  	; 21/09/2023
 11102 00001628 09C0                    	or	ax,ax 
 11103                                  	;CMP	AX,0		; save packet
 11104 0000162A 7402                    	JZ	short save_packet ; 16/12/2022
 11105                                  	;je	short set_seg
 11106                                  
 11107                                  	; MSDOS 6.0
 11108                                  restore_packet:
 11109                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11110                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11111                                  	; MSDOS 3.3
 11112                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11113                                  	;mov	di,DEVCALL  ; 09/09/2018
 11114                                  	;
 11115                                  	;JMP	short set_seg
 11116                                  
 11117                                  	; 16/12/2022	
 11118                                  	; 09/09/2018
 11119 0000162C 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11120                                  
 11121                                  ; 16/12/2022
 11122                                  %if 0
 11123                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11124                                  	cmp	ax,0		; save packet
 11125                                  	jz	short save_packet
 11126                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11127                                  	mov	di,DEVCALL 
 11128                                  	jmp	short set_seg
 11129                                  
 11130                                  	; MSDOS 6.0
 11131                                  save_packet:
 11132                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11133                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11134                                  	; 09/09/2018
 11135                                  	; MSDOS 3.3
 11136                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11137                                  	;mov	si,DEVCALL ; 09/09/2018
 11138                                  
 11139                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11140                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11141                                  	mov	si,DEVCALL
 11142                                  %endif
 11143                                  
 11144                                  ; 15/01/2024
 11145                                  ; 16/12/2022
 11146                                  save_packet:
 11147                                  ;set_seg:
 11148                                  	; MSDOS 3.3
 11149                                  	;mov	ax,cs
 11150                                  
 11151                                  	; MSDOS 6.0
 11152                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11153                                  	;MOV	DS,AX
 11154                                  	;MOV	ES,AX
 11155                                  	; 15/01/2024
 11156 0000162E 16                      	push	ss
 11157 0000162F 1F                      	pop	ds
 11158 00001630 1E                      	push	ds
 11159 00001631 07                      	pop	es
 11160                                  
 11161 00001632 B90B00                  	MOV	CX,11		; 11 words to move
 11162 00001635 F3A5                    	REP	MOVSW
 11163                                  
 11164 00001637 5F                      	POP	DI
 11165 00001638 5E                      	POP	SI
 11166 00001639 07                      	POP	ES
 11167 0000163A 1F                      	POP	DS
 11168 0000163B C3                      	retn
 11169                                  
 11170                                  ;============================================================================
 11171                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11172                                  ;============================================================================
 11173                                  ; 20/07/2018 - Retro DOS v3.0
 11174                                  ; 01/05/2019 - Retro DOS v4.0
 11175                                  
 11176                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11177                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11178                                  ;hkn;	not valid. 
 11179                                  
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  ;**	$STD_CON_INPUT - System Call 1
 11184                                  ;
 11185                                  ;	Input character from console, echo
 11186                                  ;
 11187                                  ;	ENTRY	none
 11188                                  ;	EXIT	(al) = character
 11189                                  ;	USES	ALL
 11190                                  ;
 11191                                  ;----------------------------------------------------------------------------
 11192                                  ;
 11193                                  
 11194                                  _$STD_CON_INPUT:	;System call 1
 11195                                  	
 11196 0000163C E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11197 0000163F 50                      	PUSH	AX
 11198 00001640 E80400                  	CALL	OUTT
 11199 00001643 58                      	POP	AX
 11200                                  CON_INPUT_RETN:	
 11201 00001644 C3                      	RETN
 11202                                  
 11203                                  ;
 11204                                  ;----------------------------------------------------------------------------
 11205                                  ;
 11206                                  ;**	$STD_CON_OUTPUT - System Call 2
 11207                                  ;
 11208                                  ;	Output character to console
 11209                                  ;
 11210                                  ;	ENTRY	(dl) = character
 11211                                  ;	EXIT	none
 11212                                  ;	USES	all
 11213                                  ;
 11214                                  ;----------------------------------------------------------------------------
 11215                                  ;
 11216                                  
 11217                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11218                                  
 11219                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11220                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11221                                  
 11222                                  _$STD_CON_OUTPUT:	;System call 2
 11223                                  
 11224 00001645 88D0                    	MOV	AL,DL
 11225                                  OUTT:
 11226 00001647 3C20                    	CMP	AL,20H ; " "
 11227 00001649 725C                    	JB	SHORT CTRLOUT
 11228 0000164B 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11229 0000164D 7405                    	JZ	SHORT OUTCH
 11230                                  OUTCHA:	
 11231                                  	;INC	BYTE PTR [CARPOS]
 11232 0000164F 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11233                                  OUTCH:
 11234 00001654 1E                      	PUSH	DS
 11235 00001655 56                      	PUSH	SI
 11236                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11237                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11238 00001656 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11239                                  	;AND	BYTE [SS:CHARCO],00111111B
 11240                                  	; 01/05/2019 - Retro DOS v4.0
 11241 0000165B 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11242 00001661 7505                    	JNZ	SHORT OUTSKIP
 11243                                  
 11244 00001663 50                      	PUSH	AX
 11245 00001664 E82A3A                  	CALL	STATCHK
 11246 00001667 58                      	POP	AX
 11247                                  OUTSKIP:
 11248 00001668 E85FFF                  	CALL	RAWOUT				;output the character
 11249                                  
 11250 0000166B 5E                      	POP	SI
 11251 0000166C 1F                      	POP	DS
 11252                                  
 11253                                  	;TEST	BYTE PTR [PFLAG],-1
 11254                                  	;retz
 11255 0000166D 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11256 00001673 74CF                    	JZ	SHORT CON_INPUT_RETN
 11257                                  
 11258 00001675 53                      	PUSH	BX
 11259 00001676 1E                      	PUSH	DS
 11260 00001677 56                      	PUSH	SI
 11261 00001678 BB0100                  	MOV	BX,1
 11262                                  	; 20/07/2018 - Retro DOS v3.0
 11263                                  	; MSDOS 3.3
 11264                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11265 0000167B E8161F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11266                                  					;hkn; to sft entry
 11267 0000167E 7224                    	JC	SHORT TRIPOPJ
 11268                                  
 11269                                  	; 01/05/2019 - Retro DOS v4.0
 11270                                  
 11271                                  	;mov	bx,[si+5]
 11272 00001680 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11273                                  	;test	bx,8000h
 11274                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11275 00001683 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11276 00001686 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11277                                  	;;test	bx,80h
 11278                                  	;TEST	BX,devid_device 		; output to file?
 11279 00001688 F6C380                  	test	bl,devid_device ; 80h
 11280 0000168B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11281                                  	; 14/03/2018
 11282                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11283                                  	;jc	short TRIPOPJ
 11284                                  	; MSDOS 2.11
 11285                                  	;test	byte [SI+18H], 80h
 11286                                  	;jz	short TRIPOPJ
 11287 0000168D BB0400                  	MOV	BX,4
 11288 00001690 E8011F                  	CALL	GET_IO_SFT
 11289 00001693 720F                    	JC	SHORT TRIPOPJ
 11290                                  	;;test	word [si+5], 800h
 11291                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11292                                  	;test	byte [si+6],8 ; 08/11/2022
 11293 00001695 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11294                                  						; StdPrn redirected?
 11295                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11296                                  	;jz	LISSTRT2 ; 10/08/2018 
 11297                                  	; 16/12/2022
 11298 00001699 7503                    	jnz	short outch1
 11299 0000169B E98700                  	jmp	LISSTRT2
 11300                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11301                                  	;jz	short LISSTRT2J
 11302                                  outch1:
 11303                                  	;MOV	BYTE [PFLAG],0
 11304 0000169E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11305                                  	; MSDOS 2.11
 11306                                  	;mov	bx,4
 11307                                  	;jmp	short LISSTRT2
 11308                                  	
 11309                                  TRIPOPJ:
 11310                                  	; 20/07/2018
 11311 000016A4 E98100                  	JMP	TRIPOP
 11312                                  
 11313                                  	; 16/12/2022
 11314                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11315                                  ;LISSTRT2J:
 11316                                  ;	JMP	LISSTRT2
 11317                                  
 11318                                  CTRLOUT:
 11319 000016A7 3C0D                    	CMP	AL,c_CR ; 0Dh
 11320 000016A9 7420                    	JZ	SHORT ZERPOS
 11321 000016AB 3C08                    	CMP	AL,c_BS ; 8
 11322 000016AD 7424                    	JZ	SHORT BACKPOS
 11323 000016AF 3C09                    	CMP	AL,c_HT ; 9
 11324 000016B1 75A1                    	JNZ	SHORT OUTCH
 11325                                  	;MOV	AL,[CARPOS]
 11326 000016B3 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11327 000016B7 0CF8                    	OR	AL,0F8H
 11328 000016B9 F6D8                    	NEG	AL
 11329                                  TAB:
 11330 000016BB 51                      	PUSH	CX
 11331 000016BC 88C1                    	MOV	CL,AL
 11332 000016BE B500                    	MOV	CH,0
 11333 000016C0 E307                    	JCXZ	POPTAB
 11334                                  TABLP:
 11335 000016C2 B020                    	MOV	AL," "
 11336 000016C4 E880FF                  	CALL	OUTT
 11337 000016C7 E2F9                    	LOOP	TABLP
 11338                                  POPTAB:
 11339 000016C9 59                      	POP	CX
 11340                                  
 11341 000016CA C3                      	RETN
 11342                                  
 11343                                  ZERPOS:
 11344                                  	;MOV	BYTE PTR [CARPOS],0
 11345 000016CB 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11346                                  	; 10/08/2018
 11347 000016D1 EB81                    	JMP	short OUTCH ; 04/05/2019
 11348                                  	
 11349                                  	; 18/12/2022
 11350                                  ;OUTJ:	
 11351                                  	;JMP	OUTT
 11352                                  
 11353                                  BACKPOS:
 11354                                  	;DEC	BYTE PTR [CARPOS]
 11355 000016D3 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11356 000016D8 E979FF                  	JMP	OUTCH
 11357                                  
 11358                                  BUFOUT:
 11359 000016DB 3C20                    	CMP	AL," "
 11360 000016DD 7315                    	JAE	SHORT OUTJ		;Normal char
 11361 000016DF 3C09                    	CMP	AL,9
 11362 000016E1 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11363                                  	;DOS 3.3  7/14/86
 11364 000016E3 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11365 000016E5 740D                    	JZ	short CTRLU
 11366 000016E7 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11367 000016E9 7409                    	JZ	short CTRLU
 11368                                  NOT_CTRLU:
 11369                                  	;DOS 3.3  7/14/86
 11370 000016EB 50                      	PUSH	AX
 11371 000016EC B05E                    	MOV	AL,"^"
 11372 000016EE E856FF                  	CALL	OUTT		;Print '^' before control chars
 11373 000016F1 58                      	POP	AX
 11374 000016F2 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11375                                  CTRLU:
 11376                                  	;CALL	OUTT
 11377                                  	; 18/12/2022
 11378                                  OUTJ:
 11379 000016F4 E950FF                  	jmp	OUTT
 11380                                  ;BUFOUT_RETN:
 11381                                  	;RETN
 11382                                  
 11383                                  ;
 11384                                  ;----------------------------------------------------------------------------
 11385                                  ;
 11386                                  ;**	$STD_AUX_INPUT - System Call 3
 11387                                  ;
 11388                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11389                                  ;
 11390                                  ;	ENTRY	none
 11391                                  ;	EXIT	(al) = character
 11392                                  ;	USES	all
 11393                                  ;
 11394                                  ;----------------------------------------------------------------------------
 11395                                  ;
 11396                                  
 11397                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11398                                  
 11399                                  _$STD_AUX_INPUT:	;System call 3
 11400                                  
 11401 000016F7 E89739                  	CALL	STATCHK
 11402 000016FA BB0300                  	MOV	BX,3
 11403 000016FD E8941E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11404                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11405                                  	;retc
 11406                                  	; 16/12/2022
 11407                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11408                                  	;JC	SHORT BUFOUT_RETN
 11409                                  	;JMP	SHORT TAISTRT
 11410                                  	; 07/12/2022
 11411 00001700 7304                    	jnc	SHORT TAISTRT
 11412 00001702 C3                      	retn	
 11413                                  
 11414                                  AUXILP:
 11415 00001703 E85D39                  	CALL	SPOOLINT
 11416                                  TAISTRT:
 11417 00001706 B401                    	MOV	AH,1
 11418 00001708 E8AC2C                  	CALL	IOFUNC
 11419 0000170B 74F6                    	JZ	SHORT AUXILP
 11420 0000170D 30E4                    	XOR	AH,AH
 11421                                  	; 16/12/2022
 11422                                  	;CALL	IOFUNC
 11423                                  	;RETN
 11424                                  	; 07/12/2022
 11425 0000170F E9A52C                  	jmp	IOFUNC
 11426                                  
 11427                                  ;
 11428                                  ;----------------------------------------------------------------------------
 11429                                  ;
 11430                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11431                                  ;
 11432                                  ;	ENTRY	(dl) = character
 11433                                  ;	EXIT	none
 11434                                  ;	USES	all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  
 11439                                  _$STD_AUX_OUTPUT:	;System call 4
 11440                                  
 11441 00001712 53                      	PUSH	BX
 11442 00001713 BB0300                  	MOV	BX,3
 11443 00001716 EB04                    	JMP	SHORT SENDOUT
 11444                                  
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11449                                  ;
 11450                                  ;	ENTRY	(dl) = character
 11451                                  ;	EXIT	none
 11452                                  ;	USES	all
 11453                                  ;
 11454                                  ;----------------------------------------------------------------------------
 11455                                  ;
 11456                                  
 11457                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11458                                  
 11459 00001718 53                      	PUSH	BX
 11460 00001719 BB0400                  	MOV	BX,4
 11461                                  
 11462                                  SENDOUT:
 11463 0000171C 88D0                    	MOV	AL,DL
 11464 0000171E 50                      	PUSH	AX
 11465 0000171F E86F39                  	CALL	STATCHK
 11466 00001722 58                      	POP	AX
 11467 00001723 1E                      	PUSH	DS
 11468 00001724 56                      	PUSH	SI
 11469                                  LISSTRT2:
 11470 00001725 E8CDFE                  	CALL	RAWOUT2
 11471                                  TRIPOP:
 11472 00001728 5E                      	POP	SI
 11473 00001729 1F                      	POP	DS
 11474 0000172A 5B                      	POP	BX
 11475                                  SCIS_RETN:	; 20/07/2018
 11476 0000172B C3                      	RETN
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11481                                  ;
 11482                                  ;	Check console input status
 11483                                  ;
 11484                                  ;	ENTRY	none
 11485                                  ;	EXIT	AL = -1 character available, = 0 no character
 11486                                  ;	USES	all
 11487                                  ;
 11488                                  ;----------------------------------------------------------------------------
 11489                                  ;
 11490                                  
 11491                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11492                                  
 11493 0000172C E86239                  	CALL	STATCHK
 11494 0000172F B000                    	MOV	AL,0		; no xor!!
 11495                                  	;retz
 11496 00001731 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11497 00001733 0CFF                    	OR	AL,-1
 11498                                  ;SCIS_RETN:
 11499 00001735 C3                      	RETN
 11500                                  
 11501                                  ;
 11502                                  ;----------------------------------------------------------------------------
 11503                                  ;
 11504                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11505                                  ;
 11506                                  ;	Flush console input buffer and perform call in AL
 11507                                  ;
 11508                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11509                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11510                                  ;		return arguments for the fcn supplied in (AL)
 11511                                  ;	USES	all
 11512                                  ;
 11513                                  ;----------------------------------------------------------------------------
 11514                                  ;
 11515                                  
 11516                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11517                                  
 11518 00001736 50                      	PUSH	AX
 11519 00001737 52                      	PUSH	DX
 11520 00001738 31DB                    	XOR	BX,BX
 11521 0000173A E8571E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11522                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11523 0000173D 7205                    	JC	SHORT BADJFNCON
 11524 0000173F B404                    	MOV	AH,4
 11525 00001741 E8732C                  	CALL	IOFUNC
 11526                                  
 11527                                  BADJFNCON:
 11528 00001744 5A                      	POP	DX
 11529 00001745 58                      	POP	AX
 11530 00001746 88C4                    	MOV	AH,AL
 11531 00001748 3C01                    	CMP	AL,1
 11532 0000174A 7413                    	JZ	SHORT REDISPJ
 11533 0000174C 3C06                    	CMP	AL,6
 11534 0000174E 740F                    	JZ	SHORT REDISPJ
 11535 00001750 3C07                    	CMP	AL,7
 11536 00001752 740B                    	JZ	SHORT REDISPJ
 11537 00001754 3C08                    	CMP	AL,8
 11538 00001756 7407                    	JZ	SHORT REDISPJ
 11539 00001758 3C0A                    	CMP	AL,10
 11540 0000175A 7403                    	JZ	SHORT REDISPJ
 11541 0000175C B000                    	MOV	AL,0
 11542 0000175E C3                      	RETN
 11543                                  
 11544                                  REDISPJ:
 11545 0000175F FA                      	CLI
 11546                                  	;transfer REDISP
 11547 00001760 E925EC                  	JMP	REDISP
 11548                                  
 11549                                  ;============================================================================
 11550                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11551                                  ;============================================================================
 11552                                  ; 20/07/2018 - Retro DOS v3.0
 11553                                  ; 17/05/2019 - Retro DOS v4.0
 11554                                  
 11555                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11556                                  ;
 11557                                  ;	$GET_FCB_POSITION
 11558                                  ;	$FCB_DELETE
 11559                                  ;	$GET_FCB_FILE_LENGTH
 11560                                  ;	$FCB_CLOSE
 11561                                  ;	$FCB_RENAME
 11562                                  ;	SaveFCBInfo
 11563                                  ;	ResetLRU
 11564                                  ;	SetOpenAge
 11565                                  ;	LRUFCB
 11566                                  ;	FCBRegen
 11567                                  ;	BlastSFT
 11568                                  ;	CheckFCB
 11569                                  ;	SFTFromFCB
 11570                                  ;	FCBHardErr
 11571                                  ;
 11572                                  ;	Revision history:
 11573                                  ;
 11574                                  ;		Created: ARR 4 April 1983"
 11575                                  ;			 MZ  6 June  1983 completion of functions
 11576                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11577                                  ;					  times.  Change so successive closes work by
 11578                                  ;					  always returning OK.	Also, detect I/O to
 11579                                  ;					  already closed FCB and return EOF.
 11580                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11581                                  ;					  out of sft into FCB for reconnection
 11582                                  ;
 11583                                  ;		A000	 version 4.00  Jan. 1988
 11584                                  
 11585                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11586                                  ;----------------------------------------------------------------------------
 11587                                  ;
 11588                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11589                                  ;	extent and next record field and set the random record field to point
 11590                                  ;	to that record
 11591                                  ;
 11592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11593                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11594                                  ;   Registers modified: all
 11595                                  ;
 11596                                  ;----------------------------------------------------------------------------
 11597                                  ;
 11598                                  
 11599                                  _$GET_FCB_POSITION:
 11600 00001763 E8D404                  	call	GetExtended		; point to FCB
 11601 00001766 E8A504                  	call	GetExtent		; DX:AX is current record
 11602                                  	;mov	[si+21h],ax
 11603 00001769 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11604                                  	;mov	[si+23h],dl
 11605 0000176C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11606                                  	;cmp	word [si+0Eh],64
 11607 0000176F 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11608 00001773 7303                    	JAE	short GetFCBBye
 11609                                  	;mov	[si+24h],dh
 11610 00001775 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11611                                  GoodPath:	; 16/12/2022
 11612                                  GetFCBBye:
 11613 00001778 E9D8EE                  	jmp	FCB_RET_OK
 11614                                  
 11615                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11616                                  ;----------------------------------------------------------------------------
 11617                                  ;
 11618                                  ;**	$FCB_Delete - Delete from FCB Template
 11619                                  ;
 11620                                  ;	given an FCB, remove all directory entries in the current
 11621                                  ;	directory that have names that match the FCB's ?  marks.
 11622                                  ;
 11623                                  ;	ENTRY	(DS:DX) = address of FCB
 11624                                  ;	EXIT	entries matching the FCB are deleted
 11625                                  ;		(al) = ff iff no entries were deleted
 11626                                  ;	USES	all
 11627                                  ;
 11628                                  ;----------------------------------------------------------------------------
 11629                                  ;
 11630                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11631                                  
 11632                                  _$FCB_DELETE:		; System call 19
 11633                                  					; OpenBuf is in DOSDATA
 11634 0000177B BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11635                                  
 11636 0000177E E8B752                  	call	TransFCB		; convert FCB to path
 11637 00001781 7207                    	JC	short BadPath 		; signal no deletions
 11638                                  
 11639 00001783 16                      	push	SS
 11640 00001784 1F                      	pop	DS			; SS is DOSDATA
 11641                                  
 11642 00001785 E8370D                  	call	DOS_DELETE		; wham
 11643                                  	;JC	short BadPath
 11644                                  	; 16/12/2022
 11645 00001788 73EE                    	jnc 	short GoodPath
 11646                                  ;GoodPath:
 11647                                  ;	;jmp	FCB_RET_OK		; do a good return
 11648                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11649                                  ;	jmp	short GetFCBBye
 11650                                  
 11651                                  BadPath:
 11652                                  	; Error code is in AX
 11653                                  
 11654 0000178A E9C9EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11655                                  
 11656                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11657                                  ;----------------------------------------------------------------------------
 11658                                  ;
 11659                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11660                                  ;	file in records (rounded up if partial).
 11661                                  ;
 11662                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11663                                  ;   Outputs:	Random record field updated to reflect the number of records
 11664                                  ;   Registers modified: all
 11665                                  ;
 11666                                  ;----------------------------------------------------------------------------
 11667                                  ;
 11668                                  	; 15/01/2024
 11669                                  
 11670                                  _$GET_FCB_FILE_LENGTH:
 11671                                  
 11672 0000178D E8AA04                  	call	GetExtended		; get real FCB pointer
 11673                                  					; DX points to Input FCB
 11674                                  
 11675                                  					; OpenBuf is in DOSDATA
 11676 00001790 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11677                                  
 11678 00001793 1E                      	push	ds			; save pointer to true FCB
 11679 00001794 56                      	push	si
 11680 00001795 E8A052                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11681 00001798 5E                      	pop	si
 11682 00001799 1F                      	pop	ds
 11683 0000179A 72EE                    	JC	short BadPath
 11684 0000179C 1E                      	push	ds			; save pointer
 11685 0000179D 56                      	push	si
 11686 0000179E 16                      	push	ss		
 11687 0000179F 1F                      	pop	ds
 11688 000017A0 E81A11                  	call	GET_FILE_INFO		; grab the info
 11689 000017A3 5E                      	pop	si			; get pointer back
 11690 000017A4 1F                      	pop	ds
 11691 000017A5 72E3                    	JC	short BadPath 		; invalid something
 11692                                  	; 15/01/2024
 11693                                  	;MOV	DX,BX (*)		; get high order size
 11694                                  	;MOV	AX,DI (**)		; get low order size
 11695 000017A7 89D8                    	mov	ax,bx ; hw of file size
 11696                                  	;
 11697                                  	;mov	bx,[si+0Eh]
 11698 000017A9 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11699 000017AC 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11700 000017AE 7502                    	JNZ	short GetSize 		; not empty
 11701                                  	;MOV	BX,128
 11702 000017B0 B380                    	mov	bl,128	; 15/01/2024
 11703                                  GetSize:
 11704                                  	; 15/01/2024
 11705                                  	;MOV	DI,AX			; save low order word
 11706                                  	;MOV	AX,DX			; move high order for divide
 11707                                  	;xchg	ax,dx ; (*)
 11708                                  	; ax = hw of file size
 11709                                  
 11710 000017B2 31D2                    	XOR	DX,DX			; clear out high
 11711 000017B4 F7F3                    	DIV	BX			; wham
 11712 000017B6 50                      	PUSH	AX			; save dividend
 11713 000017B7 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11714 000017B9 F7F3                    	DIV	BX			; wham
 11715 000017BB 89D1                    	MOV	CX,DX			; save remainder
 11716 000017BD 5A                      	POP	DX			; get high order dividend
 11717 000017BE E306                    	JCXZ	LengthStore		; no roundup
 11718 000017C0 83C001                  	ADD	AX,1
 11719 000017C3 83D200                  	ADC	DX,0			; 32-bit increment
 11720                                  LengthStore:
 11721                                  	;mov	[si+21h],ax
 11722 000017C6 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11723                                  	;mov	[si+23h],dl
 11724 000017C9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11725 000017CC 08F6                    	OR	DH,DH
 11726 000017CE 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11727                                  	;mov	[si+24h],dh
 11728 000017D0 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11729                                  	; 16/12/2022
 11730                                  GoodRet:
 11731                                  	;jmp	FCB_RET_OK
 11732 000017D3 EBA3                    	jmp	short GoodPath
 11733                                  
 11734                                  ;Break <$FCB_Close - close a file>
 11735                                  ;----------------------------------------------------------------------------
 11736                                  ;
 11737                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11738                                  ;	as the FCB may be used for further I/O
 11739                                  ;
 11740                                  ;   Inputs:	DS:DX point to FCB
 11741                                  ;   Outputs:	AL = FF if file was not found on disk
 11742                                  ;   Registers modified: all
 11743                                  ;
 11744                                  ;----------------------------------------------------------------------------
 11745                                  ;
 11746                                  
 11747                                  	; 16/01/2024
 11748                                  
 11749                                  _$FCB_CLOSE:		; System call 16
 11750                                  
 11751 000017D5 30C0                    	XOR	AL,AL			; default search attributes
 11752 000017D7 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11753 000017DA 7403                    	JZ	short NoAttr		; not extended
 11754 000017DC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11755                                  NoAttr:
 11756                                  					; SS override
 11757 000017DF 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11758 000017E3 E8C303                  	call	SFTFromFCB
 11759 000017E6 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11760                                  
 11761                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11762                                  	; there is no need to set the SFT's attribute.
 11763                                  
 11764                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11765                                  	;;; done
 11766                                  
 11767                                  	;mov	al,[es:di+4]
 11768 000017E8 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11769 000017EC 30E4                    	XOR	AH,AH
 11770 000017EE 50                      	PUSH	AX
 11771                                  
 11772                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11773                                  	;;; done
 11774                                  
 11775 000017EF E8725A                  	call	CheckShare
 11776 000017F2 7508                    	JNZ	short NoStash
 11777 000017F4 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11778                                  	;mov	[es:di+4],al
 11779 000017F8 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11780                                  NoStash:
 11781                                  
 11782                                  ; 16/01/2024
 11783                                  %if 0
 11784                                  	;mov	ax,[si+14h]
 11785                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11786                                  	;mov	[es:di+0Fh],ax
 11787                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11788                                  	;mov	ax,[si+16h]
 11789                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11790                                  	;mov	[es:di+0Dh],ax
 11791                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11792                                  	;mov	ax,[si+10h]
 11793                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11794                                  	;mov	[es:di+11h],ax
 11795                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11796                                  	;mov	ax,[si+12h]
 11797                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11798                                  	;mov	[es:di+13h],ax
 11799                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11800                                  	;or	word [es:di+5],4000h
 11801                                  	; 17/12/2022
 11802                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11803                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11804                                  %else
 11805                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11806 000017FC 1E                      	push	ds
 11807                                  	;lds	ax,[si+14h]
 11808 000017FD C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11809                                  	;mov	[es:di+0Fh],ax
 11810 00001800 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11811                                  	;mov	[es:di+0Dh],ds		
 11812 00001804 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11813 00001808 1F                      	pop	ds
 11814                                  	;lds	ax,[si+10h]
 11815 00001809 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11816                                  	;mov	[es:di+11h],ax
 11817 0000180C 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11818                                  	;mov	[es:di+13h],ds
 11819 00001810 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11820                                  	; 16/01/2024
 11821                                  	;;or	word [es:di+5], 4000h
 11822                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11823 00001814 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11824                                  %endif
 11825                                  
 11826 00001819 16                      	push	ss
 11827 0000181A 1F                      	pop	ds
 11828 0000181B E89016                  	call	DOS_CLOSE	; wham
 11829 0000181E C43E[9E05]              	LES	DI,[THISSFT]
 11830                                  
 11831                                  	;;; 9/8/86 F.C. restore SFT attribute
 11832 00001822 59                      	POP	CX
 11833                                  	;mov	[es:di+4],cl
 11834 00001823 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11835                                  	;;; 9/8/86 F.C. restore SFT attribute
 11836                                  
 11837 00001827 9C                      	PUSHF
 11838                                  	;test	word [es:di],0FFFFh
 11839                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11840                                  				; zero ref count gets blasted
 11841 00001828 26833D00                	cmp	word [ES:DI],0
 11842 0000182C 7507                    	jnz     short CloseOK
 11843 0000182E 50                      	PUSH	AX
 11844 0000182F B04D                    	MOV	AL,'M' ; 4Dh
 11845 00001831 E8F202                  	call	BlastSFT
 11846 00001834 58                      	POP	AX
 11847                                  CloseOK:
 11848 00001835 9D                      	POPF
 11849 00001836 739B                    	JNC	short GoodRet
 11850                                  	;cmp	al,6
 11851 00001838 3C06                    	CMP	AL,error_invalid_handle
 11852 0000183A 7497                    	JZ	short GoodRet
 11853                                  	;mov	al,2
 11854 0000183C B002                    	MOV	AL,error_file_not_found
 11855                                  fren90:
 11856                                  	; 16/12/2022
 11857                                  fcb_close_err:
 11858 0000183E E915EE                  	jmp	FCB_RET_ERR
 11859                                  
 11860                                  ;
 11861                                  ;----------------------------------------------------------------------------
 11862                                  ;
 11863                                  ;**	$FCB_Rename - Rename a File
 11864                                  ;
 11865                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11866                                  ;	multiple files copying from the meta characters.
 11867                                  ;
 11868                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11869                                  ;		    name of the files to be renamed. Starting at offset 11h
 11870                                  ;		    in the FCB is the destination name.
 11871                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11872                                  ;		AL = FF -> some files may have been renamed but:
 11873                                  ;			rename to existing file or source file not found
 11874                                  ;	USES	ALL
 11875                                  ;
 11876                                  ;----------------------------------------------------------------------------
 11877                                  ;
 11878                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11879                                  
 11880                                  _$FCB_RENAME:		; System call 23
 11881                                  
 11882 00001841 E8F603                  	call	GetExtended		; get pointer to real FCB
 11883 00001844 52                      	push	dx
 11884 00001845 8A04                    	MOV	AL,[SI] 		; get drive byte
 11885 00001847 83C610                  	ADD	SI,10h			; point to destination
 11886                                  
 11887                                  					; RenBuf is in DOSDATA
 11888 0000184A BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11889 0000184D FF34                    	push	word [SI]
 11890 0000184F 1E                      	push	ds
 11891                                  	;push	di			; save source pointer for TransFCB
 11892                                  	; 16/01/2024 - BugFix !
 11893 00001850 56                      	push	si
 11894 00001851 8804                    	MOV	[SI],AL			; drop in real drive
 11895 00001853 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11896 00001855 E8E051                  	call	TransFCB		; munch this pathname
 11897 00001858 5E                      	pop	si
 11898 00001859 1F                      	pop	ds	
 11899 0000185A 8F04                    	pop	WORD [SI]		; get path back
 11900 0000185C 5A                      	pop	dx			; Original FCB pointer
 11901 0000185D 72DF                    	JC	short fren90		; bad path -> error
 11902                                  
 11903                                  					; SS override for WFP_Start & Ren_WFP
 11904 0000185F 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11905 00001864 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11906                                  
 11907                                  					; OpenBuf is in DOSDATA
 11908 00001869 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11909 0000186C E8C951                  	call	TransFCB		; wham
 11910                                  					; NOTE that this call is pointing
 11911                                  					;  back to the ORIGINAL FCB so
 11912                                  					;  SATTRIB gets set correctly
 11913 0000186F 72CD                    	JC	short fren90		; error
 11914 00001871 E81F0E                  	call	DOS_RENAME
 11915 00001874 72C8                    	JC	short fren90
 11916                                  	; 16/12/2022
 11917 00001876 E9DAED                  	jmp	FCB_RET_OK
 11918                                  	
 11919                                  ;	Error -
 11920                                  ;
 11921                                  ;	(al) = error code
 11922                                  
 11923                                  	; 16/12/2022
 11924                                  ;fren90:	
 11925                                  ;	;jmp	FCB_RET_ERR
 11926                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11927                                  ;	jmp	short fcb_close_err
 11928                                  
 11929                                  ;Break <Misbehavior fixers>
 11930                                  ;
 11931                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11932                                  ;   user's space so he may move them at will. Second, they have a small
 11933                                  ;   reserved area that may be used for system information. Third, there was
 11934                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11935                                  ;   usage.
 11936                                  ;
 11937                                  ;   This results in the following misbehavior:
 11938                                  ;
 11939                                  ;	infinite opens of the same file:
 11940                                  ;
 11941                                  ;	While (TRUE) {			While (TRUE) {
 11942                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11943                                  ;	    Read (FCB); 		    Write (FCB);
 11944                                  ;	    }				    }
 11945                                  ;
 11946                                  ;	infinite opens of different files:
 11947                                  ;
 11948                                  ;	While (TRUE) {			While (TRUE) {
 11949                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11950                                  ;	    Read (FCB); 		    Write (FCB);
 11951                                  ;	    }				    }
 11952                                  ;
 11953                                  ;	multiple closes of the same file:
 11954                                  ;
 11955                                  ;	FCBOpen (FCB);
 11956                                  ;	while (TRUE)
 11957                                  ;	    FCBClose (FCB);
 11958                                  ;
 11959                                  ;	I/O after closing file:
 11960                                  ;
 11961                                  ;	FCBOpen (FCB);
 11962                                  ;	while (TRUE) {
 11963                                  ;	    FCBWrite (FCB);
 11964                                  ;	    FCBClose (FCB);
 11965                                  ;	    }
 11966                                  ;
 11967                                  ;   The following is am implementation of a methodology for emulating the
 11968                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11969                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11970                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11971                                  ;   the local machine.
 11972                                  ;
 11973                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11974                                  ;   structures depending on the file itself and the state of operations of the
 11975                                  ;   OS. The information contained in this reserved field is enough to
 11976                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11977                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11978                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11979                                  ;
 11980                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11981                                  ;
 11982                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11983                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11984                                  ;   regenerated.
 11985                                  ;
 11986                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11987                                  ;   longer available. We can make up for this by using the following
 11988                                  ;   information:
 11989                                  ;
 11990                                  ;	The Drive number (from the DPB).
 11991                                  ;	The physical sector of the directory that contains the entry.
 11992                                  ;	The relative position of the entry in the sector.
 11993                                  ;	The first cluster field.
 11994                                  ;	The last used SFT.
 11995                                  ;      OR In the case of a device FCB
 11996                                  ;	The low 6 bits of sf_flags (indicating device type)
 11997                                  ;	The pointer to the device header
 11998                                  ;
 11999                                  ;   We read in the particular directory sector and examine the indicated
 12000                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 12001                                  ;
 12002                                  ;   Some key items need to be remembered:
 12003                                  ;
 12004                                  ;	Even though we are caching SFTs, they may contain useful sharing
 12005                                  ;	information. We enforce good behavior on the FCBs.
 12006                                  ;
 12007                                  ;	Network support must not treat FCBs as impacting the ref counts on
 12008                                  ;	open VCs. The VCs may be closed only at process termination.
 12009                                  ;
 12010                                  ;	If this is not an installed version of the DOS, file sharing will
 12011                                  ;	always be present.
 12012                                  ;
 12013                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 12014                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 12015                                  ;
 12016                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 12017                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 12018                                  ;	proper OI record.
 12019                                  ;
 12020                                  ;   The test bits are:
 12021                                  ;
 12022                                  ;	00 -> local file
 12023                                  ;	40 -> sharing local
 12024                                  ;	80 -> network
 12025                                  ;	C0 -> local device
 12026                                  
 12027                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12028                                  ;----------------------------------------------------------------------------
 12029                                  ;
 12030                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12031                                  ;	pieces of information into the FCB to allow for subsequent
 12032                                  ;	regeneration. Poke LRU also.
 12033                                  ;
 12034                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12035                                  ;		DS:SI point to the FCB (not an extended one)
 12036                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12037                                  ;		DS:SI preserved
 12038                                  ;		ES:DI point to sft
 12039                                  ;   Registers modified: All
 12040                                  ;
 12041                                  ;
 12042                                  ;----------------------------------------------------------------------------
 12043                                  ;
 12044                                  
 12045                                  	; 20/01/2024
 12046                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12047                                  
 12048                                  SaveFCBInfo:
 12049                                  
 12050 00001879 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12051 0000187E E8C9F9                  	call	IsSFTNet
 12052 00001881 740B                    	JZ	short SaveLocal		; if not network then save local info
 12053                                  ;
 12054                                  ;----- In net support -----
 12055                                  ;
 12056                                  	; 17/05/2019 - Retro DOS v4.0
 12057                                  
 12058                                  	; MSDOS 3.3
 12059                                  	;;mov	ax,[es:di+1Dh]
 12060                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12061                                  	;;mov	[si+1Ah],ax
 12062                                  	;mov	[si+fcb_net_handle],ax
 12063                                  	;push	es
 12064                                  	;push	di
 12065                                  	;;les	di,[es:di+19h]
 12066                                  	;LES	DI,[ES:DI+sf_netid]
 12067                                  	;;mov	[si+1Ch],di
 12068                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12069                                  	;;mov 	[si+1Eh],es
 12070                                  	;MOV	[SI+fcb_netID+2],ES
 12071                                  	;pop	di
 12072                                  	;pop	es
 12073                                  
 12074                                  	; MSDOS 6.0
 12075                                  	;mov	ax,[es:di+0Bh]
 12076 00001883 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12077                                  	;mov	[si+1Ch],ax
 12078 00001887 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12079                                  	
 12080                                  	;mov	bl,80h
 12081 0000188A B380                    	MOV	BL,FCBNETWORK
 12082                                  ;
 12083                                  ;----- END In net support -----
 12084                                  ;
 12085 0000188C EB63                    	jmp	SHORT SaveSFN
 12086                                  
 12087                                  SaveLocal:
 12088                                  	;IF	Installed
 12089 0000188E E8D359                  	call	CheckShare
 12090                                  	;JZ	short SaveNoShare	; no sharer
 12091                                  	;JMP	short SaveShare		; sharer present
 12092                                  	; 16/12/2022
 12093                                  	; 28/07/2019
 12094 00001891 7559                    	jnz	short SaveShare
 12095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12096                                  	;JZ	short SaveNoShare	; no sharer
 12097                                  	;JMP	short SaveShare		; sharer present
 12098                                  
 12099                                  SaveNoShare:
 12100                                  	;;test 	word [es:di+5],80h
 12101                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12102 00001893 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12103 00001898 7542                    	JNZ	short SaveNoShareDev	; Device
 12104                                  
 12105                                  	; Save no sharing local file information
 12106                                  
 12107                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12108                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12109 0000189A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12110                                  	;mov	[si+1Dh],ax
 12111 0000189E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12112                                  
 12113                                  	; MSDOS 6.0
 12114                                  
 12115                                  	;SR; Store high byte of directory sector
 12116                                  	;mov	ax,[es:di+1Dh]
 12117 000018A1 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12118                                  	
 12119                                  	; SR;
 12120                                  	; We have to store the read-only and archive attributes of the file.
 12121                                  	; We extract it from the SFT and store it in the top two bits of the 
 12122                                  	; sector number ( sector number == 22 bits only )
 12123                                  
 12124                                  	;mov	bl,[es:di+4]
 12125 000018A5 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12126 000018A9 88DF                    	mov	bh,bl
 12127 000018AB D0CB                    	ror	bl,1
 12128 000018AD D0E7                    	shl	bh,1
 12129 000018AF 08FB                    	or	bl,bh
 12130 000018B1 80E3C0                  	and	bl,0C0h
 12131 000018B4 08D8                    	or	al,bl
 12132                                  	;mov	[si+18h],al ; 08/11/2022
 12133 000018B6 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12134                                  
 12135                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12136                                  	;mov	al,[es:di+1Fh]
 12137 000018B9 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12138                                  	;mov	[si+1Fh],al
 12139 000018BD 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12140                                  	;mov	ax,[es:di+0Bh]
 12141 000018C0 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12142                                  	;mov	[si+1Bh],ax
 12143 000018C4 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12144 000018C7 B300                    	MOV	BL,0
 12145                                  
 12146                                  	; Create the bits field from the dirty/device bits of the flags word 
 12147                                  	; and the mode byte
 12148                                  
 12149                                  SetFCBBits:
 12150                                  	;mov	ax,[es:di+5]
 12151 000018C9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12152 000018CD 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12153                                  	;or	al,[es:di+2]
 12154 000018CF 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12155                                  	;mov	[si+1Ah], al
 12156 000018D3 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12157                                  
 12158                                  	; MSDOS 6.0
 12159                                  	
 12160                                  	; SR;
 12161                                  	; Check if we came here for local file or device. If for local file, 
 12162                                  	; skip setting of SFT index
 12163                                  	
 12164 000018D6 08DB                    	or	bl,bl
 12165 000018D8 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12166                                  
 12167 000018DA EB15                    	JMP	short SaveSFN 		; go and save SFN
 12168                                  
 12169                                  	; Save no sharing local device information
 12170                                  
 12171                                  SaveNoShareDev:
 12172                                  	; 20/01/2024
 12173                                  	;;mov	ax,[es:di+7]
 12174                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12175                                  	;;mov	[si+1Ah],ax
 12176                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12177                                  	;;mov	ax,[es:di+9]
 12178                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12179                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12180                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12181 000018DC 06                      	push	es
 12182 000018DD 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12183 000018E1 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12184 000018E4 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12185 000018E7 07                      	pop	es
 12186                                  	
 12187                                  	;mov	bl,40h
 12188 000018E8 B340                    	MOV	BL,FCBDEVICE
 12189                                  	; 28/12/2022
 12190 000018EA EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12191                                  
 12192                                  SaveShare:
 12193                                  	;ENDIF
 12194                                  
 12195                                  ;----- In share support -----
 12196                                  
 12197                                  	;call	far [ss:ShSave]
 12198 000018EC 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12199                                  
 12200                                  ;----- end in share support -----
 12201                                  
 12202                                  	; 17/05/2019
 12203                                  
 12204                                  SaveSFN:
 12205                                  	;lea	ax,[di-6]
 12206 000018F1 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12207                                  	
 12208                                  	; Adjust for offset to table.
 12209                                  	
 12210 000018F4 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12211                                  
 12212 000018F9 53                      	push	bx			;bx = FCB type (net/Share or local)
 12213                                  	;;mov	bl,53 ; MSDOS 3.3
 12214                                  	;mov	bl,59 ; MSDOS 6.0
 12215 000018FA B33B                    	MOV	BL,SF_ENTRY.size
 12216 000018FC F6F3                    	DIV	BL
 12217                                  	;mov	[si+18h],al
 12218 000018FE 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12219 00001901 5B                      	pop	bx			;restore bx
 12220                                  
 12221                                  SaveNoSFN:
 12222                                  	;mov	ax,[es:di+5]
 12223 00001902 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12224 00001906 243F                    	AND	AL,3Fh			; get real drive
 12225 00001908 08D8                    	OR	AL,BL
 12226                                  	;mov	[si+19h],al
 12227 0000190A 884419                  	MOV	[SI+fcb_l_drive],AL
 12228                                  
 12229 0000190D 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12230 00001911 40                      	INC	AX
 12231                                  	;mov	[es:di+15h],ax
 12232 00001912 26894515                	MOV	[ES:DI+sf_LRU],AX
 12233 00001916 7506                    	JNZ	short SimpleStuff
 12234                                  	
 12235                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12236                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12237                                  	
 12238                                  	;mov	bx,15h
 12239 00001918 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12240 0000191B E80500                  	call	ResetLRU
 12241                                  
 12242                                  	; Set new LRU to AX
 12243                                  SimpleStuff:
 12244 0000191E 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12245 00001922 C3                      	retn
 12246                                  
 12247                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12248                                  ;----------------------------------------------------------------------------
 12249                                  ;
 12250                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12251                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12252                                  ;   at 0.
 12253                                  ;
 12254                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12255                                  ;		ES:DI point to SFT currently being updated
 12256                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12257                                  ;		AX has 8000h
 12258                                  ;   Registers modified: none
 12259                                  ;
 12260                                  ;----------------------------------------------------------------------------
 12261                                  ;
 12262                                  
 12263                                  	; 17/05/2019 - Retro DOS v4.0
 12264                                  ResetLRU:
 12265                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12266                                  	; DOSDATA
 12267                                  
 12268 00001923 B80080                  	MOV	AX,8000h
 12269 00001926 06                      	push	es
 12270 00001927 57                      	push	di
 12271                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12272 00001928 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12273                                  	;mov	cx,[es:di+4]
 12274 0000192D 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12275                                  	;lea	di,[di+6]
 12276 00001931 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12277                                  ovScan:
 12278 00001934 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12279 00001937 7703                    	JA	short ovLoop
 12280 00001939 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12281                                  ovLoop:
 12282                                  	;;add	di,53	; MSDOS 3.3
 12283                                  	;add	di,59	; MSDOS 6.0	
 12284 0000193C 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12285 0000193F E2F3                    	LOOP	ovScan
 12286 00001941 5F                      	pop	di
 12287 00001942 07                      	pop	es
 12288 00001943 268901                  	MOV	[ES:DI+BX],AX
 12289 00001946 C3                      	retn
 12290                                  
 12291                                  ;IF  0  ; We dont need this routine any more.
 12292                                  ;
 12293                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12294                                  ;----------------------------------------------------------------------------
 12295                                  ;
 12296                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12297                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12298                                  ;   count here and fill in the appropriate field.
 12299                                  ;
 12300                                  ;   Inputs:	ES:DI point to SFT
 12301                                  ;   Outputs:	ES:DI has the open age field filled in.
 12302                                  ;		If open age has wraparound, we will have subtracted 8000h
 12303                                  ;		    from all open ages.
 12304                                  ;   Registers modified: AX
 12305                                  ;
 12306                                  ;----------------------------------------------------------------------------
 12307                                  ;
 12308                                  ;SetOpenAge:
 12309                                  ;	; 20/07/2018 - Retro DOS v3.0
 12310                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12311                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12312                                  ;
 12313                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12314                                  ;
 12315                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12316                                  ;	INC	AX
 12317                                  ;	;mov	[es:di+17h],ax
 12318                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12319                                  ;	JNZ	short SetDone
 12320                                  ;	;mov	bx,17h
 12321                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12322                                  ;	call	ResetLRU
 12323                                  ;SetDone:
 12324                                  ;	MOV	[CS:OpenLRU],AX
 12325                                  ;	retn
 12326                                  ;
 12327                                  ;ENDIF	; SetOpenAge no longer needed
 12328                                  
 12329                                  ; 21/07/2018 - Retro DOS v3.0
 12330                                  ; LRUFCB for MSDOS 6.0 !
 12331                                  
 12332                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12333                                  ;----------------------------------------------------------------------------
 12334                                  ;
 12335                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12336                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12337                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12338                                  ;
 12339                                  ;   Inputs:	none
 12340                                  ;   Outputs:	ES:DI point to SFT
 12341                                  ;		ThisSFT points to SFT
 12342                                  ;		SFT is zeroed
 12343                                  ;		Carry set of closes failed
 12344                                  ;   Registers modified: none
 12345                                  ;
 12346                                  ;----------------------------------------------------------------------------
 12347                                  ;
 12348                                  ; MSDOS 6.0
 12349                                  ;IF 0	; rewritten this routine
 12350                                  ;
 12351                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12352                                  ;	call	save_world
 12353                                  ;	
 12354                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12355                                  ; to find the lease recently used one that is younger than the open age.  We
 12356                                  ; operate be scanning the list n times finding the least age that is greater
 12357                                  ; or equal to the previous minimum age.
 12358                                  ;
 12359                                  ;   BP is the count of times we need to go through this loop.
 12360                                  ;   AX is the current acceptable minimum age to consider
 12361                                  ;
 12362                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12363                                  ;	XOR	AX,AX			; low = 0;
 12364                                  ;
 12365                                  ; If we've scanned the table n times, then we are done.
 12366                                  ;
 12367                                  ;lru1:
 12368                                  ;	CMP	bp,0			; while (k--) {
 12369                                  ;	JZ	short lru75
 12370                                  ;	DEC	bp
 12371                                  ;
 12372                                  ; Set up for scan.
 12373                                  ;
 12374                                  ;   AX is the minimum age for consideration
 12375                                  ;   BX is the minimum age found during the scan
 12376                                  ;   SI is the position of the entry that corresponds to BX
 12377                                  ;
 12378                                  ;	MOV	BX,-1			;     min = 0xffff;
 12379                                  ;	MOV	si,BX			;     pos = 0xffff;
 12380                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12381                                  ;	;mov	cx,[es:di+4]
 12382                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12383                                  ;	;lea	di,[di+6]
 12384                                  ;	LEA	DI,[DI+SFT.SFTable]
 12385                                  ;
 12386                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12387                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12388                                  ; are done.  In both cases, we use the found entry.
 12389                                  ;
 12390                                  ;lru2:
 12391                                  ;	cmp	word [es:di],0
 12392                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12393                                  ;	jz	short lru25
 12394                                  ;	;cmp	word [es:di],-1
 12395                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12396                                  ;	cmp	word [es:di],sf_busy
 12397                                  ;	jnz	short lru3
 12398                                  ;
 12399                                  ; The entry is usable without further scan.  Go and use it.
 12400                                  ;
 12401                                  ;lru25:
 12402                                  ;	MOV	si,DI			;	      pos = i;
 12403                                  ;	JMP	short lru11		;	      goto got;
 12404                                  ;
 12405                                  ; See if the entry is for the network or for the sharer.
 12406                                  ;
 12407                                  ;  If for the sharer or network then
 12408                                  ;	if the age < current minimum AND >= allowed minimum then
 12409                                  ;	    this entry becomes current minimum
 12410                                  ;
 12411                                  ;lru3:
 12412                                  ;	;test	word [es:di+5],8000h
 12413                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12414                                  ;					;	  if (!net[i]
 12415                                  ;	JNZ	short lru35
 12416                                  ;if installed
 12417                                  ;	call	CheckShare		;		&& !sharing)
 12418                                  ;	JZ	short lru5		;	  else
 12419                                  ;ENDIF
 12420                                  ;
 12421                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12422                                  ; current minimum.
 12423                                  ;
 12424                                  ;lru35:
 12425                                  ;	;mov	dx,[es:di+17h]
 12426                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12427                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12428                                  ;	JB	short lru5
 12429                                  ;	CMP	DX,BX
 12430                                  ;	JAE	short lru5		;	      age[i] < min) {
 12431                                  ;
 12432                                  ; entry is new minimum.  Remember his age.
 12433                                  ;
 12434                                  ;	mov	bx,DX			;	      min = age[i];
 12435                                  ;	mov	si,di			;	      pos = i;
 12436                                  ;
 12437                                  ; End of loop.	gp back for more
 12438                                  ;
 12439                                  ;lru5:
 12440                                  ;	;add	di,53
 12441                                  ;	add	di,SF_ENTRY.size
 12442                                  ;	loop	lru2			;	      }
 12443                                  ;
 12444                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12445                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12446                                  ; complete.  Go find LRU.
 12447                                  ;
 12448                                  ;lru6:	
 12449                                  ;	cmp	si,-1			; position not -1?
 12450                                  ;	jz	short lru75		; no, done with everything
 12451                                  ;	lea	ax,[bx+1]		; set new threshold age
 12452                                  ;	jmp	short lru1		; go and loop for more
 12453                                  ;lru65:	
 12454                                  ;	stc
 12455                                  ;	jmp	short LRUDead		;	  return -1;
 12456                                  ;
 12457                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12458                                  ; network entry. We now make a second pass through to find the LRU entry
 12459                                  ; that is local-no-share or has age >= AX
 12460                                  ;
 12461                                  ;lru75:
 12462                                  ;	mov	bx,-1			; min = 0xffff;
 12463                                  ;	mov	si,bx			; pos = 0xffff;
 12464                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12465                                  ;	;mov	cx,[es:di+4]
 12466                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12467                                  ;	;lea	di,[di+6]
 12468                                  ;	LEA	DI,[DI+SFT.SFTable]
 12469                                  ;
 12470                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12471                                  ; then check for lru.
 12472                                  ;
 12473                                  ;lru8:
 12474                                  ;	;test	word [es:di+5],8000h
 12475                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12476                                  ;	jnz	short lru85		; is for network, go check age
 12477                                  ;	call	CheckShare		; sharer here?
 12478                                  ;	jz	short lru86		; no, go check lru
 12479                                  ;
 12480                                  ; Network or sharer.  Check age
 12481                                  ;
 12482                                  ;lru85:
 12483                                  ;	;cmp	[es:di+17h],ax
 12484                                  ;	cmp	[es:di+sf_OpenAge],ax
 12485                                  ;	jb	short lru9		; age is before threshold, skip it
 12486                                  ;
 12487                                  ; Check LRU
 12488                                  ;
 12489                                  ;lru86:
 12490                                  ;	;cmp	[es:di+15h],bx
 12491                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12492                                  ;	jae	short lru9		; no, skip this
 12493                                  ;	mov	si,di			; remember position
 12494                                  ;	;mov	bx,[es:di+15h]
 12495                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12496                                  ;
 12497                                  ; Done with this entry, go back for more.
 12498                                  ;
 12499                                  ;lru9:
 12500                                  ;	;add	di, 53
 12501                                  ;	add	di,SF_ENTRY.size
 12502                                  ;	loop	lru8
 12503                                  ;
 12504                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12505                                  ; out. The conditions here are:
 12506                                  ;
 12507                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12508                                  ;
 12509                                  ;lru10:
 12510                                  ;	cmp	si,-1			; if no one f
 12511                                  ;	jz	short lru65		;     return -1;
 12512                                  ;lru11:
 12513                                  ;	mov	di,si
 12514                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12515                                  ;	MOV	[CS:THISSFT+2],ES
 12516                                  ;
 12517                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12518                                  ; is 0.
 12519                                  ;
 12520                                  ;	;test	word [es:di+5],8000h
 12521                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12522                                  ;	JNZ	short LRUClose
 12523                                  ;IF INSTALLED
 12524                                  ;	call	CheckShare
 12525                                  ;	JZ	short LRUDone
 12526                                  ;ENDIF
 12527                                  ;
 12528                                  ; Repeat close until ref count is 0
 12529                                  ;
 12530                                  ;LRUClose:
 12531                                  ;	push	ss
 12532                                  ;	pop	ds
 12533                                  ;	LES	DI,[THISSFT]
 12534                                  ;	cmp     word [es:di],0
 12535                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12536                                  ;	JZ	short LRUDone 		; nope, all done
 12537                                  ;	call	DOS_CLOSE
 12538                                  ;	jnc	short LRUClose		; no error => clean up
 12539                                  ;	;cmp	al,6
 12540                                  ;	cmp	al,error_invalid_handle
 12541                                  ;	jz	short LRUClose
 12542                                  ;	stc
 12543                                  ;	JMP	short LRUDead
 12544                                  ;LRUDone:
 12545                                  ;	XOR	AL,AL
 12546                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12547                                  ;
 12548                                  ;LRUDead:
 12549                                  ;	call	restore_world
 12550                                  ;	LES     DI,[CS:THISSFT]
 12551                                  ;	jnc	short LRUFCB_retn
 12552                                  ;LRUFCB_err:
 12553                                  ;	; mov	al, 23h	
 12554                                  ;	MOV	AL,error_FCB_unavailable
 12555                                  ;LRUFCB_retn:	
 12556                                  ;	retn:
 12557                                  ;
 12558                                  ;ENDIF	; LRUFCB has been rewritten below.
 12559                                  
 12560                                  ; 17/05/2019 - Retro DOS v4.0
 12561                                  ; LRUFCB for MSDOS 6.0 !
 12562                                  ;----------------------------------------------------------------------------
 12563                                  ;
 12564                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12565                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12566                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12567                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12568                                  ; optimize regeneration operations by keeping track of the current local
 12569                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12570                                  ; local SFT in the SFT Block.
 12571                                  ;
 12572                                  ; Inputs: al = 0 => Regenerate SFT operation
 12573                                  ;	    = 1 => Allocate new SFT for Open/Create
 12574                                  ;
 12575                                  ; Outputs: Carry clear
 12576                                  ;	 	es:di = Address of allocated SFT
 12577                                  ;	  	ThisSFT = Address of allocated SFT
 12578                                  ;
 12579                                  ;	  carry set if closes of net/Share files failed 
 12580                                  ;		al = error_FCB_unavailable
 12581                                  ;
 12582                                  ; Registers affected: None
 12583                                  ;
 12584                                  ;----------------------------------------------------------------------------
 12585                                  
 12586                                  ;LruFCB	PROC	NEAR
 12587                                  LRUFCB:
 12588                                  	; 17/05/2019 - Retro DOS v4.0
 12589                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12590                                  
 12591                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12592                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12593                                  
 12594                                  	; 20/01/2024
 12595                                  
 12596 00001947 06                      	push	es	; * (MSDOS 6.21)
 12597                                  	
 12598 00001948 E817EB                  	call	save_world
 12599                                  	
 12600                                  	;getdseg <ds>		;ds = DOSDATA
 12601 0000194B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12602                                  
 12603 00001950 08C0                    	or	al,al		;Check if regenerate allocation
 12604 00001952 7516                    	jnz	short lru1	;Try to find SFT to use
 12605                                  
 12606                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12607                                  	; local SFT, just return that SFT to reuse
 12608                                  
 12609                                  	; 20/01/2024
 12610                                  	;mov	di,[LocalSFT]
 12611                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12612                                  	;jz	short lru1	;invalid local SFT, find one
 12613                                  
 12614                                  	; We have found a valid local SFT. Recycle this SFT
 12615                                  
 12616 00001954 C43E[4410]              	les	di,[LocalSFT]
 12617                                  
 12618                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12619 00001958 8CC1                    	mov	cx,es
 12620 0000195A 09F9                    	or	cx,di		; is address == 0?
 12621 0000195C 740C                    	jz	short lru1	; invalid local SFT, find one
 12622                                  
 12623                                  gotlocalSFT:
 12624 0000195E 893E[9E05]              	mov	[THISSFT],di
 12625 00001962 8C06[A005]              	mov	[THISSFT+2],es
 12626 00001966 F8                      	clc
 12627 00001967 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12628                                  
 12629                                  lru1:
 12630 0000196A C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12631                                  	;mov	cx,[es:di+4]
 12632 0000196E 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12633                                  	;lea	di,[di+6]
 12634 00001972 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12635                                  
 12636                                  	; We scan through all the SFTs scanning for a free one. It also 
 12637                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12638                                  	; bx = min. LRU for local SFTs
 12639                                  	; si = pos. of local SFT with min. LRU
 12640                                  	; dx = min. LRU for net/Share SFTs
 12641                                  	; bp = pos. of net/Share SFT with min. LRU
 12642                                  
 12643 00001975 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12644 00001978 89DE                    	mov	si,bx
 12645 0000197A 89DA                    	mov	dx,bx
 12646 0000197C 89DD                    	mov	bp,bx
 12647                                  
 12648                                  findSFT:
 12649                                  	;See if this SFT is a free one. If so, return it
 12650 0000197E 26830D00                	or	word [es:di],0
 12651                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12652 00001982 744C                    	jz	short gotSFT	;yes, SFT is free
 12653                                  	;;cmp	word [es:di],-1
 12654                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12655 00001984 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12656 00001988 7446                    	jz	short gotSFT	;no, can use it
 12657                                  
 12658                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12659                                  	; used for a later regen.
 12660                                  
 12661                                  	; 16/12/2022
 12662                                  	; 08/11/2022
 12663                                  	;test	byte [es:di+6],80h
 12664 0000198A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12665                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12666                                  	;;test	word [es:di+5],8000h
 12667                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12668 0000198F 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12669                                  
 12670                                  ;IF installed
 12671 00001991 E8D058                  	call	CheckShare	;Share present?
 12672                                  ;ENDIF
 12673 00001994 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12674                                  
 12675                                  	;Local SFT, register its address
 12676                                  
 12677                                  	; !!HACK!!!
 12678                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12679                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12680                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12681                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12682                                  	; out the code that previously existed at label 'gotSFT'
 12683                                  
 12684                                  hackpoint:
 12685 00001996 893E[4410]              	mov	[LocalSFT],di
 12686 0000199A 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12687                                  
 12688 0000199E 08C0                    	or	al,al		;Is operation = REGEN?
 12689 000019A0 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12690                                  
 12691                                  	;Get LRU for local files
 12692                                  	
 12693                                  	;cmp	[es:di+15h],bx
 12694 000019A2 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12695 000019A6 7306                    	jae	short lru4	;no, skip 
 12696                                  
 12697                                  	;mov	bx,[es:di+15h]
 12698 000019A8 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12699 000019AC 89FE                    	mov	si,di		;store SFT position
 12700                                  lru4:
 12701                                  	;add	di,59
 12702 000019AE 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12703 000019B1 E2CB                    	loop	findSFT
 12704                                  	
 12705                                  	; 20/01/2024
 12706 000019B3 49                      	dec	cx ; -1
 12707                                  
 12708                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12709                                  	; available, we will reuse it instead of net/Share LRU
 12710                                  
 12711 000019B4 89F7                    	mov	di,si
 12712                                  	;cmp	si,-1		;local SFT available?
 12713 000019B6 39CE                    	cmp	si,cx ; 20/01/2024
 12714 000019B8 7516                    	jnz	short gotSFT	;yes, return it
 12715                                  
 12716                                  	;No local SFT, see if we got a net/Share SFT
 12717                                  
 12718 000019BA 89EF                    	mov	di,bp
 12719                                  
 12720 000019BC 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12721                                  	;cmp	bp,-1		;net/Share SFT available?
 12722 000019BE 752D                    	jnz	short gotnetSFT	;yes, return it
 12723                                  noSFT:
 12724                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12725                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12726                                  	; count is not maintained properly.
 12727                                  
 12728 000019C0 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12729                                  
 12730                                  	; Handle the LRU for net/Share SFTs
 12731                                  lru5:
 12732                                  	;cmp	[es:di+15h],dx
 12733 000019C2 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12734 000019C6 73E6                    	jae	short lru4	;no, skip
 12735                                  
 12736                                  	;mov	dx,[es:di+15h]
 12737 000019C8 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12738                                  
 12739 000019CC 89FD                    	mov	bp,di		;store SFT position
 12740 000019CE EBDE                    	jmp	short lru4	;continue with next SFT
 12741                                  
 12742                                  gotSFT:
 12743 000019D0 08C0                    	or	al,al
 12744 000019D2 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12745                                  
 12746                                  	; HACK!!!
 12747                                  	; The code here differs from the code at 'hackpoint' only in the
 12748                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12749                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12750                                  	; has been commented out below and replaced by the code just above.
 12751                                  
 12752                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12753                                  ;
 12754                                  ;	or	al,al		  ;Regen?
 12755                                  ;	jnz	short notlocaluse ;yes, register it and return
 12756                                  ;
 12757                                  ;Register this SFT as a local one
 12758                                  ;
 12759                                  ;	mov	[LocalSFT],di
 12760                                  ;	mov	[LocalSFT+2],es
 12761                                  ;	jmp	gotlocalSFT	;return to caller
 12762                                  ;
 12763                                  ;notlocaluse:
 12764                                  
 12765                                  	; The caller is probably going to use this SFT for a net/Share file.
 12766                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12767                                  	; does not really know whether it is a local file or not. We
 12768                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12769                                  	; registered as a local SFT that can be recycled.
 12770                                  
 12771 000019D4 8CC0                    	mov	ax,es
 12772 000019D6 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12773 000019DA 750E                    	jne	short notinvalid
 12774 000019DC 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12775                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12776                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12777 000019E0 7508                    	jne	short notinvalid
 12778                                  zerolocalSFT:	
 12779 000019E2 31C0                    	xor	ax,ax ; 0
 12780 000019E4 A3[4410]                	mov	[LocalSFT],ax
 12781 000019E7 A3[4610]                	mov	[LocalSFT+2],ax
 12782                                  	
 12783                                  notinvalid:
 12784 000019EA E971FF                  	jmp	gotlocalSFT
 12785                                  
 12786                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12787                                  	; Invalidate this variable i.e LocalSFT = NULL
 12788                                  
 12789                                  ;zerolocalSFT:
 12790                                  	;xor	ax,ax ; 0
 12791                                  	;mov	[LocalSFT],ax
 12792                                  	;mov	[LocalSFT+2],ax
 12793                                  	;
 12794                                  	;jmp	gotlocalSFT
 12795                                  
 12796                                  gotnetSFT:
 12797                                  	; We have an SFT that is currently net/Share. If it is going to be
 12798                                  	; used for a regen, we know it has to be a local SFT. Update the
 12799                                  	; LocalSFT variable
 12800                                  
 12801 000019ED 08C0                    	or	al,al
 12802 000019EF 7508                    	jnz	short closenet
 12803                                  
 12804 000019F1 893E[4410]              	mov	[LocalSFT],di
 12805 000019F5 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12806                                  closenet:
 12807 000019F9 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12808 000019FD 8C06[A005]              	mov	[THISSFT+2],es
 12809                                  
 12810                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12811                                  	; count is 0.
 12812                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12813                                  	; recycled -- no need to check for this.
 12814                                  
 12815                                  LRUClose:
 12816 00001A01 26833D00                	cmp	word [es:di],0
 12817                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12818 00001A05 740C                    	jz	short LRUDone	; nope, all done
 12819                                  
 12820 00001A07 E8A414                  	call	DOS_CLOSE
 12821 00001A0A 73F5                    	jnc	short LRUClose	; no error => clean up
 12822                                  
 12823                                  	; Bugbug: I dont know why we are trying to close after we get an
 12824                                  	; error closing. Seems like we could have a potential infinite loop
 12825                                  	; here. This has to be verified.
 12826                                  
 12827 00001A0C 3C06                    	cmp	al,error_invalid_handle ; 6
 12828 00001A0E 74F1                    	je	short LRUClose
 12829                                  errorbadSFT:
 12830 00001A10 F9                      	stc
 12831 00001A11 EB05                    	JMP	short LRUDead
 12832                                  LRUDone:
 12833 00001A13 30C0                    	XOR	AL,AL
 12834 00001A15 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12835                                  
 12836                                  LRUDead:
 12837 00001A18 E830EA                  	call	restore_world		; use macro
 12838                                  	
 12839 00001A1B 07                      	pop	es ; * (MSDOS 6.21)
 12840                                  
 12841                                  	;getdseg <es>
 12842 00001A1C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12843 00001A21 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12844                                  
 12845                                  	;;retnc
 12846                                  	;jc	short LruFCB_err
 12847                                  	;retn
 12848                                  
 12849                                  	; 16/12/2022
 12850                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12851 00001A26 7302                    	jnc	short LruFCB_retn
 12852                                  	;jc	short LruFCB_err
 12853                                  	;retn
 12854                                  		
 12855                                  LruFCB_err:
 12856 00001A28 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12857                                  LruFCB_retn:
 12858 00001A2A C3                      	retn
 12859                                  	
 12860                                  ;LruFCB	ENDP
 12861                                  
 12862                                  ; 17/05/2019 - Retro DOS v4.0
 12863                                  
 12864                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12865                                  
 12866                                  ; --------------------------------------------------------------------------
 12867                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12868                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12869                                  ; to copy the name to different destinations
 12870                                  ;
 12871                                  ; Inputs: ds:si = source string
 12872                                  ;	 es:di = destination string
 12873                                  ;	 cx = length of string
 12874                                  ;
 12875                                  ; Outputs: String copied to destination
 12876                                  ;
 12877                                  ; Registers affected: cx,di,si
 12878                                  ; --------------------------------------------------------------------------
 12879                                  
 12880                                  RegenCopyName:
 12881                                  CopyName:
 12882 00001A2B AC                      	lodsb			;load character
 12883 00001A2C E84335                  	call	UCase		; convert char to upper case
 12884                                  StuffChar2:
 12885 00001A2F AA                      	STOSB			;store converted character
 12886 00001A30 E2F9                    	LOOP	CopyName	;
 12887                                  DoneName:
 12888 00001A32 C3                      	retn
 12889                                  
 12890                                  ; --------------------------------------------------------------------------
 12891                                  
 12892                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12893                                  FCBRegen:
 12894                                  	; called from SFTFromFCB. SS already DOSDATA
 12895                                  
 12896                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12897                                  	; we do not fill, size we do no fill, position we do not fill,
 12898                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12899                                  
 12900                                  	;mov	al,[si+19h]
 12901 00001A33 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12902                                  
 12903                                  	; We discriminate based on the first two bits in the reserved field.
 12904                                  	
 12905                                  	;test	al,80h
 12906 00001A36 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12907 00001A38 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12908                                  
 12909                                  	; The FCB is for a network or a sharing based system. At this point 
 12910                                  	; we have already closed the SFT for this guy and reconnection is 
 12911                                  	; impossible.
 12912                                  	;
 12913                                  	; Remember that he may have given us a FCB with bogus information in
 12914                                  	; it. Check to see if sharing is present or if the redir is present.
 12915                                  	; If either is around, presume that we have cycled out the FCB and 
 12916                                  	; give the hard error. Otherwise, just return with carry set.
 12917                                  
 12918 00001A3A E82758                  	call	CheckShare		; test for sharer
 12919 00001A3D 7509                    	JNZ	short RegenFail		; yep, fail this.
 12920                                  	
 12921                                  	;mov	ax,1100h
 12922 00001A3F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12923 00001A42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12924                                  			; Return: AL = 00h  not installed, OK to install
 12925                                  			; 01h  not installed, not OK to install
 12926                                  			; FFh  installed
 12927 00001A44 08C0                    	OR	AL,AL			; is it there?
 12928 00001A46 740C                    	JZ	short RegenDead		; no, just fail the operation
 12929                                  RegenFail:
 12930                                  	; 17/05/2019 - Retro DOS v4.0
 12931                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12932 00001A48 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12933                                  
 12934                                  	;cmp	ah,10h
 12935 00001A4C 80FC10                  	cmp	AH,FCB_CLOSE
 12936 00001A4F 7403                    	jz	short RegenDead
 12937 00001A51 E88B01                  	call	FCBHardErr		; massive hard error.
 12938                                  RegenDead:
 12939 00001A54 F9                      	STC				; carry set
 12940                                  FCBRegen_retn:
 12941 00001A55 C3                      	retn
 12942                                  
 12943                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12944                                  	; so fail the operation.
 12945                                  
 12946                                  RegenNoSharing:
 12947 00001A56 E80B58                  	call	CheckShare		; Sharing around?
 12948 00001A59 75ED                    	JNZ	short RegenFail
 12949                                  	
 12950                                  	; Find an SFT for this guy.
 12951                                  	
 12952                                  	; 17/05/2019 - Retro DOS v4.0
 12953                                  
 12954                                  	; MSDOS 3.3
 12955                                  	;call	LRUFCB
 12956                                  	;jc	short FCBRegen_retn
 12957                                  	
 12958                                  	; MSDOS 6.0
 12959 00001A5B 50                      	push	ax
 12960 00001A5C B000                    	mov	al,0			;indicate it is a regen operation
 12961 00001A5E E8E6FE                  	call	LRUFCB
 12962 00001A61 58                      	pop	ax
 12963 00001A62 72F1                    	jc	short FCBRegen_retn
 12964                                  
 12965                                  	;mov	word [es:di+2],8002h
 12966 00001A64 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12967 00001A6A 243F                    	AND	AL,3Fh			; get drive number for flags
 12968 00001A6C 98                      	CBW
 12969                                  	;or	ax,4000h
 12970 00001A6D 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12971                                  
 12972                                  	; The bits field consists of the upper two bits (dirty and device) 
 12973                                  	; from the SFT and the low 4 bits from the open mode.
 12974                                  
 12975                                  	;mov	cl,[si+1Ah]
 12976 00001A70 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12977 00001A73 88CD                    	MOV	CH,CL
 12978 00001A75 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12979 00001A78 08E8                    	OR	AL,CH
 12980                                  	;and	cl,0Fh
 12981 00001A7A 80E10F                  	AND	CL,access_mask		; get the mode bits
 12982                                  	;mov	[es:di+2],cl
 12983 00001A7D 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12984                                  	;mov	[es:di+5],ax
 12985 00001A81 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12986                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12987 00001A85 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12988                                  	;mov	[es:di+31h],ax
 12989 00001A89 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12990 00001A8D 1E                      	push	ds
 12991 00001A8E 56                      	push	si
 12992 00001A8F 06                      	push	es
 12993 00001A90 57                      	push	di
 12994 00001A91 16                      	push	ss
 12995 00001A92 07                      	pop	es
 12996 00001A93 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12997                                  
 12998 00001A96 B90800                  	MOV	CX,8
 12999 00001A99 46                      	INC	SI			; Skip past drive byte to name in FCB
 13000                                  
 13001                                  	; MSDOS 3.3
 13002                                  ;RegenCopyName:
 13003                                  	;lodsb
 13004                                  	;call	UCase
 13005                                  	;stosb
 13006                                  	;loop	RegenCopyName
 13007                                  
 13008                                  	; MSDOS 6.0
 13009 00001A9A E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 13010                                  
 13011 00001A9D 16                      	push	ss	; SS is DOSDATA
 13012 00001A9E 1F                      	pop	ds
 13013                                  
 13014                                  	;mov	byte [ATTRIB],16h
 13015 00001A9F C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 13016                                  					; Must set this to something interesting
 13017                                  					; to call DEVNAME.
 13018 00001AA4 E84826                  	call	DEVNAME 		; check for device
 13019 00001AA7 5E                      	pop	si
 13020 00001AA8 07                      	pop	es
 13021 00001AA9 5E                      	pop	si
 13022 00001AAA 1F                      	pop	ds
 13023 00001AAB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13024                                  
 13025                                  	; Device found. We can ignore disk-specific info
 13026                                  
 13027                                  	;mov	[es:di+5],bh
 13028 00001AAD 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13029                                  	;mov	byte [es:di+4],0
 13030 00001AB1 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13031                                  					; SS override
 13032                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13033 00001AB6 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13034                                  	;mov	[es:di+7],si
 13035 00001ABB 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13036                                  	;mov	[es:di+9],ds
 13037 00001ABF 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13038 00001AC3 C3                      	retn				; carry is clear
 13039                                  
 13040                                  RegenDeadJ:
 13041 00001AC4 EB8E                    	JMP	short RegenDead
 13042                                  
 13043                                  	; File found. Just copy in the remaining pieces.
 13044                                  
 13045                                  RegenFileNoSharing:
 13046                                  	;mov	ax,[es:di+5]
 13047 00001AC6 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13048 00001ACA 83E03F                  	AND	AX,03Fh
 13049 00001ACD 1E                      	push	ds
 13050 00001ACE 56                      	push	si
 13051 00001ACF E81F4E                  	call	FIND_DPB
 13052                                  	;mov	[es:di+7],si
 13053 00001AD2 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13054                                  	;mov	[es:di+9],ds
 13055 00001AD6 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13056 00001ADA 5E                      	pop	si
 13057 00001ADB 1F                      	pop	ds
 13058 00001ADC 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13059                                  					; indicator was bogus
 13060                                  	;mov	ax,[si+1Dh]
 13061 00001ADE 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13062                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13063                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13064 00001AE1 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13065                                  
 13066                                  	; MSDOS 6.0
 13067                                  
 13068                                  	; SR;
 13069                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13070                                  	; number
 13071                                  
 13072                                  	;mov	al,[si+18h]
 13073 00001AE5 8A4418                  	mov	al,[si+fcb_sfn]
 13074 00001AE8 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13075 00001AEA 88C4                    	mov	ah,al
 13076 00001AEC D0C4                    	rol	ah,1
 13077 00001AEE D0E8                    	shr	al,1
 13078 00001AF0 08E0                    	or	al,ah
 13079 00001AF2 243F                    	and	al,03Fh		;mask off unused bits
 13080                                  	;mov	[es:di+4],al
 13081 00001AF4 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13082                                  
 13083                                  	; SR;
 13084                                  	; Update the higher word of the directory sector from the FCB
 13085                                  
 13086                                  	;;mov	al,[si+18h]
 13087 00001AF8 8A4418                  	mov	al,[si+fcb_sfn]
 13088 00001AFB 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13089 00001AFD 28E4                    	sub	ah,ah
 13090                                  	;mov	[es:di+1Dh],ax
 13091 00001AFF 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13092                                  
 13093                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13094                                  	;mov	ax,[si+1Bh]
 13095 00001B03 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13096                                  	;mov	[es:di+0Bh],ax
 13097 00001B06 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13098                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13099                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13100 00001B0A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13101                                  	;mov	al,[si+1Fh]
 13102 00001B0E 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13103                                  	;mov  	[es:di+1Fh],al
 13104 00001B11 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13105                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13106 00001B15 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13107                                  					; Existing FCB entries would be
 13108                                  					; flushed unnecessarily because of
 13109                                  					; check in CheckFCB of the ref_count.
 13110                                  					; July 22/85 - BAS
 13111                                  	;lea	si,[si+1]
 13112 00001B18 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13113                                  	;lea	di,[di+20h]
 13114 00001B1B 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13115                                  	;mov	cx,11
 13116 00001B1E B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13117                                  	
 13118                                  	; MSDOS 6.0
 13119 00001B21 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13120                                  	
 13121                                  	; MSDOS 3.3
 13122                                  ;RegenCopyName2:
 13123                                  	;lodsb
 13124                                  	;call    UCase
 13125                                  	;stosb
 13126                                  	;loop    RegenCopyName2
 13127                                  
 13128 00001B24 F8                      	clc
 13129 00001B25 C3                      	retn
 13130                                  
 13131                                  ; 17/05/2019 - Retro DOS v4.0
 13132                                  
 13133                                  ;**	BlastSFT - FIll SFT with Garbage
 13134                                  ; --------------------------------------------------------------------------
 13135                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13136                                  ;	various garbage values to put into the SFT.  I don't know why,
 13137                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13138                                  ;	necessary to show that the SFT is free after filling it.
 13139                                  ;
 13140                                  ;	ENTRY	(es:di) = address of SFT
 13141                                  ;		(al) = fill character
 13142                                  ;	EXIT	(ax) = -1
 13143                                  ;		'C' clear
 13144                                  ;	USES	AX, CX, Flags
 13145                                  
 13146                                  BlastSFT:
 13147 00001B26 57                      	push	di
 13148                                  	;mov	cx,53 ; MSDOS 3.3
 13149                                  	;mov	cx,59 ; MSDOS 6.0
 13150 00001B27 B93B00                  	mov	cx,SF_ENTRY.size
 13151 00001B2A F3AA                    	rep	stosb
 13152 00001B2C 5F                      	pop	di
 13153 00001B2D 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13154 00001B2F 268905                  	mov	[es:di],ax
 13155                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13156                                  	;mov	[es:di+15h],ax
 13157 00001B32 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13158 00001B36 48                      	dec	ax	; -1					    ;
 13159                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13160 00001B37 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13161                                  BlastSFT_retn:
 13162 00001B3B C3                      	retn				; return with 'C' clear     ;
 13163                                  
 13164                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13165                                  ; --------------------------------------------------------------------------
 13166                                  ;
 13167                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13168                                  ;   regenerated.
 13169                                  ;
 13170                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13171                                  ;		AL is SFT index
 13172                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13173                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13174                                  ;   Registers modified: AX and BX
 13175                                  ;
 13176                                  ; --------------------------------------------------------------------------
 13177                                  
 13178                                  	; 21/01/2024
 13179                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13180                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13181                                  CheckFCB:
 13182                                  		
 13183                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13184                                  
 13185                                  	; MSDOS 3.3
 13186                                  
 13187                                  	; LES	DI,[CS:SFTFCB]
 13188                                  
 13189                                  	; MSDOS 6.0
 13190                                  	
 13191                                  	; SR;
 13192                                  	; We check if the given FCB is for a local file. If so, we return a 
 13193                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13194                                  
 13195                                  	;test	byte [si+19h],0C0h
 13196 00001B3C F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13197 00001B40 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13198 00001B42 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13199                                  
 13200                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13201                                  	;cmp	[es:di+4],al
 13202 00001B47 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13203 00001B4B 723C                    	JC	short BadSFT
 13204                                  	;;mov	bl,53 ; MSDOS 3.3
 13205                                  	;mov	bl,59 ; MSDOS 6.0
 13206 00001B4D B33B                    	MOV	BL,SF_ENTRY.size
 13207 00001B4F F6E3                    	MUL	BL
 13208                                  	;lea	di,[di+6]
 13209 00001B51 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13210 00001B54 01C7                    	ADD	DI,AX
 13211                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13212 00001B56 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13213                                  	;cmp	[es:di+31h],ax
 13214 00001B5A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13215 00001B5E 7529                    	JNZ	short BadSFT		; must match process
 13216 00001B60 26833D00                	cmp	word [es:di],0
 13217                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13218 00001B64 7423                    	JZ	short BadSFT		; must also be in use
 13219                                  	;mov	al,[si+19h]
 13220 00001B66 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13221                                  	;test	al,80h
 13222 00001B69 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13223 00001B6B 7428                    	JZ	short CheckNoShare	; No. try local or device
 13224                                  
 13225                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13226                                  	; FCBSHARE is a superset of FCBNETWORK.
 13227                                  
 13228 00001B6D 50                      	PUSH	AX
 13229                                  	;and	al,0C0h
 13230 00001B6E 24C0                    	AND	AL,FCBMASK
 13231                                  	;cmp	al,0C0h
 13232 00001B70 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13233 00001B72 58                      	POP	AX
 13234 00001B73 7516                    	JNZ	short CheckNet		; yes
 13235                                  ;
 13236                                  ;----- In share support -----
 13237                                  ;
 13238                                  	;call	far [cs:JShare+(11*4)]
 13239 00001B75 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13240 00001B7A 720D                    	JC	short BadSFT
 13241                                  
 13242                                  ; 21/01/2024
 13243                                  %if 0
 13244                                  	JMP	SHORT CheckD
 13245                                  ;
 13246                                  ;----- End in share support -----
 13247                                  ;
 13248                                  	; 09/11/2022
 13249                                  	; (There is not any procedure/sub
 13250                                  	;  which calls or jumps to CheckFirClus here)
 13251                                  	;;;
 13252                                  CheckFirClus:
 13253                                  	;cmp     bx,[es:di+0Bh]
 13254                                  	; 07/12/2022
 13255                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13256                                  	JNZ	short BadSFT
 13257                                  	;;;
 13258                                  %endif
 13259                                  
 13260                                  CheckD: 
 13261 00001B7C 243F                    	AND	AL,3Fh
 13262                                  	;mov	ah,[es:di+5]
 13263 00001B7E 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13264 00001B82 80E43F                  	AND	AH,3Fh
 13265 00001B85 38C4                    	CMP	AH,AL
 13266                                  	; 16/12/2022
 13267 00001B87 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13269                                  	;jnz	short BadSFT
 13270                                  ;CheckD_retn:
 13271                                  	;retn
 13272                                  BadSFT: 
 13273 00001B89 F9                      	STC
 13274 00001B8A C3                      	retn
 13275                                  				
 13276                                  CheckNet:
 13277                                  	; 17/05/2019 - Retro DOS v4.0
 13278                                  	
 13279                                  ;----- In net support -----
 13280                                  
 13281                                  	; MSDOS 3.3
 13282                                  	;;mov	ax,[si+1Ah]
 13283                                  	;mov	ax,[si+fcb_net_handle]
 13284                                  	;;cmp	ax,[es:di+1Dh]
 13285                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13286                                  	;jnz	short BadSFT
 13287                                  	;;cmp	ax,[es:di+19h]
 13288                                  	;cmp	ax,[ES:DI+sf_netid]
 13289                                  	;jnz     short BadSFT
 13290                                  	;;mov	ax,[si+1Eh]
 13291                                  	;mov	ax,[si+fcb_l_attr]
 13292                                  	;;cmp	ax,[es:di+1Bh]
 13293                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13294                                  	;jnz     short BadSFT
 13295                                  
 13296                                  	; MSDOS 6.0
 13297                                  	;mov	ax,[si+1Ch]
 13298 00001B8B 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13299                                  	; 09/11/2022
 13300                                  	;cmp	ax,[es:di+0Bh] 
 13301 00001B8E 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13302 00001B92 75F5                    	JNZ	short BadSFT
 13303                                  
 13304                                  ;----- END In net support -----
 13305                                  
 13306                                  CheckNet_retn:
 13307 00001B94 C3                      	retn
 13308                                  
 13309                                  CheckNoShare:
 13310                                  
 13311                                  ; 16/12/2022
 13312                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13313                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13314                                  ;	;test	al,40h
 13315                                  ;	test	AL,FCBDEVICE		; Device?
 13316                                  ;	;jnz	short $+2 ; 09/11/2022
 13317                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13318                                  
 13319                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13320                                  	;;mov	bx,[si+1Dh]
 13321                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13322                                  	;;cmp	bx,[es:di+1Dh]
 13323                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13324                                  	;jnz	short BadSFT
 13325                                  	;;mov	bl,[si+1Fh]
 13326                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13327                                  	;;cmp	bl,[es:di+1Fh]
 13328                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13329                                  	;jnz	short BadSFT
 13330                                  	;;mov	bl,[si+1Ah]
 13331                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13332                                  	;;mov	bh,[es:di+5]
 13333                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13334                                  	;xor	bh,bl
 13335                                  	;and	bh,0C0h
 13336                                  	;jnz	short BadSFT
 13337                                  	;;xor	bl,[es:di+2]
 13338                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13339                                  	;and	bl,0Fh
 13340                                  	;jnz	short BadSFT
 13341                                  	;push	di
 13342                                  	;push	si
 13343                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13344                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13345                                  	;;lea	si,[si+1]
 13346                                  	;LEA	SI,[SI+SYS_FCB.name]
 13347                                  	;;mov	cx,11
 13348                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13349                                  	;repe	cmpsb
 13350                                  	;pop	si
 13351                                  	;pop	di
 13352                                  	;jnz	short BadSFT
 13353                                  	;;mov	bx,[si+1Bh]
 13354                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13355                                  	;jmp	short CheckFirClus
 13356                                  
 13357                                  	; MSDOS 6.0
 13358                                  
 13359                                  	; SR;
 13360                                  	; The code below to match a local FCB with its SFT can no longer be
 13361                                  	; used. We just return a no-match status. This check is done right
 13362                                  	; at the top.
 13363                                  
 13364                                  CheckNoShareDev:
 13365                                  	;mov	bx,[si+1Ah]
 13366 00001B95 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13367                                  	;cmp	bx,[es:di+7]
 13368 00001B98 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13369 00001B9C 75EB                    	JNZ	short BadSFT
 13370                                  	;mov	bx,[si+1Ch]
 13371 00001B9E 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13372                                  	;cmp	bx,[es:di+9]
 13373 00001BA1 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13374 00001BA5 75E2                    	JNZ	short BadSFT
 13375 00001BA7 EBD3                    	JMP	short CheckD
 13376                                  
 13377                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13378                                  ;----------------------------------------------------------------------------
 13379                                  ;
 13380                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13381                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13382                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13383                                  ;	with PID
 13384                                  ;
 13385                                  ;   Inputs:	DS:SI point to FCB
 13386                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13387                                  ;		Carry clear -> OK ES:DI -> SFT
 13388                                  ;		Carry set -> error in ax
 13389                                  ;   Registers modified: ES,DI, AX
 13390                                  ;
 13391                                  ;----------------------------------------------------------------------------
 13392                                  
 13393                                  SFTFromFCB:
 13394                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13395                                  
 13396                                  	; 17/05/2019 - Retro DOS v4.0
 13397                                  
 13398 00001BA9 50                      	push	ax
 13399 00001BAA 53                      	push	bx
 13400                                  	;mov	al,[si+18h]
 13401 00001BAB 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13402 00001BAE E88BFF                  	call	CheckFCB
 13403 00001BB1 5B                      	pop	bx
 13404 00001BB2 58                      	pop	ax
 13405                                  	;MOV	[CS:THISSFT],DI		; SS override
 13406                                  	;MOV	[CS:THISSFT+2],ES
 13407 00001BB3 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13408 00001BB8 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13409 00001BBD 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13410                                  	
 13411                                  	; 09/11/2022 (MSDOS 5.0)
 13412                                  	; 31/05/2019
 13413 00001BBF 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13414 00001BC0 E89FE8                  	call	save_world
 13415 00001BC3 E86DFE                  	call	FCBRegen
 13416 00001BC6 E882E8                  	call	restore_world		; use macro restore world
 13417 00001BC9 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13418                                  
 13419                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13420 00001BCA 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13421 00001BCE 72C4                    	jc	short CheckNet_retn
 13422                                  
 13423                                  Set_SFT: 
 13424                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13425 00001BD0 36C43E[9E05]            	les	di,[ss:THISSFT]
 13426                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13427 00001BD5 36FF36[3C03]            	push	word [ss:PROC_ID]
 13428                                  	;pop	word [es:di+31h]
 13429 00001BDA 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13430 00001BDE C3                      	retn				; carry is clear
 13431                                  
 13432                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13433                                  ;----------------------------------------------------------------------------
 13434                                  ;
 13435                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13436                                  ;	unavailable FCB.
 13437                                  ;
 13438                                  ;   Inputs:	none.
 13439                                  ;   Outputs:	none.
 13440                                  ;   Registers modified: all
 13441                                  ;
 13442                                  ;----------------------------------------------------------------------------
 13443                                  
 13444                                  FCBHardErr:
 13445                                  	; 17/05/2019 - Retro DOS v4.0
 13446 00001BDF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13447                                  	;
 13448                                  	;mov	ax,23h
 13449 00001BE4 B82300                  	MOV	AX,error_FCB_unavailable
 13450                                  	;;mov	byte [cs:ALLOWED],8
 13451                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13452 00001BE7 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13453                                  	
 13454                                  	;LES	BP,[CS:THISDPB]
 13455 00001BED 26C42E[8A05]            	les	bp,[es:THISDPB]
 13456                                  	
 13457 00001BF2 BF0100                  	MOV	DI,1			; Fake some registers
 13458 00001BF5 89F9                    	MOV	CX,DI
 13459                                  	;mov	dx,[es:bp+0Bh]
 13460 00001BF7 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13461 00001BFB E83236                  	call	HARDERR
 13462 00001BFE F9                      	STC
 13463 00001BFF C3                      	retn
 13464                                  
 13465                                  ;============================================================================
 13466                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13467                                  ;============================================================================
 13468                                  ; 21/07/2018 - Retro DOS v3.0
 13469                                  ; 17/05/2019 - Retro DOS v4.0
 13470                                  
 13471                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13472                                  ;
 13473                                  ;	GetRR
 13474                                  ;	GetExtent
 13475                                  ;	SetExtent
 13476                                  ;	GetExtended
 13477                                  ;	GetRecSize
 13478                                  ;	FCBIO
 13479                                  ;	$FCB_OPEN
 13480                                  ;	$FCB_CREATE
 13481                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13482                                  ;	$FCB_RANDOM_READ_BLOCK
 13483                                  ;	$FCB_SEQ_READ
 13484                                  ;	$FCB_SEQ_WRITE
 13485                                  ;	$FCB_RANDOM_READ
 13486                                  ;	$FCB_RANDOM_WRITE
 13487                                  ;
 13488                                  ;	Revision history:
 13489                                  ;
 13490                                  ;		Created: ARR 4 April 1983
 13491                                  ;			 MZ  6 June  1983 completion of functions
 13492                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13493                                  ;				  times.  Change so successive closes work by
 13494                                  ;				  always returning OK.	Also, detect I/O to
 13495                                  ;				  already closed FCB and return EOF.
 13496                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13497                                  ;				  out of sft into FCB for reconnection
 13498                                  ;
 13499                                  ;	    A000   version 4.00	Jan. 1988
 13500                                  
 13501                                  ; Defintions for FCBOp flags
 13502                                  
 13503                                  RANDOM	equ 2				; random operation
 13504                                  FCBREAD equ 4				; doing a read
 13505                                  BLOCK	equ 8				; doing a block I/O
 13506                                  
 13507                                  ;Break <GetRR - return the random record field in DX:AX>
 13508                                  ;---------------------------------------------------------------------------
 13509                                  ;
 13510                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13511                                  ;	from the FCB pointed to by DS:SI
 13512                                  ;
 13513                                  ;   Inputs:	DS:SI point to an FCB
 13514                                  ;		BX has record size
 13515                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13516                                  ;   Registers modified: none
 13517                                  ;---------------------------------------------------------------------------
 13518                                  
 13519                                  GetRR:
 13520                                  	;mov	ax,[si+21h]
 13521 00001C00 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13522                                  	;mov	dx,[si+23h]
 13523 00001C03 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13524 00001C06 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13525 00001C09 7202                    	JB	short GetRRBye
 13526                                  GetExtent_bye:	; 21/01/2024
 13527 00001C0B 30F6                    	XOR	DH,DH
 13528                                  GetRRBye:
 13529 00001C0D C3                      	retn
 13530                                  
 13531                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13532                                  ;---------------------------------------------------------------------------
 13533                                  ;
 13534                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13535                                  ;	NR fields in the FCB.
 13536                                  ;
 13537                                  ;   Inputs:	DS:SI - point to FCB
 13538                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13539                                  ;   Registers modified: none
 13540                                  ;---------------------------------------------------------------------------
 13541                                  
 13542                                  GetExtent:
 13543                                  	;mov	al,[si+20h]
 13544 00001C0E 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13545                                  	;mov	dx,[si+0Ch]
 13546 00001C11 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13547 00001C14 D0E0                    	SHL	AL,1
 13548 00001C16 D1EA                    	SHR	DX,1
 13549 00001C18 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13550 00001C1A 88D4                    	MOV	AH,DL
 13551 00001C1C 88F2                    	MOV	DL,DH
 13552                                  	; 21/01/2024
 13553                                  	;XOR	DH,DH
 13554                                  	;retn
 13555 00001C1E EBEB                    	jmp	short GetExtent_bye
 13556                                  
 13557                                  ;Break <SetExtent - update the extent/NR field>
 13558                                  ;---------------------------------------------------------------------------
 13559                                  ;
 13560                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13561                                  ;	fields
 13562                                  ;
 13563                                  ;   Inputs:	DS:SI point to FCB
 13564                                  ;		DX:AX is a record location in file
 13565                                  ;   Outputs:	Extent/NR fields are filled in
 13566                                  ;   Registers modified: CX
 13567                                  ;---------------------------------------------------------------------------
 13568                                  
 13569                                  SetExtent:
 13570 00001C20 50                      	push	ax
 13571 00001C21 52                      	push	dx
 13572 00001C22 89C1                    	MOV	CX,AX
 13573 00001C24 247F                    	AND	AL,7FH			; next rec field
 13574                                  	;mov	[si+20h],al
 13575 00001C26 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13576 00001C29 80E180                  	AND	CL,80H			; save upper bit
 13577 00001C2C D1E1                    	SHL	CX,1
 13578 00001C2E D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13579 00001C30 88E8                    	MOV	AL,CH
 13580 00001C32 88D4                    	MOV	AH,DL
 13581                                  	;mov	[si+0Ch], ax
 13582 00001C34 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13583 00001C37 5A                      	pop	dx
 13584 00001C38 58                      	pop	ax
 13585 00001C39 C3                      	retn
 13586                                  
 13587                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13588                                  ;---------------------------------------------------------------------------
 13589                                  ;
 13590                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13591                                  ;
 13592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13593                                  ;   Outputs:	DS:SI point to the FCB part
 13594                                  ;		zeroflag set if not extended fcb
 13595                                  ;   Registers modified: SI
 13596                                  ;---------------------------------------------------------------------------
 13597                                  
 13598                                  GetExtended:
 13599 00001C3A 89D6                    	MOV	SI,DX			; point to Something
 13600 00001C3C 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13601 00001C3F 7503                    	JNZ	short GetBye		; not there
 13602 00001C41 83C607                  	ADD	SI,7			; point to FCB
 13603                                  GetBye:
 13604 00001C44 39D6                    	CMP	SI,DX			; set condition codes
 13605                                  getextd_retn:
 13606 00001C46 C3                      	retn
 13607                                  
 13608                                  ;Break <GetRecSize - return in BX the FCB record size>
 13609                                  ;---------------------------------------------------------------------------
 13610                                  ;
 13611                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13612                                  ;
 13613                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13614                                  ;   Outputs:	BX contains the record size
 13615                                  ;   Registers modified: None
 13616                                  ;---------------------------------------------------------------------------
 13617                                  
 13618                                  	; 22/01/2024
 13619                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13620                                  GetRecSize:
 13621                                  	;mov	bx,[si+0Eh]
 13622 00001C47 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13623 00001C4A 09DB                    	OR	BX,BX			; is it nul?
 13624                                  	;jz	short getextd_retn
 13625                                  	; 22/01/2024 (BugFix)
 13626 00001C4C 75F8                    	jnz	short getextd_retn
 13627                                  	;MOV	BX,128			; use default size
 13628 00001C4E B380                    	mov	bl,128
 13629                                  	;mov	[si+0Eh],bx
 13630 00001C50 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13631 00001C53 C3                      	retn
 13632                                  ; 23/01/2024 - Retro DOS v5.0
 13633                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13634                                  ; 23/01/2024 - Retro DOS v4.2
 13635                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13636                                  ; 23/01/2024 - Retro DOS v4.1
 13637                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13638                                  
 13639                                  ; 22/07/2018 - Retro DOS v3.0
 13640                                  
 13641                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13642                                  ;----------------------------------------------------------------------------
 13643                                  ;
 13644                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13645                                  ;	and write a number of blocks from it.
 13646                                  ;
 13647                                  ;   Inputs:	DS:DX point to an FCB
 13648                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13649                                  ;		AL <> 0 Not enough room on disk for the output
 13650                                  ;
 13651                                  ;----------------------------------------------------------------------------
 13652                                  
 13653                                  _$FCB_RANDOM_WRITE_BLOCK:
 13654                                  	;mov	AL,0Ah
 13655 00001C54 B00A                    	MOV	AL,RANDOM+BLOCK
 13656 00001C56 EB12                    	JMP	short FCBIO	; 23/01/2024
 13657                                  
 13658                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13659                                  ;----------------------------------------------------------------------------
 13660                                  ;
 13661                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13662                                  ;	and read a number of blocks from it.
 13663                                  ;
 13664                                  ;   Inputs:	DS:DX point to an FCB
 13665                                  ;   Outputs:	AL = error codes defined above
 13666                                  ;
 13667                                  ;----------------------------------------------------------------------------
 13668                                  
 13669                                  _$FCB_RANDOM_READ_BLOCK:
 13670                                  	;mov	AL,0Eh
 13671 00001C58 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13672 00001C5A EB0E                    	JMP	short FCBIO	; 23/01/2024
 13673                                  
 13674                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13675                                  ;----------------------------------------------------------------------------
 13676                                  ;
 13677                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13678                                  ;	memory
 13679                                  ;
 13680                                  ;   Inputs:	DS:DX point to an FCB
 13681                                  ;   Outputs:	AL = error codes defined above
 13682                                  ;
 13683                                  ;----------------------------------------------------------------------------
 13684                                  
 13685                                  _$FCB_SEQ_READ:
 13686                                  	;mov	AL,4
 13687 00001C5C B004                    	MOV	AL,FCBREAD
 13688 00001C5E EB0A                    	JMP	short FCBIO	; 23/01/2024
 13689                                  
 13690                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13691                                  ;----------------------------------------------------------------------------
 13692                                  ;
 13693                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13694                                  ;	file
 13695                                  ;
 13696                                  ;   Inputs:	DS:DX point to an FCB
 13697                                  ;   Outputs:	AL = error codes defined above
 13698                                  ;
 13699                                  ;----------------------------------------------------------------------------
 13700                                  
 13701                                  _$FCB_SEQ_WRITE:
 13702 00001C60 B000                    	MOV	AL,0
 13703 00001C62 EB06                    	JMP	short FCBIO	; 23/01/2024
 13704                                  
 13705                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13706                                  ;----------------------------------------------------------------------------
 13707                                  ;
 13708                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13709                                  ;	record from it.
 13710                                  ;
 13711                                  ;   Inputs:	DS:DX point to an FCB
 13712                                  ;   Outputs:	AL = error codes defined above
 13713                                  ;
 13714                                  ;----------------------------------------------------------------------------
 13715                                  
 13716                                  _$FCB_RANDOM_READ:
 13717                                  	;mov	AL,6
 13718 00001C64 B006                    	MOV	AL,RANDOM+FCBREAD
 13719                                  	; 23/01/2024
 13720                                  	;jmp	FCBIO 		; single block
 13721 00001C66 EB02                    	jmp	short FCBIO
 13722                                  
 13723                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13724                                  ;----------------------------------------------------------------------------
 13725                                  ;
 13726                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13727                                  ;	a record to it.
 13728                                  ;
 13729                                  ;   Inputs:	DS:DX point to an FCB
 13730                                  ;   Outputs:	AL = error codes defined above
 13731                                  ;
 13732                                  ;----------------------------------------------------------------------------
 13733                                  
 13734                                  _$FCB_RANDOM_WRITE:
 13735                                  	;mov	AL,2
 13736 00001C68 B002                    	MOV	AL,RANDOM
 13737                                  	; 23/01/2024
 13738                                  	;;jmp	FCBIO
 13739                                  	;jmp	short FCBIO
 13740                                  
 13741                                  ;BREAK <FCBIO - do internal FCB I/O>
 13742                                  ;---------------------------------------------------------------------------
 13743                                  ;
 13744                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13745                                  ;
 13746                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13747                                  ;		DS:DX point to FCB
 13748                                  ;		CX may have count of number of records to xfer
 13749                                  ;   Outputs:	AL has error code
 13750                                  ;   Registers modified: all
 13751                                  ;---------------------------------------------------------------------------
 13752                                  
 13753                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13754                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13755                                  
 13756                                  	; 23/01/2024
 13757                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13758                                  
 13759                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13760                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13761                                  
 13762                                  FCBIO:
 13763                                  
 13764                                  FEOF	EQU	1
 13765                                  FTRIM	EQU	2
 13766                                  
 13767                                  %define	FCBErr	byte [bp-1]  ; byte
 13768                                  %define	cRec	word [bp-3]  ; word
 13769                                  ;%define RecPos	word [bp-7]  ; dword
 13770                                  %define RecPosL	word [bp-7]  ; word
 13771                                  %define RecPosH	word [bp-5]  ; word
 13772                                  %define	RecSize	word [bp-9]  ; word
 13773                                  ;%define bPos	word [bp-13] ; dword
 13774                                  %define bPosL	word [bp-13] ; word
 13775                                  %define bPosH	word [bp-11] ; word
 13776                                  %define cByte	word [bp-15] ; word
 13777                                  %define cResult word [bp-17] ; word
 13778                                  %define	cRecRes	word [bp-19] ; word
 13779                                  %define	FCBOp	byte [bp-20] ; byte
 13780                                  ; 23/01/2024
 13781                                  %define bPos bp-13
 13782                                  
 13783                                  	;Enter
 13784                                  
 13785 00001C6A 55                      	push	bp
 13786 00001C6B 89E5                    	mov	bp,sp
 13787 00001C6D 83EC14                  	sub	sp,20
 13788                                  	;mov	[bp-20],al
 13789 00001C70 8846EC                  	MOV	FCBOp,AL
 13790                                  	;mov	byte [bp-1],0
 13791 00001C73 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13792 00001C77 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13793                                  	;test	byte [bp-20],8
 13794 00001C7A F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13795 00001C7E 7503                    	JNZ	short GetPos
 13796 00001C80 B90100                  	MOV	CX,1			;	cRec = 1;
 13797                                  GetPos:
 13798                                  	;mov	[bp-3],cx
 13799 00001C83 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13800 00001C86 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13801 00001C89 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13802                                  	;mov	[bp-9],bx
 13803 00001C8C 895EF7                  	MOV	RecSize,BX
 13804                                  	;test	byte [bp-20],2
 13805 00001C8F F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13806 00001C93 7403                    	JZ	short GetRec
 13807 00001C95 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13808                                  GetRec:
 13809                                  	;mov	[bp-7],ax
 13810 00001C98 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13811                                  	;mov	[bp-5],dx
 13812 00001C9B 8956FB                  	MOV	RecPosH,DX
 13813 00001C9E E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13814                                  	;mov	ax,[bp-5]
 13815 00001CA1 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13816 00001CA4 F7E3                    	MUL	BX
 13817 00001CA6 89C7                    	MOV	DI,AX
 13818                                  	;mov	ax,[bp-7]
 13819 00001CA8 8B46F9                  	MOV	AX,RecPosL
 13820 00001CAB F7E3                    	MUL	BX
 13821 00001CAD 01FA                    	ADD	DX,DI
 13822                                  	;mov	[bp-13],ax
 13823 00001CAF 8946F3                  	MOV	bPosL,AX
 13824                                  	;mov	[bp-11],dx
 13825 00001CB2 8956F5                  	MOV	bPosH,DX
 13826                                  	;mov	ax,[bp-3]
 13827 00001CB5 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13828 00001CB8 F7E3                    	MUL	BX
 13829                                  	;mov	[bp-15],ax
 13830 00001CBA 8946F1                  	MOV	cByte,AX
 13831                                  
 13832                                  ;hkn; 	SS override
 13833 00001CBD 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13834 00001CC2 83D200                  	ADC	DX,0
 13835 00001CC5 7419                    	JZ	short DoOper
 13836                                  	;mov	byte [bp-1],2
 13837 00001CC7 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13838                                  
 13839                                  ;hkn; 	SS override
 13840 00001CCB 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13841 00001CCF F7D8                    	NEG	AX
 13842 00001CD1 7501                    	JNZ	short DoDiv
 13843 00001CD3 48                      	DEC	AX
 13844                                  DoDiv:
 13845 00001CD4 31D2                    	XOR	DX,DX
 13846 00001CD6 F7F3                    	DIV	BX
 13847                                  	;mov	[bp-3],ax
 13848 00001CD8 8946FD                  	MOV	cRec,AX
 13849 00001CDB F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13850                                  	;mov	[bp-15],ax
 13851 00001CDD 8946F1                  	MOV	cByte,AX		;	}
 13852                                  DoOper:
 13853 00001CE0 31DB                    	XOR	BX,BX
 13854                                  	;mov	[bp-17],bx
 13855 00001CE2 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13856                                  	;cmp	[bp-15],bx
 13857 00001CE5 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13858 00001CE8 7506                    	JNZ	short DoGetExt
 13859                                  	;test	byte [bp-1],2
 13860 00001CEA F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13861                                  	;JZ	short DoGetExt
 13862                                  	;JMP	short SkipOp
 13863                                  	; 16/12/2022
 13864 00001CEE 7572                    	jnz	short SkipOp
 13865                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13866                                  	;JZ	short DoGetExt
 13867                                  	;JMP	short SkipOp
 13868                                  DoGetExt:
 13869 00001CF0 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13870 00001CF3 730F                    	JNC	short ContinueOp
 13871                                  FCBDeath:
 13872 00001CF5 E85EE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13873                                  	;mov	word [bp-19],0
 13874 00001CF8 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13875                                  	;mov	byte [bp-1],1
 13876 00001CFD C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13877 00001D01 E9EB00                  	JMP	FCBSave 		; bam!
 13878                                  ContinueOp:
 13879                                  	; 23/01/2024
 13880                                  	; (PCDOS 7.1 IBMDOS.COM)
 13881                                  	;
 13882                                  	;;mov	ax,[si+10h]
 13883                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13884                                  	;;mov	[es:di+11h],ax
 13885                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13886                                  	;;mov	ax,[si+12h]
 13887                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13888                                  	;;mov	[es:di+13h],ax
 13889                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13890                                  	;;;
 13891 00001D04 1E                      	push	ds
 13892 00001D05 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13893 00001D08 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13894 00001D0C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13895 00001D10 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13896 00001D13 8CDA                    	mov	dx,ds
 13897 00001D15 1F                      	pop	ds
 13898                                  	;;;
 13899                                  	;;mov	ax,[bp-13]
 13900                                  	;MOV	AX,bPosL
 13901                                  	;;mov	dx,[bp-11]
 13902                                  	;MOV	DX,bPosH
 13903                                  
 13904                                  	;mov	[es:di+15h],ax
 13905 00001D16 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13906                                  	;xchg	dx,[es:di+17h]
 13907 00001D1A 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13908 00001D1E 52                      	PUSH	DX			; save away Open age.
 13909                                  	;mov	cx,[bp-15]
 13910 00001D1F 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13911                                  
 13912                                  ;hkn; DOS_Read is in DOSCODE
 13913 00001D22 BF[4232]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13914                                  	;test	byte [bp-20],4
 13915 00001D25 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13916 00001D29 7503                    	JNZ	short DoContext
 13917                                  
 13918                                  ;hkn; DOS_Write is in DOSCODE
 13919 00001D2B BF[4234]                	MOV	DI,DOS_WRITE
 13920                                  DoContext:
 13921 00001D2E 55                      	push	bp
 13922 00001D2F 1E                      	push	ds
 13923 00001D30 56                      	push	si
 13924                                  
 13925                                  ;hkn; SS is DOSDATA
 13926 00001D31 16                      	push	ss
 13927 00001D32 1F                      	pop	ds
 13928                                  
 13929                                  ;; Fix for disk full
 13930 00001D33 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13931                                  	
 13932 00001D35 5E                      	pop	si
 13933 00001D36 1F                      	pop	ds
 13934 00001D37 5D                      	pop	bp
 13935 00001D38 72BB                    	JC	short FCBDeath
 13936                                  	
 13937 00001D3A 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13938 00001D40 740A                    	JZ	short NODSKFULL
 13939 00001D42 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13940                                  
 13941                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13942                                  	;mov	byte [bp-1],1 
 13943 00001D48 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13944                                  
 13945                                  	; 23/01/2024
 13946                                  	; (PCDOS 7.1 IBMDOS.COM)
 13947                                  	;;mov	byte [bp-1],1 
 13948                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13949                                  
 13950                                  NODSKFULL:
 13951                                  ;; Fix for disk full
 13952                                  	;mov	[bp-17],cx
 13953 00001D4C 894EEF                  	MOV	cResult,CX
 13954 00001D4F E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13955                                  	;pop	word [es:di+17h]	
 13956 00001D52 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13957                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13958                                  
 13959                                  	; 23/01/2024
 13960                                  	; (PCDOS 7.1 IBMDOS.COM)
 13961                                  	;
 13962                                  	;;mov	ax,[es:di+11h]
 13963                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13964                                  	;;mov	[si+10h],ax
 13965                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13966                                  	;;mov	ax,[es:di+13h]
 13967                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13968                                  	;;mov	[si+12h],ax
 13969                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13970                                  	;;;
 13971 00001D56 06                      	push	es
 13972 00001D57 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13973 00001D5B 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13974 00001D5E 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13975 00001D61 07                      	pop	es
 13976                                  	;;;
 13977                                  					;	}
 13978                                  SkipOp:
 13979                                  	;mov	ax,[bp-17]
 13980 00001D62 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13981 00001D65 31D2                    	XOR	DX,DX
 13982                                  	;div	word [bp-9]
 13983 00001D67 F776F7                  	DIV	RecSize
 13984                                  	;mov	[bp-19],ax
 13985 00001D6A 8946ED                  	MOV	cRecRes,AX
 13986                                  	;add	[bp-7],ax
 13987 00001D6D 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13988                                  	;adc	word [bp-5],0
 13989 00001D70 8356FB00                	ADC	RecPosH,0
 13990                                  
 13991                                  ; If we have not gotten the expected number of records, we signal an EOF
 13992                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13993                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13994                                  ; do we.
 13995                                  
 13996                                  	;cmp	ax,[bp-3]
 13997 00001D74 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13998 00001D77 7411                    	JZ	short TryBlank
 13999                                  	;test	byte [bp-20],4
 14000 00001D79 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14001 00001D7D 7507                    	JNZ	short SetEOF
 14002                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14003                                  	; MSDOS 3.3
 14004                                  	;;test	word [es:di+5],80h
 14005                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14006                                  	;JNZ	short TryBlank
 14007                                  	; MSDOS 5.0 & MSDOS 6.0
 14008                                  	;test	byte [es:di+5],80h
 14009 00001D7F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14010 00001D84 7504                    	jnz	short TryBlank
 14011                                  
 14012                                  SetEOF:
 14013                                  	;mov	byte [bp-1],1
 14014 00001D86 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14015                                  TryBlank:				;
 14016 00001D8A 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14017 00001D8C 7426                    	JZ	short SetExt
 14018                                  	;add	word [bp-7],1
 14019 00001D8E 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14020                                  	;adc	word [bp-5],0
 14021 00001D92 8356FB00                	ADC	RecPosH,0
 14022                                  	;test	byte [bp-20],4
 14023 00001D96 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14024 00001D9A 7418                    	JZ	short SetExt
 14025                                  	;inc	word [bp-19]
 14026 00001D9C FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14027                                  	;mov	byte [bp-1],3
 14028 00001D9F C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14029                                  	;mov	cx,[bp-9]
 14030 00001DA3 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14031 00001DA6 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14032 00001DA8 30C0                    	XOR	AL,AL
 14033                                  ;hkn; 	SS override
 14034 00001DAA 36C43E[2C03]            	les     di,[ss:DMAADD]
 14035                                  	;add	di,[bp-17]
 14036 00001DAF 037EEF                  	ADD	DI,cResult
 14037 00001DB2 F3AA                    	REP	STOSB			;   }	}
 14038                                  SetExt:
 14039                                  	;mov	dx,[bp-5]
 14040 00001DB4 8B56FB                  	MOV	DX,RecPosH
 14041                                  	;mov	ax,[bp-7]
 14042 00001DB7 8B46F9                  	MOV	AX,RecPosL
 14043                                  	;test	byte [bp-20],2
 14044 00001DBA F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14045 00001DBE 7406                    	JZ	short DoSetExt
 14046                                  	;test	byte [bp-20],8
 14047 00001DC0 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14048 00001DC4 7403                    	JZ	short TrySetRR
 14049                                  DoSetExt:
 14050 00001DC6 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14051                                  TrySetRR:
 14052                                  	;test	byte [bp-20],8
 14053 00001DC9 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14054 00001DCD 740F                    	JZ	short TryReturn
 14055                                  	;mov	[si+21h],ax
 14056 00001DCF 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14057                                  	;mov	[si+23h],dl
 14058 00001DD2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14059                                  	;cmp	word [si+0Eh],64
 14060 00001DD5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14061 00001DD9 7303                    	JAE	short TryReturn
 14062                                  	;mov	[si+24h],dh
 14063 00001DDB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14064                                  TryReturn: 
 14065                                  	;test	byte [bp-20],4
 14066 00001DDE F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14067 00001DE2 750B                    	JNZ	short FCBSave
 14068 00001DE4 1E                      	push	ds			;	FCB->FDate = date;
 14069 00001DE5 E8FEEC                  	call	DATE16			;	FCB->FTime = time;
 14070 00001DE8 1F                      	pop	ds
 14071                                  	;mov	[si+14h],ax
 14072 00001DE9 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14073                                  	;mov	[si+16h],dx
 14074 00001DEC 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14075                                  FCBSave: 
 14076                                  	;test	byte [bp-20],8
 14077 00001DEF F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14078 00001DF3 7409                    	jz	short DoReturn
 14079                                  	;mov	cx,[bp-19]
 14080 00001DF5 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14081 00001DF8 E886E6                  	call    Get_User_Stack
 14082                                  	;mov	[si+4],cx
 14083 00001DFB 894C04                  	MOV	[SI+user_env.user_CX],CX
 14084                                  DoReturn:
 14085                                  	;mov	al,[bp-1]
 14086 00001DFE 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14087                                  	;Leave	
 14088 00001E01 89EC                    	mov     sp,bp
 14089 00001E03 5D                      	pop     bp
 14090 00001E04 C3                      	retn
 14091                                  
 14092                                  ; 22/07/2018 - Retro DOS v3.0
 14093                                  
 14094                                  ;Break <$FCB_Open - open an old-style FCB>
 14095                                  ;---------------------------------------------------------------------------
 14096                                  ;
 14097                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14098                                  ;	for us and asked to have the rest filled in.
 14099                                  ;
 14100                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14101                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14102                                  ;		FCB has the following fields filled in:
 14103                                  ;		    Time/Date Extent/NR Size
 14104                                  ;---------------------------------------------------------------------------
 14105                                  
 14106                                  _$FCB_OPEN:			; System call 15
 14107                                  
 14108 00001E05 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14109                                  
 14110                                  ;hkn; DOS_Open is in DOSCODE
 14111 00001E08 B9[F82A]                	MOV	CX,DOS_OPEN
 14112                                  
 14113                                  ; The following is common code for Creation and openning of FCBs. AX is
 14114                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14115                                  ; the FCB
 14116                                  
 14117                                  DoAccess:
 14118 00001E0B 1E                      	push	ds
 14119 00001E0C 52                      	push	dx
 14120 00001E0D 51                      	push	cx
 14121 00001E0E 50                      	push	ax			; save FCB pointer away
 14122                                  
 14123                                  ;hkn; 	OpenBuf is in DOSDATA
 14124 00001E0F BF[BE03]                	MOV	DI,OPENBUF
 14125 00001E12 E8234C                  	call	TransFCB		; crunch the fcb
 14126 00001E15 58                      	pop	ax
 14127 00001E16 59                      	pop	cx
 14128 00001E17 5A                      	pop	dx
 14129 00001E18 1F                      	pop	ds			; get fcb
 14130 00001E19 7303                    	JNC	short FindFCB		; everything seems ok
 14131                                  FCBOpenErr:
 14132                                  	; AL has error code
 14133 00001E1B E938E8                  	jmp	FCB_RET_ERR
 14134                                  FindFCB:
 14135 00001E1E E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14136                                  
 14137                                  	; 17/05/2019 - Retro DOS v4.0
 14138                                  
 14139                                  	; MSDOS 3.3
 14140                                  	;call	LRUFCB
 14141                                  	;jc	short HardMessage
 14142                                  
 14143                                  	; MSDOS 6.0
 14144 00001E21 50                      	push	ax
 14145 00001E22 B001                    	mov	al,1			;indicate Open/Create operation
 14146 00001E24 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14147 00001E27 58                      	pop	ax
 14148 00001E28 722A                    	jc	short HardMessage
 14149                                  	
 14150                                  	;mov	word [es:di+2],8000h
 14151 00001E2A 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14152 00001E30 1E                      	push	ds
 14153 00001E31 56                      	push	si	
 14154 00001E32 53                      	push	bx			; save fcb pointer
 14155 00001E33 89CE                    	MOV	SI,CX
 14156                                  
 14157                                  ;hkn; SS is DOSDATA
 14158 00001E35 16                      	push	ss
 14159 00001E36 1F                      	pop	ds			    ; let DOS_Open see variables
 14160 00001E37 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14161 00001E39 5B                      	pop	bx
 14162 00001E3A 5E                      	pop	si
 14163 00001E3B 1F                      	pop	ds			; get fcb
 14164                                  
 14165                                  ;hkn; SS override
 14166 00001E3C 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14167 00001E41 7318                    	JNC	short FCBOK		; operation succeeded
 14168                                  failopen:
 14169 00001E43 50                      	PUSH	AX
 14170 00001E44 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14171 00001E46 E8DDFC                  	call	BlastSFT
 14172 00001E49 58                      	POP	AX
 14173                                  	;cmp	ax,4
 14174 00001E4A 83F804                  	CMP	AX,error_too_many_open_files
 14175 00001E4D 7405                    	JZ	short HardMessage
 14176                                  	;cmp	ax,24h
 14177 00001E4F 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14178 00001E52 7505                    	jnz	short DeadFCB
 14179                                  HardMessage:
 14180 00001E54 50                      	PUSH	AX
 14181 00001E55 E887FD                  	call	FCBHardErr
 14182 00001E58 58                      	POP	AX
 14183                                  DeadFCB:
 14184                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14185                                  	;jmp	FCB_RET_ERR
 14186 00001E59 EBC0                    	jmp	short FCBOpenErr
 14187                                  FCBOK:
 14188                                  	; MSDOS 6.0
 14189 00001E5B E8ECF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14190 00001E5E 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14191 00001E60 E80154                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14192 00001E63 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14193                                  ;SR;
 14194                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14195                                  ; LocalSFT variable to reflect this.
 14196                                  
 14197 00001E65 36893E[4410]            	mov	[ss:LocalSFT],di
 14198 00001E6A 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14199                                  ;;SR;
 14200                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14201                                  ;;
 14202                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14203                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14204                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14205                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14206                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14207                                  
 14208                                  FCBOK2:
 14209                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14210 00001E6F 26FF05                  	inc	word [es:di]
 14211                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14212 00001E72 E804FA                  	call	SaveFCBInfo
 14213                                  	; MSDOS 3.3
 14214                                  	;call	SetOpenAge
 14215                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14216                                  	;test	word [es:di+5],80h
 14217                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14218 00001E75 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14219 00001E7A 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14220 00001E7C 8A04                    	MOV	AL,[SI]			; get drive byte
 14221 00001E7E E8424B                  	call	GETTHISDRV		; convert
 14222                                  	;INC	AL
 14223                                  	; 17/12/2022
 14224 00001E81 40                      	inc	ax
 14225 00001E82 8804                    	MOV	[SI],AL			; stash in good drive letter
 14226                                  
 14227                                  FCBNoDrive:
 14228                                  	;mov	word [si+0Eh],128
 14229 00001E84 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14230                                  
 14231                                  	; 23/01/2024
 14232                                  	; (PCDOS 7.1 IBMDOS.COM)
 14233                                  	;;;
 14234                                  	;;mov	ax,[es:di+0Dh]
 14235                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14236                                  	;;mov	[si+16h],ax
 14237                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14238                                  	;;mov	ax,[es:di+0Fh]
 14239                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14240                                  	;;mov	[si+14h],ax
 14241                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14242                                  	;;mov	ax,[es:di+11h]
 14243                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14244                                  	;;mov	[si+10h],ax
 14245                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14246                                  	;;mov	ax,[es:di+13h]
 14247                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14248                                  	;;mov	[si+12h],ax
 14249                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14250                                  	;
 14251 00001E89 06                      	push	es
 14252                                  	;les	ax,[es:di+0Dh]
 14253 00001E8A 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14254                                  	;mov	[si+16h],ax
 14255 00001E8E 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14256                                  	;mov	[si+14h],es
 14257 00001E91 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14258 00001E94 07                      	pop	es
 14259 00001E95 06                      	push	es
 14260                                  	;les	ax,[es:di+11h]
 14261 00001E96 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14262                                  	;mov	[si+10h],ax
 14263 00001E9A 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14264                                  	;mov	[si+12h],ax
 14265 00001E9D 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14266 00001EA0 07                      	pop	es
 14267                                  	;;;
 14268                                  	
 14269 00001EA1 31C0                    	XOR	AX,AX			; convenient zero
 14270                                  	;mov	[si+0Ch],ax
 14271 00001EA3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14272                                  
 14273                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14274                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14275                                  
 14276                                  ;hkn; 	SS override
 14277 00001EA6 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14278                                  	;mov	ah,[es:di+4]
 14279 00001EAB 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14280                                  OpenScan:
 14281                                  	;cmp	al,[si+18h]
 14282 00001EAF 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14283 00001EB2 7407                    	JZ	short SkipCheck
 14284 00001EB4 50                      	push	ax			; preserve count
 14285 00001EB5 E884FC                  	call	CheckFCB		; do they match
 14286 00001EB8 58                      	pop	ax			; get count back
 14287 00001EB9 7309                    	JNC	short OpenFound		; found a match!
 14288                                  SkipCheck:
 14289 00001EBB FEC0                    	INC	AL			; advance to next FCB
 14290 00001EBD 38E0                    	CMP	AL,AH			; table full?
 14291 00001EBF 75EE                    	JNZ	short OpenScan		; no, go for more
 14292                                  OpenDone:
 14293 00001EC1 30C0                    	xor	al,al			; return success
 14294 00001EC3 C3                      	retn
 14295                                  
 14296                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14297                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14298                                  ; Consider:
 14299                                  ;
 14300                                  ;   open (foo)	delete (foo) open (bar)
 14301                                  ;
 14302                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14303                                  ; foo even though foo is no longer needed; this is due to the server closing
 14304                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14305                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14306                                  ; bar and subsequent I/O would be lost to the redirector.
 14307                                  ;
 14308                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14309                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14310                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14311                                  ; around. This will allow us to access the same file through multiple network
 14312                                  ; connections and NOT prematurely terminate when the ref count on one
 14313                                  ; connection goes to zero.
 14314                                  
 14315                                  OpenFound:
 14316                                  	;mov	[si+18h],al
 14317 00001EC4 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14318 00001EC7 26FF05                  	inc	word [es:di]
 14319                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14320                                  					; remember this new invocation
 14321                                  	; 24/01/2024
 14322 00001ECA 16                      	push	ss
 14323 00001ECB 1F                      	pop	ds
 14324                                  	
 14325                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14326 00001ECC A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14327                                  	;mov	[es:di+15h],ax
 14328 00001ECF 26894515                	MOV	[ES:DI+sf_LRU],AX
 14329                                  ;
 14330                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14331                                  ; blast it to prevent other reuse.
 14332                                  ;
 14333                                  	;push	ss
 14334                                  	;pop	ds
 14335                                  
 14336 00001ED3 C43E[9E05]              	LES	DI,[THISSFT]
 14337 00001ED7 26FF0D                  	dec	word [es:di]
 14338                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14339                                  					; free the newly allocated SFT
 14340 00001EDA E8BF53                  	call	ShareEnd
 14341 00001EDD B043                    	MOV	AL,'C'	 ; 43h
 14342 00001EDF E844FC                  	call	BlastSFT
 14343 00001EE2 EBDD                    	JMP	short OpenDone
 14344                                  
 14345                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14346                                  ;----------------------------------------------------------------------------
 14347                                  ;
 14348                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14349                                  ;	FCB for us and asked to have the rest filled in.
 14350                                  ;
 14351                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14352                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14353                                  ;		FCB has the following fields filled in:
 14354                                  ;		    Time/Date Extent/NR Size
 14355                                  ;----------------------------------------------------------------------------
 14356                                  
 14357                                  _$FCB_CREATE:		; System call 22
 14358                                  
 14359                                  ;hkn; DOS_Create is in DOSCODE
 14360 00001EE4 B9[D229]                	MOV	CX,DOS_CREATE		; routine to call
 14361 00001EE7 31C0                    	XOR	AX,AX			; attributes to create
 14362 00001EE9 E84EFD                  	call	GetExtended		; get extended FCB
 14363 00001EEC 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14364 00001EEE 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14365                                  DoAccessJ:
 14366 00001EF1 E917FF                  	JMP	DoAccess		; do dirty work
 14367                                  
 14368                                  ;============================================================================
 14369                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14370                                  ;============================================================================
 14371                                  ; 22/07/2018 - Retro DOS v3.0
 14372                                  ; 17/05/2019 - Retro DOS v4.0
 14373                                  
 14374                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14375                                  
 14376                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14377                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14378                                  
 14379                                  ;**	Search.asm
 14380                                  ;----------------------------------------------------------------------------
 14381                                  ;	Directory search system calls.
 14382                                  ;	These will be passed direct text of the pathname from the user. 
 14383                                  ;	They will need to be passed through the macro expander prior to
 14384                                  ;	being sent through the low-level stuff. 
 14385                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14386                                  ;
 14387                                  ;	$Dir_Search_First	  written
 14388                                  ;	$Dir_Search_Next	  written
 14389                                  ;	$Find_First	  written
 14390                                  ;	$Find_Next		  written
 14391                                  ;	PackName		  written
 14392                                  ;
 14393                                  ;	Modification history:
 14394                                  ;
 14395                                  ;	  Created: ARR 4 April 1983
 14396                                  
 14397                                  ;----------------------------------------------------------------------------
 14398                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14399                                  ;
 14400                                  ; Inputs:
 14401                                  ;	DS:DX Points to unopenned FCB
 14402                                  ; Function:
 14403                                  ;	Directory is searched for first matching entry and the directory
 14404                                  ;	entry is loaded at the disk transfer address
 14405                                  ; Returns:
 14406                                  ;	AL = -1 if no entries matched, otherwise 0
 14407                                  ;----------------------------------------------------------------------------
 14408                                  
 14409                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14410                                  
 14411                                  	; 24/01/2024
 14412                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14413                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14414                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14415                                  
 14416                                  _$DIR_SEARCH_FIRST:
 14417 00001EF4 368916[A605]            	MOV	[SS:THISFCB],DX
 14418 00001EF9 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14419 00001EFE 89D6                    	MOV	SI,DX
 14420 00001F00 803CFF                  	CMP	BYTE [SI],0FFH
 14421 00001F03 7503                    	JNZ	short NORMFCB4
 14422 00001F05 83C607                  	ADD	SI,7			; Point to drive select byte
 14423                                  NORMFCB4:
 14424 00001F08 FF34                    	push	word [SI]		; Save original drive byte for later
 14425                                  
 14426 00001F0A 16                      	push	ss
 14427 00001F0B 07                      	pop	es			; get es to address DOSGroup
 14428                                  
 14429 00001F0C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14430 00001F0F E8264B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14431 00001F12 7304                    	JNC	short SearchIt		; no error, go and look
 14432 00001F14 5B                      	pop	bx			; Clean stack
 14433                                  
 14434                                  ; Error code is in AX
 14435                                  
 14436                                  	; 09/11/2022
 14437                                  dcf_errj:
 14438 00001F15 E93EE7                  	jmp	FCB_RET_ERR		; error
 14439                                  
 14440                                  SearchIt:
 14441 00001F18 16                      	push	ss
 14442 00001F19 1F                      	pop	ds			; get ready for search
 14443                                  	;push	word [DMAADD]
 14444                                  	;push	word [DMAADD+2]
 14445                                  	; 24/01/2024
 14446 00001F1A C43E[2C03]              	les	di,[DMAADD]
 14447 00001F1E 57                      	push	di
 14448 00001F1F 06                      	push	es
 14449 00001F20 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14450 00001F26 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14451                                  	; MSDOS 3.3
 14452                                  	;call	DOS_SEARCH_FIRST
 14453                                  	; MSDOS 6.0
 14454 00001F2A E8930D                  	call	GET_FAST_SEARCH		; search
 14455 00001F2D 8F06[2E03]              	pop	word [DMAADD+2]
 14456 00001F31 8F06[2C03]              	pop	word [DMAADD]
 14457 00001F35 735C                    	JNC	short SearchSet		; no error, transfer info
 14458 00001F37 5B                      	pop	bx			; Clean stack
 14459                                  
 14460                                  ; Error code is in AX
 14461                                  
 14462                                  	; 09/11/2022
 14463                                  	;jmp	FCB_RET_ERR
 14464 00001F38 EBDB                    	jmp	short dcf_errj
 14465                                  
 14466                                  ;----------------------------------------------------------------------------
 14467                                  ;
 14468                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14469                                  ;
 14470                                  ; Inputs:
 14471                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14472                                  ; Function:
 14473                                  ;	Directory is searched for the next matching entry and the directory
 14474                                  ;	entry is loaded at the disk transfer address
 14475                                  ; Returns:
 14476                                  ;	AL = -1 if no entries matched, otherwise 0
 14477                                  ;----------------------------------------------------------------------------
 14478                                  
 14479                                  	; 24/01/2024
 14480                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14481                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14482                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14483                                  
 14484                                  _$DIR_SEARCH_NEXT:
 14485 00001F3A 368916[A605]            	MOV	[SS:THISFCB],DX
 14486 00001F3F 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14487 00001F44 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14488 00001F4A 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14489                                  
 14490 00001F50 16                      	push	ss
 14491 00001F51 07                      	pop	es
 14492                                  
 14493 00001F52 BF[BE04]                	MOV	DI,SEARCHBUF
 14494                                  
 14495 00001F55 89D6                    	MOV	SI,DX
 14496 00001F57 803CFF                  	CMP	BYTE [SI],0FFh
 14497 00001F5A 750D                    	JNZ	short NORMFCB6
 14498 00001F5C 83C606                  	ADD	SI,6
 14499 00001F5F AC                      	LODSB
 14500                                  
 14501 00001F60 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14502 00001F64 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14503                                  NORMFCB6:
 14504 00001F69 AC                      	LODSB				; Get original user drive byte
 14505 00001F6A 50                      	push	ax			; Put it on stack
 14506 00001F6B 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14507 00001F6E AA                      	STOSB				; Put in correct place
 14508 00001F6F B90A00                  	MOV	CX,20/2
 14509 00001F72 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14510                                  
 14511 00001F74 16                      	push	ss
 14512 00001F75 1F                      	pop	ds
 14513                                  
 14514                                  	;push	word [DMAADD]
 14515                                  	;push	word [DMAADD+2]
 14516                                  	; 24/01/2024
 14517 00001F76 C43E[2C03]              	les	di,[DMAADD]
 14518 00001F7A 57                      	push	di
 14519 00001F7B 06                      	push	es
 14520 00001F7C C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14521 00001F82 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14522 00001F86 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14523 00001F89 8F06[2E03]              	pop	word [DMAADD+2]
 14524 00001F8D 8F06[2C03]              	pop	word [DMAADD]
 14525 00001F91 724A                    	JC	short SearchNoMore
 14526                                  	; 24/01/2024
 14527                                  	;JMP	SearchSet		; Ok set return
 14528                                  
 14529                                  ;;;	; 24/01/2024
 14530                                  
 14531                                  ; The search was successful (or the search-next). We store the information
 14532                                  ; into the user's FCB for continuation.
 14533                                  
 14534                                  SearchSet:
 14535 00001F93 BE[BE04]                	MOV	SI,SEARCHBUF
 14536 00001F96 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14537 00001F9A F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14538 00001F9F 7403                    	JZ	short NORMFCB1
 14539 00001FA1 83C707                  	ADD	DI,7			; Point past the extension
 14540                                  NORMFCB1:
 14541 00001FA4 5B                      	pop	bx			; Get original drive byte
 14542 00001FA5 08DB                    	OR	BL,BL
 14543 00001FA7 7506                    	JNZ	short SearchDrv
 14544 00001FA9 8A1E[3603]              	MOV	BL,[CURDRV]
 14545 00001FAD FEC3                    	INC	BL
 14546                                  SearchDrv:
 14547 00001FAF AC                      	LODSB				; Get correct search contin drive byte
 14548 00001FB0 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14549 00001FB2 47                      	INC	DI
 14550                                  	;STOSB				; Store the correct "user" drive byte
 14551                                  					;  at the start of the search info
 14552 00001FB3 B90A00                  	MOV	CX,20/2
 14553 00001FB6 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14554 00001FB8 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14555                                  					;   byte to AL
 14556 00001FBA AA                      	STOSB				; Search contin drive byte at end of
 14557                                  					;   contin info
 14558 00001FBB C43E[2C03]              	LES	DI,[DMAADD]
 14559 00001FBF F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14560 00001FC4 740D                    	JZ	short NORMFCB2
 14561 00001FC6 B0FF                    	MOV	AL,0FFh
 14562 00001FC8 AA                      	STOSB
 14563 00001FC9 FEC0                    	INC	AL
 14564                                  	;MOV	CX,5
 14565                                  	; 17/12/2022
 14566 00001FCB B105                    	mov	cl,5
 14567 00001FCD F3AA                    	REP	STOSB
 14568 00001FCF A0[6D05]                	MOV	AL,[SATTRIB]
 14569 00001FD2 AA                      	STOSB
 14570                                  NORMFCB2:
 14571 00001FD3 88D8                    	MOV	AL,BL			; User Drive byte
 14572 00001FD5 AA                      	STOSB
 14573                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14574                                  	; 17/12/2022
 14575 00001FD6 B110                    	mov	cl,16
 14576 00001FD8 F3A5                    	REP	MOVSW
 14577 00001FDA E976E6                  	jmp	FCB_RET_OK
 14578                                  ;;;
 14579                                  
 14580                                  SearchNoMore:
 14581 00001FDD C43E[A605]              	LES	DI,[THISFCB]
 14582 00001FE1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14583 00001FE6 7403                    	JZ	short NORMFCB8
 14584 00001FE8 83C707                  	ADD	DI,7			; Point past the extension
 14585                                  NORMFCB8:
 14586 00001FEB 5B                      	pop	bx			; Get original drive byte
 14587 00001FEC 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14588                                  					;  at the right spot
 14589                                  ; error code is in AX
 14590                                  
 14591 00001FEF E964E6                  	jmp	FCB_RET_ERR
 14592                                  
 14593                                  ; 17/05/2019 - Retro DOS v4.0
 14594                                  
 14595                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14596                                  
 14597                                  ;---------------------------------------------------------------------------
 14598                                  ;
 14599                                  ;   Procedure Name : $FIND_FIRST
 14600                                  ; 
 14601                                  ;   Assembler usage:
 14602                                  ;	    MOV AH, FindFirst
 14603                                  ;	    LDS DX, name
 14604                                  ;	    MOV CX, attr
 14605                                  ;	    INT 21h
 14606                                  ;	; DMA address has datablock
 14607                                  ;
 14608                                  ;   Error Returns:
 14609                                  ;	    AX = error_path_not_found
 14610                                  ;	       = error_no_more_files
 14611                                  ;---------------------------------------------------------------------------
 14612                                  
 14613                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14614                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14615                                  
 14616                                  	; 24/01/2024
 14617                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14618                                  
 14619                                  _$FIND_FIRST:
 14620 00001FF2 89D6                    	MOV	SI,DX			; get name in appropriate place
 14621 00001FF4 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14622                                  
 14623 00001FF9 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14624                                  
 14625 00001FFC E89F4A                  	call	TransPathSet		; convert the path
 14626 00001FFF 7305                    	JNC	short Find_it 		; no error, go and look
 14627                                  FindError:
 14628                                  	;mov	al,3
 14629 00002001 B003                    	mov	al, error_path_not_found ; error and map into one.
 14630                                  	; 09/11/2022
 14631                                  FF_errj:
 14632 00002003 E93AE6                  	jmp	SYS_RET_ERR
 14633                                  Find_it:
 14634 00002006 16                      	push	ss
 14635 00002007 1F                      	pop	ds
 14636                                  
 14637                                  	;push	word [DMAADD]
 14638                                  	;push	word [DMAADD+2]
 14639                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14640 00002008 C43E[2C03]              	les	di,[DMAADD]
 14641 0000200C 57                      	push	di
 14642 0000200D 06                      	push	es
 14643 0000200E C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14644 00002014 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14645                                  	; MSDOS 3.3
 14646                                  	;call	DOS_SEARCH_FIRST
 14647                                  	; MSDOS 6.0
 14648 00002018 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14649 0000201B 8F06[2E03]              	pop	word [DMAADD+2]
 14650 0000201F 8F06[2C03]              	pop	word [DMAADD]
 14651                                  	
 14652                                  	; 16/12/2022
 14653                                  	;JNC	short FindSet 		; no error, transfer info
 14654 00002023 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14655                                  	;
 14656                                  	;jmp	SYS_RET_ERR
 14657                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14658                                  ;FFF_errj:
 14659                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14660                                  
 14661                                  FindSet:
 14662 00002025 BE[BE04]                	MOV	SI,SEARCHBUF
 14663 00002028 C43E[2C03]              	LES	DI,[DMAADD]
 14664 0000202C B91500                  	MOV	CX,21
 14665 0000202F F3A4                    	REP	MOVSB
 14666 00002031 56                      	PUSH	SI			; Save pointer to start of entry
 14667                                  	;mov	al,[si+0Bh]
 14668 00002032 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14669 00002035 AA                      	STOSB
 14670                                  	;add	si,16h ; 22
 14671 00002036 83C616                  	ADD	SI,dir_entry.dir_time
 14672 00002039 A5                      	MOVSW				; dir_time
 14673 0000203A A5                      	MOVSW				; dir_date
 14674 0000203B 46                      	INC	SI
 14675 0000203C 46                      	INC	SI			; Skip dir_first
 14676 0000203D A5                      	MOVSW				; dir_size (2 words)
 14677 0000203E A5                      	MOVSW
 14678 0000203F 5E                      	POP	SI			; Point back to dir_name
 14679 00002040 E83300                   	CALL	PackName
 14680 00002043 E9F1E5                  	jmp	SYS_RET_OK		; bye with no errors
 14681                                  
 14682                                  ;---------------------------------------------------------------------------
 14683                                  ;
 14684                                  ;   Procedure Name : $FIND_NEXT
 14685                                  ;
 14686                                  ;   Assembler usage:
 14687                                  ;	; dma points at area returned by find_first
 14688                                  ;	    MOV AH, findnext
 14689                                  ;	    INT 21h
 14690                                  ;	; next entry is at dma
 14691                                  ;
 14692                                  ;   Error Returns:
 14693                                  ;	    AX = error_no_more_files
 14694                                  ;---------------------------------------------------------------------------
 14695                                  
 14696                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14697                                  
 14698                                  	; 24/01/2024
 14699                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14700                                  
 14701                                  _$FIND_NEXT:
 14702 00002046 16                      	push	ss
 14703 00002047 07                      	pop	es
 14704                                  
 14705 00002048 BF[BE04]                	MOV	DI,SEARCHBUF
 14706                                  
 14707 0000204B 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14708                                  
 14709 00002050 B91500                  	MOV	CX,21
 14710 00002053 F3A4                    	REP	MOVSB			; Put the search continuation info
 14711                                  					;  in the right place
 14712 00002055 16                      	push	ss
 14713 00002056 1F                      	pop	ds			; get ready for search
 14714                                  	
 14715                                  	;push	word [DMAADD]
 14716                                  	;push	word [DMAADD+2]
 14717                                  	; 24/01/2024
 14718 00002057 C43E[2C03]              	les	di,[DMAADD]
 14719 0000205B 57                      	push	di
 14720 0000205C 06                      	push	es
 14721 0000205D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14722 00002063 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14723 00002067 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14724 0000206A 8F06[2E03]              	pop	word [DMAADD+2]
 14725 0000206E 8F06[2C03]              	pop	word [DMAADD]
 14726 00002072 73B1                    	JNC	short FindSet 		; No error, set info
 14727                                  	;jmp	SYS_RET_ERR
 14728                                  	; 16/12/2022
 14729 00002074 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14730                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14731                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14732                                  
 14733                                  ;---------------------------------------------------------------------------
 14734                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14735                                  ;
 14736                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14737                                  ;	the ASCIZ format.
 14738                                  ;
 14739                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14740                                  ;		(ES:DI) = destination area (13 bytes)
 14741                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14742                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14743                                  ;---------------------------------------------------------------------------
 14744                                  
 14745                                  	; 25/01/2024 - Retro DOS v4.2
 14746                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14747                                  
 14748                                  PackName:
 14749                                  ;	Move over 8 characters to cover the name component, then trim it's
 14750                                  ;	trailing blanks.
 14751                                  
 14752                                  	;MOV	CX,8			; Pack the name
 14753                                  	;REP	MOVSB			; Move all of it
 14754                                  	; 25/01/2024
 14755 00002076 B90400                  	mov	cx,4
 14756 00002079 F3A5                    	rep	movsw
 14757                                  main_kill_tail:
 14758 0000207B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14759 00002080 7507                    	JNZ	short find_check_dot
 14760 00002082 4F                      	DEC	DI			; Back up over trailing space
 14761 00002083 41                      	INC	CX
 14762 00002084 83F908                  	CMP	CX,8
 14763 00002087 72F2                    	JB	short main_kill_tail
 14764                                  find_check_dot:
 14765                                  	;CMP	WORD [SI],(" " << 8) | " "
 14766 00002089 813C2020                	cmp     word [si],2020h 
 14767 0000208D 7506                    	JNZ	short got_ext 		; Some chars in extension
 14768 0000208F 807C0220                	CMP	BYTE [SI+2]," "
 14769 00002093 740F                    	JZ	short find_done		; No extension
 14770                                  got_ext:
 14771 00002095 B02E                    	MOV	AL,"."	; 2Eh
 14772 00002097 AA                      	STOSB
 14773                                  	;MOV	CX,3
 14774                                  	;; 18/12/2022
 14775                                  	;;mov	cl,3
 14776                                  	;;REP	MOVSB
 14777                                  	;movsb
 14778                                  	;movsb
 14779                                  	;movsb
 14780                                  	; 25/01/2024
 14781 00002098 A5                      	movsw
 14782 00002099 A4                      	movsb
 14783                                  ext_kill_tail:
 14784 0000209A 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14785 0000209F 7503                    	JNZ	short find_done
 14786 000020A1 4F                      	DEC	DI			; Back up over trailing space
 14787 000020A2 EBF6                    	JMP	short ext_kill_tail
 14788                                  find_done:
 14789 000020A4 31C0                    	XOR	AX,AX
 14790 000020A6 AA                      	STOSB				; NUL terminate
 14791 000020A7 C3                      	retn
 14792                                  
 14793                                  ;---------------------------------------------------------------------------
 14794                                  
 14795                                  ; 24/01/2024
 14796                                  %if 0
 14797                                  	; 17/05/2019 - Retro DOS v4.0
 14798                                  GET_FAST_SEARCH:
 14799                                  	; 22/07/2018
 14800                                  	; MSDOS 6.0
 14801                                  	; 17/12/2022
 14802                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14803                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14804                                  					;FO.trigger fastopen ;AN000;
 14805                                  	;call	DOS_SEARCH_FIRST
 14806                                  	;retn
 14807                                  	; 17/12/2022
 14808                                  	jmp	DOS_SEARCH_FIRST
 14809                                  %endif
 14810                                  
 14811                                  ;============================================================================
 14812                                  ; PATH.ASM, MSDOS 6.0, 1991
 14813                                  ;============================================================================
 14814                                  ; 06/08/2018 - Retro DOS v3.0
 14815                                  ; 17/05/2019 - Retro DOS v4.0
 14816                                  
 14817                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14818                                  
 14819                                  ;**	Directory related system calls. These will be passed direct text of the
 14820                                  ;	pathname from the user. They will need to be passed through the macro
 14821                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14822                                  ;	defined in DISPATCH. The system calls are:
 14823                                  ;
 14824                                  ;	$CURRENT_DIR  Written
 14825                                  ;	$RMDIR	  Written
 14826                                  ;	$CHDIR	  Written
 14827                                  ;	$MKDIR	  Written
 14828                                  ;
 14829                                  ;
 14830                                  ;	Modification history:
 14831                                  ;
 14832                                  ;	    Created: ARR 4 April 1983
 14833                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14834                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14835                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14836                                  ;				    current directory.
 14837                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14838                                  
 14839                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14840                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14841                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14842                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14843                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14844                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14845                                  ;	I_Need	cMeta,BYTE
 14846                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14847                                  
 14848                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14849                                  ;----------------------------------------------------------------------------
 14850                                  ;
 14851                                  ;   Procedure Name : $CURRENT_DIR
 14852                                  ;
 14853                                  ;   Assembler usage:
 14854                                  ;		LDS	SI,area
 14855                                  ;		MOV	DL,drive
 14856                                  ;		INT	21h
 14857                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14858                                  ;	    ; current directory.
 14859                                  ;   Error returns:
 14860                                  ;	    AX = error_invalid_drive
 14861                                  ;
 14862                                  ;----------------------------------------------------------------------------
 14863                                  
 14864                                  	; 06/08/2018 - Retro DOS v3.0
 14865                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14866                                  
 14867                                  	; 25/01/2024 - Retro DOS v4.2
 14868                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14869                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14870                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14871                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14872                                  
 14873                                  _$CURRENT_DIR:
 14874 000020A8 E848F2                  	call	ECritDisk
 14875 000020AB 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14876 000020AD E8F748                  	call	GetVisDrv		; grab it
 14877 000020B0 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14878                                  CurdirErr:
 14879 000020B2 E859F2                  	call	LCritDisk
 14880                                  
 14881                                  	; MSDOS 3.3
 14882                                  	;mov	al,0Fh
 14883                                  	
 14884                                  	; MSDOS 6.0
 14885 000020B5 1E                      	push	ds
 14886 000020B6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14887 000020BB A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14888 000020BE 1F                      	pop	ds
 14889                                  
 14890                                  curdir_errj:
 14891 000020BF E97EE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14892                                  
 14893                                  CurrentValidate:
 14894 000020C2 1E                      	push	ds			; save destination
 14895 000020C3 56                      	push	si
 14896                                  	
 14897                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14898                                  	
 14899                                  	; MSDOS 6.0
 14900 000020C4 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14901                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14902 000020C9 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14903                                  	
 14904                                  	; 25/01/2024
 14905                                  	;lds     si,[THISCDS]
 14906                                  
 14907                                  ; 16/12/2022
 14908                                  %if 0
 14909                                  	; 09/11/2022 (following test instruction is nonsense!)
 14910                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14911                                  
 14912                                  	;test	word [si+43h],8000h
 14913                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14914                                  	;jnz	short $+2  ; 09/11/2022	
 14915                                  	jnz	short DoCheck
 14916                                  %endif
 14917                                  
 14918                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14919                                  ; media check.
 14920                                  ;	CMP	word [SI+curdir.ID],0
 14921                                  ;	JZ	short GetDst
 14922                                  DoCheck:
 14923                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14924                                  
 14925                                  	; 25/01/2024
 14926                                  	; MSDOS 6.0
 14927                                  	;push	ds
 14928                                  	;mov	ds,[cs:DosDSeg]
 14929                                  	;mov	byte [NoSetDir],0 ; *
 14930                                  	;pop	ds
 14931                                  
 14932 000020CE BF[BE03]                	MOV	DI,OPENBUF
 14933 000020D1 E8A820                  	call	ValidateCDS		; output is ES:DI -> CDS
 14934                                  
 14935 000020D4 06                      	push	es	 		; swap source and destination
 14936 000020D5 57                      	push	di
 14937 000020D6 5E                      	pop	si
 14938 000020D7 1F                      	pop	ds
 14939                                  GetDst:
 14940 000020D8 5F                      	pop	di
 14941 000020D9 07                      	pop	es			; get real destination
 14942 000020DA 72D6                    	JC	short CurdirErr
 14943                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14944                                  	;
 14945                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14946                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14947                                  	; 16/12/2022
 14948                                  	;add	si,0  ; add si,curdir.text
 14949                                  	;
 14950                                  	;add	si,[si+4Fh] ; 17/05/2019
 14951 000020DC 03744F                  	ADD	SI,[SI+curdir.end]
 14952 000020DF 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14953 000020E2 7501                    	JNZ	short CurrentCopy
 14954 000020E4 46                      	INC	SI
 14955                                  CurrentCopy:
 14956                                  ;	call	FStrCpy
 14957                                  ;; 10/29/86 E5 char
 14958 000020E5 50                      	PUSH	AX
 14959 000020E6 AC                      	LODSB				; get char
 14960 000020E7 08C0                    	OR	AL,AL
 14961 000020E9 7413                    	JZ	short FOK
 14962 000020EB 3C05                    	CMP	AL,05H
 14963 000020ED 740D                    	JZ	short FCHANGE
 14964 000020EF EB01                    	JMP	short FFF
 14965                                  FCPYNEXT:
 14966 000020F1 AC                      	LODSB				; get char
 14967                                  FFF:
 14968 000020F2 3C5C                    	CMP	AL,'\'			; beginning of directory
 14969 000020F4 7508                    	JNZ	short FOK		; no
 14970 000020F6 AA                      	STOSB				; put into user's buffer
 14971 000020F7 AC                      	LODSB				; 1st char of dir is 05?
 14972 000020F8 3C05                    	CMP	AL,05H
 14973 000020FA 7502                    	JNZ	short FOK		; no
 14974                                  FCHANGE:
 14975 000020FC B0E5                    	MOV	AL,0E5H			; make it E5
 14976                                  FOK:
 14977 000020FE AA                      	STOSB				; put into user's buffer
 14978 000020FF 08C0                    	OR	AL,AL			; final char
 14979 00002101 75EE                    	JNZ	short FCPYNEXT		; no
 14980 00002103 58                      	POP	AX
 14981                                  
 14982                                  ;; 10/29/86 E5 char
 14983 00002104 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14984 00002106 E805F2                  	call	LCritDisk
 14985 00002109 E92BE5                  	jmp	SYS_RET_OK		; no more, bye!
 14986                                  
 14987                                  ; 17/05/2019 - Retro DOS v4.0
 14988                                  
 14989                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14990                                  
 14991                                  ;BREAK <$RmDir -- Remove a directory>
 14992                                  ;----------------------------------------------------------------------------
 14993                                  ;
 14994                                  ; Procedure Name : $RmDir
 14995                                  ;
 14996                                  ; Inputs:
 14997                                  ;	DS:DX Points to asciz name
 14998                                  ; Function:
 14999                                  ;	Delete directory if empty
 15000                                  ; Returns:
 15001                                  ;	STD XENIX Return
 15002                                  ;	AX = error_path_not_found If path bad
 15003                                  ;	AX = error_access_denied If
 15004                                  ;		Directory not empty
 15005                                  ;		Path not directory
 15006                                  ;		Root directory specified
 15007                                  ;		Directory malformed (. and .. not first two entries)
 15008                                  ;		User tries to delete a current directory
 15009                                  ;	AX = error_current_directory
 15010                                  ;
 15011                                  ;----------------------------------------------------------------------------
 15012                                  
 15013                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15014                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15015                                  
 15016                                  _$RMDIR:
 15017 0000210C 52                      	push	dx			; Save ptr to name
 15018 0000210D 1E                      	push	ds
 15019 0000210E 89D6                    	mov	si,dx			; Load ptr into si
 15020 00002110 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15021 00002113 57                      	push	di
 15022 00002114 E88F49                  	call	TransPathNoSet		; Translate the name
 15023 00002117 5F                      	pop	di			; di = ptr to buf for trans name
 15024 00002118 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15025 0000211A 1F                      	pop	ds
 15026 0000211B 5A                      	pop	dx			; Restore the name
 15027                                  	;mov	al,3
 15028 0000211C B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15029                                  	; 16/12/2022
 15030                                  rmdir_errj: ; 10/08/2018
 15031                                  chdir_errj:
 15032 0000211E EB9F                    	jmp	short curdir_errj
 15033                                  	;jmp	SYS_RET_ERR
 15034                                  rmlset:
 15035 00002120 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15036 00002126 7512                    	Jnz	short rmerr		;	return (-1);
 15037 00002128 16                      	push	ss
 15038 00002129 07                      	pop	es
 15039 0000212A 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15040                                  rmloop: 
 15041 0000212C E8E948                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15042 0000212F 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15043 00002131 E863F0                  	call	StrCmp			; Are the 2 paths the same?
 15044 00002134 7404                    	jz	short rmerr		; Yes, report error.
 15045 00002136 FEC0                    	inc	al			; No, inc al to next drive number
 15046 00002138 EBF2                    	jmp	short rmloop		; Go check next drive.
 15047                                  rmerr:
 15048 0000213A 1F                      	pop	ds
 15049 0000213B 5A                      	pop	dx			; Restore the name
 15050                                  	;mov	al,10h
 15051 0000213C B010                    	mov	al,error_current_directory ; error
 15052                                  	; 16/12/2022
 15053                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15054                                  ;chdir_errj:
 15055 0000213E EBDE                    	jmp	short rmdir_errj
 15056                                  rmcont:
 15057 00002140 1F                      	pop	ds
 15058 00002141 5A                      	pop	dx			; Restore the name
 15059 00002142 BE[6B31]                	MOV	SI,DOS_RMDIR
 15060 00002145 EB7C                    	JMP	DoDirCall
 15061                                  
 15062                                  ; 17/05/2019 - Retro DOS v4.0
 15063                                  
 15064                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15065                                  
 15066                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15067                                  ;----------------------------------------------------------------------------
 15068                                  ;
 15069                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15070                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15071                                  ; several cases to consider:
 15072                                  ;
 15073                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15074                                  ;	it into a WFP.	We verify the existance of this directory and then
 15075                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15076                                  ;	directory cluster.
 15077                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15078                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15079                                  ;	WFP back into the CDS.
 15080                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15081                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15082                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15083                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15084                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15085                                  ;	to process the path but to return the logical CDS and the logical
 15086                                  ;	path.  We then copy the logical path into the logical CDS.
 15087                                  ;
 15088                                  ; Inputs:
 15089                                  ;	DS:DX Points to asciz name
 15090                                  ; Returns:
 15091                                  ;	STD XENIX Return
 15092                                  ;	AX = chdir_path_not_found if error
 15093                                  ;
 15094                                  ;----------------------------------------------------------------------------
 15095                                  
 15096                                  _$CHDIR:
 15097 00002147 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15098 0000214A 89D6                    	MOV	SI,DX			; get source
 15099 0000214C E84B49                  	call	TransPath		; go munge the path and get real CDS
 15100 0000214F 7304                    	JNC	short ChDirCrack	; no errors, try path
 15101                                  ChDirErrP:
 15102                                  	;mov	al,3
 15103 00002151 B003                    	MOV	AL,error_path_not_found
 15104                                  ChDirErr:
 15105                                  	;jmp	SYS_RET_ERR 	; oops!
 15106                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15107 00002153 EBC9                    	jmp	short chdir_errj
 15108                                  
 15109                                  ChDirCrack:
 15110 00002155 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15111 0000215A 75F5                    	JNZ	short ChDirErrP
 15112                                  
 15113                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15114                                  ; found.
 15115                                  
 15116 0000215C C43E[A205]              	LES	DI,[THISCDS]
 15117 00002160 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15118 00002163 74EC                    	JZ	short ChDirErrP		;	error ();
 15119                                  
 15120                                  ; Find out if the directory exists.
 15121                                  
 15122 00002165 E8C00F                  	call	DOS_CHDIR
 15123                                  	;Jc	short ChDirErr
 15124                                  	; 16/12/2022
 15125 00002168 72B4                    	jc	short chdir_errj
 15126                                  ;
 15127                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15128                                  ; not network). If one was seen, all we need to do is copy in the text
 15129                                  ;
 15130 0000216A C43E[A205]              	LES	DI,[THISCDS]
 15131                                  	;test	word [es:di+43h],2000h
 15132                                  	; 17/12/2022
 15133 0000216E 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15134                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15135 00002173 7425                    	JZ	short GotCDS
 15136                                  
 15137                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15138                                  
 15139 00002175 06                      	push	es	
 15140 00002176 57                      	push	di
 15141 00002177 51                      	push	cx			; save CDS and cluster...
 15142 00002178 E806E3                  	call	Get_User_Stack		; get original text
 15143                                  	
 15144                                  	;mov	di,[si+6]
 15145 0000217B 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15146                                  	;mov	ds,[si+0Eh]
 15147 0000217E 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15148                                  	
 15149 00002181 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15150 00002184 87F7                    	XCHG	SI,DI
 15151 00002186 30C0                    	XOR	AL,AL			; do no splicing
 15152 00002188 57                      	push	di
 15153 00002189 E81A49                  	call	TransPathNoSet		; Munge path
 15154 0000218C 5E                      	pop	si
 15155                                  
 15156                                  ; There should NEVER be an error here.
 15157                                  
 15158                                  ;IF FALSE
 15159                                  ;	JNC SKipErr
 15160                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15161                                  ;SkipErr:
 15162                                  ;ENDIF
 15163 0000218D C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15164                                  	;mov	word [es:di+49h],-1
 15165 00002191 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15166                                  					; no valid cluster here...
 15167 00002197 59                      	pop	cx
 15168 00002198 5F                      	pop	di
 15169 00002199 07                      	pop	es
 15170                                  
 15171                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15172                                  
 15173                                  GotCDS:
 15174                                  
 15175                                  ; wfp_start points to the text. See if it is long enough
 15176                                  
 15177                                  	; MSDOS 3.3
 15178                                  	;push	ss
 15179                                  	;pop	ds
 15180                                  	;mov	si,[WFP_START]
 15181                                  	;push	cx
 15182                                  	;call	DStrLen
 15183                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15184                                  	;pop	cx
 15185                                  	;ja	short ChDirErrP
 15186                                  
 15187                                  	; MSDOS 6.0
 15188 0000219A E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15189 0000219D 77B2                    	JA	short ChDirErrP
 15190                                  	; MSDOS 3.3 & MSDOS 6.0
 15191                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15192                                  	; 17/12/2022
 15193 0000219F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15194 000021A4 7512                    	JNZ	short SkipRecency
 15195                                  	; MSDOS 6.0
 15196                                  	;test	word [es:di+43h],2000h
 15197                                  	; 17/12/2022
 15198 000021A6 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15199                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15200                                  					;PTM. for Join and Subst ;AN000;
 15201 000021AB 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15202 000021AD B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15203                                  setdirclus:
 15204                                  	;mov	[es:di+49h],cx
 15205 000021B0 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15206 000021B4 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15207                                  SkipRecency:
 15208 000021B8 E80DF0                  	call	FStrCpy
 15209 000021BB 30C0                    	XOR	AL,AL
 15210                                  mkdir_ok:
 15211 000021BD E977E4                  	jmp	SYS_RET_OK
 15212                                  
 15213                                  ; 17/05/2019 - Retro DOS v4.0
 15214                                  
 15215                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15216                                  
 15217                                  ;BREAK <$MkDir - Make a directory entry>
 15218                                  ;---------------------------------------------------------------------------
 15219                                  ;
 15220                                  ; Procedure Name : $MkDir
 15221                                  ; Inputs:
 15222                                  ;	DS:DX Points to asciz name
 15223                                  ; Function:
 15224                                  ;	Make a new directory
 15225                                  ; Returns:
 15226                                  ;	STD XENIX Return
 15227                                  ;	AX = mkdir_path_not_found if path bad
 15228                                  ;	AX = mkdir_access_denied  If
 15229                                  ;		Directory cannot be created
 15230                                  ;		Node already exists
 15231                                  ;		Device name given
 15232                                  ;		Disk or directory(root) full
 15233                                  ;---------------------------------------------------------------------------
 15234                                  
 15235                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15236                                  
 15237                                  _$MKDIR:
 15238 000021C0 BE[3B30]                	MOV	SI,DOS_MKDIR
 15239                                  DoDirCall:
 15240 000021C3 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15241                                  
 15242 000021C6 56                      	push	si
 15243 000021C7 89D6                    	MOV	SI,DX			; get source
 15244 000021C9 E8CE48                  	call	TransPath		; go munge the path
 15245 000021CC 5E                      	pop	si
 15246 000021CD 7305                    	JNC	short MkDirCrack	; no errors, try path
 15247                                  MkErrP:
 15248 000021CF B003                    	MOV	AL,error_path_not_found	; oops!
 15249                                  MkErr:
 15250 000021D1 E96CE4                  	jmp	SYS_RET_ERR
 15251                                  MkDirCrack:
 15252 000021D4 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15253 000021DA 75F3                    	JNZ	short MkErrP
 15254                                  
 15255                                  	; MSDOS 3.3
 15256                                  	;push	ss
 15257                                  	;pop	ds
 15258                                  	;call	si
 15259                                  	;jb	short MkErr
 15260                                  	;;jmp	short mkdir_ok
 15261                                  	;jmp	SYS_RET_OK
 15262                                  
 15263                                  	; MSDOS 6.0
 15264 000021DC 56                      	PUSH	SI			;PTM.			;AN000;
 15265 000021DD E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15266 000021E0 5E                      	POP	SI			;PTM.			;AN000;
 15267 000021E1 7604                    	JBE	short pathok		;PTM.			;AN000;
 15268                                  	;mov	al,5
 15269 000021E3 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15270                                  	;jmp	SYS_RET_ERR		;PTM.
 15271 000021E5 EBEA                    	jmp	short MkErr
 15272                                  pathok:
 15273 000021E7 FFD6                    	CALL	SI			; go get file
 15274 000021E9 72E6                    	JC	short MkErr		; no errors
 15275                                  	; 16/12/2022
 15276                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15277 000021EB EBD0                    	jmp	short mkdir_ok
 15278                                  	;jmp	SYS_RET_OK
 15279                                  
 15280                                  ;----------------------------------------------------------------------------
 15281                                  ;
 15282                                  ; Procedure Name : Check_PathLen
 15283                                  ;
 15284                                  ; Inputs:
 15285                                  ;	nothing
 15286                                  ; Function:
 15287                                  ;	check if final path length greater than 67
 15288                                  ; Returns:
 15289                                  ;	Above flag set if > 67
 15290                                  ;
 15291                                  ;---------------------------------------------------------------------------
 15292                                  
 15293                                  Check_PathLen:
 15294                                  	; 09/09/2018
 15295                                  	;mov	SI,[WFP_START]
 15296 000021ED 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15297                                  Check_PathLen2:
 15298 000021F2 16                      	push	ss
 15299 000021F3 1F                      	pop	ds
 15300                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15301 000021F4 51                      	push	CX	
 15302 000021F5 E8E7EF                  	CALL	DStrLen
 15303 000021F8 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15304 000021FB 59                      	POP	CX
 15305 000021FC C3                      	retn
 15306                                  
 15307                                  ;============================================================================
 15308                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15309                                  ;============================================================================
 15310                                  ; 07/08/2018 - Retro DOS v3.0
 15311                                  ; 17/05/2019 - Retro DOS v4.0
 15312                                  
 15313                                  ;**	IOCTL system call.
 15314                                  ;----------------------------------------------------------------------------
 15315                                  ;	$IOCTL
 15316                                  ;
 15317                                  ;	  Revision history:
 15318                                  ;
 15319                                  ;		Created: ARR 4 April 1983
 15320                                  ;
 15321                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15322                                  ;
 15323                                  ;		A000	version 4.00	Jan. 1988
 15324                                  ;
 15325                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15326                                  ;
 15327                                  
 15328                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15329                                  ;---------------------------------------------------------------------------
 15330                                  ;
 15331                                  ;   Assembler usage:
 15332                                  ;	    MOV     BX, Handle
 15333                                  ;	    MOV     DX, Data
 15334                                  ;
 15335                                  ;	(or LDS     DX,BUF
 15336                                  ;	    MOV     CX,COUNT)
 15337                                  ;
 15338                                  ;	    MOV     AH, Ioctl
 15339                                  ;	    MOV     AL, Request
 15340                                  ;	    INT     21h
 15341                                  ;
 15342                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15343                                  ;	    attribute word in DX, handle in BX:
 15344                                  ;	    DH = high word of device driver attributes
 15345                                  ;	    DL = low byte of sf_flags
 15346                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15347                                  ;	    in BX.
 15348                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15349                                  ;	    into DS:DX.  Return number read in AX.
 15350                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15351                                  ;	    DS:DX.  Return bytes written in AX.
 15352                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15353                                  ;	    into DS:DX.  Return number read in AX.
 15354                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15355                                  ;	    DS:DX.  Return bytes written in AX.
 15356                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15357                                  ;	    device, AL = 0FFh, otherwise 0.
 15358                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15359                                  ;	    device, AL = 0FFh, otherwise 0.
 15360                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15361                                  ;	    removable media, 0 otherwise.
 15362                                  ;	 9  Return the contents of the device attribute word in DX for the
 15363                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15364                                  ;	    network. 8000h is the bit for local use.
 15365                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15366                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15367                                  ;	    the count and CX is the delay.
 15368                                  ;
 15369                                  ;   Error returns:
 15370                                  ;	    AX = error_invalid_handle
 15371                                  ;	       = error_invalid_function
 15372                                  ;	       = error_invalid_data
 15373                                  ;
 15374                                  ;-------------------------------------------------------------------------------
 15375                                  ;
 15376                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15377                                  ;   than the above
 15378                                  ;
 15379                                  ;	There are several basic forms of IOCTL calls:
 15380                                  ;
 15381                                  ;
 15382                                  ;	** Get/Set device information:	**
 15383                                  ;
 15384                                  ;	ENTRY	(AL) = function code
 15385                                  ;		  0 - Get device information
 15386                                  ;		  1 - Set device information
 15387                                  ;		(BX) = file handle
 15388                                  ;		(DX) = info for "Set Device Information"
 15389                                  ;	EXIT	'C' set if error
 15390                                  ;		  (AX) = error code
 15391                                  ;		'C' clear if OK
 15392                                  ;		  (DX) = info for "Get Device Information"
 15393                                  ;	USES	ALL
 15394                                  ;
 15395                                  ;
 15396                                  ;	**  Read/Write Control Data From/To Handle  **
 15397                                  ;
 15398                                  ;	ENTRY	(AL) = function code
 15399                                  ;		  2 - Read device control info
 15400                                  ;		  3 - Write device control info
 15401                                  ;		(BX) = file handle
 15402                                  ;		(CX) = transfer count
 15403                                  ;		(DS:DX) = address for data
 15404                                  ;	EXIT	'C' set if error
 15405                                  ;		  (AX) = error code
 15406                                  ;		'C' clear if OK
 15407                                  ;		  (AX) = count of bytes transfered
 15408                                  ;	USES	ALL
 15409                                  ;
 15410                                  ;
 15411                                  ;	**  Read/Write Control Data From/To Block Device  **
 15412                                  ;
 15413                                  ;	ENTRY	(AL) = function code
 15414                                  ;		  4 - Read device control info
 15415                                  ;		  5 - Write device control info
 15416                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15417                                  ;		(CX) = transfer count
 15418                                  ;		(DS:DX) = address for data
 15419                                  ;	EXIT	'C' set if error
 15420                                  ;		  (AX) = error code
 15421                                  ;		'C' clear if OK
 15422                                  ;		  (AX) = count of bytes transfered
 15423                                  ;	USES	ALL
 15424                                  ;
 15425                                  ;
 15426                                  ;	**  Get Input/Output Status  **
 15427                                  ;
 15428                                  ;	ENTRY	(AL) = function code
 15429                                  ;		  6 - Get Input status
 15430                                  ;		  7 - Get Output Status
 15431                                  ;		(BX) = file handle
 15432                                  ;	EXIT	'C' set if error
 15433                                  ;		  (AX) = error code
 15434                                  ;		'C' clear if OK
 15435                                  ;		  (AL) = 00 if not ready
 15436                                  ;		  (AL) = FF if ready
 15437                                  ;	USES	ALL
 15438                                  ;
 15439                                  ;
 15440                                  ;	**  Get Drive Information  **
 15441                                  ;
 15442                                  ;	ENTRY	(AL) = function code
 15443                                  ;		  8 - Check for removable media
 15444                                  ;		  9 - Get device attributes
 15445                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15446                                  ;	EXIT	'C' set if error
 15447                                  ;		  (AX) = error code
 15448                                  ;		'C' clear if OK
 15449                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15450                                  ;		  (DX) = device attribute word (func. 9)
 15451                                  ;	USES	ALL
 15452                                  ;
 15453                                  ;
 15454                                  ;	**  Get Redirected bit	**
 15455                                  ;
 15456                                  ;	ENTRY	(AL) = function code
 15457                                  ;		  0Ah - Network stuff
 15458                                  ;		(BX) = file handle
 15459                                  ;	EXIT	'C' set if error
 15460                                  ;		  (AX) = error code
 15461                                  ;		'C' clear if OK
 15462                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15463                                  ;	USES	ALL
 15464                                  ;
 15465                                  ;
 15466                                  ;	**  Change sharer retry parameters  **
 15467                                  ;
 15468                                  ;	ENTRY	(AL) = function code
 15469                                  ;		  0Bh - Set retry parameters
 15470                                  ;		(CX) = retry loop count
 15471                                  ;		(DX) = number of retries
 15472                                  ;	EXIT	'C' set if error
 15473                                  ;		  (AX) = error code
 15474                                  ;		'C' clear if OK
 15475                                  ;	USES	ALL
 15476                                  ;
 15477                                  ;
 15478                                  ;   =================================================================
 15479                                  ;
 15480                                  ;	**  New Standard Control  **
 15481                                  ;
 15482                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15483                                  ;	FORMS ARE OBSOLETE.
 15484                                  ;
 15485                                  ;   =================================================================
 15486                                  ;
 15487                                  ;	ENTRY	(AL) = function code
 15488                                  ;		  0Ch - Control Function subcode
 15489                                  ;		(BX) = File Handle
 15490                                  ;		(CH) = Category Indicator
 15491                                  ;		(CL) = Function within category
 15492                                  ;		(DS:DX) = address for data, if any
 15493                                  ;		(SI) = Passed to device as argument, use depends upon function
 15494                                  ;		(DI) = Passed to device as argument, use depends upon function
 15495                                  ;	EXIT	'C' set if error
 15496                                  ;		  (AX) = error code
 15497                                  ;		'C' clear if OK
 15498                                  ;		  (SI) = Return value, meaning is function dependent
 15499                                  ;		  (DI) = Return value, meaning is function dependent
 15500                                  ;		  (DS:DX) = Return address, use is function dependent
 15501                                  ;	USES	ALL
 15502                                  ;
 15503                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15504                                  ;     (See inc\ioctl.inc for more info)
 15505                                  ;
 15506                                  ;	ENTRY	(AL) = function code
 15507                                  ;		  0Dh - Control Function subcode
 15508                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15509                                  ;		(CH) = Category Indicator
 15510                                  ;		(CL) = Function within category
 15511                                  ;		(DS:DX) = address for data, if any
 15512                                  ;		(SI) = Passed to device as argument, use depends upon function
 15513                                  ;		(DI) = Passed to device as argument, use depends upon function
 15514                                  ;
 15515                                  ;	EXIT	'C' set if error
 15516                                  ;		  (AX) = error code
 15517                                  ;		'C' clear if OK
 15518                                  ;		  (DS:DX) = Return address, use is function dependent
 15519                                  ;	USES	ALL
 15520                                  ;
 15521                                  ;---------------------------------------------------------------------------
 15522                                  	
 15523                                  	; 17/05/2019 - Retro DOS v4.0
 15524                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15525                                  
 15526                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15527                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15528                                  
 15529                                  IOCTLJMPTABLE:	;label	word
 15530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15531 000021FD [3922]                  	dw	ioctl_getset_data	; 0
 15532 000021FF [3922]                  	dw	ioctl_getset_data   	; 1
 15533 00002201 [8922]                  	dw	ioctl_control_string	; 2
 15534 00002203 [8922]                  	dw	ioctl_control_string	; 3
 15535 00002205 [D723]                  	dw	ioctl_get_dev		; 4
 15536 00002207 [D723]                  	dw	ioctl_get_dev		; 5
 15537 00002209 [A322]                  	dw	ioctl_status		; 6
 15538 0000220B [A322]                  	dw	ioctl_status		; 7
 15539 0000220D [4423]                  	dw	ioctl_rem_media		; 8
 15540 0000220F [7F23]                  	dw	ioctl_drive_attr	; 9
 15541 00002211 [C923]                  	dw	ioctl_handle_redir	; A
 15542 00002213 [BF22]                  	dw	Set_Retry_Parameters	; B
 15543 00002215 [CD22]                  	dw	GENERICIOCTLHANDLE	; C
 15544 00002217 [E422]                  	dw	GENERICIOCTL		; D
 15545                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15546 00002219 [7A24]                  	dw	ioctl_drive_owner	; E
 15547 0000221B [7A24]                  	dw	ioctl_drive_owner	; F
 15548                                  	; MSDOS 6.0
 15549 0000221D [CD22]                  	dw	query_handle_support	; 10h
 15550 0000221F [E422]                  	dw	query_device_support	; 11h
 15551                                  
 15552                                  	; 11/11/2022
 15553                                  _$IOCTL:
 15554 00002221 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15555 00002223 16                      	push	ss
 15556 00002224 1F                      	pop	ds			;hkn; SS is DOSDATA
 15557                                  
 15558                                  	; MSDOS 3.3
 15559                                  	;cmp	al,0Fh 
 15560                                  	; MSDOS 6.0
 15561 00002225 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15562 00002227 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15563                                  
 15564                                  	; 14/01/2024
 15565                                  	; 28/05/2019
 15566                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15567 00002229 89C7                    	mov	di,ax			; di NOT a PARM
 15568 0000222B 81E7FF00                	and	di,0FFh			; di = al
 15569 0000222F D1E7                    	shl	di,1			; di = index into jmp table
 15570                                  	;pop	AX			; Restore AL for generic IOCTL
 15571                                  
 15572 00002231 2EFFA5[FD21]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15573                                  
 15574                                  ioctl_bad_funj2:
 15575 00002236 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15576                                  
 15577                                  ;--------------------------------------------------------------------------
 15578                                  ;
 15579                                  ; IOCTL: AL = 0,1
 15580                                  ;
 15581                                  ; ENTRY: DS = DOSDATA
 15582                                  ;
 15583                                  ;--------------------------------------------------------------------------
 15584                                  
 15585                                  ioctl_getset_data:
 15586                                  	; MSDOS 6.0
 15587 00002239 E86343                  	call	SFFromHandle		; ES:DI -> SFT
 15588 0000223C 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15589                                  ioctl_bad_handle:
 15590                                  	;mov	al,6
 15591 0000223E B006                    	mov	al,error_invalid_handle
 15592                                  ioctl_error:
 15593 00002240 E9FDE3                  	jmp	SYS_RET_ERR
 15594                                  
 15595                                  ioctl_check_permissions:
 15596 00002243 3C00                    	CMP	AL,0
 15597                                  	;mov	al,[es:di+5]
 15598 00002245 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15599 00002249 741B                    	JZ	short ioctl_read	; read the byte
 15600                                  
 15601 0000224B 08F6                    	or	dh,dh
 15602 0000224D 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15603                                  	;mov	al,0Dh
 15604 0000224F B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15605                                  	;jmp	SYS_RET_ERR
 15606 00002251 EBED                    	jmp	short ioctl_error
 15607                                  
 15608                                  ioctl_check_device:
 15609 00002253 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15610 00002255 74DF                    	jz	short ioctl_bad_funj2
 15611 00002257 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15612                                  					;   device bit!! He can muck with the
 15613                                  					;   others at will.
 15614 0000225A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15615 0000225F 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15616                                  ioctl_ok:
 15617 00002263 E9D1E3                  	jmp	SYS_RET_OK
 15618                                  
 15619                                  ioctl_read:
 15620 00002266 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15621 0000226B 30E4                    	XOR	AH,AH
 15622 0000226D A880                    	test	AL,devid_device 	; Should I set high byte
 15623 0000226F 740D                    	JZ	short ioctl_no_high	; no
 15624 00002271 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15625                                  	;les	di,[es:di+7]
 15626 00002276 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15627                                  	;mov	ah,[es:di+5]
 15628 0000227A 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15629                                  ioctl_no_high:
 15630 0000227E 89C2                    	MOV	DX,AX
 15631                                  ioctl_set_dx:	; 16/12/2022
 15632 00002280 E8FEE1                  	call	Get_User_Stack
 15633                                  	;mov	[si+6],dx
 15634 00002283 895406                  	MOV	[SI+user_env.user_DX],DX
 15635                                  	;;jmp	SYS_RET_OK
 15636                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15637                                  ioctl_ok_j:
 15638                                  	; 16/12/2022
 15639 00002286 E9B1E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15640                                  	;jmp	short ioctl_ok
 15641                                  	; 26/07/2019
 15642                                  	;jmp	SYS_RET_OK_clc
 15643                                  
 15644                                  ;--------------------------------------------------------------------------
 15645                                  ;
 15646                                  ; IOCTL: AL = 2,3
 15647                                  ;
 15648                                  ; ENTRY: DS = DOSDATA
 15649                                  ;	 SI = user's DS
 15650                                  ;
 15651                                  ;--------------------------------------------------------------------------
 15652                                  
 15653                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15654                                  ioctl_control_string:
 15655 00002289 E81343                  	call	SFFromHandle		; ES:DI -> SFT
 15656 0000228C 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15657                                  	; 07/12/2022
 15658                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15659                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15660                                  	; MSDOS 5.0 & MSDOS 6.0
 15661 0000228E 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15662 00002293 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15663 00002295 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15664 0000229A 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15665 0000229E 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15666 000022A0 E93C01                  	JMP	ioctl_do_string
 15667                                  
 15668                                  ;--------------------------------------------------------------------------
 15669                                  ;
 15670                                  ; IOCTL: AL = 6,7
 15671                                  ;
 15672                                  ; ENTRY: DS = DOSDATA
 15673                                  ;
 15674                                  ;--------------------------------------------------------------------------
 15675                                  
 15676                                  ioctl_status:
 15677 000022A3 B401                    	MOV	AH,1
 15678 000022A5 2C06                    	SUB	AL,6			; 6=0,7=1
 15679 000022A7 7402                    	JZ	short ioctl_get_status
 15680 000022A9 B403                    	MOV	AH,3
 15681                                  ioctl_get_status:
 15682 000022AB 50                      	PUSH	AX
 15683 000022AC E8E512                  	call	GET_IO_SFT
 15684 000022AF 58                      	POP	AX
 15685                                  	;JNC	short DO_IOFUNC
 15686                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15687                                  	; 16/12/2022
 15688 000022B0 728C                    	jc	short ioctl_bad_handle
 15689                                  DO_IOFUNC:
 15690 000022B2 E80221                  	call	IOFUNC
 15691 000022B5 88C4                    	MOV	AH,AL
 15692 000022B7 B0FF                    	MOV	AL,0FFH
 15693                                  	;JNZ	short ioctl_status_ret
 15694                                  	; 29/01/2024
 15695 000022B9 75A8                    	jnz	short ioctl_ok
 15696 000022BB FEC0                    	INC	AL
 15697                                  ioctl_status_ret:
 15698                                  	;jmp	SYS_RET_OK
 15699                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15700                                  	;jmp	short ioctl_ok_j
 15701                                  	; 16/12/2022
 15702 000022BD EBA4                    	jmp	short ioctl_ok
 15703                                  
 15704                                  ;--------------------------------------------------------------------------
 15705                                  ;
 15706                                  ; IOCTL: AL = B
 15707                                  ;
 15708                                  ; ENTRY: DS = DOSDATA
 15709                                  ;
 15710                                  ;--------------------------------------------------------------------------
 15711                                  
 15712                                  Set_Retry_Parameters:
 15713                                  	; 09/09/2018
 15714 000022BF 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15715 000022C3 09D2                    	OR	DX,DX			; zero retries not allowed
 15716 000022C5 7475                    	JZ	short ioctl_bad_fun
 15717 000022C7 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15718                                  doneok:
 15719                                  	;jmp	SYS_RET_OK		; Done
 15720                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15721                                  	;jmp	short ioctl_status_ret
 15722                                  	; 16/12/2022
 15723 000022CB EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15724                                  
 15725                                  ;--------------------------------------------------------------------------
 15726                                  ;
 15727                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15728                                  ;
 15729                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15730                                  ;	SI:DX -> Users Device Parameter Table
 15731                                  ;	IOCALL -> IOCTL_Req structure
 15732                                  ;
 15733                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15734                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15735                                  ;	call.
 15736                                  ;
 15737                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15738                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15739                                  ;         return address off the stack if the drive is invalid.
 15740                                  ;
 15741                                  ;--------------------------------------------------------------------------
 15742                                  
 15743                                  query_handle_support:	; Entry point for handles
 15744                                  GENERICIOCTLHANDLE:
 15745 000022CD E8CF42                  	call	SFFromHandle		; Get SFT for device.
 15746 000022D0 726F                    	jc	short ioctl_bad_handlej
 15747                                  
 15748                                  	;test	word [es:di+5],8000h
 15749                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15750                                  	;test	byte [es:di+6],80h
 15751 000022D2 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15752 000022D7 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15753                                  
 15754 000022D9 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15755                                  	;les	di,[es:di+7]
 15756 000022DE 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15757 000022E2 EB0F                    	jmp	short Do_GenIOCTL
 15758                                  
 15759                                  query_device_support:	; Entry point for devices:
 15760                                  GENERICIOCTL:
 15761 000022E4 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15762 000022E9 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15763 000022EC 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15764                                  
 15765 000022EE E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15766 000022F1 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15767                                  
 15768                                  Do_GenIOCTL:
 15769                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15770                                  					; Can device handle Generic IOCTL funcs
 15771                                  	; 09/09/2018
 15772                                  	;test	byte [es:di+4],40h
 15773 000022F3 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15774 000022F8 7442                    	jz	short ioctl_bad_fun
 15775                                  
 15776                                  	; 17/05/2019 - Retro DOS v4.0
 15777                                  
 15778                                  	; MSDOS 6.0
 15779                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15780 000022FA C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15781                                  	;cmp	al,10h
 15782 000022FF 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15783 00002301 7C0C                    	jl	short SetIOCtlBlock
 15784                                  	
 15785                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15786                                  	;test	byte [es:di+4],80h 
 15787 00002303 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15788 00002308 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15789                                  	;
 15790                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15791 0000230A C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15792                                  
 15793                                  SetIOCtlBlock:
 15794 0000230F 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15795 00002310 57                      	PUSH	DI			; in DS:SI
 15796                                  					; Setup Generic IOCTL Request Block
 15797                                  	;mov	byte [IOCALL_REQLEN],23
 15798 00002311 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15799                                  	; 07/09/2018 (MSDOS 3.3)
 15800                                  	;;mov	byte [IOCALL_REQFUNC],19
 15801                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15802                                  	;
 15803 00002316 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15804 0000231A 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15805 0000231E 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15806 00002322 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15807 00002326 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15808 0000232A 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15809 0000232E 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15810                                  
 15811                                  ;hkn; IOCALL is in DOSDATA
 15812 00002332 BB[7C03]                	MOV	BX,IOCALL
 15813                                  
 15814 00002335 16                      	PUSH	SS
 15815 00002336 07                      	POP	ES
 15816                                  					; DS:SI -> Device header.
 15817 00002337 5E                      	POP	SI
 15818 00002338 1F                      	POP	DS
 15819                                  	; 10/08/2018
 15820 00002339 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15821                                  
 15822                                  ioctl_bad_fun:
 15823 0000233C B001                    	mov	al, error_invalid_function  ; 1
 15824 0000233E E9FFE2                  	jmp	SYS_RET_ERR	
 15825                                  
 15826                                  ioctl_bad_handlej:
 15827 00002341 E9FAFE                  	jmp	ioctl_bad_handle
 15828                                  
 15829                                  ;---------------------------------------------------------------------------
 15830                                  ;
 15831                                  ; IOCTL: AL = 8
 15832                                  ;
 15833                                  ; ENTRY: DS = DOSDATA
 15834                                  ;
 15835                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15836                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15837                                  ;         return address off the stack if the drive is invalid.
 15838                                  ;
 15839                                  ;-------------------------------------------------------------------------
 15840                                  
 15841                                  	; 30/01/2024
 15842                                  ioctl_rem_media:
 15843                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15844 00002344 E82401                  	CALL	Check_If_Net
 15845 00002347 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15846                                  					;   certainly don't know how to do this
 15847                                  					;   call.
 15848                                  	;test	word [es:di+4],800h
 15849                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15850                                  	;test	byte [es:di+5],8
 15851 00002349 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15852 0000234E 74EC                    	JZ	short ioctl_bad_fun		; NO
 15853                                  
 15854                                  ;hkn; SS override for IOCALL
 15855                                  	; 30/01/2024
 15856                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15857                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15858 00002350 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15859 00002355 B00D                    	MOV	AL,REMHL  ; 13
 15860 00002357 88DC                    	MOV	AH,BL			; Unit number
 15861                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15862 00002359 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15863 0000235C 31C0                    	XOR	AX,AX
 15864                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15865 0000235E A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15866                                  	
 15867 00002361 06                      	PUSH	ES
 15868 00002362 1F                      	POP	DS
 15869 00002363 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15870 00002365 16                      	PUSH	SS
 15871 00002366 07                      	POP	ES
 15872                                  
 15873                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15874                                  	; 30/01/2024
 15875                                  	; (ds <> ss, ss = DOSDATA segment)
 15876 00002367 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15877 0000236A 1E                      	push	ds
 15878 0000236B 56                      	push	si
 15879 0000236C E81D22                  	call	DEVIOCALL2
 15880 0000236F 5E                      	pop	si
 15881 00002370 1F                      	pop	ds
 15882                                  
 15883                                  ;hkn; SS override
 15884 00002371 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15885                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15886                                  	; 29/01/2024
 15887 00002375 80E402                  	and	ah,STBUI>>8
 15888 00002378 B109                    	MOV	CL,9
 15889 0000237A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15890                                  ioctl_da_ok_j:	; 11/11/2022
 15891 0000237C E9B8E2                  	jmp	SYS_RET_OK
 15892                                  
 15893                                  ;-------------------------------------------------------------------------
 15894                                  ;
 15895                                  ; IOCTL: AL = 9
 15896                                  ;
 15897                                  ; ENTRY: DS = DOSDATA
 15898                                  ;
 15899                                  ;-------------------------------------------------------------------------
 15900                                  
 15901                                  ioctl_drive_attr:
 15902                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15903 0000237F 88D8                    	mov	al,bl
 15904 00002381 E83F46                  	call	GETTHISDRV
 15905 00002384 723E                    	jc	short ioctl_drv_err
 15906 00002386 E8B500                  	call	Get_Driver_BL
 15907                                  	; MSDOS 6.0
 15908 00002389 7239                    	JC	short ioctl_drv_err	; drive not valid
 15909                                  
 15910                                  	;mov	dx,[es:di+4]
 15911 0000238B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15912                                  					; get device attribute word
 15913 0000238F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15914                                  
 15915                                  ;hkn; SS override
 15916                                  	;LES	DI,[SS:THISCDS]
 15917                                  	; 30/01/2024
 15918 00002391 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15919                                  
 15920                                  	;test	word [es:di+43h],8000h
 15921                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15922                                  	;test	byte [es:di+44h],80h
 15923 00002395 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15924 0000239A 7403                    	JZ	short IOCTLShare
 15925                                  
 15926                                  	;or	dx,1000h ; (MSDOS 3.3)
 15927                                  
 15928                                  ;	Net devices don't return a device attribute word.
 15929                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15930                                  
 15931 0000239C BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15932                                  
 15933                                  IOCTLShare:
 15934                                  	; 30/01/2024
 15935                                  	; ds = ss = DOSDATA segment
 15936                                  	;push	ss
 15937                                  	;pop	ds
 15938                                  
 15939 0000239F BE[BE03]                	MOV	SI,OPENBUF
 15940 000023A2 80C341                  	ADD	BL,"A"	; 41h
 15941 000023A5 881C                    	MOV	[SI],BL
 15942 000023A7 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15943 000023AC B80003                  	MOV	AX,0300h
 15944 000023AF F8                      	CLC
 15945                                  	;INT	int_IBM
 15946 000023B0 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15947                                  			; DS:SI -> ASCIZ disk device name 
 15948                                  			; (may be full path or only drive
 15949                                  			; specifier--must include the colon)
 15950                                  			; Return: CF clear if absolute disk access allowed
 15951 000023B2 7303                    	JNC	short IOCTLLocal	; Not shared
 15952                                  	;OR	DX,0200H		; Shared, bit 9
 15953                                  	; 17/12/2022
 15954 000023B4 80CE02                  	or	dh,02h
 15955                                  IOCTLLocal:
 15956                                  	;test	word [es:di+43h],1000h
 15957                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15958                                  	;test	byte [es:di+44h],10h
 15959 000023B7 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15960                                  	;JZ	short ioctl_set_DX
 15961                                  	; 16/12/2022
 15962 000023BC 7403                    	jz	short _ioctl_set_DX
 15963                                  	;OR	DX,8000h
 15964                                  	; 17/12/2022
 15965 000023BE 80CE80                  	or	dh,80h
 15966                                  ;ioctl_set_DX:
 15967                                  _ioctl_set_DX:
 15968                                  	; 16/12/2022
 15969 000023C1 E9BCFE                  	jmp	ioctl_set_dx
 15970                                  ; 16/12/2022
 15971                                  %if 0	
 15972                                  	call	Get_User_Stack
 15973                                  	MOV	[SI+user_env.user_DX],DX
 15974                                  	;;jmp	SYS_RET_OK
 15975                                  	;; 25/06/2019
 15976                                  	;jmp	SYS_RET_OK_clc
 15977                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15978                                  ioctl_gd_ok_j:
 15979                                  	jmp	short ioctl_da_ok_j
 15980                                  %endif
 15981                                  
 15982                                  ioctl_drv_err:
 15983 000023C4 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15984                                  ioctl_gd_err_j:	; 11/11/2022
 15985 000023C6 E977E2                  	jmp	SYS_RET_ERR
 15986                                  
 15987                                  ;--------------------------------------------------------------------------
 15988                                  ;
 15989                                  ; IOCTL: AL = A
 15990                                  ;
 15991                                  ; ENTRY: DS = DOSDATA
 15992                                  ;
 15993                                  ;--------------------------------------------------------------------------
 15994                                  
 15995                                  ioctl_handle_redir:
 15996 000023C9 E8D341                  	call	SFFromHandle		; ES:DI -> SFT
 15997 000023CC 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15998 000023CE E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15999                                  
 16000                                  ioctl_got_sft:
 16001                                  	;mov	dx,[es:di+5]
 16002 000023D1 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16003                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16004                                  	; 16/12/2022
 16005 000023D5 EBEA                    	jmp	short _ioctl_set_DX
 16006                                  
 16007                                  	; 16/12/2022
 16008                                  ;ioctl_bad_funj:
 16009                                  	;JMP	ioctl_bad_fun
 16010                                  
 16011                                  ;--------------------------------------------------------------------------
 16012                                  ;
 16013                                  ; IOCTL: AL= 4,5
 16014                                  ;
 16015                                  ; ENTRY: DS = DOSDATA
 16016                                  ;	 SI = user's DS
 16017                                  ;
 16018                                  ;
 16019                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16020                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16021                                  ;         return address off the stack if the drive is invalid.
 16022                                  ;
 16023                                  ;-------------------------------------------------------------------------
 16024                                  
 16025                                  ioctl_get_dev:
 16026 000023D7 E89100                  	CALL	Check_If_Net
 16027                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16028                                  					; certainly don't know how to do this
 16029                                  					; call.
 16030                                  	; 16/12/2022
 16031 000023DA 7403                    	jz	short ioctl_do_string
 16032                                  ioctl_bad_funj:
 16033 000023DC E95DFF                  	JMP	ioctl_bad_fun
 16034                                  
 16035                                  ioctl_do_string:
 16036                                  	;test	word [es:di+4],4000h
 16037                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16038                                  	;test	byte [es:di+5],40h
 16039 000023DF 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16040 000023E4 74F6                    	JZ	short ioctl_bad_funj		; NO
 16041                                  					; assume IOCTL read
 16042 000023E6 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16043                                  
 16044 000023EB A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16045 000023ED 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16046                                  
 16047                                  					; it is an IOCTL write
 16048 000023EF C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16049                                  
 16050                                  ioctl_control_call:
 16051 000023F4 B016                    	MOV	AL,DRDWRHL ; 22
 16052                                  ioctl_setup_pkt:
 16053 000023F6 88DC                    	MOV	AH,BL			; Unit number
 16054 000023F8 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16055 000023FB 31C0                    	XOR	AX,AX
 16056 000023FD A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16057 00002400 A2[8903]                	MOV	[IOMED],AL
 16058 00002403 890E[8E03]              	MOV	[IOSCNT],CX
 16059 00002407 8916[8A03]              	MOV	[IOXAD],DX
 16060 0000240B 8936[8C03]              	MOV	[IOXAD+2],SI
 16061 0000240F 06                      	PUSH	ES
 16062 00002410 1F                      	POP	DS
 16063 00002411 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16064 00002413 16                      	PUSH	SS
 16065 00002414 07                      	POP	ES
 16066                                  
 16067 00002415 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16068                                  ioctl_do_IO:
 16069 00002418 E87121                  	call	DEVIOCALL2
 16070                                  
 16071                                  ;hkn; SS override for IOCALL
 16072                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16073                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16074                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16075 0000241B 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16076 00002421 7507                    	JNZ	short ioctl_string_err
 16077                                  
 16078                                  ;hkn; SS override
 16079 00002423 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16080                                  	; 16/12/2022
 16081 00002427 E90DE2                  	jmp	SYS_RET_OK
 16082                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16083                                  	;jmp	short ioctl_gd_ok_j
 16084                                  
 16085                                  ioctl_string_err:
 16086 0000242A 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16087                                  device_err:
 16088 0000242F 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16089 00002433 89F8                    	MOV	AX,DI
 16090 00002435 E8F42F                  	call	SET_I24_EXTENDED_ERROR
 16091                                  
 16092                                  ;hkn; use SS override
 16093                                  ;hkn;	mov	ax,[CS:EXTERR]
 16094 00002438 36A1[2403]              	mov	ax,[SS:EXTERR]
 16095                                  	;jmp	SYS_RET_ERR
 16096                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16097 0000243C EB88                    	jmp	short ioctl_gd_err_j
 16098                                  
 16099                                  ; 17/05/2019 - Retro DOS v4.0
 16100                                  
 16101                                  ;--------------------------------------------------------------------------
 16102                                  ; Proc name : Get_Driver_BL
 16103                                  ;
 16104                                  ;	DS is DOSDATA
 16105                                  ;	BL is drive number (0=default)
 16106                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16107                                  ;	No regs modified
 16108                                  ;
 16109                                  ;---------------------------------------------------------------------------
 16110                                  
 16111                                  	; 30/01/2024
 16112                                  Get_Driver_BL:
 16113 0000243E 50                      	PUSH	AX
 16114 0000243F 88D8                    	MOV	AL,BL			; Drive
 16115 00002441 E87F45                  	call	GETTHISDRV
 16116 00002444 7223                    	jc	short ioctl_bad_drv
 16117 00002446 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16118 00002448 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16119 0000244D C43E[A205]              	LES	DI,[THISCDS]
 16120                                  	;test	word [es:di+43h],8000h
 16121                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16122                                  	;test	byte [es:di+44h],80h
 16123 00002451 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16124                                  	;les	di,[es:di+45h]
 16125 00002456 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16126 0000245A 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16127 0000245C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16128                                  	;mov	bl,[es:di+1]
 16129 00002461 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16130                                  	;les	di,[es:di+13h]
 16131 00002465 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16132                                  got_dev_ptr:
 16133                                  	; 30/01/2024
 16134                                  	; cf=0
 16135                                  	;CLC
 16136                                  ioctl_bad_drv:
 16137 00002469 58                      	POP	AX
 16138 0000246A C3                      	retn
 16139                                  
 16140                                  ;-------------------------------------------------------------------------
 16141                                  ; Proc Name : Check_If_Net:
 16142                                  ;
 16143                                  ;
 16144                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16145                                  ; If no device is found, the return address is popped off the stack, and a
 16146                                  ; jump is made to ioctl_drv_err.
 16147                                  ;
 16148                                  ; On Entry:
 16149                                  ; Registers same as those for Get_Driver_BL
 16150                                  ;
 16151                                  ; On Exit:
 16152                                  ; ZERO flag	- set if not a net device
 16153                                  ;		- reset if net device
 16154                                  ; ES:DI -> the device
 16155                                  ;
 16156                                  ;
 16157                                  ; BUGBUG: This function assumes the following stack setup on entry
 16158                                  ;
 16159                                  ;	  SP+2 -> Error return address
 16160                                  ;	  SP   -> Normal return address
 16161                                  ;
 16162                                  ;-------------------------------------------------------------------------
 16163                                  
 16164                                  	; 30/01/2024 - Retro DOS v5.0
 16165                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16166                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16167                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16168                                  
 16169                                  Check_If_Net:
 16170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16171 0000246B E8D0FF                  	CALL	Get_Driver_BL
 16172 0000246E 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16173                                  
 16174                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16175                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16176                                  %if 0
 16177                                  	;;;
 16178                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16179                                  	PUSH	ES
 16180                                  	PUSH	DI
 16181                                  	LES	DI,[THISCDS]
 16182                                  	;test	word [es:di+43h],8000h
 16183                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16184                                  	;test	byte [es:di+44h],80h
 16185                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16186                                  	POP	DI
 16187                                  	POP	ES
 16188                                  	;;;
 16189                                  %endif
 16190 00002470 C3                      	retn
 16191                                  
 16192                                  ioctl_drv_err_pop:
 16193 00002471 58                      	pop	ax			; pop off return address
 16194 00002472 E94FFF                  	jmp	ioctl_drv_err
 16195                                  
 16196                                  ioctl_bad_funj3:
 16197 00002475 E9C4FE                  	jmp	ioctl_bad_fun
 16198                                  
 16199                                  ioctl_string_errj:
 16200 00002478 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16201                                  
 16202                                  ;--------------------------------------------------------------------------
 16203                                  ;
 16204                                  ; IOCTL: AL = E, F
 16205                                  ;
 16206                                  ; ENTRY: DS = DOSDATA
 16207                                  ;
 16208                                  ;
 16209                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16210                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16211                                  ;         return address off the stack if the drive is invalid.
 16212                                  ;
 16213                                  ;--------------------------------------------------------------------------
 16214                                  
 16215                                  ioctl_drive_owner:
 16216                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16217 0000247A E8EEFF                  	Call	Check_If_Net
 16218 0000247D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16219                                  					;   certainly don't know how to do this
 16220                                  					;   call.
 16221                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16222                                  	; 09/09/2018
 16223                                  	;test	byte [es:di+4],40h
 16224 0000247F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16225 00002484 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16226                                  	;mov	byte [IOCALL_REQFUNC],23
 16227 00002486 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16228 0000248B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16229 0000248D 7405                    	jz	short GetOwner
 16230                                  SetOwner:
 16231 0000248F C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16232                                  GetOwner:
 16233 00002494 B00D                    	MOV	AL,OWNHL ; 13
 16234 00002496 88DC                    	MOV	AH,BL			; Unit number
 16235 00002498 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16236 0000249B 31C0                    	XOR	AX,AX
 16237 0000249D A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16238 000024A0 06                      	PUSH	ES
 16239 000024A1 1F                      	POP	DS
 16240 000024A2 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16241 000024A4 16                      	PUSH	SS
 16242 000024A5 07                      	POP	ES
 16243 000024A6 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16244 000024A9 1E                      	push	ds
 16245 000024AA 56                      	push	si
 16246 000024AB E8DE20                  	call	DEVIOCALL2
 16247 000024AE 5E                      	pop	si
 16248 000024AF 1F                      	pop	ds
 16249                                  ;hkn; SS override
 16250                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16251                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16252 000024B0 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16253 000024B6 75C0                    	jnz	short ioctl_string_errj
 16254 000024B8 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16255                                  					; owner returned is 1-based.
 16256 000024BC E978E1                  	jmp	SYS_RET_OK
 16257                                  
 16258                                  ;============================================================================
 16259                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16260                                  ;============================================================================
 16261                                  ; 07/08/2018 - Retro DOS v3.0
 16262                                  ; 17/05/2019 - Retro DOS v4.0
 16263                                  
 16264                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16265                                  ;	NAME	DOS_DELETE
 16266                                  
 16267                                  ;
 16268                                  ;	Microsoft Confidential
 16269                                  ;	Copyright (C) Microsoft Corporation 1991
 16270                                  ;	All Rights Reserved.
 16271                                  ;
 16272                                  
 16273                                  ;**	DELETE.ASM - Low level routine for deleting files
 16274                                  ;----------------------------------------------------------------------------
 16275                                  ;		DOS_DELETE
 16276                                  ;		REN_DEL_Check
 16277                                  ;		FastOpen_Delete	       ; DOS 3.3
 16278                                  ;		FastOpen_Update	       ; DOS 3.3
 16279                                  
 16280                                  ;   Revision history:
 16281                                  ;
 16282                                  ;   A000  version 4.00	Jan. 1988
 16283                                  ;   A001  Fastopen Rename fix	April 1989
 16284                                  
 16285                                  ;Installed = TRUE
 16286                                  
 16287                                  ;	i_need	NoSetDir,BYTE
 16288                                  ;	i_need	Creating,BYTE
 16289                                  ;	i_need	DELALL,BYTE
 16290                                  ;	i_need	THISDPB,DWORD
 16291                                  ;	i_need	THISSFT,DWORD
 16292                                  ;	i_need	THISCDS,DWORD
 16293                                  ;	i_need	CURBUF,DWORD
 16294                                  ;	i_need	ATTRIB,BYTE
 16295                                  ;	i_need	SATTRIB,BYTE
 16296                                  ;	i_need	WFP_START,WORD
 16297                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16298                                  ;	i_need	NAME1,BYTE			 ;BN001
 16299                                  ;	i_need	FoundDel,BYTE
 16300                                  ;	i_need	AUXSTACK,BYTE
 16301                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16302                                  ;	i_need	JShare,DWORD
 16303                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16304                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16305                                  ;
 16306                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16307                                  ;
 16308                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16309                                  ;	i_need	DMAADD,DWORD
 16310                                  ;	i_need	RENAMEDMA,BYTE
 16311                                  
 16312                                  ;----------------------------------------------------------------------------
 16313                                  ;
 16314                                  ; Procedure Name : DOS_DELETE
 16315                                  ;
 16316                                  ; Inputs:
 16317                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16318                                  ;		terminated)
 16319                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16320                                  ;		( = -1 if current dir not involved, else
 16321                                  ;		 Points to first char after last "/" of current dir part)
 16322                                  ;	[THISCDS] Points to CDS being used
 16323                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16324                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16325                                  ; Function:
 16326                                  ;	Delete the specified file(s)
 16327                                  ; Outputs:
 16328                                  ;	CARRY CLEAR
 16329                                  ;		OK
 16330                                  ;	CARRY SET
 16331                                  ;	    AX is error code
 16332                                  ;		error_file_not_found
 16333                                  ;			Last element of path not found
 16334                                  ;		error_path_not_found
 16335                                  ;			Bad path (not in curr dir part if present)
 16336                                  ;		error_bad_curr_dir
 16337                                  ;			Bad path in current directory part of path
 16338                                  ;		error_access_denied
 16339                                  ;			Attempt to delete device or directory
 16340                                  ;		***error_sharing_violation***
 16341                                  ;			Deny both access required, generates an INT 24.
 16342                                  ;			This error is NOT returned. The INT 24H is generated,
 16343                                  ;			  and the file is ignored (not deleted). Delete will
 16344                                  ;			  simply continue on looking for more files.
 16345                                  ;			  Carry will NOT be set in this case.
 16346                                  ; DS preserved, others destroyed
 16347                                  ;
 16348                                  ;----------------------------------------------------------------------------
 16349                                  
 16350                                  FILEFOUND   equ 01h
 16351                                  FILEDELETED equ 10h
 16352                                  
 16353                                  
 16354                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16355                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16356                                  
 16357                                  	; 30/01/2024
 16358                                  
 16359                                  DOS_DELETE:
 16360                                  
 16361                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16362                                  ;hkn; appropriately at this point.
 16363                                  
 16364 000024BF E86FED                  	call	TestNet
 16365 000024C2 7306                    	JNC	short LOCAL_DELETE
 16366                                  
 16367                                  ;IF NOT Installed
 16368                                  ;	transfer NET_DELETE
 16369                                  ;ELSE
 16370                                  	;MOV	AX,(MultNET SHL 8) | 19
 16371                                  	;INT	2FH
 16372                                  	;return
 16373                                  
 16374 000024C4 B81311                  	mov	ax,1113h
 16375 000024C7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16376                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16377                                  			;		fully-qualified filename in DOS CS
 16378                                  			; SDA CDS pointer -> current directory structure for drive with file
 16379                                  			; Return: CF set on error
 16380 000024C9 C3                      	retn
 16381                                  ;ENDIF
 16382                                  
 16383                                  LOCAL_DELETE:
 16384 000024CA C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16385 000024CF E821EE                  	call	ECritDisk
 16386                                  	;mov	word [CREATING],0E500h
 16387 000024D2 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16388 000024D8 8B36[B205]              	MOV	SI,[WFP_START]
 16389                                  SKPNUL:
 16390 000024DC AC                      	LODSB
 16391 000024DD 08C0                    	OR	AL,AL
 16392 000024DF 75FB                    	JNZ	short SKPNUL		; go to end
 16393 000024E1 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16394 000024E4 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16395 000024E8 7506                    	JNZ	short TEST_QUEST
 16396 000024EA 807C022A                	CMP	BYTE [SI+2],"*"
 16397 000024EE 741F                    	JZ	short CHECK_ATTS
 16398                                  TEST_QUEST:
 16399 000024F0 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16400 000024F3 87FE                    	XCHG	DI,SI
 16401                                  
 16402 000024F5 16                      	push	ss
 16403                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16404 000024F6 07                      	pop	es ; 17/05/2019
 16405                                  
 16406 000024F7 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16407 000024FA B90400                  	MOV	CX,4		; four sets of "??"
 16408 000024FD F3AF                    	REPE	SCASW
 16409 000024FF 751C                    	JNZ	short NOT_ALL
 16410 00002501 87FE                    	XCHG	DI,SI
 16411 00002503 AD                      	LODSW
 16412 00002504 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16413 00002507 7514                    	JNZ	short NOT_ALL
 16414 00002509 AD                      	LODSW
 16415 0000250A 3D3F3F                  	CMP	AX,"??"
 16416 0000250D 750E                    	JNZ	short NOT_ALL
 16417                                  CHECK_ATTS:
 16418 0000250F A0[6D05]                	MOV	AL,[SATTRIB]
 16419                                  	;and	al,1Fh
 16420 00002512 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16421                                  					; Look only at hidden bits
 16422                                  	;cmp	al,1Fh
 16423 00002514 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16424                                  					; All must be set
 16425 00002516 7505                    	JNZ	short NOT_ALL
 16426                                  
 16427                                  ; NOTE WARNING DANGER-----
 16428                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16429                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16430                                  
 16431 00002518 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16432                                  NOT_ALL:
 16433 0000251D C606[4C03]01            	MOV	byte [NoSetDir],1
 16434 00002522 E81C19                  	call	GetPathNoSet
 16435 00002525 7312                    	JNC	short Del_found
 16436 00002527 750B                    	JNZ	short _bad_path
 16437 00002529 08C9                    	OR	CL,CL
 16438 0000252B 7407                    	JZ	short _bad_path
 16439                                  No_file:
 16440 0000252D B80200                  	MOV	AX,error_file_not_found
 16441                                  ErrorReturn:
 16442 00002530 F9                      	STC
 16443                                  	;call	LCritDisk
 16444                                  	;retn
 16445                                  	; 18/12/2022
 16446 00002531 E9DAED                  	jmp	LCritDisk
 16447                                  
 16448                                  _bad_path:
 16449 00002534 B80300                  	MOV	AX,error_path_not_found
 16450 00002537 EBF7                    	JMP	short ErrorReturn
 16451                                  
 16452                                  Del_found:
 16453 00002539 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16454 0000253B 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16455 00002540 7405                    	JZ	short NOT_DIR
 16456                                  Del_access_err:
 16457 00002542 B80500                  	MOV	AX,error_access_denied
 16458 00002545 EBE9                    	JMP	short ErrorReturn
 16459                                  
 16460                                  NOT_DIR:
 16461 00002547 08E4                    	OR	AH,AH			; Check if device name
 16462 00002549 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16463                                  
 16464                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16465                                  
 16466                                  DELFILE:
 16467 0000254B 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16468                                  
 16469                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16470                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16471                                  
 16472 00002550 1E                      	PUSH	DS
 16473 00002551 8A26[7F05]              	MOV	AH,[DELALL]
 16474 00002555 C53E[E205]              	LDS	DI,[CURBUF]
 16475                                  	
 16476                                  ;hkn; SS override
 16477 00002559 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16478 0000255F 7509                    	JNZ	short DoDelete		; yes
 16479                                  
 16480 00002561 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16481 00002565 7403                    	JZ	short DoDelete		; not read only
 16482                                  
 16483                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16484                                  Skip_it:
 16485 00002567 1F                      	POP	DS
 16486 00002568 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16487                                  
 16488                                  DoDelete:
 16489 0000256A E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16490                                  	;JNC	short DEL_SHARE_OK
 16491                                  	;POP	DS
 16492                                  	;JMP	SHORT DELNXT		; Skip it
 16493                                  	; 30/01/2024
 16494 0000256D 72F8                    	jc	short Skip_it
 16495                                  
 16496                                  DEL_SHARE_OK:
 16497                                  	; 17/05/2019 - Retro DOS v4.0
 16498                                  	; MSDOS 6.0
 16499                                  	;test	byte [di+5],40h
 16500 0000256F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16501                                  					;LB. if already dirty		  ;AN000;
 16502 00002573 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16503 00002575 E80635                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16504                                  	;or	byte [di+5],40h
 16505 00002578 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16506                                  yesdirty:
 16507 0000257C 8827                    	mov	[bx],ah 
 16508                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16509 0000257E 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16510 00002580 1F                      	POP	DS
 16511 00002581 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16512                                  
 16513 00002586 83FB02                  	CMP	BX,2
 16514 00002589 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16515                                  	;cmp	bx,[es:bp+0Dh]
 16516 0000258B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16517 0000258F 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16518                                  
 16519 00002591 E85828                  	call	RELEASE 		; Free file data
 16520 00002594 7252                    	JC	short No_fileJ
 16521                                  
 16522                                  ; DOS 3.3  FastOpen
 16523                                  
 16524 00002596 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16525                                  
 16526                                  ; DOS 3.3  FastOpen
 16527                                  
 16528                                  DELNXT:
 16529 00002599 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16530 0000259D E80C18                  	call	GETENTRY		; Registers need to be reset
 16531 000025A0 7246                    	JC	short No_fileJ
 16532 000025A2 E84517                  	call	NEXTENT
 16533 000025A5 73A4                    	JNC	short DELFILE
 16534 000025A7 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16535                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16536                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16537                                  	;;mov	al,[es:bp+0]
 16538                                  	; 15/12/2022
 16539 000025AB 268A4600                	MOV	AL,[ES:BP]
 16540 000025AF E8C733                  	call	FLUSHBUF
 16541 000025B2 7234                    	JC	short No_fileJ
 16542                                  ;
 16543                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16544                                  ;
 16545                                  ;   not found not deleted		file not found
 16546                                  ;   not found	  deleted		*** impossible ***
 16547                                  ;	found not deleted		access denied (read-only)
 16548                                  ;	found	  deleted		no error
 16549                                  ;
 16550 000025B4 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16551 000025B9 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16552                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16553                                  ; and to force the DOS to issue a media check.
 16554 000025BB F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16555 000025C0 741C                    	jz	short No_Set_Flag
 16556 000025C2 50                      	PUSH	AX
 16557 000025C3 06                      	PUSH	ES
 16558 000025C4 57                      	PUSH	DI
 16559 000025C5 C43E[A205]              	LES	DI,[THISCDS]
 16560 000025C9 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16561 000025CC 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16562 000025CF 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16563                                  	
 16564                                  	; MSDOS 6.0
 16565 000025D3 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16566 000025D5 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16567                                  	 
 16568 000025D8 E82530                  	call	FATREAD_CDS		; force media check
 16569 000025DB 5F                      	POP	DI
 16570 000025DC 07                      	POP	ES
 16571 000025DD 58                      	POP	AX
 16572                                  No_Set_Flag:
 16573                                  	;call	LCritDisk		; carry is clear
 16574                                  	;retn
 16575                                  	; 18/12/2022
 16576 000025DE E92DED                  	jmp	LCritDisk
 16577                                  DelError:
 16578 000025E1 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16579 000025E6 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16580                                  No_fileJ:
 16581 000025E8 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16582                                  Del_access_errJ:
 16583 000025EB E954FF                  	JMP	Del_access_err ; 10/08/2018
 16584                                  
 16585                                  ; 08/08/2018 - Retro DOS v3.0
 16586                                  
 16587                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16588                                  ;---------------------------------------------------------------------------
 16589                                  ; Procedure Name : REN_DEL_Check
 16590                                  ;
 16591                                  ; Inputs:
 16592                                  ;	[THISDPB] set
 16593                                  ;	[CURBUF+2]:BX points to entry
 16594                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16595                                  ;	[WFP_Start] points to name
 16596                                  ; Function:
 16597                                  ;	Check for Exclusive access on given file.
 16598                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16599                                  ; Outputs:
 16600                                  ;	ES:BP = [THISDPB]
 16601                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16602                                  ;		last element will be loaded from the directory entry.  This is
 16603                                  ;		so the name given to the sharer doesn't have any meta chars in
 16604                                  ;		it.
 16605                                  ;	Carry set if sharing violation, INT 24H generated
 16606                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16607                                  ;		This is because input AX is preserved.
 16608                                  ;		Caller must set the error if needed.
 16609                                  ;	Carry clear
 16610                                  ;		OK
 16611                                  ; AX,DS,BX,SI,DI preserved
 16612                                  ;---------------------------------------------------------------------------
 16613                                  
 16614                                  REN_DEL_Check:
 16615                                  
 16616 000025EE 1E                      	PUSH	DS
 16617 000025EF 57                      	PUSH	DI
 16618 000025F0 50                      	PUSH	AX
 16619 000025F1 53                      	PUSH	BX
 16620 000025F2 56                      	PUSH	SI		; Save CURBUF pointers
 16621                                  	
 16622 000025F3 16                      	push	ss
 16623 000025F4 07                      	pop	es
 16624                                  
 16625                                  ;hkn; context ES will assume ES to DOSDATA
 16626                                  ;hkn; ASSUME	ES:DOSGROUP
 16627                                  
 16628                                  ;hkn; SS override
 16629 000025F5 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16630 000025FA 89DE                    	MOV	SI,BX
 16631                                  
 16632                                  ;hkn; SS override
 16633 000025FC 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16634 00002601 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16635                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16636                                  	; 31/01/2024
 16637 00002603 43                      	inc	bx
 16638 00002604 43                      	inc	bx
 16639 00002605 E8C9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16640 00002608 49                      	DEC	CX		; Don't include nul in count
 16641 00002609 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16642 0000260B E86F46                  	call	SkipBack	; Back up one element
 16643 0000260E 47                      	INC	DI		; Point to start of last element
 16644                                  
 16645                                  	; 17/05/2019 - Retro DOS v4.0
 16646                                  ;hkn; SS override
 16647                                  	; MSDOS 6.0
 16648 0000260F 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16649                                  	;
 16650 00002614 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16651 00002617 5E                      	POP	SI		; Get back entry pointers
 16652 00002618 5B                      	POP	BX
 16653 00002619 53                      	PUSH	BX
 16654 0000261A 56                      	PUSH	SI		; Back on stack
 16655                                  	
 16656 0000261B 16                      	push	ss
 16657 0000261C 1F                      	pop	ds
 16658                                  
 16659                                  ;hkn; context DS will assume ES to DOSDATA
 16660                                  ;hkn; ASSUME	DS:DOSGROUP
 16661                                  
 16662                                  ; Close the file if possible by us.
 16663                                  ;
 16664                                  ;if installed
 16665 0000261D FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16666                                  ;else
 16667                                  ;	Call	ShCloseFile
 16668                                  ;endif
 16669 00002621 8C1E[A005]              	MOV	[THISSFT+2],DS
 16670                                  
 16671                                  ;hkn; AUXSTACK is in DOSDATA
 16672 00002625 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16673                                  				; Scratch space
 16674 0000262B 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16675 0000262D E84324                  	call	DOOPEN		; Fill in SFT for share check
 16676 00002630 C43E[9E05]              	LES	DI,[THISSFT]
 16677                                  	;mov	word [es:di+2],10h
 16678 00002634 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16679                                  				; requires exclusive access
 16680                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16681 0000263A 26C7050100              	mov	word [ES:DI],1
 16682 0000263F E85F4C                  	call	ShareEnter
 16683 00002642 720D                    	jc	short CheckDone
 16684 00002644 C43E[9E05]              	LES	DI,[THISSFT]
 16685                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16686 00002648 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16687                                  	
 16688 0000264D E84C4C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16689 00002650 F8                      	CLC
 16690                                  CheckDone:
 16691 00002651 C42E[8A05]              	LES	BP,[THISDPB]
 16692 00002655 5E                      	POP	SI
 16693 00002656 5B                      	POP	BX
 16694 00002657 58                      	POP	AX
 16695 00002658 5F                      	POP	DI
 16696 00002659 1F                      	POP	DS
 16697 0000265A C3                      	retn
 16698                                  
 16699                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16700                                  ;---------------------------------------------------------------------------
 16701                                  ; Procedure Name : FastOpen_Delete
 16702                                  ; Inputs:
 16703                                  ;	None
 16704                                  ; Function:
 16705                                  ;	Call FastOpen to delete the dir info.
 16706                                  ; Outputs:
 16707                                  ;	None
 16708                                  ;---------------------------------------------------------------------------
 16709                                  
 16710                                  	; 31/01/2024
 16711                                  
 16712                                  FastOpen_Delete:
 16713 0000265B 9C                      	PUSHF			; save flag
 16714 0000265C 56                      	PUSH	SI		; save registers
 16715 0000265D 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16716 0000265E 53                      	PUSH	BX
 16717 0000265F 50                      	PUSH	AX
 16718                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16719                                  ;hkn; SS override
 16720                                  	; 17/05/2019 - Retro DOS v4.0
 16721                                  	; MSDOS 6.0
 16722 00002660 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16723                                  	
 16724 00002665 B003                    	MOV	AL,FONC_delete	; al = 3
 16725                                  
 16726                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16727                                  %if 0 
 16728                                  fastinvoke:
 16729                                  ;hkn; FastTable is in DOSDATA
 16730                                  	MOV	BX,FastTable+2
 16731                                  	CALL	far [BX]	; call fastopen
 16732                                  	POP	AX		; restore registers
 16733                                  	POP	BX
 16734                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16735                                  	POP	SI
 16736                                  	POPF			; restore flag
 16737                                  	retn
 16738                                  %else
 16739 00002667 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16740                                  %endif
 16741                                  
 16742                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16743                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16744                                  
 16745                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16746                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16747                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16748                                  
 16749                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16750                                  ;---------------------------------------------------------------------------
 16751                                  ; PROCEDURE Name : FastOpen_Rename
 16752                                  ;
 16753                                  ; Inputs:
 16754                                  ;	 REN_WFP   = Path Name
 16755                                  ;	 NAME1	   = New Name
 16756                                  ; Function:
 16757                                  ;	Call FastOpen to rename the dir entry in the cache
 16758                                  ; Outputs:
 16759                                  ;	None
 16760                                  ;---------------------------------------------------------------------------
 16761                                  
 16762                                  FastOpen_Rename:
 16763                                  	; 17/05/2019 - Retro DOS v4.0
 16764                                  	; 08/08/2018 - Retro DOS v3.0
 16765                                  	; MSDOS 6.0
 16766 00002669 9C                      	PUSHF			;AN001 save flag
 16767 0000266A 56                      	PUSH	SI		;AN001 save registers
 16768 0000266B 57                      	PUSH	DI		;AN001
 16769 0000266C 53                      	PUSH	BX		;AN001
 16770 0000266D 50                      	PUSH	AX		;AN001
 16771                                  	;
 16772                                  ;hkn; SS override
 16773 0000266E 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16774                                  
 16775                                  ;hkn; NAME1 is in DOSDATA
 16776 00002673 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16777                                  	;mov	al,6
 16778 00002676 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16779                                  
 16780                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16781                                  	
 16782                                  ;hkn; FastTable is in DOSDATA
 16783 00002678 BB[320D]                	MOV	BX,FastTable+2
 16784 0000267B FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16785                                  	
 16786 0000267D 58                      	POP	AX		; restore registers  ;AN001
 16787 0000267E 5B                      	POP	BX				     ;AN001
 16788 0000267F 5F                      	POP	DI				     ;AN001
 16789 00002680 5E                      	POP	SI				     ;AN001
 16790 00002681 9D                      	POPF			; restore flag	     ;AN001
 16791 00002682 C3                      	retn					     ;AN001
 16792                                  
 16793                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16794                                  ;---------------------------------------------------------------------------
 16795                                  ; Procedure Name : FastOpen_Update
 16796                                  ;
 16797                                  ; Inputs:
 16798                                  ;	DL     drive number (A=0,B=1,,,)
 16799                                  ;	CX     first cluster #
 16800                                  ;	AH     0 updates dir entry
 16801                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16802                                  ;	ES:DI  directory entry
 16803                                  ; Function:
 16804                                  ;	Call FastOpen to update the dir info.
 16805                                  ; Outputs:
 16806                                  ;	None
 16807                                  ;---------------------------------------------------------------------------
 16808                                  
 16809                                  FastOpen_Update:
 16810 00002683 9C                      	PUSHF			; save flag
 16811 00002684 56                      	PUSH	SI
 16812 00002685 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16813 00002686 53                      	PUSH	BX		; save regs
 16814 00002687 50                      	PUSH	AX
 16815 00002688 B004                    	MOV	AL,FONC_update	; al = 4
 16816 0000268A EBEC                    	JMP	short fastinvoke
 16817                                  
 16818                                  	; 17/05/2019
 16819                                  
 16820                                  	; MSDOS 6.0
 16821                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16822                                  ;---------------------------------------------------------------------------
 16823                                  Fast_Dispatch:
 16824                                  ;hkn; FastTable is in DOSDATA
 16825 0000268C BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16826                                  ;hkn; use SS override
 16827 0000268F 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16828 00002692 C3                      	retn
 16829                                  
 16830                                  ;============================================================================
 16831                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16832                                  ;============================================================================
 16833                                  ; 08/08/2018 - Retro DOS v3.0
 16834                                  ; 17/05/2019 - Retro DOS v4.0
 16835                                  
 16836                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16837                                  ;	NAME	DOS_RENAME
 16838                                  
 16839                                  ;**	Low level routine for renaming files
 16840                                  ;----------------------------------------------------------------------------
 16841                                  ;	DOS_RENAME
 16842                                  ;
 16843                                  ;	Modification history:
 16844                                  ;
 16845                                  ;	    Created: ARR 30 March 1983
 16846                                  
 16847                                  ;----------------------------------------------------------------------------
 16848                                  ;
 16849                                  ; Procedure Name : DOS_RENAME
 16850                                  ;
 16851                                  ; Inputs:
 16852                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16853                                  ;		chars, NUL terminated)
 16854                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16855                                  ;		( = -1 if current dir not involved, else
 16856                                  ;		 Points to first char after last "/" of current dir part)
 16857                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16858                                  ;		chars, NUL terminated)
 16859                                  ;	[THISCDS] Points to CDS being used
 16860                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16861                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16862                                  ; Function:
 16863                                  ;	Rename the specified file(s)
 16864                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16865                                  ; Outputs:
 16866                                  ;	CARRY CLEAR
 16867                                  ;	    OK
 16868                                  ;	CARRY SET
 16869                                  ;	    AX is error code
 16870                                  ;		error_file_not_found
 16871                                  ;			No match for source, or dest path invalid
 16872                                  ;		error_not_same_device
 16873                                  ;			Source and dest are on different devices
 16874                                  ;		error_access_denied
 16875                                  ;			Directory specified (not simple rename),
 16876                                  ;			Device name given, Destination exists.
 16877                                  ;			NOTE: In third case some renames may have
 16878                                  ;			 been done if metas.
 16879                                  ;		error_path_not_found
 16880                                  ;			Bad path (not in curr dir part if present)
 16881                                  ;			SOURCE ONLY
 16882                                  ;		error_bad_curr_dir
 16883                                  ;			Bad path in current directory part of path
 16884                                  ;			SOURCE ONLY
 16885                                  ;		error_sharing_violation
 16886                                  ;			Deny both access required, generates an INT 24.
 16887                                  ; DS preserved, others destroyed
 16888                                  ;
 16889                                  ;----------------------------------------------------------------------------
 16890                                  
 16891                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16892                                  
 16893                                  	; 31/01/2024
 16894                                  
 16895                                  DOS_RENAME:
 16896                                  
 16897                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16898                                  ;hkn; at this point to DOSDATA.
 16899                                  
 16900 00002693 E89BEB                  	call	TestNet
 16901 00002696 7306                    	JNC	short LOCAL_RENAME
 16902                                  
 16903                                  ;IF NOT Installed
 16904                                  ;	transfer NET_RENAME
 16905                                  ;ELSE
 16906                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16907                                  	;INT	2FH
 16908                                  	;return
 16909                                  
 16910 00002698 B81111                  	mov     ax, 1111h
 16911 0000269B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16912                                  			; SS = DS = DOS CS, 
 16913                                  			; SDA first filename pointer = offset of fully-qualified old name
 16914                                  			; SDA CDS pointer -> current directory
 16915                                  			; Return: CF set on error
 16916 0000269D C3                      	retn
 16917                                  ;ENDIF
 16918                                  
 16919                                  LOCAL_RENAME:
 16920 0000269E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16921 000026A3 8B36[B205]              	MOV	SI,[WFP_START]
 16922 000026A7 8B3E[B405]              	MOV	DI,[REN_WFP]
 16923 000026AB 8A04                    	MOV	AL,[SI]
 16924 000026AD 8A25                    	MOV	AH,[DI]
 16925 000026AF 0D2020                  	OR	AX,2020H		; Lower case
 16926 000026B2 38E0                    	CMP	AL,AH
 16927 000026B4 7405                    	JZ	short SAMEDRV
 16928 000026B6 B81100                  	MOV	AX,error_not_same_device ; 11h
 16929 000026B9 F9                      	STC
 16930 000026BA C3                      	retn
 16931                                  
 16932                                  SAMEDRV:
 16933 000026BB FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16934 000026BF FF36[2C03]              	PUSH	WORD [DMAADD]
 16935 000026C3 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16936                                  
 16937                                  ;hkn; RENAMEDMA is in DOSDATA
 16938 000026C7 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16939 000026CD C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16940 000026D2 E81EEC                  	call	ECritDisk
 16941 000026D5 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16942                                  					;    points to entry
 16943 000026D8 7314                    	JNC	short Check_Dev
 16944 000026DA 83F812                  	CMP	AX,error_no_more_files ; 12h
 16945 000026DD 7503                    	JNZ	short GOTERR
 16946 000026DF B80200                  	MOV	AX,error_file_not_found ; 2
 16947                                  GOTERR:
 16948 000026E2 F9                      	STC
 16949                                  RENAME_POP:
 16950 000026E3 8F06[2C03]              	POP	WORD [DMAADD]
 16951 000026E7 8F06[2E03]              	POP	WORD [DMAADD+2]
 16952                                  	;call	LCritDisk
 16953                                  	;retn
 16954                                  	; 16/12/2022
 16955 000026EB E920EC                  	jmp	LCritDisk
 16956                                  
 16957                                  Check_Dev:
 16958                                  	; 17/05/2019 - Retro DOS v4.0
 16959                                  	;mov	ax,5
 16960 000026EE B80500                  	MOV	AX,error_access_denied	; Assume error
 16961                                  	
 16962                                  	; MSDOS 6.0
 16963 000026F1 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16964 000026F2 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16965                                  	;add	si,21
 16966 000026F6 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16967                                  	;test	byte [si+11],10h
 16968 000026F9 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16969 000026FD 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16970 000026FF 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16971 00002703 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16972                                  notdir:
 16973 00002706 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16974 00002707 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16975                                  
 16976                                  	; MSDOS 3.3 & MSDOS 6.0
 16977 00002709 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16978 0000270E 75D2                    	JNZ	short GOTERR
 16979                                  
 16980                                  ; At this point a source has been found. There is search continuation info (a
 16981                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16982                                  ; directory entry found.
 16983                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16984                                  ; throughout the RENAME since it is known at this point that the source and
 16985                                  ; destination are both on the same device.
 16986                                  ; [SATTRIB] is also set.
 16987                                  
 16988 00002710 89DE                    	MOV	SI,BX
 16989                                  	;add	si,26
 16990 00002712 83C61A                  	ADD	SI,dir_entry.dir_first
 16991 00002715 E8D6FE                  	call	REN_DEL_Check
 16992 00002718 7305                    	JNC	short REN_OK1
 16993 0000271A B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16994 0000271D EBC4                    	JMP	short RENAME_POP
 16995                                  
 16996                                  ;------------------------------------------------------------------------------
 16997                                  ; Check if the source is a file or directory. If file, delete the entry
 16998                                  ; from the Fastopen cache. If directory, rename it later
 16999                                  ;------------------------------------------------------------------------------
 17000                                  
 17001                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17002                                  	; MSDOS 6.0
 17003                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17004                                  	;PUSH	SI
 17005 0000271F C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17006                                  	;add	si,21
 17007 00002723 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17008                                  	;test	byte [si+11],10h
 17009 00002726 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17010                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17011 0000272A 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17012                                  	;POP	SI			;BN00X
 17013                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17014                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17015                                  	;POP	SI
 17016                                  
 17017                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17018 0000272C E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17019                                  SWAP_SOURCE:
 17020                                  	; MSDOS 3.3
 17021                                  	;MOV	SI,[REN_WFP]
 17022                                  	;MOV	[WFP_START],SI
 17023                                  	; MSDOS 6.0
 17024 0000272F A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17025 00002732 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17026 00002736 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17027 0000273A A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17028                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17029 0000273D C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17030                                  	;mov	word [CREATING],0E5FFh
 17031 00002743 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17032                                  					; A rename is like a CREATE_NEW as far
 17033                                  					; as the destination is concerned.
 17034 00002749 E8F516                  	call	GetPathNoSet
 17035                                  
 17036                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17037                                  ;   since no files match the destination name. If it fails for any other
 17038                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17039                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17040                                  ;   if the rename should fail because we haven't built an explicit name by
 17041                                  ;   substituting for the meta chars in it. In this case the destination file
 17042                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17043                                  ;   in the directory entry part.
 17044                                  	
 17045 0000274C 7223                    	JC	short NODEST
 17046                                  	
 17047                                  	; MSDOS 6.0
 17048                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17049                                  	; !! MSDOS 3.3 !!
 17050                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17051                                  
 17052 0000274E 08E4                    	OR	AH,AH			; Device?
 17053 00002750 792C                    	JNS	short SAVEDEST		; No, continue
 17054                                  BAD_ACC:
 17055 00002752 B80500                  	MOV	AX,error_access_denied
 17056 00002755 F9                      	STC
 17057                                  RENAME_CLEAN:
 17058 00002756 9C                      	PUSHF				; Save carry state
 17059 00002757 50                      	PUSH	AX			; and error code (if carry set)
 17060 00002758 A0[7605]                	MOV	AL,[THISDRV]
 17061 0000275B E81B32                  	call	FLUSHBUF
 17062 0000275E 58                      	POP	AX
 17063 0000275F 803E[4A03]00            	CMP	byte [FAILERR],0
 17064 00002764 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17065 00002766 9D                      	POPF
 17066 00002767 E979FF                  	JMP	RENAME_POP
 17067                                  
 17068                                  BAD_ERR:
 17069 0000276A 58                      	POP	AX			; Saved flags
 17070                                  	; 16/12/202
 17071                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17072                                  BAD_PATH: ; *
 17073 0000276B B80300                  	MOV	AX,error_path_not_found
 17074 0000276E E971FF                  	JMP	GOTERR
 17075                                  
 17076                                  NODEST:
 17077 00002771 75F8                    	JNZ	short BAD_PATH
 17078 00002773 803E[4A03]00            	CMP	byte [FAILERR],0
 17079 00002778 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17080                                  					; because user FAILed on I 24
 17081                                  	; 14/11/2022
 17082 0000277A 08C9                    	OR	CL,CL
 17083                                  	;JNZ	short SAVEDEST
 17084                                  	; 17/05/2019
 17085 0000277C 74ED                    	jz	short BAD_PATH ; *
 17086                                  ;BAD_PATH: ; *
 17087                                  ;	MOV	AX,error_path_not_found
 17088                                  ;	;STC
 17089                                  ;	;JMP	RENAME_POP
 17090                                  ;	; 17/05/2019
 17091                                  ;	jmp	GOTERR 
 17092                                  
 17093                                  ; 16/12/2022
 17094                                  %if 0
 17095                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17096                                  	or	cl,cl
 17097                                  	jnz	short SAVEDEST
 17098                                  	;jz	short BAD_PATH ; *
 17099                                  BAD_PATH: ; *
 17100                                  	;mov	ax,3
 17101                                  	mov	ax,error_path_not_found
 17102                                  	stc
 17103                                  	jmp	RENAME_POP
 17104                                  %endif
 17105                                  
 17106                                  SAVEDEST:
 17107 0000277E 16                      	push	ss
 17108 0000277F 07                      	pop	es
 17109                                  
 17110                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17111 00002780 BF[5705]                	MOV	DI,NAME2
 17112 00002783 BE[4B05]                	MOV	SI,NAME1
 17113                                  
 17114 00002786 B90B00                  	MOV	CX,11
 17115 00002789 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17116 0000278B A1[C205]                	MOV	AX,[DIRSTART]
 17117 0000278E A3[6405]                	MOV	[DESTSTART],AX
 17118                                  BUILDDEST:
 17119                                  	; 31/01/2024
 17120                                  	;push	ss
 17121                                  	;pop	es			; needed due to JMP BUILDDEST below
 17122                                  
 17123                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17124 00002791 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17125 00002794 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17126 00002797 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17127                                  
 17128 0000279A B90B00                  	MOV	CX,11
 17129                                  
 17130                                  	; 17/05/2019 - Retro DOS v4.0
 17131                                  	
 17132                                  	; MSDOS 6.0
 17133 0000279D E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17134                                  
 17135                                  	; MSDOS 3.3
 17136                                  
 17137                                  ; 08/08/2018 - Retro DOS v3.0
 17138                                  ; MSDOS 6.0 
 17139                                  ;---------------------------------------------------------------------------
 17140                                  ;Procedure: NEW_RENAME
 17141                                  ;
 17142                                  ;Input: DS:SI -> raw string with ?
 17143                                  ;	ES:DI -> destination string
 17144                                  ;	DS:BX -> source string
 17145                                  ;Function: replace ? chars of raw string with chars in source string and
 17146                                  ;	   put in destination string
 17147                                  ;Output: ES:DI-> new string
 17148                                  ;---------------------------------------------------------------------------
 17149                                  ;
 17150                                  ;NEW_RENAME:
 17151                                  ;NEWNAM:
 17152                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17153                                  ;	LODSB
 17154                                  ;	CMP	AL,"?"
 17155                                  ;	JNZ	short NOCHG
 17156                                  ;	MOV	AL,[BX] 		; Get replace char
 17157                                  ;NOCHG:
 17158                                  ;	STOSB
 17159                                  ;	INC	BX			; Next replace char
 17160                                  ;	LOOP	NEWNAM
 17161                                  ;	; MSDOS 6.0
 17162                                  ;	;retn
 17163                                  
 17164                                  	; MSDOS 3.3 & MSDOS 6.0
 17165                                  	;mov	byte [ATTRIB],16h
 17166 000027A0 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17167 000027A5 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17168 000027AA E84219                  	call	DEVNAME 		; Check if we built a device name
 17169 000027AD 73A3                    	JNC	short BAD_ACC
 17170 000027AF 8B1E[6405]              	MOV	BX,[DESTSTART]
 17171 000027B3 C42E[8A05]              	LES	BP,[THISDPB]
 17172 000027B7 E82416                  	call	SETDIRSRCH		; Reset search to start of dir
 17173 000027BA 7296                    	JC	short BAD_ACC 		; Screw up
 17174 000027BC E8E114                  	call	FINDENTRY		; See if new name already exists
 17175 000027BF 7391                    	JNC	short BAD_ACC 		; Error if found
 17176 000027C1 803E[4A03]00            	CMP	byte [FAILERR],0
 17177 000027C6 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17178 000027C8 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17179 000027CB 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17180 000027CF 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17181                                  
 17182                                  	;mov	al,[RENAMEDMA+32]
 17183 000027D1 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17184 000027D4 A810                    	TEST	AL,attr_directory ; 10h
 17185 000027D6 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17186                                  					; otherwise the . and .. entries get
 17187                                  					; wiped.
 17188 000027D8 A2[6B05]                	MOV	[ATTRIB],AL
 17189 000027DB 8C1E[A005]              	MOV	[THISSFT+2],DS
 17190                                  
 17191                                  ;hkn; AUXSTACK is in DOSDATA
 17192                                  	;mov	si,RENAMEDMA+145h
 17193 000027DF BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17194 000027E2 8936[9E05]              	MOV	[THISSFT],SI
 17195                                  	;mov	word [SI+2],2
 17196 000027E6 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17197 000027EB 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17198 000027ED E8EB20                  	call	RENAME_MAKE		; This is in mknode
 17199 000027F0 7303                    	JNC	short GOT_DEST
 17200                                  BAD_ACCJ:
 17201 000027F2 E95DFF                  	JMP	BAD_ACC
 17202                                  
 17203                                  GOT_DEST:
 17204 000027F5 53                      	push	bx
 17205 000027F6 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17206 000027FA E89F4A                  	call	ShareEnd		; we need to remove it.
 17207 000027FD 5B                      	pop	bx
 17208                                  
 17209                                  ; A zero length entry with the correct new name has now been made at
 17210                                  ;   [CURBUF+2]:BX.
 17211                                  
 17212 000027FE C43E[E205]              	LES	DI,[CURBUF]
 17213                                  
 17214                                  	; MSDOS 6.0
 17215                                  	;test	byte [es:di+5],40h
 17216 00002802 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17217                                  					;LB. if already dirty		  ;AN000;
 17218 00002807 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17219 00002809 E87232                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17220                                  	;or	byte [es:di+5],40h
 17221 0000280C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17222                                  yesdirty1:
 17223 00002811 89DF                    	MOV	DI,BX
 17224                                  	;add	di,11
 17225 00002813 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17226                                  
 17227                                  ;hkn; RENAMEDMA is in DOSDATA
 17228                                  	;mov	si,[RENAMEDMA+32]
 17229 00002816 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17230                                  	;mov	cx,21
 17231 00002819 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17232 0000281C F3A4                    	REP	MOVSB
 17233 0000281E E87A00                  	CALL	GET_SOURCE
 17234 00002821 7275                    	JC	short RENAME_OVER
 17235 00002823 89DF                    	MOV	DI,BX
 17236 00002825 8E06[E405]              	MOV	ES,[CURBUF+2]
 17237 00002829 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17238 0000282B AA                      	STOSB				; "free" the source
 17239 0000282C EB13                    	JMP	SHORT DIRTY_IT
 17240                                  
 17241                                  SIMPLE_RENAME:
 17242 0000282E E86A00                  	CALL	GET_SOURCE		; Get the source back
 17243 00002831 7265                    	JC	short RENAME_OVER
 17244 00002833 89DF                    	MOV	DI,BX
 17245 00002835 8E06[E405]              	MOV	ES,[CURBUF+2]
 17246                                  
 17247                                  ;hkn; NAME1 is in DOSDATA
 17248 00002839 BE[4B05]                	MOV	SI,NAME1		; New Name
 17249 0000283C B90B00                  	MOV	CX,11
 17250 0000283F F3A4                    	REP	MOVSB
 17251                                  DIRTY_IT:
 17252 00002841 8B3E[E205]              	MOV	DI,[CURBUF]
 17253                                  
 17254                                  	; MSDOS 6.0
 17255 00002845 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17256                                  					;LB. if already dirty		  ;AN000;
 17257 0000284A 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17258 0000284C E82F32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17259                                  	
 17260 0000284F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17261                                  
 17262                                  ;------------------------------------------------------------------------------
 17263                                  ; Check if the source is a directory of file. If directory rename it to the
 17264                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17265                                  ; previously deleted.
 17266                                  ;------------------------------------------------------------------------------
 17267                                  
 17268                                  yesdirty2:
 17269                                  	; MSDOS 6.0
 17270 00002854 56                      	PUSH	SI
 17271 00002855 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17272 00002859 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17273 0000285C F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17274 00002860 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17275 00002862 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17276                                  	; 31/01/2024
 17277                                  	;POP	SI
 17278                                  	;JMP	SHORT NOT_DIRTY1
 17279                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17280 00002865 5E                      	POP	SI
 17281                                  NOT_DIRTY1:				;;BN00X
 17282                                  NEXT_SOURCE:
 17283                                  ;hkn; RENAMEDMA is in DOSDATA
 17284 00002866 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17285                                  
 17286                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17287                                  ; to enter it before going to RENAME_Next.
 17288                                  
 17289 00002869 E887EA                  	call	ECritDisk
 17290 0000286C C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17291                                  				  ;  to FF when we made the prev new file).
 17292 00002871 E89405                  	call	RENAME_NEXT
 17293                                  
 17294                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17295                                  ; we were before.
 17296                                  
 17297 00002874 7222                    	JC	short RENAME_OVER
 17298                                  
 17299                                  	;lea	si,[bx+26]
 17300 00002876 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17301 00002879 E872FD                  	call	REN_DEL_Check
 17302 0000287C 7306                    	JNC	short REN_OK2
 17303 0000287E B82000                  	MOV	AX,error_sharing_violation ; 20h
 17304                                  jmp_to_rename_clean: ; 28/12/2022
 17305 00002881 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17306                                  
 17307                                  ;------------------------------------------------------------------------------
 17308                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17309                                  ; if directory, rename directory name in the Fastopen cache.
 17310                                  ;-----------------------------------------------------------------------------
 17311                                  
 17312                                  REN_OK2:
 17313                                  	; MSDOS 6.0
 17314                                  	;mov	al,[RERNAMEDMA+32]
 17315 00002884 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17316                                  	;test	al,10h
 17317 00002887 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17318 00002889 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17319                                  	
 17320                                  	; MSDOS 3.3 & MSDOS 6.0
 17321 0000288B E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17322                                  jmp_to_builddest: ; 28/12/2022
 17323                                  	; 31/01/2024
 17324 0000288E 16                      	push	ss
 17325 0000288F 07                      	pop	es
 17326 00002890 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17327                                  
 17328                                  	; MSDOS 6.0
 17329                                  Ren_Directory:
 17330 00002893 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17331                                  	;JMP	BUILDDEST
 17332                                  	; 28/12/2022
 17333 00002896 EBF6                    	jmp	short jmp_to_builddest
 17334                                  
 17335                                  RENAME_OVER:
 17336 00002898 F8                      	CLC
 17337                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17338                                  	; 28/12/2022
 17339 00002899 EBE6                    	jmp	short jmp_to_rename_clean
 17340                                  
 17341                                  ;----------------------------------------------------------------------------
 17342                                  ; Procedure: GET_SOURCE
 17343                                  ;
 17344                                  ; Inputs:
 17345                                  ;	RENAMEDMA has source info
 17346                                  ; Function:
 17347                                  ;	Re-find the source
 17348                                  ; Output:
 17349                                  ;	[CURBUF] set
 17350                                  ;	[CURBUF+2]:BX points to entry
 17351                                  ;	Carry set if error (currently user FAILed to I 24)
 17352                                  ; DS preserved, others destroyed
 17353                                  ;----------------------------------------------------------------------------
 17354                                  
 17355                                  GET_SOURCE:
 17356 0000289B 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17357 0000289F C42E[8A05]              	LES	BP,[THISDPB]
 17358 000028A3 E83815                  	call	SETDIRSRCH
 17359 000028A6 7214                    	JC	short gs_ret_label	; retc
 17360 000028A8 E82318                  	call	STARTSRCH
 17361 000028AB A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17362                                  	;call	GETENT
 17363                                  	; 18/12/2022
 17364 000028AE E9FE14                  	jmp	GETENT
 17365                                  ;gs_ret_label:
 17366                                  	;retn
 17367                                  
 17368                                  ; MSDOS 6.0 
 17369                                  ;---------------------------------------------------------------------------
 17370                                  ;Procedure: NEW_RENAME
 17371                                  ;
 17372                                  ;Input: DS:SI -> raw string with ?
 17373                                  ;	ES:DI -> destination string
 17374                                  ;	DS:BX -> source string
 17375                                  ;Function: replace ? chars of raw string with chars in source string and
 17376                                  ;	   put in destination string
 17377                                  ;Output: ES:DI-> new string
 17378                                  ;---------------------------------------------------------------------------
 17379                                  
 17380                                  NEW_RENAME:
 17381                                  	; 17/05/2019 - Retro DOS v4.0
 17382                                  NEWNAM:
 17383                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17384 000028B1 AC                      	LODSB
 17385 000028B2 3C3F                    	CMP	AL,"?" ; 3Fh
 17386 000028B4 7502                    	JNZ	short NOCHG
 17387 000028B6 8A07                    	MOV	AL,[BX] 		; Get replace char
 17388                                  NOCHG:
 17389 000028B8 AA                      	STOSB
 17390 000028B9 43                      	INC	BX			; Next replace char
 17391 000028BA E2F5                    	LOOP	NEWNAM
 17392                                  	; MSDOS 6.0
 17393                                  gs_ret_label:	; 18/12/2022
 17394 000028BC C3                      	retn
 17395                                  
 17396                                  ;============================================================================
 17397                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17398                                  ;============================================================================
 17399                                  ; 08/08/2018 - Retro DOS v3.0
 17400                                  ; 17/05/2019 - Retro DOS v4.0
 17401                                  
 17402                                  ;**	Low level routines for returning file information and setting file
 17403                                  ;	attributes
 17404                                  ;
 17405                                  ;	GET_FILE_INFO
 17406                                  ;	SET_FILE_ATTRIBUTE
 17407                                  ;
 17408                                  ;	Modification history:
 17409                                  ;
 17410                                  ;	    Created: ARR 30 March 1983
 17411                                  ;
 17412                                  ;	M025: Return access_denied if attempting to set
 17413                                  ;	      attribute of root directory.
 17414                                  ;
 17415                                  
 17416                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17417                                  
 17418                                  ;---------------------------------------------------------------------------
 17419                                  ; Procedure Name : GET_FILE_INFO
 17420                                  ;
 17421                                  ; Inputs:
 17422                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17423                                  ;		terminated)
 17424                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17425                                  ;		( = -1 if current dir not involved, else
 17426                                  ;		 Points to first char after last "/" of current dir part)
 17427                                  ;	[THISCDS] Points to CDS being used
 17428                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17429                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17430                                  ; Function:
 17431                                  ;	Get Information about a file
 17432                                  ; Returns:
 17433                                  ;	CARRY CLEAR
 17434                                  ;	    AX = Attribute of file
 17435                                  ;	    CX = Time stamp of file
 17436                                  ;	    DX = Date stamp of file
 17437                                  ;	    BX:DI = Size of file (32 bit)
 17438                                  ;	CARRY SET
 17439                                  ;	    AX is error code
 17440                                  ;		error_file_not_found
 17441                                  ;			Last element of path not found
 17442                                  ;		error_path_not_found
 17443                                  ;			Bad path (not in curr dir part if present)
 17444                                  ;		error_bad_curr_dir
 17445                                  ;			Bad path in current directory part of path
 17446                                  ; DS preserved, others destroyed
 17447                                  ;---------------------------------------------------------------------------
 17448                                  
 17449                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17450                                  
 17451                                  GET_FILE_INFO:
 17452                                  
 17453                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17454                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17455                                  
 17456 000028BD E871E9                  	call	TestNet
 17457 000028C0 7306                    	JNC	short LOCAL_INFO
 17458                                  
 17459                                  ;IF NOT Installed
 17460                                  ;	transfer NET_GET_FILE_INFO
 17461                                  ;ELSE
 17462                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17463                                  ;	INT	2FH
 17464                                  ;	return
 17465                                  
 17466 000028C2 B80F11                  	mov     ax, 110Fh
 17467 000028C5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17468                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17469                                  			; SDA CDS pointer -> current directory
 17470                                  			; Return: CF set on error, AX = file attributes
 17471 000028C7 C3                      	retn
 17472                                  ;ENDIF
 17473                                  
 17474                                  LOCAL_INFO:
 17475 000028C8 E828EA                  	call	ECritDisk
 17476 000028CB C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17477                                  	; MSDOS 3.3
 17478                                  	;call	GETPATH
 17479                                  	; MSDOS 6.0
 17480 000028D0 E8D700                  	call	GET_FAST_PATH
 17481                                  	; MSDOS 3.3 & MSDOS 6.0
 17482 000028D3 7312                    	JNC	short info_check_dev
 17483                                  NO_PATH:
 17484 000028D5 750B                    	JNZ	short bad_path1
 17485 000028D7 08C9                    	OR	CL,CL
 17486 000028D9 7407                    	JZ	short bad_path1
 17487                                  info_no_file:
 17488 000028DB B80200                  	MOV	AX,error_file_not_found
 17489                                  BadRet:
 17490 000028DE F9                      	STC
 17491                                  JustRet:
 17492                                  	;call	LCritDisk
 17493                                  	;retn
 17494                                  	; 18/12/2022
 17495 000028DF E92CEA                  	jmp	LCritDisk
 17496                                  
 17497                                  bad_path1:
 17498 000028E2 B80300                  	MOV	AX,error_path_not_found
 17499 000028E5 EBF7                    	jmp	short BadRet
 17500                                  
 17501                                  info_check_dev:
 17502 000028E7 08E4                    	OR	AH,AH
 17503 000028E9 78F0                    	JS	short info_no_file	; device
 17504                                  
 17505                                  	; MSDOS 6.0
 17506                                  ;SR;
 17507                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17508                                  ;for a root dir
 17509                                  
 17510 000028EB 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17511 000028F0 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17512                                  
 17513 000028F2 30E4                    	xor	ah,ah
 17514 000028F4 B010                    	mov	al,attr_directory ; 10h
 17515                                  	;clc
 17516                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17517                                  	; (DOSCODE:683Eh)
 17518                                  	; 16/12/2022
 17519                                  	;clc
 17520 000028F6 EBE7                    	jmp	short JustRet
 17521                                  
 17522                                  not_root:
 17523                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17524 000028F8 1E                      	PUSH	DS
 17525 000028F9 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17526 000028FD 89DE                    	MOV	SI,BX
 17527 000028FF 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17528 00002901 89DF                    	MOV	DI,BX
 17529                                  	;mov	cx,[si+16h]
 17530 00002903 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17531                                  	;mov	dx,[si+18h]
 17532 00002906 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17533 00002909 30E4                    	XOR	AH,AH
 17534                                  	;mov	al,[si+0Bh]
 17535 0000290B 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17536                                  	;test	al,10h
 17537 0000290E A810                    	TEST	AL,attr_directory
 17538 00002910 7506                    	JNZ	short NO_SIZE
 17539                                  	;mov	di,[si+1Ch]
 17540 00002912 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17541                                  	;mov	bx,[si+1Eh]
 17542 00002915 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17543                                  NO_SIZE:
 17544 00002918 1F                      	POP	DS
 17545                                  	;CLC
 17546                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17547                                  	; (DOSCODE:6864h)
 17548                                  	; 16/12/2022
 17549                                  	;clc
 17550 00002919 EBC4                    	jmp	short JustRet
 17551                                  
 17552                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17553                                  ;-------------------------------------------------------------------------------
 17554                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17555                                  ; Inputs:
 17556                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17557                                  ;		terminated)
 17558                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17559                                  ;		( = -1 if current dir not involved, else
 17560                                  ;		 Points to first char after last "/" of current dir part)
 17561                                  ;	[THISCDS] Points to CDS being used
 17562                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17563                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17564                                  ;	AX is new attributes to give to file
 17565                                  ; Function:
 17566                                  ;	Set File Attributes
 17567                                  ; Returns:
 17568                                  ;	CARRY CLEAR
 17569                                  ;	    No error
 17570                                  ;	CARRY SET
 17571                                  ;	    AX is error code
 17572                                  ;		error_file_not_found
 17573                                  ;			Last element of path not found
 17574                                  ;		error_path_not_found
 17575                                  ;			Bad path (not in curr dir part if present)
 17576                                  ;		error_bad_curr_dir
 17577                                  ;			Bad path in current directory part of path
 17578                                  ;		error_access_denied
 17579                                  ;			Attempt to set an attribute which cannot be set
 17580                                  ;			(attr_directory, attr_volume_ID)
 17581                                  ;		error_sharing_violation
 17582                                  ;			Sharing mode of file did not allow the change
 17583                                  ;			(this request requires exclusive write/read access)
 17584                                  ;			(INT 24H generated)
 17585                                  ; DS preserved, others destroyed
 17586                                  ;----------------------------------------------------------------------------
 17587                                  
 17588                                  SET_FILE_ATTRIBUTE:
 17589                                  
 17590                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17591                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17592                                  
 17593 0000291B A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17594 0000291E 7414                    	JZ	short set_look
 17595                                  _BAD_ACC:
 17596 00002920 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17597 00002925 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17598 0000292A C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17599 0000292F B80500                  	MOV	AX,error_access_denied ; 5
 17600 00002932 F9                      	STC
 17601 00002933 C3                      	retn
 17602                                  
 17603                                  set_look:
 17604 00002934 E8FAE8                  	call	TestNet
 17605 00002937 7308                    	JNC	short LOCAL_SET
 17606                                  
 17607                                  ;IF NOT Installed
 17608                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17609                                  ;ELSE
 17610 00002939 50                      	PUSH	AX
 17611                                  	
 17612                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17613                                  	;INT	2FH
 17614                                  
 17615 0000293A B80E11                  	mov     ax, 110Eh
 17616 0000293D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17617                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17618                                  			; SDA CDS pointer -> current directory
 17619                                  			; STACK: WORD new file attributes
 17620                                  			; Return: CF set on error
 17621                                  
 17622 0000293F 5B                      	POP	BX			; clean stack
 17623 00002940 C3                      	retn
 17624                                  ;ENDIF
 17625                                  
 17626                                  LOCAL_SET:
 17627 00002941 E8AFE9                  	call	ECritDisk
 17628 00002944 50                      	PUSH	AX			; Save new attributes
 17629 00002945 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17630 0000294A E8EE14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17631 0000294D 7308                    	JNC	short set_check_device
 17632 0000294F 5B                      	POP	BX			; Clean stack (don't zap AX)
 17633 00002950 EB83                    	JMP	short NO_PATH
 17634                                  
 17635                                  	; MSDOS 6.0
 17636                                  cannot_set_root:			; M025:
 17637 00002952 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17638                                  	;stc				; M025: to set attr. of root
 17639                                  	;jmp	short OK_BYE		; M025:
 17640                                  	; 01/02/2024
 17641 00002955 EB87                    	jmp	short BadRet
 17642                                  
 17643                                  set_check_device:
 17644 00002957 08E4                    	OR	AH,AH
 17645 00002959 7906                    	JNS	short set_check_share
 17646 0000295B 58                      	POP	AX
 17647 0000295C E8AFE9                  	call	LCritDisk
 17648 0000295F EBBF                    	JMP	short _BAD_ACC 		; device
 17649                                  
 17650                                  set_check_share:
 17651 00002961 58                      	POP	AX			; Get new attributes
 17652                                  
 17653                                  	; MSDOS 6.0
 17654 00002962 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17655 00002967 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17656                                  
 17657                                  	; MSDOS 3.3 & MSDOS 6.0
 17658 00002969 E882FC                  	call	REN_DEL_Check
 17659 0000296C 7305                    	JNC	short set_do
 17660 0000296E B82000                  	MOV	AX,error_sharing_violation ; 32
 17661 00002971 EB34                    	jmp	short OK_BYE
 17662                                  
 17663                                  set_do:
 17664                                  	; MSDOS 3.3 & MSDOS 6.0
 17665 00002973 C43E[E205]              	LES	DI,[CURBUF]
 17666 00002977 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17667 0000297C 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17668                                  
 17669                                  	; MSDOS 6.0
 17670 00002980 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17671                                  					;LB. if already dirty		  ;AN000;
 17672 00002985 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17673 00002987 E8F430                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17674                                  	
 17675 0000298A 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17676                                  yesdirty3:
 17677 0000298F A0[7605]                	MOV	AL,[THISDRV]
 17678                                  ;;;; 10/1/86 F.C update fastopen cache
 17679 00002992 52                      	PUSH	DX
 17680 00002993 57                      	PUSH	DI
 17681 00002994 B400                    	MOV	AH,0		  ; dir entry update
 17682 00002996 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17683 00002998 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17684 0000299A E8E6FC                  	call	FastOpen_Update
 17685 0000299D 5F                      	POP	DI
 17686 0000299E 5A                      	POP	DX
 17687                                  ;;;; 9/11/86 F.C update fastopen cache
 17688 0000299F E8D72F                  	call	FLUSHBUF
 17689 000029A2 7303                    	JNC	short OK_BYE
 17690 000029A4 B80200                  	MOV	AX,error_file_not_found
 17691                                  OK_BYE:
 17692                                  	;call	LCritDisk
 17693                                  	;retn
 17694                                  	; 16/12/2022
 17695 000029A7 E964E9                  	jmp	LCritDisk
 17696                                  
 17697                                  	; 17/05/2019 - Retro DOS v4.0
 17698                                  
 17699                                  	; MSDOS 6.0
 17700                                  GET_FAST_PATH:
 17701                                  ;hkn; use SS override for FastOpenFlg
 17702 000029AA 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17703                                  					;FO. trigger fastopen	;AN000;
 17704 000029B0 E88814                  	call	GETPATH
 17705 000029B3 9C                      	PUSHF			 	;FO.			;AN000;
 17706 000029B4 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17707                                  					;FO. clear all fastopen flags ;AN000;
 17708 000029BA 9D                      	POPF				;FO.			;AN000;
 17709 000029BB C3                      	retn
 17710                                  
 17711                                  ;============================================================================
 17712                                  ; DUP.ASM, MSDOS 6.0, 1991
 17713                                  ;============================================================================
 17714                                  ; 08/08/2018 - Retro DOS v3.0
 17715                                  ; 17/05/2019 - Retro DOS v4.0
 17716                                  
 17717                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17718                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17719                                  ;
 17720                                  ;	DOS_DUP
 17721                                  ;
 17722                                  ;	Modification history:
 17723                                  ;
 17724                                  ;	  Created: ARR 30 March 1983
 17725                                  
 17726                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17727                                  ;---------------------------------------------------------------------------
 17728                                  ; Procedure Name : DOS_DUP
 17729                                  ;
 17730                                  ; Inputs:
 17731                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17732                                  ;		(a non net SFT is OK, in this case the ref
 17733                                  ;		 count is simply incremented)
 17734                                  ; Function:
 17735                                  ;	Signal to the devices that a logical open is occurring
 17736                                  ; Returns:
 17737                                  ;	ES:DI point to SFT
 17738                                  ;    Carry clear
 17739                                  ;	SFT ref_count is incremented
 17740                                  ; Registers modified: None.
 17741                                  ; NOTE:
 17742                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17743                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17744                                  ;	that time.
 17745                                  ;---------------------------------------------------------------------------
 17746                                  
 17747                                  DOS_DUP:
 17748                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17749                                  
 17750                                  	; MSDOS 6.0
 17751 000029BC 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17752 000029C1 26C43E[9E05]            	les	di,[es:THISSFT]
 17753                                  
 17754                                  	;Entry	Dos_Dup_Direct
 17755                                  DOS_Dup_Direct:
 17756 000029C6 E881E8                  	call	IsSFTNet
 17757 000029C9 7503                    	JNZ	short DO_INC
 17758 000029CB E83A1B                  	call	DEV_OPEN_SFT
 17759                                  DO_INC:
 17760                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17761 000029CE 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17762                                  					;   we're in big trouble anyway)
 17763 000029D1 C3                      	retn
 17764                                  
 17765                                  ;============================================================================
 17766                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17767                                  ;============================================================================
 17768                                  ; 08/08/2018 - Retro DOS v3.0
 17769                                  ; 18/05/2019 - Retro DOS v4.0
 17770                                  
 17771                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17772                                  ;NAME	DOS_CREATE
 17773                                  ;----------------------------------------------------------------------------
 17774                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17775                                  ;
 17776                                  ;	DOS_CREATE
 17777                                  ;	DOS_CREATE_NEW
 17778                                  ;	SET_MKND_ERR
 17779                                  ;	SET_Media_ID
 17780                                  ;	SET_EXT_Mode
 17781                                  ;
 17782                                  ;	Revision history:
 17783                                  ;
 17784                                  ;	    A000 version 4.00	  Jan. 1988
 17785                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17786                                  
 17787                                  ;Installed = TRUE
 17788                                  
 17789                                  ;	i_need	THISSFT,DWORD
 17790                                  ;	i_need	THISCDS,DWORD
 17791                                  ;	I_need	EXTERR,WORD
 17792                                  ;	I_Need	ExtErr_locus,BYTE
 17793                                  ;	I_need	JShare,DWORD
 17794                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17795                                  ;	I_need	SATTRIB,BYTE
 17796                                  ;	I_need	CALLVIDM,DWORD
 17797                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17798                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17799                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17800                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17801                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17802                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17803                                  
 17804                                  ;***	DOS_CREATE - Create a File
 17805                                  ;----------------------------------------------------------------------------
 17806                                  ;	DOS_Create is called to create the specified file, truncating
 17807                                  ;	the old one if it exists.
 17808                                  ;
 17809                                  ;	ENTRY	AX is Attribute to create
 17810                                  ;		(ds) = DOSDATA
 17811                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17812                                  ;			terminated)
 17813                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17814                                  ;			( = -1 if current dir not involved, else
 17815                                  ;			 Points to first char after last "/" of current dir part)
 17816                                  ;		[THISCDS] Points to CDS being used
 17817                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17818                                  ;		[THISSFT] Points to SFT to fill in if file created
 17819                                  ;			(sf_mode field set so that FCB may be detected)
 17820                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17821                                  ;
 17822                                  ;	EXIT	sf_ref_count is NOT altered
 17823                                  ;		CARRY CLEAR
 17824                                  ;		    THISSFT filled in.
 17825                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17826                                  ;		CARRY SET
 17827                                  ;		    AX is error code
 17828                                  ;			error_path_not_found
 17829                                  ;				Bad path (not in curr dir part if present)
 17830                                  ;			error_bad_curr_dir
 17831                                  ;				Bad path in current directory part of path
 17832                                  ;			error_access_denied
 17833                                  ;				Attempt to re-create read only file , or
 17834                                  ;				create a second volume id or create a dir
 17835                                  ;			error_sharing_violation
 17836                                  ;				The sharing mode was correct but not allowed
 17837                                  ;				generates an INT 24
 17838                                  ;	USES	all but DS
 17839                                  ;----------------------------------------------------------------------------
 17840                                  
 17841                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17842                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17843                                  
 17844                                  DOS_CREATE:
 17845                                  	; 18/05/2019 - Retro DOS v4.0
 17846                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17847                                  
 17848                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17849                                  ;hkn; this point.
 17850                                  
 17851 000029D2 30E4                    	XOR	AH,AH		; Truncate is OK
 17852                                  
 17853                                  ;	Enter here from Dos_Create_New
 17854                                  ;
 17855                                  ;	(ah) = 0 iff truncate OK
 17856                                  
 17857                                  Create_inter:
 17858 000029D4 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17859                                  				; Mask out any meaningless bits
 17860 000029D6 7511                    	JNZ	short AttErr
 17861 000029D8 A808                    	TEST	AL,attr_volume_id
 17862 000029DA 7407                    	JZ	short NoReset
 17863                                  	
 17864                                  	; MSDOS 6.0
 17865                                  	; 16/12/2022
 17866 000029DC 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17867                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17868                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17869                                  	
 17870 000029E1 B008                    	MOV	AL,attr_volume_id ; 8
 17871                                  NoReset:
 17872 000029E3 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17873 000029E5 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17874 000029E7 740A                    	JZ	short ATT_OK
 17875                                  AttErr:
 17876 000029E9 B80500                  	MOV	AX,5		; Attribute problem
 17877 000029EC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17878 000029F1 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17879                                  				   ;	attr_device to be set.
 17880                                  ATT_OK:
 17881 000029F3 C43E[9E05]              	LES	DI,[THISSFT]
 17882 000029F7 06                      	PUSH	ES
 17883 000029F8 C436[A205]              	LES	SI,[THISCDS]
 17884 000029FC 83FEFF                  	CMP	SI,-1
 17885 000029FF 751B                    	JNE	short TEST_RE_NET
 17886                                  
 17887                                  ;	No CDS, it must be redirected.
 17888                                  
 17889 00002A01 07                      	POP	ES
 17890                                  
 17891                                  	; MSDOS 6.0
 17892                                  ;Extended open hooks
 17893                                  	;test	byte [EXTOPEN_ON],1
 17894 00002A02 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17895 00002A07 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17896                                  IFS_extopen:				    ;AN000;EO.
 17897 00002A09 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17898                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17899 00002A0A B82E11                  	mov	ax,112Eh
 17900                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17901 00002A0D CD2F                    	INT	2FH			    ;AN000;EO.
 17902 00002A0F 5B                      	POP	BX			    ;AN000;EO. trash bx
 17903 00002A10 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17904 00002A15 C3                      	retn				    ;AN000;EO.
 17905                                  NOEXTOP:				    ;AN000;
 17906                                  ;Extended open hooks
 17907                                  
 17908                                  ;IF NOT Installed
 17909                                  ;	transfer NET_SEQ_CREATE
 17910                                  ;ELSE
 17911 00002A16 50                      	PUSH	AX
 17912                                  
 17913                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17914                                  	;INT	2FH
 17915                                  
 17916 00002A17 B81811                  	mov	ax,1118h
 17917                                  	; 01/02/2024
 17918                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17919                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17920                                  			; SDA first filename pointer -> fully-qualified name of file
 17921                                  			; STACK: WORD file creation mode???
 17922                                  
 17923                                  	;POP	BX			; BX is trashed anyway
 17924                                  	;retn
 17925 00002A1A EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17926                                  ;ENDIF
 17927                                  
 17928                                  ;	We have a CDS. See if it's network
 17929                                  
 17930                                  TEST_RE_NET:
 17931                                  	;;test	word [es:si+43h],8000h
 17932                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17933                                  	; 07/12/2022
 17934                                  	;test	byte [es:si+44h],80h
 17935                                  	; 17/12/2022
 17936 00002A1C 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17937 00002A21 07                      	POP	ES
 17938 00002A22 7417                    	JZ	short LOCAL_CREATE
 17939                                  
 17940                                  	; MSDOS 6.0
 17941 00002A24 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17942 00002A27 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17943                                  	;;or	word [es:di+2],2
 17944                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17945                                  	; 17/12/2022
 17946 00002A29 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17947                                  
 17948                                  ;Extended open hooks
 17949                                  dochk:
 17950 00002A2E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17951 00002A33 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17952                                  ;Extended open hooks
 17953                                  
 17954                                  ;IF NOT Installed
 17955                                  ;	transfer NET_CREATE
 17956                                  ;ELSE
 17957 00002A35 50                      	PUSH	AX
 17958                                  	
 17959                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17960                                  	;INT	2FH
 17961                                  	
 17962 00002A36 B81711                  	mov	ax,1117h
 17963                                  	
 17964                                  	; 01/02/2024
 17965                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17966                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17967                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17968                                  			; SDA CDS pointer -> current directory
 17969                                  			; Return: CF set on error
 17970                                  
 17971                                  	;POP	BX			; BX is trashed anyway
 17972                                  ;nomore:
 17973                                  	;retn
 17974 00002A39 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17975                                  ;ENDIF
 17976                                  
 17977                                  ;**	It's a local create. We have a local CDS for it.
 17978                                  
 17979                                  LOCAL_CREATE:
 17980                                  	; MSDOS 6.0
 17981 00002A3B E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17982 00002A3E 7205                    	JC	short setdone	;AN000;EO.
 17983                                  	
 17984                                  	; MSDOS 3.3 & MSDOS 6.0
 17985                                  	; 17/12/2022
 17986                                  	;;or	word [es:di+2],2
 17987                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17988                                  	;or	byte [es:di+2],2
 17989 00002A40 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17990                                  setdone:
 17991 00002A45 E8ABE8                  	call	ECritDisk
 17992 00002A48 E86A1E                  	call	MakeNode
 17993 00002A4B 7317                    	JNC	short Create_ok
 17994 00002A4D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17995 00002A52 E8B9E8                  	call	LCritDisk
 17996                                  
 17997                                  	;entry	SET_MKND_ERR
 17998                                  SET_MKND_ERR:
 17999                                  
 18000                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18001                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18002                                  
 18003                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18004 00002A55 BB[5C2A]                	MOV     BX,CRTERRTAB
 18005                                  	;XLAT  ; MSDOS 3.3
 18006                                  	; 18/05/2019 - Retro DOS v4.0
 18007 00002A58 2E                      	CS
 18008 00002A59 D7                      	XLAT
 18009                                  CreatBadRet:
 18010 00002A5A F9                      	STC
 18011 00002A5B C3                      	retn
 18012                                  
 18013                                  ; 13/05/2019 - Retro DOS v4.0
 18014                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18015                                  ; ---------------------------------------------------------------------------
 18016                                  
 18017                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18018                                  
 18019                                  ; 17/07/2018 - Retro DOS v3.0
 18020                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18021                                  
 18022                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18023                                  ;	db	0,5,52h,50h,3,5,20h
 18024                                  
 18025                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18026                                  ;	db	0,5,52h,50h,3,5,20h,2
 18027                                  
 18028                                  ; 08/08/2018
 18029                                  
 18030                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18031 00002A5C 00                      	DB	0			; none
 18032 00002A5D 05                      	DB	error_access_denied	; MakeNode error 1
 18033 00002A5E 52                      	DB	error_cannot_make	; MakeNode error 2
 18034 00002A5F 50                      	DB	error_file_exists	; MakeNode error 3
 18035 00002A60 03                      	DB	error_path_not_found	; MakeNode error 4
 18036 00002A61 05                      	DB	error_access_denied	; MakeNode error 5
 18037 00002A62 20                      	DB	error_sharing_violation ; MakeNode error 6
 18038                                  	; MSDOS 6.0
 18039 00002A63 02                      	DB	error_file_not_found	; MakeNode error 7
 18040                                  
 18041                                  ; ---------------------------------------------------------------------------
 18042                                  
 18043                                  ; We have just created a new file. This results in the truncation of old
 18044                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18045                                  ; file to the current size.
 18046                                  
 18047                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18048                                  ; drive number to force a Build BPB after Media Check.
 18049                                  
 18050                                  ;;; FASTOPEN 8/29/86
 18051                                  Create_ok:
 18052 00002A64 E8F4FB                  	call	FastOpen_Delete
 18053                                  ;;; FASTOPEN 8/29/86
 18054 00002A67 A0[6D05]                	mov	al,[SATTRIB]
 18055 00002A6A A808                    	test	al,attr_volume_id
 18056 00002A6C 741C                    	jz	short NoVolLabel
 18057 00002A6E C43E[A205]              	LES	DI,[THISCDS]
 18058                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18059 00002A72 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18060 00002A75 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18061 00002A78 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18062                                  	
 18063                                  	; 18/05/2019 - Retro DOS v4.0
 18064                                  
 18065                                  	; MSDOS 6.0
 18066 00002A7C B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18067 00002A7E E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18068                                  	
 18069 00002A81 E86FE8                  	call	ECritDisk
 18070 00002A84 E8792B                  	call	FATREAD_CDS		; force a media check
 18071 00002A87 E884E8                  	call	LCritDisk
 18072                                  
 18073                                  NoVolLabel:
 18074 00002A8A B80200                  	MOV	ax,2
 18075 00002A8D C43E[9E05]              	LES	DI,[THISSFT]
 18076                                  ;if installed
 18077                                  	;call	JShare + 14 * 4
 18078 00002A91 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18079                                  ;else
 18080                                  ;	Call	ShSU
 18081                                  ;endif
 18082 00002A95 E876E8                  	call	LCritDisk
 18083 00002A98 E94901                  	jmp	SET_SFT_MODE
 18084                                  
 18085                                  ;---------------------------------------------------------------------------
 18086                                  ; Procedure Name : Dos_Create_New
 18087                                  ;
 18088                                  ; Inputs:
 18089                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18090                                  ;		terminated)
 18091                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18092                                  ;		( = -1 if current dir not involved, else
 18093                                  ;		 Points to first char after last "/" of current dir part)
 18094                                  ;	[THISCDS] Points to CDS being used
 18095                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18096                                  ;	[THISSFT] Points to SFT to fill in if file created
 18097                                  ;		(sf_mode field set so that FCB may be detected)
 18098                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18099                                  ;	AX is Attribute to create
 18100                                  ; Function:
 18101                                  ;	Try to create the specified file truncating an old one that exists
 18102                                  ; Outputs:
 18103                                  ;	sf_ref_count is NOT altered
 18104                                  ;	CARRY CLEAR
 18105                                  ;	    THISSFT filled in.
 18106                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18107                                  ;	CARRY SET
 18108                                  ;	    AX is error code
 18109                                  ;		error_path_not_found
 18110                                  ;			Bad path (not in curr dir part if present)
 18111                                  ;		error_bad_curr_dir
 18112                                  ;			Bad path in current directory part of path
 18113                                  ;		error_access_denied
 18114                                  ;			Create a second volume id or create a dir
 18115                                  ;		error_file_exists
 18116                                  ;			Already a file by this name
 18117                                  ; DS preserved, others destroyed
 18118                                  ;---------------------------------------------------------------------------
 18119                                  
 18120                                  DOS_Create_New:
 18121 00002A9B B401                    	MOV	AH,1		; Truncate is NOT OK
 18122 00002A9D E934FF                  	JMP	Create_inter
 18123                                  
 18124                                  ; MSDOS 6.0
 18125                                  ;---------------------------------------------------------------------------
 18126                                  ; Procedure Name : Set_Media_ID
 18127                                  ;
 18128                                  ; Inputs:
 18129                                  ;	NAME1= Volume ID
 18130                                  ;	BH= 0, delete volume id
 18131                                  ;	    1, set new volume id
 18132                                  ;	DS= DOSGROUP
 18133                                  ; Function:
 18134                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18135                                  ; Outputs:
 18136                                  ;	CARRY CLEAR
 18137                                  ;	    volume id set
 18138                                  ;	CARRY SET
 18139                                  ;	    AX is error code
 18140                                  ;---------------------------------------------------------------------------
 18141                                  
 18142                                  	; 18/05/2019 - Retro DOS v4.0
 18143                                  Set_Media_ID:
 18144 00002AA0 50                      	PUSH	AX		;AN000;;>32mb
 18145 00002AA1 06                      	PUSH	ES		;AN000;;>32mb
 18146 00002AA2 57                      	PUSH	DI		;AN000;;>32mb
 18147                                  
 18148 00002AA3 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18149 00002AA5 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18150 00002AA7 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18151 00002AA9 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18152                                  
 18153                                  ;hkn; PACKET_TEMP is in DOSDATA
 18154 00002AAC BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18155                                  
 18156 00002AAF 53                      	PUSH	BX		;AN000;;>32mb
 18157 00002AB0 52                      	PUSH	DX		;AN000;;>32mb
 18158 00002AB1 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18159                                  
 18160                                  	;invoke	$IOCTL		;AN000;;>32mb
 18161 00002AB3 E86BF7                  	call	_$IOCTL	
 18162                                  
 18163 00002AB6 5A                      	POP	DX		;AN000;;>32mb
 18164 00002AB7 5B                      	POP	BX		;AN000;;>32mb
 18165 00002AB8 7224                    	JC	short geterr	;AN000;;>32mb
 18166                                  
 18167 00002ABA 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18168 00002ABC 7405                    	JZ	short NoName	;AN000;>32mb yes
 18169                                  
 18170                                  ;hkn; NAME1 is in DOSDATA
 18171 00002ABE BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18172                                  
 18173 00002AC1 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18174                                  NoName: 			;AN000;
 18175                                  
 18176                                  ;hkn; NO_NAME_ID is in DOSDATA
 18177 00002AC3 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18178                                  
 18179                                  doset:				;AN000;
 18180 00002AC6 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18181                                  	;add	di,6
 18182 00002AC8 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18183                                  
 18184                                  ;hkn; ES & DS must point to SS
 18185                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18186 00002ACB 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18187                                  
 18188 00002ACC 1F                      	POP	DS		;AN000;;>32mb
 18189                                  
 18190                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18191 00002ACD 16                      	PUSH	SS		;AN000;;>32mb
 18192                                  
 18193 00002ACE 07                      	POP	ES		;AN000;;>32mb
 18194 00002ACF B90B00                  	MOV	CX,11		;AN000;;>32mb
 18195 00002AD2 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18196 00002AD4 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18197 00002AD7 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18198 00002AD9 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18199                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18200 00002ADB E843F7                  	call	_$IOCTL	
 18201                                  geterr: 			;AN000;
 18202                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18203 00002ADE 16                      	PUSH	SS		;AN000;>32mb
 18204                                  
 18205 00002ADF 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18206                                  
 18207 00002AE0 5F                      	POP	DI		;AN000;;>32mb
 18208 00002AE1 07                      	POP	ES		;AN000;;>32mb
 18209 00002AE2 58                      	POP	AX		;AN000;;>32mb
 18210 00002AE3 C3                      	retn			;AN000;>32mb
 18211                                  
 18212                                  ; MSDOS 6.0
 18213                                  ;---------------------------------------------------------------------------
 18214                                  ; Procedure Name : Set_EXT_mode
 18215                                  ;
 18216                                  ; Inputs:
 18217                                  ;	[EXTOPEN_ON]= flag for extended open
 18218                                  ;	SAVE_BX= mode specified in Extended Open
 18219                                  ; Function:
 18220                                  ;	Set mode in ThisSFT
 18221                                  ; Outputs:
 18222                                  ;	carry set,mode is set if from Extended Open
 18223                                  ;	carry clear, mode not set yet
 18224                                  ;---------------------------------------------------------------------------
 18225                                  
 18226                                  ; 13/05/2019 - Retro DOS v4.0
 18227                                  
 18228                                  Set_EXT_mode:
 18229                                  
 18230                                  ;hkn; SS override
 18231 00002AE4 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18232 00002AEA 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18233 00002AEC 50                      	PUSH	AX			    ;AN000;EO.
 18234                                  
 18235                                  ;hkn; SS override
 18236 00002AED 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18237                                  	;or	[es:di+2],ax
 18238 00002AF1 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18239 00002AF5 58                      	POP	AX			    ;AN000;EO.
 18240 00002AF6 F9                      	STC				    ;AN000;EO.
 18241                                  NOTEX:					    ;AN000;
 18242 00002AF7 C3                      	retn				    ;AN000;EO.
 18243                                  
 18244                                  ;============================================================================
 18245                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18246                                  ;============================================================================
 18247                                  ; 08/08/2018 - Retro DOS v3.0
 18248                                  ; 18/05/2019 - Retro DOS v4.0
 18249                                  
 18250                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18251                                  ;	NAME	DOS_OPEN
 18252                                  
 18253                                  ;**	OPEN.ASM - File Open
 18254                                  ;----------------------------------------------------------------------------
 18255                                  ;	Low level routines for openning a file from a file spec.
 18256                                  ;	Also misc routines for sharing errors
 18257                                  ;
 18258                                  ;	DOS_Open
 18259                                  ;	Check_Access_AX
 18260                                  ;	SHARE_ERROR
 18261                                  ;	SET_SFT_MODE
 18262                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18263                                  ;
 18264                                  ;	Revision history:
 18265                                  ;
 18266                                  ;	    Created: ARR 30 March 1983
 18267                                  ;	    A000	version 4.00   Jan. 1988
 18268                                  ;
 18269                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18270                                  ; 	       remote extended opens and not save_cx.
 18271                                  ;
 18272                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18273                                  ;	       on the stack before calling off to the redir.
 18274                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18275                                  ;	       to handle open from exec. In this case set the appropriate bit
 18276                                  ;	       else do not.
 18277                                  ;----------------------------------------------------------------------------	
 18278                                  
 18279                                  ;Installed = TRUE
 18280                                  
 18281                                  ;	i_need	NoSetDir,BYTE
 18282                                  ;	i_need	THISSFT,DWORD
 18283                                  ;	i_need	THISCDS,DWORD
 18284                                  ;	i_need	CURBUF,DWORD
 18285                                  ;	i_need	CurrentPDB,WORD
 18286                                  ;	i_need	CURR_DIR_END,WORD
 18287                                  ;	I_need	RetryCount,WORD
 18288                                  ;	I_need	Open_Access,BYTE
 18289                                  ;	I_need	fSharing,BYTE
 18290                                  ;	i_need	JShare,DWORD
 18291                                  ;	I_need	FastOpenFlg,byte
 18292                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18293                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18294                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18295                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18296                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18297                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18298                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18299                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18300                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18301                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18302                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18303                                  ;
 18304                                  ;	I_need	DOS_FLAG,BYTE
 18305                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18306                                  
 18307                                  ;Break	<DOS_Open - internal file access>
 18308                                  ;---------------------------------------------------------------------------
 18309                                  ; Procedure Name : DOS_Open
 18310                                  ;
 18311                                  ; Inputs:
 18312                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18313                                  ;		terminated)
 18314                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18315                                  ;		( = -1 if current dir not involved, else
 18316                                  ;		 Points to first char after last "/" of current dir part)
 18317                                  ;	[THISCDS] Points to CDS being used
 18318                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18319                                  ;	[THISSFT] Points to SFT to fill in if file found
 18320                                  ;		(sf_mode field set so that FCB may be detected)
 18321                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18322                                  ;	AX is Access and Sharing mode
 18323                                  ;	  High NIBBLE of AL (Sharing Mode)
 18324                                  ;		sharing_compat	   file is opened in compatibility mode
 18325                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18326                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18327                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18328                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18329                                  ;	  Low NIBBLE of AL (Access Mode)
 18330                                  ;		open_for_read	file is opened for reading
 18331                                  ;		open_for_write	file is opened for writing
 18332                                  ;		open_for_both	file is opened for both reading and writing.
 18333                                  ;
 18334                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18335                                  ;		(not checked)
 18336                                  ; Function:
 18337                                  ;	Try to open the specified file
 18338                                  ; Outputs:
 18339                                  ;	sf_ref_count is NOT altered
 18340                                  ;	CARRY CLEAR
 18341                                  ;	    THISSFT filled in.
 18342                                  ;	CARRY SET
 18343                                  ;	    AX is error code
 18344                                  ;		error_file_not_found
 18345                                  ;			Last element of path not found
 18346                                  ;		error_path_not_found
 18347                                  ;			Bad path (not in curr dir part if present)
 18348                                  ;		error_bad_curr_dir
 18349                                  ;			Bad path in current directory part of path
 18350                                  ;		error_invalid_access
 18351                                  ;			Bad sharing mode or bad access mode or bad combination
 18352                                  ;		error_access_denied
 18353                                  ;			Attempt to open read only file for writting, or
 18354                                  ;			open a directory
 18355                                  ;		error_sharing_violation
 18356                                  ;			The sharing mode was correct but not allowed
 18357                                  ;			generates an INT 24 on compatibility mode SFTs
 18358                                  ; DS preserved, others destroyed
 18359                                  ;----------------------------------------------------------------------------
 18360                                  
 18361                                  ; 18/05/2019 - Retro DOS v4.0
 18362                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18363                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18364                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18365                                  
 18366                                  DOS_OPEN:
 18367                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18368                                  
 18369 00002AF8 C606[4C03]00            	MOV	byte [NoSetDir],0
 18370 00002AFD E83301                  	CALL	Check_Access_AX
 18371 00002B00 722B                    	JC	short do_ret_label	    ; retc
 18372                                  
 18373 00002B02 C43E[9E05]              	LES	DI,[THISSFT]
 18374 00002B06 30E4                    	XOR	AH,AH
 18375                                  
 18376                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18377                                  
 18378 00002B08 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18379 00002B0C 06                      	PUSH	ES
 18380 00002B0D C436[A205]              	LES	SI,[THISCDS]
 18381                                  	; 18/08/2018
 18382 00002B11 83FEFF                  	CMP	SI,-1
 18383 00002B14 7530                    	JNZ	short TEST_RE_NET1
 18384 00002B16 07                      	POP	ES
 18385                                  
 18386                                  	; MSDOS 6.0
 18387                                  ;Extended open hooks
 18388 00002B17 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18389 00002B1C 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18390                                  _IFS_extopen:									;AN000;
 18391 00002B1E A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18392                                  					    ; with which call was made. This
 18393                                  					    ; has the open access bits. 
 18394                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18395                                  	
 18396 00002B21 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18397                                  	;mov	ax,112Eh
 18398                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18399 00002B22 B82E11                  	mov	ax,(MultNET*256)+46 
 18400 00002B25 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18401 00002B27 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18402 00002B28 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18403                                  
 18404                                  do_ret_label:
 18405 00002B2D C3                      	retn				    ;FT.				;AN000;
 18406                                  _NOEXTOP:
 18407                                  ;Extended open hooks
 18408                                  	;
 18409                                  ;IF NOT Installed
 18410                                  	;transfer NET_SEQ_OPEN
 18411                                  ;ELSE
 18412                                  	
 18413                                  do_net_int2f:
 18414 00002B2E F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18415 00002B33 7409                    	jz	short not_exec_open	; N: just do net open
 18416                                  					; Y: check to see if redir is aware
 18417                                  					;    of this 
 18418                                  	
 18419                                  					; M042 - start
 18420                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18421 00002B35 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18422                                  					; Q: does this redir know how to 
 18423                                  					;    this
 18424 00002B3A 7402                    	jz	short not_exec_open	; N: just do net open
 18425                                  					; Y: set bit 3 of access byte and 
 18426                                  					;    set sharing mode to DENY_WRITE
 18427                                  					; M042 - end
 18428                                  	
 18429                                  	; NOTE: This specific mode has not been set for the code assembled
 18430                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18431                                  	; always one.
 18432                                  					; M035 - set the bits on the stack
 18433                                  	;mov	al,23h
 18434 00002B3C B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18435                                  	
 18436                                  not_exec_open:
 18437                                  	; MSDOS 3.3 & MSDOS 6.0
 18438 00002B3E 50                      	PUSH	AX
 18439                                  
 18440                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18441                                  	;INT	2FH
 18442                                  
 18443 00002B3F B81611                  	mov     ax,1116h
 18444 00002B42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18445                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18446                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18447                                  			; STACK: WORD file open mode
 18448                                  			; Return: CF set on error
 18449                                  
 18450 00002B44 5B                      	POP	BX			; clean stack
 18451                                  ;do_ret_label: ; 09/08/2018
 18452 00002B45 C3                      	retn
 18453                                  ;ENDIF
 18454                                  
 18455                                  TEST_RE_NET1:
 18456                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18457                                  	; 17/12/2022
 18458 00002B46 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18459 00002B4B 07                      	POP	ES
 18460                                  	; 18/05/2019
 18461 00002B4C 7409                    	JZ	short LOCAL_OPEN
 18462                                  
 18463                                  ;Extended open hooks
 18464                                  	; MSDOS 6.0
 18465 00002B4E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18466 00002B53 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18467                                  ;Extended open hooks
 18468                                  
 18469                                  ;IF NOT Installed
 18470                                  ;	transfer NET_OPEN
 18471                                  ;ELSE
 18472 00002B55 EBD7                    	jmp	short do_net_int2f
 18473                                  ;ENDIF
 18474                                  
 18475                                  LOCAL_OPEN:
 18476                                  	; MSDOS 3.3 & MSDOS 6.0
 18477 00002B57 E899E7                  	call	ECritDisk
 18478                                  
 18479                                  ; DOS 3.3 FastOPen 6/16/86
 18480                                  
 18481                                  	;or	byte [FastOpenFlg],5
 18482 00002B5A 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18483                                  
 18484 00002B5F E8D912                  	call	GETPATH
 18485                                  
 18486                                  ; DOS 3.3 FastOPen 6/16/86
 18487                                  
 18488 00002B62 731D                    	JNC	short Open_found
 18489 00002B64 7511                    	JNZ	short bad_path2
 18490 00002B66 08C9                    	OR	CL,CL
 18491 00002B68 740D                    	JZ	short bad_path2
 18492                                  OpenFNF:
 18493 00002B6A B80200                  	MOV	AX,error_file_not_found	; 2
 18494                                  OpenBadRet:
 18495                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18496                                  	; 12/08/2018
 18497                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18498                                  	; MSDOS 6.0
 18499 00002B6D 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18500 00002B73 F9                      	STC
 18501                                  	;call	LCritDisk
 18502                                  	; 16/12/2022
 18503 00002B74 E997E7                  	jmp	LCritDisk
 18504                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18505                                  	;retn 	; 08/09/2018
 18506                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18507                                  	;jmp	Clear_FastOpen
 18508                                  
 18509                                  bad_path2:
 18510 00002B77 B80300                  	MOV	AX,error_path_not_found	; 3
 18511 00002B7A EBF1                    	JMP	short OpenBadRet
 18512                                  
 18513                                  Open_Bad_Access:
 18514 00002B7C B80500                  	MOV	AX,error_access_denied	; 5
 18515 00002B7F EBEC                    	JMP	short OpenBadRet
 18516                                  
 18517                                  Open_found:
 18518 00002B81 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18519 00002B83 08E4                    	OR	AH,AH
 18520 00002B85 783E                    	JS	short open_ok		; Devices don't have attributes
 18521 00002B87 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18522                                  	;mov	al,[es:bx+0Bh]
 18523 00002B8B 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18524 00002B8F A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18525 00002B91 75E9                    	JNZ	short Open_Bad_Access
 18526 00002B93 A801                    	TEST	AL,attr_read_only	; check write on read only
 18527 00002B95 742E                    	JZ	short open_ok
 18528                                  
 18529                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18530                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18531                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18532                                  ; processing until the actual write operation:
 18533                                  ;
 18534                                  ; If FCB, then we change the mode to be read_only.
 18535                                  ; If net_FCB, then we change the mode to be read_only.
 18536                                  ; If not open for read then error.
 18537                                  
 18538 00002B97 1E                      	push	ds
 18539 00002B98 56                      	push	si
 18540 00002B99 C536[9E05]              	LDS	SI,[THISSFT]
 18541                                  	;mov	cx,[si+2]
 18542 00002B9D 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18543                                  	; 17/12/2022
 18544                                  	;test	ch,80h
 18545 00002BA0 F6C580                  	test	ch,sf_isFCB>>8
 18546                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18547 00002BA3 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18548 00002BA5 88CA                    	MOV	DL,CL
 18549 00002BA7 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18550 00002BAA 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18551 00002BAD 7508                    	JNZ	short NormalOpen	; no
 18552                                  ResetAccess:
 18553                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18554                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18555                                  	; 16/12/2022
 18556 00002BAF 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18557                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18558 00002BB2 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18559 00002BB5 EB0C                    	JMP	SHORT FillSFT
 18560                                  
 18561                                  ; The SFT is normal. See if the requested access is open_for_read
 18562                                  
 18563                                  NormalOpen:
 18564 00002BB7 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18565 00002BBA 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18566 00002BBD 7404                    	JZ	short FillSFT
 18567 00002BBF 5E                      	pop	si
 18568 00002BC0 1F                      	pop	ds
 18569 00002BC1 EBB9                    	JMP	short Open_Bad_Access
 18570                                  ;
 18571                                  ; All done, restore registers and fill the SFT.
 18572                                  ;
 18573                                  FillSFT:
 18574 00002BC3 5E                      	pop	si
 18575 00002BC4 1F                      	pop	ds
 18576                                  open_ok:
 18577 00002BC5 E8AB1E                  	call	DOOPEN			; Fill in SFT
 18578                                  
 18579                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18580                                  	; 18/05/2019
 18581                                  	;and	byte [ss:FastOpenFlag],80h
 18582 00002BC8 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18583                                  	; 12/08/2018
 18584                                  	;and	byte [FastOpenFlg],Fast_yes	
 18585                                  
 18586                                  	; MSDOS 6.0
 18587 00002BCE E84300                  	CALL	DO_SHARE_CHECK
 18588 00002BD1 7303                    	JNC	short SHARE_OK
 18589                                  	;call	LCritDisk
 18590                                  	; 16/12/2022
 18591 00002BD3 E938E7                  	jmp	LCritDisk
 18592                                  	;;JMP	short Clear_FastOpen
 18593                                  	;retn	; 18/05/2019
 18594                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18595                                  	;jmp	short Clear_FastOpen	
 18596                                  
 18597                                  	; MSDOS 3.3
 18598                                  ;DO_SHARE_CHECK:
 18599                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18600                                  ;OpenShareRetry:
 18601                                  ;	push	cx			; Save number left to do
 18602                                  ;	call	SHARE_CHECK		; Final Check
 18603                                  ;	pop	cx			; CX = # left
 18604                                  ;	JNC	short SHARE_OK		; No problem with access
 18605                                  ;	call	Idle
 18606                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18607                                  ;OpenShareFail:
 18608                                  ;	LES	DI,[THISSFT]
 18609                                  ;	call	SHARE_ERROR
 18610                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18611                                  	
 18612                                  	;12/08/2018
 18613                                  	;mov	byte [ss:FastOpenFlg],0
 18614                                  	;08/09/2018
 18615                                  	;mov	byte [FastOpenFlg],0
 18616                                  	;call	LCritDisk
 18617                                  	;JMP	short Clear_FastOpen
 18618                                  	;retn
 18619                                  
 18620                                  SHARE_OK:
 18621                                  	; MSDOS 3.3 & MSDOS 6.0
 18622 00002BD6 B80300                  	MOV	AX,3
 18623 00002BD9 C43E[9E05]              	LES	DI,[THISSFT]
 18624                                  ;if installed
 18625                                  	;call	JShare + 14 * 4
 18626 00002BDD FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18627                                  ;else
 18628                                  ;	Call	ShSU
 18629                                  ;endif
 18630 00002BE1 E82AE7                  	call	LCritDisk
 18631                                  	
 18632                                  	;FallThru Set_SFT_Mode
 18633                                  
 18634                                  ;----------------------------------------------------------------------------
 18635                                  ; Procedure Name : SET_SFT_MODE
 18636                                  ;
 18637                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18638                                  ;
 18639                                  ;   Inputs:
 18640                                  ;	ThisSFT points to SFT
 18641                                  ;
 18642                                  ;   Outputs:
 18643                                  ;	Carry clear
 18644                                  ;   Registers modified: AX.
 18645                                  ;---------------------------------------------------------------------------
 18646                                  
 18647                                  ;hkn; called from create. DS already set up to DOSDATA.
 18648                                  
 18649                                  SET_SFT_MODE:
 18650 00002BE4 C43E[9E05]              	LES	DI,[THISSFT]
 18651 00002BE8 E81D19                  	call	DEV_OPEN_SFT
 18652                                  	;test	word [es:di+2],8000h
 18653                                  	; 17/12/2022
 18654                                  	;test	byte [es:di+3],80h
 18655 00002BEB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18656                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18657 00002BF0 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18658 00002BF2 A1[3003]                	MOV	AX,[CurrentPDB]
 18659                                  	;mov	[es:di+31h],ax
 18660 00002BF5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18661                                  
 18662                                  Clear_FastOpen:
 18663 00002BF9 C3                      	retn			       ;;;;; DOS 3.3
 18664                                  
 18665                                  ;----------------------------------------------------------------------------
 18666                                  ; Procedure Name : SHARE_ERROR
 18667                                  ;
 18668                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18669                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18670                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18671                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18672                                  ;---------------------------------------------------------------------------
 18673                                  
 18674                                  SHARE_ERROR:
 18675                                  	; 17/12/2022
 18676                                  	;test	byte [es:di+3],80h
 18677 00002BFA 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18678                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18679 00002BFF 7509                    	JNZ	short _HARD_ERR
 18680 00002C01 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18681 00002C05 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18682                                  	;CMP	CL,SHARING_COMPAT ; 0
 18683                                  	;JNE	short _NO_HARD_ERR
 18684                                  	; 21/09/2023
 18685 00002C08 7505                    	jnz	short _NO_HARD_ERR
 18686                                  _HARD_ERR:
 18687 00002C0A E86946                  	call	SHARE_VIOLATION
 18688                                  	;retnc				; User wants retry
 18689 00002C0D 73EA                    	jnc	short Clear_FastOpen
 18690                                  _NO_HARD_ERR:
 18691 00002C0F B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18692 00002C12 F9                      	STC
 18693 00002C13 C3                      	retn
 18694                                  
 18695                                  ; MSDOS 6.0
 18696                                  ;----------------------------------------------------------------------------
 18697                                  ; Procedure Name : DO_SHARE_CHECK
 18698                                  ;
 18699                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18700                                  ; Functions: check file sharing mode is valid
 18701                                  ; Output: carry set, error
 18702                                  ;	  carry clear, share ok
 18703                                  ;----------------------------------------------------------------------------
 18704                                  
 18705                                  	; 18/05/2019 - Retro DOS v4.0
 18706                                  DO_SHARE_CHECK:
 18707 00002C14 E8DCE6                  	call	ECritDisk		; enter critical section
 18708                                  OPN_RETRY:
 18709 00002C17 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18710                                  OpenShareRetry:
 18711 00002C1B 51                      	push	cx			; Save number left to do
 18712 00002C1C E85246                  	call	SHARE_CHECK		; Final Check
 18713 00002C1F 59                      	pop	cx			; CX = # left
 18714 00002C20 730E                    	JNC	short Share_Ok2		; No problem with access
 18715 00002C22 E8C7E5                  	call	Idle
 18716 00002C25 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18717                                  OpenShareFail:
 18718 00002C27 C43E[9E05]              	LES	DI,[THISSFT]
 18719 00002C2B E8CCFF                  	call	SHARE_ERROR
 18720 00002C2E 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18721                                  Share_Ok2:
 18722                                  	;call	LCritDisk		; leave critical section
 18723                                  	;retn
 18724                                  	; 18/12/2022
 18725 00002C30 E9DBE6                  	jmp	LCritDisk
 18726                                  
 18727                                  ;-----------------------------------------------------------------------------
 18728                                  ; Procedure Name : Check_Access
 18729                                  ;
 18730                                  ; Inputs:
 18731                                  ;	AX is mode
 18732                                  ;	  High NIBBLE of AL (Sharing Mode)
 18733                                  ;		sharing_compat	   file is opened in compatibility mode
 18734                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18735                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18736                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18737                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18738                                  ;	  Low NIBBLE of AL (Access Mode)
 18739                                  ;		open_for_read	file is opened for reading
 18740                                  ;		open_for_write	file is opened for writing
 18741                                  ;		open_for_both	file is opened for both reading and writing.
 18742                                  ; Function:
 18743                                  ;	Check this access mode for correctness
 18744                                  ; Outputs:
 18745                                  ;	[open_access] = AL input
 18746                                  ;	Carry Clear
 18747                                  ;		Mode is correct
 18748                                  ;		AX unchanged
 18749                                  ;	Carry Set
 18750                                  ;		Mode is bad
 18751                                  ;		AX = error_invalid_access
 18752                                  ; No other registers effected
 18753                                  ;----------------------------------------------------------------------------
 18754                                  
 18755                                  Check_Access_AX:
 18756 00002C33 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18757 00002C36 53                      	PUSH	BX
 18758                                  
 18759                                  ;	If sharing, then test for special sharing mode for FCBs
 18760                                  
 18761 00002C37 88C3                    	MOV	BL,AL
 18762 00002C39 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18763 00002C3C 803E[7205]FF            	CMP	byte [FSHARING],-1
 18764 00002C41 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18765 00002C43 80FB70                  	CMP	BL,SHARING_NET_FCB
 18766 00002C46 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18767                                  CheckShareMode:
 18768 00002C48 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18769 00002C4B 770D                    	JA	short Make_Bad_Access
 18770                                  CheckAccessMode:
 18771 00002C4D 88C3                    	MOV	BL,AL
 18772 00002C4F 80E30F                  	AND	BL,access_mask
 18773 00002C52 80FB02                  	CMP	BL,2
 18774 00002C55 7703                    	JA	short Make_Bad_Access
 18775 00002C57 5B                      	POP	BX
 18776 00002C58 F8                      	CLC
 18777 00002C59 C3                      	retn
 18778                                  
 18779                                  Make_Bad_Access:
 18780 00002C5A B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18781 00002C5D 5B                      	POP	BX
 18782 00002C5E F9                      	STC
 18783 00002C5F C3                      	retn
 18784                                  
 18785                                  ;============================================================================
 18786                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18787                                  ;============================================================================
 18788                                  ; 08/08/2018 - Retro DOS v3.0
 18789                                  ; 18/05/2019 - Retro DOS v4.0
 18790                                  
 18791                                  ;**	Low level routine for returning disk drive information from a local
 18792                                  ;	  or NET device
 18793                                  ;
 18794                                  ;	DISK_INFO
 18795                                  ;
 18796                                  ;	  Modification history:
 18797                                  ;
 18798                                  ;		Created: ARR 30 March 1983
 18799                                  
 18800                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18801                                  ;---------------------------------------------------------------------------
 18802                                  ; Procedure Name : DISK_INFO
 18803                                  ;
 18804                                  ; Inputs:
 18805                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18806                                  ;		(It MAY NOT be NUL, error not detected)
 18807                                  ; Function:
 18808                                  ;	Get Interesting Drive Information
 18809                                  ; Returns:
 18810                                  ;	DX = Number of free allocation units
 18811                                  ;	BX = Total Number of allocation units on disk
 18812                                  ;	CX = Sector size
 18813                                  ;	AL = Sectors per allocation unit
 18814                                  ;	AH = FAT ID BYTE
 18815                                  ;	Carry set if error (currently user FAILed to I 24)
 18816                                  ; Segs except ES preserved, others destroyed
 18817                                  ;----------------------------------------------------------------------------
 18818                                  
 18819                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18820                                  ;hkn; DOSDATA. 
 18821                                  
 18822                                  DISK_INFO:
 18823                                  	; 08/08/2018 - Retro DOS v3.0
 18824                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18825                                  
 18826 00002C60 E8CEE5                  	call	TestNet
 18827 00002C63 7306                    	JNC	short LOCAL_DSK_INFO
 18828                                  
 18829                                  ;IF NOT Installed
 18830                                  ;	transfer NET_DISK_INFO
 18831                                  ;ELSE
 18832                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18833                                  	;INT	2FH
 18834                                  	;return
 18835                                  
 18836 00002C65 B80C11                  	mov     ax,110Ch
 18837 00002C68 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18838                                  			; ES:DI -> current directory
 18839                                  			; Return: AL = sectors per cluster, BX = total clusters
 18840                                  			; CX = bytes per sector, DX = number of available clusters
 18841 00002C6A C3                      	retn
 18842                                  ;ENDIF
 18843                                  
 18844                                  LOCAL_DSK_INFO:
 18845 00002C6B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18846 00002C70 E880E6                  	call	ECritDisk
 18847 00002C73 E88A29                  	call	FATREAD_CDS		; perform media check.
 18848 00002C76 7241                    	JC	short CRIT_LEAVE
 18849 00002C78 BB0200                  	MOV	BX,2
 18850 00002C7B E8EC27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18851 00002C7E 7239                    	JC	short CRIT_LEAVE
 18852 00002C80 C536[E205]              	LDS	SI,[CURBUF]
 18853                                  	;mov	ah,[si+20]
 18854 00002C84 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18855                                  
 18856                                  ;hkn; SS is DOSDATA
 18857 00002C87 16                      	push	ss
 18858 00002C88 1F                      	pop	ds
 18859                                  	;mov	cx,[es:bp+0Dh]
 18860 00002C89 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18861                                  
 18862                                  ; Examine the current free count. If it indicates that we have an invalid
 18863                                  ; count, do the expensive calculation.
 18864                                  
 18865                                  	;mov	dx,[es:bp+1Fh]
 18866 00002C8D 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18867 00002C91 83FAFF                  	CMP	DX,-1			; is it valid?
 18868 00002C94 7404                    	JZ	short DoScan
 18869                                  
 18870                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18871                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18872                                  ; the count.
 18873                                  
 18874 00002C96 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18875 00002C98 7222                    	JB	short GotVal		; yes, trust it.
 18876                                  DoScan:
 18877 00002C9A 31D2                    	XOR	DX,DX
 18878 00002C9C 49                      	DEC	CX
 18879                                  SCANFREE:
 18880 00002C9D E8CA27                  	call	UNPACK
 18881 00002CA0 7217                    	JC	short CRIT_LEAVE
 18882 00002CA2 7501                    	JNZ	short NOTFREECLUS
 18883 00002CA4 42                      	INC	DX			; A free one
 18884                                  NOTFREECLUS:
 18885 00002CA5 43                      	INC	BX			; Next cluster
 18886 00002CA6 E2F5                    	LOOP	SCANFREE
 18887 00002CA8 4B                      	DEC	BX			; BX was next cluster. Convert to
 18888                                  ReturnVals:
 18889 00002CA9 4B                      	DEC	BX			; count
 18890                                  	;mov	al,[es:bp+4]
 18891 00002CAA 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18892 00002CAE FEC0                    	INC	AL			; Sectors/cluster
 18893                                  	;mov	cx,[es:bp+2]
 18894 00002CB0 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18895                                  	;mov	[es:bp+1Fh],dx
 18896 00002CB4 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18897 00002CB8 F8                      	CLC
 18898                                  CRIT_LEAVE:
 18899                                  	;call	LCritDisk
 18900                                  	;retn
 18901                                  	; 17/12/2022
 18902 00002CB9 E952E6                  	jmp	LCritDisk
 18903                                  
 18904                                  ; We have correctly computed everything previously. Load up registers for
 18905                                  ; return.
 18906                                  
 18907                                  GotVal: 
 18908 00002CBC 89CB                    	MOV	BX,CX			; get cluster count
 18909 00002CBE EBE9                    	JMP	short ReturnVals
 18910                                  
 18911                                  ;============================================================================
 18912                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18913                                  ;============================================================================
 18914                                  ; 22/07/2018 - Retro DOS v3.0
 18915                                  
 18916                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18917                                  ;	NAME	DOS_SEARCH
 18918                                  
 18919                                  ;**	Low level routines for doing local and NET directory searches
 18920                                  ;
 18921                                  ;	DOS_SEARCH_FIRST
 18922                                  ;	DOS_SEARCH_NEXT
 18923                                  ;	RENAME_NEXT
 18924                                  ;
 18925                                  ;	Revision history:
 18926                                  ;
 18927                                  ;	    Created: ARR 30 March 1983
 18928                                  ;	    A000	version 4.00  Jan. 1988
 18929                                  ;	    A001	PTM 3564 -- search for fastopen
 18930                                  
 18931                                  ;Installed = TRUE
 18932                                  
 18933                                  ;--------------------------------------------------------------------------
 18934                                  ;
 18935                                  ; Procedure Name : DOS_SEARCH_FIRST
 18936                                  ;
 18937                                  ; Inputs:
 18938                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18939                                  ;		terminated)
 18940                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18941                                  ;		( = -1 if current dir not involved, else
 18942                                  ;		 Points to first char after last "/" of current dir part)
 18943                                  ;	[THISCDS] Points to CDS being used
 18944                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18945                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18946                                  ;	[DMAADD] Points to 53 byte buffer
 18947                                  ; Function:
 18948                                  ;	Initiate a search for the given file spec
 18949                                  ; Outputs:
 18950                                  ;	CARRY CLEAR
 18951                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18952                                  ;
 18953                                  ;	LOCAL
 18954                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18955                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18956                                  ;	    11 byte search name with Meta chars in it
 18957                                  ;	    Search Attribute Byte, attribute of search
 18958                                  ;	    WORD LastEnt value
 18959                                  ;	    WORD DirStart
 18960                                  ;	    4 byte pad
 18961                                  ;	    32 bytes of the directory entry found
 18962                                  ;	NET
 18963                                  ;	    21 bytes First byte has high bit set
 18964                                  ;	    32 bytes of the directory entry found
 18965                                  ;
 18966                                  ;	CARRY SET
 18967                                  ;	    AX = error code
 18968                                  ;		error_no_more_files
 18969                                  ;			No match for this file
 18970                                  ;		error_path_not_found
 18971                                  ;			Bad path (not in curr dir part if present)
 18972                                  ;		error_bad_curr_dir
 18973                                  ;			Bad path in current directory part of path
 18974                                  ; DS preserved, others destroyed
 18975                                  ;---------------------------------------------------------------------------
 18976                                  
 18977                                  ; 24/01/2024
 18978                                  %if 1
 18979                                  	; 17/05/2019 - Retro DOS v4.0
 18980                                  GET_FAST_SEARCH:
 18981                                  	; 22/07/2018
 18982                                  	; MSDOS 6.0
 18983                                  	; 17/12/2022
 18984 00002CC0 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18985                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18986                                  					;FO.trigger fastopen ;AN000;
 18987                                  	;call	DOS_SEARCH_FIRST
 18988                                  	;retn
 18989                                  	; 24/01/2024
 18990                                  	; 17/12/2022
 18991                                  	;jmp	DOS_SEARCH_FIRST
 18992                                  %endif
 18993                                  
 18994                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18995                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18996                                  
 18997                                  DOS_SEARCH_FIRST:
 18998                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18999                                  
 19000 00002CC6 C43E[A205]              	LES	DI,[THISCDS]
 19001 00002CCA 83FFFF                  	CMP	DI,-1
 19002 00002CCD 7506                    	JNZ	short TEST_RE_NET2
 19003                                  
 19004                                  ;IF NOT Installed
 19005                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19006                                  ;ELSE
 19007                                  	;mov	ax,1119h
 19008 00002CCF B81911                  	MOV	AX,(MultNET<<8)|25
 19009 00002CD2 CD2F                    	INT	2Fh
 19010 00002CD4 C3                      	retn
 19011                                  ;ENDIF
 19012                                  
 19013                                  TEST_RE_NET2:
 19014                                  	;test	word [es:di+43h],8000h
 19015                                  	; 17/12/2022
 19016                                  	;test	byte [es:di+44h],80h
 19017                                  	; 28/12/2022
 19018 00002CD5 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19019                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19020 00002CDA 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19021                                  
 19022                                  ;IF NOT Installed
 19023                                  ;	transfer NET_SEARCH_FIRST
 19024                                  ;ELSE
 19025                                  	;mov	ax,111Bh
 19026 00002CDC B81B11                  	MOV	AX,(MultNET<<8)|27
 19027 00002CDF CD2F                    	INT	2FH
 19028 00002CE1 C3                      	retn
 19029                                  ;ENDIF
 19030                                  	; 18/05/2019 - Retro DOS v4.0
 19031                                  LOCAL_SEARCH_FIRST:
 19032 00002CE2 E80EE6                  	call	ECritDisk
 19033                                  	; MSDOS 6.0
 19034                                  	;;test	word [DOS34_FLAG],400h
 19035                                  	; 17/12/2022
 19036                                  	;test	byte [DOS34_FLAG+1],04h
 19037 00002CE5 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19038                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19039 00002CEA 7405                    	JZ	short NOFN			;AN000;
 19040                                  	;or	byte [FastOpenFlg],1
 19041 00002CEC 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19042                                  NOFN:						;AN000;
 19043 00002CF1 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19044                                  
 19045                                  ; 03/02/2024
 19046                                  %if 0
 19047                                  	; MSDOS 6.0
 19048                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19049                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19050                                  %else
 19051                                  	; 03/02/2024
 19052 00002CF6 16                      	push	ss
 19053 00002CF7 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19054 00002CF8 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19055                                  getnext:				;AN000;
 19056 00002CFC AC                      	lodsb				;AN000;;FO. get char
 19057 00002CFD 08C0                    	or	al,al			;AN000;;FO. is it null
 19058 00002CFF 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19059 00002D01 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19060 00002D03 75F7                    	jne	short getnext 		;AN000;;FO. no
 19061                                  %endif
 19062                                  	;and	byte [FastOpenFlg],80h
 19063 00002D05 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19064                                  NO_Question:	; 03/02/2024
 19065                                  norm_GETPATH:
 19066 00002D0A E82E11                  	call	GETPATH
 19067                                  	; BX = offset NAME1
 19068                                  ;_getdone:
 19069 00002D0D 7318                    	JNC	short find_check_dev
 19070 00002D0F 7511                    	JNZ	short bad_path3
 19071 00002D11 08C9                    	OR	CL,CL
 19072 00002D13 740D                    	JZ	short bad_path3
 19073                                  find_no_more:
 19074                                  	;mov	ax,12h
 19075 00002D15 B81200                  	MOV	AX,error_no_more_files
 19076                                  BadBye:
 19077                                  	; MSDOS 6.0
 19078 00002D18 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19079                                  
 19080 00002D1E F9                      	STC
 19081                                  	;call	LCritDisk
 19082                                  	;retn
 19083                                  	; 18/12/2022
 19084 00002D1F E9ECE5                  	jmp	LCritDisk
 19085                                  
 19086                                  bad_path3:
 19087                                  	;mov	ax,3
 19088 00002D22 B80300                  	MOV	AX,error_path_not_found
 19089 00002D25 EBF1                    	JMP	short BadBye
 19090                                  
 19091                                  find_check_dev:
 19092 00002D27 08E4                    	OR	AH,AH
 19093 00002D29 790A                    	JNS	short found_entry
 19094 00002D2B C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19095 00002D31 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19096                                  found_entry:
 19097                                  
 19098                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19099                                  ; a search-next may not have wfp_start set correctly
 19100                                  
 19101 00002D35 C43E[2C03]              	LES	DI,[DMAADD]
 19102 00002D39 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19103 00002D3D AC                      	LODSB
 19104 00002D3E 2C40                    	SUB	AL,'A'-1                ; logical drive
 19105 00002D40 AA                      	STOSB				; High bit not set (local)
 19106                                  found_it:
 19107 00002D41 C43E[2C03]              	LES	DI,[DMAADD]
 19108 00002D45 47                      	INC	DI
 19109                                  
 19110                                  	; MSDOS 6.0
 19111 00002D46 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19112                                  	;test	byte [FastOpenFlg],10h
 19113 00002D47 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19114 00002D4C 7408                    	JZ	short notfast			  ;FO.;AN001;
 19115 00002D4E 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19116 00002D50 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19117 00002D54 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19118                                  
 19119                                  notfast:
 19120 00002D56 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19121                                  movmov:
 19122                                  ; Special E5 code
 19123 00002D59 A4                      	MOVSB
 19124 00002D5A 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19125 00002D5F 7505                    	JNZ	short NOTKANJB
 19126 00002D61 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19127                                  NOTKANJB:
 19128                                  	;MOV	CX,10
 19129                                  	;REP	MOVSB
 19130                                  	; 03/02/2024
 19131 00002D66 B90500                  	mov	cx,5
 19132 00002D69 F3A5                    	rep	movsw
 19133                                  
 19134                                  	; 08/09/2018
 19135 00002D6B 1F                      	POP	DS			;FO.;AN001; restore ds
 19136                                  
 19137 00002D6C A0[6B05]                	MOV	AL,[ATTRIB]
 19138 00002D6F AA                      	STOSB
 19139 00002D70 50                      	PUSH	AX			; Save AH device info
 19140 00002D71 A1[4803]                	MOV	AX,[LASTENT]
 19141 00002D74 AB                      	STOSW
 19142 00002D75 A1[C205]                	MOV	AX,[DIRSTART]
 19143 00002D78 AB                      	STOSW
 19144                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19145 00002D79 83C704                  	ADD	DI,4
 19146 00002D7C 58                      	POP	AX			; Recover AH device info
 19147 00002D7D 08E4                    	OR	AH,AH
 19148 00002D7F 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19149 00002D81 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19150 00002D86 7510                    	JNZ	short OKSTORE
 19151                                  
 19152                                  	; MSDOS 6.0
 19153 00002D88 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19154                                  					;AN000;;FO. from fastopen and is good
 19155 00002D8D 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19156                                  
 19157                                  	; The user has specified the root directory itself, rather than some
 19158                                  	; contents of it. We can't "find" that.
 19159                                  
 19160 00002D8F 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19161                                  					;   stuffing a -1 at Lastent
 19162 00002D95 E97DFF                  	JMP	find_no_more
 19163                                  
 19164                                  OKSTORE:
 19165 00002D98 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19166                                  DOSREL:
 19167                                  	; BX = offset NAME1 (from GETPATH)
 19168 00002D9C 89DE                    	MOV	SI,BX			; SI-> start of entry
 19169                                  
 19170                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19171                                  
 19172                                  	;;mov	cx,32
 19173                                  	;MOV	CX,dir_entry.size
 19174                                  	; 03/02/2024
 19175 00002D9E B91000                  	mov	cx,dir_entry.size>>1
 19176                                  ;;;;; 7/29/86
 19177 00002DA1 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19178                                  	;REP	MOVSB
 19179 00002DA3 F3A5                    	rep	movsw
 19180                                  	;
 19181 00002DA5 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19182 00002DA7 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19183 00002DAB 7504                    	JNZ	short NO05
 19184 00002DAD 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19185                                  NO05:
 19186                                  
 19187                                  ;;;;; 7/29/86
 19188                                  
 19189                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19190                                  	; 16/12/2022
 19191                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19192                                  	; MSDOS 6.0
 19193                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19194                                  	; 18/05/2019 - Retro DOS v4.0
 19195 00002DB1 16                      	push	ss
 19196 00002DB2 1F                      	pop	ds
 19197                                  	; 16/12/2022
 19198 00002DB3 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19199                                  
 19200                                  ;hkn; SS is DOSDATA
 19201                                  	;push	ss
 19202                                  	;pop	ds
 19203 00002DB8 F8                      	CLC
 19204                                  	;call	LCritDisk
 19205                                  	;retn
 19206                                  	; 16/12/2022
 19207 00002DB9 E952E5                  	jmp	LCritDisk
 19208                                  
 19209                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19210                                  ;----------------------------------------------------------------------------
 19211                                  ;
 19212                                  ; Procedure Name : DOS_SEARCH_NEXT
 19213                                  ;
 19214                                  ; Inputs:
 19215                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19216                                  ;	    (only first 21 bytes must have valid information)
 19217                                  ; Function:
 19218                                  ;	Look for subsequent matches
 19219                                  ; Outputs:
 19220                                  ;	CARRY CLEAR
 19221                                  ;	    The 53 bytes at DMAADD are updated for next call
 19222                                  ;		(see DOS_SEARCH_FIRST)
 19223                                  ;	CARRY SET
 19224                                  ;	    AX = error code
 19225                                  ;		error_no_more_files
 19226                                  ;			No more files to find
 19227                                  ; DS preserved, others destroyed
 19228                                  ;---------------------------------------------------------------------------
 19229                                  
 19230                                  ;hkn; called from search.asm. DS already set up at this point.
 19231                                  
 19232                                  DOS_SEARCH_NEXT:
 19233 00002DBC C43E[2C03]              	LES	DI,[DMAADD]
 19234 00002DC0 268A05                  	MOV	AL,[ES:DI]
 19235 00002DC3 A880                    	TEST	AL,80H			; Test for NET
 19236 00002DC5 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19237                                  ;IF NOT Installed
 19238                                  ;	transfer NET_SEARCH_NEXT
 19239                                  ;ELSE
 19240                                  	;mov	ax,111Ch
 19241 00002DC7 B81C11                  	MOV	AX,(MultNET<<8)|28
 19242 00002DCA CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19243                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19244                                  		     ; Return: CF set on error, AX = DOS error code
 19245                                  		     ; CF clear if successful
 19246 00002DCC C3                      	retn
 19247                                  ;ENDIF
 19248                                  
 19249                                  LOCAL_SEARCH_NEXT:
 19250                                  	;AL is drive A=1
 19251                                  	;mov	byte [EXTERR_LOCUS],2
 19252 00002DCD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19253 00002DD2 E81EE5                  	call	ECritDisk
 19254                                  
 19255                                  ;hkn; DummyCDS is in DOSDATA
 19256 00002DD5 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19257                                  ;hkn; Segment address is DOSDATA - use ds
 19258                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19259 00002DDB 8C1E[A405]              	mov	[THISCDS+2],DS
 19260                                  
 19261 00002DDF 0440                    	ADD	AL,'A'-1
 19262 00002DE1 E8223B                  	call	InitCDS
 19263                                  
 19264                                  ;	call	GETTHISDRV		; Set CDS pointer
 19265                                  
 19266 00002DE4 7246                    	JC	short No_files		; Bogus drive letter
 19267 00002DE6 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19268                                  	;les	bp,[es:di+45h]
 19269 00002DEA 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19270 00002DEE E83DD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19271                                  
 19272                                  	; 16/12/2022
 19273 00002DF1 268A4600                	mov	al,[ES:BP]
 19274                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19275                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19276 00002DF5 A2[7605]                	mov	[THISDRV],AL
 19277                                  	;mov	word [CREATING],0E500h
 19278 00002DF8 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19279 00002DFE C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19280 00002E03 C536[2C03]              	LDS	SI,[DMAADD]
 19281 00002E07 AC                      	LODSB				; Drive Byte
 19282                                  
 19283                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19284                                  RENAME_NEXT:
 19285                                  	;context ES
 19286 00002E08 16                      	push	ss
 19287 00002E09 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19288                                  
 19289                                  ;hkn; NAME1 is in DOSDATA
 19290 00002E0A BF[4B05]                	MOV	DI,NAME1
 19291                                  
 19292 00002E0D B90B00                  	MOV	CX,11
 19293 00002E10 F3A4                    	REP	MOVSB			; Search name
 19294 00002E12 AC                      	LODSB				; Attribute
 19295                                  
 19296                                  ;hkn; SS override
 19297 00002E13 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19298 00002E17 AD                      	LODSW				; LastEnt
 19299 00002E18 09C0                    	OR	AX,AX
 19300                                  	; 03/02/2024
 19301                                  	;JNS	short cont_load
 19302 00002E1A 7810                    	js	short No_files
 19303                                  ;No_files:
 19304                                  	;JMP	find_no_more
 19305                                  
 19306                                  cont_load:
 19307 00002E1C 50                      	PUSH	AX			; Save LastEnt
 19308 00002E1D AD                      	LODSW				; DirStart
 19309 00002E1E 89C3                    	MOV	BX,AX
 19310                                  
 19311                                  ;hkn; SS is DOSDATA
 19312                                  	;context DS
 19313 00002E20 16                      	push	ss
 19314 00002E21 1F                      	pop	ds
 19315 00002E22 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19316                                  	;invoke	SetDirSrch
 19317 00002E26 E8B50F                  	call	SETDIRSRCH
 19318 00002E29 7304                    	JNC	short SEARCH_GOON
 19319 00002E2B 58                      	POP	AX			; Clean stack
 19320                                  	;JMP	short No_files
 19321                                  	; 03/02/2024
 19322                                  No_files:
 19323 00002E2C E9E6FE                  	JMP	find_no_more
 19324                                  
 19325                                  SEARCH_GOON:
 19326 00002E2F E89C12                  	call	STARTSRCH
 19327 00002E32 58                      	POP	AX
 19328 00002E33 E8790F                  	call	GETENT
 19329 00002E36 72F4                    	JC	short No_files
 19330 00002E38 E8AF0E                  	call	NEXTENT
 19331 00002E3B 72EF                    	JC	short No_files
 19332 00002E3D 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19333 00002E3F E9FFFE                  	JMP	found_it ; 10/08/2018
 19334                                  
 19335                                  ; MSDOS 6.0
 19336                                  ;---------------------------------------------------------------------------
 19337                                  ;
 19338                                  ; Procedure Name : CHECK_QUESTION
 19339                                  ;
 19340                                  ; Input: [WFP_START]= pointer to final path
 19341                                  ; Function: check '?' char
 19342                                  ; Output: carry clear, if no '?'
 19343                                  ;	 carry set, if '?' exists
 19344                                  ;---------------------------------------------------------------------------
 19345                                  
 19346                                  ; 03/02/2024
 19347                                  %if 0
 19348                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19349                                  CHECK_QUESTION:
 19350                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19351                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19352                                  	push	ss
 19353                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19354                                  	; 16/12/2022
 19355                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19356                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19357                                  	;mov	si,[ss:WFP_START]
 19358                                  getnext:				;AN000;
 19359                                  	LODSB				;AN000;;FO. get char
 19360                                  	OR	AL,AL			;AN000;;FO. is it null
 19361                                  	JZ	short NO_Question	;AN000;;FO. yes
 19362                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19363                                  	JNZ	short getnext 		;AN000;;FO. no
 19364                                  	STC				;AN000;;FO.
 19365                                  NO_Question:				;AN000;
 19366                                  	retn				;AN000;;FO.
 19367                                  %endif
 19368                                  
 19369                                  ;============================================================================
 19370                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19371                                  ;============================================================================
 19372                                  ; 23/07/2018 - Retro DOS v3.0
 19373                                  ; 18/05/2019 - Retro DOS v4.0
 19374                                  
 19375                                  ;**
 19376                                  ;
 19377                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19378                                  ;  If process has NET resources a close all is sent out over the net.
 19379                                  ;
 19380                                  ;   DOS_ABORT
 19381                                  ;
 19382                                  ;   Modification history:
 19383                                  ;
 19384                                  ;       Created: ARR 30 March 1983
 19385                                  ;
 19386                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19387                                  ;				being terminated only if it is busy.
 19388                                  ;
 19389                                  
 19390                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19391                                  ;--------------------------------------------------------------------------
 19392                                  ;
 19393                                  ; Procedure Name : DOS_ABORT
 19394                                  ;
 19395                                  ; Inputs:
 19396                                  ;       [CurrentPDB] set to PID of process aborting
 19397                                  ; Function:
 19398                                  ;       Close all files and free all SFTs for this PID
 19399                                  ; Returns:
 19400                                  ;       None
 19401                                  ; All destroyed except stack
 19402                                  ;---------------------------------------------------------------------------
 19403                                  
 19404                                  DOS_ABORT:
 19405 00002E42 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19406 00002E47 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19407                                  reset_free_jfn:
 19408 00002E4C 89CB                    	MOV     BX,CX
 19409 00002E4E 51                      	PUSH    CX
 19410 00002E4F 4B                      	DEC     BX                      ; get jfn (start with last one)
 19411                                  
 19412 00002E50 E8E737                  	CALL	_$CLOSE
 19413 00002E53 59                      	POP     CX
 19414 00002E54 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19415                                  
 19416                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19417                                  ; are running in the no-sharing no-network environment, we are simulating the
 19418                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19419                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19420                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19421                                  ;
 19422                                  ; If sharing is loaded, then the following call to close process will
 19423                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19424                                  ;
 19425                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19426                                  ; known network resources. These resources are then responsible for cleaning
 19427                                  ; up after this process.
 19428                                  ;
 19429                                  ; Sleazy, eh?
 19430                                  
 19431                                  	;context DS			; SS is DOSDATA
 19432 00002E56 16                      	push	ss
 19433 00002E57 1F                      	pop	ds  ; 09/09/2018
 19434                                  
 19435                                  	;CallInstall Net_Abort, MultNET, 29
 19436 00002E58 B81D11                  	mov	ax,111Dh
 19437 00002E5B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19438                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19439                                  			; DS???, SS = DOS CS
 19440                                  ;if installed
 19441 00002E5D FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19442                                  ;else
 19443                                  ;	call 	MFTCloseP
 19444                                  ;endif
 19445                                  
 19446                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19447                                  ; counts.
 19448                                  					; SS override
 19449 00002E61 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19450                                  	;mov	cx,[es:di+4]
 19451 00002E66 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19452 00002E6A E317                    	jcxz    FCBScanDone
 19453                                  	;lea	di,[di+6]
 19454 00002E6C 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19455 00002E6F 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19456                                  FCBTest:
 19457                                  	;cmp	[es:di+31h],ax
 19458 00002E73 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19459 00002E77 7505                    	jnz	short FCBNext		; no, skip it
 19460 00002E79 26C7050000              	mov	word [es:di],0
 19461                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19462                                  FCBNext:
 19463 00002E7E 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19464 00002E81 E2F0                    	loop    FCBTest
 19465                                  FCBScanDone:
 19466                                  
 19467                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19468                                  
 19469 00002E83 31DB                    	XOR     BX,BX
 19470                                  Scan:
 19471 00002E85 53                      	push    bx
 19472 00002E86 E82C37                  	call	SFFromSFN
 19473 00002E89 5B                      	pop     bx
 19474                                  	;jnc	short Scan1
 19475                                  	;retn
 19476                                  
 19477                                  	; 18/12/2022
 19478                                  	;jc	short NO_Question ; retn
 19479                                  	; 03/02/2024
 19480 00002E8A 7234                    	jc	short RET2
 19481                                  
 19482                                  ;M038
 19483                                  ; Do what the comment above says, check for busy state
 19484                                  
 19485                                  Scan1:
 19486                                  	;cmp	word [es:di],0
 19487                                  	;jz	short scan_next  ; MSDOS 3.3
 19488                                  	; MSDOS 6.0
 19489 00002E8C 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19490                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19491                                  				; Is Sft busy? ;M038
 19492 00002E90 7519                    	jnz	short scan_next
 19493                                  ;
 19494                                  ; we have a SFT that is busy. See if it is for the current process
 19495                                  ;
 19496 00002E92 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19497                                  	;cmp	[es:di+31h],ax
 19498 00002E96 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19499 00002E9A 750F                    	jnz	short scan_next
 19500 00002E9C 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19501                                  	;cmp	[es:di+2Fh],ax
 19502 00002EA0 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19503 00002EA4 7505                    	jnz	short scan_next
 19504                                  
 19505                                  ; This SFT is labelled as ours.
 19506                                  
 19507 00002EA6 26C7050000              	mov	word [es:di],0
 19508                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19509                                  scan_next:
 19510 00002EAB 43                      	inc     bx
 19511 00002EAC EBD7                    	jmp     short Scan
 19512                                  
 19513                                  ;============================================================================
 19514                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19515                                  ;============================================================================
 19516                                  ; 23/07/2018 - Retro DOS v3.0
 19517                                  ; 18/05/2019 - Retro DOS v4.0
 19518                                  
 19519                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19520                                  ;
 19521                                  ;	DOS_CLOSE
 19522                                  ;	DOS_COMMIT
 19523                                  ;	FREE_SFT
 19524                                  ;	SetSFTTimes
 19525                                  ;
 19526                                  ;	Revision history:
 19527                                  ;
 19528                                  ;	   AN000  version 4.00	Jan. 1988
 19529                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19530                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19531                                  
 19532                                  ;Installed = TRUE
 19533                                  
 19534                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19535                                  ;---------------------------------------------------------------------------
 19536                                  ;
 19537                                  ; Procedure Name : DOS_CLOSE
 19538                                  ;
 19539                                  ; Inputs:
 19540                                  ;	[THISSFT] set to the SFT for the file being used
 19541                                  ; Function:
 19542                                  ;	Close the indicated file via the SFT
 19543                                  ; Returns:
 19544                                  ;	sf_ref_count decremented otherwise
 19545                                  ;	ES:DI point to SFT
 19546                                  ;	Carry set if error
 19547                                  ;	    AX has error code
 19548                                  ; DS preserved, others destroyed
 19549                                  ;---------------------------------------------------------------------------
 19550                                  
 19551                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19552                                  
 19553                                  ; 18/05/2019 - Retro DOS v4.0
 19554                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19555                                  
 19556                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19557                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19558                                  
 19559                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19560                                  
 19561                                  DOS_CLOSE:
 19562 00002EAE C43E[9E05]              	LES	DI,[THISSFT]
 19563                                  	;mov	bx,[ES:DI+5]
 19564 00002EB2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19565                                  
 19566                                  ; Network closes are handled entirely by the net code.
 19567                                  
 19568                                  	;;test	bx,8000h
 19569                                  	;TEST	BX,sf_isnet
 19570                                  	; 17/12/2022
 19571                                  	;test	bh,80h
 19572 00002EB6 F6C780                  	test	bh,(sf_isnet>>8)
 19573 00002EB9 7406                    	JZ	short LocalClose
 19574                                  
 19575                                  	;CallInstall Net_Close,MultNET,6
 19576 00002EBB B80611                  	mov     ax,1106h
 19577 00002EBE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19578                                  			; ES:DI -> SFT
 19579                                  			; SFT DPB field -> DPB of drive containing file
 19580                                  			; Return: CF set on error, AX = DOS error code
 19581                                  			; CF clear if successful
 19582                                  RET2:		; 03/02/2024
 19583 00002EC0 C3                      	retn
 19584                                  
 19585                                  ; All closes release the sharing information.
 19586                                  ; No commit releases sharing information
 19587                                  ;
 19588                                  ; All closes decrement the ref count.
 19589                                  ; No commit decrements the ref count.
 19590                                  
 19591                                  LocalClose:
 19592 00002EC1 E82FE4                  	call	ECritDisk
 19593 00002EC4 E85801                  	CALL	SetSFTTimes
 19594 00002EC7 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19595                                  
 19596                                  ;hkn; SS is DOSDATA
 19597                                  	;Context DS
 19598 00002ECA 16                      	push	ss
 19599 00002ECB 1F                      	pop	ds
 19600                                  
 19601 00002ECC 50                      	push	ax
 19602 00002ECD 53                      	push	bx
 19603 00002ECE E8CB43                  	call	ShareEnd
 19604 00002ED1 5B                      	pop	bx
 19605 00002ED2 58                      	pop	ax
 19606                                  
 19607                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19608                                  
 19609                                  CloseEntry:
 19610 00002ED3 50                      	PUSH	AX
 19611                                  
 19612                                  ; File clean or device does not get stamped nor disk looked at.
 19613                                  
 19614                                  	;test	bx,0C0h
 19615                                  	; 17/12/2022
 19616 00002ED4 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19617                                  	;TEST	BX,devid_file_clean+devid_device
 19618 00002ED7 7403                    	JZ	short rdir
 19619                                  	; 14/11/2022
 19620 00002ED9 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19621                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19622                                  
 19623                                  ; Retrieve the directory entry for the file
 19624                                  
 19625                                  rdir:
 19626 00002EDC E8D100                  	CALL	DirFromSFT
 19627                                  	;mov	al,5
 19628 00002EDF B005                    	MOV	AL,error_access_denied
 19629 00002EE1 7303                    	JNC	short clook
 19630                                  	; 14/11/2022
 19631 00002EE3 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19632                                  	;jc	short CloseFinish ; 24/07/2019
 19633                                  clook:
 19634                                  
 19635                                  ; ES:DI points to entry
 19636                                  ; DS:SI points to SFT
 19637                                  ; ES:BX points to buffer header
 19638                                  
 19639 00002EE6 57                      	push	di
 19640 00002EE7 56                      	push	si
 19641                                  	;lea	si,[si+20h]
 19642 00002EE8 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19643                                  
 19644                                  ; ES:DI point to directory entry
 19645                                  ; DS:SI point to unpacked name
 19646                                  
 19647 00002EEB E8F7E2                  	call	XCHGP
 19648                                  
 19649                                  ; ES:DI point to unpacked name
 19650                                  ; DS:SI point to directory entry
 19651                                  
 19652 00002EEE E8570E                  	call	MetaCompare
 19653 00002EF1 E8F1E2                  	call	XCHGP
 19654 00002EF4 5E                      	pop	si
 19655 00002EF5 5F                      	pop	di
 19656 00002EF6 740C                    	JZ	short CLOSE_GO		; Name OK
 19657                                  Bye:	
 19658 00002EF8 89F7                    	MOV	DI,SI
 19659 00002EFA 1E                      	PUSH	DS
 19660 00002EFB 07                      	POP	ES			; ES:DI points to SFT
 19661 00002EFC 16                      	PUSH	SS
 19662 00002EFD 1F                      	POP	DS
 19663 00002EFE F9                      	STC
 19664                                  	;mov	al,2
 19665 00002EFF B002                    	MOV	AL,error_file_not_found
 19666 00002F01 E98E00                  	JMP	CloseFinish ; 24/07/2019
 19667                                  
 19668                                  	; 18/05/2019 - Retro DOS v4.0
 19669                                  CLOSE_GO:
 19670                                  	; 03/02/2024
 19671                                  	;mov	al,[si+4]
 19672 00002F04 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19673                                  	
 19674                                  	; MSDOS 6.0
 19675                                  	;test	word [si+2],8000h
 19676                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19677                                  	; 17/12/2022
 19678                                  	;test	byte [si+3],80h
 19679 00002F07 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19680 00002F0B 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19681                                  	; MSDOS 3.3 & MSDOS 6.0
 19682                                  	;mov	ch,[es:di+0Bh]
 19683 00002F0D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19684                                  
 19685                                  	; 03/02/2024
 19686                                  	;;mov	al,[si+4]
 19687                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19688                                  
 19689                                  ;hkn; SS override
 19690 00002F11 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19691                                  	; MSDOS 3.3
 19692                                  	;;call	MatchAttributes
 19693                                  	;;JNZ	short Bye		; attributes do not match
 19694                                  	; 18/05/2019
 19695 00002F15 EB04                    	JMP	SHORT setattr		;FT.
 19696                                  nofcb:
 19697                                  	; 03/02/2024
 19698                                  	; MSDOS 6.0
 19699                                  	;;mov	al,[si+4]
 19700                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19701                                  
 19702 00002F17 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19703                                  setattr:
 19704                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19705                                  	;or	byte [es:di+0Bh],20h
 19706 00002F1B 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19707                                  	; MSDOS 6.0
 19708                                  	;mov	ax,[es:di+1Ah]
 19709 00002F20 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19710                                  					;F.O. save old first cluster
 19711                                  ;hkn; SS override
 19712 00002F24 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19713                                  
 19714                                  ; 03/02/2024
 19715                                  %if 0
 19716                                  	;mov	ax,[si+0Bh]
 19717                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19718                                  	;mov	[es:di+1Ah],ax
 19719                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19720                                  	;mov	ax,[si+11h]
 19721                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19722                                  	;mov	[es:di+1Ch],ax
 19723                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19724                                  	;mov	ax,[si+13h]
 19725                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19726                                  	;mov	[es:di+1Eh],ax
 19727                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19728                                  	;mov	ax,[si+0Fh]
 19729                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19730                                  	;mov	[es:di+18h],ax
 19731                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19732                                  	;mov	ax,[si+0Dh]
 19733                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19734                                  	;mov	[es:di+16h],ax
 19735                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19736                                  %else
 19737                                  	; 03/02/2024 - Retro DOS v4.2
 19738 00002F28 56                      	push	si
 19739 00002F29 83C60B                  	add	si,0Bh
 19740 00002F2C AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19741                                  	;mov	[es:di+1Ah],ax
 19742 00002F2D 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19743 00002F31 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19744 00002F32 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19745 00002F36 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19746 00002F37 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19747 00002F3B AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19748 00002F3C 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19749 00002F40 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19750 00002F41 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19751 00002F45 5E                      	pop	si
 19752                                  %endif
 19753                                  
 19754                                  	; MSDOS 6.0
 19755                                  ;; File Tagging
 19756 00002F46 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19757                                  				  ;LB. if already dirty		    ;AN000;
 19758 00002F4B 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19759                                  	; 02/06/2019
 19760 00002F4D E82E2B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19762                                  	;or	byte [es:bx+5],40h
 19763 00002F50 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19764                                  yesdirty4:
 19765 00002F55 1E                      	push	ds
 19766 00002F56 56                      	push	si
 19767                                  	; MSDOS 6.0
 19768                                  	;mov	cx,[si+0Bh]
 19769                                  	; 07/12/2022
 19770 00002F57 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19771                                  ;hkn; SS override
 19772 00002F5A 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19773                                  	; MSDOS 3.3 
 19774                                  	;push	ss
 19775                                  	;pop	ds
 19776                                  	;MOV	AL,[THISDRV]
 19777                                  ;;; 10/1/86  update fastopen cache
 19778                                  	; MSDOS 3.3 & MSDOS 6.0
 19779 00002F5E 52                      	PUSH	DX
 19780 00002F5F B400                    	MOV	AH,0			; dir entry update
 19781 00002F61 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19782                                  	; MSDOS 6.0
 19783 00002F63 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19784 00002F65 750D                    	JNZ	short do_update2	;AN005; no, do update
 19785 00002F67 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19786                                  	;mov	di,[si+1Bh]
 19787 00002F69 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19788                                  	;mov	cx,[si+1Dh]
 19789 00002F6C 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19790                                  	;mov	dh,[si+1Fh]
 19791 00002F6F 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19792 00002F72 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19793                                  do_update2:				;AN011;F.O.
 19794                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19795                                  	; 
 19796 00002F74 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19797 00002F79 7407                    	JZ	short do_update		;AN011;F.O. yes
 19798 00002F7B B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19799 00002F7D 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19800                                  do_update:				;AN005;
 19801                                  ;hkn; SS is DOSDATA
 19802                                  	;Context DS
 19803 00002F82 16                      	push	ss
 19804 00002F83 1F                      	pop	ds
 19805                                  	; MSDOS 3.3 & MSDOS 6.0
 19806 00002F84 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19807 00002F87 5A                      	POP	DX
 19808                                  
 19809                                  ;;; 10/1/86  update fastopen cache
 19810 00002F88 E8EE29                  	call	FLUSHBUF		; flush all relevant buffers
 19811 00002F8B 5F                      	pop	di
 19812 00002F8C 07                      	pop	es
 19813                                  	;mov	al,5
 19814 00002F8D B005                    	MOV	AL,error_access_denied
 19815 00002F8F 7201                    	JC	short CloseFinish
 19816                                  FREE_SFT_OK:
 19817 00002F91 F8                      	CLC				; signal no error.
 19818                                  CloseFinish:
 19819                                  
 19820                                  ; Indicate to the device that the SFT is being closed.
 19821                                  
 19822                                  ;;;; 7/21/86
 19823 00002F92 9C                      	PUSHF				; save flag from DirFromSFT
 19824 00002F93 E87A15                  	call	DEV_CLOSE_SFT
 19825 00002F96 9D                      	POPF
 19826                                  ;;;; 7/21/86
 19827                                  ;
 19828                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19829                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19830                                  ; going to be moving from busy to free.
 19831                                  ;
 19832 00002F97 59                      	POP	CX			; get old ref count
 19833 00002F98 9C                      	PUSHF
 19834                                  	; 03/02/2024
 19835                                  	;DEC	CX			; if cx != 1
 19836                                  	;JNZ	short NoFree		; then do NOT free SFT
 19837 00002F99 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19838                                  
 19839 00002F9B 26890D                  	mov	[es:di],cx ; 0
 19840                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19841                                  NoFree:
 19842 00002F9E E86DE3                  	call	LCritDisk
 19843 00002FA1 9D                      	POPF
 19844 00002FA2 C3                      	retn
 19845                                  
 19846                                  ;---------------------------------------------------------------------------
 19847                                  ;
 19848                                  ; Procedure Name : FREE_SFT
 19849                                  ;
 19850                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19851                                  ; Flags preserved. Return old ref count in AX
 19852                                  ;
 19853                                  ; Note that busy is indicated by the SFT ref count being -1.
 19854                                  ;
 19855                                  ;---------------------------------------------------------------------------
 19856                                  
 19857                                  FREE_SFT:
 19858 00002FA3 9C                      	PUSHF		; Save carry state
 19859 00002FA4 268B05                  	mov	ax,[es:di]
 19860                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19861 00002FA7 48                      	DEC	AX
 19862 00002FA8 7501                    	JNZ	short SetCount
 19863 00002FAA 48                      	DEC	AX
 19864                                  SetCount:
 19865 00002FAB 268705                  	xchg	ax,[es:di]
 19866                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19867 00002FAE 9D                      	POPF
 19868 00002FAF C3                      	retn
 19869                                  
 19870                                  	; 18/05/2019 - Retro DOS v4.0
 19871                                  
 19872                                  ;----------------------------------------------------------------------------
 19873                                  ;
 19874                                  ; Procedure Name : DirFromSFT
 19875                                  ;
 19876                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19877                                  ;
 19878                                  ;   Inputs:	ES:DI point to SFT
 19879                                  ;		DS = DOSDATA
 19880                                  ;   Outputs:
 19881                                  ;		EXTERR_LOCUS = errLOC_Disk
 19882                                  ;		CurBuf points to buffer
 19883                                  ;		Carry Clear -> operation OK
 19884                                  ;		    ES:DI point to entry
 19885                                  ;		    ES:BX point to buffer
 19886                                  ;		    DS:SI point to SFT
 19887                                  ;		Carry SET   -> operation failed
 19888                                  ;		    registers trashified
 19889                                  ;   Registers modified: ALL
 19890                                  ;----------------------------------------------------------------------------
 19891                                  
 19892                                  DirFromSFT:
 19893                                  	;mov	byte [EXTERR_LOCUS],2
 19894 00002FB0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19895 00002FB5 06                      	push	es
 19896 00002FB6 57                      	push	di
 19897                                  	; MSDOS 3.3
 19898                                  	;;mov	dx,[es:di+1Dh]
 19899                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19900                                  	; MSDOS 6.0
 19901                                  	;mov	dx,[es:[di+1Dh]
 19902 00002FB7 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19903 00002FBB 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19904                                  	; 04/02/2024
 19905 00002FBF 52                      	push	dx
 19906                                  	;mov	dx,[es:di+1Bh]
 19907 00002FC0 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19908                                  	; 04/02/2024
 19909                                  	; 19/05/2019
 19910                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19911                                  	; MSDOS 3.3 & MSDOS 6.0
 19912 00002FC4 52                      	PUSH	DX
 19913 00002FC5 E82826                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19914                                  					; [THISDPB] set
 19915 00002FC8 5A                      	POP	DX
 19916 00002FC9 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19917 00002FCD 721E                    	JC	short PopDone
 19918                                  	; 22/09/2023
 19919                                  	;XOR	AL,AL	; *		; Pre read
 19920                                  	;;mov	byte [ALLOWED],18h
 19921                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19922                                  	;call	GETBUFFR
 19923                                  	; 22/09/2023
 19924 00002FCF E8A328                  	call	GETBUFFER ; * 		; Pre read
 19925 00002FD2 7219                    	JC	short PopDone
 19926 00002FD4 5E                      	pop	si
 19927 00002FD5 1F                      	pop	ds			; Get back SFT pointer
 19928                                  
 19929                                  ;hkn; SS override
 19930 00002FD6 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19931                                  	;or	byte [es:di+5],4
 19932 00002FDB 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19933 00002FE0 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19934                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19935                                  	;lea	di,[di+20] ; MSDOS 6.0
 19936 00002FE2 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19937                                  	;mov	al,32
 19938 00002FE5 B020                    	MOV	AL,dir_entry.size
 19939                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19940 00002FE7 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19941 00002FEA 01C7                    	ADD	DI,AX			; Point at the entry
 19942 00002FEC C3                      	retn				; carry is clear
 19943                                  PopDone:
 19944 00002FED 5F                      	pop	di
 19945 00002FEE 07                      	pop	es
 19946                                  PopDone_retn:
 19947 00002FEF C3                      	retn
 19948                                  
 19949                                  ;----------------------------------------------------------------------------
 19950                                  ;
 19951                                  ;**	DOS_Commit - UPdate Directory Entries
 19952                                  ;
 19953                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19954                                  ;		(DS) = DOSGROUP
 19955                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19956                                  ;	USES	all but DS
 19957                                  ;
 19958                                  ;----------------------------------------------------------------------------
 19959                                  
 19960                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19961                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19962                                  
 19963                                  DOS_COMMIT:
 19964                                  	;hkn; called from srvcall. DS already set up.
 19965 00002FF0 C43E[9E05]              	LES	DI,[THISSFT]
 19966                                  	;mov	bx,[es:di+5]
 19967 00002FF4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19968                                  	;test	bx,0C0h
 19969                                  	; 17/12/2022
 19970 00002FF8 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19971                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19972 00002FFB 75F2                    	jnz	short PopDone_retn
 19973                                  	;test	bx,8000h
 19974                                  	; 17/12/2022
 19975                                  	;test	bh,80h
 19976 00002FFD F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19977                                  	;TEST	BX,sf_isnet ; 8000h
 19978 00003000 7406                    	JZ	short LOCAL_COMMIT
 19979                                  
 19980                                  ;IF NOT Installed
 19981                                  ;	transfer NET_COMMIT
 19982                                  ;ELSE
 19983                                  	;mov	ax,1107h
 19984 00003002 B80711                  	MOV	AX,(MultNET<<8)|7
 19985 00003005 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19986                                  			; ES:DI -> SFT
 19987                                  			; SFT DPB field -> DPB of drive containing file
 19988                                  			; Return: CF set on error, AX = DOS error code
 19989                                  			; CF clear if successful
 19990                                  localcommit_retn: ; 18/12/2022	
 19991 00003007 C3                      	retn
 19992                                  ;ENDIF
 19993                                  
 19994                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19995                                  ; There are three ways we can do this. One is to enter a critical section to
 19996                                  ; protect a potential free. The second is to increment the ref count to mask
 19997                                  ; the close decrementing.
 19998                                  ;
 19999                                  ; The proper way is to let the caller's of close decide if a decrement should
 20000                                  ; be done. We do this by providing another entry into close after the
 20001                                  ; decrement and after the share information release.
 20002                                  
 20003                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20004                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20005                                  
 20006                                  LOCAL_COMMIT:
 20007 00003008 E8E8E2                  	call	ECritDisk
 20008                                  	; MSDOS 6.0
 20009 0000300B E8E5E2                  	call	ECritDisk	;PTM.
 20010 0000300E E80E00                  	call	SetSFTTimes
 20011 00003011 B8FFFF                  	MOV	AX,-1
 20012 00003014 E8BCFE                  	call	CloseEntry
 20013                                  	; MSDOS 6.0
 20014 00003017 9C                      	PUSHF			;PTM.				;AN000;
 20015 00003018 E8ED14                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20016 0000301B 9D                      	POPF			;PTM.				;AN000;
 20017                                  	;call	LCritDisk	;PTM.				;AN000;
 20018                                  	; 18/12/2022
 20019 0000301C E9EFE2                  	jmp	LCritDisk
 20020                                  ;localcommit_retn:
 20021                                  ;	retn
 20022                                  
 20023                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20024                                  ;----------------------------------------------------------------------------
 20025                                  ;
 20026                                  ; Procedure Name : SetSFTTimes
 20027                                  ;
 20028                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20029                                  ;   Reflect these times in other SFT's for the same file.
 20030                                  ;
 20031                                  ;   Inputs:	ES:DI point to SFT
 20032                                  ;		BX = sf_flags set apprpriately
 20033                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20034                                  ;   Registers modified: All except ES:DI, BX, AX
 20035                                  ;
 20036                                  ;----------------------------------------------------------------------------
 20037                                  
 20038                                  	; 04/02/2024 - Retro DOS v4.2
 20039                                  
 20040                                  SetSFTTimes:
 20041                                  
 20042                                  ; 04/02/2024
 20043                                  %if 0
 20044                                  ;	File clean or device does not get stamped nor disk looked at.
 20045                                  	
 20046                                  	;test	bx,0C0h
 20047                                  	; 17/12/2022
 20048                                  	test	bl,devid_file_clean+devid_device
 20049                                  	;TEST	BX,devid_file_clean+devid_device
 20050                                  	;retnz				; clean or device => no timestamp
 20051                                  	jnz	short localcommit_retn
 20052                                  
 20053                                  ;	file and dirty. See if date is good
 20054                                  
 20055                                  	;test	bx,4000h
 20056                                  	; 17/12/2022
 20057                                  	;test	bh,40h
 20058                                  	test	bh,(sf_close_nodate>>8)
 20059                                  	;TEST	BX,sf_close_nodate
 20060                                  	;retnz				; nodate => no timestamp
 20061                                  	jnz	short localcommit_retn
 20062                                  %else
 20063                                  	; 04/02/2024
 20064                                  	; (PCDOS 7.1 IBMDOS.COM)
 20065                                  	;test	bx,40C0h
 20066 0000301F F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20067 00003023 75E2                    	jnz	short localcommit_retn
 20068                                  %endif
 20069                                  
 20070 00003025 50                      	push	ax
 20071 00003026 53                      	push	bx
 20072 00003027 E8BCDA                  	call	DATE16			; Date/Time to AX/DX
 20073                                  	;mov	[es:di+0Fh],ax
 20074 0000302A 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20075                                  	;mov	[es:di+0Dh],dx
 20076 0000302E 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20077 00003032 31C0                    	XOR	AX,AX
 20078                                  ;if installed
 20079                                  	;call	JShare + 14 * 4
 20080 00003034 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20081                                  ;else
 20082                                  ;	call	ShSU
 20083                                  ;endif
 20084 00003038 5B                      	pop	bx
 20085 00003039 58                      	pop	ax
 20086 0000303A C3                      	retn
 20087                                  
 20088                                  ;============================================================================
 20089                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20090                                  ;============================================================================
 20091                                  ; 23/07/2018 - Retro DOS v3.0
 20092                                  ; 18/05/2019 - Retro DOS v4.0
 20093                                  
 20094                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20095                                  
 20096                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20097                                  ;NAME  DIRCALL
 20098                                  
 20099                                  ;**	Low level directory manipulation routines for making removing and
 20100                                  ;	  verifying local or NET directories
 20101                                  ;
 20102                                  ;	DOS_MKDIR
 20103                                  ;	DOS_CHDIR
 20104                                  ;	DOS_RMDIR
 20105                                  ;
 20106                                  ;	Modification history:
 20107                                  ;
 20108                                  ;		Created: ARR 30 March 1983
 20109                                  
 20110                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20111                                  ;---------------------------------------------------------------------------
 20112                                  ;
 20113                                  ; Procedure Name : DOS_MkDir
 20114                                  ;
 20115                                  ; Inputs:
 20116                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20117                                  ;		terminated)
 20118                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20119                                  ;		( = -1 if current dir not involved, else
 20120                                  ;		 Points to first char after last "/" of current dir part)
 20121                                  ;	[THISCDS] Points to CDS being used
 20122                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20123                                  ; Function:
 20124                                  ;	Make a new directory
 20125                                  ; Returns:
 20126                                  ;	Carry Clear
 20127                                  ;		No error
 20128                                  ;	Carry Set
 20129                                  ;	    AX is error code
 20130                                  ;		error_path_not_found
 20131                                  ;			Bad path (not in curr dir part if present)
 20132                                  ;		error_bad_curr_dir
 20133                                  ;			Bad path in current directory part of path
 20134                                  ;		error_access_denied
 20135                                  ;			Already exists, device name
 20136                                  ; DS preserved, Others destroyed
 20137                                  ;---------------------------------------------------------------------------
 20138                                  
 20139                                  ;hkn; called from path.asm. DS already set up.
 20140                                  
 20141                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20142                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20143                                  
 20144                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20145                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20146                                  
 20147                                  DOS_MKDIR:
 20148 0000303B E8F3E1                  	call	TestNet
 20149 0000303E 7313                    	JNC	short LOCAL_MKDIR
 20150                                  
 20151                                  ;IF NOT Installed
 20152                                  ;	transfer NET_MKDIR
 20153                                  ;ELSE
 20154                                  	;mov	ax,1103h
 20155 00003040 B80311                  	MOV	AX,(MultNET<<8)|3
 20156 00003043 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20157                                  			; SS = DOS CS
 20158                                  			; SDA first filename pointer -> fully-qualified directory name
 20159                                  			; SDA CDS pointer -> current directory
 20160                                  			; Return: CF set on error, AX = DOS error code
 20161                                  			; CF clear if successful
 20162 00003045 C3                      	retn
 20163                                  ;ENDIF
 20164                                  
 20165                                  NODEACCERRJ:
 20166                                  	;mov	ax,5
 20167 00003046 B80500                  	MOV	AX,error_access_denied
 20168                                  _BadRet:
 20169 00003049 F9                      	STC
 20170                                  	;call	LCritDisk
 20171                                  	;retn
 20172                                  	; 18/12/2022
 20173 0000304A E9C1E2                  	jmp	LCritDisk
 20174                                  
 20175                                  PATHNFJ:
 20176 0000304D E8BEE2                  	call	LCritDisk
 20177 00003050 E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20178                                  
 20179                                  LOCAL_MKDIR:
 20180 00003053 E89DE2                  	call	ECritDisk
 20181                                  
 20182                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20183                                  
 20184 00003056 8C16[A005]              	MOV	[THISSFT+2],SS
 20185                                  
 20186                                  ;hkn; DOSDATA
 20187 0000305A C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20188                                  
 20189                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20190                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20191                                  
 20192                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20193 00003060 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20194                                  				; make sure SHARER won't complain.
 20195                                  	;mov	al,10h
 20196 00003066 B010                    	MOV	AL,attr_directory
 20197 00003068 E84A18                  	call	MakeNode
 20198 0000306B 72E0                    	JC	short PATHNFJ
 20199 0000306D 83F803                  	CMP	AX,3
 20200 00003070 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20201 00003072 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20202 00003076 C53E[E205]              	LDS	DI,[CURBUF]
 20203 0000307A 29FE                    	SUB	SI,DI
 20204 0000307C 56                      	PUSH	SI		; Pointer to dir_first
 20205                                  
 20206                                  ; 04/02/2024
 20207                                  %if 0
 20208                                  	; MSDOS 6.0
 20209                                  	;push	word [DI+8]
 20210                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20211                                  	; MSDOS 3.3 & MSDOS 6.0
 20212                                  	;push	word [di+6]
 20213                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20214                                  %else
 20215                                  	; 04/02/2024
 20216                                  	; (PCDOS 7.1 IBMDOS.COM)
 20217 0000307D C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20218 00003080 1E                      	push	ds
 20219 00003081 50                      	push	ax
 20220                                  %endif
 20221                                  
 20222 00003082 16                      	push	ss
 20223 00003083 1F                      	pop	ds
 20224                                  
 20225                                  	; 04/02/2024
 20226                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20227 00003084 31C0                    	XOR	AX,AX
 20228                                  	;MOV	[DIRSTART],AX	; Null directory
 20229 00003086 8706[C205]              	xchg	ax,[DIRSTART]
 20230 0000308A 50                      	push	ax
 20231                                  
 20232 0000308B E86317                  	call	NEWDIR
 20233 0000308E 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20234 00003090 E81C0D                  	call	GETENT		; First entry
 20235 00003093 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20236 00003095 C43E[E205]              	LES	DI,[CURBUF]
 20237                                  
 20238                                  	; MSDOS 6.0
 20239 00003099 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20240                                  				 ;LB. if already dirty		    ;AN000;
 20241 0000309E 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20242 000030A0 E8DB29                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20243                                  	
 20244                                  	; MSDOS 3.3 & MSDOS 6.0
 20245                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20246 000030A3 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20247                                  yesdirty5:
 20248                                  	;;add	di,16 ; MSDOS 3.3
 20249                                  	;add	di,20 ; MSDOS 6.0
 20250 000030A8 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20251 000030AB B82E20                  	MOV	AX,202EH	; ". "
 20252 000030AE 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20253 000030B2 E8DC17                  	call	SETDOTENT
 20254 000030B5 B82E2E                  	MOV	AX,2E2EH	; ".."
 20255 000030B8 5A                      	POP	DX		; Parent
 20256 000030B9 E8D517                  	call	SETDOTENT
 20257 000030BC C42E[8A05]              	LES	BP,[THISDPB]
 20258                                  	; 22/09/2023
 20259                                  	;;mov	byte [ALLOWED],18h
 20260                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20261 000030C0 5A                      	POP	DX		; Entry sector
 20262                                  	; MSDOS 6.0
 20263 000030C1 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20264                                  
 20265                                  	;XOR	AL,AL ; *	; Pre read
 20266                                  	;call	GETBUFFR
 20267                                  	; 22/09/2023
 20268 000030C5 E8AD27                  	call	GETBUFFER ; *	; Pre read
 20269 000030C8 725B                    	JC	short NODEEXISTSP
 20270 000030CA 8B16[C205]              	MOV	DX,[DIRSTART]
 20271 000030CE C53E[E205]              	LDS	DI,[CURBUF]
 20272                                  	;or	byte [di+5],4
 20273 000030D2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20274 000030D6 5E                      	POP	SI		; dir_first pointer
 20275 000030D7 01FE                    	ADD	SI,DI
 20276 000030D9 8914                    	MOV	[SI],DX
 20277 000030DB 31D2                    	XOR	DX,DX
 20278 000030DD 895402                  	MOV	[SI+2],DX	; Zero size
 20279 000030E0 895404                  	MOV	[SI+4],DX
 20280                                  DIRUP:
 20281                                  	; MSDOS 6.0
 20282 000030E3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20283                                  	;			 ;LB. if already dirty 		   ;AN000;
 20284 000030E7 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20285 000030E9 E89229                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20286                                  	
 20287                                  	; MSDOS 3.3 & MSDOS 6.0
 20288                                  	;or	byte [di+5],40h
 20289 000030EC 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20290                                  yesdirty6:
 20291 000030F0 16                      	push	ss
 20292 000030F1 1F                      	pop	ds
 20293 000030F2 268A4600                	mov	al,[es:bp]
 20294                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20295 000030F6 E88028                  	call	FLUSHBUF
 20296                                  	;mov	ax,5
 20297 000030F9 B80500                  	MOV	AX,error_access_denied
 20298                                  	;call	LCritDisk
 20299                                  	;retn
 20300                                  	; 18/12/2022
 20301 000030FC E90FE2                  	jmp	LCritDisk
 20302                                  
 20303                                  NODEEXISTSPOPDEL:
 20304 000030FF 5A                      	POP	DX		; Parent
 20305 00003100 5A                      	POP	DX		; Entry sector
 20306                                  	; MSDOS 6.0 
 20307 00003101 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20308 00003105 C42E[8A05]              	LES	BP,[THISDPB]
 20309                                  	; 22/09/2023
 20310                                  	;;mov	byte [ALLOWED],18h
 20311                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20312                                  	;XOR	AL,AL ; *	; Pre read
 20313                                  	;call	GETBUFFR
 20314                                  	; 22/09/2023
 20315 00003109 E86927                  	call	GETBUFFER ; *	; Pre read
 20316 0000310C 7217                    	JC	short NODEEXISTSP
 20317 0000310E C53E[E205]              	LDS	DI,[CURBUF]
 20318                                  	;or	byte [di+5],4
 20319 00003112 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20320 00003116 5E                      	POP	SI		; dir_first pointer
 20321 00003117 01FE                    	ADD	SI,DI
 20322                                  	;sub	si,1Ah ; 26
 20323 00003119 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20324 0000311C C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20325 0000311F E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20326                                  NODEEXISTS:
 20327 00003122 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20328                                  
 20329                                  NODEEXISTSP:
 20330 00003125 5E                      	POP	SI		; Clean stack
 20331 00003126 EBFA                    	JMP	short NODEEXISTS
 20332                                  
 20333                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20334                                  
 20335                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20336                                  ;----------------------------------------------------------------------------
 20337                                  ;
 20338                                  ; Procedure Name : DOS_ChDir
 20339                                  ;
 20340                                  ; Inputs:
 20341                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20342                                  ;		terminated)
 20343                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20344                                  ;		( = -1 if current dir not involved, else
 20345                                  ;		 Points to first char after last "/" of current dir part)
 20346                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20347                                  ; Function:
 20348                                  ;	Validate the path for potential new current directory
 20349                                  ; Returns:
 20350                                  ;	NOTE:
 20351                                  ;	    [SATTRIB] is modified by this call
 20352                                  ;	Carry Clear
 20353                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20354                                  ;		Caller must NOT set ID fields on a NET CDS.
 20355                                  ;	Carry Set
 20356                                  ;	    AX is error code
 20357                                  ;		error_path_not_found
 20358                                  ;			Bad path
 20359                                  ;		error_access_denied
 20360                                  ;			device or file name
 20361                                  ; DS preserved, Others destroyed
 20362                                  ;----------------------------------------------------------------------------
 20363                                  
 20364                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20365                                  
 20366                                  ; 18/05/2019 - Retro DOS v4.0
 20367                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20368                                  
 20369                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20370                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20371                                  
 20372                                  DOS_CHDIR:
 20373 00003128 E806E1                  	call	TestNet
 20374 0000312B 7306                    	JNC	short LOCAL_CHDIR
 20375                                  
 20376                                  ;IF NOT Installed
 20377                                  ;	transfer NET_CHDIR
 20378                                  ;ELSE
 20379                                  	;mov	ax,1105h
 20380 0000312D B80511                  	MOV	AX,(MultNET<<8)|5
 20381 00003130 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20382                                  			; SS = DOS CS
 20383                                  			; SDA first filename pointer -> fully-qualified directory name
 20384                                  			; SDA CDS pointer -> current directory
 20385                                  			; Return: CF set on error, AX = DOS error code
 20386                                  			; CF clear if successful
 20387 00003132 C3                      	retn
 20388                                  ;ENDIF
 20389                                  
 20390                                  LOCAL_CHDIR:
 20391 00003133 E8BDE1                  	call	ECritDisk
 20392                                  	; MSDOS 6.0
 20393                                  	;;test	word [es:di+43h],2000h
 20394                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20395                                  	; 17/12/2022
 20396                                  	;test	byte [es:di+44h],20h
 20397 00003136 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20398 0000313B 7406                    	JZ	short nojoin		   ;PTM.
 20399                                  	;mov	word [es:di+49h], 0FFFFh
 20400 0000313D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20401                                  nojoin:
 20402                                  	; MSDOS 3.3 & MSDOS 6.0
 20403 00003143 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20404                                  	;mov	byte [SATTRIB],16h
 20405 00003148 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20406                                  				; Dir calls can find these
 20407                                  ; DOS 3.3  6/24/86 FastOpen
 20408 0000314D 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20409 00003152 E8E60C                  	call	GETPATH
 20410                                  
 20411                                  	; 04/02/2024
 20412                                  	;PUSHF						;AN000;
 20413 00003155 9F                      	lahf						
 20414 00003156 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20415                                  	;POPF						;AN000;
 20416 0000315B 9E                      	sahf
 20417                                  
 20418                                  ; DOS 3.3  6/24/86 FastOpen
 20419                                  
 20420                                  	; MSDOS 3.3
 20421                                  	;mov	byte [FastOpenFlg],0
 20422                                  	
 20423                                  	;mov	ax,3
 20424 0000315C B80300                  	MOV	AX,error_path_not_found
 20425 0000315F 7207                    	JC	short ChDirDone
 20426 00003161 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20427 00003163 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20428 00003167 F8                      	CLC
 20429                                  ChDirDone:
 20430                                  	;call	LCritDisk
 20431                                  	;retn
 20432                                  	; 18/12/2022
 20433 00003168 E9A3E1                  	jmp	LCritDisk
 20434                                  
 20435                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20436                                  ;----------------------------------------------------------------------------
 20437                                  ;
 20438                                  ; Procedure Name : DOS_RmDir
 20439                                  ;
 20440                                  ; Inputs:
 20441                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20442                                  ;		terminated)
 20443                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20444                                  ;		( = -1 if current dir not involved, else
 20445                                  ;		 Points to first char after last "/" of current dir part)
 20446                                  ;	[THISCDS] Points to CDS being used
 20447                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20448                                  ; Function:
 20449                                  ;	Remove a directory
 20450                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20451                                  ; Returns:
 20452                                  ;	NOTE:
 20453                                  ;	    [SATTRIB] is modified by this call
 20454                                  ;	Carry Clear
 20455                                  ;		No error
 20456                                  ;	Carry Set
 20457                                  ;	    AX is error code
 20458                                  ;		error_path_not_found
 20459                                  ;			Bad path (not in curr dir part if present)
 20460                                  ;		error_bad_curr_dir
 20461                                  ;			Bad path in current directory part of path
 20462                                  ;		error_access_denied
 20463                                  ;			device or file name, root directory
 20464                                  ;			Bad directory ('.' '..' messed up)
 20465                                  ; DS preserved, Others destroyed
 20466                                  ;----------------------------------------------------------------------------
 20467                                  
 20468                                  ;hkn; called from path.asm. DS already set up.
 20469                                  
 20470                                  ; 18/05/2019 - Retro DOS v4.0
 20471                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20472                                  
 20473                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20474                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20475                                  
 20476                                  DOS_RMDIR:
 20477 0000316B E8C3E0                  	call	TestNet
 20478 0000316E 7306                    	JNC	short LOCAL_RMDIR
 20479                                  
 20480                                  ;IF NOT Installed
 20481                                  ;	transfer NET_RMDIR
 20482                                  ;ELSE
 20483                                  	;mov	ax,1101h
 20484 00003170 B80111                  	MOV	AX,(MultNET<<8)|1
 20485 00003173 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20486                                  			; SS = DOS CS
 20487                                  			; SDA first filename pointer -> fully-qualified directory name
 20488                                  			; SDA CDS pointer -> current directory
 20489                                  			; Return: CF set on error, AX = DOS error code
 20490                                  			; CF clear if successful
 20491 00003175 C3                      	retn
 20492                                  ;ENDIF
 20493                                  
 20494                                  LOCAL_RMDIR:
 20495 00003176 E87AE1                  	call	ECritDisk
 20496 00003179 C606[4C03]00            	MOV	byte [NoSetDir],0
 20497                                  	;mov	byte [SATTRIB],16h
 20498 0000317E C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20499                                  					; Dir calls can find these
 20500 00003183 E8B50C                  	call	GETPATH
 20501 00003186 720C                    	JC	short NOPATH		; Path not found
 20502 00003188 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20503 0000318A 8B3E[C205]              	MOV	DI,[DIRSTART]
 20504 0000318E 09FF                    	OR	DI,DI			; Root ?
 20505 00003190 750E                    	JNZ	short rmdir_get_buf	; No
 20506 00003192 EB09                    	JMP	SHORT NOTDIRPATH
 20507                                  
 20508                                  NOPATH:
 20509                                  	;mov	ax,3
 20510 00003194 B80300                  	MOV	AX,error_path_not_found
 20511 00003197 E9AFFE                  	JMP	_BadRet
 20512                                  
 20513                                  NOTDIRPATHPOP:
 20514 0000319A 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20515 0000319B 58                      	POP	AX
 20516                                  NOTDIRPATHPOP2:
 20517 0000319C 58                      	POP	AX
 20518                                  NOTDIRPATH:
 20519 0000319D E9A6FE                  	JMP	NODEACCERRJ
 20520                                  
 20521                                  rmdir_get_buf:
 20522 000031A0 C53E[E205]              	LDS	DI,[CURBUF]
 20523 000031A4 29FB                    	SUB	BX,DI		; Compute true offset
 20524 000031A6 53                      	PUSH	BX		; Save entry pointer
 20525                                  	
 20526                                  	; MSDOS 6.0
 20527                                  	;push	word [di+8]
 20528 000031A7 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20529                                  	
 20530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20531                                  	;push	word [di+6]
 20532 000031AA FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20533                                  
 20534                                  ;hkn; SS is DOSDATA
 20535                                  	;context DS
 20536 000031AD 16                      	push	ss
 20537 000031AE 1F                      	pop	ds
 20538                                  	;context ES
 20539 000031AF 16                      	push	ss
 20540 000031B0 07                      	pop	es
 20541                                  
 20542                                  ;hkn; NAME1 is in DOSDATA
 20543 000031B1 BF[4B05]                	MOV	DI,NAME1
 20544 000031B4 B03F                    	MOV	AL,'?'
 20545 000031B6 B90B00                  	MOV	CX,11
 20546 000031B9 F3AA                    	REP	STOSB
 20547 000031BB 30C0                    	XOR	AL,AL
 20548 000031BD AA                      	STOSB				; Nul terminate it
 20549 000031BE E80D0F                  	call	STARTSRCH		; Set search
 20550 000031C1 E8E80B                  	call	GETENTRY		; Get start of directory
 20551 000031C4 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20552 000031C6 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20553 000031CA 89DE                    	MOV	SI,BX
 20554 000031CC AD                      	LODSW
 20555                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20556 000031CD 3D2E20                  	cmp	ax,202Eh ; ". "
 20557 000031D0 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20558                                  	;add	si,30
 20559 000031D2 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20560 000031D5 AD                      	LODSW
 20561                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20562                                  	;cmp	ax, '..'
 20563 000031D6 3D2E2E                  	cmp	ax,2E2Eh
 20564 000031D9 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20565                                  
 20566                                  ;hkn; SS is DOSDATA
 20567                                  	;context DS
 20568 000031DB 16                      	push	ss
 20569 000031DC 1F                      	pop	ds
 20570 000031DD C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20571 000031E3 E8C60B                  	call	GETENTRY		; Get next entry
 20572 000031E6 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20573                                  	;mov	byte [ATTRIB],16h
 20574 000031E8 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20575 000031ED E8C40A                  	call	SRCH			; Do a search
 20576 000031F0 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20577 000031F2 803E[4A03]00            	CMP	byte [FAILERR],0
 20578 000031F7 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20579 000031F9 C42E[8A05]              	LES	BP,[THISDPB]
 20580 000031FD 8B1E[C205]              	MOV	BX,[DIRSTART]
 20581 00003201 E8E81B                  	call	RELEASE 		; Release data in sub dir
 20582 00003204 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20583 00003206 5A                      	POP	DX			; Sector # of entry
 20584 00003207 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20585                                  	; 22/09/2023
 20586                                  	;;mov	byte [ALLOWED],18h
 20587                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20588                                  	;XOR	AL,AL ; *		; Pre read
 20589                                  	;call	GETBUFFR		; Get sector back
 20590 0000320B E86726                  	call	GETBUFFER ; *		; Pre Read
 20591 0000320E 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20592 00003210 C53E[E205]              	LDS	DI,[CURBUF]
 20593                                  	;or	byte [di+5],4
 20594 00003214 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20595 00003218 5B                      	POP	BX			; Pointer to start of entry
 20596 00003219 01FB                    	ADD	BX,DI			; Corrected
 20597 0000321B C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20598                                  
 20599                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20600 0000321E 1E                      	PUSH	DS
 20601                                  
 20602                                  ;hkn; SS is DOSDATA
 20603                                  	;context DS
 20604 0000321F 16                      	push	ss
 20605 00003220 1F                      	pop	ds
 20606                                  
 20607                                  	; MSDOS 6.0
 20608 00003221 E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20609                                  
 20610                                  ;	; MSDOS 3.3
 20611                                  ;_FastOpen_Delete:
 20612                                  ;	push	ax
 20613                                  ;	mov	si,[WFP_START]
 20614                                  ;	mov	bx,FastTable
 20615                                  ;	;mov	al,3  ; FONC_delete
 20616                                  ;	mov	al,FONC_delete
 20617                                  ;	call	far [BX+2]  ; FastTable+2
 20618                                  ;	pop	ax
 20619                                  
 20620 00003224 1F                      	POP	DS
 20621                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20622                                  
 20623 00003225 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20624                                  
 20625                                  ;============================================================================
 20626                                  ; DISK.ASM, MSDOS 6.0, 1991
 20627                                  ;============================================================================
 20628                                  ; 23/07/2018 - Retro DOS v3.0 
 20629                                  ; 04/05/2019 - Retro DOS v4.0
 20630                                  
 20631                                  ;	TITLE	DISK - Disk utility routines
 20632                                  ;	NAME	Disk
 20633                                  
 20634                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20635                                  ;
 20636                                  ;	SWAPCON
 20637                                  ;	SWAPBACK
 20638                                  ;	DOS_READ
 20639                                  ;	DOS_WRITE
 20640                                  ;	get_io_sft
 20641                                  ;	DirRead
 20642                                  ;	FIRSTCLUSTER
 20643                                  ;	SET_BUF_AS_DIR
 20644                                  ;	FATSecRd
 20645                                  ;	DREAD
 20646                                  ;	CHECK_WRITE_LOCK
 20647                                  ;	CHECK_READ_LOCK
 20648                                  ;
 20649                                  ;	Revision history:
 20650                                  ;
 20651                                  ;		A000   version 4.00  Jan. 1988
 20652                                  ;
 20653                                  ;----------------------------------------------------------------------------
 20654                                  ;
 20655                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20656                                  ;		error happens, DOS retries the entire block assuming that
 20657                                  ;		zero characters were transferred. Modified the code to take
 20658                                  ;		into account the number of characters transfered before
 20659                                  ;		retrying the operation.
 20660                                  ;
 20661                                  ;----------------------------------------------------------------------------
 20662                                  ;
 20663                                  
 20664                                  ;Installed = TRUE
 20665                                  
 20666                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20667                                  
 20668                                  ; **** Drivers for file input from devices ****
 20669                                  ;----------------------------------------------------------------------------
 20670                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20671                                  ;   of handles 0 and 1
 20672                                  ;
 20673                                  ;   Inputs:	DS is DOSDATA
 20674                                  ;   Outputs:	CONSWAP is set to false.
 20675                                  ;   Registers modified: none
 20676                                  ;----------------------------------------------------------------------------
 20677                                  
 20678                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20679                                  
 20680                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20681                                  ; 04/05/2019 - Retro DOS v4.0
 20682                                  
 20683                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20684                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20685                                  
 20686                                  SWAPBACK:
 20687 00003228 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20688 0000322D C3                      	retn
 20689                                  
 20690                                  ;----------------------------------------------------------------------------
 20691                                  ;
 20692                                  ; Procedure Name : SWAPCON
 20693                                  ;
 20694                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20695                                  ;
 20696                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20697                                  ;		DS is DOSDATA
 20698                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20699                                  ;   Registers modified: none
 20700                                  ;--------------------------------------------------------------------------
 20701                                  
 20702                                  SWAPCON:
 20703                                  	; MSDOS 3.3
 20704                                  	;push	es
 20705                                  	;push	di
 20706                                  	;mov	byte [CONSWAP],1
 20707                                  	;les	di,[THISSFT]
 20708                                  	;mov	word [CONSFT],di
 20709                                  	;mov	word [CONSFT+2],es
 20710                                  	;pop	di
 20711                                  	;pop	es
 20712                                  	;retn
 20713                                  
 20714                                  	; MSDOS 6.0
 20715 0000322E C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20716 00003233 50                      	push	ax
 20717 00003234 A1[9E05]                	mov	ax,[THISSFT]
 20718 00003237 A3[E605]                	mov	[CONSFT],ax
 20719 0000323A A1[A005]                	mov	ax,[THISSFT+2]
 20720 0000323D A3[E805]                	mov	[CONSFT+2],ax
 20721 00003240 58                      	pop	ax
 20722 00003241 C3                      	retn
 20723                                  
 20724                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20725                                  ; 04/05/2019 - Retro DOS v4.0
 20726                                  
 20727                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20728                                  ;-----------------------------------------------------------------------------
 20729                                  ;
 20730                                  ; Inputs:
 20731                                  ;	ThisSFT set to the SFT for the file being used
 20732                                  ;	[DMAADD] contains transfer address
 20733                                  ;	CX = No. of bytes to read
 20734                                  ;	DS = DOSDATA
 20735                                  ; Function:
 20736                                  ;	Perform read operation
 20737                                  ; Outputs:
 20738                                  ;    Carry clear
 20739                                  ;	SFT Position and cluster pointers updated
 20740                                  ;	CX = No. of bytes read
 20741                                  ;	ES:DI point to SFT
 20742                                  ;    Carry set
 20743                                  ;	AX is error code
 20744                                  ;	CX = 0
 20745                                  ;	ES:DI point to SFT
 20746                                  ; DS preserved, all other registers destroyed
 20747                                  ;
 20748                                  ;-----------------------------------------------------------------------------
 20749                                  
 20750                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20751                                  
 20752                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20753                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20754                                  
 20755                                  DOS_READ:
 20756 00003242 C43E[9E05]              	LES	DI,[THISSFT]
 20757                                  
 20758                                  ; Verify that the sft has been opened in a mode that allows reading.
 20759                                  
 20760                                  	;mov	al,[es:di+2]
 20761 00003246 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20762                                  	;and	al,0Fh
 20763 0000324A 240F                    	AND	AL,access_mask
 20764                                  	;cmp	al,1
 20765 0000324C 3C01                    	CMP	AL,open_for_write
 20766 0000324E 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20767 00003250 E9CD05                  	jmp	SET_ACC_ERR
 20768                                  
 20769                                  READ_NO_MODE:
 20770 00003253 E8B204                  	call	SETUP
 20771 00003256 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20772 00003258 E8EFDF                  	call	IsSFTNet
 20773 0000325B 7408                    	JZ	short LOCAL_READ
 20774                                  
 20775                                  ;IF NOT Installed
 20776                                  ;	transfer NET_READ
 20777                                  ;ELSE
 20778                                  	;mov	ax,1108h
 20779 0000325D B80811                  	MOV	AX,(MultNET<<8)|8
 20780 00003260 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20781                                  			; ES:DI -> SFT
 20782                                  			; SFT DPB field -> DPB of drive containing file
 20783                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20784                                  			; Return: CF set on error, CX = bytes read
 20785 00003262 C3                      	retn
 20786                                  ;ENDIF
 20787                                  
 20788                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20789                                  ; except return immediately.
 20790                                  
 20791                                  NoIORet:
 20792 00003263 F8                      	CLC
 20793 00003264 C3                      	retn
 20794                                  
 20795                                  LOCAL_READ:
 20796                                  	;test	word [es:di+5],80h
 20797                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20798 00003265 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20799 0000326A 750E                    	JNZ	short READDEV
 20800                                  
 20801                                  	;mov	byte [EXTERR_LOCUS],2
 20802 0000326C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20803 00003271 E87FE0                  	call	ECritDisk
 20804 00003274 E86C05                  	call	DISKREAD
 20805                                  
 20806                                  critexit:
 20807                                  	;call	LCritDisk
 20808                                  	;retn
 20809                                  	; 16/12/2022
 20810 00003277 E994E0                  	jmp	LCritDisk
 20811                                  
 20812                                  ; We are reading from a device. Examine the status of the device to see if we
 20813                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20814                                  ; null device, we can safely indicate no transfer.
 20815                                  
 20816                                  READDEV:
 20817                                  	;mov	byte [EXTERR_LOCUS],4
 20818 0000327A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20819                                  	;mov	bl,[es:di+5]
 20820 0000327F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20821 00003283 C43E[2C03]              	LES	DI,[DMAADD]
 20822                                  	;test	bl,40h
 20823 00003287 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20824 0000328A 7407                    	JZ	short ENDRDDEVJ3
 20825                                  	;test	bl,4
 20826 0000328C F6C304                  	test	BL,devid_device_null	; NUL device?
 20827 0000328F 7405                    	JZ	short TESTRAW 		; NO
 20828 00003291 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20829                                  ENDRDDEVJ3:
 20830                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20831                                  	;JMP	short ENDRDDEVJ2
 20832                                  	; 16/12/2022
 20833 00003293 E93E01                  	jmp	ENDRDDEV ; 04/05/2019
 20834                                  
 20835                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20836                                  ; bizarre std_con_string_input.
 20837                                  
 20838                                  TESTRAW:
 20839                                  	;test	bl,20h
 20840 00003296 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20841 00003299 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20842                                  	;test	bl,1
 20843 0000329B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20844 0000329E 7457                    	JZ	short NOTRDCON
 20845 000032A0 E96601                  	JMP	READCON
 20846                                  
 20847                                  DVRDRAW:
 20848 000032A3 06                      	PUSH	ES
 20849 000032A4 1F                      	POP	DS			; Xaddr to DS:DI
 20850                                  
 20851                                  	; 04/05/2019 - Retro DOS v4.0
 20852                                  
 20853                                  	; MSDOS 6.0
 20854                                  ;SR;
 20855                                  ;Check for win386 presence -- if present, do polled read of characters
 20856                                  
 20857 000032A5 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20858 000032AB 7408                    	jz	short ReadRawRetry	;not present
 20859 000032AD F6C301                  	test	bl,devid_device_con_in	;is it console device
 20860 000032B0 7403                    	jz	short ReadRawRetry	;no, do normal read
 20861 000032B2 E9A700                  	jmp	do_polling		;yes, do win386 polling loop
 20862                                  
 20863                                  ReadRawRetry:
 20864                                  
 20865                                  ; 07/02/2024
 20866                                  %if 0
 20867                                  	MOV	BX,DI			; DS:BX transfer addr
 20868                                  	; 06/02/2024 ; *
 20869                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20870                                  	;;MOV	DX,AX			; Start at 0
 20871                                  	;; 06/02/2024
 20872                                  	;cwd
 20873                                  	;call	SETREAD
 20874                                  	; 06/02/2024 ; *
 20875                                  	call	SETREAD_X
 20876                                  %else
 20877 000032B5 E84A13                  	call	SETREAD_XJ
 20878                                  %endif
 20879                                  
 20880                                  ;hkn; SS override
 20881 000032B8 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20882 000032BD E8C912                  	call	DEVIOCALL
 20883 000032C0 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20884 000032C2 B486                    	MOV	AH,86H			; Read error
 20885                                  
 20886                                  ;hkn; SS override
 20887 000032C4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20888                                  	; MSDOS 3.3
 20889                                  	;test	di,8000h
 20890                                  	;jz	short CRDROK
 20891                                  	; MSDOS 6.0
 20892 000032C9 09FF                    	or	di,di
 20893 000032CB 7920                    	jns	short CRDROK		; no errors
 20894                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20895 000032CD E82F1F                  	call	CHARHARD
 20896                                  
 20897                                  ; 06/02/2024 - Retrro DOS v5.0
 20898                                  %if 0
 20899                                  	MOV	DI,DX			; DS:DI is Xaddr
 20900                                  	; 04/05/2019
 20901                                  	; MSDOS 6.0
 20902                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20903                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20904                                  %else
 20905 000032D0 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20906 000032D5 29F9                    	sub	cx,di			; update transfer count
 20907 000032D7 01D7                    	add	di,dx			; update pointer
 20908                                  %endif
 20909                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20910 000032D9 08C0                    	OR	AL,AL
 20911 000032DB 7410                    	JZ	short CRDROK		; Ignore
 20912 000032DD 3C03                    	CMP	AL,3
 20913 000032DF 7403                    	JZ	short CRDFERR 		; fail.
 20914 000032E1 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20915 000032E2 EBD1                    	JMP	short ReadRawRetry	; Retry
 20916                                  
 20917                                  ; We have encountered a device-driver error. We have informed the user of it
 20918                                  ; and he has said for us to fail the system call.
 20919                                  
 20920                                  CRDFERR:
 20921 000032E4 5F                      	POP	DI			; Clean stack
 20922                                  DEVIOFERR:
 20923                                  
 20924                                  ;hkn; SS override
 20925 000032E5 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20926 000032EA E93105                  	jmp	SET_ACC_ERR_DS
 20927                                  
 20928                                  CRDROK:
 20929 000032ED 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20930 000032EE 89D7                    	MOV	DI,DX
 20931                                  
 20932                                  ;hkn; SS override
 20933 000032F0 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20934                                  	;JMP	SHORT ENDRDDEVJ3
 20935                                  	; 16/12/2022
 20936 000032F5 EB63                    	jmp	short ENDRDDEVJ2
 20937                                  
 20938                                  ; We are going to do a cooked read on some character device. There is a
 20939                                  ; problem here, what does the data look like? Is it a terminal device, line
 20940                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20941                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20942                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20943                                  ; included in data). this "simulates" the way con works in cooked mode
 20944                                  ; reading one line at a time. With file data, however, the lines will look
 20945                                  ; like, LF line CR. This is a little weird.
 20946                                  
 20947                                  NOTRDCON:
 20948                                  	;MOV	AX,ES
 20949                                  	;MOV	DS,AX
 20950                                  	; 07/02/2024
 20951 000032F7 06                      	push	es
 20952 000032F8 1F                      	pop	ds
 20953                                  
 20954                                  ; 07/02/2024
 20955                                  %if 0
 20956                                  	MOV	BX,DI
 20957                                  	; 06/02/2024 ; *
 20958                                  	;;XOR	DX,DX
 20959                                  	;;MOV	AX,DX
 20960                                  	;; 06/02/2024
 20961                                  	;xor	ax,ax
 20962                                  	;cwd
 20963                                  	PUSH	CX
 20964                                  	MOV	CX,1
 20965                                  	;call	SETREAD
 20966                                  	; 06/02/2024 ; *
 20967                                  	call	SETREAD_X
 20968                                  	POP	CX
 20969                                  %else
 20970 000032F9 51                      	push	cx
 20971 000032FA B90100                  	mov	cx,1
 20972 000032FD E80213                  	call	SETREAD_XJ
 20973 00003300 59                      	pop	cx
 20974                                  %endif
 20975                                  
 20976                                  ;hkn; SS override
 20977 00003301 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20978                                  	;lds	si,[si+7]
 20979 00003306 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20980                                  DVRDLP:
 20981 00003309 E8D41C                  	call	DSKSTATCHK
 20982 0000330C E87D12                  	call	DEVIOCALL2
 20983 0000330F 57                      	PUSH	DI			; Save "count" done
 20984 00003310 B486                    	MOV	AH,86H
 20985                                  
 20986                                  ;hkn; SS override
 20987 00003312 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20988                                  	
 20989                                  	; MSDOS 3.3
 20990                                  	;test	di,8000h
 20991                                  	;jz	short CRDOK
 20992                                  	; MSDOS 6.0
 20993 00003317 09FF                    	or	di,di
 20994 00003319 7917                    	jns	short CRDOK
 20995                                  	
 20996 0000331B E8E11E                  	call	CHARHARD
 20997 0000331E 5F                      	POP	DI
 20998                                  
 20999                                  ;hkn; SS override
 21000 0000331F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21001 00003326 3C01                    	CMP	AL,1
 21002 00003328 74DF                    	JZ	short DVRDLP		; Retry
 21003 0000332A 3C03                    	CMP	AL,3
 21004 0000332C 74B7                    	JZ	short DEVIOFERR		; FAIL
 21005 0000332E 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21006 00003330 EB12                    	JMP	SHORT DVRDIGN
 21007                                  
 21008                                  CRDOK:
 21009 00003332 5F                      	POP	DI
 21010                                  
 21011                                  ;hkn; SS override
 21012 00003333 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21013                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21014 00003339 751F                    	JNZ	short ENDRDDEVJ2
 21015                                  	; 16/12/2022
 21016                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21017                                  
 21018 0000333B 1E                      	PUSH	DS
 21019                                  
 21020                                  ;hkn; SS override
 21021 0000333C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21022 00003341 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21023 00003343 1F                      	POP	DS
 21024                                  DVRDIGN:
 21025                                  
 21026                                  ;hkn; SS override
 21027 00003344 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21028 00003349 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21029 00003350 47                      	INC	DI			; Next character
 21030 00003351 3C1A                    	CMP	AL,1Ah			; ^Z?
 21031                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21032 00003353 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21033                                  	; 16/12/2022
 21034                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21035 00003355 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21036 00003357 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21037 00003359 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21038                                  					;  AX=FFFF which is not likely
 21039                                  ENDRDDEVJ2:
 21040                                  	; 16/12/2022
 21041                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21042                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21043 0000335A EB78                    	jmp	ENDRDDEV
 21044                                  
 21045                                  	; 04/05/2019
 21046                                  
 21047                                  	; MSDOS 6.0
 21048                                  ;SR;
 21049                                  ;Polling code for raw read on CON when WIN386 is present
 21050                                  ;
 21051                                  ;At this point -- ds:di is transfer address
 21052                                  ;		  cx is count
 21053                                  
 21054                                  do_polling:
 21055                                  
 21056                                  ; 07/02/2024
 21057                                  %if 0
 21058                                  	mov	bx,di			;ds:bx is Xfer address
 21059                                  	; 06/02/2024 ; *
 21060                                  	;xor	ax,ax
 21061                                  	;;mov	dx,ax
 21062                                  	;; 06/02/2024
 21063                                  	;cwd
 21064                                  	;call	SETREAD			;prepare device packet
 21065                                  	; 06/02/2024 ; *
 21066                                  	call	SETREAD_X
 21067                                  %else
 21068 0000335C E8A312                  	call	SETREAD_XJ
 21069                                  %endif
 21070                                  
 21071                                  do_io:
 21072                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21073                                  
 21074 0000335F 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21075 00003364 1E                      	push	ds
 21076 00003365 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21077 0000336A E81C12                  	call	DEVIOCALL		;call device driver
 21078 0000336D 1F                      	pop	ds
 21079                                  	
 21080                                  	;test	word [es:bx+3],8000h
 21081                                  	; 16/12/2022
 21082                                  	;test	byte [es:bx+4],80h
 21083 0000336E 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21084                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21085 00003373 7413                    	jz	short check_busy	;no
 21086                                  
 21087 00003375 1E                      	push	ds
 21088 00003376 89FA                    	mov	dx,di
 21089                                  
 21090                                  invoke_charhard:	; 07/02/2024
 21091                                  	;invoke charhard		;invoke int 24h handler
 21092 00003378 E8841E                  	call	CHARHARD
 21093 0000337B 89D7                    	mov	di,dx
 21094 0000337D 08C0                    	or	al,al
 21095 0000337F 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21096 00003381 3C03                    	cmp	al,3
 21097 00003383 7438                    	jz	short devrderr		;user asked to fail
 21098 00003385 1F                      	pop	ds
 21099 00003386 EBD7                    	jmp	short do_io		;user asked to retry
 21100                                  
 21101                                  check_busy:
 21102                                  	;test	word [es:bx+3],200h
 21103                                  	; 16/12/2022
 21104 00003388 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21105                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21106 0000338D 7537                    	jnz	short no_char		;yes, no character available
 21107                                  
 21108                                  ;Character is available. Read in 1 character at a time until all characters
 21109                                  ;are read in or no character is available
 21110                                  
 21111 0000338F 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21112 00003394 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21113 0000339A 1E                      	push	ds
 21114 0000339B 36C536[9E05]            	lds	si,[ss:THISSFT]
 21115 000033A0 E8E611                  	call	DEVIOCALL
 21116                                  
 21117 000033A3 89FA                    	mov	dx,di
 21118 000033A5 B486                    	mov	ah,86h
 21119                                  	;mov	di,[es:bx+3]
 21120 000033A7 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21121 000033AB F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21122                                  	;jz	short next_char		;no,read next character
 21123                                  	; 07/02/2024
 21124 000033AF 75C7                    	jnz	short invoke_charhard
 21125                                  
 21126                                  ; 07/02/2024
 21127                                  %if 0
 21128                                  	;invoke	charhard		;invoke int 24h handler
 21129                                  	call	CHARHARD
 21130                                  	mov	di,dx			;restore di
 21131                                  	or	al,al			;
 21132                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21133                                  	cmp	al,3
 21134                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21135                                  	pop	ds
 21136                                  	jmp	short do_io		;user issued a retry
 21137                                  %endif
 21138                                  
 21139                                  next_char:
 21140 000033B1 1F                      	pop	ds
 21141 000033B2 89D7                    	mov	di,dx
 21142 000033B4 49                      	dec	cx			;decrement count
 21143                                  	;jcxz	done_read		;all characters read in
 21144                                  	; 07/02/2024
 21145 000033B5 7418                    	jz	short done_read
 21146 000033B7 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21147 000033BB EBA2                    	jmp	short do_io		;read next character in
 21148                                  
 21149                                  devrderr:
 21150 000033BD 5F                      	pop	di			;discard segment address
 21151 000033BE 36C43E[9E05]            	les	di,[ss:THISSFT]
 21152                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21153 000033C3 E95804                  	jmp     SET_ACC_ERR_DS
 21154                                  
 21155                                  no_char:
 21156                                  ;Since no character is available, we let win386 switch the VM out
 21157                                  
 21158 000033C6 50                      	push	ax
 21159 000033C7 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21160 000033C9 CD2A                    	int	2Ah			;indicate idle to WIN386
 21161                                  
 21162                                  ;When control returns from WIN386, we continue the raw read
 21163                                  
 21164 000033CB 58                      	pop	ax
 21165 000033CC EB91                    	jmp	do_io
 21166                                  
 21167                                  pop_done_read:
 21168 000033CE 1F                      	pop	ds
 21169                                  done_read:
 21170 000033CF 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21171                                  
 21172                                  	; 16/12/2022
 21173                                  
 21174                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21175                                  	;jmp	ENDRDDEV ; 04/05/2019
 21176                                  
 21177                                  	; 04/05/2019 - Retro DOS v4.0
 21178                                  ENDRDDEV:
 21179 000033D4 16                      	push	ss
 21180 000033D5 1F                      	pop	ds
 21181 000033D6 EB1F                    	jmp	short endrddev1
 21182                                  
 21183                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21184                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21185                                  
 21186                                  TRANBUF:
 21187 000033D8 AC                      	LODSB
 21188 000033D9 AA                      	STOSB
 21189 000033DA 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21190 000033DC 7503                    	JNZ	short NORMCH
 21191 000033DE C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21192                                  NORMCH:
 21193 000033E1 3C0A                    	CMP	AL,c_LF ; 0Ah
 21194 000033E3 E0F3                    	LOOPNZ	TRANBUF
 21195 000033E5 7507                    	JNZ	short ENDRDCON
 21196 000033E7 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21197 000033E9 E85BE2                  	call	OUTT		; Transmit linefeed
 21198 000033EC 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21199                                  ENDRDCON:
 21200                                  ;hkn; SS is DOSDATA
 21201 000033EE 16                      	push	ss
 21202 000033EF 1F                      	pop	ds
 21203 000033F0 E835FE                  	CALL	SWAPBACK
 21204 000033F3 8936[2200]              	MOV	[CONTPOS],SI
 21205                                  
 21206                                  	; 16/12/2022
 21207                                  ;ENDRDDEV:
 21208                                  ;;hkn; SS is DOSDATA
 21209                                  ;	push	ss
 21210                                  ;	pop	ds
 21211                                  endrddev1:	; 04/05/2019
 21212 000033F7 893E[B805]              	MOV	[NEXTADD],DI
 21213 000033FB 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21214 000033FD C43E[9E05]              	LES	DI,[THISSFT]
 21215                                  	;and	byte [es:di+5],0BFh
 21216 00003401 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21217                                  				; Mark as no more data available
 21218                                  SETSFTC:
 21219                                  	; 31/07/2019
 21220                                  	;call	SETSFT
 21221                                  	;retn
 21222 00003406 E9A904                  	jmp	SETSFT
 21223                                  
 21224                                  ; 16/12/2022
 21225                                  %if 0
 21226                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21227                                  ENDRDDEV:
 21228                                  ;hkn; SS is DOSDATA
 21229                                  	push	ss
 21230                                  	pop	ds
 21231                                  	MOV	[NEXTADD],DI
 21232                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21233                                  	LES	DI,[THISSFT]
 21234                                  	;and	byte [es:di+5],0BFh
 21235                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21236                                  				; Mark as no more data available
 21237                                  SETSFTC:
 21238                                  	;call	SETSFT
 21239                                  	;retn
 21240                                  	jmp	SETSFT	
 21241                                  %endif
 21242                                  
 21243                                  READCON:
 21244 00003409 E822FE                  	CALL	SWAPCON
 21245 0000340C 8B36[2200]              	MOV	SI,[CONTPOS]
 21246 00003410 09F6                    	OR	SI,SI
 21247 00003412 75C4                    	JNZ	short TRANBUF
 21248 00003414 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21249 00003419 7406                    	JZ	short GETBUF
 21250 0000341B C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21251                                  GETBUF:
 21252 00003421 51                      	PUSH	CX
 21253 00003422 06                      	PUSH	ES
 21254 00003423 57                      	PUSH	DI
 21255                                  
 21256                                  ;hkn; CONBUF is in DOSDATA
 21257 00003424 BA[7B02]                	MOV	DX,CONBUF
 21258                                  
 21259 00003427 E898DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21260 0000342A 5F                      	POP	DI
 21261 0000342B 07                      	POP	ES
 21262 0000342C 59                      	POP	CX
 21263                                  
 21264                                  ;hkn; CONBUF is in DOSDATA
 21265 0000342D BE[7D02]                	MOV	SI,CONBUF+2
 21266                                  
 21267 00003430 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21268 00003433 75A3                    	JNZ	short TRANBUF
 21269 00003435 B01A                    	MOV	AL,1AH
 21270 00003437 AA                      	STOSB
 21271 00003438 4F                      	DEC	DI
 21272 00003439 B00A                    	MOV	AL,c_LF
 21273 0000343B E809E2                  	call	OUTT		; Send linefeed
 21274 0000343E 31F6                    	XOR	SI,SI
 21275 00003440 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21276                                  
 21277                                  ; 24/07/2018 - Retro DOS v3.0
 21278                                  
 21279                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21280                                  ;---------------------------------------------------------------------------
 21281                                  ;
 21282                                  ; Procedure Name : DOS_WRITE
 21283                                  ;
 21284                                  ; Inputs:
 21285                                  ;	ThisSFT set to the SFT for the file being used
 21286                                  ;	[DMAADD] contains transfer address
 21287                                  ;	CX = No. of bytes to write
 21288                                  ; Function:
 21289                                  ;	Perform write operation
 21290                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21291                                  ;		to current sf_position
 21292                                  ; Outputs:
 21293                                  ;    Carry clear
 21294                                  ;	SFT Position and cluster pointers updated
 21295                                  ;	CX = No. of bytes written
 21296                                  ;	ES:DI point to SFT
 21297                                  ;    Carry set
 21298                                  ;	AX is error code
 21299                                  ;	CX = 0
 21300                                  ;	ES:DI point to SFT
 21301                                  ; DS preserved, all other registers destroyed
 21302                                  ;---------------------------------------------------------------------------
 21303                                  
 21304                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21305                                  ;hkn; point to DOSDATA.
 21306                                  
 21307                                  ; 04/05/2019 - Retro DOS v4.0
 21308                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21309                                  
 21310                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21311                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21312                                  
 21313                                  DOS_WRITE:
 21314 00003442 C43E[9E05]              	LES	DI,[THISSFT]
 21315                                  	;mov	al,[ES:DI+2]
 21316 00003446 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21317                                  	;and	al,0Fh
 21318 0000344A 240F                    	AND	AL,access_mask
 21319                                  	;cmp	al,0
 21320 0000344C 3C00                    	CMP	AL,open_for_read
 21321 0000344E 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21322                                  BadMode:
 21323 00003450 E9CD03                  	jmp	SET_ACC_ERR
 21324                                  
 21325                                  ; NOTE: The following check for writting to a Read Only File is performed
 21326                                  ;	    ONLY on FCBs!!!!
 21327                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21328                                  ;	    of a read only file which can then be written to.
 21329                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21330                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21331                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21332                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21333                                  ;	    to a read-only file.
 21334                                  
 21335                                  Check_FCB_RO:
 21336                                  	;;test	word [es:di+2],8000h
 21337                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21338                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21339                                  	
 21340                                  	;test	byte [es:di+3],80h
 21341 00003453 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21342 00003458 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21343                                  
 21344                                  	;test	byte [es:di+4],1
 21345 0000345A 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21346 0000345F 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21347                                  WRITE_NO_MODE:
 21348 00003461 E8A402                  	call	SETUP
 21349 00003464 E8E3DD                  	call	IsSFTNet
 21350 00003467 7406                    	JZ	short LOCAL_WRITE
 21351                                  
 21352                                  ;IF NOT Installed
 21353                                  ;	transfer NET_WRITE
 21354                                  ;ELSE
 21355                                  	;mov	ax,1109h
 21356 00003469 B80911                  	MOV	AX,(MultNET<<8)|9
 21357 0000346C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21358                                  			; ES:DI -> SFT
 21359                                  			; SFT DPB field -> DPB of drive containing file
 21360                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21361                                  			; Return: CF set on error, CX = bytes written
 21362 0000346E C3                      	retn
 21363                                  ;ENDIF
 21364                                  
 21365                                  LOCAL_WRITE:
 21366                                  	;;test	word [es:di+5],80h
 21367                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21368                                  	;jnz	short WRTDEV
 21369                                  
 21370                                  	;test	byte [es:di+5],80h
 21371 0000346F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21372 00003474 756D                    	jnz	short WRTDEV
 21373                                  
 21374                                  	;mov	byte [EXTERR_LOCUS],2
 21375 00003476 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21376 0000347B E875DE                  	call	ECritDisk
 21377                                  
 21378 0000347E E8E104                  	call	DISKWRITE
 21379                                  
 21380                                  	; 04/05/2019 - Retro DOS v4.0
 21381                                  
 21382                                  	; MSDOS 6.0
 21383                                  ; Extended Open
 21384 00003481 7210                    	JC	short nocommit
 21385                                  	
 21386 00003483 C43E[9E05]              	LES	DI,[THISSFT]
 21387                                  	
 21388                                  	;;test	word [ES:DI+2],4000h
 21389                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21390                                  	;JZ	short nocommit
 21391                                  	
 21392                                  	;test	byte [ES:DI+3],40h
 21393 00003487 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21394 0000348C 7405                    	JZ	short nocommit
 21395                                  	
 21396 0000348E 51                      	PUSH	CX
 21397 0000348F E85EFB                  	call	DOS_COMMIT
 21398 00003492 59                      	POP	CX
 21399                                  nocommit:
 21400                                  ; Extended Open
 21401                                  	;call	LCritDisk
 21402                                  	;retn
 21403                                  	; 18/12/2022
 21404 00003493 E978DE                  	jmp	LCritDisk
 21405                                  
 21406                                  DVWRTRAW:
 21407 00003496 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21408 00003498 E8A811                  	call	SETWRITE
 21409 0000349B 1E                      	PUSH	DS			; Save seg of transfer
 21410                                  
 21411                                  ;hkn; SS override
 21412 0000349C 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21413 000034A1 E8E510                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21414                                  
 21415 000034A4 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21416 000034A6 B487                    	MOV	AH,87H
 21417                                  
 21418                                  ;hkn; SS override
 21419 000034A8 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21420                                  
 21421                                  	; MSDOS 3.3
 21422                                  	;test	di,8000h
 21423                                  	;jz	short CWRTROK
 21424                                  
 21425                                  	; MSDOS 6.0
 21426 000034AD 09FF                    	or	di,di
 21427 000034AF 791F                    	jns	short CWRTROK
 21428                                  	
 21429                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21430 000034B1 E84B1D                  	call	CHARHARD
 21431                                  
 21432                                  	; 04/05/2019  - Retro DOS v4.0
 21433                                  
 21434                                  	; MSDOS 6.0
 21435                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21436                                  	; 08/02/2024
 21437 000034B4 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21438 000034B9 29F9                    	sub	cx,di
 21439 000034BB 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21440                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21441 000034BD 01FB                    	add	bx,di
 21442 000034BF 89DF                    	mov	di,bx			;				M065
 21443                                  	
 21444                                  	; MSDOS 3.3
 21445                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21446                                  
 21447                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21448 000034C1 08C0                    	OR	AL,AL
 21449 000034C3 740B                    	JZ	short CWRTROK 		; Ignore
 21450 000034C5 3C03                    	CMP	AL,3
 21451 000034C7 7403                    	JZ	short CWRFERR
 21452 000034C9 1F                      	POP	DS			; Recover saved seg of transfer
 21453 000034CA EBCA                    	JMP	short DVWRTRAW		; Try again
 21454                                  CWRFERR:
 21455 000034CC 58                      	POP	AX			; Chuck saved seg of transfer
 21456 000034CD E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21457                                  CWRTROK:
 21458 000034D0 58                      	POP	AX			; Chuck saved seg of transfer
 21459 000034D1 1F                      	POP	DS
 21460 000034D2 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21461                                  ENDWRDEV:
 21462 000034D5 C43E[9E05]              	LES	DI,[THISSFT]
 21463 000034D9 89C1                    	MOV	CX,AX
 21464                                  	;call	ADDREC
 21465                                  	;retn
 21466                                  	; 16/12/2022
 21467                                  	; 10/06/2019
 21468 000034DB E9F503                  	jmp	ADDREC
 21469                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21470                                  	;call	ADDREC
 21471                                  	;retn
 21472                                  	
 21473                                  WRTNUL:
 21474 000034DE 89CA                    	MOV	DX,CX			; Entire transfer done
 21475                                  WRTCOOKJ:
 21476 000034E0 E98D00                  	JMP	WRTCOOKDONE
 21477                                  WRTDEV:
 21478                                  	;mov	byte [EXTERR_LOCUS],4
 21479 000034E3 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21480                                  	;or	byte [es:di+5],40h
 21481 000034E8 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21482                                  					; Reset EOF for input
 21483                                  	;mov	bl,[es:di+5]
 21484 000034ED 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21485 000034F1 31C0                    	XOR	AX,AX
 21486 000034F3 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21487 000034F5 1E                      	PUSH	DS
 21488 000034F6 88D8                    	MOV	AL,BL
 21489 000034F8 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21490 000034FC 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21491 000034FE 31D2                    	XOR	DX,DX			; Set starting point
 21492                                  	;test	al,20h
 21493 00003500 A820                    	test	AL,devid_device_raw	; Raw?
 21494                                  	;JZ	short TEST_DEV_CON
 21495                                  	;JMP	DVWRTRAW
 21496                                  	; 16/12/2022
 21497 00003502 7592                    	jnz	short DVWRTRAW
 21498                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21499                                  	;JZ	short TEST_DEV_CON
 21500                                  	;JMP	short DVWRTRAW
 21501                                  
 21502                                  TEST_DEV_CON:
 21503                                  	;test	al,2
 21504 00003504 A802                    	test	AL,devid_device_con_out ; Console output device?
 21505 00003506 756E                    	jnz	short WRITECON
 21506                                  	;test	al,4
 21507 00003508 A804                    	test	AL,devid_device_null
 21508 0000350A 75D2                    	JNZ	short WRTNUL
 21509 0000350C 89D0                    	MOV	AX,DX
 21510 0000350E 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21511 00003511 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21512 00003513 51                      	PUSH	CX
 21513 00003514 B90100                  	MOV	CX,1
 21514 00003517 E82911                  	call	SETWRITE
 21515 0000351A 59                      	POP	CX
 21516                                  
 21517                                  ;hkn; SS override
 21518 0000351B 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21519                                  ;
 21520                                  ;SR; Removed X25 support from here
 21521                                  ;
 21522                                  	;lds	si,[si+7]
 21523 00003520 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21524                                  DVWRTLP:
 21525 00003523 E8BA1A                  	call	DSKSTATCHK
 21526 00003526 E86310                  	call	DEVIOCALL2
 21527 00003529 57                      	PUSH	DI
 21528 0000352A B487                    	MOV	AH,87H
 21529                                  
 21530                                  ;hkn; SS override
 21531 0000352C 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21532                                  	
 21533                                  	; MSDOS 3.3
 21534                                  	;test	di,8000h
 21535                                  	;jz	short CWROK
 21536                                  
 21537                                  	; MSDOS 6.0
 21538 00003531 09FF                    	or	di,di
 21539 00003533 7916                    	jns	short CWROK
 21540                                  	
 21541                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21542 00003535 E8C71C                  	call	CHARHARD
 21543 00003538 5F                      	POP	DI
 21544                                  
 21545                                  ;hkn; SS override
 21546 00003539 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21547 00003540 3C01                    	CMP	AL,1
 21548 00003542 74DF                    	JZ	short DVWRTLP 	; Retry
 21549 00003544 08C0                    	OR	AL,AL
 21550 00003546 740C                    	JZ	short DVWRTIGN	; Ignore
 21551                                  	; 10/08/2018
 21552 00003548 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21553                                  CWROK:
 21554 0000354B 5F                      	POP	DI
 21555                                  
 21556                                  ;hkn; SS override
 21557 0000354C 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21558 00003552 741C                    	JZ	short WRTCOOKDONE
 21559                                  DVWRTIGN:
 21560 00003554 42                      	INC	DX
 21561                                  
 21562                                  ;hkn; SS override for CALLXAD
 21563 00003555 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21564 0000355A 47                      	INC	DI
 21565 0000355B 1E                      	PUSH	DS
 21566 0000355C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21567 00003561 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21568 00003564 1F                      	POP	DS
 21569 00003565 7409                    	JZ	short WRTCOOKDONE
 21570                                  
 21571                                  ;hkn; SS override
 21572 00003567 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21573 0000356E E2B3                    	LOOP	DVWRTLP
 21574                                  WRTCOOKDONE:
 21575 00003570 89D0                    	MOV	AX,DX
 21576 00003572 1F                      	POP	DS
 21577 00003573 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21578                                  
 21579                                  WRITECON:
 21580 00003576 1E                      	PUSH	DS
 21581                                  
 21582                                  ;hkn; SS is DOSDATA
 21583 00003577 16                      	push	ss
 21584 00003578 1F                      	pop	ds
 21585 00003579 E8B2FC                  	CALL	SWAPCON
 21586 0000357C 1F                      	POP	DS
 21587 0000357D 89DE                    	MOV	SI,BX
 21588 0000357F 51                      	PUSH	CX
 21589                                  WRCONLP:
 21590 00003580 AC                      	LODSB
 21591 00003581 3C1A                    	CMP	AL,1Ah		; ^Z?
 21592 00003583 7405                    	JZ	short CONEOF
 21593 00003585 E8BFE0                  	call	OUTT
 21594 00003588 E2F6                    	LOOP	WRCONLP
 21595                                  CONEOF:
 21596 0000358A 58                      	POP	AX			; Count
 21597 0000358B 29C8                    	SUB	AX,CX			; Amount actually written
 21598 0000358D 1F                      	POP	DS
 21599 0000358E E897FC                  	CALL	SWAPBACK
 21600 00003591 E941FF                  	JMP	ENDWRDEV
 21601                                  
 21602                                  ;---------------------------------------------------------------------------
 21603                                  ;
 21604                                  ; Procedure Name : get_io_sft
 21605                                  ;
 21606                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21607                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21608                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21609                                  ;
 21610                                  ;---------------------------------------------------------------------------
 21611                                  
 21612                                  ; 04/05/2019 - Retro DOS v4.0
 21613                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21614                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21615                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21616                                  
 21617                                  GET_IO_SFT:
 21618                                  	;test	byte [SS:CONSWAP],0FFh
 21619 00003594 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21620 0000359A 7512                    	JNZ	short GetRedir
 21621                                  GetNormal:
 21622 0000359C 16                      	push	ss
 21623 0000359D 1F                      	pop	ds
 21624 0000359E 06                      	PUSH	ES
 21625 0000359F 57                      	PUSH	DI
 21626 000035A0 E8FC2F                  	call	SFFromHandle
 21627 000035A3 7206                    	JC	short RET44P
 21628 000035A5 8CC6                    	MOV	SI,ES
 21629 000035A7 8EDE                    	MOV	DS,SI
 21630 000035A9 89FE                    	MOV	SI,DI
 21631                                  RET44P:
 21632 000035AB 5F                      	POP	DI
 21633 000035AC 07                      	POP	ES
 21634 000035AD C3                      	retn
 21635                                  GetRedir:
 21636 000035AE 83FB01                  	CMP	BX,1
 21637 000035B1 77E9                    	JA	short GetNormal
 21638 000035B3 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21639 000035B8 F8                      	CLC
 21640                                  get_io_sft_retn:
 21641 000035B9 C3                      	retn
 21642                                  
 21643                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21644                                  ;---------------------------------------------------------------------------
 21645                                  ;
 21646                                  ; Procedure Name : DIRREAD
 21647                                  ;
 21648                                  ; Inputs:
 21649                                  ;	AX = Directory block number (relative to first block of directory)
 21650                                  ;	ES:BP = Base of drive parameters
 21651                                  ;	[DIRSEC] = First sector of first cluster of directory
 21652                                  ;	[CLUSNUM] = Next cluster
 21653                                  ;	[CLUSFAC] = Sectors/Cluster
 21654                                  ; Function:
 21655                                  ;	Read the directory block into [CURBUF].
 21656                                  ; Outputs:
 21657                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21658                                  ;	[SECCLUSPOS] Set
 21659                                  ;	ES:BP unchanged
 21660                                  ;	[CURBUF] Points to Buffer with dir sector
 21661                                  ;	Carry set if error (user said FAIL to I 24)
 21662                                  ; DS preserved, all other registers destroyed.
 21663                                  ;---------------------------------------------------------------------------
 21664                                  
 21665                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21666                                  
 21667                                  DIRREAD:
 21668                                  
 21669                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21670                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21671                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21672                                  ; by DIRStart = 0.
 21673                                  
 21674 000035BA 31D2                    	XOR	DX,DX
 21675                                  	;CMP	word [DIRSTART],0
 21676                                  	; 21/09/2023
 21677 000035BC 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21678 000035C0 7503                    	jnz	short SubDir
 21679 000035C2 92                      	XCHG	AX,DX
 21680 000035C3 EB0C                    	JMP	short DoRead
 21681                                  
 21682                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21683                                  
 21684                                  SubDir:
 21685 000035C5 88C2                    	MOV	DL,AL
 21686                                  	;and	dl,[es:bp+4]
 21687 000035C7 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21688                                  
 21689                                  ;	(DX) = sector-in-cluster
 21690                                  
 21691                                  	;mov	cl,[es:bp+5]
 21692 000035CB 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21693 000035CF D3E8                    	SHR	AX,CL
 21694                                  
 21695                                  ;	(DX) = position in cluster
 21696                                  ;	(AX) = number of clusters to skip
 21697                                  
 21698                                  DoRead:
 21699 000035D1 8816[7305]              	MOV	[SECCLUSPOS],DL
 21700 000035D5 89C1                    	MOV	CX,AX
 21701 000035D7 88D4                    	MOV	AH,DL
 21702                                  
 21703                                  ;	(CX) = number of clusters to skip.
 21704                                  ;	(AH) = remainder
 21705                                  
 21706                                  	; 04/05/2019 - Retro DOS v4.0
 21707                                  	 
 21708                                  	; MSDOS 6.0
 21709                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21710                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21711                                  	;MOV	DX,[DIRSEC]
 21712                                  	;ADD	DL,AH
 21713                                  	;ADC	DH,0
 21714                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21715                                  	; 21/09/2023
 21716 000035D9 31DB                    	xor	bx,bx ; 0
 21717 000035DB 8B16[BE05]              	mov	dx,[DIRSEC]
 21718 000035DF 00E2                    	add	dl,ah
 21719 000035E1 10DE                    	adc	dh,bl ; 0
 21720 000035E3 131E[C005]              	adc	bx,[DIRSEC+2]
 21721 000035E7 891E[0706]              	mov	[HIGH_SECTOR],bx
 21722                                  
 21723 000035EB 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21724 000035EF 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21725 000035F3 E319                    	JCXZ	FIRSTCLUSTER
 21726                                  SKPCLLP:
 21727 000035F5 E8721E                  	call	UNPACK
 21728 000035F8 72BF                    	jc	short get_io_sft_retn
 21729 000035FA 87DF                    	XCHG	BX,DI
 21730 000035FC E8541E                  	call	IsEOF			; test for eof based on fat size
 21731 000035FF 7302                    	JAE	short HAVESKIPPED
 21732 00003601 E2F2                    	LOOP	SKPCLLP
 21733                                  HAVESKIPPED:
 21734 00003603 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21735 00003607 89FA                    	MOV	DX,DI
 21736 00003609 88E3                    	MOV	BL,AH
 21737 0000360B E80517                  	call	FIGREC
 21738                                  
 21739                                  	;entry	FIRSTCLUSTER
 21740                                  
 21741                                  FIRSTCLUSTER:
 21742                                  	; 22/09/2023
 21743                                  	;;mov	byte [ALLOWED],18h
 21744                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21745                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21746                                  	;call	GETBUFFR
 21747 0000360E E86422                  	call	GETBUFFER ; *	; pre-read
 21748 00003611 72A6                    	jc	short get_io_sft_retn
 21749                                  
 21750                                  	;entry	SET_BUF_AS_DIR
 21751                                  
 21752                                  SET_BUF_AS_DIR:
 21753                                  
 21754                                  ;	Set the type of CURBUF to be a directory sector.
 21755                                  ;	Only flags are modified.
 21756                                  
 21757 00003613 1E                      	PUSH	DS
 21758 00003614 56                      	PUSH	SI
 21759 00003615 C536[E205]              	LDS	SI,[CURBUF]
 21760                                  	;or	byte [si+5],4
 21761 00003619 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21762 0000361D 5E                      	POP	SI
 21763 0000361E 1F                      	POP	DS
 21764                                  dirread_retn:
 21765 0000361F C3                      	retn
 21766                                  
 21767                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21768                                  ;----------------------------------------------------------------------------
 21769                                  ;
 21770                                  ; Procedure Name : FATSECRD
 21771                                  ; Inputs:
 21772                                  ;	Same as DREAD
 21773                                  ;	DS:BX = Transfer address
 21774                                  ;	CX = Number of sectors
 21775                                  ;	DX = Absolute record number
 21776                                  ;	ES:BP = Base of drive parameters
 21777                                  ; Function:
 21778                                  ;	Calls BIOS to perform FAT read.
 21779                                  ; Outputs:
 21780                                  ;	Same as DREAD
 21781                                  ;---------------------------------------------------------------------------
 21782                                  
 21783                                  	; 04/05/2019 - Retro DOS v4.0
 21784                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21785                                  
 21786                                  FATSECRD:
 21787                                  ;hkn; SS override
 21788                                  	;mov	byte [ss:ALLOWED],18h
 21789 00003620 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21790 00003626 89CF                    	MOV	DI,CX
 21791                                  	;mov	cl,[es:bp+8]
 21792 00003628 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21793                                  	; MSDOS 3.3
 21794                                  	;;mov	al,[es:bp+0Fh]
 21795                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21796                                  	;XOR	AH,AH
 21797                                  	; MSDOS 6.0
 21798                                  	;mov	ax,[es:bp+0Fh]
 21799 0000362C 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21800 00003630 30ED                    	XOR	CH,CH
 21801 00003632 52                      	PUSH	DX
 21802                                  NXTFAT:
 21803                                  	; MSDOS 6.0
 21804                                  ;hkn; SS override
 21805 00003633 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21806 0000363A 51                      	PUSH	CX			;32mb
 21807 0000363B 50                      	PUSH	AX
 21808 0000363C 89F9                    	MOV	CX,DI
 21809 0000363E E85B00                  	call	DSKREAD
 21810 00003641 58                      	POP	AX
 21811 00003642 59                      	POP	CX
 21812 00003643 7420                    	JZ	short RET41P		; Carry clear
 21813 00003645 01C2                    	ADD	DX,AX
 21814 00003647 E2EA                    	LOOP	NXTFAT
 21815 00003649 5A                      	POP	DX
 21816 0000364A 89F9                    	MOV	CX,DI
 21817                                  
 21818                                  ; NOTE FALL THROUGH
 21819                                  
 21820                                  ;Break	<DREAD -- DO A DISK READ>
 21821                                  ;---------------------------------------------------------------------------
 21822                                  ;
 21823                                  ; Procedure Name : DREAD
 21824                                  ;
 21825                                  ; Inputs:
 21826                                  ;	DS:BX = Transfer address
 21827                                  ;	CX = Number of sectors
 21828                                  ;	DX = Absolute record number	      (LOW)
 21829                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21830                                  ;	ES:BP = Base of drive parameters
 21831                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21832                                  ; Function:
 21833                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21834                                  ;	errors, will call HARDERRRW for further action.
 21835                                  ; Outputs:
 21836                                  ;	Carry set if error (currently user FAILED to INT 24)
 21837                                  ; DS,ES:BP preserved. All other registers destroyed.
 21838                                  ;---------------------------------------------------------------------------
 21839                                  
 21840                                  	;entry	DREAD
 21841                                  DREAD:
 21842 0000364C E84D00                  	call	DSKREAD
 21843 0000364F 74CE                    	jz	short dirread_retn	; Carry clear
 21844                                  ;hkn; SS override
 21845 00003651 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21846 00003657 E89500                  	call	HARDERRRW
 21847 0000365A 3C01                    	CMP	AL,1			; Check for retry
 21848 0000365C 74EE                    	JZ	short DREAD
 21849                                  
 21850                                  fail_ignore:	; 09/02/2024
 21851 0000365E 3C03                    	CMP	AL,3			; Check for FAIL
 21852 00003660 F8                      	CLC
 21853 00003661 7501                    	JNZ	short NO_CAR		; Ignore
 21854 00003663 F9                      	STC
 21855                                  NO_CAR:
 21856 00003664 C3                      	retn
 21857                                  RET41P: 
 21858 00003665 5A                      	POP	DX
 21859 00003666 C3                      	retn
 21860                                  
 21861                                  ; 24/07/2018 - Retro DOS v3.0
 21862                                  
 21863                                  ;Break	<CHECK_WRITE_LOCK>
 21864                                  ;---------------------------------------------------------------------------
 21865                                  ;
 21866                                  ; Procedure Name : CHECK_WRITE_LOCK
 21867                                  ;
 21868                                  ; Inputs:
 21869                                  ;	output of SETUP
 21870                                  ;	ES:DI -> SFT
 21871                                  ; Function:
 21872                                  ;	check write lock
 21873                                  ; Outputs:
 21874                                  ;	Carry set if error
 21875                                  ;	Carry clear if ok
 21876                                  ;
 21877                                  ;----------------------------------------------------------------------------
 21878                                  
 21879                                  	; 04/05/2019 - Retro DOS v4.0
 21880                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21881                                  
 21882                                  CHECK_WRITE_LOCK:
 21883                                  	; MSDOS 6.0
 21884                                  	;test	byte [es:di+4],8
 21885 00003667 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21886                                  	;JZ	short write_cont			     ;no
 21887                                  	;;call	SET_ACC_ERR_DS
 21888                                  	;;retn
 21889                                  	;;jnz	SET_ACC_ERR_DS
 21890                                  	; 19/08/2018
 21891                                  	;jz	short write_cont
 21892                                  	;jmp	SET_ACC_ERR_DS
 21893                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21894 0000366C 7403                    	JZ	short write_cont
 21895                                  	;call	SET_ACC_ERR_DS
 21896                                  	;retn
 21897                                  	; 16/12/2022
 21898 0000366E E9AD01                  	jmp	SET_ACC_ERR_DS
 21899                                  
 21900                                  write_cont:				;
 21901 00003671 51                      	PUSH	CX			;save reg
 21902 00003672 09C9                    	OR	CX,CX			;
 21903 00003674 7501                    	JNZ	short Not_Truncate	;
 21904 00003676 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21905                                  Not_Truncate:				;
 21906 00003677 B080                    	MOV	AL,80H			;check write access
 21907 00003679 E8AC3B                  	call	LOCK_CHECK		;check lock
 21908 0000367C 59                      	POP	CX			;restore reg
 21909 0000367D 7305                    	JNC	short WRITE_OK		;lock ok
 21910 0000367F E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21911 00003682 73ED                    	JNC	short write_cont	;retry
 21912                                  WRITE_OK:				;
 21913 00003684 C3                      	retn				;
 21914                                  
 21915                                  ;Break	<CHECK_READ_LOCK>
 21916                                  ;---------------------------------------------------------------------------
 21917                                  ;
 21918                                  ; Procedure Name : CHECK_READ_LOC
 21919                                  ;
 21920                                  ; Inputs:
 21921                                  ;	ES:DI -> SFT
 21922                                  ;	output of SETUP
 21923                                  ; Function:
 21924                                  ;	check read lock
 21925                                  ; Outputs:
 21926                                  ;	Carry set if error
 21927                                  ;	Carry clear if ok
 21928                                  ;----------------------------------------------------------------------------
 21929                                  
 21930                                  CHECK_READ_LOCK:
 21931                                  	; MSDOS 6.0
 21932                                  	;test	byte [es:di+4],8
 21933 00003685 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21934                                  	;JZ	short do_retry			   	     ; no
 21935                                  	;;call	SET_ACC_ERR
 21936                                  	;;retn
 21937                                  	;;jnz	SET_ACC_ERR
 21938                                  	; 16/12/2022
 21939                                  	; 28/07/2019
 21940 0000368A 7403                    	jz	short do_retry
 21941 0000368C E99101                  	jmp	SET_ACC_ERR
 21942                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21943                                  	;JZ	short do_retry
 21944                                  	;call	SET_ACC_ERR
 21945                                  	;retn
 21946                                  do_retry:				;
 21947 0000368F 30C0                    	xor	al,al			;check read access
 21948 00003691 E8943B                  	call	LOCK_CHECK		;check lock
 21949 00003694 7305                    	JNC	short READLOCK_OK 	;lock ok
 21950 00003696 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21951 00003699 73F4                    	JNC	short do_retry		;retry
 21952                                  READLOCK_OK:				;
 21953                                  dw_ret_label:	; 09/02/2024
 21954 0000369B C3                      	retn				;
 21955                                  
 21956                                  ;============================================================================
 21957                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21958                                  ;============================================================================
 21959                                  ; 24/07/2018 - Retro DOS v3.0
 21960                                  ; 04/05/2019 - Retro DOS v4.0
 21961                                  
 21962                                  ;	TITLE	DISK2 - Disk utility routines
 21963                                  ;	NAME	Disk2
 21964                                  
 21965                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21966                                  ;
 21967                                  ;	DskRead
 21968                                  ;	DWRITE
 21969                                  ;	DSKWRITE
 21970                                  ;	HarderrRW
 21971                                  ;	SETUP
 21972                                  ;	BREAKDOWN
 21973                                  ;	READ_LOCK_VIOLATION
 21974                                  ;	WRITE_LOCK_VIOLATION
 21975                                  ;	DISKREAD
 21976                                  ;	SET_ACC_ERR_DS
 21977                                  ;	SET_ACC_ERR
 21978                                  ;	SETSFT
 21979                                  ;	SETCLUS
 21980                                  ;	AddRec
 21981                                  ;
 21982                                  ;	Revision history:
 21983                                  ;
 21984                                  ;		AN000 version 4.00 Jan. 1988
 21985                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21986                                  
 21987                                  ; 04/05/2019 - Retro DOS v4.0
 21988                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21989                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21990                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21991                                  
 21992                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21993                                  ;---------------------------------------------------------------------------
 21994                                  ;
 21995                                  ; Procedure Name : DSKREAD
 21996                                  ;
 21997                                  ; Inputs:
 21998                                  ;	DS:BX = Transfer addr
 21999                                  ;	CX = Number of sectors
 22000                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22001                                  ;	DX = Absolute record number	       (LOW)
 22002                                  ;	ES:BP = Base of drive parameters
 22003                                  ; Function:
 22004                                  ;	Call BIOS to perform disk read
 22005                                  ; Outputs:
 22006                                  ;	DI = CX on entry
 22007                                  ;	CX = Number of sectors unsuccessfully transfered
 22008                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22009                                  ;	Zero set if OK (from BIOS) (carry clear)
 22010                                  ;	Zero clear if error (carry clear)
 22011                                  ; SI Destroyed, others preserved
 22012                                  ;---------------------------------------------------------------------------
 22013                                  
 22014                                  DSKREAD:
 22015 0000369C 51                      	PUSH	CX
 22016                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22017 0000369D 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22018                                  	;mov	al,[es:bp+1]
 22019 000036A1 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22020 000036A5 53                      	PUSH	BX
 22021 000036A6 06                      	PUSH	ES
 22022 000036A7 E8660F                  	call	SETREAD
 22023 000036AA EB22                    	JMP	short DODSKOP
 22024                                  
 22025                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22026                                  ;--------------------------------------------------------------------------
 22027                                  ;
 22028                                  ; Procedure Name : DWRITE
 22029                                  ;
 22030                                  ; Inputs:
 22031                                  ;	DS:BX = Transfer address
 22032                                  ;	CX = Number of sectors
 22033                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22034                                  ;	DX = Absolute record number	       (LOW)
 22035                                  ;	ES:BP = Base of drive parameters
 22036                                  ;	[ALLOWED] must be set in case HARDERR called
 22037                                  ; Function:
 22038                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22039                                  ;	errors, will call HARDERRRW for further action.
 22040                                  ; Output:
 22041                                  ;	Carry set if error (currently, user FAILed to I 24)
 22042                                  ; BP preserved. All other registers destroyed.
 22043                                  ;----------------------------------------------------------------------------
 22044                                  
 22045                                  	;entry	DWRITE
 22046                                  DWRITE:
 22047 000036AC E81100                  	CALL	DSKWRITE
 22048 000036AF 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22049                                  
 22050                                  ;hkn; SS override
 22051 000036B1 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22052 000036B7 E83500                  	call	HARDERRRW
 22053 000036BA 3C01                    	CMP	AL,1			; Check for retry
 22054 000036BC 74EE                    	JZ	short DWRITE
 22055                                  
 22056                                  ; 09/02/2024
 22057                                  %if 0
 22058                                  	CMP	AL,3			; Check for FAIL
 22059                                  	CLC
 22060                                  	JNZ	short NO_CAR2 		; Ignore
 22061                                  	STC
 22062                                  NO_CAR2:
 22063                                  dw_ret_label:
 22064                                  	retn
 22065                                  %else
 22066                                  	; 09/02/2024 - Retro DOS v4.1
 22067 000036BE EB9E                    	jmp	short fail_ignore
 22068                                  %endif
 22069                                  
 22070                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22071                                  ;---------------------------------------------------------------------------
 22072                                  ;
 22073                                  ; Procedure Name : DSKWRITE
 22074                                  ;
 22075                                  ; Inputs:
 22076                                  ;	DS:BX = Transfer addr
 22077                                  ;	CX = Number of sectors
 22078                                  ;	DX = Absolute record number	       (LOW)
 22079                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22080                                  ;	ES:BP = Base of drive parameters
 22081                                  ; Function:
 22082                                  ;	Call BIOS to perform disk read
 22083                                  ; Outputs:
 22084                                  ;	DI = CX on entry
 22085                                  ;	CX = Number of sectors unsuccessfully transfered
 22086                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22087                                  ;	Zero set if OK (from BIOS) (carry clear)
 22088                                  ;	Zero clear if error (carry clear)
 22089                                  ; SI Destroyed, others preserved
 22090                                  ;
 22091                                  ;----------------------------------------------------------------------------
 22092                                  
 22093                                  	;entry	DSKWRITE
 22094                                  DSKWRITE:
 22095 000036C0 51                      	PUSH	CX
 22096                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22097 000036C1 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22098                                  	;mov	al,[es:bp+1]
 22099 000036C5 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22100 000036C9 53                      	PUSH	BX
 22101 000036CA 06                      	PUSH	ES
 22102 000036CB E8750F                  	call	SETWRITE
 22103                                  DODSKOP:
 22104 000036CE 8CD9                    	MOV	CX,DS		; Save DS
 22105 000036D0 1F                      	POP	DS		; DS:BP points to DPB
 22106 000036D1 1E                      	PUSH	DS
 22107                                  
 22108                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22109 000036D2 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22110 000036D6 E8B30E                  	call	DEVIOCALL2
 22111                                  
 22112 000036D9 8ED9                    	MOV	DS,CX		; Restore DS
 22113 000036DB 07                      	POP	ES		; Restore ES
 22114 000036DC 5B                      	POP	BX
 22115                                  
 22116                                  ;hkn; SS override
 22117 000036DD 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22118 000036E2 5F                      	POP	DI
 22119 000036E3 29F9                    	SUB	CX,DI
 22120 000036E5 F7D9                    	NEG	CX		; Number of sectors not transferred
 22121                                  
 22122                                  ;hkn; SS override
 22123 000036E7 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22124                                  	;test	ax,8000h
 22125                                  	; 17/12/2022
 22126                                  	;test	ah,80h
 22127 000036EB F6C480                  	test	ah,(STERR>>8)
 22128                                  	;test	AX,STERR
 22129 000036EE C3                      	retn
 22130                                  
 22131                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22132                                  ;---------------------------------------------------------------------------
 22133                                  ;
 22134                                  ; Procedure Name : HardErrRW
 22135                                  ;
 22136                                  ; Inputs:
 22137                                  ;	AX is error code from read or write
 22138                                  ;	Other registers set as per HARDERR
 22139                                  ; Function:
 22140                                  ;	Checks the error code for special extended
 22141                                  ;	errors and maps them if needed. Then invokes
 22142                                  ;	Harderr
 22143                                  ; Outputs:
 22144                                  ;	Of HARDERR
 22145                                  ; AX may be modified prior to call to HARDERR.
 22146                                  ; No other registers altered.
 22147                                  ;
 22148                                  ;---------------------------------------------------------------------------
 22149                                  
 22150                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22151                                  HARDERRRW:
 22152                                  	;cmp	al,0Fh
 22153 000036EF 3C0F                    	CMP	AL,error_I24_wrong_disk
 22154 000036F1 7512                    	JNZ	short DO_ERR				; Nothing to do
 22155                                  
 22156                                  	; MSDOS 3.3
 22157                                  	;push	ds
 22158                                  	;push	si
 22159                                  	;lds	si,[ss:CALLVIDRW]
 22160                                  	;mov	[ss:EXTERRPT+2], ds
 22161                                  	;mov	[ss:EXTERRPT], si
 22162                                  	;pop	si
 22163                                  	;pop	ds
 22164                                  
 22165                                  	; MSDOS 6.0
 22166 000036F3 50                      	push	ax
 22167 000036F4 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22168 000036F8 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22169 000036FC 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22170 00003700 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22171 00003704 58                      	pop	ax
 22172                                  DO_ERR:
 22173                                  	;;call	HARDERR
 22174                                  	;;retn
 22175                                  	; 16/12/2022
 22176                                  	; 10/06/2019
 22177 00003705 E9281B                  	jmp	HARDERR	
 22178                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22179                                  	;call	HARDERR
 22180                                  	;retn
 22181                                  
 22182                                  ; 24/07/2018 - Retro DOS v3.0
 22183                                  
 22184                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22185                                  ;----------------------------------------------------------------------------
 22186                                  ;
 22187                                  ; Procedure Name : SETUP
 22188                                  ;
 22189                                  ; Inputs:
 22190                                  ;	ES:DI point to SFT (value also in THISSFT)
 22191                                  ;	DMAAdd contains transfer address
 22192                                  ;	CX = Byte count
 22193                                  ;	DS = DOSDATA
 22194                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22195                                  ;		2nd of caller of caller.
 22196                                  ; Outputs:
 22197                                  ;	    CX = byte count
 22198                                  ;	    [THISDPB] = Base of drive parameters if file
 22199                                  ;		      = Pointer to device header if device or NET
 22200                                  ;	    ES:DI Points to SFT
 22201                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22202                                  ;	    [TRANS] = 0 (No transfers yet)
 22203                                  ;	    BytPos = Byte position in file
 22204                                  ;
 22205                                  ;	The following fields are relevant to local files (not devices) only:
 22206                                  ;
 22207                                  ;	    SecPos = Position of first sector (local files only)
 22208                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22209                                  ;	    [CLUSNUM] = First cluster (local files only)
 22210                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22211                                  ;	    [THISDRV] = Physical unit number (local files only)
 22212                                  ;
 22213                                  ;      RETURNS ONE LEVEL UP WITH:
 22214                                  ;	   CX = 0
 22215                                  ;	   CARRY = Clear
 22216                                  ;	IF AN ERROR IS DETECTED
 22217                                  ; All other registers destroyed
 22218                                  ;----------------------------------------------------------------------------
 22219                                  
 22220                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22221                                  
 22222                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22223                                  
 22224                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22225                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22226                                  
 22227                                  SETUP:
 22228                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22229                                  
 22230                                  	;lds 	si,[es:di+7]
 22231 00003708 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22232                                  
 22233                                  ;hkn; SS override
 22234 0000370C 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22235                                  
 22236                                  ;hkn; SS is DOSDATA
 22237 00003711 16                      	push	ss
 22238 00003712 1F                      	pop	ds
 22239                                  
 22240 00003713 8936[8A05]              	MOV	[THISDPB],SI
 22241                                  
 22242 00003717 8B1E[2C03]              	MOV	BX,[DMAADD]
 22243 0000371B 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22244 0000371F C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22245                                  	;mov	ax,[es:di+15h]
 22246 00003724 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22247                                  	;mov	dx,[es:di+17h]
 22248 00003728 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22249 0000372C 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22250 00003730 A3[CE05]                	MOV	[BYTPOS],AX
 22251                                  	;test	word [es:di+5],8080h
 22252 00003733 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22253 00003739 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22254 0000373B 06                      	PUSH	ES
 22255 0000373C C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22256                                  
 22257                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22258                                  	;;mov	bl,[es:bp+0]
 22259                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22260                                  	; 05/12/2022
 22261 00003740 268A5E00                	mov	bl,[es:bp]
 22262                                  	
 22263 00003744 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22264                                  	;mov	bx,[es:bp+2]
 22265 00003748 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22266                                  
 22267                                  	;; MSDOS 3.3
 22268                                  	;cmp	dx,bx
 22269                                  	;jnb	short EOFERR
 22270                                  	;div	bx
 22271                                  	;mov	[SECPOS],ax
 22272                                  	;mov	[BYTSECPOS],dx
 22273                                  	;mov	dx,ax
 22274                                  	;;and	al,[es:bp+4]
 22275                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22276                                  	;mov	[SECCLUSPOS],al
 22277                                  	;mov	ax,cx
 22278                                  	;;mov	cl,[es:bp+5]
 22279                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22280                                  	;shr	dx,cl
 22281                                  	;mov	[CLUSNUM],dx
 22282                                  	;pop	es
 22283                                  	;mov	cx,ax
 22284                                  
 22285                                  	; 04/05/2019 - Retro DOS v4.0
 22286                                  
 22287                                  	; MSDOS 6.0
 22288                                  ;M039: Optimized this section.
 22289 0000374C 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22290 0000374D E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22291 00003750 8916[CC05]              	MOV	[BYTSECPOS],DX
 22292 00003754 A3[C405]                	MOV	[SECPOS],AX
 22293 00003757 890E[C605]              	MOV	[SECPOS+2],CX
 22294 0000375B 89CA                    	MOV	DX,CX
 22295                                  
 22296 0000375D 89C3                    	MOV	BX,AX
 22297                                  	;and	bl,[es:bp+4]
 22298 0000375F 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22299 00003763 881E[7305]              	MOV	[SECCLUSPOS],BL
 22300                                  
 22301 00003767 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22302 0000376A 59                      	POP	CX			;CX = byte count.
 22303 0000376B 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22304                                  	;cmp	ax,[es:bp+0Dh]
 22305 0000376D 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22306 00003771 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22307                                  
 22308 00003773 A3[BC05]                	MOV	[CLUSNUM],AX
 22309 00003776 07                      	POP	ES			; ES:DI point to SFT
 22310                                  ;M039
 22311                                  
 22312                                  NOSETSTUFF:
 22313 00003777 89C8                    	MOV	AX,CX		; AX = Byte count.
 22314 00003779 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22315 0000377D 730C                    	JNC	short setup_OK	; Must be less than 64
 22316 0000377F A1[2C03]                	MOV	AX,[DMAADD]
 22317 00003782 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22318                                  				;    less than 64K since max value of CX
 22319                                  				;    is FFFF).
 22320 00003784 7501                    	JNZ	short NoDec
 22321 00003786 48                      	DEC	AX
 22322                                  NoDec:
 22323 00003787 89C1                    	MOV	CX,AX		; Can do this much
 22324 00003789 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22325                                  setup_OK:
 22326 0000378B C3                      	retn
 22327                                  
 22328                                  EOFERR:
 22329 0000378C 07                      	POP	ES		; ES:DI point to SFT
 22330 0000378D 31C9                    	XOR	CX,CX		; No bytes read
 22331                                  ;;;;;;;;;;; 7/18/86
 22332                                  	; MSDOS 3.3
 22333                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22334                                  ;;;;;;;;;;;
 22335                                  NOROOM:
 22336 0000378F 5B                      	POP	BX		; Kill return address
 22337 00003790 F8                      	CLC
 22338 00003791 C3                      	retn			; RETURN TO CALLER OF CALLER
 22339                                  
 22340                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22341                                  ;---------------------------------------------------------------------------
 22342                                  ;
 22343                                  ; Procedure Name : BREAKDOWN
 22344                                  ;
 22345                                  ; Inputs:
 22346                                  ;	CX = Length of disk transfer in bytes
 22347                                  ;	ES:BP = Base of drive parameters
 22348                                  ;	[BYTSECPOS] = Byte position within first sector
 22349                                  ;	DS = DOSDATA
 22350                                  ; Outputs:
 22351                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22352                                  ;	[SECCNT] = No. of whole sectors to transfer
 22353                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22354                                  ; AX, BX, DX destroyed. No other registers affected.
 22355                                  ;---------------------------------------------------------------------------
 22356                                  
 22357                                  BREAKDOWN:
 22358 00003792 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22359 00003795 89CB                    	MOV	BX,CX
 22360 00003797 09C0                    	OR	AX,AX
 22361 00003799 740E                    	JZ	short SAVFIR	; Partial first sector?
 22362                                  	;sub	ax,[es:bp+2]
 22363 0000379B 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22364 0000379F F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22365 000037A1 29C3                    	SUB	BX,AX		; Subtract from total length
 22366 000037A3 7304                    	JAE	short SAVFIR
 22367 000037A5 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22368 000037A7 31DB                    	XOR	BX,BX		; And no bytes are left
 22369                                  SAVFIR:
 22370 000037A9 A3[D205]                	MOV	[BYTCNT1],AX
 22371 000037AC 89D8                    	MOV	AX,BX
 22372 000037AE 31D2                    	XOR	DX,DX
 22373                                  	;div	word [ES:BP+2]
 22374 000037B0 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22375 000037B4 A3[D605]                	MOV	[SECCNT],AX
 22376 000037B7 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22377                                  	; MSDOS 3.3
 22378                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22379                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22380                                  	;CMP	AX,1
 22381                                  	;retnz
 22382                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22383                                  	;MOV	[BYTCNT2],AX
 22384                                  	;MOV	[SECCNT],DX	; DX = 0
 22385                                  _RET45:
 22386 000037BB C3                      	retn
 22387                                  
 22388                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22389                                  
 22390                                  ;----------------------------------------------------------------------------
 22391                                  ;
 22392                                  ; Procedure Name : READ_LOCK_VIOLATION
 22393                                  ;
 22394                                  ; ES:DI points to SFT. This entry used by NET_READ
 22395                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22396                                  ; Else do retrys.
 22397                                  ; ES:DI,DS,CX preserved
 22398                                  ;
 22399                                  ;----------------------------------------------------------------------------
 22400                                  
 22401                                  READ_LOCK_VIOLATION:
 22402 000037BC C606[7505]00            	MOV	byte [READOP],0
 22403                                  ERR_ON_CHECK:
 22404                                  	;;test	word [es:di+2],8000h
 22405                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22406                                  	;JNZ	short HARD_ERR
 22407                                  
 22408                                  	; 04/05/2019
 22409                                  	;test	byte [es:di+3],80h
 22410 000037C1 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22411 000037C6 7508                    	JNZ	short HARD_ERR
 22412                                  
 22413                                  	;PUSH	CX
 22414                                  	;;mov	cl,[es:di+2]
 22415                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22416                                  	;;and	cl,0F0h
 22417                                  	;AND	CL,SHARING_MASK
 22418                                  	;;cmp	cl,0
 22419                                  	;CMP	CL,SHARING_COMPAT
 22420                                  	;POP	CX
 22421                                  	;JNE	short NO_HARD_ERR
 22422                                  	; 21/09/2023
 22423 000037C8 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22424 000037CC 24F0                    	and	al,SHARING_MASK
 22425                                  	;cmp	al,SHARING_COMPAT
 22426                                  	;jne	short NO_HARD_ERR
 22427 000037CE 7505                    	jnz	short NO_HARD_ERR
 22428                                  HARD_ERR:
 22429 000037D0 E86B3A                  	call	LOCK_VIOLATION
 22430 000037D3 73E6                    	jnc	short _RET45		; User wants Retrys
 22431                                  NO_HARD_ERR:
 22432 000037D5 31C9                    	XOR	CX,CX			;No bytes transferred
 22433                                  	;mov	ax,21h
 22434 000037D7 B82100                  	MOV	AX,error_lock_violation
 22435 000037DA F9                      	STC
 22436                                  RET3:		; 06/02/2024
 22437 000037DB C3                      	retn
 22438                                  
 22439                                  ;----------------------------------------------------------------------------
 22440                                  ;
 22441                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22442                                  ;
 22443                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22444                                  ; This entry used by NET_WRITE
 22445                                  ;
 22446                                  ;----------------------------------------------------------------------------
 22447                                  
 22448                                  WRITE_LOCK_VIOLATION:
 22449 000037DC C606[7505]01            	MOV	byte [READOP],1
 22450 000037E1 EBDE                    	JMP	short ERR_ON_CHECK
 22451                                  
 22452                                  ; 04/05/2019 - Retro DOS v4.0
 22453                                  
 22454                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22455                                  
 22456                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22457                                  ;----------------------------------------------------------------------------
 22458                                  ;
 22459                                  ; Procedure Name : DISKREAD
 22460                                  ;
 22461                                  ; Inputs:
 22462                                  ;	Outputs of SETUP
 22463                                  ; Function:
 22464                                  ;	Perform disk read
 22465                                  ; Outputs:
 22466                                  ;    Carry clear
 22467                                  ;	CX = No. of bytes read
 22468                                  ;	ES:DI point to SFT
 22469                                  ;	SFT offset and cluster pointers updated
 22470                                  ;    Carry set
 22471                                  ;	CX = 0
 22472                                  ;	ES:DI point to SFT
 22473                                  ;	AX has error code
 22474                                  ;----------------------------------------------------------------------------
 22475                                  
 22476                                  ;hkn; called from disk.asm. DS already set up.
 22477                                  
 22478                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22479                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22480                                  
 22481                                  DISKREAD:
 22482                                  	;mov	ax,[es:di+11h]
 22483 000037E3 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22484                                  	;mov	bx,[es:di+13h]
 22485 000037E7 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22486 000037EB 2B06[CE05]              	SUB	AX,[BYTPOS]
 22487 000037EF 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22488 000037F3 721F                    	JB	short RDERR		;Read starts past EOF
 22489 000037F5 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22490 000037F7 09C0                    	OR	AX,AX
 22491 000037F9 7419                    	JZ	short RDERR		;Read starts at EOF
 22492 000037FB 39C8                    	CMP	AX,CX
 22493 000037FD 7302                    	JAE	short ENUF		;I/O fits
 22494 000037FF 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22495                                  ENUF:
 22496                                  	; MSDOS 3.3
 22497                                  	;test	byte [es:di+4],8
 22498                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22499                                  	;jnz	short SET_ACC_ERR
 22500                                  	;call	LOCK_CHECK
 22501                                  	;jnb	short _READ_OK
 22502                                  	;call	READ_LOCK_VIOLATION
 22503                                  	;jnb	short ENUF
 22504                                  	;retn
 22505                                  
 22506                                  	; MSDOS 6.0
 22507 00003801 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22508                                  	;JNC	short _READ_OK 		; There are no locks
 22509                                  	;retn
 22510                                  	; 06/02/2024
 22511 00003804 72D5                    	jc	short RET3
 22512                                  
 22513                                  _READ_OK:
 22514 00003806 C42E[8A05]              	LES	BP,[THISDPB]
 22515 0000380A E885FF                  	CALL	BREAKDOWN
 22516                                  
 22517                                  ; 10/02/2024
 22518                                  %if 0
 22519                                  	MOV	CX,[CLUSNUM] ; *
 22520                                  	call	FNDCLUS
 22521                                       	; MSDOS 6.0			;M022 conditional removed here
 22522                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22523                                  					; migrated from 330a - HKN
 22524                                  %else
 22525                                  	; 10/02/2024 - Retro DOS v4.2
 22526 0000380D E86613                  	call	FNDCLUS_X ; *
 22527 00003810 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22528                                  %endif
 22529                                  	;OR	CX,CX
 22530                                  	;JZ	short SKIPERR
 22531                                  	; 06/02/2024
 22532 00003812 E313                    	jcxz	SKIPERR
 22533                                  
 22534                                  RDERR:
 22535 00003814 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22536 00003816 E91802                  	jmp	WRTERR22
 22537                                  
 22538                                  ;RDLASTJ: 
 22539                                  	;JMP	RDLAST                  ;M039
 22540                                  
 22541                                  SETSFTJ2: 
 22542 00003819 E99600                  	JMP	SETSFT
 22543                                  
 22544                                  CANOT_READ:
 22545                                  	; MSDOS 3.3
 22546                                  	;POP	CX		;M039.
 22547                                  	; MSDOS 3.3 & MSDOS 6.0
 22548 0000381C 59                      	POP	CX              ;Clean stack.
 22549 0000381D 5B                      	POP	BX
 22550                                  
 22551                                  	;entry	SET_ACC_ERR_DS
 22552                                  SET_ACC_ERR_DS:
 22553                                  
 22554                                  ;hkn; SS is DOSDATA
 22555                                  	;Context DS
 22556 0000381E 16                      	push	ss
 22557 0000381F 1F                      	pop	ds
 22558                                  
 22559                                  	;entry	SET_ACC_ERR
 22560                                  SET_ACC_ERR:
 22561 00003820 31C9                    	XOR	CX,CX
 22562                                  	;mov	ax,5
 22563 00003822 B80500                  	MOV	AX,error_access_denied
 22564 00003825 F9                      	STC
 22565 00003826 C3                      	retn
 22566                                  
 22567                                  SKIPERR:
 22568 00003827 8916[BA05]              	MOV	[LASTPOS],DX
 22569 0000382B 891E[BC05]              	MOV	[CLUSNUM],BX
 22570 0000382F 833E[D205]00            	CMP	word [BYTCNT1],0
 22571 00003834 7405                    	JZ	short RDMID
 22572                                  
 22573 00003836 E8B713                  	call	BUFRD
 22574                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22575                                  	; 10/02/2024
 22576                                  	; ds=ss
 22577 00003839 72E5                    	jc	short SET_ACC_ERR
 22578                                  
 22579                                  RDMID:
 22580 0000383B 833E[D605]00            	CMP	word [SECCNT],0
 22581                                  	;JZ	RDLAST ; 10/08/2018
 22582 00003840 7453                    	jz	short RDLAST
 22583                                  
 22584 00003842 E83F14                  	call	NEXTSEC
 22585 00003845 72D2                    	JC	short SETSFTJ2
 22586                                  
 22587 00003847 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22588                                  ONSEC:
 22589 0000384C 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22590 00003850 8B0E[D605]              	MOV	CX,[SECCNT]
 22591 00003854 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22592                                  RDLP:
 22593 00003858 E85A14                  	call	OPTIMIZE
 22594                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22595                                  	; 10/02/2024
 22596                                  	; ds=ss
 22597 0000385B 72C3                    	jc	short SET_ACC_ERR
 22598                                  
 22599 0000385D 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22600 0000385E 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22601 0000385F 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22602                                  	;mov	byte [ALLOWED],38h
 22603 00003860 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22604 00003865 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22605                                  
 22606 00003869 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22607 0000386A 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22608                                  
 22609                                  	; 04/05/2019 - Retro DOS v4.0
 22610                                  
 22611                                  	; MSDOS 6.0
 22612 0000386B E8FD21                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22613                                  
 22614                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22615 0000386E E8DBFD                  	call	DREAD
 22616                                  
 22617                                  	; 10/02/2024
 22618                                  	; ds<>ss
 22619                                  
 22620                                  	; MSDOS 3.3 
 22621                                  	;pop	bx
 22622                                  	;pop	dx
 22623                                  	;jc	short CANOT_READ
 22624                                  	;add	bx,dx	; (bx = Extent end)
 22625                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22626                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22627                                  	;call	SETVISIT
 22628                                  	; ->***
 22629                                  ;M039
 22630                                  	; MSDOS 6.0 
 22631 00003871 59                      	pop	cx
 22632 00003872 5A                      	pop	dx
 22633 00003873 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22634 00003878 72A2                    	jc	short CANOT_READ
 22635                                  
 22636 0000387A 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22637                                  
 22638                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22639                                  ;            sectors, also termed an "Extent".)
 22640                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22641                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22642                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22643                                  ;
 22644                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22645                                  ;	buffers must be "read" into the transfer memory block, so that the
 22646                                  ;       transfer memory reflects the most recent data.
 22647                                  
 22648 0000387F E85E00                  	call	DskRdBufScan
 22649                                  
 22650                                  	;Context DS
 22651 00003882 16                      	push	ss
 22652 00003883 1F                      	pop	ds
 22653                                          
 22654 00003884 59                      	pop	cx
 22655 00003885 5B                              pop	bx
 22656                                  
 22657                                  ;       CX = # of sector remaining.
 22658                                  ;       BX = Next physical cluster.
 22659                                  
 22660                                  ;M039
 22661                                  
 22662                                  ;;;;;;;;
 22663                                  ;	; 25/07/2018 - Retro DOS v3.0
 22664                                  ;	; ***->
 22665                                  ;	; MSDOS 3.3
 22666                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22667                                  ;bufq:
 22668                                  ;;	DX = Extent start.
 22669                                  ;;	BX = Extent end.
 22670                                  ;;	 AL = Drive #.
 22671                                  ;;     DS:DI-> 1st buffer in queue.
 22672                                  ;
 22673                                  ;	;or	byte [di+5],20h
 22674                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22675                                  ;	;cmp	al,[di+4]	
 22676                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22677                                  ;	jnz	short bufq3
 22678                                  ;	;cmp	[di+6],dx
 22679                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22680                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22681                                  ;	;cmp	[di+6],bx
 22682                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22683                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22684                                  ;	
 22685                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22686                                  ;
 22687                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22688                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22689                                  ;;      as MRU (Most Recently Used).
 22690                                  ;
 22691                                  ;	;test	byte [di+5],40h
 22692                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22693                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22694                                  ;	pop	ax ; transfer address
 22695                                  ;	push	ax
 22696                                  ;	push	di
 22697                                  ;	push	dx
 22698                                  ;	;sub	dx,[di+6]
 22699                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22700                                  ;	neg	dx
 22701                                  ;
 22702                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22703                                  ;;           block.
 22704                                  ;
 22705                                  ;	mov	si,di
 22706                                  ;	mov	di,ax
 22707                                  ;	mov	ax,dx
 22708                                  ;	;mov	cx,[es:bp+6]	
 22709                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22710                                  ;	mul	cx
 22711                                  ;	add	di,ax
 22712                                  ;
 22713                                  ;	lea	si,[si+16]
 22714                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22715                                  ;	shr	cx,1
 22716                                  ;	push	es
 22717                                  ;	mov	es,[SS:DMAADD+2]
 22718                                  ;
 22719                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22720                                  ;;      DS:SI-> Buffer sector data.
 22721                                  ;;      ES:DI-> Destination within Transfer memory block.
 22722                                  ;
 22723                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22724                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22725                                  ;	;rep	movsb                   ;Copy last byte.
 22726                                  ;	jnc	short bufq1
 22727                                  ;	movsb
 22728                                  ;bufq1:
 22729                                  ;	pop	es
 22730                                  ;	pop	dx
 22731                                  ;	pop	di
 22732                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22733                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22734                                  ;bufq2:
 22735                                  ;	call	SCANPLACE
 22736                                  ;bufq3:
 22737                                  ;	call	SKIPVISIT
 22738                                  ;	jnz	short bufq
 22739                                  ;	
 22740                                  ;	push	ss
 22741                                  ;	pop	ds
 22742                                  ;	pop	cx
 22743                                  ;	pop	cx
 22744                                  ;	pop	bx	
 22745                                  ;bufq4:
 22746                                  ;;;;;;;
 22747 00003886 E30D                    	JCXZ	RDLAST
 22748                                  
 22749 00003888 E8C81B                  	call	IsEOF			; test for eof on fat size
 22750 0000388B 7325                    	JAE	short SETSFT
 22751                                  
 22752 0000388D B200                    	MOV	DL,0
 22753 0000388F FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22754 00003893 EBC3                    	JMP	short RDLP ; 19/05/2019
 22755                                  
 22756                                  RDLAST:
 22757 00003895 A1[D405]                	MOV	AX,[BYTCNT2]
 22758 00003898 09C0                    	OR	AX,AX
 22759 0000389A 7416                    	JZ	short SETSFT
 22760 0000389C A3[D205]                	MOV	[BYTCNT1],AX
 22761                                  
 22762 0000389F E8E213                  	call	NEXTSEC
 22763 000038A2 720E                    	JC	short SETSFT
 22764                                  
 22765 000038A4 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22766 000038AA E84313                  	call	BUFRD
 22767                                  	; 10/08/2018
 22768 000038AD 7303                    	JNC	short SETSFT
 22769                                  	;JMP	SET_ACC_ERR_DS
 22770                                  	; 10/02/2024
 22771                                  	; ds=ss
 22772 000038AF E96EFF                  	jmp	SET_ACC_ERR
 22773                                  
 22774                                  ;------------------------------------------------------------------------------
 22775                                  ;
 22776                                  ; Procedure Name : SETSFT
 22777                                  ; Inputs:
 22778                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22779                                  ;		and set cluster fields
 22780                                  ; Function:
 22781                                  ;	Update [THISSFT] based on the transfer
 22782                                  ; Outputs:
 22783                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22784                                  ;	ES:DI points to [THISSFT]
 22785                                  ;	CX No. of bytes transferred
 22786                                  ;	Carry clear
 22787                                  ;
 22788                                  ;----------------------------------------------------------------------------
 22789                                  
 22790                                  	;entry	SETSFT
 22791                                  
 22792                                  ; 26/07/2018 - Retro DOS v3.0
 22793                                  SETSFT:
 22794 000038B2 C43E[9E05]              	LES	DI,[THISSFT]
 22795                                  
 22796                                  ; Same as SETSFT except ES:DI already points to SFT
 22797                                  	;entry	SETCLUS
 22798                                  SETCLUS:	
 22799 000038B6 8B0E[B805]              	MOV	CX,[NEXTADD]
 22800 000038BA 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22801                                  	;;test	word [es:di+5],80h
 22802                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22803                                  	;JNZ	short ADDREC		; don't set clusters if device
 22804                                  
 22805                                  	; 04/05/2019 - Retro DOS v4.0
 22806                                  	;test	byte [es:di+5],80h
 22807 000038BE 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22808 000038C3 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22809                                  
 22810 000038C5 A1[BC05]                	MOV	AX,[CLUSNUM]
 22811                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22812                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22813 000038C8 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22814 000038CC A1[BA05]                	MOV	AX,[LASTPOS]
 22815                                  	;mov	[es:di+19h],ax
 22816 000038CF 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22817                                  
 22818                                  ;----------------------------------------------------------------------------
 22819                                  ;
 22820                                  ; Procedure : AddRec
 22821                                  ; Inputs:
 22822                                  ;	ES:DI points to SFT
 22823                                  ;	CX is No. Bytes transferred
 22824                                  ; Function:
 22825                                  ;	Update the SFT offset based on the transfer
 22826                                  ; Outputs:
 22827                                  ;	sf_position updated to point to first byte after transfer
 22828                                  ;	ES:DI points to SFT
 22829                                  ;	CX No. of bytes transferred
 22830                                  ;	Carry clear
 22831                                  ;----------------------------------------------------------------------------
 22832                                  
 22833                                  	;entry	AddRec
 22834                                  ADDREC:
 22835 000038D3 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22836                                  	;add	[es:di+15h],cx
 22837 000038D5 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22838                                  	;adc	word [es:di+17h], 0
 22839 000038D9 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22840                                  RET28:	
 22841 000038DE F8                      	CLC
 22842 000038DF C3                      	retn
 22843                                  
 22844                                  ; 25/07/2018
 22845                                  ; MSDOS 6.0
 22846                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22847                                  ;----------------------------------------------------------------------------
 22848                                  ;
 22849                                  ; Procedure Name : DskRdBufScan
 22850                                  ;
 22851                                  ; Inputs:
 22852                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22853                                  ;            sectors, also termed an "Extent".)
 22854                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22855                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22856                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22857                                  ;
 22858                                  ; Function:
 22859                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22860                                  ;	"read" into the transfer memory block, so that the transfer memory
 22861                                  ;	reflects the most recent data.
 22862                                  ;
 22863                                  ; Outputs:
 22864                                  ;       Transfer memory updated as required.
 22865                                  ;
 22866                                  ; Uses:
 22867                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22868                                  ;       SS override for all global variables.
 22869                                  ;
 22870                                  ; Notes:
 22871                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22872                                  ;	than the FIRST.
 22873                                  ;----------------------------------------------------------------------------
 22874                                  ;M039: Created
 22875                                  
 22876                                  ; 04/05/2019 - Retro DOS v4.0
 22877                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22878                                  
 22879                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22880                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22881                                  
 22882                                  ;procedure DskRdBufScan,NEAR
 22883                                  ;
 22884                                  ;ASSUME  DS:NOTHING
 22885                                  
 22886                                  DskRdBufScan:
 22887 000038E0 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22888 000038E6 743C                    	je	short bufx		     ; -no, skip all work.
 22889                                  
 22890 000038E8 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22891 000038ED 89DE                    	mov     si,bx
 22892 000038EF 01D1                    	add     cx,dx
 22893 000038F1 83D600                  	adc     si,0
 22894                                  
 22895 000038F4 E80C1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22896                                  	;mov	ax,[di+2]
 22897 000038F7 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22898 000038FA 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22899                                  		
 22900                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22901                                  	;;mov	al,[es:bp+0]
 22902                                  	;mov	al,[es:bp+DPB.DRIVE]
 22903                                  	; 15/12/2022
 22904 000038FE 268A4600                	mov	al,[es:bp]
 22905                                  
 22906                                  ;       BX:DX = Extent start.
 22907                                  ;       SI:CX = Extent end + 1.
 22908                                  ;          AL = Drive #.
 22909                                  ;       DS:DI-> 1st buffer in queue.
 22910                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22911                                  
 22912                                  bufq:	
 22913                                  	;cmp	al,[di+4]
 22914 00003902 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22915 00003905 7514                    	jne	short bufq1        	;  -no, jump.
 22916                                  
 22917                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22918                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22919                                  
 22920                                  	;cmp	bx,[di+8]
 22921 00003907 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22922 0000390A 7503                    	jne	short bufq01
 22923                                  	;cmp	dx,[di+6]
 22924 0000390C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22925                                  bufq01:
 22926 0000390F 770A                    	ja	short bufq1
 22927                                  
 22928                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22929                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22930                                  
 22931                                  	;cmp	si,[di+8]
 22932 00003911 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22933 00003914 7503                    	jne	short bufq02
 22934                                  	;cmp	cx,[di+6]
 22935 00003916 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22936                                  bufq02:
 22937 00003919 770A                    	ja	short bufq2
 22938                                  bufq1:	
 22939 0000391B 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22940 00003920 8B3D                    	mov	di,[di]
 22941                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22942 00003922 75DE                    	jne	short bufq		; -no, do next buffer
 22943                                  bufx:
 22944 00003924 C3                      	retn				;Exit.
 22945                                  
 22946                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22947                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22948                                  ;       as MRU (Most Recently Used).
 22949                                  
 22950                                  bufq2:	
 22951 00003925 50                      	push	ax
 22952                                  	;test	byte [di+5],40h
 22953 00003926 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22954 0000392A 7428                    	jz	short bufq3                    ; -no, jump.
 22955                                  
 22956                                  ;       SaveReg <cx,dx,si,di,es>
 22957 0000392C 51                      	push	cx
 22958 0000392D 52                      	push	dx
 22959 0000392E 56                      	push	si
 22960 0000392F 57                      	push	di
 22961 00003930 06                      	push	es
 22962                                  
 22963 00003931 89D0                    	mov     ax,dx
 22964                                  	;sub	ax,[di+6]
 22965 00003933 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22966 00003936 F7D8                    	neg	ax
 22967                                  
 22968                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22969                                  ;            block. (Note: the upper word of the sector # may be ignored
 22970                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22971                                  ;            is imposed by the input parameters of the disk read operation.)
 22972                                  
 22973                                  	;lea	si,[di+20]
 22974 00003938 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22975                                  	;mov	cx,[es:bp+2]
 22976 0000393B 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22977 0000393F F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22978                                  	;mov	di,[ss:TEMP_VAR]
 22979                                  	; 09/02/2024
 22980 00003941 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22981 00003946 01C7                    	add	di,ax
 22982                                  	;mov	es,[ss:TEMP_VAR2]
 22983 00003948 D1E9                    	shr	cx,1
 22984                                  
 22985                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22986                                  ;       DS:SI-> Buffer sector data.
 22987                                  ;       ES:DI-> Destination within Transfer memory block.
 22988                                  
 22989 0000394A F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22990                                  	;; 04/05/2019
 22991                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22992                                  	;;rep	movsb                   ;Copy last byte.
 22993                                  	;jnc	short bufq03	
 22994                                  	;movsb
 22995                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22996                                  	;adc	cx,0
 22997                                  	;rep	movsb
 22998                                  	; 22/09/2023
 22999 0000394C 7301                    	jnc	short bufq03
 23000 0000394E A4                      	movsb
 23001                                  bufq03:
 23002                                  	;RestoreReg <es,di,si,dx,cx>
 23003 0000394F 07                      	pop	es
 23004 00003950 5F                      	pop	di
 23005 00003951 5E                      	pop	si
 23006 00003952 5A                      	pop	dx
 23007 00003953 59                      	pop	cx
 23008                                  
 23009                                  ;       DS:DI -> current buffer.
 23010                                  bufq3:	
 23011 00003954 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23012                                          ;invoke SCANPLACE
 23013 00003956 E8BC1E                  	call	SCANPLACE
 23014 00003959 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23015 0000395E 58                      	pop	ax
 23016                                  	;jne	short bufq		; -no, jump.
 23017                                  	;;jmp	short bufx		; -yes, exit.
 23018                                  	;; 12/06/2019
 23019                                  	;retn
 23020                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23021 0000395F 75A1                    	jne	short bufq
 23022                                  	;jmp	short bufx
 23023                                  	; 09/02/2024
 23024 00003961 C3                      	retn	; Exit
 23025                                  
 23026                                  ;EndProc DskRdBufScan
 23027                                  
 23028                                  ;============================================================================
 23029                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23030                                  ;============================================================================
 23031                                  ; 04/05/2019 - Retro DOS v4.0
 23032                                  ; 24/07/2018 - Retro DOS v3.0
 23033                                  
 23034                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23035                                  ;----------------------------------------------------------------------------
 23036                                  ;
 23037                                  ; Procedure Name : DISKWRITE
 23038                                  ;
 23039                                  ; Inputs:
 23040                                  ;       Outputs of SETUP
 23041                                  ; Function:
 23042                                  ;       Perform disk write
 23043                                  ; Outputs:
 23044                                  ;    Carry clear
 23045                                  ;       CX = No. of bytes written
 23046                                  ;       ES:DI point to SFT
 23047                                  ;       SFT offset and cluster pointers updated
 23048                                  ;    Carry set
 23049                                  ;       CX = 0
 23050                                  ;       ES:DI point to SFT
 23051                                  ;       AX has error code
 23052                                  ;----------------------------------------------------------------------------
 23053                                  
 23054                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23055                                  
 23056                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23057                                  
 23058                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23059                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23060                                  
 23061                                  DISKWRITE:
 23062                                  	; MSDOS 3.3
 23063                                  	; IBMDOS.COM - Offset 436Dh
 23064                                  	;;test	byte [es:di+4],8
 23065                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23066                                  	;jz	short write_cont
 23067                                  	;jmp	SET_ACC_ERR_DS
 23068                                  ;write_cont:
 23069                                  	;push	cx
 23070                                  	;or	cx,cx
 23071                                  	;jnz	short Not_Truncate
 23072                                  	;;mov	cx,-1
 23073                                  	;dec	cx
 23074                                  ;Not_Truncate:
 23075                                  	;call	LOCK_CHECK
 23076                                  	;pop	cx
 23077                                  	;jnb	short _WRITE_OK
 23078                                  	;call	WRITE_LOCK_VIOLATION
 23079                                  	;jnb	short DISKWRITE
 23080                                  	;retn
 23081                                  
 23082                                  	; MSDOS 6.0
 23083 00003962 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23084                                  	; 19/08/2018
 23085 00003965 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23086 00003967 C3                      	retn
 23087                                  
 23088                                  WRTEOFJ:
 23089 00003968 E9D101                  	JMP     WRTEOF
 23090                                  
 23091                                  _WRITE_OK:
 23092                                   	; 27/07/2018
 23093                                  	; IBMDOS.COM - Offset 438Eh
 23094                                  	
 23095                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23096                                  	;and	word [es:di+5],0BFBFh
 23097 0000396B 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23098                                  				; Mark file as dirty, clear no date on close
 23099                                  ; 10/02/2024
 23100                                  %if 0
 23101                                  	; 04/05/2019 - Retro DOS v4.0
 23102                                  
 23103                                  	; MSDOS 6.0
 23104                                  	;mov 	ax,[es:di+11h]
 23105                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23106                                          MOV	[TEMP_VAR],AX                           ;M039
 23107                                  	;mov	ax,[es:di+13h]
 23108                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23109                                          MOV	[TEMP_VAR2],AX                          ;M039
 23110                                  %else
 23111                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23112                                  	;les	ax,[es:di+11h]
 23113 00003971 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23114 00003975 8C06[0E06]              	mov	[TEMP_VAR2],es
 23115 00003979 A3[0C06]                	mov	[TEMP_VAR],ax
 23116                                  %endif
 23117                                  
 23118                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23119                                  
 23120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23121 0000397C C42E[8A05]              	LES     BP,[THISDPB]
 23122                                  
 23123 00003980 E80FFE                  	call	BREAKDOWN
 23124                                  
 23125 00003983 A1[CE05]                	MOV     AX,[BYTPOS]
 23126 00003986 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23127 0000398A E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23128 0000398C 01C8                    	ADD     AX,CX
 23129 0000398E 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23130                                  
 23131                                  	;mov	bx,[es:bp+2]
 23132 00003991 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23133                                  
 23134                                  	; MSDOS 3.3
 23135                                  	;cmp	dx,bx
 23136                                  	;jnb	short WRTERR33
 23137                                  	;div	bx
 23138                                  	;mov	bx,ax
 23139                                  	;OR	DX,DX
 23140                                  	;JNZ	short CALCLUS
 23141                                  	;dec	ax
 23142                                  ;CALCLUS:
 23143                                  	; MSDOS 3.3
 23144                                  	;mov	cl,[es:bp+5]
 23145                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23146                                  	;shr	ax,cl
 23147                                  	;push	ax
 23148                                  	;push	dx
 23149                                  	;push	es
 23150                                  	;les	di,[THISSFT]
 23151                                  	;;mov	ax,[es:di+11h]
 23152                                  	;;mov	dx,[es:di+13h]
 23153                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23154                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23155                                  	;pop	es
 23156                                  	;;DX:AX = current file size (in bytes).
 23157                                  	;;div	word [es:bp+2]
 23158                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23159                                  	;mov	cx,ax
 23160                                  	;or	dx,dx
 23161                                  	;jz	short NORND
 23162                                  	;inc	ax
 23163                                  ;NORND:
 23164                                  	; MSDOS 6.0
 23165 00003995 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23166 00003998 89C6                    	MOV	SI,AX
 23167 0000399A 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23168                                  
 23169                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23170                                  
 23171 0000399E 09D2                    	OR	DX,DX
 23172 000039A0 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23173 000039A1 89CA                    	MOV	DX,CX			;M039
 23174 000039A3 7506                    	JNZ	short CALCLUS
 23175 000039A5 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23176 000039A8 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23177                                  
 23178                                  CALCLUS:
 23179                                  	; MSDOS 6.0
 23180 000039AB E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23181 000039AE 5A                      	POP	DX
 23182                                  
 23183                                  ;       AX = Last cluster to write.
 23184                                  ;       DX = # of bytes in last sector to write (the "tail").
 23185                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23186                                  
 23187 000039AF 50                      	PUSH	AX
 23188 000039B0 52                      	PUSH	DX
 23189                                  ;M039
 23190 000039B1 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23191 000039B5 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23192 000039B8 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23193 000039BB 890E[0E06]              	mov	[TEMP_VAR2],cx
 23194 000039BF 890E[CA05]              	mov	[VALSEC+2],cx
 23195 000039C3 89C1                    	mov	cx,ax
 23196 000039C5 89F3                    	mov	bx,si
 23197                                  
 23198                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23199                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23200                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23201                                  ;                     DX = # of bytes in last sector of current file.
 23202                                  ;M039
 23203 000039C7 09D2                    	OR	DX,DX
 23204 000039C9 7407                    	JZ	short NORND
 23205                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23206                                  	;ADC	word [VALSEC+2],0
 23207                                  	; 22/09/2023
 23208 000039CB 40                      	inc	ax  ; 0FFFFh -> 0
 23209 000039CC 7504                    	jnz	short NORND
 23210 000039CE FF06[CA05]              	inc	word [VALSEC+2]
 23211                                  NORND:	
 23212                                  	; MSDOS 3.3 & MSDOS 6.0
 23213 000039D2 A3[C805]                	MOV     [VALSEC],AX
 23214                                  
 23215                                  ;       [VALSEC] = Last sector of current file.
 23216                                  
 23217 000039D5 31C0                    	XOR     AX,AX
 23218 000039D7 A3[DE05]                	MOV     [GROWCNT],AX
 23219 000039DA A3[E005]                	MOV     [GROWCNT+2],AX
 23220 000039DD 58                      	POP     AX
 23221                                  
 23222                                  	; MSDOS 6.0
 23223 000039DE 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23224 000039E2 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23225 000039E6 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23226 000039E8 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23227 000039EA 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23228 000039EC 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23229 000039F0 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23230                                  lowsec:
 23231                                  	;MOV	DI,0			;F.C. >32mb
 23232                                  	; 22/09/2023
 23233 000039F2 31FF                    	xor	di,di
 23234                                  	; MSDOS 3.3 & MSDOS 6.0
 23235 000039F4 29CB                    	SUB	BX,CX			; Number of full sectors
 23236 000039F6 7253                    	JB	short NOGROW
 23237 000039F8 7444                    	JZ	short TESTTAIL
 23238                                  yesgrow:
 23239                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23240 000039FA 89D1                    	MOV     CX,DX
 23241 000039FC 93                      	XCHG    AX,BX
 23242                                  	;mul	word [es:bp+2]
 23243 000039FD 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23244                                  	
 23245                                  	; MSDOS 6.0
 23246 00003A01 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23247 00003A05 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23248 00003A08 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23249                                  	;mul	word [es:bp+2]
 23250 00003A0A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23251                                  	
 23252 00003A0E 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23253 00003A12 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23254 00003A14 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23255                                  
 23256                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23257 00003A17 29C8                    	SUB     AX,CX			; Take off current "tail"
 23258 00003A19 83DA00                  	SBB     DX,0			; 32-bit extension
 23259 00003A1C 01D8                    	ADD     AX,BX			; Add on new "tail"
 23260 00003A1E 83D200                  	ADC     DX,0			; ripple tim's head off
 23261 00003A21 EB21                    	JMP     SHORT SETGRW
 23262                                  
 23263                                  HAVSTART:
 23264                                  	;int 3
 23265 00003A23 89C1                    	MOV     CX,AX
 23266 00003A25 E87211                  	call	SKPCLP
 23267                                  	;JCXZ	DOWRTJ
 23268                                  	; 16/12/2022
 23269 00003A28 E353                    	jcxz	DOWRT
 23270                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23271                                  	;jcxz	DOWRTJ
 23272                                  
 23273 00003A2A E81313                  	call	ALLOCATE
 23274                                  	;JNC	short DOWRTJ
 23275                                  	; 16/12/2022
 23276 00003A2D 734E                    	jnc	short DOWRT
 23277                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23278                                  	;jnc	short DOWRTJ
 23279                                  
 23280                                  	;entry   WRTERR
 23281                                  WRTERR:
 23282 00003A2F B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23283                                  
 23284                                  	;entry WRTERR22
 23285                                  WRTERR22:
 23286 00003A31 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23287                                  
 23288                                  	; 27/07/2018
 23289                                  WRTERR33:
 23290                                  	;MOV	CX,0			;No bytes transferred
 23291 00003A34 31C9                    	XOR     CX,CX
 23292                                  
 23293 00003A36 C43E[9E05]              	LES     DI,[THISSFT]
 23294                                  	;CLC ; 19/05/2019
 23295                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23296                                  	; 16/12/2022
 23297                                  	;clc
 23298 00003A3A C3                      	retn
 23299                                  
 23300                                  	; 16/12/2022
 23301                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23302                                  ;DOWRTJ:
 23303                                  	;JMP	short DOWRT
 23304                                  
 23305                                  ACC_ERRWJ:
 23306                                  	; 10/08/2018
 23307                                  	;JMP	SET_ACC_ERRW
 23308                                  	; 16/12/2022
 23309                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23310                                  	; 10/02/2024
 23311                                  	; ds=ss
 23312 00003A3B E9E2FD                  	jmp	SET_ACC_ERR
 23313                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23314                                  	;;jmp	SET_ACC_ERRW	
 23315                                  
 23316                                  TESTTAIL:
 23317 00003A3E 29D0                    	SUB     AX,DX
 23318 00003A40 7609                    	JBE	short NOGROW
 23319 00003A42 31D2                    	XOR     DX,DX
 23320                                  SETGRW:
 23321 00003A44 A3[DE05]                	MOV	[GROWCNT],AX
 23322 00003A47 8916[E005]              	MOV	[GROWCNT+2],DX
 23323                                  NOGROW:
 23324 00003A4B 58                      	POP     AX
 23325                                  
 23326                                  ; 10/02/2024
 23327                                  %if 0
 23328                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23329                                  	call	FNDCLUS
 23330                                  %else
 23331                                  	; 10/02/2024 - Retro DOS v4.2
 23332 00003A4C E82711                  	call	FNDCLUS_X ; *+
 23333                                  %endif
 23334 00003A4F 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23335                                  
 23336 00003A51 891E[BC05]              	MOV     [CLUSNUM],BX
 23337 00003A55 8916[BA05]              	MOV     [LASTPOS],DX
 23338                                  
 23339 00003A59 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23340 00003A5B 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23341 00003A5D E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23342 00003A5F 51                      	PUSH    CX              ; No. of clusters short of first
 23343 00003A60 89C1                    	MOV     CX,AX
 23344 00003A62 E8DB12                  	call	ALLOCATE
 23345 00003A65 59                      	POP     CX
 23346 00003A66 72C7                    	JC	short WRTERR
 23347 00003A68 8B16[BA05]              	MOV     DX,[LASTPOS]
 23348 00003A6C 42                      	INC     DX
 23349 00003A6D 49                      	DEC     CX
 23350 00003A6E 7405                    	JZ	short NOSKIP
 23351 00003A70 E82711                  	call	SKPCLP
 23352 00003A73 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23353                                  NOSKIP:
 23354 00003A75 891E[BC05]              	MOV     [CLUSNUM],BX
 23355 00003A79 8916[BA05]              	MOV     [LASTPOS],DX
 23356                                  DOWRT:
 23357 00003A7D 833E[D205]00            	CMP     word [BYTCNT1],0
 23358 00003A82 7405                    	JZ	short WRTMID
 23359                                  	; 09/02/2024
 23360                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23361 00003A84 E8A211                  	call	BUFWRT
 23362 00003A87 72B2                    	JC	short ACC_ERRWJ
 23363                                  WRTMID:
 23364 00003A89 A1[D605]                	MOV     AX,[SECCNT]
 23365 00003A8C 09C0                    	OR      AX,AX
 23366                                  	; 20/11/2022
 23367 00003A8E 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23368 00003A90 0106[C405]              	ADD     [SECPOS],AX
 23369                                  	; 19/05/2019
 23370                                  	; MSDOS 6.0
 23371 00003A94 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23372 00003A99 E8E811                  	call	NEXTSEC
 23373                                  	; 16/12/2022
 23374 00003A9C 729D                    	JC	short ACC_ERRWJ
 23375                                  	;JC	short SET_ACC_ERRW	;M039
 23376 00003A9E C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23377 00003AA3 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23378 00003AA7 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23379 00003AAB 8B0E[D605]              	MOV     CX,[SECCNT]
 23380                                  WRTLP:
 23381 00003AAF E80312                  	call	OPTIMIZE
 23382 00003AB2 7248                    	JC	short SET_ACC_ERRW
 23383                                  	; 16/12/2022
 23384                                  	;JC	short ACC_ERRWJ
 23385                                  
 23386                                  ;M039
 23387                                  ;       DI = Next physical cluster.
 23388                                  ;       AX = # sectors remaining.
 23389                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23390                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23391                                  ;	     sectors, also termed an "Extent".)
 23392                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23393                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23394                                  ;
 23395                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23396                                  ;	are in Extent; they are being over-written.
 23397                                  
 23398 00003AB4 57                      	push    di
 23399 00003AB5 50                      	push    ax
 23400                                  
 23401                                  	; MSDOS 3.3
 23402                                  	; IBMDOS.COM (1987) - Offset 4497h
 23403                                  	;push	dx
 23404                                  	;push	bx
 23405                                  	;mov	al,[es:bp]
 23406                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23407                                  	;mov	bx,cx
 23408                                  	;add	bx,dx	; (bx = Extent end)
 23409                                  
 23410                                  ;	DX = Extent start.
 23411                                  ;	BX = Extent end.
 23412                                  ;	AL = Drive #.
 23413                                  
 23414                                  	;call	SETVISIT
 23415                                  
 23416                                  ;wbufq1:
 23417                                  	;;or	byte [di+5],20h
 23418                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23419                                  	;;cmp	al,[di+4]
 23420                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23421                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23422                                  	;;cmp	[di+6],dx
 23423                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23424                                  	;jb	short wbufq2
 23425                                  	;;cmp	[di+6],bx
 23426                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23427                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23428                                  
 23429                                  	;; Buffer sector is in the Extent
 23430                                  
 23431                                  	;;mov	word [di+4],20FFh
 23432                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23433                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23434                                  	;				; .buf_flags, AH = 0, reset/clear
 23435                                  	;call	SCANPLACE
 23436                                  ;wbufq2:
 23437                                  	;call	SKIPVISIT
 23438                                  	;jnz	short wbufq1
 23439                                  	;pop	bx
 23440                                  	;pop	dx
 23441                                  
 23442                                          ; MSDOS 6.0
 23443 00003AB6 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23444                                  
 23445                                  ;ASSUME DS:NOTHING
 23446                                  ;M039
 23447                                  	; MSDOS 3.3 & MSDOS 6.0
 23448                                  ;hkn; SS override for DMAADD and ALLOWED
 23449 00003AB9 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23450                                  	;mov	byte [ss:ALLOWED],38h
 23451 00003ABE 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23452                                  
 23453                                  ;	put logic from DWRITE in-line here so we can modify it
 23454                                  ;	for DISK FULL conditions.
 23455                                  
 23456                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23457                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23458                                  
 23459                                  	; 16/12/2022
 23460                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23461                                  	;call	DWRITE
 23462                                  
 23463                                  ;DWRITE_OKAY:
 23464                                  
 23465                                  	; 16/12/2022
 23466                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23467                                  	;pop	cx
 23468                                  	;pop	bx
 23469                                  	;push	ss
 23470                                  	;pop	ds
 23471                                  	;jc	short SET_ACC_ERRW
 23472                                  	;jcxz	WRTLAST
 23473                                  	;mov	dl,0
 23474                                  	;inc	word [LASTPOS]
 23475                                  	;jmp	short WRTLP
 23476                                  
 23477                                  	; 16/12/2022
 23478                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23479                                  DWRITE_LUP:
 23480                                  	; 23/07/2019 - Retro DOS v3.2
 23481                                  
 23482                                  	; MSDOS 6.0
 23483 00003AC4 E8F9FB                  	call	DSKWRITE
 23484 00003AC7 7417                    	jz	short DWRITE_OKAY
 23485                                  
 23486                                  ;;	int	3
 23487                                  
 23488 00003AC9 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23489 00003ACB 7423                    	jz	short DWRITE_DISK_FULL
 23490                                  
 23491                                  	; 16/12/2022
 23492                                  
 23493                                  ;;hkn; SS override
 23494 00003ACD 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23495 00003AD3 E819FC                  	call	HARDERRRW
 23496 00003AD6 3C01                    	CMP	AL,1		; Check for retry
 23497 00003AD8 74EA                    	JZ	short DWRITE_LUP
 23498                                  
 23499                                  	; 16/12/2022
 23500                                  	; 23/07/2019
 23501                                  	;POP	CX ; *4*
 23502                                  	;POP	BX ; *5*
 23503                                  	;
 23504                                  	;push	ss
 23505                                  	;pop	ds
 23506                                  	;
 23507                                  
 23508                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23509                                  
 23510                                  	; 16/12/2022
 23511 00003ADA 3C03                    	CMP	AL,3		; Check for FAIL
 23512 00003ADC F8                      	CLC
 23513 00003ADD 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23514 00003ADF F9                      	STC
 23515                                  
 23516                                  DWRITE_OKAY:
 23517                                  	; 16/12/2022
 23518                                  	; 23/07/2019
 23519                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23520 00003AE0 59                      	POP	CX ; *4*
 23521 00003AE1 5B                      	POP	BX ; *5*
 23522                                  
 23523                                  ;       CX = # sectors remaining.
 23524                                  ;       BX = Next physical cluster.
 23525                                  
 23526                                  ;hkn; SS override
 23527                                          ;Context DS
 23528                                  	; 16/12/2022
 23529                                  	;push	ss
 23530                                  	;pop	ds
 23531                                  
 23532                                  	; 10/02/2024
 23533                                  	; 16/12/2022
 23534                                  	;jc	short SET_ACC_ERRW
 23535                                  
 23536                                  	; 16/12/2022
 23537 00003AE2 16                      	push	ss
 23538 00003AE3 1F                      	pop	ds
 23539                                  
 23540                                  	; 10/02/2024
 23541 00003AE4 7216                    	jc	short SET_ACC_ERRW
 23542                                  
 23543 00003AE6 E317                    	JCXZ    WRTLAST
 23544                                  
 23545                                  	; 10/02/2024
 23546 00003AE8 B200                    	MOV	DL,0
 23547                                  	;xor	dl,dl ; 23/07/2019
 23548 00003AEA FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23549 00003AEE EBBF                    	JMP     short WRTLP
 23550                                  
 23551                                  	; 23/07/2019 - Retro DOS v3.2
 23552                                  	; 09/08/2018
 23553                                  	; MSDOS 6.0
 23554                                  DWRITE_DISK_FULL:
 23555                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23556                                  	; 16/12/2022
 23557 00003AF0 16                      	push	ss
 23558 00003AF1 1F                      	pop	ds
 23559 00003AF2 59                      	pop	cx		; unjunk stack
 23560 00003AF3 5B                      	pop	bx
 23561 00003AF4 C606[0B06]01            	mov	byte [DISK_FULL],1
 23562                                  	;stc
 23563 00003AF9 E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23564                                  
 23565                                  SET_ACC_ERRW:
 23566                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23567                                  	; 10/02/2024
 23568                                  	; ds=ss
 23569 00003AFC E921FD                  	jmp	SET_ACC_ERR
 23570                                  
 23571                                  WRTLAST:
 23572 00003AFF A1[D405]                	MOV     AX,[BYTCNT2]
 23573 00003B02 09C0                    	OR      AX,AX
 23574 00003B04 7413                    	JZ	short FINWRT
 23575 00003B06 A3[D205]                	MOV     [BYTCNT1],AX
 23576 00003B09 E87811                  	call	NEXTSEC
 23577 00003B0C 72EE                    	JC	short SET_ACC_ERRW
 23578 00003B0E C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23579 00003B14 E81211                  	call	BUFWRT
 23580 00003B17 72E3                    	JC	short SET_ACC_ERRW
 23581                                  FINWRT:
 23582 00003B19 C43E[9E05]              	LES     DI,[THISSFT]
 23583 00003B1D A1[DE05]                	MOV     AX,[GROWCNT]
 23584 00003B20 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23585 00003B24 09C0                    	OR      AX,AX
 23586 00003B26 7502                    	JNZ	short UPDATE_size
 23587 00003B28 E30F                    	JCXZ    SAMSIZ
 23588                                  UPDATE_size:
 23589                                  	;add	[es:di+11h],ax
 23590 00003B2A 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23591                                  	;adc	[es:di+13h],cx
 23592 00003B2E 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23593                                  
 23594                                  ; Make sure that all other SFT's see this growth also.
 23595                                  
 23596 00003B32 B80100                  	MOV     AX,1
 23597                                  ;if installed
 23598                                  	;Call	JShare + 14 * 4
 23599 00003B35 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23600                                  ;else
 23601                                  ;	Call    ShSU
 23602                                  ;endif
 23603                                  
 23604                                  SAMSIZ:
 23605 00003B39 E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23606                                  
 23607                                  	; 16/12/2022
 23608                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23609                                  ;SET_ACC_ERRW:
 23610                                  	;jmp	SET_ACC_ERR_DS
 23611                                  
 23612                                  WRTEOF:
 23613 00003B3C 89C1                    	MOV     CX,AX
 23614 00003B3E 09D1                    	OR      CX,DX
 23615 00003B40 746A                    	JZ	short KILLFIL
 23616 00003B42 83E801                  	SUB     AX,1
 23617 00003B45 83DA00                  	SBB     DX,0
 23618                                  
 23619                                  	; MSDOS 3.3
 23620                                  	;;div	word [es:bp+2]
 23621                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23622                                  	;;mov	cl,[es:bp+5]
 23623                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23624                                  	;shr	ax,cl
 23625                                  
 23626                                  	; MSDOS 6.0
 23627 00003B48 53                      	PUSH	BX
 23628                                  	;mov	bx,[es:bp+2]
 23629 00003B49 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23630 00003B4D E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23631 00003B50 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23632 00003B51 89CA                    	MOV	DX,CX			      ;M039
 23633 00003B53 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23634 00003B57 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23635                                  
 23636 00003B5A 89C1                    	MOV     CX,AX
 23637 00003B5C E81B10                  	call	FNDCLUS
 23638                                  SET_ACC_ERRWJ2:
 23639 00003B5F 729B                    	JC	short SET_ACC_ERRW
 23640                                  
 23641 00003B61 E324                    	JCXZ    RELFILE
 23642 00003B63 E8DA11                  	call	ALLOCATE
 23643                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23644                                  	; 16/12/2022
 23645 00003B66 7303                    	jnc	short UPDATE
 23646 00003B68 E9C4FE                  	JMP	WRTERR
 23647                                  UPDATE:
 23648 00003B6B C43E[9E05]              	LES	DI,[THISSFT]
 23649 00003B6F A1[CE05]                	MOV	AX,[BYTPOS]
 23650                                  	;mov	[es:di+11h],ax
 23651 00003B72 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23652 00003B76 A1[D005]                	MOV	AX,[BYTPOS+2]
 23653                                  	;mov	[es:di+13h],ax
 23654 00003B79 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23655                                  ;
 23656                                  ; Make sure that all other SFT's see this growth also.
 23657                                  ;
 23658 00003B7D B80200                  	MOV     AX,2
 23659                                  ;if installed
 23660                                  	;Call	JShare + 14 * 4
 23661 00003B80 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23662                                  ;else
 23663                                  ;	Call    ShSU
 23664                                  ;endif
 23665 00003B84 31C9                    	XOR     CX,CX ; 0
 23666                                  	;jmp	ADDREC
 23667                                  	; 08/02/2024
 23668 00003B86 C3                      	retn
 23669                                  
 23670                                  	; 16/12/2022
 23671                                  ;WRTERRJ: 
 23672                                  	;JMP	WRTERR
 23673                                  
 23674                                  ;;;;;;;;;;;;;;;; 7/18/86
 23675                                  ;;;;;;;;;;;;;;;;
 23676                                  
 23677                                  RELFILE:
 23678                                  	; MSDOS 6.0
 23679 00003B87 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23680 00003B88 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23681                                  	;cmp	dx,[es:di+19h]
 23682 00003B8C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23683 00003B90 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23684                                  	;mov	[es:di+19h],0
 23685 00003B92 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23686                                  	;mov	dx,[es:di+0Bh]
 23687 00003B98 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23688                                  	;mov	[es:di+35h],dx
 23689 00003B9C 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23690                                  SKIPRESET:                            		;AN002; BL
 23691 00003BA0 07                      	POP     ES                    		;AN002; BL
 23692                                  ;
 23693 00003BA1 BAFFFF                  	MOV     DX,0FFFFH
 23694 00003BA4 E84712                  	call	RELBLKS
 23695                                  	; 16/12/2022
 23696                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23697 00003BA7 73C2                    	jnc	short UPDATE
 23698                                  SET_ACC_ERRWJ:
 23699                                  	;JC	short SET_ACC_ERRWJ2
 23700                                  	;JMP	SHORT UPDATE
 23701                                  	; 16/12/2022
 23702                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23703                                  	; 10/02/2024
 23704                                  	; ds=ss
 23705 00003BA9 E974FC                  	jmp	SET_ACC_ERR
 23706                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23707                                  	;JC	short SET_ACC_ERRWJ2
 23708                                  	;JMP	SHORT UPDATE
 23709                                  
 23710                                  KILLFIL:
 23711 00003BAC 31DB                    	XOR     BX,BX
 23712 00003BAE 06                      	PUSH    ES
 23713 00003BAF C43E[9E05]              	LES     DI,[THISSFT]
 23714                                  	;mov	[es:di+19h],bx
 23715 00003BB3 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23716                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23717 00003BB7 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23718                                  	;xchg	bx,[es:di+0Bh]
 23719 00003BBB 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23720 00003BBF 07                      	POP	ES
 23721                                  
 23722 00003BC0 09DB                    	OR	BX,BX
 23723                                  	;JZ	short UPDATEJ
 23724                                  	; 16/12/2022
 23725 00003BC2 74A7                    	jz	short UPDATE
 23726                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23727                                  	;jz	short UPDATEJ
 23728                                  
 23729                                  ;; 10/23/86 FastOpen update
 23730 00003BC4 06                      	PUSH	ES              ; since first cluster # is 0
 23731 00003BC5 55                      	PUSH	BP              ; we must delete the old cache entry
 23732 00003BC6 50                      	PUSH	AX
 23733 00003BC7 51                      	PUSH	CX
 23734 00003BC8 52                      	PUSH	DX
 23735 00003BC9 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23736                                  	; 15/12/2022
 23737 00003BCD 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23738                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23739                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23740 00003BD1 89D9                    	MOV	CX,BX                    ; first cluster #
 23741 00003BD3 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23742 00003BD5 E8ABEA                  	call	FastOpen_Update          ; call fastopen
 23743 00003BD8 5A                      	POP	DX
 23744 00003BD9 59                      	POP	CX
 23745 00003BDA 58                      	POP	AX
 23746 00003BDB 5D                      	POP	BP
 23747 00003BDC 07                      	POP	ES
 23748                                  ;; 10/23/86 FastOpen update
 23749                                  
 23750 00003BDD E80C12                  	call	RELEASE
 23751 00003BE0 72C7                    	JC	short SET_ACC_ERRWJ
 23752                                  UPDATEJ:
 23753                                  	; 20/11/2022
 23754 00003BE2 EB87                    	JMP	short UPDATE ; 10/08/2018
 23755                                  
 23756                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23757                                  ;----------------------------------------------------------------------------
 23758                                  ;
 23759                                  ; Procedure Name : DskWrtBufPurge
 23760                                  ;
 23761                                  ; Inputs:
 23762                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23763                                  ;	     sectors, also termed an "Extent".)
 23764                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23765                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23766                                  ;
 23767                                  ; Function:
 23768                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23769                                  ;	are in Extent; they are being over-written.
 23770                                  ;
 23771                                  ; Outputs:
 23772                                  ;       (Same as Input.)
 23773                                  ; Uses:
 23774                                  ;       All registers except DS,AX,SI,DI preserved.
 23775                                  ;       SS override for all global variables.
 23776                                  ;----------------------------------------------------------------------------
 23777                                  ;M039: Created
 23778                                  
 23779                                  ;procedure   DskWrtBufPurge,NEAR
 23780                                  ;
 23781                                  ;ASSUME  DS:NOTHING
 23782                                  
 23783                                  ; 04/05/2019 - Retro DOS v4.0
 23784                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23785                                  
 23786                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23787                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23788                                  
 23789                                  DskWrtBufPurge:
 23790                                  	;SaveReg <bx,cx>
 23791 00003BE4 53                      	push	bx
 23792 00003BE5 51                      	push	cx
 23793                                  
 23794 00003BE6 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23795 00003BEB 89DE                    	mov	si,bx
 23796 00003BED 01D1                    	add	cx,dx
 23797 00003BEF 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23798                                  
 23799                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23800                                  	;;mov	al,[es:bp+0]
 23801                                  	;mov	al,[es:bp+DPB.DRIVE]
 23802                                  	; 15/12/2022
 23803 00003BF2 268A4600                	mov	al,[es:bp]
 23804                                  
 23805                                  ;	BX:DX = Extent start.
 23806                                  ;	SI:CX = Extent end + 1.
 23807                                  ;	AL = Drive #
 23808                                  
 23809 00003BF6 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23810 00003BFC 7431                    	je	short nosc		; -no, jump.
 23811                                  
 23812                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23813                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23814                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23815                                  
 23816 00003BFE 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23817 00003C03 752A                    	jne	short nosc		; -no, jump.
 23818                                  
 23819 00003C05 50                      	push    ax
 23820 00003C06 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23821 00003C0A 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23822                                  
 23823                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23824                                  	;jbe	short sc5		; -yes, jump.
 23825                                  
 23826 00003C0F 39FE                    	cmp	si,di
 23827 00003C11 7502                    	jne	short sc01
 23828 00003C13 39C1                    	cmp	cx,ax
 23829                                  sc01: 
 23830 00003C15 7617                    	jbe	short sc5
 23831                                  
 23832 00003C17 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23833 00003C1C 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23834                                  	
 23835                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23836                                  	;jae	short sc5		; -yes, jump.
 23837                                  
 23838 00003C1F 39FB                    	cmp	bx,di
 23839 00003C21 7502                    	jne	short sc02
 23840 00003C23 39C2                    	cmp	dx,ax
 23841                                  sc02:
 23842 00003C25 7307                    	jnb	short sc5
 23843                                  
 23844 00003C27 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23845                                  sc5:	
 23846 00003C2E 58                      	pop     ax
 23847                                  
 23848                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23849                                  ;	written.
 23850                                  
 23851                                  nosc:	
 23852 00003C2F E8D11B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23853                                  
 23854                                  _bufq:	
 23855                                  	;cmpo	al,[di+4]
 23856 00003C32 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23857 00003C35 7527                    	jne	short bufq5		; -no, jump.
 23858                                  
 23859                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23860                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23861                                  
 23862                                  	;cmp	bx,[di+8]
 23863 00003C37 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23864 00003C3A 7503                    	jne	short bufq04
 23865                                  	;cmp	dx,[di+6]
 23866 00003C3C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23867                                  bufq04:
 23868 00003C3F 771D                    	ja	short bufq5
 23869                                  
 23870                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23871                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23872                                  
 23873                                  	;cmp	si,[di+8]
 23874 00003C41 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23875 00003C44 7503                    	jne	short bufq05
 23876                                  	;cmp	cx,[di+6]
 23877 00003C46 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23878                                  bufq05:
 23879 00003C49 7613                    	jbe	short bufq5
 23880                                  
 23881                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23882                                  
 23883                                  	;test	byte [di+5],40h
 23884 00003C4B F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23885 00003C4F 7403                    	jz	short bufq4		; -no, jump.
 23886 00003C51 E8301E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23887                                  bufq4:
 23888                                  	;mov	word [di+4],20FFh
 23889 00003C54 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23890                                  
 23891 00003C59 E8B91B                  	call	SCANPLACE
 23892 00003C5C EB02                    	jmp     short bufq6
 23893                                  bufq5: 
 23894 00003C5E 8B3D                    	mov     di,[di]
 23895                                  	;mov	di,[di+BUFFINFO.buf_next]
 23896                                  bufq6: 
 23897 00003C60 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23898 00003C65 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23899                                  	
 23900                                  	;RestoreReg <cx,bx>
 23901 00003C67 59                      	pop	cx
 23902 00003C68 5B                      	pop	bx
 23903 00003C69 C3                      	retn
 23904                                  
 23905                                  ;EndProc DskWrtBufPurge
 23906                                  
 23907                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23908                                  ;----------------------------------------------------------------------------
 23909                                  ;
 23910                                  ; Procedure Name : DIV32
 23911                                  ;
 23912                                  ; Inputs:
 23913                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23914                                  ; Function:
 23915                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23916                                  ; Outputs:
 23917                                  ;       CX:AX = quotient , DX= remainder
 23918                                  ; Uses:
 23919                                  ;       All registers except AX,CX,DX preserved.
 23920                                  ;----------------------------------------------------------------------------
 23921                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23922                                  
 23923                                  ; 04/05/2019 - Retro DOS v4.0
 23924                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23925                                  
 23926                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23927                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23928                                  
 23929                                  DIV32:
 23930 00003C6A 81FB0002                	cmp	bx,512
 23931 00003C6E 7515                    	jne	short div5
 23932                                  
 23933 00003C70 89D1                    	mov	cx,dx
 23934 00003C72 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23935 00003C74 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23936 00003C78 88E0                    	mov	al,ah
 23937 00003C7A 88CC                    	mov	ah,cl
 23938 00003C7C 88E9                    	mov	cl,ch
 23939 00003C7E 30ED                    	xor	ch,ch
 23940 00003C80 D1E9                    	shr	cx,1
 23941 00003C82 D1D8                    	rcr	ax,1
 23942 00003C84 C3                      	retn
 23943                                  div5:	
 23944 00003C85 89C1                    	mov	cx,ax
 23945 00003C87 89D0                    	mov	ax,dx
 23946 00003C89 31D2                    	xor	dx,dx
 23947 00003C8B F7F3                    	div	bx              ; 0:AX/BX
 23948 00003C8D 91                      	xchg	cx,ax
 23949 00003C8E F7F3                    	div	bx              ; DX:AX/BX
 23950 00003C90 C3                      	retn
 23951                                  
 23952                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23953                                  ;----------------------------------------------------------------------------
 23954                                  ;
 23955                                  ; Procedure Name : SHR32
 23956                                  ;
 23957                                  ; Inputs:
 23958                                  ;	DX:AX = 32 bit sector number
 23959                                  ; Function:
 23960                                  ;       Perform 32 bit shift right
 23961                                  ; Outputs:
 23962                                  ;	AX = cluster number
 23963                                  ;	ZF = 1 if no error
 23964                                  ;	   = 0 if error (cluster number > 64k)
 23965                                  ; Uses:
 23966                                  ;       DX,CX
 23967                                  ;---------------------------------------------------------------------------
 23968                                  ; M017	- SHR32 rewritten for better performance
 23969                                  ; M039	- Additional optimization
 23970                                  
 23971                                  ; 04/05/2019 - Retro DOS v4.0
 23972                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23973                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23974                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23975                                  
 23976                                  SHR32:
 23977                                  	;mov	cl,[es:bp+5]
 23978 00003C91 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23979 00003C95 30ED                    	xor	ch,ch	    ;ZF=1
 23980 00003C97 E306                    	jcxz	norota
 23981                                  
 23982                                  rotashft2:
 23983 00003C99 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23984 00003C9B D1D8                    	rcr	ax,1	    ;ZF not affected.
 23985 00003C9D E2FA                    	loop	rotashft2
 23986                                  norota:
 23987 00003C9F C3                      	retn
 23988                                  
 23989                                  ;============================================================================
 23990                                  ; DIR.ASM, MSDOS 6.0, 1991
 23991                                  ;============================================================================
 23992                                  ; 27/07/2018 - Retro DOS v3.0
 23993                                  ; 19/05/2019 - Retro DOS v4.0
 23994                                  
 23995                                  ;	TITLE	DIR - Directory and path cracking
 23996                                  ;	NAME	Dir
 23997                                  
 23998                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23999                                  ;---------------------------------------------------------------------------
 24000                                  ;
 24001                                  ; Procedure Name : FINDENTRY,SEARCH
 24002                                  ;
 24003                                  ; Inputs:
 24004                                  ;	[THISDPB] set
 24005                                  ;	[SECCLUSPOS] = 0
 24006                                  ;	[DIRSEC] = Starting directory sector number
 24007                                  ;	[CLUSNUM] = Next cluster of directory
 24008                                  ;	[CLUSFAC] = Sectors/Cluster
 24009                                  ;	[NAME1] = Name to look for
 24010                                  ; Function:
 24011                                  ;	Find file name in disk directory.
 24012                                  ;	"?" matches any character.
 24013                                  ; Outputs:
 24014                                  ;	Carry set if name not found
 24015                                  ;	ELSE
 24016                                  ;	Zero set if attributes match (always except when creating)
 24017                                  ;	AH = Device ID (bit 7 set if not disk)
 24018                                  ;	[THISDPB] = Base of drive parameters
 24019                                  ;	DS = DOSGROUP
 24020                                  ;	ES = DOSGROUP
 24021                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24022                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24023                                  ;	[CURBUF] has directory record with match
 24024                                  ;	[NAME1] has file name
 24025                                  ;	[LASTENT] is entry number of the entry
 24026                                  ; All other registers destroyed.
 24027                                  ;----------------------------------------------------------------------------
 24028                                  
 24029                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24030                                  ;hkn; this point.
 24031                                  
 24032                                  SEARCH:
 24033                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24034                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24035                                  
 24036                                  	; 19/05/2019 - Retro DOS v4.0
 24037                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24038                                  
 24039                                  	; 27/07/2018 - Retro DOS v3.0
 24040                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24041                                  	; 15/03/2018 - Retro DOS v2.0
 24042                                  
 24043                                  	; 24/01/2024
 24044                                  
 24045                                  	;entry	FindEntry
 24046                                  FINDENTRY:
 24047 00003CA0 E82B04                  	call	STARTSRCH
 24048 00003CA3 A0[6B05]                	MOV	AL,[ATTRIB]
 24049                                  	;and	al,9Eh
 24050 00003CA6 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24051                                  	;cmp	al,8
 24052 00003CA8 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24053 00003CAA 7503                    	JNZ	short NOTVOLSRCH	; No
 24054 00003CAC E86A01                  	CALL	SETROOTSRCH		; Yes force search of root
 24055                                  NOTVOLSRCH:
 24056 00003CAF E8FA00                  	CALL	GETENTRY
 24057                                  	;JNC	short SRCH
 24058                                  	;JMP	SETESRET
 24059                                  	; 24/01/2024
 24060 00003CB2 723F                    	jc	short SETESRET
 24061                                  
 24062                                  	;entry	Srch
 24063                                  SRCH:
 24064 00003CB4 1E                      	PUSH	DS
 24065 00003CB5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24066                                  
 24067                                  ;	(DS:BX) = directory entry address
 24068                                  
 24069 00003CB9 8A27                    	mov	ah,[BX]
 24070                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24071 00003CBB 08E4                    	OR	AH,AH			; End of directory?
 24072 00003CBD 7437                    	JZ	short FREE
 24073                                  
 24074                                  ;hkn; SS override
 24075 00003CBF 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24076 00003CC4 7430                    	JZ	short FREE
 24077                                  	;test	byte [bx+0Bh],8
 24078 00003CC6 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24079                                  					; Volume ID file?
 24080 00003CCA 7405                    	JZ	short CHKFNAM 		; NO
 24081                                  
 24082                                  ;hkn; SS override
 24083 00003CCC 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24084                                  CHKFNAM:
 24085                                  ;	Context ES
 24086 00003CD1 8CD6                    	MOV	SI,SS
 24087 00003CD3 8EC6                    	MOV	ES,SI
 24088 00003CD5 89DE                    	MOV	SI,BX
 24089                                  
 24090                                  ;hkn; NAME1 is in DOSDATA
 24091 00003CD7 BF[4B05]                	MOV	DI,NAME1
 24092                                  ;;;;; 7/29/86
 24093                                  
 24094                                  ;hkn; SS override for NAME1
 24095                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24096                                  	;JNZ	short NO_E5
 24097                                  	;MOV	BYTE [SS:NAME1],05H
 24098                                  	; 22/09/2023
 24099 00003CDA 26803DE5                	cmp	byte [es:di],0E5h
 24100 00003CDE 7504                    	jnz	short NO_E5
 24101 00003CE0 26C60505                	mov	byte [es:di],05h
 24102                                  NO_E5:
 24103                                  ;;;;; 7/29/86
 24104 00003CE4 E86100                  	CALL	MetaCompare
 24105 00003CE7 7429                    	JZ	short FOUND
 24106 00003CE9 1F                      	POP	DS
 24107                                  
 24108                                  	;entry	NEXTENT
 24109                                  NEXTENT:
 24110 00003CEA C42E[8A05]              	LES	BP,[THISDPB]
 24111 00003CEE E86600                  	CALL	NEXTENTRY
 24112 00003CF1 73C1                    	JNC	short SRCH
 24113                                  	;JMP	SHORT SETESRET
 24114                                  	; 24/01/2024
 24115                                  SETESRET:
 24116 00003CF3 16                      	PUSH	SS
 24117 00003CF4 07                      	POP	ES
 24118 00003CF5 C3                      	retn
 24119                                  FREE:
 24120 00003CF6 1F                      	POP	DS
 24121 00003CF7 8B0E[4803]              	MOV	CX,[LASTENT]
 24122 00003CFB 3B0E[D805]              	CMP	CX,[ENTFREE]
 24123 00003CFF 7304                    	JAE	short TSTALL
 24124 00003D01 890E[D805]              	MOV	[ENTFREE],CX
 24125                                  TSTALL:
 24126 00003D05 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24127                                  NEXTENTJ:
 24128 00003D09 74DF                    	je	short NEXTENT 		; No - continue search
 24129 00003D0B 890E[DA05]              	MOV	[ENTLAST],CX
 24130 00003D0F F9                      	STC
 24131 00003D10 EBE1                    	JMP	SHORT SETESRET
 24132                                  
 24133                                  FOUND:
 24134                                  ; We have a file with a matching name. We must now consider the attributes:
 24135                                  ; ATTRIB	Action
 24136                                  ; ------	------
 24137                                  ; Volume_ID	Is Volume_ID in test?
 24138                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24139                                  ;		If create then Is ATTRIB equal to test?
 24140                                  
 24141 00003D12 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24142 00003D14 1F                      	POP	DS
 24143 00003D15 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24144                                  	;and	ah,9Eh
 24145 00003D19 80E4DE                  	AND	AH,~attr_ignore
 24146                                  	;lea	si,[si+15]
 24147 00003D1C 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24148                                  					; point to first cluster field
 24149                                  	;test	ch,8
 24150 00003D1F F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24151 00003D22 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24152                                  	;test	ah,8
 24153 00003D24 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24154                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24155                                  	; 16/12/2022
 24156 00003D27 74C1                    	jz	short NEXTENT ; 19/05/2019
 24157                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24158                                  	;JZ	short NEXTENTJ
 24159 00003D29 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24160 00003D2B EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24161                                  check_one_volume_id:
 24162                                  	;CMP	ah,8
 24163 00003D2D 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24164                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24165                                  	; 16/12/2022
 24166 00003D30 74B8                    	je	short NEXTENT ; 19/05/2019
 24167                                  	;JZ	short NEXTENTJ
 24168 00003D32 E8AD03                  	CALL	MatchAttributes
 24169 00003D35 7407                    	JZ	SHORT RETFF
 24170 00003D37 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24171                                  	; 16/12/2022
 24172                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24173 00003D3C 74AC                    	jz	short NEXTENT ; 19/05/2019
 24174                                  RETFF:
 24175 00003D3E C42E[8A05]              	LES	BP,[THISDPB]
 24176                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24177                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24178                                  	; 15/12/2022
 24179 00003D42 268A6600                	MOV	AH,[ES:BP]
 24180                                  ;SETESRET:
 24181                                  	;PUSH	SS
 24182                                  	;POP	ES
 24183                                  	;retn
 24184                                  	; 24/01/2024
 24185 00003D46 EBAB                    	jmp	short SETESRET
 24186                                  
 24187                                  ;----------------------------------------------------------------------------
 24188                                  ;
 24189                                  ; Procedure Name : MetaCompare
 24190                                  ;
 24191                                  ; Inputs:
 24192                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24193                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24194                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24195                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24196                                  ; Function:
 24197                                  ;	Compare FCB style names allowing for ? match to any char
 24198                                  ; Outputs:
 24199                                  ;	Zero if match else NZ
 24200                                  ; Destroys CX,SI,DI all others preserved
 24201                                  ;----------------------------------------------------------------------------
 24202                                  
 24203                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24204                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24205                                  
 24206                                  MetaCompare:
 24207 00003D48 B90B00                  	MOV	CX,11
 24208                                  WILDCRD:
 24209 00003D4B F3A6                    	REPE	CMPSB
 24210 00003D4D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24211                                  CHECK_META:
 24212 00003D4F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24213 00003D54 74F5                    	JZ	short WILDCRD
 24214                                  MetaRet:
 24215 00003D56 C3                       	retn				; Zero set, Match
 24216                                  
 24217                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24218                                  ;----------------------------------------------------------------------------
 24219                                  ;
 24220                                  ; Procedure Name : NEXTENTRY
 24221                                  ;
 24222                                  ; Inputs:
 24223                                  ;	Same as outputs of GETENTRY, above
 24224                                  ; Function:
 24225                                  ;	Update BX, and [LASTENT] for next directory entry.
 24226                                  ;	Carry set if no more.
 24227                                  ;----------------------------------------------------------------------------
 24228                                  
 24229                                  NEXTENTRY:
 24230                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24231                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24232                                  
 24233                                  	; 19/05/2019 - Retro DOS v4.0
 24234                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24235                                  
 24236                                  	; 27/07/2018 - Retro DOS v3.0
 24237                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24238                                  	; 15/03/2018 - Retro DOS v2.0
 24239                                  
 24240 00003D57 A1[4803]                	MOV	AX,[LASTENT]
 24241 00003D5A 3B06[DA05]              	CMP	AX,[ENTLAST]
 24242 00003D5E 7422                    	JZ	short NONE
 24243 00003D60 40                      	INC	AX
 24244                                  	;ADD	BX,32
 24245 00003D61 8D5F20                  	LEA	BX,[BX+32]
 24246 00003D64 39D3                    	CMP	BX,DX
 24247                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24248                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24249                                  	; 16/12/2022
 24250 00003D66 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24251 00003D68 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24252 00003D6C FEC3                    	INC	BL
 24253 00003D6E 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24254 00003D72 7215                    	JB	short SAMECLUS
 24255 00003D74 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24256 00003D78 E8D816                  	call	IsEOF
 24257 00003D7B 7305                    	JAE	short NONE
 24258                                  	; 23/07/2019
 24259 00003D7D 83FB02                  	CMP	BX,2
 24260                                  	;JB	short NONE
 24261                                  	;JMP	short GETENT
 24262                                  	; 16/12/2022
 24263 00003D80 732D                    	jnb	short GETENT
 24264                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24265                                  	;JB	short NONE
 24266                                  	;JMP	short GETENT
 24267                                  NONE:
 24268 00003D82 F9                      	STC
 24269 00003D83 C3                      	retn
 24270                                  HAVIT:
 24271 00003D84 A3[4803]                	MOV	[LASTENT],AX
 24272 00003D87 F8                      	CLC
 24273                                  nextentry_retn:
 24274 00003D88 C3                      	retn
 24275                                  SAMECLUS:
 24276 00003D89 881E[7305]              	MOV	[SECCLUSPOS],BL
 24277 00003D8D A3[4803]                	MOV	[LASTENT],AX
 24278 00003D90 1E                      	PUSH	DS
 24279 00003D91 C53E[E205]              	LDS	DI,[CURBUF]
 24280                                  	; 19/05/2019
 24281                                  	; MSDOS 6.0
 24282                                  	;;mov	dx,[di+8]
 24283                                  	; 23/09/2023
 24284                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24285                                  ;hkn; SS override
 24286                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24287                                  	; 23/09/2023
 24288 00003D95 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 24289                                  	
 24290                                  	;mov	dx,[di+6]
 24291 00003D98 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24292                                  	;inc	dx ; MSDOS 3.3
 24293                                  	; MSDOS 6.0
 24294                                  	;ADD	DX,1				;AN000; >32mb
 24295                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24296                                  	; 23/09/2023
 24297 00003D9B 42                      	inc	dx
 24298 00003D9C 7501                    	jnz	short nextexntry_fc
 24299 00003D9E 46                      	inc	si
 24300                                  	;inc	word [SS:HIGH_SECTOR]
 24301                                  nextexntry_fc:
 24302                                  	; 23/09/2023
 24303 00003D9F 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 24304                                  	; MSDOS 3.3 & MSDOS 6.0
 24305 00003DA4 1F                      	POP	DS
 24306 00003DA5 E866F8                  	call	FIRSTCLUSTER
 24307 00003DA8 31DB                    	XOR	BX,BX
 24308 00003DAA EB23                    	JMP	short SETENTRY
 24309                                  
 24310                                  ;----------------------------------------------------------------------------
 24311                                  ;
 24312                                  ; Procedure Name : GETENTRY
 24313                                  ;
 24314                                  ; Inputs:
 24315                                  ;	[LASTENT] has directory entry
 24316                                  ;	ES:BP points to drive parameters
 24317                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24318                                  ; Function:
 24319                                  ;	Locates directory entry in preparation for search
 24320                                  ;	GETENT provides entry for passing desired entry in AX
 24321                                  ; Outputs:
 24322                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24323                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24324                                  ;	[LASTENT] = New directory entry number
 24325                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24326                                  ;	Carry set if error (currently user FAILed to I 24)
 24327                                  ;----------------------------------------------------------------------------
 24328                                  
 24329                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24330                                  GETENTRY:
 24331                                  	; 27/07/2018 - Retro DOS v3.0
 24332 00003DAC A1[4803]                	MOV	AX,[LASTENT]
 24333                                  
 24334                                  	;entry	GETENT
 24335                                  GETENT:
 24336 00003DAF A3[4803]                	MOV	[LASTENT],AX
 24337                                  ;
 24338                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24339                                  ; directory.
 24340                                  ;
 24341 00003DB2 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24342 00003DB4 D3C0                    	rol	ax,cl			; keep hight order bits
 24343 00003DB6 89C2                    	mov	dx,ax
 24344                                  	; 19/05/2019 - Retro DOS v4.0
 24345                                  	;and	ax,0FFE0h
 24346                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24347                                  	;and	ax,~(32-1)		; mask off high order bits
 24348                                  	; 16/12/2022
 24349 00003DB8 24E0                    	and	al,0E0h ; ~31
 24350 00003DBA 83E21F                  	and	dx,1Fh
 24351                                  	;and	dx,32-1			; mask off low order bits
 24352                                  ;
 24353                                  ; DX:AX contain the byte offset of the required directory entry from the
 24354                                  ; beginning of the directory. Convert this to a sector number. Round the
 24355                                  ; sector size down to a multiple of 32.
 24356                                  ;
 24357                                  	;mov	bx,[es:bp+2]
 24358 00003DBD 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24359 00003DC1 80E3E0                  	and	bl,0E0h
 24360                                  	;AND	BL,255-31		; Must be multiple of 32
 24361 00003DC4 F7F3                    	DIV	BX
 24362 00003DC6 89D3                    	MOV	BX,DX			; Position within sector
 24363 00003DC8 53                      	PUSH	BX
 24364 00003DC9 E8EEF7                  	call	DIRREAD
 24365 00003DCC 5B                      	POP	BX
 24366                                  	;retc
 24367 00003DCD 72B9                    	jc	short nextentry_retn	
 24368                                  SETENTRY:
 24369 00003DCF 8B16[E205]              	MOV	DX,[CURBUF]
 24370                                  	;add	dx,16 ; MSDOS 3.3
 24371                                  	;add	dx,20 ; MSDOS 6.0 
 24372 00003DD3 83C214                  	ADD	DX,BUFINSIZ
 24373 00003DD6 01D3                    	ADD	BX,DX
 24374                                  	;add	dx,[es:bp+2]
 24375 00003DD8 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24376                                  	; 29/12/2022
 24377                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24378 00003DDC F8                      	clc
 24379 00003DDD C3                      	retn
 24380                                  
 24381                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24382                                  ;----------------------------------------------------------------------------
 24383                                  ;
 24384                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24385                                  ;
 24386                                  ; Inputs:
 24387                                  ;	BX cluster number of start of directory
 24388                                  ;	ES:BP Points to DPB
 24389                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24390                                  ; Function:
 24391                                  ;	Set up a directory search
 24392                                  ; Outputs:
 24393                                  ;	[DIRSTART] = BX
 24394                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24395                                  ;	Carry set if error (currently user FAILed to I 24)
 24396                                  ; destroys AX,DX,BX
 24397                                  ;----------------------------------------------------------------------------
 24398                                  
 24399                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24400                                  SETDIRSRCH:
 24401 00003DDE 09DB                    	OR	BX,BX
 24402 00003DE0 7437                    	JZ	short SETROOTSRCH
 24403 00003DE2 891E[C205]              	MOV	[DIRSTART],BX
 24404                                  	;mov	al,[es:bp+4]
 24405 00003DE6 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24406 00003DEA FEC0                    	INC	AL
 24407 00003DEC A2[7705]                	MOV	[CLUSFAC],AL
 24408                                  
 24409                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24410                                  	;SAVE	<SI>
 24411 00003DEF 56                      	push	si
 24412                                  	;test	byte [FastOpenFlg],2
 24413 00003DF0 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24414 00003DF5 7507                    	JNZ	short UNP_OK
 24415                                  
 24416                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24417                                  	;invoke	UNPACK
 24418 00003DF7 E87016                  	call	UNPACK
 24419 00003DFA 7302                    	JNC	short UNP_OK
 24420                                  	;RESTORE <SI>
 24421 00003DFC 5E                      	pop	si
 24422                                  	;return
 24423 00003DFD C3                      	retn
 24424                                  
 24425                                  UNP_OK:
 24426 00003DFE 893E[BC05]              	MOV	[CLUSNUM],DI
 24427 00003E02 89DA                    	MOV	DX,BX
 24428 00003E04 30DB                    	XOR	BL,BL
 24429 00003E06 881E[7305]              	MOV	[SECCLUSPOS],BL
 24430                                  	;invoke	FIGREC
 24431 00003E0A E8060F                  	call	FIGREC
 24432                                  	;RESTORE <SI>
 24433 00003E0D 5E                      	pop	si
 24434                                  	
 24435                                  	; 19/05/2019 - Retro DOS v4.0
 24436                                  
 24437                                  	; MSDOS 6.0
 24438                                  	;PUSH	DX			   ;AN000; >32mb
 24439                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24440                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24441                                  	;POP	DX			   ;AN000; >32mb
 24442                                  
 24443                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24444                                  	;push	dx
 24445                                  	;mov	dx,[HIGH_SECTOR]
 24446                                  	;mov	[DIRSEC+2],dx
 24447                                  	;pop	dx
 24448                                  	;MOV	[DIRSEC],dx
 24449                                  	; 16/12/2022
 24450 00003E0E A1[0706]                	mov	ax,[HIGH_SECTOR]
 24451 00003E11 A3[C005]                	mov	[DIRSEC+2],AX
 24452 00003E14 8916[BE05]              	MOV	[DIRSEC],DX
 24453                                  
 24454                                  	; 16/12/2022
 24455                                  	; cf=0 (at the return of FIGREC)
 24456                                  	;CLC
 24457 00003E18 C3                      	retn
 24458                                  
 24459                                  	;entry	SETROOTSRCH
 24460                                  SETROOTSRCH:
 24461 00003E19 31C0                    	XOR	AX,AX
 24462 00003E1B A3[C205]                	MOV	[DIRSTART],AX
 24463                                  	; 22/09/2023
 24464 00003E1E A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24465 00003E21 A2[7305]                	MOV	[SECCLUSPOS],AL
 24466 00003E24 48                      	DEC	AX
 24467 00003E25 A3[BC05]                	MOV	[CLUSNUM],AX
 24468                                  	;mov	ax,[es:bp+0Bh]
 24469 00003E28 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24470                                  	; 19/05/2019
 24471                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24472                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24473 00003E2C 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24474 00003E30 29D0                    	SUB	AX,DX
 24475 00003E32 A2[7705]                	MOV	[CLUSFAC],AL
 24476 00003E35 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24477                                  	; 22/09/2023
 24478                                  	; MSDOS 6.0
 24479                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24480 00003E39 F8                      	CLC
 24481 00003E3A C3                      	retn
 24482                                  
 24483                                  ;============================================================================
 24484                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24485                                  ;============================================================================
 24486                                  ; 27/07/2018 - Retro DOS v3.0
 24487                                  ; 19/05/2019 - Retro DOS v4.0 
 24488                                  
 24489                                  ;	TITLE	DIR2 - Directory and path cracking
 24490                                  ;	NAME	Dir2
 24491                                  
 24492                                  ;Break	<GETPATH -- PARSE A WFP>
 24493                                  ;----------------------------------------------------------------------------
 24494                                  ;
 24495                                  ; Procedure Name : GETPATH
 24496                                  ;
 24497                                  ; Inputs:
 24498                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24499                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24500                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24501                                  ;		( = -1 if current dir not involved, else
 24502                                  ;		 Points to first char after last "/" of current dir part)
 24503                                  ;	[THISCDS] Points to CDS being used
 24504                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24505                                  ;	[NoSetDir] set
 24506                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24507                                  ; Function:
 24508                                  ;	Crack the path
 24509                                  ; Outputs:
 24510                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24511                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24512                                  ;	ID1 field of [THISCDS] updated appropriately
 24513                                  ;	[ATTRIB] = [SATTRIB]
 24514                                  ;	ES:BP Points to DPB
 24515                                  ;	Carry set if bad path
 24516                                  ;	   SI Points to path element causing failure
 24517                                  ;	   Zero set
 24518                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24519                                  ;	      start a search on the last directory
 24520                                  ;	      CL is zero if there is a bad name in the path
 24521                                  ;	      CL is non-zero if the name was simply not found
 24522                                  ;		 [ENTFREE] may have free spot in directory
 24523                                  ;		 [NAME1] is the name.
 24524                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24525                                  ;	   Zero reset
 24526                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24527                                  ;		or path too long or malformed path
 24528                                  ;	ELSE
 24529                                  ;	   [CurBuf] = -1 if root directory
 24530                                  ;	   [CURBUF] contains directory record with match
 24531                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24532                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24533                                  ;	   AH = device ID
 24534                                  ;	      bit 7 of AH set if device SI and BX
 24535                                  ;	      will point DOSGROUP relative The firclus
 24536                                  ;	      field of the device entry contains the device pointer
 24537                                  ;	   [NAME1] Has name looked for
 24538                                  ;	   If last element is a directory zero is set and:
 24539                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24540                                  ;	      are set up to start a search on it.
 24541                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24542                                  ;	      like that for a file (except for zero flag)
 24543                                  ;	   If last element is a file zero is reset
 24544                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24545                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24546                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24547                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24548                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24549                                  ; DS preserved, Others destroyed
 24550                                  ;---------------------------------------------------------------------------
 24551                                  
 24552                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24553                                  ;hkn; DS already set up at this point.
 24554                                  
 24555                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24556                                  GETPATH:
 24557                                  	;mov	word [CREATING],0E500h
 24558 00003E3B C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24559                                  
 24560                                  ; Same as GetPath only CREATING and DELALL already set
 24561                                  
 24562                                  	;entry	GetPathNoSet
 24563                                  GetPathNoSet:
 24564                                  	;mov	byte [EXTERR_LOCUS],2	
 24565 00003E41 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24566 00003E46 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24567                                  
 24568                                  ; See if the input indicates a device that has already been detected. If so,
 24569                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24570                                  
 24571 00003E4C 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24572                                  	;cmp	word [DI+1],5C3Ah
 24573                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24574 00003E50 817D013A5C              	cmp	word [DI+1],':\'
 24575 00003E55 7438                    	JZ	short CrackIt
 24576                                  
 24577                                  ; Let ChkDev find it in the device list
 24578                                  
 24579 00003E57 83C703                  	ADD	DI,3
 24580                                  	; 18/08/2018
 24581                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24582                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24583                                  	; 16/12/2022
 24584                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24585 00003E5A E8AB00                  	CALL	CHKDEV
 24586 00003E5D 722E                    	JC	short InternalError
 24587                                  
 24588                                  Build_devJ:
 24589 00003E5F A0[6D05]                	MOV	AL,[SATTRIB]
 24590 00003E62 A2[6B05]                	MOV	[ATTRIB],AL
 24591                                  	;mov	byte [EXTERR_LOCUS],1
 24592 00003E65 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24593                                  					; "finding" a char device
 24594                                  					; set LOCUS to Unknown. This makes
 24595                                  					; certain idiotic problems reported
 24596                                  					; by a certain 3 letter OEM go away.
 24597                                  
 24598                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24599                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24600                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24601                                  ; wfp into the share set.
 24602                                  ;
 24603                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24604                                  ; non-space seen +1.  This position is kept in DX.
 24605                                  
 24606                                  ;hkn; SS is DOSDATA
 24607 00003E6A 16                      	push	ss
 24608 00003E6B 07                      	pop	es
 24609                                  
 24610                                  ;hkn; NAME1 is in DOSDATA
 24611 00003E6C BE[4B05]                	mov	si,NAME1
 24612 00003E6F 8B3E[B205]              	mov	di,[WFP_START]
 24613 00003E73 89FA                    	mov	dx,di
 24614 00003E75 B90800                  	mov	cx,8			; 8 chars in device name
 24615                                  MoveLoop:
 24616 00003E78 AC                      	lodsb
 24617 00003E79 AA                      	stosb
 24618 00003E7A 3C20                    	cmp	al," "
 24619 00003E7C 7402                    	jz	short NoSave
 24620                                  
 24621 00003E7E 89FA                    	mov	dx,di
 24622                                  NoSave:
 24623 00003E80 E2F6                    	loop	MoveLoop
 24624                                  
 24625                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24626                                  ; at this point.
 24627                                  
 24628 00003E82 89D7                    	mov	di,dx
 24629 00003E84 C60500                  	mov	byte [di],0		; end of string
 24630 00003E87 E8C402                  	call	Build_device_ent	; Clears carry sets zero
 24631 00003E8A FEC0                    	INC	AL			; reset zero
 24632 00003E8C C3                      	retn
 24633                                  
 24634                                  InternalError:
 24635                                  InternalError_loop:
 24636 00003E8D EBFE                    	JMP	short InternalError_loop	; freeze
 24637                                  
 24638                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24639                                  
 24640                                  CrackIt:
 24641 00003E8F 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24642 00003E93 83FEFF                  	CMP	SI,-1			; valid?
 24643 00003E96 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24644 00003E98 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24645                                  LOOK_SING:
 24646                                  	;mov	byte [ATTRIB],16h
 24647 00003E9B C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24648                                  					; Attributes to search through Dirs
 24649 00003EA0 C43E[A205]              	LES	DI,[THISCDS]
 24650 00003EA4 B8FFFF                  	MOV	AX,-1
 24651                                  	;mov	bx,[es:di+73]
 24652 00003EA7 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24653 00003EAB 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24654                                  
 24655                                  ; AX = -1
 24656                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24657                                  ;      has been uncertainly changed.
 24658                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24659                                  ;      may be -1 if no current directory part has been used.
 24660                                  
 24661 00003EAF 39C6                    	CMP	SI,AX			; if Current directory is not part
 24662 00003EB1 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24663 00003EB3 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24664                                  
 24665                                  ; DOS 3.3  6/25/86
 24666 00003EB5 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24667                                  	;test	byte [FastOpenFlg],1
 24668 00003EB7 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24669 00003EBC 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24670 00003EBE 06                      	PUSH	ES			; save registers
 24671 00003EBF 57                      	PUSH	DI
 24672 00003EC0 51                      	PUSH	CX
 24673 00003EC1 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24674 00003EC4 56                      	PUSH	SI
 24675 00003EC5 53                      	PUSH	BX
 24676                                  
 24677 00003EC6 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24678 00003ECA 8B36[B205]              	MOV	SI,[WFP_START]
 24679                                  
 24680                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24681 00003ECE BB[300D]                	MOV	BX,FastOpenTable
 24682 00003ED1 BF[460D]                	MOV	DI,Dir_Info_Buff
 24683 00003ED4 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24684                                  	;mov	al,1
 24685 00003ED7 B001                    	MOV	AL,FONC_Look_up
 24686 00003ED9 1E                      	PUSH	DS
 24687 00003EDA 07                      	POP	ES
 24688                                  	;call	far [BX+2]
 24689 00003EDB FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24690 00003EDE 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24691                                  					; Go to Got_Srch_cluster
 24692                                  	; 29/12/2022
 24693                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24694                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24695                                  	;stc
 24696                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24697                                  
 24698 00003EE0 803C01                  	cmp	byte [si],1
 24699                                  GO_Chk_end1:	; 29/12/2022
 24700 00003EE3 F5                      	cmc 
 24701                                  	; [si] = 0 -> cf = 0
 24702                                  	; [si] > 0 -> cf = 1
 24703                                  
 24704                                  ;GO_Chk_end1:
 24705                                  	; 29/12/2022
 24706                                  	;clc
 24707                                  
 24708                                  GO_Chk_end:				; restore registers
 24709 00003EE4 5B                      	POP	BX
 24710 00003EE5 5E                      	POP	SI
 24711 00003EE6 8F44FF                  	POP	word [SI-1]
 24712 00003EE9 59                      	POP	CX
 24713 00003EEA 5F                      	POP	DI
 24714 00003EEB 07                      	POP	ES
 24715 00003EEC 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24716                                  
 24717                                  ; DOS 3.3  6/25/86
 24718                                  ;
 24719                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24720                                  ; of path and go crack from root.
 24721                                  
 24722                                  NO_CURR_D:
 24723 00003EEE 8B36[B205]              	MOV	SI,[WFP_START]
 24724 00003EF2 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24725 00003EF5 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24726 00003EF9 EB3B                    	JMP	short ROOTPATH
 24727                                  
 24728                                  ; We are able to crack from the current directory part. Go set up for search
 24729                                  ; of specified cluster.
 24730                                  
 24731                                  GOT_SEARCH_CLUSTER:
 24732 00003EFB C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24733 00003EFF E8DCFE                  	call	SETDIRSRCH
 24734                                  	;JC	short SETFERR
 24735                                  	;JMP	short FINDPATH
 24736                                  	; 16/12/2022
 24737 00003F02 7342                    	jnc	short FINDPATH ; 17/08/2018
 24738                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24739                                  	;JC	short SETFERR
 24740                                  	;JMP	short FINDPATH
 24741                                  SETFERR:
 24742 00003F04 30C9                    	XOR	CL,CL			; set zero
 24743 00003F06 F9                      	STC
 24744 00003F07 C3                      	retn
 24745                                  
 24746                                  ;---------------------------------------------------------------------------
 24747                                  ;
 24748                                  ; Procedure Name : ChkDev
 24749                                  ;
 24750                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24751                                  ;   device.
 24752                                  ; Blasts CX,SI,DI,AX,BX
 24753                                  ;---------------------------------------------------------------------------
 24754                                  
 24755                                  CHKDEV:
 24756 00003F08 89FE                    	MOV	SI,DI
 24757 00003F0A 8CD7                    	MOV	DI,SS
 24758 00003F0C 8EC7                    	MOV	ES,DI
 24759                                  
 24760 00003F0E BF[4B05]                	MOV	DI,NAME1
 24761 00003F11 B90900                  	MOV	CX,9
 24762                                  TESTLOOP:
 24763 00003F14 E85A10                  	call	GETLET
 24764                                  
 24765 00003F17 3C2E                    	CMP	AL,'.'
 24766 00003F19 740E                    	JZ	short TESTDEVICE
 24767 00003F1B E8A910                  	call	PATHCHRCMP
 24768 00003F1E 7407                    	JZ	short NOTDEV
 24769 00003F20 08C0                    	OR	AL,AL
 24770 00003F22 7405                    	JZ	short TESTDEVICE
 24771                                  
 24772 00003F24 AA                      	STOSB
 24773 00003F25 E2ED                    	LOOP	TESTLOOP
 24774                                  NOTDEV:
 24775 00003F27 F9                      	STC
 24776 00003F28 C3                      	retn
 24777                                  
 24778                                  TESTDEVICE:
 24779                                  	;ADD	CX,2
 24780                                  	; 24/09/2023
 24781 00003F29 41                      	inc	cx
 24782 00003F2A 41                      	inc	cx
 24783 00003F2B B020                    	MOV	AL,' '
 24784 00003F2D F3AA                    	REP	STOSB
 24785 00003F2F 8CD0                    	MOV	AX,SS
 24786 00003F31 8ED8                    	MOV	DS,AX
 24787                                  	;call	DEVNAME
 24788                                  	;retn
 24789                                  	; 18/12/2022
 24790 00003F33 E9B901                  	jmp	DEVNAME
 24791                                  
 24792                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24793                                  ;----------------------------------------------------------------------------
 24794                                  ;
 24795                                  ; Procedure Name : ROOTPATH,FINDPATH
 24796                                  ;
 24797                                  ; Inputs:
 24798                                  ;	Same as FINDPATH but,
 24799                                  ;	SI Points to asciz string of path which is assumed to start at
 24800                                  ;		the root (no leading '/').
 24801                                  ; Function:
 24802                                  ;	Search from root for path
 24803                                  ; Outputs:
 24804                                  ;	Same as FINDPATH but:
 24805                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24806                                  ;	[NoSetDir] is ignored.
 24807                                  ;----------------------------------------------------------------------------
 24808                                  
 24809                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24810                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24811                                  
 24812                                  ROOTPATH:
 24813 00003F36 E8E0FE                  	call	SETROOTSRCH
 24814                                  	; 24/09/2023
 24815 00003F39 30E4                    	xor	ah,ah
 24816                                  	;CMP	BYTE [SI],0
 24817 00003F3B 3824                    	cmp	[si],ah ; 0
 24818 00003F3D 7507                    	JNZ	short FINDPATH
 24819                                  
 24820                                  ; Root dir specified
 24821 00003F3F A0[6D05]                	MOV	AL,[SATTRIB]
 24822 00003F42 A2[6B05]                	MOV	[ATTRIB],AL
 24823                                  	; 24/09/2023
 24824                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24825                                  					; (dir), clears carry.
 24826 00003F45 C3                      	retn
 24827                                  
 24828                                  ; Inputs:
 24829                                  ;	[ATTRIB] Set to get through directories
 24830                                  ;	[SATTRIB] Set to find last element
 24831                                  ;	ES:BP Points to DPB
 24832                                  ;	SI Points to asciz string of path (no leading '/').
 24833                                  ;	[SECCLUSPOS] = 0
 24834                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24835                                  ;	[CLUSNUM] = Cluster # of next cluster
 24836                                  ;	[CLUSFAC] = Sectors per cluster
 24837                                  ;	[NoSetDir] set
 24838                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24839                                  ;		( = -1 if current dir not involved, else
 24840                                  ;		 Points to first char after last "/" of current dir part)
 24841                                  ;	[THISCDS] Points to CDS being used
 24842                                  ;	[CREATING] and [DELALL] set
 24843                                  ; Function:
 24844                                  ;	Parse path name
 24845                                  ; Outputs:
 24846                                  ;	ID1 field of [THISCDS] updated appropriately
 24847                                  ;	[ATTRIB] = [SATTRIB]
 24848                                  ;	ES:BP Points to DPB
 24849                                  ;	[THISDPB] = ES:BP
 24850                                  ;	Carry set if bad path
 24851                                  ;	   SI Points to path element causing failure
 24852                                  ;	   Zero set
 24853                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24854                                  ;	      start a search on the last directory
 24855                                  ;	      CL is zero if there is a bad name in the path
 24856                                  ;	      CL is non-zero if the name was simply not found
 24857                                  ;		 [ENTFREE] may have free spot in directory
 24858                                  ;		 [NAME1] is the name.
 24859                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24860                                  ;	   Zero reset
 24861                                  ;	      File in middle of path or bad name in path
 24862                                  ;		or path too long or malformed path
 24863                                  ;	ELSE
 24864                                  ;	   [CURBUF] contains directory record with match
 24865                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24866                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24867                                  ;	   [NAME1] Has name looked for
 24868                                  ;	   AH = device ID
 24869                                  ;	      bit 7 of AH set if device SI and BX
 24870                                  ;	      will point DOSGROUP relative The firclus
 24871                                  ;	      field of the device entry contains the device pointer
 24872                                  ;	   If last element is a directory zero is set and:
 24873                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24874                                  ;	      are set up to start a search on it,
 24875                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24876                                  ;	      like that for a file (except for zero flag)
 24877                                  ;	   If last element is a file zero is reset
 24878                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24879                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24880                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24881                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24882                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24883                                  ; Destroys all other registers
 24884                                  
 24885                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24886                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24887                                  
 24888                                      	;entry	FINDPATH
 24889                                  FINDPATH:
 24890 00003F46 06                      	PUSH	ES			; Save ES:BP
 24891 00003F47 56                      	PUSH	SI
 24892 00003F48 89F7                    	MOV	DI,SI
 24893 00003F4A 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24894 00003F4E 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24895 00003F53 740E                    	JZ	short NOIDS		; No current dir part
 24896 00003F55 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24897 00003F59 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24898 00003F5B C43E[A205]              	LES	DI,[THISCDS]
 24899                                  	;mov	[es:di+73],cx
 24900 00003F5F 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24901                                  NOIDS:
 24902                                  
 24903                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24904                                  ; character in the string. CX,DI may be destroyed.
 24905                                  ;
 24906                                  ;	invoke	NAMETRANS
 24907                                  ;	MOV	CL,AL
 24908                                  ;
 24909                                  ; The above is the slow method. The name has *already* been munged by
 24910                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24911                                  ; the name until ., \ or 0 is hit.
 24912                                  
 24913 00003F63 8CD0                    	MOV	AX,SS
 24914 00003F65 8EC0                    	MOV	ES,AX
 24915                                  
 24916                                  ;hkn; Name1 is in DOSDATA
 24917 00003F67 BF[4B05]                	MOV	DI,NAME1
 24918 00003F6A B82020                  	MOV	AX,'  ' ; 2020h
 24919 00003F6D AA                      	STOSB
 24920 00003F6E AB                      	STOSW
 24921 00003F6F AB                      	STOSW
 24922 00003F70 AB                      	STOSW
 24923 00003F71 AB                      	STOSW
 24924 00003F72 AB                      	STOSW
 24925                                  
 24926                                  ;hkn; Name1 is in DOSDATA
 24927 00003F73 BF[4B05]                	MOV	DI,NAME1
 24928 00003F76 30E4                    	XOR	AH,AH			; bits for CL
 24929                                  GetNam:
 24930                                  	; 19/05/2019 - Retro DOS v4.0
 24931                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24932                                  
 24933                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24934                                  	; 16/12/2022
 24935                                  	;inc	cl ; not required !	
 24936                                  	
 24937 00003F78 AC                      	LODSB
 24938 00003F79 3C2E                    	CMP	AL,'.'	; 2Eh
 24939 00003F7B 7412                    	JZ	short _SetExt
 24940 00003F7D 08C0                    	OR	AL,AL
 24941 00003F7F 7424                    	JZ	short _GetDone
 24942 00003F81 3C5C                    	CMP	AL,'\'	; 5Ch
 24943 00003F83 7420                    	JZ	short _GetDone
 24944 00003F85 3C3F                    	CMP	AL,'?'	; 3Fh
 24945 00003F87 7503                    	JNZ	short StoNam
 24946 00003F89 80CC01                  	OR	AH,1
 24947                                  StoNam: 
 24948 00003F8C AA                      	STOSB
 24949 00003F8D EBE9                    	JMP	short GetNam
 24950                                  _SetExt:
 24951 00003F8F BF[5305]                	MOV	DI,NAME1+8
 24952                                  GetExt:
 24953 00003F92 AC                      	LODSB
 24954 00003F93 08C0                    	OR	AL,AL
 24955 00003F95 740E                    	JZ	short _GetDone
 24956 00003F97 3C5C                    	CMP	AL,'\'
 24957 00003F99 740A                    	JZ	short _GetDone
 24958 00003F9B 3C3F                    	CMP	AL,'?'
 24959 00003F9D 7503                    	JNZ	short StoExt
 24960 00003F9F 80CC01                  	OR	AH,1
 24961                                  StoExt: 
 24962 00003FA2 AA                      	STOSB
 24963 00003FA3 EBED                    	JMP	short GetExt
 24964                                  _GetDone:
 24965 00003FA5 4E                      	DEC	SI
 24966 00003FA6 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24967 00003FA8 80C980                  	OR	CL,80H
 24968 00003FAB 5F                      	POP	DI			; Start of this element
 24969 00003FAC 07                      	POP	ES			; Restore ES:BP
 24970 00003FAD 39FE                    	CMP	SI,DI
 24971 00003FAF 7503                    	JNZ	short check_device
 24972 00003FB1 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24973                                  check_device:
 24974 00003FB4 56                      	PUSH	SI			; Start of next element
 24975                                  	;MOV	AL,[SI]
 24976                                  	;OR	AL,AL
 24977                                  	; 23/09/2023
 24978 00003FB5 803C00                  	cmp	byte [si],0
 24979 00003FB8 7508                    	JNZ	short NOT_LAST
 24980                                  
 24981                                  ; for last element of the path switch to the correct search attributes
 24982                                  
 24983 00003FBA 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24984 00003FBE 883E[6B05]              	MOV	[ATTRIB],BH
 24985                                  
 24986                                  NOT_LAST:
 24987                                  
 24988                                  ; check name1 to see if we have a device...
 24989                                  
 24990 00003FC2 06                      	PUSH	ES			; Save ES:BP
 24991                                  
 24992                                  ;hkn; SS is DOSDATA
 24993                                  	;context ES
 24994 00003FC3 16                      	push	ss
 24995 00003FC4 07                      	pop	es
 24996 00003FC5 E82701                  	call	DEVNAME 		; blast BX
 24997 00003FC8 07                      	POP	ES			; Restore ES:BP
 24998 00003FC9 720B                    	JC	short FindFile		; Not a device
 24999 00003FCB 08C0                    	OR	AL,AL			; Test next char again
 25000 00003FCD 7403                    	JZ	short GO_BDEV
 25001 00003FCF E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 25002                                  
 25003                                  GO_BDEV:
 25004 00003FD2 5E                      	POP	SI			; Points to NUL at end of path
 25005 00003FD3 E989FE                  	JMP	Build_devJ
 25006                                  
 25007                                  FindFile:
 25008                                  ;;;; 7/28/86
 25009 00003FD6 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25010 00003FDB 7505                    	JNZ	short NOE5		; no
 25011 00003FDD C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25012                                  NOE5:
 25013                                  ;;;; 7/28/86
 25014 00003FE2 57                      	PUSH	DI			; Start of this element
 25015 00003FE3 06                      	PUSH	ES			; Save ES:BP
 25016 00003FE4 51                      	PUSH	CX			; CL return from NameTrans
 25017                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25018                                  
 25019 00003FE5 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 25020 00003FE8 7303                    	JNC	short DIR_FOUND		; found dir entry
 25021                                  
 25022                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25023 00003FEA E8B3FC                  	call	FINDENTRY
 25024                                  DIR_FOUND:
 25025 00003FED 59                      	POP	CX
 25026 00003FEE 07                      	POP	ES
 25027 00003FEF 5F                      	POP	DI
 25028 00003FF0 7303                    	JNC	short LOAD_BUF
 25029 00003FF2 E9CA00                  	JMP	BADPATHPOP
 25030                                  
 25031                                  LOAD_BUF:
 25032 00003FF5 C53E[E205]              	LDS	DI,[CURBUF]
 25033                                  	;test	byte [bx+0Bh],10h
 25034 00003FF9 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25035 00003FFD 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25036 00003FFF E99800                  	JMP	FILEINPATH		; Error or end of path
 25037                                  
 25038                                  ; if we are not setting the directory, then check for end of string
 25039                                  
 25040                                  GO_NEXT:
 25041                                  ;hkn; SS override
 25042 00004002 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25043 00004008 7423                    	JZ	short SetDir
 25044 0000400A 89FA                    	MOV	DX,DI			; Save pointer to entry
 25045 0000400C 8CD9                    	MOV	CX,DS
 25046                                  
 25047                                  ;hkn; SS is DOSDATA
 25048                                  	;context DS
 25049 0000400E 16                      	push	ss
 25050 0000400F 1F                      	pop	ds
 25051 00004010 5F                      	POP	DI			; Start of next element
 25052                                  	; 19/05/2019 - Retro DOS v4.0
 25053                                  	; MSDOS 6.0
 25054 00004011 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25055 00004016 740B                    	JZ	short _nofast			; the FastOpen
 25056 00004018 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25057 0000401D 7404                    	JZ	short _nofast			; no
 25058 0000401F 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25059                                  _nofast:
 25060 00004023 803D00                  	CMP	BYTE [DI],0
 25061                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25062                                  	;;JMP	_SETRET  ; retn		; Got it
 25063                                  	;retn	; 05/09/2018
 25064                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25065                                  	;jmp	_SETRET
 25066                                  	; 16/12/2022
 25067 00004026 7421                    	jz	short _SETRET
 25068                                  
 25069                                  NEXT_ONE:
 25070 00004028 57                      	PUSH	DI			; Put start of next element back on stack
 25071 00004029 89D7                    	MOV	DI,DX
 25072 0000402B 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25073                                  SetDir:
 25074 0000402D 8B14                    	MOV	DX,[SI] 		; Dir_first
 25075                                  
 25076                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25077 0000402F 1E                      	PUSH	DS		      ; save [curbuf+2]
 25078                                  ;hkn; SS is DOSDATA
 25079 00004030 16                      	push	ss
 25080 00004031 1F                      	pop	ds		      ; set DS Dosgroup
 25081                                  	;test	byte [FastOpenFlg],2
 25082 00004032 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25083 00004037 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25084 00004039 89D3                    	MOV	BX,DX		      ; not found
 25085 0000403B 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25086 0000403F 50                      	PUSH	AX		      ; save device id (AH)
 25087 00004040 E89BFD                  	call	SETDIRSRCH
 25088 00004043 58                      	POP	AX		      ; restore device id (AH)
 25089 00004044 83C402                  	ADD	SP,2		      ; pop ds in stack
 25090 00004047 EB37                    	JMP	short FAST_OPEN_SKIP
 25091                                  
 25092                                  	; 16/12/2022
 25093                                  _SETRET:
 25094 00004049 C3                      	retn
 25095                                  
 25096                                  DO_NORMAL:
 25097 0000404A 1F                      	POP	DS			; DS = [curbuf + 2]
 25098                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25099                                  
 25100 0000404B 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25101 0000404D 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25102 0000404F 53                      	PUSH	BX
 25103 00004050 50                      	PUSH	AX
 25104 00004051 56                      	PUSH	SI
 25105 00004052 51                      	PUSH	CX
 25106                                  	;push	word [di+6]
 25107 00004053 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25108                                  	; 19/05/2019
 25109                                  	; MSDOS 6.0
 25110                                  	;push	word [di+8]
 25111 00004056 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25112 00004059 89D3                    	MOV	BX,DX
 25113                                  
 25114                                  ;hkn; SS is DOSDATA
 25115                                  	;context DS
 25116 0000405B 16                      	push	ss
 25117 0000405C 1F                      	pop	ds
 25118                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25119 0000405D E87EFD                  	call	SETDIRSRCH		; the entry sector buffer
 25120                                  	; 19/05/2019
 25121                                  	; MSDOS 6.0
 25122 00004060 8F06[0706]              	POP	word [HIGH_SECTOR]
 25123 00004064 5A                      	POP	DX
 25124 00004065 7203                    	JC	short SKIP_GETB
 25125                                  	; 22/09/2023
 25126                                  	;;mov	byte [ALLOWED],18h
 25127                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25128                                  	;XOR	AL,AL ; *
 25129                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25130                                  	;call	GETBUFFR
 25131 00004067 E80B18                  	call	GETBUFFER ; * ; pre-read
 25132                                  SKIP_GETB:
 25133 0000406A 59                      	POP	CX
 25134 0000406B 5E                      	POP	SI
 25135 0000406C 58                      	POP	AX
 25136 0000406D 5B                      	POP	BX
 25137 0000406E 7305                    	JNC	short SET_THE_BUF
 25138 00004070 5F                      	POP	DI			; Start of next element
 25139 00004071 89FE                    	MOV	SI,DI			; Point with SI
 25140 00004073 EB21                    	JMP	SHORT _BADPATH
 25141                                  
 25142                                  SET_THE_BUF:
 25143 00004075 E89BF5                  	call	SET_BUF_AS_DIR
 25144 00004078 8B3E[E205]              	MOV	DI,[CURBUF]
 25145 0000407C 01FE                    	ADD	SI,DI			; Get the offsets back
 25146 0000407E 01FB                    	ADD	BX,DI
 25147                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25148                                  FAST_OPEN_SKIP:
 25149 00004080 5F                      	POP	DI			; Start of next element
 25150 00004081 E89D02                  	CALL	InsertPath		; insert dir entry info
 25151                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25152 00004084 8A05                    	MOV	AL,[DI]
 25153 00004086 08C0                    	OR	AL,AL
 25154 00004088 74BF                    	JZ	short _SETRET		; At end
 25155 0000408A 47                      	INC	DI			; Skip over "/"
 25156 0000408B 89FE                    	MOV	SI,DI			; Point with SI
 25157 0000408D E8370F                  	call	PATHCHRCMP
 25158 00004090 7503                    	JNZ	short find_bad_name	; oops
 25159 00004092 E9B1FE                  	JMP	FINDPATH		; Next element
 25160                                  
 25161                                  find_bad_name:
 25162 00004095 4E                      	DEC	SI			; Undo above INC to get failure point
 25163                                  _BADPATH:
 25164 00004096 30C9                    	XOR	CL,CL			; Set zero
 25165 00004098 EB2C                    	JMP	SHORT BADPRET
 25166                                  
 25167                                  FILEINPATH:
 25168 0000409A 5F                      	POP	DI			; Start of next element
 25169                                  
 25170                                  ;hkn; SS is DOSDATA
 25171                                  	;context DS			; Got to from one place with DS gone
 25172 0000409B 16                      	push	ss
 25173 0000409C 1F                      	pop	ds
 25174                                  
 25175                                  ; DOS 3.3 FastOpen
 25176                                  	;test	byte [FastOpenFlg],1
 25177 0000409D F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25178 000040A2 740B                    	JZ	short NO_FAST		; device info to fastopen
 25179                                  	;test	byte [FastOpenFlg],2
 25180 000040A4 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25181 000040A9 7404                    	JZ	short NO_FAST
 25182 000040AB 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25183                                  					 ; success
 25184                                  NO_FAST:
 25185                                  ; DOS 3.3 FastOpen
 25186 000040AF 8A05                    	MOV	AL,[DI]
 25187 000040B1 08C0                    	OR	AL,AL
 25188 000040B3 7404                    	JZ	short INCRET
 25189 000040B5 89FE                    	MOV	SI,DI			; Path too long
 25190 000040B7 EB0D                    	JMP	SHORT BADPRET
 25191                                  
 25192                                  INCRET:
 25193                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25194                                  
 25195 000040B9 E86502                  	CALL   InsertPath		; insert dir entry info
 25196                                  
 25197                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25198 000040BC FEC0                    	INC	AL			; Reset zero
 25199                                  	; 16/12/2022	
 25200                                  ;_SETRET:
 25201 000040BE C3                      	retn
 25202                                  
 25203                                  BADPATHPOP:
 25204 000040BF 5E                      	POP	SI			; Start of next element
 25205 000040C0 8A04                    	MOV	AL,[SI]
 25206 000040C2 89FE                    	MOV	SI,DI			; Start of bad element
 25207 000040C4 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25208                                  BADPRET:
 25209 000040C6 A0[6D05]                	MOV	AL,[SATTRIB]
 25210 000040C9 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25211 000040CC F9                      	STC
 25212 000040CD C3                      	retn
 25213                                  
 25214                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25215                                  ;---------------------------------------------------------------------------
 25216                                  ;
 25217                                  ; Procedure Name : STARTSRCH
 25218                                  ;
 25219                                  ; Inputs:
 25220                                  ;	[THISDPB] Set
 25221                                  ; Function:
 25222                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25223                                  ; Outputs:
 25224                                  ;	ES:BP = Drive parameters
 25225                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25226                                  ; Destroys ES,BP,AX
 25227                                  ;--------------------------------------------------------------------------
 25228                                  
 25229                                  STARTSRCH:
 25230 000040CE C42E[8A05]              	LES	BP,[THISDPB]
 25231 000040D2 31C0                    	XOR	AX,AX
 25232 000040D4 A3[4803]                	MOV	[LASTENT],AX
 25233 000040D7 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25234 000040DA 48                      	DEC	AX
 25235 000040DB A3[D805]                	MOV	[ENTFREE],AX
 25236 000040DE A3[DA05]                	MOV	[ENTLAST],AX
 25237 000040E1 C3                      	retn
 25238                                  
 25239                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25240                                  ;----------------------------------------------------------------------------
 25241                                  ; Procedure Name : MatchAttributes
 25242                                  ;
 25243                                  ; Input:    [Attrib] = attribute to search for
 25244                                  ;	    CH = found attribute
 25245                                  ; Output:   JZ <match>
 25246                                  ;	    JNZ <nomatch>
 25247                                  ; Registers modified: noneski
 25248                                  ;----------------------------------------------------------------------------
 25249                                  
 25250                                  MatchAttributes:
 25251 000040E2 50                      	PUSH	AX
 25252                                  
 25253                                  ;hkn; SS override
 25254 000040E3 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25255 000040E7 F6D0                    	NOT	AL			; AL <- SearchSet'
 25256 000040E9 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25257                                  	;and	al,16h
 25258 000040EB 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25259                                  ;
 25260                                  ; the result is non-zero if an attribute is not in the search set
 25261                                  ; and in the found set and in the important set. This means that we do not
 25262                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25263                                  ;
 25264 000040ED 58                      	POP	AX
 25265 000040EE C3                      	retn
 25266                                  
 25267                                  ; 19/05/2019 - Retro DOS v4.0
 25268                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25269                                  
 25270                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25271                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25272                                  
 25273                                  ;Break <DevName - Look for name of device>
 25274                                  ;---------------------------------------------------------------------------
 25275                                  ;
 25276                                  ; Procedure Name : DevName
 25277                                  ;
 25278                                  ; Inputs:
 25279                                  ;	DS,ES:DOSDATA
 25280                                  ;	Filename in NAME1
 25281                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25282                                  ; Function:
 25283                                  ;	Determine if file is in list of I/O drivers
 25284                                  ; Outputs:
 25285                                  ;	Carry set if not a device
 25286                                  ;	ELSE
 25287                                  ;	Zero flag set
 25288                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25289                                  ;	     bits 0-4 set from low byte of attribute word
 25290                                  ;	DEVPT = DWORD pointer to Device header of device
 25291                                  ; BX destroyed, others preserved
 25292                                  ;---------------------------------------------------------------------------
 25293                                  
 25294                                  DEVNAME:
 25295                                  	; 28/07/2018 - Retro DOS v3.0
 25296                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25297                                  
 25298 000040EF 56                      	PUSH	SI
 25299 000040F0 57                      	PUSH	DI
 25300 000040F1 51                      	PUSH	CX
 25301 000040F2 50                      	PUSH	AX
 25302                                  
 25303                                  ; E5 special code
 25304 000040F3 FF36[4B05]              	PUSH	WORD [NAME1]
 25305 000040F7 803E[4B05]05            	CMP	byte [NAME1],5
 25306 000040FC 7505                    	JNZ	short NOKTR
 25307 000040FE C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25308                                  NOKTR:
 25309                                  	;test	byte [ATTRIB],8
 25310 00004103 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25311                                  					; If looking for VOL id don't find devs
 25312 00004108 7521                    	JNZ	short RET31
 25313                                  
 25314                                  ;hkn; NULDEV is in DOSDATA
 25315 0000410A BE[4800]                	MOV	SI,NULDEV
 25316                                  LOOKIO:
 25317                                  	; 21/11/2022
 25318                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25319                                  	; 17/12/2022
 25320                                  	;test	byte [si+5],80h
 25321 0000410D F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25322                                  	;;test	word [si+4],8000h
 25323                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25324 00004111 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25325 00004113 89F0                    	MOV	AX,SI
 25326                                  	;add	si,10
 25327 00004115 83C60A                  	ADD	SI,SYSDEV.NAME
 25328                                  
 25329                                  ;hkn; NAME1 is in DOSDATA
 25330 00004118 BF[4B05]                	MOV	DI,NAME1
 25331 0000411B B90400                  	MOV	CX,4			; All devices are 8 letters
 25332 0000411E F3A7                    	REPE	CMPSW			; Check for name in list
 25333 00004120 89C6                    	MOV	SI,AX
 25334 00004122 7415                    	JZ	short IOCHK		; Found it?
 25335                                  SKIPDEV:
 25336 00004124 C534                    	LDS	SI,[SI]			; Get address of next device
 25337 00004126 83FEFF                  	CMP	SI,-1			; At end of list?
 25338 00004129 75E2                    	JNZ	short LOOKIO
 25339                                  RET31:	
 25340 0000412B F9                      	STC				; Not found
 25341                                  RETNV:	
 25342 0000412C 8CD1                    	MOV	CX,SS
 25343 0000412E 8ED9                    	MOV	DS,CX
 25344                                  
 25345 00004130 8F06[4B05]              	POP	WORD [NAME1]
 25346 00004134 58                      	POP	AX
 25347 00004135 59                      	POP	CX
 25348 00004136 5F                      	POP	DI
 25349 00004137 5E                      	POP	SI
 25350 00004138 C3                      	RETN
 25351                                  
 25352                                  IOCHK:
 25353                                  ;hkn; SS override for DEVPT
 25354 00004139 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25355                                  	;mov	bh,[si+4]
 25356 0000413E 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25357 00004141 80CFC0                  	OR	BH,0C0h
 25358 00004144 80E7DF                  	and	bh,0DFh
 25359                                  	;AND	BH,~(020h)		; Clears Carry
 25360 00004147 368936[9A05]            	MOV	[SS:DEVPT],SI
 25361 0000414C EBDE                    	JMP	short RETNV
 25362                                  
 25363                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25364                                  ;---------------------------------------------------------------------------
 25365                                  ; Procedure Name : Build_device_ent
 25366                                  ;
 25367                                  ; Inputs:
 25368                                  ;	[NAME1] has name
 25369                                  ;	BH is attribute field (supplied by DEVNAME)
 25370                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25371                                  ; Function:
 25372                                  ;	Build a directory entry for a device at DEVFCB
 25373                                  ; Outputs:
 25374                                  ;	BX points to DEVFCB
 25375                                  ;	SI points to dir_first field
 25376                                  ;	AH = input BH
 25377                                  ;	AL = 0
 25378                                  ;	dir_first = DEVPT
 25379                                  ;	Zero Set, Carry Clear
 25380                                  ; DS,ES,BP preserved, others destroyed
 25381                                  ;--------------------------------------------------------------------------
 25382                                  
 25383                                  Build_device_ent:
 25384 0000414E B82020                  	MOV	AX,"  " ; 2020h
 25385                                  
 25386                                  ;hkn; DEVFCB is in DOSDATA
 25387 00004151 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25388                                  
 25389                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25390                                  
 25391 00004154 AB                      	STOSW
 25392 00004155 AA                      	STOSB				; Blank out extent field
 25393                                  	;mov	al,40h
 25394 00004156 B040                    	MOV	AL,attr_device
 25395                                  
 25396                                  ;	Fill Dir_attr
 25397                                  
 25398 00004158 AA                      	STOSB				; Set attribute field
 25399 00004159 31C0                    	XOR	AX,AX
 25400 0000415B B90A00                  	MOV	CX,10
 25401                                  
 25402                                  ; Fill dir_pad
 25403                                  
 25404 0000415E F3AB                    	REP	STOSW			; Fill rest with zeros
 25405 00004160 E883C9                  	call	DATE16
 25406                                  
 25407                                  ;hkn; DEVFCB is in DOSDATA
 25408 00004163 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25409 00004166 92                      	XCHG	AX,DX
 25410                                  
 25411                                  ; Fill dir_time
 25412                                  
 25413 00004167 AB                      	STOSW
 25414 00004168 92                      	XCHG	AX,DX
 25415                                  
 25416                                  ; Fill dir_date
 25417                                  
 25418 00004169 AB                      	STOSW
 25419 0000416A 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25420 0000416C A1[9A05]                	MOV	AX,[DEVPT]
 25421                                  
 25422                                  ; Fill dir_first
 25423                                  
 25424 0000416F AB                      	STOSW				; Dir_first points to device
 25425 00004170 A1[9C05]                	MOV	AX,[DEVPT+2]
 25426                                  ;
 25427                                  ; Fill dir_size_l
 25428                                  ;
 25429 00004173 AB                      	STOSW
 25430 00004174 88FC                    	MOV	AH,BH			; Put device atts in AH
 25431                                  
 25432                                  ;hkn; DEVFCB is in DOSDATA
 25433 00004176 BB[4B05]                	MOV	BX,DEVFCB
 25434 00004179 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25435 0000417B C3                      	retn
 25436                                  
 25437                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25438                                  ;----------------------------------------------------------------------------
 25439                                  ;
 25440                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25441                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25442                                  ;   If invalid, reset original CDS to root.
 25443                                  ;
 25444                                  ;   Inputs:	ThisCDS points to CDS of interest
 25445                                  ;		SS:DI points to temp buffer
 25446                                  ;   Outputs:	The current directory string is validated on the appropriate
 25447                                  ;		    drive
 25448                                  ;		ThisDPB changed
 25449                                  ;		ES:DI point to CDS
 25450                                  ;		Carry set if error (currently user FAILed to I 24)
 25451                                  ;   Registers modified: all
 25452                                  ;----------------------------------------------------------------------------
 25453                                  
 25454                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25455                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25456                                  
 25457                                  ValidateCDS:
 25458                                  	; 19/05/2019 - Retro DOS v4.0
 25459                                  	; 28/07/2018 - Retro DOS v3.0
 25460                                  
 25461                                     %define  Temp	[bp-2]	; word
 25462                                     %define  SaveCDS	[bp-6]	; dword
 25463                                     %define  SaveCDSL	[bp-6]	; word
 25464                                     %define  SaveCDSH	[bp-4]	; word
 25465                                  
 25466                                  	;Enter
 25467 0000417C 55                      	push	bp
 25468 0000417D 89E5                    	mov	bp,sp
 25469 0000417F 83EC06                  	sub	sp,6
 25470                                  
 25471 00004182 897EFE                  	MOV	Temp,DI
 25472                                  
 25473                                  ;hkn; SS override
 25474 00004185 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25475 0000418A 8976FA                  	MOV	SaveCDSL,SI
 25476 0000418D 8C5EFC                  	MOV	SaveCDSH,DS
 25477                                  	;EnterCrit critDisk
 25478 00004190 E860D1                  	call	ECritDisk
 25479                                  	; 21/11/2022
 25480                                  	;test	byte [SI+curdir.flags+1],80h
 25481                                  	;test	word [si+67],8000h
 25482                                  	; 17/12/2022
 25483                                  	;test	byte [SI+68],80h
 25484 00004193 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25485                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25486 00004197 7403                    	JZ	short _DoSplice
 25487 00004199 E99200                  	JMP	FatFail
 25488                                  _DoSplice:
 25489 0000419C 30D2                    	XOR	DL,DL
 25490 0000419E 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25491                                  
 25492                                  ;hkn; SS is DOSDATA
 25493                                  	;Context ES
 25494 000041A3 16                      	push	ss
 25495 000041A4 07                      	pop	es
 25496                                  	;Invoke	FStrcpy
 25497 000041A5 E820D0                  	call	FStrCpy
 25498 000041A8 8B76FE                  	MOV	SI,Temp
 25499                                  
 25500                                  ;hkn; SS is DOSDATA
 25501                                  	;Context DS
 25502 000041AB 16                      	push	ss
 25503 000041AC 1F                      	pop	ds	
 25504                                  	;Invoke	Splice
 25505 000041AD E86E2B                  	call	Splice
 25506                                  
 25507                                   ;hkn; SS is DOSDATA
 25508                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25509 000041B0 16                      	push	ss
 25510 000041B1 1F                      	pop	ds
 25511 000041B2 8816[4C03]              	MOV	[NoSetDir],DL
 25512 000041B6 C43E[A205]              	LES	DI,[THISCDS]
 25513                                  	;SAVE	<BP>
 25514 000041BA 55                      	push	bp
 25515                                  	;Invoke	FATREAD_CDS
 25516 000041BB E84214                  	call	FATREAD_CDS	
 25517                                  	;RESTORE <BP>
 25518 000041BE 5D                      	pop	bp
 25519 000041BF 726D                    	JC	short FatFail
 25520                                  
 25521 000041C1 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25522                                  	;cmp	word [si+73],-1
 25523 000041C5 837C49FF                	CMP	word [SI+curdir.ID],-1
 25524 000041C9 7555                    	JNZ	short RestoreCDS
 25525                                  
 25526                                  ;hkn; SS is DOSDATA
 25527                                  	;Context ES
 25528 000041CB 16                      	push	ss
 25529 000041CC 07                      	pop	es
 25530                                  
 25531                                  ;hkn; SS override
 25532                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25533 000041CD 36FF36[B205]            	push	word [SS:WFP_START]
 25534                                  	;cmp	si,[bp-6]
 25535 000041D2 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25536 000041D5 750B                    	JNZ	short DoChdir
 25537                                  	;mov	di,[bp-2]
 25538 000041D7 8B7EFE                  	MOV	DI,Temp
 25539                                  
 25540                                  ;hkn; SS override
 25541 000041DA 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25542                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25543 000041DF E8E6CF                  	call	FStrCpy
 25544                                  DoChdir:
 25545                                  ;hkn; SS is DOSDATA
 25546                                  	;Context DS
 25547 000041E2 16                      	push	ss
 25548 000041E3 1F                      	pop	ds
 25549                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25550 000041E4 FF36[6D05]              	push	word [SATTRIB]
 25551 000041E8 55                      	push	bp
 25552                                  	;Invoke	DOS_ChDir
 25553 000041E9 E83CEF                  	call	DOS_CHDIR
 25554                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25555 000041EC 5D                      	pop	bp
 25556 000041ED 5B                      	pop	bx
 25557 000041EE 8F06[B205]              	pop	word [WFP_START]
 25558 000041F2 881E[6D05]              	MOV	[SATTRIB],BL
 25559 000041F6 C576FA                  	LDS	SI,SaveCDS
 25560 000041F9 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25561                                  
 25562                                  ;hkn; SS override for THISCDS
 25563 000041FB 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25564 00004200 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25565 00004205 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25566 00004207 884C03                  	MOV	[SI+3],CL		;	    }
 25567                                  SetCluster:
 25568                                  	;mov	word [si+73],0FFFFh
 25569 0000420A C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25570 0000420F 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25571                                  	; 21/11/2022
 25572                                  	;test	byte [si+curdir.flags+1],20h
 25573                                  	; 19/05/2019
 25574                                  	; MSDOS 6.0
 25575                                  	; 17/12/2022
 25576                                  	;test	byte [si+68],20h
 25577 00004214 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25578                                  	;;test	word [si+67],2000h
 25579                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25580 00004218 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25581 0000421A B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25582                                  _setdirclus:
 25583                                  	;mov	[si+73],cx
 25584 0000421D 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25585                                  RestoreCDS:
 25586 00004220 C47EFA                  	LES	DI,SaveCDS
 25587 00004223 36893E[A205]            	MOV	[SS:THISCDS],DI
 25588 00004228 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25589 0000422D F8                      	CLC
 25590                                  FatFail:
 25591                                  	;LeaveCrit critDisk
 25592 0000422E E8DDD0                  	call	LCritDisk
 25593                                  
 25594                                  	;les	di,[bp-6]
 25595 00004231 C47EFA                  	LES	DI,SaveCDS
 25596                                  	;Leave
 25597 00004234 89EC                    	mov	sp,bp
 25598 00004236 5D                      	pop	bp
 25599 00004237 C3                      	retn
 25600                                  
 25601                                  ; 28/07/2018 - Retro DOS v3.0
 25602                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25603                                  
 25604                                  ;Break	<CheckThisDevice - Check for being a device>
 25605                                  ;---------------------------------------------------------------------------
 25606                                  ;
 25607                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25608                                  ;   device specified. We will return carry if there is a device present. 
 25609                                  ;   The forms of devices we will recognize are:
 25610                                  ;
 25611                                  ;	[path]device
 25612                                  ;
 25613                                  ;   Note that the drive letter has *already* been removed. All other forms
 25614                                  ;   are not considered to be devices. If such a device is found we change
 25615                                  ;   the source pointer to point to the device component.
 25616                                  ;
 25617                                  ;   Inputs:	ES is DOSDATA
 25618                                  ;		DS:SI contains name
 25619                                  ;   Outputs:	ES is DOSDATA
 25620                                  ;		DS:SI point to name or device
 25621                                  ;		Carry flag set if device was found
 25622                                  ;		Carry flag reset otherwise
 25623                                  ;   Registers Modified: all except ES:DI, DS
 25624                                  ;----------------------------------------------------------------------------
 25625                                  
 25626                                  CheckThisDevice:
 25627 00004238 57                      	push	di
 25628 00004239 56                      	push	si
 25629 0000423A 89F7                    	MOV	DI,SI
 25630                                  
 25631                                  ; Check for presence of \dev\ (Dam multiplan!)
 25632                                  
 25633 0000423C 8A04                    	MOV	AL,[SI]
 25634 0000423E E8860D                  	call	PATHCHRCMP		; is it a path char?
 25635 00004241 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25636 00004243 46                      	INC	SI			; simulate LODSB
 25637                                  
 25638                                  ; We have the leading path separator. Look for DEV part.
 25639                                  
 25640 00004244 AD                      	LODSW
 25641 00004245 0D2020                  	OR	AX,2020h
 25642 00004248 3D6465                  	cmp	ax,"de"
 25643                                  	;CMP	AX,"e"<< 8 + "d"
 25644 0000424B 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25645 0000424D AC                      	LODSB
 25646 0000424E 0C20                    	OR	AL,20h
 25647 00004250 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25648 00004252 7526                    	JNZ	short NotDevice
 25649 00004254 AC                      	LODSB
 25650 00004255 E86F0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25651 00004258 7520                    	JNZ	short NotDevice		; no. go for it.
 25652                                  
 25653                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25654                                  ; SI and DevName may destroy DS.
 25655                                  
 25656                                  ParseDev:
 25657 0000425A 1E                      	push	ds
 25658 0000425B 56                      	push	si			; preserve the source pointer
 25659 0000425C E8A60C                  	call	NameTrans		; advance DS:SI
 25660 0000425F 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25661 00004262 F9                      	STC				; simulate a Carry return from DevName
 25662 00004263 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25663                                  
 25664                                  ;hkn; SS is DOSDATA
 25665 00004265 16                      	push	ss
 25666 00004266 1F                      	pop	ds
 25667                                  
 25668                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25669                                  ;
 25670                                  ; SR;
 25671                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25672                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25673                                  ; old call set the volume attribute bit.
 25674                                  
 25675 00004267 A0[6D05]                	mov	al,[SATTRIB]
 25676 0000426A A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25677                                  
 25678                                  ; M026 - end
 25679                                  
 25680 0000426D E87FFE                  	call	DEVNAME
 25681                                  
 25682                                  SkipSearch:
 25683 00004270 5E                      	pop	si
 25684 00004271 1F                      	pop	ds
 25685                                  
 25686                                  ; SI points to the beginning of the potential device. If we have a device
 25687                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25688                                  ; original value. At this point Carry set indicates FILE.
 25689                                  
 25690                                  CheckReturn:
 25691 00004272 5F                      	pop	di			; get original SI
 25692 00004273 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25693 00004275 89FE                    	MOV	SI,DI
 25694                                  Check_Done:
 25695 00004277 5F                      	pop	di
 25696 00004278 F5                      	CMC				; invert carry. Carry => device
 25697 00004279 C3                      	retn
 25698                                  NotDevice:
 25699 0000427A F9                      	STC
 25700 0000427B EBF5                    	JMP	short CheckReturn
 25701                                  
 25702                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25703                                  ;-----------------------------------------------------------------------------
 25704                                  ;
 25705                                  ; Procedure Name : LookupPath
 25706                                  ;
 25707                                  ; Output  DS:SI -> path name,
 25708                                  ;	  ES:DI -> dir entry info buffer
 25709                                  ;	  ES:CX -> extended dir info buffer
 25710                                  ;
 25711                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25712                                  ;			     FastOpen, DS:SI points to char just one after
 25713                                  ;			     the last char of path name which is fully or
 25714                                  ;			     partially found in FastOPen
 25715                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25716                                  ;
 25717                                  ;----------------------------------------------------------------------------
 25718                                  
 25719                                  LookupPath:
 25720                                  ;	PUSH	AX
 25721                                  
 25722                                  ;hkn; SS override
 25723                                  	;test	byte [ss:FastOpenFlg],1
 25724 0000427D 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25725 00004283 7503                    	JNZ	short FASTINST			    ; and this routine is
 25726                                  NOLOOK:
 25727 00004285 E99700                  	JMP	NOLOOKUP			    ; executed once
 25728                                  
 25729                                  FASTINST:
 25730                                  ;hkn; SS override
 25731                                  	;test	byte [ss:FastOpenFlg],8
 25732 00004288 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25733 0000428E 75F5                    	JNZ	short NOLOOK			    ; yes
 25734                                  
 25735 00004290 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25736                                  
 25737                                  ;hkn; SS override
 25738 00004293 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25739 00004298 BF[460D]                	MOV	DI,Dir_Info_Buff
 25740 0000429B B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25741 0000429E B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25742 000042A0 1E                      	PUSH	DS
 25743 000042A1 07                      	POP	ES
 25744                                  
 25745                                  ;hkn; SS override
 25746                                  	;call	far [bx+2]
 25747 000042A2 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25748 000042A5 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25749                                  
 25750 000042A7 8D5CFE                  	LEA	BX,[SI-2]
 25751                                  
 25752                                  ;hkn; SS override
 25753 000042AA 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25754 000042AF 745D                    	JZ	short NOTFOUND			    ; no
 25755                                  
 25756                                  	; 19/05/2019 - Retro DOS v4.0
 25757                                  
 25758                                  	; MSDOS 6.0				    ; fully or partially found
 25759 000042B1 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25760 000042B4 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25761 000042B6 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25762                                  
 25763                                  ;hkn; SS override for attrib/sattrib
 25764 000042B7 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25765 000042BC 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25766 000042C1 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25767                                  	;mov	ch,[es:di+0Bh]
 25768 000042C6 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25769 000042CA E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25770                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25771 000042CD 59                      	POP	CX				    ;AN000;FO.;
 25772 000042CE 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25773                                  parfnd:
 25774                                  
 25775                                  ;hkn; SS override
 25776 000042D0 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25777 000042D5 89CB                    	MOV	BX,CX
 25778                                  	; MSDOS 6.0
 25779                                  	;mov	ax,[bx+7]
 25780 000042D7 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25781                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25782 000042DA 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25783 000042DE 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25784 000042E1 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25785                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25786                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25787                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25788 000042E5 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25789 000042E8 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25790                                  
 25791 000042EC 06                      	PUSH	ES				    ; save ES
 25792                                  ;hkn; SS override
 25793 000042ED 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25794 000042F2 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25795                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25796 000042F5 07                      	POP	ES				    ; pop ES
 25797                                  ;SR;
 25798                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25799                                  ;indicate it is not a root dir
 25800                                  
 25801 000042F6 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25802 000042FD 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25803 00004302 89FB                    	MOV	BX,DI				    ; start of entry
 25804                                  	;lea	si,[di+1Ah]
 25805 00004304 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25806                                  						    ; dir_first field in the
 25807                                  						    ; dir entry
 25808                                  ;hkn; SS override for FastOpenFlg
 25809                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25810 00004307 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25811                                  ;	POP	AX
 25812 0000430D C3                      	RETN
 25813                                  NOTFOUND:
 25814 0000430E 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25815 00004311 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25816 00004313 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25817                                  Partial_Success:
 25818                                  	;and	byte [SS:FastOpenFlg],0FBh
 25819 00004319 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25820                                  NOLOOKUP:
 25821                                  ;	POP	AX
 25822 0000431F F9                      	STC
 25823 00004320 C3                      	RETN
 25824                                  
 25825                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25826                                  ;-----------------------------------------------------------------------------
 25827                                  ;
 25828                                  ; Procedure Name : InsertPath
 25829                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25830                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25831                                  ;	  DS = DOSDATA
 25832                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25833                                  ;
 25834                                  ;-----------------------------------------------------------------------------
 25835                                  
 25836                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25837                                  
 25838                                  InsertPath:
 25839 00004321 9C                      	PUSHF
 25840                                  ;hkn; SS override for FastOpenFlag
 25841                                  	;test	byte [SS:FastOpenFlg], 1
 25842 00004322 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25843 00004328 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25844                                  	;test	byte [ss:FastOpenFlg],2
 25845 0000432A 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25846 00004330 740D                    	JZ	short INSERT_DIR_INFO		; no
 25847                                  	;and	byte [ss:FastOpenFlg],0FDh
 25848 00004332 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25849 00004338 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25850 0000433D EB5E                    	JMP	short GET_NEXT2
 25851                                  INSERT_DIR_INFO:				; save registers
 25852 0000433F 1E                      	PUSH	DS
 25853 00004340 06                      	PUSH	ES
 25854 00004341 53                      	PUSH	BX
 25855 00004342 56                      	PUSH	SI
 25856 00004343 57                      	PUSH	DI
 25857 00004344 51                      	PUSH	CX
 25858 00004345 50                      	PUSH	AX
 25859                                  
 25860                                  ;hkn; SS override
 25861 00004346 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25862 0000434B BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25863                                  	;mov	ax,[di+6]
 25864 0000434E 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25865                                  	; MSDOS 6.0
 25866                                  	;mov	[ss:si+1],ax
 25867 00004351 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25868                                  	; 19/05/2019 - Retro DOS v4.0
 25869 00004355 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25870                                  
 25871                                  ;hkn; SS is DOSDATA
 25872 00004358 16                      	push	ss
 25873 00004359 1F                      	pop	ds
 25874                                  	; MSDOS 3.3	
 25875                                  	;;mov	[si+1],ax	
 25876                                  	;MOV	[SI+FEI.dirsec],AX
 25877                                  	; MSDOS 6.0
 25878                                  	;mov	[si+3],ax
 25879 0000435A 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25880                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25881 0000435D A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25882                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25883                                  	;mov	[si+3],ax ; MSDOS 3.3
 25884 00004360 894405                  	MOV	[SI+FEI.clusnum],AX
 25885                                  	; MSDOS 6.0
 25886 00004363 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25887                                  	;mov	[si+7],ax
 25888 00004366 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25889 00004369 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25890                                  	;mov	[si+9],ax
 25891 0000436C 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25892                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25893 0000436F 89D8                    	MOV	AX,BX
 25894                                  	;;add	di,16  ; MSDOS 3.3
 25895                                  	;add	di,20  ; MSDOS 6.0
 25896 00004371 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25897 00004374 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25898                                  	;mov	cl,32
 25899 00004376 B120                    	MOV	CL,dir_entry.size
 25900 00004378 F6F1                    	DIV	CL
 25901                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25902 0000437A 8804                    	mov	[si],al
 25903                                  
 25904 0000437C 1E                      	PUSH	DS
 25905 0000437D 07                      	POP	ES
 25906                                  
 25907 0000437E 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25908 00004382 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25909                                  	;cmp	word [di+1Ah],0
 25910 00004384 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25911                                  					; never insert info when file is empty
 25912 00004388 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25913                                  
 25914 0000438A 56                      	PUSH	SI			; ES:BX -> extended info
 25915 0000438B 5B                      	POP	BX
 25916                                  
 25917                                  	;mov	al,2
 25918 0000438C B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25919 0000438E BE[300D]                	MOV	SI,FastOpenTable
 25920                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25921                                  	; 07/12/2022
 25922 00004391 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25923                                  
 25924 00004395 F8                      	CLC
 25925                                  SKIP_INSERT:
 25926 00004396 58                      	POP	AX
 25927 00004397 59                      	POP	CX			; restore registers
 25928 00004398 5F                      	POP	DI
 25929 00004399 5E                      	POP	SI
 25930 0000439A 5B                      	POP	BX
 25931 0000439B 07                      	POP	ES
 25932 0000439C 1F                      	POP	DS
 25933                                  GET_NEXT2:
 25934                                  	;or	[ss:FastOpenFlg],8
 25935 0000439D 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25936                                  					; we got dir info from fastopen so
 25937                                  GET_NEXT_ELEMENT:
 25938 000043A3 9D                      	POPF
 25939 000043A4 C3                      	RETN
 25940                                  
 25941                                  ;============================================================================
 25942                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25943                                  ;============================================================================
 25944                                  ; 17/07/2018 - Retro DOS v3.0
 25945                                  ; 30/04/2019 - Retro DOS v4.0
 25946                                  
 25947                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25948                                  
 25949                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25950                                  
 25951                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25952                                  
 25953                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25954                                  ;DEV001s:
 25955                                  ;		length of packets
 25956 000043A5 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25957                                  ;LenTab: db	22,14,22,13,15,14
 25958                                  
 25959                                  ;	Error Function
 25960                                  
 25961                                  CmdTab:
 25962 000043AB 8604                    	DB	86h, DEVRD	; 0 input
 25963 000043AD 8605                    	DB	86h, DEVRDND	; 1 input status
 25964 000043AF 8708                    	DB	87h, DEVWRT	; 2 output
 25965 000043B1 870A                    	DB	87h, DEVOST	; 3 output status
 25966 000043B3 8607                    	DB	86h, DEVIFL	; 4 input flush
 25967 000043B5 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25968                                  
 25969                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25970                                  
 25971                                  ;CmdTab:
 25972                                  ;	db	86h, 4
 25973                                  ;	db	86h, 5
 25974                                  ;	db	87h, 8
 25975                                  ;	db	87h, 10
 25976                                  ;	db	86h, 7
 25977                                  ;	db	86h, 5
 25978                                  
 25979                                  ;DEV001E:
 25980                                  
 25981                                  ; 30/04/2019 - Retro DOS v4.0
 25982                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25983                                  
 25984                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25985                                  ;----------------------------------------------------------------------------
 25986                                  ;
 25987                                  ; Procedure Name : IOFUNC
 25988                                  ;
 25989                                  ; Inputs:
 25990                                  ;	DS:SI Points to SFT
 25991                                  ;	AH is function code
 25992                                  ;		= 0 Input
 25993                                  ;		= 1 Input Status
 25994                                  ;		= 2 Output
 25995                                  ;		= 3 Output Status
 25996                                  ;		= 4 Flush
 25997                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25998                                  ;				   present.
 25999                                  ;	AL = character if output
 26000                                  ; Function:
 26001                                  ;	Perform indicated I/O to device or file
 26002                                  ; Outputs:
 26003                                  ;	AL is character if input
 26004                                  ;	If a status call
 26005                                  ;		zero set if not ready
 26006                                  ;		zero reset if ready (character in AL for input status)
 26007                                  ; For regular files:
 26008                                  ;	Input Status
 26009                                  ;		Gets character but restores position
 26010                                  ;		Zero set on EOF
 26011                                  ;	Input
 26012                                  ;		Gets character advances position
 26013                                  ;		Returns ^Z on EOF
 26014                                  ;	Output Status
 26015                                  ;		Always ready
 26016                                  ; AX altered, all other registers preserved
 26017                                  ;----------------------------------------------------------------------------
 26018                                  
 26019                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26020                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26021                                  
 26022                                  IOFUNC:
 26023 000043B7 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26024                                  					; DEVIOBUF
 26025 000043BC 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26026 000043C3 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26027 000043CA 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26028                                  	;test	byte [si+6],80h
 26029                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26030 000043CE F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26031 000043D2 7403                    	JZ	short IOTO22		;AN000;
 26032 000043D4 E9A500                  	JMP	IOTOFILE		;AN000;
 26033                                  IOTO22:
 26034                                  	;test	word [si+5],80h
 26035                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26036 000043D7 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26037 000043DB 7503                    	JNZ	short IOTO33		;AN000;
 26038 000043DD E99C00                  	JMP	IOTOFILE		;AN000;
 26039                                  IOTO33:
 26040 000043E0 06                      	push	es ; * (MSDOS 6.21)
 26041 000043E1 E87EC0                  	call	save_world
 26042 000043E4 8CDA                    	MOV	DX,DS
 26043 000043E6 8CD3                    	MOV	BX,SS
 26044 000043E8 8EDB                    	MOV	DS,BX
 26045 000043EA 8EC3                    	MOV	ES,BX
 26046 000043EC 31DB                    	XOR	BX,BX
 26047 000043EE 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26048 000043F1 7503                    	jnz	short _no_sys_wait
 26049                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26050                                  	; 16/12/2022
 26051 000043F3 80CF04                  	or	bh,04h
 26052                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26053                                  				    ; It is up to device driver to carry out
 26054                                  				    ; appropriate action.
 26055                                  _no_sys_wait:
 26056 000043F6 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26057 000043FA 31DB                    	XOR	BX,BX
 26058 000043FC 881E[8903]              	MOV	[IOMED],BL
 26059                                  
 26060 00004400 88E3                    	MOV	BL,AH		 	; get function
 26061 00004402 2E8AA7[A543]            	MOV	AH,[cs:BX+LenTab]
 26062 00004407 D1E3                    	SHL	BX,1
 26063 00004409 2E8B8F[AB43]            	MOV	CX,[cs:BX+CmdTab]
 26064 0000440E BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26065 00004411 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26066 00004415 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26067                                  
 26068 00004419 8EDA                    	MOV	DS,DX
 26069 0000441B E86B01                  	CALL	DEVIOCALL
 26070 0000441E 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26071 00004423 21FF                    	and	di,di
 26072 00004425 7834                    	js	short DevErr
 26073                                  OKDevIO:
 26074 00004427 8CD0                    	MOV	AX,SS
 26075 00004429 8ED8                    	MOV	DS,AX
 26076                                  
 26077                                  	;cmp	ch,5
 26078 0000442B 80FD05                  	CMP	CH,DEVRDND
 26079 0000442E 7506                    	JNZ	short DNODRD
 26080 00004430 A0[8903]                	MOV	AL,[IORCHR]
 26081 00004433 A2[BC03]                	MOV	[DEVIOBUF],AL
 26082                                  
 26083                                  DNODRD: 
 26084 00004436 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26085 0000443A F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26086                                  	;and	ah,2
 26087 0000443C 80E402                  	AND	AH,STBUI>>8
 26088                                  
 26089                                  QuickReturn:				;AN000; 2/13/KK
 26090 0000443F E809C0                  	call	restore_world
 26091 00004442 07                      	pop	es ; * (MSDOS 6.21)
 26092                                  
 26093                                  	; SR;
 26094                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26095                                  	; IoStatFail = -1 (set after return from the I24)
 26096                                  
 26097                                  	; MSDOS 6.0
 26098 00004443 9C                      	pushf
 26099 00004444 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26100 00004448 98                      	cbw				;sign extend to word
 26101 00004449 83F8FF                  	cmp	ax,-1
 26102 0000444C 7507                    	jne	short not_fail_ret
 26103 0000444E 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26104 00004453 9D                      	popf
 26105 00004454 C3                      	retn
 26106                                  
 26107                                  not_fail_ret:
 26108 00004455 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26109 00004459 9D                      	popf
 26110 0000445A C3                      	retn
 26111                                  
 26112                                  DevErr:
 26113 0000445B 88CC                    	MOV	AH,CL
 26114 0000445D E89F0D                  	call	CHARHARD
 26115 00004460 3C01                    	CMP	AL,1
 26116 00004462 7507                    	JNZ	short NO_RETRY
 26117 00004464 E8E4BF                  	call	restore_world
 26118                                  	; 12/05/2019
 26119 00004467 07                      	pop	es ; * (MSDOS 6.21)		
 26120 00004468 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26121                                  
 26122                                  NO_RETRY:
 26123                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26124                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26125                                  	; simply wants to ignore the error.
 26126                                  	;
 26127                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26128                                  	; should be checked by the caller on return
 26129                                  
 26130                                  					; SS override
 26131 0000446B 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26132                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26133                                  
 26134                                  	; SR;
 26135                                  	; Check if user failed
 26136                                  
 26137                                  	; MSDOS 6.0
 26138 00004471 3C03                    	cmp	al,3
 26139 00004473 7505                    	jnz	short not_fail
 26140 00004475 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26141                                  not_fail:
 26142 0000447A EBAB                    	JMP	short OKDevIO
 26143                                  
 26144                                  IOTOFILE:
 26145 0000447C 08E4                    	OR	AH,AH
 26146 0000447E 7421                    	JZ	short IOIN
 26147 00004480 FECC                    	DEC	AH
 26148 00004482 7405                    	JZ	short IOIST
 26149 00004484 FECC                    	DEC	AH
 26150 00004486 7411                    	JZ	short IOUT
 26151                                  IOUT_retn:	; 18/12/2022
 26152 00004488 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26153                                  IOIST:
 26154                                  	;push	word [si+15h]
 26155 00004489 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26156                                  	;push	word [si+17h]
 26157 0000448C FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26158 0000448F E80F00                  	CALL	IOIN
 26159                                  	;pop	word [si+17h]
 26160 00004492 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26161                                  	;pop	word [si+15h]
 26162 00004495 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26163 00004498 C3                      	retn
 26164                                  IOUT:
 26165 00004499 E82500                  	CALL	SETXADDR
 26166 0000449C E8A3EF                  	call	DOS_WRITE
 26167                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26168                                  	; 18/12/2022
 26169 0000449F EB52                    	jmp	RESTXADDR
 26170                                  ;IOUT_retn:
 26171                                  	;retn			; come crying to me when things don't
 26172                                  				; work ARR
 26173                                  IOIN:
 26174 000044A1 E81D00                  	CALL	SETXADDR
 26175                                  					; SS override for DOS34_FLAG
 26176                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26177                                  	;or	word [ss:DOS34_FLAG],40h
 26178                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26179                                  	; 16/12/2022
 26180 000044A4 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26181 000044AA E895ED                  	CALL	DOS_READ
 26182                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26183                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26184                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26185                                  	; 16/12/2022
 26186 000044AD 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26187 000044B3 09C9                    	OR	CX,CX			; Check EOF
 26188 000044B5 E83B00                  	CALL	RESTXADDR
 26189                                  					; SS override
 26190 000044B8 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26191 000044BC 75CA                    	jnz	short IOUT_retn	
 26192 000044BE B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26193 000044C0 C3                      	retn
 26194                                  
 26195                                  SETXADDR:
 26196                                  					; SS override
 26197 000044C1 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26198                                  
 26199 000044C6 06                      	push	es ; * (MSDOS 6.21)
 26200                                  
 26201 000044C7 E898BF                  	call	save_world
 26202                                  					; SS override for DMAADD and THISSFT
 26203                                  	; 24/09/2023
 26204                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26205                                  	;PUSH	WORD [SS:DMAADD+2]
 26206 000044CA 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26207                                  
 26208 000044CF 16                      	push	ss
 26209 000044D0 1F                      	pop	ds
 26210                                  
 26211                                  	; 24/09/2023
 26212 000044D1 FF36[2C03]              	push	word [DMAADD]
 26213 000044D5 FF36[2E03]              	push	word [DMAADD+2]
 26214                                  
 26215 000044D9 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26216 000044DD 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 26217 000044E1 890E[2E03]              	MOV	[DMAADD+2],CX
 26218 000044E5 8B0E[8A03]              	MOV	CX,[IOXAD]
 26219 000044E9 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 26220 000044ED 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26221 000044F1 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26222                                  
 26223                                  RESTXADDR:
 26224 000044F3 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26225 000044F7 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26226 000044FB 8F06[2C03]              	POP	WORD [DMAADD]
 26227                                  
 26228 000044FF E849BF                  	call	restore_world
 26229                                  
 26230 00004502 07                      	pop	es ; * (MSDOS 6.21)
 26231                                  					; SS override
 26232                                  RESTRET:
 26233 00004503 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26234                                  
 26235                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26236                                  ; 21/11/2022
 26237                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26238                                  
 26239                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26240                                  
 26241                                  ;----------------------------------------------------------------------------
 26242                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26243                                  ;
 26244                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26245                                  ;	the SFT.
 26246                                  ;
 26247                                  ;	ENTRY	(ES:DI) = SFT
 26248                                  ;	EXIT	none
 26249                                  ;	USES	all
 26250                                  ;----------------------------------------------------------------------------
 26251                                  
 26252                                  DEV_OPEN_SFT:
 26253 00004508 06                      	push	es ; * (MSDOS 6.21)
 26254 00004509 E856BF                  	call	save_world
 26255                                  	;mov	al,0Dh	
 26256 0000450C B00D                    	MOV	AL,DEVOPN
 26257 0000450E EB06                    	JMP	SHORT DO_OPCLS
 26258                                  
 26259                                  ;----------------------------------------------------------------------------
 26260                                  ; Procedure Name : DEV_CLOSE_SFT
 26261                                  ;
 26262                                  ; Inputs:
 26263                                  ;	ES:DI Points to SFT
 26264                                  ; Function:
 26265                                  ;	Issue a CLOSE call to the correct device
 26266                                  ; Outputs:
 26267                                  ;	None
 26268                                  ; ALL preserved
 26269                                  ;----------------------------------------------------------------------------
 26270                                  
 26271                                  DEV_CLOSE_SFT:
 26272 00004510 06                      	push	es ; * (MSDOS 6.21)
 26273 00004511 E84EBF                  	call	save_world
 26274                                  	;mov	al,0Eh	
 26275 00004514 B00E                    	MOV	AL,DEVCLS
 26276                                  
 26277                                  	; Main entry for device open and close. AL contains the function 
 26278                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26279                                  	; open/close to block devices. This allows networks to function but 
 26280                                  	; does NOT hang up with bogus change-line code.
 26281                                  
 26282                                  	;entry	DO_OPCLS
 26283                                  DO_OPCLS:
 26284                                  	; Is the SFT for the net? If so, no action necessary.
 26285                                  
 26286                                  	; MSDOS 6.0
 26287                                  	;test	word [es:di+5],8000h
 26288                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26289 00004516 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26290 0000451B 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26291 0000451D 30E4                    	XOR	AH,AH			; Unit
 26292                                  	;test	byte [es:di+5],80h
 26293 0000451F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26294                                  	;les	di,[es:di+7]
 26295 00004524 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26296 00004528 7513                    	JNZ	short GOT_DEV_ADDR
 26297                                  
 26298                                  	; We are about to call device open/close on a block driver. If no 
 26299                                  	; sharing then just short circuit to done.
 26300                                  	
 26301                                  	; MSDOS 6.0
 26302                                  					; SS override
 26303 0000452A 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26304 00004530 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 26305                                  
 26306                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26307                                  	;mov	ah,[es:di+1]
 26308 00004532 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26309 00004536 268A0D                  	mov	cl,[es:di]
 26310                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26311                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26312                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26313 00004539 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26314                                  GOT_DEV_ADDR:				; ES:DI -> device
 26315                                  	;test	word [es:di+4],800h
 26316                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26317 0000453D 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26318 00004542 7440                    	JZ	short OPCLS_DONE	; Device can't
 26319 00004544 06                      	PUSH	ES
 26320 00004545 1F                      	POP	DS
 26321 00004546 89FE                    	MOV	SI,DI			; DS:SI -> device
 26322                                  
 26323                                  OPCLS_RETRY:
 26324                                  	;Context ES
 26325 00004548 16                      	push	ss
 26326 00004549 07                      	pop	es
 26327                                  					; DEVCALL is in DOSDATA
 26328 0000454A BF[5A03]                	MOV	DI,DEVCALL
 26329                                  
 26330 0000454D 89FB                    	MOV	BX,DI
 26331 0000454F 50                      	PUSH	AX
 26332                                  	;mov	al,13
 26333 00004550 B00D                    	MOV	AL,DOPCLHL
 26334 00004552 AA                      	STOSB				; Length
 26335 00004553 58                      	POP	AX
 26336 00004554 86E0                    	XCHG	AH,AL
 26337 00004556 AA                      	STOSB				; Unit
 26338 00004557 86E0                    	XCHG	AH,AL
 26339 00004559 AA                      	STOSB				; Command
 26340 0000455A 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26341 0000455F 50                      	PUSH	AX			; Save Unit,Command
 26342                                  	;invoke	DEVIOCALL2
 26343 00004560 E82900                  	call	DEVIOCALL2
 26344                                  
 26345                                  	;mov	di,[es:bx+3]
 26346 00004563 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26347                                  	;test	di,8000h
 26348                                  	;jz	short OPCLS_DONEP	
 26349 00004567 21FF                    	and	di,di
 26350 00004569 7918                    	jns	short OPCLS_DONEP	; No error
 26351                                  	; 21/11/2022
 26352                                  	;test	word [si+4],8000h
 26353                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26354                                  	;test	word [si+5],80h
 26355 0000456B F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26356 0000456F 7404                    	JZ	short BLKDEV
 26357 00004571 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26358 00004573 EB04                    	JMP	SHORT HRDERR
 26359                                  BLKDEV:
 26360 00004575 88C8                    	MOV	AL,CL			; Drive # in AL
 26361 00004577 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26362                                  HRDERR:
 26363                                  	;invoke	CHARHARD
 26364 00004579 E8830C                  	call	CHARHARD
 26365 0000457C 3C01                    	cmp	al,1
 26366 0000457E 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26367                                  					;  Note that FAIL is essentually IGNORED
 26368 00004580 58                      	POP	AX			; Get back Unit, Command
 26369 00004581 EBC5                    	JMP	short OPCLS_RETRY
 26370                                  OPCLS_DONEP:
 26371 00004583 58                      	POP	AX			; Clean stack
 26372                                  OPCLS_DONE:
 26373 00004584 E8C4BE                  	call	restore_world
 26374 00004587 07                      	pop	es ; * (MSDOS 6.21)
 26375 00004588 C3                      	retn
 26376                                  
 26377                                  ; 30/04/2019 - Retro DOS v4.0
 26378                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26379                                  
 26380                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26381                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26382                                  
 26383                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26384                                  ;----------------------------------------------------------------------------
 26385                                  ;**	DevIoCall  - Call Device
 26386                                  ;
 26387                                  ;	ENTRY	DS:SI Points to device SFT
 26388                                  ;		ES:BX Points to request data
 26389                                  ;	EXIT	DS:SI -> Device driver
 26390                                  ;	USES	DS:SI,AX
 26391                                  ;----------------------------------------------------------------------------
 26392                                  ;**	DevIoCall2 - Call Device
 26393                                  ;
 26394                                  ;	ENTRY	DS:SI Points to DPB
 26395                                  ;		ES:BX Points to request data
 26396                                  ;	EXIT	DS:SI -> Device driver
 26397                                  ;	USES	DS:SI,AX
 26398                                  ;----------------------------------------------------------------------------
 26399                                  
 26400                                  DEVIOCALL:
 26401                                  					; SS override for CALLSSEC, 
 26402                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26403 00004589 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26404                                  
 26405                                  	;entry	DEVIOCALL2
 26406                                  DEVIOCALL2:
 26407                                  	;EnterCrit critDevice
 26408 0000458C E899CD                  	call	ECritDevice
 26409                                  
 26410                                  	; MSDOS 6.0
 26411                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26412                                  	;test	byte [si+5],80h
 26413 0000458F F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26414 00004593 7548                    	jnz	short chardev2		;AN000; >32mb no
 26415                                  
 26416                                  	; 16/12/2022
 26417                                  	; 22/11/2022
 26418 00004595 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26419 00004599 3C04                    	cmp	al,DEVRD	; 4
 26420 0000459B 7408                    	je	short chkext	
 26421 0000459D 3C08                    	cmp	al,DEVWRT	; 8
 26422 0000459F 7404                    	je	short chkext
 26423 000045A1 3C09                    	cmp	al,DEVWRTV	; 9
 26424 000045A3 7538                    	jne	short chardev2
 26425                                  
 26426                                  	; 16/12/2022
 26427                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26428                                  	;;cmp	byte [es:bx+2],4
 26429                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26430                                  	;JZ	short chkext		;AN000; >32mb   yes
 26431                                  	;;cmp	byte [es:bx+2],8
 26432                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26433                                  	;JZ	short chkext		;AN000; >32mb   yes
 26434                                  	;;cmp	byte [es:bx+2],9
 26435                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26436                                  	;				;AN000; >32mb write/verify ?
 26437                                  	;JNZ	short chardev2		;AN000; >32mb no
 26438                                  chkext:
 26439 000045A5 E8A700                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26440 000045A8 7255                    	JC	short dev_exit		;AN000;LB. done
 26441                                  
 26442                                  	;test	byte [si+4],2
 26443 000045AA F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26444 000045AE 741D                    	JZ	short chksector		;AN000;>32mb   no
 26445 000045B0 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26446 000045B4 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26447 000045B8 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26448 000045BF 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26449 000045C3 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26450 000045C7 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26451 000045CB EB10                    	JMP	short chardev2		;AN000; >32mb
 26452                                  chksector:				;AN000; >32mb
 26453 000045CD 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26454 000045D3 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26455                                  	;mov	word [es:bx+3],8107h
 26456 000045D5 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26457                                  					;AN000; >32mb
 26458 000045DB EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26459                                  
 26460                                  chardev2:				;AN000;
 26461                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26462                                  	; preserved
 26463                                  
 26464                                  	;mov	ax,[si+6]
 26465 000045DD 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26466 000045E0 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26467 000045E4 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26468 000045E9 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26469                                  
 26470                                  	;mov	ax,[si+8]
 26471 000045EE 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26472 000045F1 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26473 000045F5 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26474                                  
 26475                                  	; MSDOS 6.0
 26476 000045FA E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26477 000045FD 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26478                                  
 26479                                  dev_exit:
 26480                                  	;LeaveCrit critDevice
 26481                                  	;call	LCritDevice
 26482                                  	;retn
 26483                                  	; 18/12/2022
 26484 000045FF E941CD                  	jmp	LCritDevice
 26485                                  
 26486                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26487                                  ; 22/11/2022
 26488                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26489                                  
 26490                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26491                                  ;---------------------------------------------------------------------------
 26492                                  ;
 26493                                  ; Procedure Name : SETREAD, SETWRITE
 26494                                  ;
 26495                                  ; Inputs:
 26496                                  ;	DS:BX = Transfer Address
 26497                                  ;	CX = Record Count
 26498                                  ;	DX = Starting Record
 26499                                  ;	AH = Media Byte
 26500                                  ;	AL = Unit Code
 26501                                  ; Function:
 26502                                  ;	Set up the device call header at DEVCALL
 26503                                  ; Output:
 26504                                  ;	ES:BX Points to DEVCALL
 26505                                  ; No other registers effected
 26506                                  ;
 26507                                  ;---------------------------------------------------------------------------
 26508                                  
 26509                                  SETREAD_XJ:
 26510                                  	;;;
 26511                                  	; 07/02/2024 - Retro DOS v4.2
 26512 00004602 89FB                    	mov	bx,di
 26513 00004604 EB07                    	jmp	short SETREAD_X
 26514                                  	;;;
 26515                                  
 26516                                  SETREAD_XT:
 26517                                  	;;;
 26518                                  	; 07/02/2024 - Retro DOS v4.2
 26519 00004606 BB[B603]                	mov	bx,TIMEBUF
 26520 00004609 53                      	push	bx
 26521                                  SETREAD_XTC:
 26522 0000460A B90600                  	mov	cx,6
 26523                                  	;;;
 26524                                  SETREAD_X:
 26525                                  	;;;
 26526                                  	; 06/02/2024 - Retro DOS v4.2
 26527 0000460D 31C0                    	xor	ax,ax
 26528                                  	;mov	dx,ax ; 0
 26529 0000460F 99                      	cwd
 26530                                  	;;;
 26531                                  
 26532                                  ; ------------------------------------
 26533                                  
 26534                                  SETREAD:
 26535 00004610 57                      	PUSH	DI
 26536 00004611 51                      	PUSH	CX
 26537 00004612 50                      	PUSH	AX
 26538 00004613 B104                    	MOV	CL,DEVRD ; mov cl,4
 26539                                  SETCALLHEAD:
 26540 00004615 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26541 00004617 16                      	PUSH	SS
 26542 00004618 07                      	POP	ES
 26543                                  					; DEVCALL is in DOSDATA
 26544 00004619 BF[5A03]                	MOV	DI,DEVCALL
 26545                                  
 26546 0000461C AA                      	STOSB				; length
 26547 0000461D 58                      	POP	AX			; 
 26548 0000461E AA                      	STOSB				; Unit
 26549 0000461F 50                      	PUSH	AX
 26550 00004620 88C8                    	MOV	AL,CL
 26551 00004622 AA                      	STOSB				; Command code
 26552 00004623 31C0                    	XOR	AX,AX
 26553 00004625 AB                      	STOSW				; Status
 26554 00004626 83C708                  	ADD	DI,8			; Skip link fields
 26555 00004629 58                      	POP	AX
 26556 0000462A 86E0                    	XCHG	AH,AL
 26557 0000462C AA                      	STOSB				; Media byte
 26558 0000462D 86C4                    	XCHG	AL,AH
 26559 0000462F 50                      	PUSH	AX
 26560 00004630 89D8                    	MOV	AX,BX
 26561 00004632 AB                      	STOSW
 26562                                  
 26563 00004633 8CD8                    	MOV	AX,DS
 26564 00004635 AB                      	STOSW				; Transfer addr
 26565                                  
 26566 00004636 59                      	POP	CX			; Real AX
 26567 00004637 58                      	POP	AX			; Real CX
 26568 00004638 AB                      	STOSW				; Count
 26569                                  
 26570 00004639 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26571 0000463A AB                      	STOSW				; Start
 26572 0000463B 91                      	XCHG	AX,CX
 26573 0000463C 87D1                    	XCHG	DX,CX
 26574 0000463E 5F                      	POP	DI
 26575                                  					; DEVCALL is in DOSDATA
 26576 0000463F BB[5A03]                	MOV	BX,DEVCALL
 26577 00004642 C3                      	retn
 26578                                  
 26579                                  	;entry	SETWRITE
 26580                                  SETWRITE:
 26581                                  
 26582                                  ; Inputs:
 26583                                  ;	DS:BX = Transfer Address
 26584                                  ;	CX = Record Count
 26585                                  ;	DX = Starting Record
 26586                                  ;	AH = Media Byte
 26587                                  ;	AL = Unit Code
 26588                                  ; Function:
 26589                                  ;	Set up the device call header at DEVCALL
 26590                                  ; Output:
 26591                                  ;	ES:BX Points to DEVCALL
 26592                                  ; No other registers effected
 26593                                  
 26594 00004643 57                      	PUSH	DI
 26595 00004644 51                      	PUSH	CX
 26596 00004645 50                      	PUSH	AX
 26597 00004646 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26598 00004648 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26599 0000464D EBC6                    	JMP	SHORT SETCALLHEAD
 26600                                  
 26601                                  ; 30/04/2019 - Retro DOS v4.0
 26602                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26603                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26604                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26605                                  
 26606                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26607                                  ;---------------------------------------------------------------------------
 26608                                  ;
 26609                                  ; Procedure Name : RW_SC
 26610                                  ;
 26611                                  ; Inputs:
 26612                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26613                                  ;	 [SC_STATUS]= SC validity status
 26614                                  ;	 [SEQ_SECTOR]= last sector read
 26615                                  ; Function:
 26616                                  ;	Read from or write through secondary cache
 26617                                  ; Output:
 26618                                  ;	ES:BX Points to DEVCALL
 26619                                  ;	carry clear, I/O is not done
 26620                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26621                                  ;	carry set, I/O is done
 26622                                  ;
 26623                                  ;----------------------------------------------------------------------------
 26624                                  
 26625                                  RW_SC:
 26626                                  	; SS override for all variables used.
 26627                                  	
 26628 0000464F 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26629 00004655 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26630 00004657 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26631 0000465D 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26632 0000465F 51                      	PUSH	CX			    ;AN000;LB.
 26633 00004660 52                      	PUSH	DX			    ;AN000;LB. yes
 26634 00004661 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26635 00004662 56                      	PUSH	SI			    ;AN000;LB.
 26636 00004663 06                      	PUSH	ES			    ;AN000;LB.
 26637 00004664 57                      	PUSH	DI			    ;AN000;LB.
 26638                                  
 26639 00004665 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26640 0000466A 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26641 00004670 7408                    	JZ	short doread		    ;AN000;LB. yes
 26642 00004672 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26643 00004675 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26644                                  scexit4:				    ;AN000;
 26645 00004678 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26646 00004679 C3                      	retn				    ;AN000;LB.
 26647                                  doread: 				    ;AN000;
 26648 0000467A E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26649 0000467D 720A                    	JC	short readSC		    ;AN000;LB.
 26650 0000467F 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26651 00004686 F9                      	STC				    ;AN000;LB. set carry
 26652 00004687 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26653                                  readSC: 				    ;AN000;
 26654 00004689 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26655 0000468D 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26656 00004692 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26657 00004697 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26658                                  	; 24/09/2023
 26659                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26660 0000469C 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26661                                  chklow: 						
 26662 0000469E 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26663 000046A1 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26664 000046A3 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26665 000046AA 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26666 000046AE 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26667                                  readsr:
 26668 000046B2 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26669 000046B6 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26670 000046BA 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26671 000046BE 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26672                                  
 26673 000046C2 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26674 000046C6 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26675 000046CA 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26676 000046CE 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26677 000046D2 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26678 000046D8 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26679 000046DC 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26680 000046E0 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26681 000046E4 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26682 000046E8 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26683 000046EC 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26684                                  saveseq2:				    ;AN000;
 26685 000046F0 F8                      	CLC				    ;AN000;LB. clear carry
 26686                                  saveseq:				    ;AN000;	
 26687 000046F1 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26688 000046F5 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26689 000046F9 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26690 000046FD 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26691 00004701 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26692                                  scexit2:				    ;AN000;LB.
 26693 00004703 F8                      	CLC				    ;AN000;LB.	clear carry
 26694                                  scexit: 				    ;AN000;		
 26695 00004704 5F                      	POP	DI			    ;AN000;LB.
 26696 00004705 07                      	POP	ES			    ;AN000;LB. restore registers
 26697 00004706 5E                      	POP	SI			    ;AN000;LB.
 26698 00004707 1F                      	POP	DS			    ;AN000;LB.
 26699 00004708 5A                      	POP	DX			    ;AN000;LB.
 26700 00004709 59                      	POP	CX			    ;AN000;LB.
 26701 0000470A C3                      	retn				    ;AN000;LB.
 26702                                  
 26703                                  ;Break	<IN_SC -- check if in secondary cache>
 26704                                  ;--------------------------------------------------------------------------
 26705                                  ;
 26706                                  ; Procedure Name : IN_SC
 26707                                  ;
 26708                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26709                                  ;	   [CURSC_DRIVE]= current SC drive
 26710                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26711                                  ;	   [SC_CACHE_COUNT]= SC count
 26712                                  ;	   [HIGH_SECTOR]:DX= sector number
 26713                                  ; Function:
 26714                                  ;	Check if the sector is in secondary cache
 26715                                  ; Output:
 26716                                  ;	carry clear, in SC
 26717                                  ;	   CX= the index in the secondary cache
 26718                                  ;	carry set, not in SC
 26719                                  ;
 26720                                  ;---------------------------------------------------------------------------
 26721                                  
 26722                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26723                                  IN_SC:
 26724                                  	; SS override for all variables used
 26725 0000470B 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26726 0000470F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26727 00004714 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26728 00004716 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26729 0000471A 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26730 0000471C 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26731 00004721 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26732                                  	; 24/09/2023
 26733                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26734 00004726 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26735 00004728 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26736 0000472D 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26737 0000472F F8                      	CLC				    ;AN000;;LB. clear carry
 26738                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26739                                  	; 16/12/2022
 26740 00004730 C3                      	retn	; 30/04/2019
 26741                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26742                                  	;jmp	short inexit
 26743                                  
 26744                                  outrange2:				    ;AN000;;LB. set carry
 26745 00004731 F9                      	STC				    ;AN000;;LB.
 26746                                  inexit: 				    ;AN000;;LB.
 26747 00004732 C3                      	retn				    ;AN000;;LB.
 26748                                  
 26749                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26750                                  ;---------------------------------------------------------------------------
 26751                                  ;
 26752                                  ; Procedure Name : Invalidate_Sc
 26753                                  ;
 26754                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26755                                  ;	   [CURSC_DRIVE]= current SC drive
 26756                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26757                                  ;	   [SC_CACHE_COUNT]= SC count
 26758                                  ;	   [SC_STATUS]= SC status word
 26759                                  ;	   [HIGH_SECTOR]:DX= sector number
 26760                                  ;
 26761                                  ; Function:
 26762                                  ;	invalidate secondary cache if in there
 26763                                  ; Output:
 26764                                  ;	[SC_STATUS] is updated
 26765                                  ;---------------------------------------------------------------------------
 26766                                  
 26767                                  INVALIDATE_SC:
 26768                                  	; SS override for all variables used
 26769                                  
 26770 00004733 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26771 00004736 720C                    	JC	short outrange		    ;AN000;;LB. no
 26772 00004738 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26773 0000473B D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26774 0000473D F7D0                    	NOT	AX			    ;AN000;;LB.
 26775 0000473F 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26776                                  outrange:				    ;AN000;;LB.
 26777 00004744 C3                      	retn				    ;AN000;;LB.
 26778                                  
 26779                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26780                                  ; 22/11/2022
 26781                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26782                                  
 26783                                  ;Break	<VIRREAD- virtually read data into buffer>
 26784                                  ;--------------------------------------------------------------------------
 26785                                  ;
 26786                                  ; Procedure Name : SC_FLAG
 26787                                  ;
 26788                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26789                                  ;		     1, continuous sectors were read into SC
 26790                                  ; Function:
 26791                                  ;	   Move data from SC to buffer
 26792                                  ; Output:
 26793                                  ;	 carry clear, data is moved to buffer
 26794                                  ;	 carry set, bad sector or exceeds maximum sector
 26795                                  ;	   SC_FLAG =0
 26796                                  ;	   CALLSCNT=1
 26797                                  ;	   SC_STATUS= -1 if succeeded
 26798                                  ;     
 26799                                  ;		       0 if failed
 26800                                  ;--------------------------------------------------------------------------
 26801                                  
 26802                                  VIRREAD:
 26803                                  	; SS override for all variables used
 26804                                  
 26805 00004745 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26806 0000474B 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26807 0000474D 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26808 00004751 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26809 00004755 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26810 00004759 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26811 0000475D 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26812 00004763 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26813                                  
 26814                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26815 0000476A 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26816 00004770 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26817 00004772 1E                      	PUSH	DS			    ;AN000;;LB.
 26818 00004773 56                      	PUSH	SI			    ;AN000;;LB.
 26819 00004774 06                      	PUSH	ES			    ;AN000;;LB.
 26820 00004775 57                      	PUSH	DI			    ;AN000;;LB.
 26821 00004776 52                      	PUSH	DX			    ;AN000;;LB.
 26822 00004777 51                      	PUSH	CX			    ;AN000;;LB.
 26823 00004778 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26824 0000477A E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26825 0000477D 59                      	POP	CX
 26826 0000477E 5A                      	POP	DX			    ;AN000;;LB.
 26827 0000477F 5F                      	POP	DI			    ;AN000;;LB.
 26828 00004780 07                      	POP	ES			    ;AN000;;LB.
 26829 00004781 5E                      	POP	SI			    ;AN000;;LB.
 26830 00004782 1F                      	POP	DS			    ;AN000;;LB.
 26831 00004783 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26832                                  scerror:				    ;AN000;
 26833 00004785 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26834 0000478C 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26835 00004793 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26836 00004799 F9                      	STC				    ;AN000;;LB. carry set
 26837 0000479A C3                      	retn				    ;AN000;;LB.
 26838                                  sc2end: 				    ;AN000;
 26839 0000479B F8                      	CLC				    ;AN000;;LB. carry clear
 26840 0000479C C3                      	retn				    ;AN000;;LB.
 26841                                  
 26842                                  ; 30/04/2019 - Retro  DOS v4.0
 26843                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26844                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26845                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26846                                  
 26847                                  ;Break	<SC2BUF- move data from SC to buffer>
 26848                                  ;----------------------------------------------------------------------------
 26849                                  ;
 26850                                  ; Procedure Name : SC2BUF
 26851                                  ;
 26852                                  ; Inputs:  [SC_STATUS] = SC validity status
 26853                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26854                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26855                                  ; Function:
 26856                                  ;	   Move data from SC to buffer
 26857                                  ; Output:
 26858                                  ;	   carry clear, in SC  and data is moved
 26859                                  ;	   carry set, not in SC and data is not moved
 26860                                  ;---------------------------------------------------------------------------
 26861                                  
 26862                                  SC2BUF:
 26863                                  	; SS override for all variables used
 26864 0000479D E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26865                                  	;JC	short noSC		    ;AN000;LB. no
 26866                                  	; 24/09/2023
 26867 000047A0 723D                    	jc	short sexit
 26868 000047A2 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26869 000047A5 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26870 000047A7 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26871 000047AC 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26872                                  ;entry SC2BUF2
 26873                                  SC2BUF2:				    ;AN000;
 26874                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26875                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26876                                  	; 24/09/2023
 26877 000047AE 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26878 000047B2 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26879 000047B3 F7E1                    	mul	cx
 26880 000047B5 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26881 000047BA 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26882 000047BF 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26883 000047C1 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26884 000047C3 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26885 000047C8 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26886                                  	; 24/09/2023
 26887                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26888 000047CD D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26889                                  ;entry MOVWORDS
 26890                                  MOVWORDS:				    ;AN000;
 26891 000047CF 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26892 000047D5 7403                    	JZ	short nodd		    ;AN000;LB. no
 26893 000047D7 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26894 000047D9 66                      	DB	66H			    ;AN000;LB. use double word move
 26895                                  nodd:
 26896 000047DA F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26897 000047DC F8                      	CLC				    ;AN000;LB. clear carry
 26898 000047DD C3                      	retn				    ;AN000;LB. exit
 26899                                  noSC:					    ;AN000;
 26900 000047DE F9                      	STC				    ;AN000;LB. set carry
 26901                                  sexit:					    ;AN000;
 26902 000047DF C3                      	retn				    ;AN000;LB.
 26903                                  
 26904                                  ;============================================================================
 26905                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26906                                  ;============================================================================
 26907                                  ; 29/07/2018 - Retro DOS v3.0
 26908                                  ; 19/05/2019 - Retro DOS v4.0
 26909                                  
 26910                                  ;	TITLE	MKNODE - Node maker
 26911                                  ;	NAME	MKNODE
 26912                                  
 26913                                  ;**	MKNODE.ASM
 26914                                  ;----------------------------------------------------------------------------
 26915                                  ;	Low level routines for making a new local file system node
 26916                                  ;	and filling in an SFT from a directory entry
 26917                                  ;
 26918                                  ;	BUILDDIR
 26919                                  ;	SETDOTENT
 26920                                  ;	MakeNode
 26921                                  ;	NEWENTRY
 26922                                  ;	FREEENT
 26923                                  ;	NEWDIR
 26924                                  ;	DOOPEN
 26925                                  ;	RENAME_MAKE
 26926                                  ;	CHECK_VIRT_OPEN
 26927                                  ;
 26928                                  ;	Revision history:
 26929                                  ;
 26930                                  ;	 AN000	version 4.0  Jan. 1988
 26931                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26932                                  
 26933                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26934                                  ;----------------------------------------------------------------------------
 26935                                  ;
 26936                                  ; Procedure Name : BUILDDIR,NEWDIR
 26937                                  ;
 26938                                  ; Inputs:
 26939                                  ;       ES:BP Points to DPB
 26940                                  ;       [THISSFT] Set if using NEWDIR entry point
 26941                                  ;               (used by ALLOCATE)
 26942                                  ;       [LASTENT] current last valid entry number in directory if no free
 26943                                  ;               entries
 26944                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26945                                  ; Function:
 26946                                  ;       Grow directory if no free entries and not root
 26947                                  ; Outputs:
 26948                                  ;       CARRY SET IF FAILURE
 26949                                  ;       ELSE
 26950                                  ;          AX entry number of new entry
 26951                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26952                                  ;               AX = first entry of new dir
 26953                                  ;       GETENT should be called to set [LASTENT]
 26954                                  ;
 26955                                  ;----------------------------------------------------------------------------
 26956                                  
 26957                                  ; 19/05/2019 - Retro DOS v4.0
 26958                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26959                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26960                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26961                                  
 26962                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 26963                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 26964                                  
 26965                                  BUILDDIR:
 26966                                  	; 29/07/2018 - Retro DOS v3.0
 26967                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26968                                  
 26969 000047E0 A1[D805]                        MOV     AX,[ENTFREE]
 26970 000047E3 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26971                                  	;JZ	short CHECK_IF_ROOT
 26972                                          ;CLC
 26973                                          ;retn
 26974                                  	; 24/09/2023
 26975 000047E6 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26976                                  
 26977                                  CHECK_IF_ROOT:
 26978 000047E8 833E[C205]00                    CMP     word [DIRSTART],0
 26979 000047ED 7502                            JNZ	short NEWDIR
 26980                                          ;STC
 26981                                  	; 24/09/2023
 26982                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26983                                  builddir_cmc_retn:
 26984                                  	; 24/09/2023
 26985 000047EF F5                      	cmc	; cf=1 <-> cf=0
 26986                                  builddir_retn:
 26987 000047F0 C3                              retn				; Can't grow root
 26988                                  
 26989                                  	;entry   NEWDIR
 26990                                  NEWDIR: 
 26991 000047F1 8B1E[C205]              	MOV     BX,[DIRSTART]
 26992 000047F5 09DB                            OR      BX,BX
 26993 000047F7 7405                            JZ	short NULLDIR
 26994 000047F9 E82B06                  	call	GETEOF
 26995 000047FC 72F2                            jc	short builddir_retn	; Screw up
 26996                                  NULLDIR:
 26997 000047FE B90100                          MOV     CX,1
 26998 00004801 E83C05                  	call	ALLOCATE
 26999 00004804 72EA                            jc	short  builddir_retn
 27000 00004806 8B16[C205]                      MOV     DX,[DIRSTART]
 27001 0000480A 09D2                            OR      DX,DX
 27002 0000480C 750D                            JNZ	short ADDINGDIR
 27003 0000480E E8CDF5                  	call	SETDIRSRCH
 27004 00004811 72DD                            jc	short  builddir_retn
 27005 00004813 C706[4803]FFFF                  MOV     word [LASTENT],-1
 27006 00004819 EB29                            JMP     SHORT GOTDIRREC
 27007                                  ADDINGDIR:
 27008 0000481B 53                              PUSH    BX
 27009 0000481C 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27010 00004820 E8300C                          call	IsEOF
 27011 00004823 5B                              POP     BX
 27012 00004824 7217                            JB	short NOTFIRSTGROW
 27013                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27014 00004826 891E[BC05]                      MOV     [CLUSNUM],BX
 27015                                  	; 24/09/2023
 27016                                  	;PUSH	CX ; (not necessary)
 27017 0000482A 50                      	PUSH	AX
 27018 0000482B 55                      	PUSH	BP
 27019 0000482C B401                            MOV     AH,1			; CLUSNUM update
 27020                                  	; 15/12/2022
 27021 0000482E 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27022                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27023                                  	;;mov	dl,[es:bp+0]
 27024                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27025 00004832 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27026 00004836 89DD                            MOV     BP,BX 			; CLUSNUM
 27027 00004838 E848DE                  	call	FastOpen_Update
 27028 0000483B 5D                              POP     BP
 27029 0000483C 58                              POP     AX
 27030                                  	; 24/09/2023
 27031                                          ;POP	CX
 27032                                  
 27033                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27034                                  NOTFIRSTGROW:
 27035 0000483D 89DA                            MOV     DX,BX
 27036 0000483F 30DB                            XOR     BL,BL
 27037 00004841 E8CF04                  	call	FIGREC
 27038                                  GOTDIRREC:
 27039                                  	;mov	cl,[es:bp+4]
 27040 00004844 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27041 00004848 FEC1                            INC     CL
 27042 0000484A 30ED                            XOR     CH,CH
 27043                                  ZERODIR:
 27044 0000484C 51                              PUSH    CX
 27045                                  	; 22/09/2023
 27046                                  	;;mov	byte [ALLOWED],18h
 27047                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27048 0000484D B0FF                            MOV     AL,0FFH
 27049                                          ;call	GETBUFFR
 27050 0000484F E82510                          call	GETBUFFRD ; *
 27051 00004852 7302                    	JNC	short GET_SSIZE
 27052 00004854 59                              POP     CX
 27053 00004855 C3                              retn
 27054                                  
 27055                                  GET_SSIZE:
 27056                                  	;mov	cx,[es:bp+2]
 27057 00004856 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27058 0000485A 06                              PUSH    ES
 27059 0000485B C43E[E205]                      LES     DI,[CURBUF]
 27060                                  	;or	byte [es:di+5],4
 27061 0000485F 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27062 00004864 57                              PUSH    DI
 27063                                  	;;add	di,16	; MSDOS 3.3
 27064                                  	;add	di,20	; MSDOS 6.0	
 27065 00004865 83C714                          ADD     DI,BUFINSIZ
 27066 00004868 31C0                            XOR     AX,AX
 27067 0000486A D1E9                            SHR     CX,1
 27068 0000486C F3AB                            REP     STOSW
 27069 0000486E 7301                            JNC	short EVENZ
 27070 00004870 AA                              STOSB
 27071                                  EVENZ:
 27072 00004871 5F                              POP     DI
 27073                                  
 27074                                  	; MSDOS 6.0
 27075 00004872 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27076                                  					;LB. if already dirty		  ;AN000;
 27077 00004877 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27078 00004879 E80212                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27079                                          
 27080                                  	;or	byte [es:di+5],40h
 27081 0000487C 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27082                                  yesdirty7:
 27083 00004881 07                              POP	ES
 27084 00004882 59                              POP	CX
 27085                                  
 27086                                  	; 19/05/2019 - Retro DOS v4.0
 27087                                  
 27088                                  	; MSDOS 3.3
 27089                                  	;INC	DX
 27090                                  
 27091                                  	; MSDOS 6.0
 27092                                  	; 24/09/2023
 27093                                  	;add	dx,1
 27094                                  	;;adc	word [HIGH_SECTOR],0
 27095                                  	;; 24/09/2023
 27096                                  	;; ax=0
 27097                                  	;adc	[HIGH_SECTOR],ax ; 0
 27098                                  	; 24/09/2023
 27099 00004883 42                      	inc	dx
 27100 00004884 7504                    	jnz	short loop_zerodir
 27101 00004886 FF06[0706]              	inc	word [HIGH_SECTOR]
 27102                                  loop_zerodir:
 27103 0000488A E2C0                            LOOP    ZERODIR
 27104                                  
 27105 0000488C A1[4803]                        MOV     AX,[LASTENT]
 27106 0000488F 40                              INC     AX
 27107                                  	; 24/09/2023
 27108                                  	; cf=0
 27109                                  	;CLC
 27110 00004890 C3                              retn
 27111                                  
 27112                                  ;--------------------------------------------------------------------------
 27113                                  ;
 27114                                  ; Procedure Name : SETDOTENT
 27115                                  ;
 27116                                  ; set up a . or .. directory entry for a directory.
 27117                                  ;
 27118                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27119                                  ;               AX contains ". " or ".."
 27120                                  ;               DX contains first cluster of entry
 27121                                  ;
 27122                                  ;----------------------------------------------------------------------------
 27123                                  
 27124                                  SETDOTENT:
 27125                                  ;	Fill in name field
 27126 00004891 AB                              STOSW
 27127 00004892 B90400                          MOV     CX,4
 27128 00004895 B82020                          MOV     AX,"  " ; 2020h
 27129 00004898 F3AB                            REP     STOSW
 27130 0000489A AA                              STOSB
 27131                                  
 27132                                  ;	Set up attribute
 27133                                  	;mov	al, 10h
 27134 0000489B B010                            MOV     AL,attr_directory
 27135 0000489D AA                              STOSB
 27136                                  
 27137                                  ;	Initialize time and date of creation
 27138 0000489E 83C70A                          ADD     DI,10
 27139 000048A1 8B36[9E05]                      MOV     SI,[THISSFT]
 27140                                  	;mov	ax,[si+0Dh]
 27141 000048A5 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 27142 000048A8 AB                              STOSW
 27143                                  	;mov	ax,[si+0Fh]
 27144 000048A9 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 27145 000048AC AB                      	STOSW
 27146                                  
 27147                                  ;	Set up first cluster field
 27148 000048AD 89D0                            MOV     AX,DX
 27149 000048AF AB                              STOSW
 27150                                  
 27151                                  ;	0 file size
 27152 000048B0 31C0                            XOR     AX,AX
 27153 000048B2 AB                              STOSW
 27154 000048B3 AB                              STOSW
 27155 000048B4 C3                              retn
 27156                                  
 27157                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27158                                  ;---------------------------------------------------------------------------
 27159                                  ;
 27160                                  ; Procedure Name : MakeNode
 27161                                  ;
 27162                                  ; Inputs:
 27163                                  ;       AL - attribute to create
 27164                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27165                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27166                                  ;               (AH ignored on dirs and devices)
 27167                                  ;
 27168                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27169                                  ;               a name already existant is ALWAYS an error in these cases.
 27170                                  ;
 27171                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27172                                  ;               terminated)
 27173                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27174                                  ;               ( = -1 if current dir not involved, else
 27175                                  ;                Points to first char after last "/" of current dir part)
 27176                                  ;       [THISCDS] Points to CDS being used
 27177                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27178                                  ; Function:
 27179                                  ;       Make a new node
 27180                                  ; Outputs:
 27181                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27182                                  ;       CARRY SET IF ERROR
 27183                                  ;          AX = 1 A node by this name exists and is a directory
 27184                                  ;          AX = 2 A new node could not be created
 27185                                  ;          AX = 3 A node by this name exists and is a disk file
 27186                                  ;               (AH was NZ on input)
 27187                                  ;          AX = 4 Bad Path
 27188                                  ;               SI return from GetPath maintained
 27189                                  ;          AX = 5 Attribute mismatch
 27190                                  ;          AX = 6 Sharing Violation
 27191                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27192                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27193                                  ;       ELSE
 27194                                  ;          AX = 0 Disk Node
 27195                                  ;          AX = 3 Device Node (error in some cases)
 27196                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27197                                  ;               containing new node.
 27198                                  ;          [CURBUF+2]:BX Points to entry
 27199                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27200                                  ;          [THISSFT] is filled in
 27201                                  ;               sf_mode = unchanged.
 27202                                  ;          Attribute byte in entry is input AL
 27203                                  ; DS preserved, others destroyed
 27204                                  ;
 27205                                  ;-------------------------------------------------------------------------
 27206                                  
 27207                                  ; 19/05/2019 - Retro DOS v4.0
 27208                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27209                                  
 27210                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27211                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27212                                  
 27213                                  MakeNode:
 27214                                  	;mov	word [CREATING],0E5FFh
 27215 000048B5 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27216 000048BB 50                              PUSH    AX              ; Save AH value
 27217 000048BC C606[4C03]00            	MOV	byte [NoSetDir],0
 27218 000048C1 A2[6D05]                	MOV	[SATTRIB],AL
 27219 000048C4 E87AF5                  	call	GetPathNoSet
 27220 000048C7 88CA                            MOV     DL,CL           ; Save CL info
 27221 000048C9 89C1                            MOV     CX,AX           ; Device ID to CH
 27222 000048CB 58                              POP     AX              ; Get back AH
 27223 000048CC 732E                            JNC	short make_exists ; File existed
 27224 000048CE 7505                            JNZ	short make_err_4 ; Path bad
 27225 000048D0 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 27226 000048D3 7406                            JZ	short make_type	; Name simply not found, and no metas
 27227                                  make_err_4:
 27228 000048D5 B004                            MOV     AL,4            ; case 1 bad path
 27229                                  make_err_ret:
 27230 000048D7 30E4                            XOR     AH,AH
 27231 000048D9 F9                              STC
 27232                                  ;make_retn:	; 22/11/2022
 27233 000048DA C3                              retn
 27234                                  
 27235                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 27236                                  RENAME_MAKE:
 27237                                  make_type:
 27238                                  ;Extended Open hooks
 27239                                  	; MSDOS 6.0
 27240                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27241 000048DB F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27242 000048E0 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27243 000048E2 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27244                                  					;FT. set for extended open ;AN000;
 27245                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27246 000048E7 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27247 000048EC 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27248 000048EE F9                      	STC				;FT. set carry			;AN000;
 27249 000048EF B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27250                                  	; 22/11/2022
 27251                                  make_retn:
 27252                                  	;return
 27253 000048F2 C3                      	retn				;FT.				;AN000;
 27254                                  
 27255                                  ;	Extended Open hooks
 27256                                  
 27257                                  make_type2:
 27258 000048F3 C43E[9E05]                      LES     DI,[THISSFT]
 27259 000048F7 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 27260 000048F9 F9                              STC                     ; Not found
 27261 000048FA EB5A                            JMP     short make_new
 27262                                  
 27263                                  ; The node exists. It may be either a device, directory or file:
 27264                                  ;   Zero set => directory
 27265                                  ;   High bit of CH on => device
 27266                                  ;   else => file
 27267                                  
 27268                                  make_exists:
 27269 000048FC 7448                            JZ	short make_exists_dir
 27270 000048FE B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 27271                                  	;test	byte [ATTRIB],18h
 27272 00004900 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27273 00004905 753B                            JNZ	short make_err_ret_5
 27274                                  				; Cannot already exist as Disk or Device Node
 27275                                                                  ;       if making DIR or Volume ID
 27276 00004907 08ED                            OR      CH,CH
 27277 00004909 781A                            JS	short make_share ; No further checks on attributes if device
 27278 0000490B 08E4                            OR      AH,AH
 27279 0000490D 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27280 0000490F 51                              PUSH    CX              ; Save device ID
 27281 00004910 8E06[E405]                      MOV     ES,[CURBUF+2]
 27282                                  	;mov	ch,[es:bx+0Bh]
 27283 00004914 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27284                                  	;test	ch,1
 27285 00004918 F6C501                  	test	CH,attr_read_only
 27286 0000491B 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 27287 0000491D E8C2F7                  	call	MatchAttributes
 27288 00004920 59                              POP     CX              ; Devid back in CH
 27289 00004921 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 27290 00004923 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 27291                                  make_share:
 27292 00004925 30E4                            XOR     AH,AH
 27293 00004927 50                              PUSH    AX              ; Save Disk or Device node
 27294 00004928 51                              PUSH    CX              ; Save Device ID
 27295 00004929 88EC                            MOV     AH,CH           ; Device ID to AH
 27296 0000492B E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 27297 0000492E C43E[9E05]                      LES     DI,[THISSFT]
 27298 00004932 56                      	push	si
 27299 00004933 53                      	push	bx		; Save CURBUF pointers
 27300 00004934 E86A29                  	call	ShareEnter
 27301 00004937 735A                            jnc	short MakeEndShare
 27302                                  
 27303                                  ; User failed request.
 27304 00004939 5B                      	pop	bx
 27305 0000493A 5E                      	pop	si
 27306 0000493B 59                      	pop	cx
 27307 0000493C 58                      	pop	ax
 27308                                  
 27309                                  Make_Share_ret:
 27310 0000493D B006                            MOV     AL,6
 27311 0000493F EB96                            JMP	short make_err_ret
 27312                                  
 27313                                  make_err_ret_5P:
 27314 00004941 59                              POP     CX              ; Get back device ID
 27315                                  make_err_ret_5:
 27316 00004942 B005                            MOV     AL,5            ; Attribute mismatch
 27317                                          ; 22/11/2022
 27318 00004944 EB91                    	JMP     short make_err_ret
 27319                                  
 27320                                  make_exists_dir:
 27321 00004946 B001                            MOV     AL,1            ; exists as directory, always an error
 27322                                  	; 22/11/2022
 27323 00004948 EB8D                    	JMP     short make_err_ret
 27324                                  
 27325                                  make_save:
 27326 0000494A 50                              PUSH    AX              ; Save whether Disk or File
 27327 0000494B 89C8                            MOV     AX,CX           ; Device ID to AH
 27328 0000494D E87400                          CALL    NEWENTRY
 27329 00004950 58                              POP     AX              ; 0 if Disk, 3 if File
 27330 00004951 739F                            jnc	short make_retn
 27331 00004953 B002                            MOV     AL,2            ; create failed case 2
 27332                                  make_save_retn:
 27333 00004955 C3                              retn
 27334                                  
 27335                                  make_new:
 27336 00004956 E8F1FF                          call    make_save
 27337 00004959 72FA                            jc	short make_save_retn	; case 2 fail
 27338                                  	;test	byte [ATTRIB],10h
 27339 0000495B F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27340 00004960 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 27341                                  					; so don't tell the sharer about them
 27342 00004962 50                      	push	ax
 27343 00004963 53                      	push	bx
 27344 00004964 56                      	push	si		
 27345 00004965 E83929                          call	ShareEnter
 27346 00004968 5E                      	pop	si
 27347 00004969 5B                      	pop	bx
 27348 0000496A 58                      	pop	ax
 27349 0000496B 73E8                    	jnc	short make_save_retn
 27350                                  
 27351                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27352                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27353                                  ; possible: delete the newly created directory entry and return share_error.
 27354                                  
 27355 0000496D 50                              PUSH    AX
 27356 0000496E C43E[E205]                      LES     DI,[CURBUF]
 27357                                  	;mov	byte [es:bx],0E5h
 27358 00004972 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27359                                  	
 27360                                  	; MSDOS 6.0
 27361                                  	;test	byte [es:di+5],40h
 27362 00004976 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27363                                  					;LB. if already dirty		  ;AN000;
 27364 0000497B 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27365                                  	; 22/11/2022
 27366 0000497D E8FE10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27367                                  	;or	byte [es:di+5],40h
 27368 00004980 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27369                                  yesdirty8:
 27370 00004985 C42E[8A05]                      LES     BP,[THISDPB]
 27371                                  	; 15/12/2022
 27372 00004989 268A4600                        mov	al,[ES:BP]
 27373                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27374                                  	;;mov	al,[es:bp+0]
 27375                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27376 0000498D E8E90F                          call	FLUSHBUF		; write out buffer.
 27377 00004990 58                              POP     AX
 27378 00004991 EBAA                            jmp	short Make_Share_ret
 27379                                  
 27380                                  ; We have found an existing file. We have also entered it into the share set.
 27381                                  ; At this point we need to call newentry to correctly address the problem of
 27382                                  ; getting rid of old data (create an existing file) or creating a new
 27383                                  ; directory entry (create a new file). Unfortunately, this operation may
 27384                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27385                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27386                                  ; the share set now, do the operation and then reassert the share access.
 27387                                  ;
 27388                                  ; We are allowed to do this! There is no window! After all, we are in
 27389                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27390                                  
 27391                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27392                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27393                                  
 27394                                  MakeEndShare:
 27395 00004993 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 27396 00004997 31C0                            XOR     AX,AX
 27397 00004999 E857C9                  	call	ECritSFT
 27398 0000499C 268705                  	xchg	AX,[ES:DI]
 27399                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27400 0000499F 50                      	push	ax
 27401 000049A0 57                      	push	di
 27402 000049A1 06                      	push	es
 27403 000049A2 9C                              PUSHF
 27404 000049A3 E8F628                          call	ShareEnd                ; remove sharing
 27405 000049A6 9D                              POPF
 27406 000049A7 07                      	pop	es
 27407 000049A8 5F                      	pop	di
 27408 000049A9 268F05                          pop	word [ES:DI]	
 27409                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27410 000049AC E85FC9                  	call	LCritSFT
 27411                                  	; 22/11/2022
 27412                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27413 000049AF 5B                      	pop	bx
 27414 000049B0 5E                      	pop	si
 27415 000049B1 59                      	pop	cx
 27416 000049B2 58                      	pop	ax
 27417 000049B3 E894FF                          CALL    make_save
 27418                                  
 27419                                  ; If the user failed, we do not reenter into the sharing set.
 27420                                  
 27421 000049B6 729D                            jc	short make_save_retn	; bye if error
 27422 000049B8 50                      	push	ax
 27423 000049B9 53                      	push	bx
 27424 000049BA 56                      	push	si
 27425 000049BB 9C                              PUSHF
 27426 000049BC E8E228                          call	ShareEnter
 27427 000049BF 9D                              POPF
 27428 000049C0 5E                      	pop	si
 27429 000049C1 5B                      	pop	bx
 27430 000049C2 58                      	pop	ax
 27431                                  
 27432                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27433                                  
 27434                                  makeendshare_retn:
 27435 000049C3 C3                              retn
 27436                                  
 27437                                  ;---------------------------------------------------------------------------
 27438                                  ;
 27439                                  ; Procedure Name : NEWENTRY
 27440                                  ;
 27441                                  ; Inputs:
 27442                                  ;       [THISSFT] set
 27443                                  ;       [THISDPB] set
 27444                                  ;       [LASTENT] current last valid entry number in directory if no free
 27445                                  ;               entries
 27446                                  ;       [VOLID] set if a volume ID was found during search
 27447                                  ;	Attrib Contains attributes for new file
 27448                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27449                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27450                                  ;               NC means file existed (device)
 27451                                  ;               C  means file did not exist
 27452                                  ;       AH = Device ID byte
 27453                                  ;       If FILE
 27454                                  ;           [CURBUF+2]:BX points to start of directory entry
 27455                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27456                                  ;       If device
 27457                                  ;           DS:BX points to start of "fake" directory entry
 27458                                  ;           DS:SI points to dir_first of "fake" directory entry
 27459                                  ;               (has DWORD pointer to device header)
 27460                                  ; Function:
 27461                                  ;       Make a new directory entry
 27462                                  ;       If an old one existed it is truncated first
 27463                                  ; Outputs:
 27464                                  ;       Carry set if error
 27465                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 27466                                  ;               vol ID, user FAILed to I 24
 27467                                  ;       else
 27468                                  ;               outputs of DOOPEN
 27469                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27470                                  ;
 27471                                  ;----------------------------------------------------------------------------
 27472                                  
 27473                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27474                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27475                                  
 27476                                  NEWENTRY:
 27477 000049C4 C42E[8A05]                      LES     BP,[THISDPB]
 27478 000049C8 7315                            JNC	short EXISTENT	
 27479 000049CA 803E[4A03]00                    CMP     byte [FAILERR],0
 27480                                  	;STC
 27481                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 27482                                          ; 24/09/2023
 27483 000049CF 750C                    	jnz	short ERRRET3
 27484 000049D1 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 27485 000049D4 72ED                            jc	short makeendshare_retn	; Failed
 27486 000049D6 E8D6F3                          call	GETENT          ; Point at that free entry
 27487 000049D9 72E8                            jc	short makeendshare_retn	; Failed
 27488 000049DB EB0E                            JMP     SHORT FREESPOT
 27489                                  
 27490                                  ERRRET3:
 27491 000049DD F9                              STC
 27492                                  newentry_retn:
 27493 000049DE C3                              retn
 27494                                  
 27495                                  EXISTENT:
 27496 000049DF 08E4                            OR      AH,AH           ; Check if file is I/O device
 27497 000049E1 7903                            JNS	short NOT_DEV1
 27498 000049E3 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 27499                                  
 27500                                  NOT_DEV1:
 27501 000049E6 E82901                          call	FREEENT		; Free cluster chain
 27502 000049E9 72F3                            jc	short newentry_retn ; Failed
 27503                                  FREESPOT:
 27504                                  	;test	byte [ATTRIB],8
 27505 000049EB F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27506 000049F0 7407                            JZ	short NOTVOLID
 27507 000049F2 803E[7B05]00                    CMP     BYTE [VOLID],0
 27508 000049F7 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 27509                                  NOTVOLID:
 27510 000049F9 8E06[E405]                      MOV     ES,[CURBUF+2]
 27511 000049FD 89DF                            MOV     DI,BX
 27512                                  
 27513 000049FF BE[4B05]                        MOV     SI,NAME1
 27514                                  
 27515 00004A02 B90500                          MOV     CX,5
 27516 00004A05 F3A5                            REP     MOVSW
 27517 00004A07 A4                              MOVSB                   ; Move name into dir entry
 27518 00004A08 A0[6B05]                	MOV	AL,[ATTRIB]
 27519 00004A0B AA                      	STOSB                   ; Attributes
 27520                                  
 27521                                  ;; File Tagging for Create DOS 4.00
 27522 00004A0C B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 27523                                  ;; File Tagging for Create DOS 4.00
 27524                                  
 27525 00004A0E 31C0                            XOR     AX,AX
 27526 00004A10 F3AB                            REP     STOSW           ; Zero pad
 27527 00004A12 E8D1C0                          call	DATE16
 27528 00004A15 92                              XCHG    AX,DX
 27529 00004A16 AB                              STOSW                   ; dir_time
 27530 00004A17 92                              XCHG    AX,DX
 27531 00004A18 AB                              STOSW                   ; dir_date
 27532 00004A19 31C0                            XOR     AX,AX
 27533 00004A1B 57                              PUSH    DI              ; Correct SI input value
 27534                                  				; 	(recomputed for new buffer)
 27535 00004A1C AB                              STOSW                   ; Zero dir_first and size
 27536 00004A1D AB                              STOSW
 27537 00004A1E AB                              STOSW
 27538                                  updnxt:
 27539 00004A1F 8B36[E205]              	MOV	SI,[CURBUF]
 27540                                  
 27541                                  	; 19/05/2019 - Retro DOS v4.0
 27542                                  
 27543                                  	; MSDOS 6.0
 27544 00004A23 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27545                                  				;LB. if already dirty		  ;AN000;
 27546 00004A28 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27547 00004A2A E85110                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27548                                          
 27549                                  	;or	byte [es:si+5],40h
 27550 00004A2D 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27551                                  yesdirty9:
 27552 00004A32 C42E[8A05]                      LES     BP,[THISDPB]
 27553                                  	; 15/12/2022
 27554 00004A36 268A4600                	MOV	AL,[ES:BP]
 27555                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27556                                  	;;mov	al,[es:bp+0]
 27557                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27558 00004A3A 50                              PUSH    AX
 27559 00004A3B 53                              PUSH    BX
 27560                                  
 27561                                  ; If we have a file, we need to increment the open ref. count so that
 27562                                  ; we have some protection against invalid media changes if an Int 24
 27563                                  ; error occurs.
 27564                                  ; Do nothing for a device.
 27565                                  
 27566 00004A3C 06                      	push	es
 27567 00004A3D 57                      	push	di
 27568 00004A3E C43E[9E05]                      LES     DI,[THISSFT]
 27569                                  	;test	word [es:di+5],80h
 27570                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27571 00004A42 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27572 00004A47 751A                            jnz	short GotADevice
 27573 00004A49 1E                      	push	ds
 27574 00004A4A 53                      	push	bx
 27575 00004A4B C51E[8A05]                      LDS     BX,[THISDPB]
 27576                                  	;mov	[es:di+7],bx
 27577 00004A4F 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27578 00004A53 8CDB                            MOV     BX,DS
 27579                                  	;mov	[es:di+9],bx
 27580 00004A55 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27581 00004A59 5B                      	pop	bx
 27582 00004A5A 1F                      	pop	ds ; need to use DS for segment later on
 27583 00004A5B E8AAFA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27584 00004A5E C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27585                                  GotADevice:
 27586 00004A63 5F                      	pop	di
 27587 00004A64 07                      	pop	es
 27588                                  
 27589 00004A65 E8110F                          call	FLUSHBUF
 27590 00004A68 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27591 00004A6B 5B                              POP     BX
 27592 00004A6C 58                              POP     AX
 27593 00004A6D 5E                              POP     SI              ; Get SI input back
 27594 00004A6E 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27595 00004A70 7301                    	jnc	short DOOPEN    ; Failed
 27596 00004A72 C3                      	retn
 27597                                  	
 27598                                  ;NOTE FALL THROUGH
 27599                                  
 27600                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27601                                  
 27602                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27603                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27604                                  
 27605                                  ; DOOPEN
 27606                                  ;----------------------------------------------------------------------------
 27607                                  ;
 27608                                  ; Inputs:
 27609                                  ;       [THISDPB] points to DPB if file
 27610                                  ;       [THISSFT] points to SFT being used
 27611                                  ;       AH = Device ID byte
 27612                                  ;       If FILE
 27613                                  ;           [CURBUF+2]:BX points to start of directory entry
 27614                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27615                                  ;       If device
 27616                                  ;           DS:BX points to start of "fake" directory entry
 27617                                  ;           DS:SI points to dir_first of "fake" directory entry
 27618                                  ;               (has DWORD pointer to device header)
 27619                                  ; Function:
 27620                                  ;       Fill in SFT from dir entry
 27621                                  ; Outputs:
 27622                                  ;       CARRY CLEAR
 27623                                  ;       sf_ref_count and sf_mode fields not altered
 27624                                  ;       sf_flags high byte = 0
 27625                                  ;       sf_flags low byte = AH except
 27626                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27627                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27628                                  ;       sf_position = 0
 27629                                  ;       If device
 27630                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27631                                  ;           sf_size = 0
 27632                                  ;       If file
 27633                                  ;           sf_firclus sf_size set from entry
 27634                                  ;           sf_devptr = [THISDPB]
 27635                                  ;           sf_cluspos = 0
 27636                                  ;           sf_lstclus = sf_firclus
 27637                                  ;           sf_dirsec sf_dirpos set
 27638                                  ; DS,SI,BX preserved, others destroyed
 27639                                  ;
 27640                                  ;----------------------------------------------------------------------------
 27641                                  
 27642                                  	;entry	DOOPEN
 27643                                  DOOPEN:
 27644                                  ;	Generate and store attribute
 27645                                  
 27646 00004A73 88E6                            MOV     DH,AH           ; AH to different place
 27647 00004A75 C43E[9E05]                      LES     DI,[THISSFT]
 27648                                  	;add	di,4
 27649 00004A79 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27650                                  	; 24/09/2023
 27651 00004A7C 31C0                    	xor	ax,ax
 27652                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27653                                  				;   attribute of 0 (for R/O testing etc).
 27654 00004A7E 08F6                            OR      DH,DH           ; See if our assumption good.
 27655 00004A80 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27656 00004A82 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27657                                  	;mov	al,[BX+0Bh]
 27658 00004A86 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27659                                  				; If file, get attrib from dir entry
 27660                                  DEV_SFT1:
 27661 00004A89 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27662                                  
 27663                                  ;	Generate and store flags word
 27664                                  
 27665                                  	; 24/09/2023
 27666                                  	;XOR	AX,AX
 27667                                          ; ah=0
 27668 00004A8A 88F0                    	MOV     AL,DH
 27669                                  	;or	al,40h
 27670 00004A8C 0C40                            OR      AL,devid_file_clean
 27671 00004A8E AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27672                                  
 27673                                  ;	Generate and store device pointer
 27674                                  
 27675 00004A8F 1E                              PUSH    DS
 27676                                  	;lds	ax,[bx+1Ah]
 27677 00004A90 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27678 00004A93 08F6                            OR      DH,DH
 27679 00004A95 7805                            JS	short DEV_SFT2
 27680                                  
 27681                                  ;hkn; SS override
 27682 00004A97 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27683                                  DEV_SFT2:
 27684 00004A9C AB                              STOSW 			; store offset
 27685 00004A9D 8CD8                            MOV     AX,DS
 27686 00004A9F 1F                              POP     DS
 27687 00004AA0 AB                      	STOSW			; store segment
 27688                                  				; ES:DI -> sf_firclus
 27689                                  
 27690                                  ;	Generate pointer to, generate and store first cluster 
 27691                                  ;	(irrelevant for devices)
 27692                                  
 27693 00004AA1 56                              PUSH    SI              ; Save pointer to dir_first
 27694 00004AA2 A5                              MOVSW                   ; dir_first -> sf_firclus
 27695                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27696                                  
 27697                                  ;	Copy time/date of last modification
 27698                                  
 27699                                  	;sub	si,6
 27700 00004AA3 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27701                                  				; DS:SI->dir_time
 27702 00004AA6 A5                              MOVSW                   ; dir_time -> sf_time
 27703                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27704 00004AA7 A5                              MOVSW                   ; dir_date -> sf_date
 27705                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27706                                  
 27707                                  ;	Generate and store file size (0 for devices)
 27708                                  
 27709 00004AA8 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27710 00004AA9 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27711 00004AAA 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27712 00004AAC AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27713 00004AAD 08F6                            OR      DH,DH
 27714 00004AAF 7904                            JNS	short FILE_SFT1
 27715 00004AB1 31C0                            XOR     AX,AX
 27716 00004AB3 89C1                            MOV     CX,AX           ; Devices are open ended
 27717                                  FILE_SFT1:
 27718 00004AB5 91                              XCHG    AX,CX
 27719 00004AB6 AB                              STOSW                   ; Low word of sf_size
 27720 00004AB7 91                              XCHG    AX,CX
 27721 00004AB8 AB                              STOSW                   ; High word of sf_size
 27722                                                                  ; ES:DI -> sf_position
 27723                                  ; Initialize position to 0
 27724                                  
 27725 00004AB9 31C0                            XOR     AX,AX
 27726 00004ABB AB                              STOSW
 27727 00004ABC AB                              STOSW                   ; sf_position
 27728                                                                  ; ES:DI -> sf_cluspos
 27729                                  
 27730                                  ; Generate cluster optimizations for files
 27731                                  
 27732 00004ABD 08F6                            OR      DH,DH
 27733 00004ABF 7843                            JS	short DEV_SFT3
 27734 00004AC1 AB                              STOSW                   ; sf_cluspos ; 19h
 27735                                  	;mov	ax,[bx+1Ah]
 27736 00004AC2 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27737                                  	; 19/05/2019
 27738                                  	; MSDOS 3.3
 27739                                  	;STOSW 			; sf_lstclus ; 1Bh
 27740                                  	; MSDOS 6.0
 27741 00004AC5 57                              PUSH	DI              ;AN004; save dirsec offset
 27742                                  	;sub	di,1Bh
 27743 00004AC6 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27744                                  	;mov	[es:di+35h],ax
 27745 00004AC9 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27746 00004ACD 5F                              POP	DI              ;AN004; restore dirsec offset
 27747                                  
 27748                                  ; DOS 3.3  FastOpen  6/13/86
 27749                                  
 27750 00004ACE 1E                      	PUSH	DS
 27751                                  
 27752                                  ;hkn; SS is DOSDATA
 27753 00004ACF 16                      	push	ss
 27754 00004AD0 1F                      	pop	ds
 27755                                  	;test	byte [FastOpenFlg],4
 27756 00004AD1 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27757 00004AD6 7411                    	JZ	short Not_FastOpen
 27758                                  
 27759                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27760 00004AD8 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27761                                  
 27762                                  	;mov	ax,[si+1]
 27763 00004ADB 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27764 00004ADE AB                              STOSW                   ; sf_dirsec
 27765                                  	; MSDOS 6.0
 27766                                  	;mov	ax,[si+3]
 27767 00004ADF 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27768                                  				;;; changed for >32mb
 27769 00004AE2 AB                              STOSW                   ; sf_dirsec
 27770                                  	; 19/08//2018
 27771 00004AE3 8A04                    	mov	al,[SI]
 27772                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27773 00004AE5 AA                              STOSB                   ; sf_dirpos
 27774 00004AE6 1F                              POP	DS
 27775                                          ;JMP	short Next_Name
 27776                                  	; 24/09/2023
 27777 00004AE7 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27778                                  
 27779                                  ; DOS 3.3  FastOpen  6/13/86
 27780                                  
 27781                                  Not_FastOpen:
 27782                                          ;POP     DS		; normal path
 27783                                  
 27784                                  ;hkn; SS override
 27785                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27786                                  	; 16/12/2022
 27787                                  	; 28/07/2019
 27788 00004AE9 8B36[E205]              	mov	si,[CURBUF]
 27789 00004AED 1F                      	pop	ds
 27790                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27791                                  	;pop	ds
 27792                                  	;mov	si,[ss:CURBUF]
 27793                                  	
 27794                                  	;mov	ax,[si+6]
 27795 00004AEE 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27796 00004AF1 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27797                                  	; 19/05/2019        
 27798                                  	; MSDOS 6.0
 27799                                  	;mov	ax,[si+8]
 27800 00004AF2 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27801 00004AF5 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27802                                          
 27803 00004AF6 89D8                    	MOV     AX,BX
 27804                                  	;;add	si,16	; MSDOS 3.3	
 27805                                  	;add	si,20	; MSDOS 6.0
 27806 00004AF8 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27807 00004AFB 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27808                                          ;mov	cl,32
 27809 00004AFD B120                    	MOV     CL,dir_entry.size
 27810 00004AFF F6F1                            DIV     CL
 27811 00004B01 AA                              STOSB                   ; sf_dirpos
 27812                                  Next_Name:
 27813 00004B02 EB03                            JMP     SHORT FILE_SFT2
 27814                                  
 27815                                  	; 24/09/2023
 27816                                  	; cf=0 (after 'or' instruction)
 27817                                  DEV_SFT3:
 27818                                  	;add	di,7
 27819 00004B04 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27820                                  FILE_SFT2:
 27821                                  
 27822                                  ; Copy in the object's name
 27823                                  
 27824 00004B07 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27825 00004B09 B90B00                          MOV     CX,11
 27826 00004B0C F3A4                            REP     MOVSB           ; sf_name
 27827 00004B0E 5E                              POP     SI              ; recover DS:SI -> dir_first
 27828                                  
 27829                                  ;hkn; SS is DOSDATA
 27830 00004B0F 16                              push	ss
 27831 00004B10 1F                      	pop	ds
 27832                                  	; 24/09/2023
 27833                                  	; cf=0
 27834                                          ;CLC
 27835 00004B11 C3                              retn
 27836                                  
 27837                                  ;---------------------------------------------------------------------------
 27838                                  ;
 27839                                  ; Procedure Name : FREEENT
 27840                                  ;
 27841                                  ; Inputs:
 27842                                  ;       ES:BP -> DPB
 27843                                  ;       [CURBUF] Set
 27844                                  ;       [CURBUF+2]:BX points to directory entry
 27845                                  ;       [CURBUF+2]:SI points to above dir_first
 27846                                  ; Function:
 27847                                  ;       Free the cluster chain for the entry if present
 27848                                  ; Outputs:
 27849                                  ;       Carry set if error (currently user FAILed to I 24)
 27850                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27851                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27852                                  ;---------------------------------------------------------------------------
 27853                                  
 27854                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27855                                  FREEENT:
 27856 00004B12 1E                              PUSH    DS
 27857 00004B13 C53E[E205]                      LDS     DI,[CURBUF]
 27858 00004B17 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27859                                  	; 19/05/2019 - Retro DOS v4.0
 27860                                  	; MSDOS 6.0
 27861 00004B19 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27862                                  ;hkn; SS override
 27863 00004B1C 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27864 00004B21 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27865 00004B24 1F                              POP     DS
 27866 00004B25 83F902                  	CMP	CX,2
 27867 00004B28 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27868                                  	;cmp	cx,[es:bp+0Dh]
 27869 00004B2A 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27870 00004B2E 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27871 00004B30 29FB                            SUB     BX,DI
 27872 00004B32 53                              PUSH    BX              ; Save offset
 27873 00004B33 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27874 00004B37 52                              PUSH    DX              ; Save sector number
 27875 00004B38 89CB                            MOV     BX,CX
 27876 00004B3A E8AF02                          call	RELEASE         ; Free any data allocated
 27877 00004B3D 5A                              POP     DX
 27878 00004B3E 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27879 00004B42 7302                            JNC	short GET_BUF_BACK
 27880 00004B44 5B                              POP     BX
 27881                                  freeent_retn:
 27882 00004B45 C3                              retn			; Screw up
 27883                                  
 27884                                  GET_BUF_BACK:
 27885                                  	; 22/09/2023
 27886                                  	;;mov	byte [ALLOWED],18h
 27887                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27888                                          ;XOR	AL,AL ; *
 27889                                  	;call	GETBUFFR        ; Get sector back
 27890 00004B46 E82C0D                  	call	GETBUFFER ; * ; pre read      
 27891                                  
 27892 00004B49 5B                      	POP     BX              ; Get offset back
 27893 00004B4A 72F9                            jc	short freeent_retn
 27894 00004B4C E8C4EA                  	call	SET_BUF_AS_DIR
 27895 00004B4F 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27896 00004B53 89DE                            MOV     SI,BX
 27897                                  	;add	si,1Ah
 27898 00004B55 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27899                                  RET1:
 27900 00004B58 F8                              CLC
 27901 00004B59 C3                              retn
 27902                                  
 27903                                  ;---------------------------------------------------------------------------
 27904                                  ;
 27905                                  ; Procedure Name : CHECK_VIRT_OPEN
 27906                                  ;
 27907                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27908                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27909                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27910                                  ; flag [VIRTUAL_OPEN].
 27911                                  ; No registers affected (including flags).
 27912                                  ; On input, [THISSFT] points to current SFT.
 27913                                  ;
 27914                                  ;---------------------------------------------------------------------------
 27915                                  
 27916                                  CHECK_VIRT_OPEN:
 27917 00004B5A 50                      	PUSH    AX
 27918 00004B5B 9F                              lahf                    ; preserve flags
 27919 00004B5C 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27920 00004B61 7410                            JZ	short ALL_CLOSED
 27921 00004B63 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27922 00004B68 06                      	push	es
 27923 00004B69 57                      	push	di
 27924 00004B6A C43E[9E05]                      LES     DI,[THISSFT]
 27925 00004B6E E89FF9                          call	DEV_CLOSE_SFT
 27926 00004B71 5F                      	pop	di
 27927 00004B72 07                      	pop	es
 27928                                  
 27929                                  ALL_CLOSED:
 27930 00004B73 9E                              sahf                    ; restore flags
 27931 00004B74 58                              POP     AX
 27932 00004B75 C3                              retn
 27933                                  
 27934                                  ;============================================================================
 27935                                  ; ROM.ASM, MSDOS 6.0, 1991
 27936                                  ;============================================================================
 27937                                  ; 29/07/2018 - Retro DOS v3.0
 27938                                  ; 20/05/2019 - Retro DOS v4.0
 27939                                  
 27940                                  ;	TITLE	ROM - Miscellaneous routines
 27941                                  ;	NAME	ROM
 27942                                  
 27943                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27944                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27945                                  ;
 27946                                  ;	SKPCLP
 27947                                  ;	FNDCLUS
 27948                                  ;	BUFSEC
 27949                                  ;	BUFRD
 27950                                  ;	BUFWRT
 27951                                  ;	NEXTSEC
 27952                                  ;	OPTIMIZE
 27953                                  ;	FIGREC
 27954                                  ;	ALLOCATE
 27955                                  ;	RESTFATBYT
 27956                                  ;	RELEASE
 27957                                  ;	RELBLKS
 27958                                  ;	GETEOF
 27959                                  ;
 27960                                  ;	Modification history:
 27961                                  ;
 27962                                  ;		Created: ARR 30 March 1983
 27963                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27964                                  
 27965                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27966                                  ;--------------------------------------------------------------------------
 27967                                  ;
 27968                                  ; Procedure Name : FNDCLUS
 27969                                  ;
 27970                                  ; Inputs:
 27971                                  ;       CX = No. of clusters to skip
 27972                                  ;       ES:BP = Base of drive parameters
 27973                                  ;       [THISSFT] point to SFT
 27974                                  ; Outputs:
 27975                                  ;       BX = Last cluster skipped to
 27976                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27977                                  ;       DX = Position of last cluster
 27978                                  ;       Carry set if error (currently user FAILed to I 24)
 27979                                  ; DI destroyed. No other registers affected.
 27980                                  ;--------------------------------------------------------------------------
 27981                                  
 27982                                  	; 10/02/2024 - Retro DOS v4.2
 27983                                  FNDCLUS_X:
 27984 00004B76 8B0E[BC05]              	mov	cx,[CLUSNUM]
 27985                                  
 27986                                  ; 20/05/2019 - Retro DOS v4.0
 27987                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27988                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27989                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27990                                  
 27991                                  FNDCLUS:
 27992 00004B7A 06                      	PUSH	ES
 27993 00004B7B C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27994                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27995                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27996 00004B7F 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27997                                  	;mov	dx,[es:di+19h]
 27998 00004B83 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27999 00004B87 09DB                    	OR	BX,BX
 28000 00004B89 7424                    	JZ	short NOCLUS
 28001                                  
 28002 00004B8B 29D1                            SUB     CX,DX
 28003 00004B8D 7308                            JNB	short FINDIT
 28004                                  
 28005 00004B8F 01D1                            ADD     CX,DX
 28006 00004B91 31D2                            XOR     DX,DX
 28007                                  	;mov	bx,[es:di+0Bh]
 28008 00004B93 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28009                                  FINDIT:
 28010 00004B97 07                              POP	ES
 28011 00004B98 E313                    	JCXZ	RET9
 28012                                  
 28013                                  	;entry	SKPCLP
 28014                                  SKPCLP:
 28015 00004B9A E8CD08                  	call	UNPACK
 28016 00004B9D 7214                            jc	short fndclus_retn	; retc
 28017                                  
 28018                                  	; 09/09/2018
 28019                                  
 28020                                  	; MSDOS 3.3
 28021                                  	;push	bx
 28022                                  	;mov	bx,di
 28023                                  	;call	IsEOF
 28024                                  	;pop	bx	
 28025                                  	;jae	short RET9
 28026                                  
 28027                                  	; 20/05/2019 - Retro DOS v4.0
 28028                                  
 28029                                  	; MSDOS 6.0
 28030 00004B9F 87DF                    	xchg	bx,di
 28031 00004BA1 E8AF08                  	call	IsEOF
 28032 00004BA4 87DF                    	xchg	bx,di
 28033 00004BA6 7305                    	jae	short RET9
 28034                                  
 28035 00004BA8 87DF                            XCHG    BX,DI
 28036 00004BAA 42                              INC     DX
 28037                                  
 28038 00004BAB E2ED                    	LOOP	SKPCLP			; RMFS
 28039                                  RET9:	
 28040 00004BAD F8                      	CLC
 28041 00004BAE C3                              retn
 28042                                  NOCLUS:
 28043 00004BAF 07                              POP	ES
 28044 00004BB0 41                              INC	CX
 28045 00004BB1 4A                              DEC	DX
 28046 00004BB2 F8                              CLC
 28047                                  
 28048                                  fndclus_retn:
 28049 00004BB3 C3                              retn
 28050                                  
 28051                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28052                                  ;--------------------------------------------------------------------------
 28053                                  ;
 28054                                  ; Procedure Name : BUFSEC
 28055                                  ;
 28056                                  ; Inputs:
 28057                                  ;       AH = priority of buffer
 28058                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28059                                  ;       ES:BP = Base of drive parameters
 28060                                  ;       [CLUSNUM] = Physical cluster number
 28061                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28062                                  ;       [BYTCNT1] = Size of transfer
 28063                                  ; Function:
 28064                                  ;       Insure specified sector is in buffer, flushing buffer before
 28065                                  ;       read if necessary.
 28066                                  ; Outputs:
 28067                                  ;       ES:DI = Pointer to buffer
 28068                                  ;       SI = Pointer to transfer address
 28069                                  ;       CX = Number of bytes
 28070                                  ;       [NEXTADD] updated
 28071                                  ;       [TRANS] set to indicate a transfer will occur
 28072                                  ;       Carry set if error (user FAILed to I 24)
 28073                                  ;--------------------------------------------------------------------------
 28074                                  
 28075                                  BUFSEC:
 28076 00004BB4 8B16[BC05]                      MOV     DX,[CLUSNUM]
 28077 00004BB8 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 28078                                  	;mov	byte [ALLOWED],38h
 28079 00004BBC C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28080 00004BC1 E84F01                          CALL    FIGREC
 28081 00004BC4 E8B50C                  	call	GETBUFFR
 28082 00004BC7 72EA                            jc	short fndclus_retn
 28083                                  
 28084 00004BC9 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 28085 00004BCE 8B36[B805]                      MOV     SI,[NEXTADD]
 28086 00004BD2 89F7                            MOV     DI,SI
 28087 00004BD4 8B0E[D205]                      MOV     CX,[BYTCNT1]
 28088 00004BD8 01CF                            ADD     DI,CX
 28089 00004BDA 893E[B805]                      MOV     [NEXTADD],DI
 28090 00004BDE C43E[E205]                      LES     DI,[CURBUF]
 28091                                  	;or	byte [es:di+5],8
 28092 00004BE2 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28093                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28094                                  	;lea	di,[di+20] ; MSDOS 6.0
 28095 00004BE7 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 28096 00004BEA 033E[CC05]                      ADD     DI,[BYTSECPOS]
 28097 00004BEE F8                              CLC
 28098 00004BEF C3                              retn
 28099                                  
 28100                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28101                                  
 28102                                  ;---------------------------------------------------------------------------
 28103                                  ;
 28104                                  ; Procedure Name : BUFRD
 28105                                  ;
 28106                                  ; Do a partial sector read via one of the system buffers
 28107                                  ; ES:BP Points to DPB
 28108                                  ; Carry set if error (currently user FAILed to I 24)
 28109                                  ;
 28110                                  ; DS - set to DOSDATA
 28111                                  ;
 28112                                  ;----------------------------------------------------------------------------
 28113                                  
 28114                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28115                                  	; 20/05/2019 - Retro DOS v4.0
 28116                                  BUFRD:
 28117 00004BF0 06                              PUSH	ES
 28118 00004BF1 31C0                            xor	ax, ax			; pre-read sector
 28119 00004BF3 E8BEFF                          CALL    BUFSEC
 28120 00004BF6 7303                            JNC	short BUF_OK
 28121                                  
 28122                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28123 00004BF8 07                              POP	ES
 28124 00004BF9 EB2B                            JMP     SHORT RBUFPLACED
 28125                                  
 28126                                  BUF_OK:
 28127 00004BFB 8CC3                            MOV     BX,ES
 28128 00004BFD 8E06[2E03]                      MOV     ES,[DMAADD+2]
 28129 00004C01 8EDB                            MOV     DS,BX
 28130 00004C03 87FE                    	XCHG    DI,SI
 28131 00004C05 D1E9                            SHR     CX,1
 28132                                  ;M039
 28133                                  	; MSDOS 3.3
 28134                                  	;JNC	short EVENRD
 28135                                  	;MOVSB
 28136                                  ;EVENRD:
 28137                                  	;REP     MOVSW
 28138                                  
 28139                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28140                                  ;       DS:SI-> Source within Buffer.
 28141                                  ;       ES:DI-> Destination within Transfer memory block.
 28142                                  
 28143                                  	; MSDOS 6.0
 28144 00004C07 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28145                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28146                                  	;rep	movsb                   ;Copy last byte.
 28147                                  	; 16/12/2022
 28148 00004C09 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28149 00004C0B A4                      	movsb ; ****
 28150                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28151                                  	;adc	cx,0
 28152                                  	;rep	movsb
 28153                                  ;M039
 28154                                  EVENRD: ; ****
 28155 00004C0C 07                              POP	ES
 28156                                  ;hkn; SS override
 28157 00004C0D 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 28158                                  	;;lea	bx,[di+16]
 28159                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28160 00004C12 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 28161 00004C15 29DE                            SUB     SI,BX                   ; Position in buffer
 28162 00004C17 E8020C                          call	PLACEBUF
 28163                                  	;cmp	si,[es:bp+2]
 28164 00004C1A 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28165 00004C1E 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 28166                                  ;M039
 28167                                  	; MSDOS 3.3
 28168                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28169                                                                          ;  even though it is MRU.
 28170                                          ; MSDOS 6.0
 28171 00004C20 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28172                                  ;M039					; chucking even though it is MRU.
 28173                                  
 28174                                  RBUFPLACEDC:
 28175 00004C25 F8                              CLC
 28176                                  RBUFPLACED:
 28177 00004C26 16                      	push	ss
 28178 00004C27 1F                      	pop	ds
 28179 00004C28 C3                              retn
 28180                                  
 28181                                  ;----------------------------------------------------------------------------
 28182                                  ;
 28183                                  ; Procedure : BUFWRT
 28184                                  ;
 28185                                  ; Do a partial sector write via one of the system buffers
 28186                                  ; ES:BP Points to DPB
 28187                                  ; Carry set if error (currently user FAILed to I 24)
 28188                                  ;
 28189                                  ; DS - set to DOSDATA
 28190                                  ;
 28191                                  ;----------------------------------------------------------------------------
 28192                                  
 28193                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28194                                  	; 20/05/2019 - Retro DOS v4.0
 28195                                  BUFWRT:
 28196                                          ;MOV     AX,[SECPOS]
 28197                                          ; MSDOS 6.0
 28198                                  	;ADD	AX,1            	; Set for next sector
 28199                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28200                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28201                                          ; 24/09/2023
 28202 00004C29 FF06[C405]              	inc	word [SECPOS]
 28203 00004C2D 7504                    	jnz	short bufw_secpos
 28204 00004C2F FF06[C605]              	inc	word [SECPOS+2]
 28205                                  bufw_secpos:
 28206 00004C33 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28207 00004C36 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28208 00004C3A B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 28209 00004C3C 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 28210 00004C3E 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 28211 00004C40 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28212                                  
 28213                                  	; MSDOS 3.3
 28214                                  	;INC	AX
 28215                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28216                                  
 28217                                  	; 20/05/2019
 28218                                  	; MSDOS 3.3 & MSDOS 6.0
 28219 00004C43 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 28220 00004C47 B001                            MOV     AL,1
 28221 00004C49 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28222                                  _doread:
 28223 00004C4B 30C0                            XOR     AL,AL
 28224                                  NOREAD:
 28225 00004C4D 06                              PUSH	ES
 28226 00004C4E E863FF                          CALL    BUFSEC
 28227 00004C51 72A5                    	JC	short BUF_IO_FAIL
 28228 00004C53 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 28229 00004C57 D1E9                            SHR     CX,1
 28230                                  ;M039
 28231                                  	; MSDOS 3.3
 28232                                  	;JNC	short EVENWRT ; 09/09/2018
 28233                                  	;MOVSB
 28234                                  ;EVENWRT:
 28235                                  	;REP	MOVSW
 28236                                  
 28237                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28238                                  ;       DS:SI-> Source within Transfer memory block.
 28239                                  ;       ES:DI-> Destination within Buffer.
 28240                                  
 28241                                  	; MSDOS 6.0
 28242 00004C59 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28243                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28244                                  	;rep	movsb                   ;Copy last byte.
 28245                                  	; 16/12/2022
 28246 00004C5B 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28247 00004C5D A4                      	movsb ; ****
 28248                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28249                                  	;adc	cx,0
 28250                                  	;rep	movsb
 28251                                  ;M039
 28252                                  EVENWRT: ; ****
 28253 00004C5E 07                              POP	ES
 28254                                  
 28255                                  ;hkn; SS override
 28256 00004C5F 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 28257                                  
 28258                                  	; MSDOS 6.0
 28259 00004C64 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28260                                  					;LB. if already dirty		  ;AN000;
 28261 00004C68 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 28262 00004C6A E8110E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28263                                  	
 28264                                  	;or	byte [bx+5],40h
 28265 00004C6D 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28266                                  yesdirty10:
 28267                                  	;;lea	si,[bx+16]
 28268                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28269 00004C71 8D7714                          LEA     SI,[BX+BUFINSIZ]
 28270 00004C74 29F7                            SUB     DI,SI                   ; Position in buffer
 28271                                  ;M039
 28272                                  	; MSDOS 3.3
 28273                                  	;MOV	SI,DI
 28274                                  	;MOV	DI,BX
 28275                                  	;call	PLACEBUF
 28276                                  	;;cmp	si,[es:bp+2]
 28277                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28278                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28279                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28280                                                                          ;  even though it is MRU.
 28281                                  	; 10/02/2024
 28282 00004C76 16                      	push	ss
 28283 00004C77 1F                      	pop	ds
 28284                                  
 28285                                  	; MSDOS 6.0
 28286                                  	;cmp	di,[es:bp+2]
 28287 00004C78 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28288 00004C7C 7204                            JB	short WBUFPLACED	; No, leave buf where it is
 28289                                  
 28290                                  	; 10/02/2024
 28291                                          ;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28292                                  					; chucking even though it is MRU.
 28293 00004C7E 891E[6D00]              	mov	[BufferQueue],bx
 28294                                  ;M039
 28295                                  
 28296                                  WBUFPLACED:
 28297 00004C82 F8                              CLC
 28298                                  	; 10/02/2024
 28299                                  	;push	ss
 28300                                  	;pop	ds
 28301 00004C83 C3                              retn
 28302                                  
 28303                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28304                                  ;---------------------------------------------------------------------------
 28305                                  ;
 28306                                  ; Procedure Name : NEXTSEC
 28307                                  ;
 28308                                  ; Compute the next sector to read or write
 28309                                  ; ES:BP Points to DPB
 28310                                  ;
 28311                                  ;---------------------------------------------------------------------------
 28312                                  
 28313                                  NEXTSEC:
 28314 00004C84 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28315 00004C89 7426                            JZ	short CLRET
 28316                                  
 28317 00004C8B A0[7305]                        MOV     AL,[SECCLUSPOS]
 28318 00004C8E FEC0                            INC     AL
 28319                                  	;cmp	al,[es:bp+4]
 28320 00004C90 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 28321 00004C94 7618                            JBE	short SAVPOS
 28322                                  
 28323 00004C96 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 28324 00004C9A E8B607                          call	IsEOF
 28325 00004C9D 7314                            JAE	short NONEXT
 28326                                  
 28327 00004C9F E8C807                          call	UNPACK
 28328 00004CA2 720F                            JC	short NONEXT
 28329                                  clusgot:
 28330 00004CA4 893E[BC05]                      MOV     [CLUSNUM],DI
 28331 00004CA8 FF06[BA05]                      INC     word [LASTPOS]
 28332 00004CAC B000                            MOV     AL,0
 28333                                  SAVPOS:
 28334 00004CAE A2[7305]                        MOV     [SECCLUSPOS],AL
 28335                                  CLRET:
 28336 00004CB1 F8                              CLC
 28337 00004CB2 C3                              retn
 28338                                  NONEXT:
 28339 00004CB3 F9                              STC
 28340 00004CB4 C3                              retn
 28341                                  
 28342                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28343                                  ;----------------------------------------------------------------------------
 28344                                  ;
 28345                                  ; Procedure Name : OPTIMIZE
 28346                                  ;
 28347                                  ; Inputs:
 28348                                  ;       BX = Physical cluster
 28349                                  ;       CX = No. of records
 28350                                  ;       DL = sector within cluster
 28351                                  ;       ES:BP = Base of drive parameters
 28352                                  ;       [NEXTADD] = transfer address
 28353                                  ; Outputs:
 28354                                  ;       AX = No. of records remaining
 28355                                  ;       BX = Transfer address
 28356                                  ;       CX = No. or records to be transferred
 28357                                  ;       DX = Physical sector address            (LOW)
 28358                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 28359                                  ;       DI = Next cluster
 28360                                  ;       [CLUSNUM] = Last cluster accessed
 28361                                  ;       [NEXTADD] updated
 28362                                  ;       Carry set if error (currently user FAILed to I 24)
 28363                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28364                                  ;
 28365                                  ;---------------------------------------------------------------------------
 28366                                  
 28367                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28368                                  OPTIMIZE:
 28369 00004CB5 52                      	PUSH    DX
 28370 00004CB6 53                              PUSH    BX
 28371                                  	;mov	al,[es:bp+4]
 28372 00004CB7 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 28373 00004CBB FEC0                            INC     AL              ; Number of sectors per cluster
 28374 00004CBD 88C4                            MOV     AH,AL
 28375 00004CBF 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 28376 00004CC1 89CA                            MOV     DX,CX
 28377                                  	;MOV	CX,0
 28378                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28379                                  	; 16/12/2022
 28380 00004CC3 31C9                    	xor	cx,cx	; sub cx,cx
 28381                                  OPTCLUS:
 28382                                  ; AL has number of sectors available in current cluster
 28383                                  ; AH has number of sectors available in next cluster
 28384                                  ; BX has current physical cluster
 28385                                  ; CX has number of sequential sectors found so far
 28386                                  ; DX has number of sectors left to transfer
 28387                                  ; ES:BP Points to DPB
 28388                                  ; ES:SI has FAT pointer
 28389                                  
 28390                                  do_norm3:
 28391 00004CC5 E8A207                          call	UNPACK
 28392 00004CC8 7236                            JC	short OP_ERR
 28393                                  clusgot2:
 28394 00004CCA 00C1                    	ADD	CL,AL
 28395 00004CCC 80D500                          ADC     CH,0
 28396 00004CCF 39D1                            CMP     CX,DX
 28397 00004CD1 7332                            JAE	short BLKDON
 28398 00004CD3 88E0                            MOV     AL,AH
 28399 00004CD5 43                              INC     BX
 28400 00004CD6 39DF                            CMP     DI,BX
 28401 00004CD8 74EB                            JZ	short OPTCLUS
 28402 00004CDA 4B                              DEC     BX
 28403                                  FINCLUS:
 28404 00004CDB 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 28405 00004CDF 29CA                            SUB     DX,CX           ; Number of sectors still needed
 28406 00004CE1 52                              PUSH    DX
 28407 00004CE2 89C8                            MOV     AX,CX
 28408                                  	;mul	word[ES:BP+2]
 28409 00004CE4 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28410                                  				; Number of sectors times sector size
 28411 00004CE8 8B36[B805]                      MOV     SI,[NEXTADD]
 28412 00004CEC 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 28413 00004CEE A3[B805]                        MOV     [NEXTADD],AX
 28414 00004CF1 58                              POP     AX              ; Number of sectors still needed
 28415 00004CF2 5A                              POP     DX              ; Starting cluster
 28416 00004CF3 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 28417 00004CF5 011E[BA05]                      ADD     [LASTPOS],BX
 28418 00004CF9 5B                              POP     BX              ; BL = sector position within cluster
 28419 00004CFA E81600                  	call	FIGREC
 28420 00004CFD 89F3                            MOV     BX,SI
 28421                                  	; 24/09/2023
 28422                                  	; cf=0 (at the return of FIGREC)
 28423                                  	;CLC
 28424 00004CFF C3                              retn
 28425                                  OP_ERR:
 28426 00004D00 83C404                          ADD     SP,4
 28427 00004D03 F9                      	STC
 28428 00004D04 C3                              retn
 28429                                  BLKDON:
 28430 00004D05 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 28431 00004D07 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 28432 00004D09 FECC                            DEC     AH              ; Adjust to mean position within cluster
 28433 00004D0B 8826[7305]                      MOV     [SECCLUSPOS],AH
 28434 00004D0F 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 28435 00004D11 EBC8                            JMP     SHORT FINCLUS
 28436                                  
 28437                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28438                                  ;---------------------------------------------------------------------------
 28439                                  ;
 28440                                  ; Procedure Name : FIGREC
 28441                                  ;
 28442                                  ; Inputs:
 28443                                  ;       DX = Physical cluster number
 28444                                  ;       BL = Sector position within cluster
 28445                                  ;       ES:BP = Base of drive parameters
 28446                                  ; Outputs:
 28447                                  ;       DX = physical sector number           (LOW)
 28448                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 28449                                  ; No other registers affected.
 28450                                  ;
 28451                                  ;---------------------------------------------------------------------------
 28452                                  
 28453                                  	; 10/06/2019
 28454                                  	; 20/05/2019 - Retro DOS v4.0
 28455                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28456                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28457                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 28458                                  FIGREC:
 28459 00004D13 51                              PUSH    CX
 28460                                  	;mov	cl,[es:bp+5]
 28461 00004D14 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28462 00004D18 4A                              DEC     DX
 28463 00004D19 4A                              DEC     DX
 28464                                  
 28465                                  	; MSDOS 3.3
 28466                                  	;SHL	DX,CL
 28467                                  
 28468                                  ;hkn; SS override HIGH_SECTOR
 28469                                  	; MSDOS 6.0
 28470 00004D1A 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28471                                  	; 24/09/2023
 28472 00004D21 30ED                    	xor	ch,ch				;F.C. >32mb
 28473 00004D23 08C9                    	OR	CL,CL				;F.C. >32mb
 28474 00004D25 740C                    	JZ	short noshift			;F.C. >32mb
 28475 00004D27 30ED                    	XOR	CH,CH				;F.C. >32mb
 28476                                  rotleft:					;F.C. >32mb
 28477 00004D29 F8                      	CLC					;F.C. >32mb
 28478 00004D2A D1D2                    	RCL	DX,1				;F.C. >32mb
 28479                                  	; 10/06/2019
 28480 00004D2C 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28481 00004D31 E2F6                    	LOOP	rotleft				;F.C. >32mb
 28482                                  noshift:
 28483                                  	; MSDOS 3.3 & MSDOS 6.0
 28484 00004D33 08DA                            OR      DL,BL
 28485                                  	;add	dx,[es:bp+0Bh]
 28486 00004D35 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 28487                                  	; MSDOS 6.0
 28488                                  	; 10/06/2019
 28489                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28490                                  	; 24/09/2023
 28491                                  	; cx=0
 28492 00004D39 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 28493                                  
 28494                                  	; MSDOS 3.3 & MSDOS 6.0
 28495 00004D3E 59                      	POP     CX
 28496                                  figrec_retn:
 28497 00004D3F C3                              retn
 28498                                  
 28499                                  ; 20/05/2019 - Retro DOS v4.0
 28500                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28501                                  
 28502                                  ; 30/07/2018 - Retro DOS v3.0
 28503                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28504                                  
 28505                                  ;Break   <ALLOCATE -- Assign disk space>
 28506                                  ;---------------------------------------------------------------------------
 28507                                  ;
 28508                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28509                                  ;
 28510                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28511                                  ;   FAT-chained onto the end of the existing file.
 28512                                  ;
 28513                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28514                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28515                                  ;   numbered clusters, looking for the necessary free blocks.
 28516                                  ;
 28517                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28518                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28519                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28520                                  ;
 28521                                  ;       If we get to the end of the disk without satisfaction:
 28522                                  ;
 28523                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28524                                  ;               return (insufficient_disk_space)
 28525                                  ;           ELSE
 28526                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28527                                  ;
 28528                                  ;   Note that there is no multitasking interlock. There is no race when
 28529                                  ;   examining the entrys in an in-core FAT block since there will be no
 28530                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28531                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28532                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28533                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28534                                  ;   satisfied. We can't allow another activation to think this cluster is
 28535                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28536                                  ;   allocated.
 28537                                  ;
 28538                                  ;   Note that when we run out of space this algorithem will scan from
 28539                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28540                                  ;   redundantly scanning the later part of the disk. This only happens when
 28541                                  ;   we run out of space, so sue me.
 28542                                  ;
 28543                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28544                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28545                                  ;                                                                          ;
 28546                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28547                                  ;   explanation:
 28548                                  ;
 28549                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28550                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28551                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28552                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28553                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28554                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28555                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28556                                  ;   the
 28557                                  ;           LOOP   findfre         ; alloc more if needed
 28558                                  ;   instruction when the first cluster is allocated to the nul file. The
 28559                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28560                                  ;
 28561                                  ;   This method is obviously useless (because it is non-reentrant) for
 28562                                  ;   multitasking, and will have to be changed. Storing the required value on
 28563                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28564                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28565                                  ;   problems with INT 24 well.
 28566                                  ;
 28567                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28568                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28569                                  ;                                                                          ;
 28570                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28571                                  ;               CX = No. of clusters to allocate
 28572                                  ;               ES:BP = Base of drive parameters
 28573                                  ;               [THISSFT] = Points to SFT
 28574                                  ;
 28575                                  ;       EXIT    'C' set if insufficient space
 28576                                  ;                 [FAILERR] can be tested to see the reason for failure
 28577                                  ;                 CX = max. no. of clusters that could be added to file
 28578                                  ;               'C' clear if space allocated
 28579                                  ;                 BX = First cluster allocated
 28580                                  ;                 FAT is fully updated
 28581                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28582                                  ;
 28583                                  ;       USES    ALL but SI, BP
 28584                                  
 28585                                  ;callmagic  proc near
 28586                                  ;       push    ds                             ;push segment of routine 
 28587                                  ;       push    Offset MagicPatch              ;push offset for routine
 28588                                  ;       retf                                   ;simulate jmp far
 28589                                  ;                                              ;far return address is on
 28590                                  ;                                              ;stack, so far return from
 28591                                  ;                                              ;call will return this routine
 28592                                  ;callmagic  endp
 28593                                  
 28594                                  
 28595                                  ; 25/09/2023
 28596                                  %if 0
 28597                                  callmagic:
 28598                                  	push	ds
 28599                                  	push	MagicPatch
 28600                                  	retf	
 28601                                  %endif
 28602                                  
 28603                                  ALLOCATE:
 28604                                  	; 10/09/2018
 28605                                  ;BEGIN MAGICDRV MODIFICATIONS
 28606                                  ;
 28607                                  ;7/5/92 scottq
 28608                                  ;
 28609                                  ;This is the disk compression patch location which allows
 28610                                  ;the disk compression software to fail allocations if the
 28611                                  ;FAT would allows allocation, but the free space for compressed
 28612                                  ;data would not.
 28613                                  ;        
 28614                                  ;;;	call    far ptr MAGICPATCH
 28615                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28616                                  ;;; but we do know the segment and offset of the routine
 28617                                  ;;; so simulate a far call to dosdata:magicpatch
 28618                                  ;;; note dosassume above, so DS -> dosdata
 28619                                  
 28620                                  	; MSDOS 6.0
 28621                                          ;clc				;clear carry so we fall through
 28622                                  	;				;if no patch is present
 28623                                  	;push	cs			;push segment for far return
 28624                                          ;call	callmagic		;this is a near call
 28625                                          ;jnc	short Regular_Allocate_Path
 28626                                  	;jmp	Disk_Full_Return
 28627                                  
 28628                                  ; 25/09/2023
 28629                                  %if 0
 28630                                  	clc
 28631                                  	push	cs
 28632                                  	call	callmagic
 28633                                  	jnc	short Regular_Allocate_Path
 28634                                  	jmp	Disk_Full_Return
 28635                                  Regular_Allocate_Path:
 28636                                  %endif
 28637                                  
 28638                                  	; 20/05/2019 - Retro DOS v4.0
 28639                                  ;END MAGICDRV MODIFICATIONS
 28640                                  
 28641                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28642                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28643                                  
 28644 00004D40 53                              PUSH    BX                      ; save (bx)
 28645 00004D41 31DB                            XOR     BX,BX
 28646 00004D43 E82407                  	call	UNPACK
 28647 00004D46 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28648 00004D4A 5B                              POP     BX
 28649 00004D4B 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28650                                  
 28651 00004D4D 51                              PUSH    CX
 28652 00004D4E 53                              PUSH    BX
 28653                                  
 28654 00004D4F 89DA                            MOV     DX,BX
 28655                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28656                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28657 00004D51 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28658 00004D55 83FB02                          cmp     bx,2
 28659 00004D58 7709                            ja	short FINDFRE
 28660                                  
 28661                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28662                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28663                                  
 28664                                  ads1:
 28665                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28666                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28667 00004D5A 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28668 00004D60 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28669                                                                          ;       cluster examined is 2
 28670                                  
 28671                                  ;   Scanning both forwards and backwards for a free cluster
 28672                                  ;
 28673                                  ;       (BX) = forwards scan pointer
 28674                                  ;       (CX) = clusters remaining to be allocated
 28675                                  ;       (DX) = current last cluster in file
 28676                                  ;       (TOS) = last cluster of file
 28677                                  
 28678                                  FINDFRE:
 28679 00004D63 43                              INC     BX
 28680                                  	;cmp	bx,[es:bp+0Dh]
 28681 00004D64 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28682 00004D68 7757                    	ja	short ads7	; at end of disk
 28683 00004D6A E8FD06                          call	UNPACK          ; check out this cluster
 28684 00004D6D 722F                            jc	short ads4	; FAT error             [INTERR?]
 28685 00004D6F 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28686                                  
 28687                                  ;   Have found a free cluster. Chain it to the file
 28688                                  ;
 28689                                  ;       (BX) = found free cluster #
 28690                                  ;       (DX) = current last cluster in file
 28691                                  
 28692                                  	;;mov	[es:bp+1Ch],bx
 28693                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28694 00004D71 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28695 00004D75 92                              xchg    ax,dx           ; save (dx) in ax
 28696 00004D76 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28697 00004D79 E84207                  	call	PACK            ; set special "temporary" mark
 28698 00004D7C 7220                            jc	short ads4	; FAT error             [INTERR?]
 28699                                  	;;cmp	word [es:bp+1Eh],-1
 28700                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28701 00004D7E 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28702 00004D83 7404                            JZ	short NO_ALLOC	; No
 28703                                  	;;dec	word [es:bp+1Eh]
 28704                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28705 00004D85 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28706                                  NO_ALLOC:
 28707 00004D89 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28708 00004D8A 87DA                            XCHG    BX,DX
 28709 00004D8C 89D0                            MOV     AX,DX
 28710 00004D8E E82D07                  	call	PACK            ; link free cluster onto file
 28711                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28712                                                                  ;    cluster 0 with FIRCLUS value.
 28713 00004D91 720B                            jc	short ads4	; FAT error [INTERR?]
 28714 00004D93 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28715 00004D94 89DA                            mov     dx,bx           ; (dx) = current end of file
 28716 00004D96 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28717                                  
 28718                                  ;   We've successfully extended the file. Clean up and exit
 28719                                  ;
 28720                                  ;       (BX) = last cluster in file
 28721                                  
 28722 00004D98 BAFFFF                          MOV     DX,0FFFFH
 28723 00004D9B E82007                  	call	PACK            ; mark last cluster EOF
 28724                                  
 28725                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28726                                  ;   2 whole bytes. Hope its worth it...
 28727                                  ;
 28728                                  ;       'C' set if error
 28729                                  ;       calling (BX) and (CX) pushed on stack
 28730                                  
 28731                                  ads4:   
 28732 00004D9E 5B                      	POP     BX
 28733 00004D9F 59                              POP     CX              ; Don't need this stuff since we're successful
 28734 00004DA0 729D                            jc	short figrec_retn
 28735 00004DA2 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28736                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28737 00004DA5 7298                            jc	short figrec_retn
 28738 00004DA7 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28739 00004DAA 7293                            jc	short figrec_retn
 28740 00004DAC 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28741 00004DAE 09FF                            OR      DI,DI           ; clear 'C'
 28742 00004DB0 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28743                                  
 28744                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28745                                  ;   info
 28746                                  dofastk:
 28747                                  	; 20/05/2019
 28748                                  	; MSDOS 6.0
 28749                                  	;push	dx ; * MSDOS 6.0
 28750                                  	;;mov	dl,[es:bp+0]
 28751                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28752                                  	;mov	dl,[es:bp]
 28753                                  
 28754                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28755                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28756                                  	
 28757                                  	; 16/12/2022
 28758                                  	;push	dx ; *
 28759                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28760                                  	; 15/12/2022
 28761                                  	;mov	dl,[es:bp]
 28762                                  	
 28763                                  	; MSDOS 3.3 & MSDOS 6.0
 28764 00004DB2 06                      	PUSH	ES
 28765 00004DB3 C43E[9E05]              	LES     DI,[THISSFT]
 28766                                  	;mov	[es:di+0Bh],bx
 28767 00004DB7 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28768                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28769                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28770 00004DBB 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28771 00004DBF 07                      	POP	ES
 28772                                  	;retn
 28773                                  
 28774                                  	;pop	dx ; * MSDOS 6.0
 28775                                  
 28776                                  	; 16/12/2022
 28777                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28778                                  	;pop	dx ; *
 28779                                  
 28780 00004DC0 C3                      	retn	
 28781                                  
 28782                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28783                                  ;   of the disk...
 28784                                  
 28785                                  ads7:   
 28786 00004DC1 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28787 00004DC6 7592                    	jnz	short ads1	; start scan from front of disk
 28788                                  
 28789                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28790                                  ;   the space back to the free list and tell the caller how much he could have
 28791                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28792                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28793                                  ;
 28794                                  ;       (CX) = clusters remaining to be allocated
 28795                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28796                                  ;       (TOS+1) = # of clusters wanted to allocate
 28797                                  
 28798 00004DC8 5B                              POP     BX              ; (BX) = last cluster of file
 28799 00004DC9 BAFFFF                          MOV     DX,0FFFFH
 28800 00004DCC E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28801 00004DCF 58                              POP     AX              ; No. of clusters requested
 28802                                                                  ; Don't "retc". We are setting Carry anyway,
 28803                                                                  ;   Alloc failed, so proceed with return CX
 28804                                                                  ;   setup.
 28805 00004DD0 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28806 00004DD2 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28807                                                                  ;   Alloc failed.
 28808                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28809                                          ; MSDOS 6.0
 28810 00004DD5 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28811 00004DDA F9                              STC
 28812 00004DDB C3                              retn
 28813                                  
 28814                                  ;-----------------------------------------------------------------------
 28815                                  ;
 28816                                  ; Procedure Name : RESTFATBYT
 28817                                  ;
 28818                                  ; SEE ALLOCATE CAVEAT
 28819                                  ;       Carry set if error (currently user FAILed to I 24)
 28820                                  ;-----------------------------------------------------------------------
 28821                                  
 28822                                  RESTFATBYT:
 28823 00004DDC 53                              PUSH    BX
 28824 00004DDD 52                              PUSH    DX
 28825 00004DDE 57                              PUSH    DI
 28826 00004DDF 31DB                            XOR     BX,BX
 28827 00004DE1 8B16[9605]                      MOV     DX,[FATBYT]
 28828 00004DE5 E8D606                  	call	PACK
 28829 00004DE8 5F                              POP     DI
 28830 00004DE9 5A                              POP     DX
 28831 00004DEA 5B                              POP     BX
 28832                                  ; 16/12/2022
 28833                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28834                                  ;RELEASE_flush:
 28835 00004DEB C3                      	retn
 28836                                  
 28837                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28838                                  ;---------------------------------------------------------------------------
 28839                                  ;
 28840                                  ; Procedure Name : RELEASE
 28841                                  ;
 28842                                  ; Inputs:
 28843                                  ;       BX = Cluster in file
 28844                                  ;       ES:BP = Base of drive parameters
 28845                                  ; Function:
 28846                                  ;       Frees cluster chain starting with [BX]
 28847                                  ;       Carry set if error (currently user FAILed to I 24)
 28848                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28849                                  ;
 28850                                  ;-----------------------------------------------------------------------------
 28851                                  
 28852                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28853                                  	; 20/05/2019 - Retro DOS v4.0
 28854                                  RELEASE:
 28855 00004DEC 31D2                            XOR     DX,DX
 28856                                  
 28857                                  	;entry	RELBLKS
 28858                                  RELBLKS:
 28859                                  
 28860                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28861                                  ;   and free the rest in the chain.
 28862                                  
 28863 00004DEE E87906                  	call	UNPACK
 28864 00004DF1 7224                    	jc	short RELEASE_flush
 28865 00004DF3 7422                    	jz	short RELEASE_flush
 28866 00004DF5 89F8                            MOV     AX,DI
 28867 00004DF7 52                              PUSH    DX
 28868 00004DF8 E8C306                  	call	PACK
 28869 00004DFB 5A                              POP     DX
 28870 00004DFC 7219                    	jc	short RELEASE_flush
 28871 00004DFE 09D2                            OR      DX,DX
 28872 00004E00 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28873                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28874                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28875 00004E02 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28876 00004E07 7404                            JZ	short NO_DEALLOC	; No
 28877 00004E09 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28878                                  NO_DEALLOC:
 28879 00004E0D 89C3                            MOV     BX,AX
 28880 00004E0F 48                              dec     ax              ; check for "1"
 28881 00004E10 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28882 00004E12 E83E06                  	call	IsEOF
 28883 00004E15 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28884                                  
 28885                                  	; 16/12/2022
 28886                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28887                                  ;%if 0
 28888                                  RELEASE_flush:
 28889                                  	; MSDOS 6.0
 28890 00004E17 268A4600                	mov	al,[es:bp]
 28891                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28892 00004E1B 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28893 00004E1C 51                      	push	cx		;  them to be preserved.
 28894 00004E1D 06                      	push	es
 28895 00004E1E 55                      	push	bp
 28896 00004E1F E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28897 00004E22 5D                      	pop	bp
 28898 00004E23 07                      	pop	es
 28899 00004E24 59                      	pop	cx
 28900 00004E25 5E                      	pop	si
 28901                                  ;%endif
 28902                                  RET12:
 28903 00004E26 C3                      	retn
 28904                                  
 28905                                  ;Break	<GETEOF -- Find the end of a file>
 28906                                  ;------------------------------------------------------------------------
 28907                                  ;
 28908                                  ; Procedure Name : GETEOF
 28909                                  ;
 28910                                  ; Inputs:
 28911                                  ;       ES:BP Points to DPB
 28912                                  ;       BX = Cluster in a file
 28913                                  ;       DS = CS
 28914                                  ; Outputs:
 28915                                  ;       BX = Last cluster in the file
 28916                                  ;       Carry set if error (currently user FAILed to I 24)
 28917                                  ; DI destroyed. No other registers affected.
 28918                                  ;
 28919                                  ;--------------------------------------------------------------------------
 28920                                  
 28921                                  GETEOF:
 28922 00004E27 E84006                  	call	UNPACK
 28923 00004E2A 72FA                            jc	short RET12
 28924 00004E2C 53                              PUSH    BX
 28925 00004E2D 89FB                            MOV     BX,DI
 28926 00004E2F E82106                  	call	IsEOF
 28927 00004E32 5B                              POP     BX
 28928 00004E33 73F1                            JAE     short RET12
 28929 00004E35 89FB                            MOV     BX,DI
 28930 00004E37 EBEE                            JMP     short GETEOF
 28931                                  
 28932                                  ;============================================================================
 28933                                  ; FCB.ASM, MSDOS 6.0, 1991
 28934                                  ;============================================================================
 28935                                  ; 30/07/2018 - Retro DOS v3.0
 28936                                  ; 20/05/2019 - Retro DOS v4.0
 28937                                  
 28938                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28939                                  ;	NAME	FCB
 28940                                  
 28941                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28942                                  ;		  filename characters
 28943                                  ;
 28944                                  ;	MakeFcb
 28945                                  ;	NameTrans
 28946                                  ;	PATHCHRCMP
 28947                                  ;	GetLet
 28948                                  ;	UCase
 28949                                  ;	GetLet3
 28950                                  ;	GetCharType
 28951                                  ;	TESTKANJ
 28952                                  ;	NORMSCAN
 28953                                  ;	DELIM
 28954                                  ;
 28955                                  ;	Revision history:
 28956                                  ;
 28957                                  ;		A000  version 4.00  Jan. 1988
 28958                                  ;	
 28959                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28960                                  
 28961                                  TableLook	EQU	-1
 28962                                  
 28963                                  SCANSEPARATOR	EQU	1
 28964                                  DRVBIT		EQU	2
 28965                                  NAMBIT		EQU	4
 28966                                  EXTBIT		EQU	8
 28967                                  
 28968                                  ;----------------------------------------------------------------------------
 28969                                  ;
 28970                                  ; Procedure : MakeFcb
 28971                                  ;
 28972                                  ;----------------------------------------------------------------------------
 28973                                  
 28974                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28975                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28976                                  MAKEFCB:
 28977                                  ;hkn; SS override
 28978 00004E39 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28979 00004E3F 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28980                                  	;test	al,2
 28981 00004E41 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28982 00004E43 7504                    	JNZ	short DEFDRV
 28983 00004E45 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28984                                  DEFDRV:
 28985 00004E49 47                      	INC	DI
 28986 00004E4A B90800                  	MOV	CX,8
 28987                                  	;test	al,4
 28988 00004E4D A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28989 00004E4F 93                      	XCHG	AX,BX		; Save bits in BX
 28990 00004E50 B020                    	MOV	AL," "
 28991 00004E52 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28992 00004E54 01CF                    	ADD	DI,CX
 28993 00004E56 31C9                    	XOR	CX,CX		; Don't fill any
 28994                                  FILLB:
 28995 00004E58 F3AA                    	REP	STOSB
 28996 00004E5A B103                    	MOV	CL,3
 28997 00004E5C F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28998 00004E5F 7404                    	JZ	short FILLB2
 28999 00004E61 01CF                    	ADD	DI,CX
 29000 00004E63 31C9                    	XOR	CX,CX
 29001                                  FILLB2:
 29002 00004E65 F3AA                    	REP	STOSB
 29003 00004E67 91                      	XCHG	AX,CX		; Put zero in AX
 29004 00004E68 AB                      	STOSW
 29005 00004E69 AB                      	STOSW			; Initialize two words after to zero
 29006 00004E6A 83EF10                  	SUB	DI,16		; Point back at start
 29007                                  	;test	bl,1
 29008 00004E6D F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29009 00004E70 7409                    	JZ	short SKPSPC
 29010 00004E72 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29011 00004E75 E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29012 00004E78 7504                    	JNZ	short NOSCAN
 29013 00004E7A 46                      	INC	SI		; Skip over the delimiter
 29014                                  SKPSPC:
 29015 00004E7B E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29016                                  NOSCAN:
 29017 00004E7E E8F000                  	CALL	GETLET
 29018 00004E81 761E                    	JBE	short NODRV	; Quit if termination character
 29019 00004E83 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29020 00004E86 7519                    	JNZ	short NODRV
 29021 00004E88 46                      	INC	SI		; Skip over colon
 29022 00004E89 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29023 00004E8B 760F                    	JBE	short BADDRV	; Drive letter out of range
 29024                                  
 29025 00004E8D 50                      	PUSH	AX
 29026 00004E8E E8161B                  	call	GetVisDrv
 29027 00004E91 58                      	POP	AX
 29028 00004E92 730A                    	JNC	short HAVDRV
 29029                                  
 29030                                  	; 20/05/2019 - Retro DOS v4.0
 29031                                  	; MSDOS 6.0
 29032                                  ;hkn; SS override
 29033 00004E94 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29034                                  					; if not FAT drive ;AN000;
 29035 00004E9A 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29036                                  BADDRV:
 29037 00004E9C B2FF                    	MOV	DL,-1
 29038                                  HAVDRV:
 29039 00004E9E AA                      	STOSB			; Put drive specifier in first byte
 29040 00004E9F 46                      	INC	SI
 29041 00004EA0 4F                      	DEC	DI		; Counteract next two instructions
 29042                                  NODRV:
 29043 00004EA1 4E                      	DEC	SI		; Back up
 29044 00004EA2 47                      	INC	DI		; Skip drive byte
 29045                                  
 29046                                  	;entry	NORMSCAN
 29047                                  NORMSCAN:
 29048 00004EA3 B90800                  	MOV	CX,8
 29049 00004EA6 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29050 00004EA9 803C2E                  	CMP	BYTE [SI],"."
 29051 00004EAC 7510                    	JNZ	short NODOT
 29052 00004EAE 46                      	INC	SI		; Skip over dot if present
 29053                                  
 29054                                  	; 24/09/2023
 29055                                  	;mov	cx,3
 29056 00004EAF B103                    	mov	cl,3	; ch=0
 29057                                  
 29058                                  	; MSDOS 6.0
 29059                                  ;hkn; SS override
 29060                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29061                                  	; 10/06/2019
 29062 00004EB1 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29063 00004EB7 7402                    	JZ	short VOLOK				;AN000;
 29064 00004EB9 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29065                                  	; 24/09/2023
 29066                                  	;MOV	CX,2					;AN000;
 29067 00004EBA 49                      	dec	cx  ; cx=2
 29068                                  	;JMP	SHORT contvol				;AN000;
 29069                                  VOLOK:
 29070                                  	;MOV	CX,3		; Get 3-letter extension
 29071                                  contvol:
 29072 00004EBB E81300                  	CALL	MUSTGETWORD
 29073                                  NODOT:
 29074 00004EBE 88D0                    	MOV	AL,DL
 29075                                  
 29076                                  	; MSDOS 6.0
 29077                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29078                                  	; 18/12/2022
 29079 00004EC0 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29080                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29081                                  
 29082 00004EC6 C3                      	retn
 29083                                  
 29084                                  NONAM:
 29085 00004EC7 01CF                    	ADD	DI,CX
 29086 00004EC9 4E                      	DEC	SI
 29087 00004ECA C3                      	retn
 29088                                  
 29089                                  GETWORD:
 29090 00004ECB E8A300                  	CALL	GETLET		
 29091 00004ECE 76F7                    	JBE	short NONAM	; Exit if invalid character
 29092 00004ED0 4E                      	DEC	SI
 29093                                  
 29094                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29095                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29096                                  
 29097                                  MUSTGETWORD:
 29098 00004ED1 E89D00                  	CALL	GETLET
 29099                                  
 29100                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29101                                  
 29102                                  ;IF NOT TABLELOOK
 29103                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29104                                  ;ENDIF
 29105 00004ED4 750C                    	JNZ	short MustCheckCX
 29106                                  
 29107                                  ;hkn; SS override
 29108 00004ED6 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29109 00004EDC 7419                    	JZ	short FILLNAM
 29110 00004EDE 3C20                    	CMP	AL," "
 29111 00004EE0 7515                    	JNZ	short FILLNAM
 29112                                  
 29113                                  MustCheckCX:
 29114 00004EE2 E3ED                    	JCXZ	MUSTGETWORD
 29115 00004EE4 49                      	DEC	CX
 29116 00004EE5 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29117 00004EE7 7504                    	JNZ	short NOSTAR
 29118 00004EE9 B03F                    	MOV	AL,"?"
 29119 00004EEB F3AA                    	REP	STOSB
 29120                                  NOSTAR:
 29121 00004EED AA                      	STOSB
 29122 00004EEE 3C3F                    	CMP	AL,"?"
 29123 00004EF0 75DF                    	JNZ	short MUSTGETWORD
 29124 00004EF2 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29125 00004EF5 EBDA                    	JMP	short MUSTGETWORD
 29126                                  FILLNAM:
 29127 00004EF7 B020                    	MOV	AL," "
 29128 00004EF9 F3AA                    	REP	STOSB
 29129 00004EFB 4E                      	DEC	SI
 29130 00004EFC C3                      	retn
 29131                                  
 29132                                  SCANB:
 29133 00004EFD AC                      	LODSB
 29134 00004EFE E8A100                  	CALL	SPCHK
 29135 00004F01 74FA                    	JZ	short SCANB
 29136 00004F03 4E                      	DEC	SI
 29137                                  scanb_retn:
 29138 00004F04 C3                      	retn
 29139                                  
 29140                                  ;----------------------------------------------------------------------------
 29141                                  ;
 29142                                  ; Procedure Name : NameTrans
 29143                                  ;
 29144                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29145                                  ; allow spaces in pathnames
 29146                                  ;
 29147                                  ;   Inputs:	DS:SI points to start of path element
 29148                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29149                                  ;		ES = DOSGroup
 29150                                  ;		DS:SI advanced after name
 29151                                  ;   Registers modified: DI,AX,DX,CX
 29152                                  ;
 29153                                  ;----------------------------------------------------------------------------
 29154                                  
 29155                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29156                                  	; 20/05/2019 - Retro DOS v4.0
 29157                                  NameTrans:
 29158                                  ;hkn; SS override
 29159 00004F05 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29160 00004F0B 16                      	push	ss
 29161 00004F0C 07                      	pop	es
 29162                                  
 29163                                  ;hkn; NAME1 is in DOSDATA
 29164 00004F0D BF[4B05]                	MOV	DI,NAME1
 29165 00004F10 57                      	PUSH	DI
 29166 00004F11 B82020                  	MOV	AX,'  '
 29167 00004F14 B90500                  	MOV	CX,5
 29168 00004F17 AA                      	STOSB
 29169 00004F18 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29170 00004F1A 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 29171 00004F1C 88C2                    	MOV	DL,AL
 29172 00004F1E AA                      	STOSB
 29173 00004F1F 5F                      	POP	DI
 29174                                  
 29175 00004F20 E880FF                  	CALL	NORMSCAN
 29176                                  
 29177                                  ;hkn; SS override for NAME1
 29178 00004F23 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29179 00004F29 75D9                    	jnz	short scanb_retn
 29180 00004F2B 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29181 00004F31 C3                      	retn
 29182                                  
 29183                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29184                                  ;============================================================================
 29185                                  
 29186                                  ; 20/05/2019 - Retro DOS v4.0
 29187                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29188                                  
 29189                                  ;If TableLook
 29190                                  
 29191                                  ;hkn; Table	SEGMENT
 29192                                  ;	PUBLIC	CharType
 29193                                  ;----------------------------------------------------------------------------
 29194                                  
 29195                                  ; Character type table for file name scanning
 29196                                  ; Table provides a mapping of characters to validity bits.
 29197                                  ; Four bits are provided for each character. Values 7Dh and above
 29198                                  ; have all bits set, so that part of the table is chopped off, and
 29199                                  ; the translation routine is responsible for screening these values.
 29200                                  ; The bit values are defined in DOSSYM.INC
 29201                                  
 29202                                  ;	      ; ^A and NUL
 29203                                  ;CharType:
 29204                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29205                                  ;	      ; ^C and ^B
 29206                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29207                                  ;	      ; ^E and ^D
 29208                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29209                                  ;	      ; ^G and ^F
 29210                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29211                                  ;	      ; TAB and BS
 29212                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29213                                  ;	      ; ^K and ^J
 29214                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29215                                  ;	      ; ^M and ^L
 29216                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29217                                  ;	      ; ^O and ^N
 29218                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29219                                  ;	      ; ^Q and ^P
 29220                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29221                                  ;	      ; ^S and ^R
 29222                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29223                                  ;	      ; ^U and ^T
 29224                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29225                                  ;	      ; ^W and ^V
 29226                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29227                                  ;	      ; ^Y and ^X
 29228                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29229                                  ;	      ; ESC and ^Z
 29230                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29231                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29233                                  ;	      ; ^_ and ^^
 29234                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29235                                  ;	      ; ! and SPACE
 29236                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29237                                  ;	      ; # and "
 29238                                  ;	 db   LOW (NOT FFCB+FCHK)
 29239                                  ;	      ; $ - )
 29240                                  ;	 db   3 dup (0FFh)
 29241                                  ;	      ; + and *
 29242                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29243                                  ;	      ; - and '
 29244                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29245                                  ;	      ; / and .
 29246                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29247                                  ;	      ; 0 - 9
 29248                                  ;	 db   5 dup (0FFh)
 29249                                  ;	      ; ; and :
 29250                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29251                                  ;	      ; = and <
 29252                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29253                                  ;	      ; ? and >
 29254                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29255                                  ;	      ; A - Z
 29256                                  ;	 db   13 dup (0FFh)
 29257                                  ;	      ; \ and [
 29258                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29259                                  ;	      ; ^ and ]
 29260                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29261                                  ;	      ; _ - {
 29262                                  ;	 db   15 dup (0FFh)
 29263                                  ;	      ; } and |
 29264                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29265                                  
 29266                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29267                                  ;					; character in the table
 29268                                  
 29269                                  ;FCHK	equ 1		; normal name char, no chks needed
 29270                                  ;FDELIM	equ 2		; is a delimiter
 29271                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29272                                  ;FFCB	equ 8		; is valid in an FCB
 29273                                  
 29274                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29275                                  ;----------------------------------------------------------------------------
 29276                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29277                                  
 29278                                  CharType: ; 63 bytes
 29279 00004F32 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29280 00004F3A 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29281 00004F42 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29282 00004F4A FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29283 00004F52 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29284 00004F5A FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29285 00004F62 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29286 00004F6A FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29287                                  
 29288                                  CharType_last equ ($ - CharType) * 2
 29289                                  
 29290                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29291                                  ;----------------------------------------------------------------------------
 29292                                  ;CharType:
 29293                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29294                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29295                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29296                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29297                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29298                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29299                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29300                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29301                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29302                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29303                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29304                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29305                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29306                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29307                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29308                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29309                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29310                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29311                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29312                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29313                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29314                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29315                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29316                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29317                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29318                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29319                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29320                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29321                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29322                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29323                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29324                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29325                                  
 29326                                  ;hkn; Table	ENDS
 29327                                  
 29328                                  ;ENDIF
 29329                                  
 29330                                  ; 20/05/2019 - Retro DOS v4.0
 29331                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29332                                  
 29333                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29334                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29335                                  
 29336                                  ;----------------------------------------------------------------------------
 29337                                  ;
 29338                                  ; Procedure Names : GetLet, UCase, GetLet3
 29339                                  ;
 29340                                  ; These routines take a character, convert it to upper case, and check
 29341                                  ; for delimiters.  Three different entry points:
 29342                                  ;	GetLet -  DS:[SI] = character to convert
 29343                                  ;	UCase  -  AL = character to convert
 29344                                  ;	GetLet3 - AL = character
 29345                                  ;		  [BX] = translation table to use
 29346                                  ;
 29347                                  ;	Exit (in all cases) : AL = upper case character
 29348                                  ;			      CY set if char is control char other than TAB
 29349                                  ;			      ZF set if char is a delimiter
 29350                                  ;	Uses : AX, flags
 29351                                  ;
 29352                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29353                                  ; inline version.  Return with carry set is only possible in the inline
 29354                                  ; version. The table lookup version is the one in use.
 29355                                  ;
 29356                                  ;----------------------------------------------------------------------------
 29357                                  
 29358                                  ; This entry point has character at [SI]
 29359                                  
 29360                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29361                                  GETLET:	
 29362 00004F71 AC                      	LODSB
 29363                                  
 29364                                  ; This entry point has character in AL
 29365                                  
 29366                                  	;entry	UCase
 29367                                  UCase:	
 29368                                  	; 09/08/2018
 29369                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29370                                  _UCase:
 29371 00004F72 53                      	PUSH	BX
 29372 00004F73 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29373                                  
 29374                                  ; Convert the character in AL to upper case
 29375                                  
 29376                                  gl_0:
 29377 00004F76 3C61                    	CMP	AL,"a"
 29378 00004F78 7214                    	JB	short gl_2	; Already upper case, go check type
 29379 00004F7A 3C7A                    	CMP	AL,"z"
 29380 00004F7C 7702                    	JA	short gl_1
 29381 00004F7E 2C20                    	SUB	AL,20H		; Convert to upper case
 29382                                  
 29383                                  ; Map European character to upper case
 29384                                  
 29385                                  gl_1:
 29386 00004F80 3C80                    	CMP	AL,80H
 29387 00004F82 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29388 00004F84 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29389                                  
 29390                                  	; M048 - Start 
 29391                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29392                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29393                                  	; preserve it.
 29394                                  
 29395                                  	; 09/08/2018 - Retro DOS v3.0
 29396                                  	; MSDOS 3.3
 29397                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29398                                  	;CS	XLAT
 29399                                  
 29400                                  	; 20/05/2019 - Retro DOS v4.0
 29401                                  
 29402                                  	; MSDOS 6.0
 29403 00004F86 1E                      	push	ds
 29404                                  	;getdseg <ds>
 29405 00004F87 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29406 00004F8C D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29407 00004F8D 1F                      	pop	ds
 29408                                  
 29409                                  	; M048 - End
 29410                                  
 29411                                  ; Now check the type
 29412                                  
 29413                                  ;If TableLook
 29414                                  gl_2:
 29415                                  	; 20/05/2019 - Retro DOS v4.0
 29416 00004F8E 50                      	PUSH	AX
 29417                                  
 29418                                  	; MSDOS 3.3
 29419                                  	;mov	bx,CharType
 29420                                  	;; 09/08/2018
 29421                                  	;;xlat	byte [cs:bx]
 29422                                  	;cs	xlat	
 29423                                  	
 29424                                  	; MSDOS 6.0
 29425 00004F8F E81800                  	CALL	GetCharType	; returns type flags in AL
 29426                                  	
 29427                                  	;test	al,1	
 29428 00004F92 A801                    	TEST	AL,FCHK 	; test for normal character
 29429 00004F94 58                      	POP	AX
 29430                                  
 29431 00004F95 5B                      	POP	BX
 29432 00004F96 C3                      	RETN
 29433                                  
 29434                                  ; This entry has character in AL and lookup table in BX
 29435                                  
 29436                                  	; MSDOS 6.0
 29437                                  ;	;entry GetLet3
 29438                                  GETLET3: ; 10/08/2018
 29439 00004F97 53                      	PUSH	BX
 29440 00004F98 EBDC                    	JMP	short gl_0
 29441                                  ;ELSE
 29442                                  ;
 29443                                  ;gl_2:
 29444                                  ;	POP	BX
 29445                                  ;	CMP	AL,"."
 29446                                  ;	retz
 29447                                  ;	CMP	AL,'"'
 29448                                  ;	retz
 29449                                  ;	CALL	PATHCHRCMP
 29450                                  ;	retz
 29451                                  ;	CMP	AL,"["
 29452                                  ;	retz
 29453                                  ;	CMP	AL,"]"
 29454                                  ;	retz
 29455                                  ;ENDIF
 29456                                  
 29457                                  ;---------------------------------------------------------------------
 29458                                  ;
 29459                                  ; DELIM - check if character is a delimiter
 29460                                  ;	Entry : AX = character to check
 29461                                  ;	Exit  : ZF set if character is not a delimiter
 29462                                  ;	Uses  : Flags
 29463                                  ;
 29464                                  ;--------------------------------------------------------------------
 29465                                  
 29466                                  	;entry	DELIM
 29467                                  DELIM:
 29468                                  ;IF TableLook
 29469                                  	; 20/05/2019 - Retro DOS v4.0
 29470 00004F9A 50                      	PUSH	AX
 29471                                  
 29472                                  	; MSDOS 3.3
 29473                                  	;push	bx
 29474                                  	;mov	bx,CharType
 29475                                  	;;09/08/2018
 29476                                  	;;xlat	byte [cs:bx]
 29477                                  	;cs	xlat
 29478                                  	;pop	bx
 29479                                  
 29480                                  	; MSDOS 6.0
 29481 00004F9B E80C00                  	CALL	GetCharType
 29482                                  	
 29483                                  	;test	al,2
 29484 00004F9E A802                    	TEST	AL,FDELIM
 29485 00004FA0 58                      	POP	AX
 29486 00004FA1 C3                      	RETN
 29487                                  ;ELSE
 29488                                  ;	CMP	AL,":"
 29489                                  ;	retz
 29490                                  ;
 29491                                  ;	CMP	AL,"<"
 29492                                  ;	retz
 29493                                  ;	CMP	AL,"|"
 29494                                  ;	retz
 29495                                  ;	CMP	AL,">"
 29496                                  ;	retz
 29497                                  ;
 29498                                  ;	CMP	AL,"+"
 29499                                  ;	retz
 29500                                  ;	CMP	AL,"="
 29501                                  ;	retz
 29502                                  ;	CMP	AL,";"
 29503                                  ;	retz
 29504                                  ;	CMP	AL,","
 29505                                  ;	retz
 29506                                  ;ENDIF
 29507                                  
 29508                                  ;-------------------------------------------------------------------------
 29509                                  ;
 29510                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29511                                  ;	Entry : AL = character to check
 29512                                  ;	Exit  : ZF set if character is a space
 29513                                  ;	Uses  : flags
 29514                                  ;
 29515                                  ;-------------------------------------------------------------------------
 29516                                  
 29517                                  	;entry SPCHK
 29518                                  SPCHK:
 29519                                  ;IF TableLook
 29520                                  	; 20/05/2019 - Retro DOS v4.0
 29521 00004FA2 50                      	PUSH	AX
 29522                                  
 29523                                  	; MSDOS 3.3
 29524                                  	;push	bx
 29525                                  	;mov	bx,CharType
 29526                                  	;; 09/08/2018
 29527                                  	;;xlat	byte [cs:bx]
 29528                                  	;cs	xlat
 29529                                  	;pop	bx
 29530                                  
 29531                                  	; MSDOS 6.0
 29532 00004FA3 E80400                  	CALL	GetCharType
 29533                                  	
 29534                                  	;test	al,4
 29535 00004FA6 A804                    	TEST	AL,FSPCHK
 29536 00004FA8 58                      	POP	AX
 29537 00004FA9 C3                      	RETN
 29538                                  ;ELSE
 29539                                  ;	CMP	AL,9		; Filter out tabs too
 29540                                  ;	retz
 29541                                  ;; WARNING! " " MUST be the last compare
 29542                                  ;	CMP	AL," "
 29543                                  ;	return
 29544                                  ;ENDIF
 29545                                  
 29546                                  ;-------------------------------------------------------------------------
 29547                                  ;
 29548                                  ;  GetCharType - return flag bits indicating character type
 29549                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29550                                  ;	defined above at label CharType.
 29551                                  ;
 29552                                  ;	Entry : AL = character to return type flags for
 29553                                  ;	Exit  : AL = type flags
 29554                                  ;	Uses  : AL, flags
 29555                                  ;
 29556                                  ;-------------------------------------------------------------------------
 29557                                  
 29558                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29559                                  
 29560                                  	; 20/05/2019 - Retro DOS v4.0
 29561                                  	; MSDOS 6.0
 29562                                  GetCharType:
 29563                                  	;cmp	al,7Eh
 29564 00004FAA 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29565 00004FAC 7316                    	jae	short gct_90		; return standard value
 29566                                  
 29567 00004FAE 53                      	push	bx
 29568 00004FAF BB[324F]                	mov	bx,CharType		; load lookup table
 29569 00004FB2 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29570                                  	;xlat	cs:[bx] 		; get flags
 29571 00004FB4 2ED7                    	cs	xlat	
 29572 00004FB6 5B                      	pop	bx
 29573                                  
 29574                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29575                                  ; we have to shift the flags down to the low nibble
 29576                                  
 29577 00004FB7 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29578                                  
 29579 00004FB9 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29580 00004FBB D0E8                    	shr	al,1
 29581 00004FBD D0E8                    	shr	al,1
 29582 00004FBF D0E8                    	shr	al,1
 29583                                  gct_80:
 29584 00004FC1 240F                    	and	al,0Fh			; clear the unused nibble
 29585 00004FC3 C3                      	retn
 29586                                  gct_90:
 29587 00004FC4 B00F                    	mov	al,0Fh			; set all flags
 29588 00004FC6 C3                      	retn
 29589                                  
 29590                                  ;----------------------------------------------------------------------------
 29591                                  ;
 29592                                  ; Procedure : PATHCHRCMP
 29593                                  ;
 29594                                  ;----------------------------------------------------------------------------
 29595                                  
 29596                                  PATHCHRCMP:
 29597 00004FC7 3C2F                    	CMP	AL,'/'
 29598 00004FC9 7606                    	JBE	short PathRet
 29599 00004FCB 3C5C                    	CMP	AL,'\'
 29600 00004FCD C3                      	retn
 29601                                  GotFor:
 29602 00004FCE B05C                    	MOV	AL,'\'
 29603 00004FD0 C3                      	retn
 29604                                  PathRet:
 29605 00004FD1 74FB                    	JZ	short GotFor
 29606 00004FD3 C3                      	retn
 29607                                  
 29608                                  ;============================================================================
 29609                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29610                                  ;============================================================================
 29611                                  ; 30/07/2018 - Retro DOS v3.0
 29612                                  ; 29/04/2019 - Retro DOS v4.0
 29613                                  
 29614                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29615                                  
 29616                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29617                                  
 29618                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29619                                  ;	NAME	IBMCTRLC
 29620                                  
 29621                                  ;**	Low level routines for detecting special characters on CON input,
 29622                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29623                                  ;	process termination code, and the INT 0 divide overflow handler.
 29624                                  ;
 29625                                  ;	FATAL
 29626                                  ;	FATAL1
 29627                                  ;	reset_environment
 29628                                  ;	DSKSTATCHK
 29629                                  ;	SPOOLINT
 29630                                  ;	STATCHK
 29631                                  ;	CNTCHAND
 29632                                  ;	DIVOV
 29633                                  ;	CHARHARD
 29634                                  ;	HardErr
 29635                                  ;
 29636                                  ;	Revision history:
 29637                                  ;
 29638                                  ;	    AN000	version 4.0   Jan 1988
 29639                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29640                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29641                                  ;
 29642                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29643                                  ;	      flags register. In order to return to user normally DOS used to
 29644                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29645                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29646                                  ;
 29647                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29648                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29649                                  ;	      charhard.
 29650                                  
 29651                                  ; 29/04/2019 - Retro DOS v4.0
 29652                                  	; MSDOS 6.0
 29653                                  ;		public	LowInt23Addr		
 29654                                  LowInt23Addr: ;	LABEL	DWORD
 29655 00004FD4 [CD10]0000              	DW	LowInt23, 0
 29656                                  
 29657                                  ;		public	LowInt24Addr
 29658                                  LowInt24Addr: ;	LABEL	DWORD
 29659 00004FD8 [E110]0000              	DW	LowInt24, 0
 29660                                  
 29661                                  ;		public	LowInt28Addr
 29662                                  LowInt28Addr: ;	LABEL	DWORD
 29663 00004FDC [F510]0000              	DW	LowInt28, 0
 29664                                  
 29665                                  ;Break	<Checks for ^C in CON I/O>
 29666                                  
 29667                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29668                                  ; 05/05/2019 - Retro DOS v4.0
 29669                                  
 29670                                  ;---------------------------------------------------------------------------
 29671                                  ;
 29672                                  ; Procedure Name : DSKSTATCHK
 29673                                  ;
 29674                                  ; Check for ^C if only one level in
 29675                                  ;
 29676                                  ;---------------------------------------------------------------------------
 29677                                  
 29678                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29679                                  
 29680                                  DSKSTATCHK:        
 29681                                  	;CMP	BYTE [INDOS],1
 29682 00004FE0 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29683                                  	;retnz			; Do NOTHING
 29684                                  	; 16/12/2022
 29685 00004FE6 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29686                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29687                                  	;jz	short _RET37 ; dskstatchk1
 29688                                  	;retn
 29689                                  ;_RET37:
 29690                                  ;dskstatchk1:
 29691 00004FE8 51                      	PUSH    CX
 29692 00004FE9 06                              PUSH    ES
 29693 00004FEA 53                              PUSH    BX
 29694 00004FEB 1E                              PUSH    DS
 29695 00004FEC 56                              PUSH    SI
 29696                                          
 29697                                  	;PUSH	CS
 29698                                          ;POP	ES
 29699                                          ;PUSH	CS
 29700                                          ;POP	DS
 29701                                  
 29702 00004FED 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29703 00004FEF 8EC3                    	MOV	ES,BX		; for deviocall2
 29704 00004FF1 8EDB                    	MOV	DS,BX
 29705                                  
 29706                                  	; 16/12/2022
 29707                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29708                                  
 29709                                  	; 05/05/2019
 29710                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29711                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29712                                  	;mov	word [ss:DSKSTST],0
 29713                                  
 29714                                  	; 16/12/2022
 29715                                  	; 25/06/2019
 29716 00004FF3 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29717 00004FF8 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29718 00004FFD C706[9503]0000          	mov	word [DSKSTST],0
 29719                                  
 29720 00005003 BB[9203]                        MOV     BX,DSKSTCALL
 29721                                  
 29722                                  	;LDS	SI,[ss:BCON]
 29723                                          ; 25/062019
 29724 00005006 C536[3200]              	lds	si,[BCON]
 29725                                  
 29726                                  ; 16/12/2022
 29727                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29728                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29729                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29730                                  ;	mov	word [ss:DSKSTST],0
 29731                                  ;	mov	bx,DSKSTCALL
 29732                                  ;	lds	si,[ss:BCON]
 29733                                  
 29734 0000500A E87FF5                  	CALL	DEVIOCALL2
 29735                                   	; 15/03/2018
 29736                                  	;;test	word [ss:DSKSTST],200h
 29737                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29738                                  	; 05/05/2019
 29739 0000500D 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29740 00005013 7408                    	jz	short _GotCh		; No characters available
 29741                                  
 29742 00005015 30C0                            XOR     AL,AL                   ; Set zero
 29743                                  RET36:
 29744 00005017 5E                              POP     SI
 29745 00005018 1F                              POP     DS
 29746 00005019 5B                              POP     BX
 29747 0000501A 07                              POP     ES
 29748 0000501B 59                              POP     CX
 29749                                  	; 16/12/2022
 29750                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29751                                  _RET37:
 29752 0000501C C3                              RETN
 29753                                  
 29754                                  _GotCh:
 29755 0000501D 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29756                                  
 29757 00005021 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29758 00005023 75F2                            JNZ     SHORT RET36
 29759 00005025 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29760 0000502B 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29761 00005031 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29762                                  	; 09/09/2018
 29763 00005036 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29764 0000503D 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29765 00005044 E845F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29766 00005047 5E                              POP     SI
 29767 00005048 1F                              POP     DS
 29768 00005049 5B                              POP     BX                      ; Clean stack
 29769 0000504A 07                              POP     ES
 29770 0000504B 59                              POP     CX
 29771 0000504C E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29772                                  
 29773                                  	; 05/05/2019
 29774                                  NOSTOP:
 29775                                  	; MSDOS 6.0
 29776 0000504F 3C10                    	CMP	AL,"P"-"@"
 29777 00005051 7509                    	JNZ	short check_next
 29778                                  				    	; SS override
 29779 00005053 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29780 00005059 7405                    	JZ	short INCHKJ		; no
 29781                                  check_end:	; 24/09/2023
 29782 0000505B C3                      	retn
 29783                                  check_next:
 29784                                  	;IF	NOT TOGLPRN
 29785                                  	;CMP	AL,"N"-"@"
 29786                                  	;JZ	short INCHKJ
 29787                                  	;ENDIF
 29788                                  
 29789 0000505C 3C03                    	CMP	AL,"C"-"@"
 29790                                  	; 24/09/2023
 29791                                  	;JZ	short INCHKJ
 29792                                  ;check_end:
 29793                                  	;retn
 29794 0000505E 75FB                    	jnz	short check_end
 29795                                  
 29796                                  	; 24/09/2023
 29797                                  	; 08/09/2018
 29798                                  INCHKJ:	; 10/08/2018
 29799 00005060 E9A500                  	jmp	INCHK
 29800                                  
 29801                                  	; MSDOS 3.3
 29802                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29803                                          ;JZ	short INCHKJ
 29804                                  
 29805                                  	; 15/04/2018
 29806                                          ;;IF	NOT TOGLPRN
 29807                                          ;CMP	AL,"N"-"@"
 29808                                          ;JZ	SHORT INCHKJ
 29809                                          ;;ENDIF
 29810                                  	
 29811                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29812                                          ;JZ	short INCHKJ
 29813                                  	;RETN
 29814                                  
 29815                                  ;	; 08/09/2018
 29816                                  ;INCHKJ:; 10/08/2018
 29817                                  ;	JMP	INCHK
 29818                                  
 29819                                  ;----------------------------------------------------------------------------
 29820                                  ;
 29821                                  ; Procedure Name : SpoolInt
 29822                                  ;
 29823                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29824                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29825                                  ; the middle of an INT 24.
 29826                                  ;
 29827                                  ;----------------------------------------------------------------------------
 29828                                  
 29829                                  SPOOLINT:
 29830 00005063 9C                              PUSHF
 29831                                  	; 15/03/2018
 29832 00005064 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29833 0000506A 7423                            JZ      SHORT POPFRET
 29834 0000506C 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29835 00005072 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29836                                  
 29837                                  	; 30/07/2018
 29838                                  
 29839                                  	; Note that we are going to allow an external program to issue system 
 29840                                  	; calls at this time. We MUST preserve IdleInt across this.
 29841                                  
 29842 00005074 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29843                                  
 29844                                  	; 05/05/2019 - Retro DOS v4.0
 29845                                   
 29846                                  	; MSDOS 6.0
 29847 00005079 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29848 0000507F 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29849 00005081 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29850 00005083 EB05                    	jmp	short spool_ret_addr
 29851                                  
 29852                                  do_low_int28:
 29853                                  	;call	far [ss:LowInt28Addr]
 29854 00005085 2EFF1E[DC4F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29855                                  
 29856                                  spool_ret_addr:
 29857                                  	;INT	int_spooler		; INT 28h
 29858                                  
 29859 0000508A 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29860                                  POPFRET:
 29861 0000508F 9D                              POPF
 29862                                  _RET18:  
 29863 00005090 C3                      	RETN
 29864                                  
 29865                                  ; 05/05/2019 - Retro DOS v4.0
 29866                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29867                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29868                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29869                                  
 29870                                  ;----------------------------------------------------------------------------
 29871                                  ;
 29872                                  ; Procedure Name : STATCHK
 29873                                  ;
 29874                                  ;----------------------------------------------------------------------------
 29875                                  
 29876                                  STATCHK:
 29877 00005091 E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29878                                                                          ; input redirection
 29879 00005094 53                              PUSH    BX
 29880 00005095 31DB                            XOR     BX,BX
 29881 00005097 E8FAE4                          CALL	GET_IO_SFT
 29882 0000509A 5B                              POP     BX
 29883 0000509B 72F3                            JC      SHORT _RET18
 29884                                  
 29885 0000509D B401                            MOV     AH,1
 29886 0000509F E815F3                          CALL	IOFUNC
 29887 000050A2 74BF                            JZ      SHORT SPOOLINT
 29888 000050A4 3C13                            CMP     AL,'S'-'@'
 29889 000050A6 75A7                            JNZ     SHORT NOSTOP
 29890                                  
 29891                                  	; 05/05/2019
 29892                                  	; MSDOS 6.0			; SS override
 29893 000050A8 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29894 000050AE 75AB                    	JNZ	short check_end		; AN000; yes
 29895                                  
 29896 000050B0 30E4                            XOR     AH,AH
 29897 000050B2 E802F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29898 000050B5 EB4A                            JMP     SHORT PAUSOSTRT
 29899                                  PRINTOFF:
 29900                                  PRINTON:
 29901 000050B7 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29902                                  
 29903                                  	; 30/07/2018 - Retro DOS v3.0
 29904 000050BC 53                      	PUSH	BX
 29905 000050BD BB0400                  	MOV	BX,4
 29906 000050C0 E8D1E4                  	call	GET_IO_SFT
 29907 000050C3 5B                      	POP	BX
 29908 000050C4 72CA                    	jc	short _RET18
 29909 000050C6 06                      	PUSH	ES
 29910 000050C7 57                      	PUSH	DI
 29911 000050C8 1E                      	PUSH	DS
 29912 000050C9 07                      	POP	ES
 29913 000050CA 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29914                                  	;test	word [es:di+5],800h
 29915                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29916                                  	; 05/05/2019
 29917 000050CC 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29918 000050D1 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29919                                  
 29920                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29921                                  					; See if allowed
 29922 000050D3 50                      	push	ax
 29923 000050D4 B82611                  	mov	ax,1126h
 29924 000050D7 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29925                                  			; Return: CF set on error, AX = error code
 29926                                  			; STACK unchanged
 29927 000050D9 58                      	pop	ax
 29928                                  
 29929 000050DA 730F                    	JNC	short NORM_PR 		; Echo is OK
 29930                                  
 29931                                  					; SS override
 29932 000050DC 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29933                                  
 29934                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29935                                  
 29936 000050E2 50                      	push    ax
 29937 000050E3 B82411                  	mov     ax,1124h
 29938 000050E6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29939                                  			; ES:DI -> SFT, SS = DOS CS
 29940 000050E8 58                      	pop     ax
 29941                                  
 29942 000050E9 EB10                    	JMP	SHORT RETP6
 29943                                  NORM_PR:
 29944 000050EB 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29945 000050F1 7505                    	JNZ	short PRNOPN
 29946 000050F3 E81AF4                  	call	DEV_CLOSE_SFT
 29947 000050F6 EB03                    	JMP	SHORT RETP6
 29948                                  PRNOPN:
 29949 000050F8 E80DF4                  	call	DEV_OPEN_SFT
 29950                                  RETP6:
 29951 000050FB 5F                      	POP	DI
 29952 000050FC 07                      	POP	ES
 29953                                  STATCHK_RETN:
 29954 000050FD C3                              RETN
 29955                                  PAUSOLP:
 29956 000050FE E862FF                          CALL    SPOOLINT
 29957                                  PAUSOSTRT:
 29958 00005101 B401                            MOV     AH,1
 29959 00005103 E8B1F2                          CALL	IOFUNC
 29960 00005106 74F6                            JZ      SHORT PAUSOLP
 29961                                  INCHK:
 29962 00005108 53                              PUSH    BX
 29963 00005109 31DB                            XOR     BX,BX
 29964 0000510B E886E4                          CALL	GET_IO_SFT
 29965 0000510E 5B                              POP     BX
 29966 0000510F 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29967 00005111 30E4                            XOR     AH,AH
 29968 00005113 E8A1F2                          CALL	IOFUNC
 29969                                  	; 30/07/2018
 29970                                  	; MSDOS 3.3
 29971                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29972                                          ;JNZ	SHORT NOPRINT
 29973                                  
 29974                                  	;cmp	byte [SS:SCAN_FLAG],0
 29975                                  	;JZ	SHORT PRINTON	
 29976                                  	;mov	byte [ss:SCAN_FLAG],0
 29977                                  
 29978                                  	; 05/05/2019
 29979                                  	; MSDOS 6.0
 29980 00005116 3C10                    	CMP	AL,"P"-"@"
 29981                                  	;;;;  7/14/86	ALT_Q key fix
 29982 00005118 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29983                                  ;NOPRINT:	
 29984                                  	;IF	NOT TOGLPRN
 29985                                  	;CMP	AL,"N"-"@"
 29986                                  	;JZ	short PRINTOFF
 29987                                  	;ENDIF
 29988 0000511A 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29989                                  	;retnz
 29990 0000511C 75DF                    	jnz	short STATCHK_RETN
 29991                                  
 29992                                  	; !! NOTE: FALL THROUGH !!
 29993                                  
 29994                                  ;---------------------------------------------------------------------------
 29995                                  ;
 29996                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29997                                  ;
 29998                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29999                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30000                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30001                                  ; processing to continue; 2) the original interrupt return address to the code
 30002                                  ; that performed the function call in the first place. If the user CTRL-C
 30003                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30004                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30005                                  ; is simulated.
 30006                                  ;
 30007                                  ;---------------------------------------------------------------------------
 30008                                  
 30009                                  CNTCHAND:
 30010                                  	; MSDOS 6.0			; SS override
 30011                                  					; AN002; from RAWOUT
 30012                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30013                                  	;JNZ	short around_deadlock 	; AN002;
 30014                                  
 30015                                  	; 05/05/2019 - Retro DOS v4.0
 30016                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30017 0000511E 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30018 00005124 7508                    	JNZ	short around_deadlock 	; AN002;
 30019                                  
 30020 00005126 B003                            MOV     AL,3			; Display "^C"
 30021 00005128 E8B0C5                          CALL	BUFOUT
 30022 0000512B E84BC4                          CALL	CRLF
 30023                                  around_deadlock:
 30024 0000512E 16                              PUSH    SS
 30025 0000512F 1F                              POP     DS
 30026 00005130 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30027 00005135 7403                            JZ      SHORT NOSWAP
 30028 00005137 E8EEE0                          CALL	SWAPBACK
 30029                                  NOSWAP:
 30030 0000513A FA                      	CLI				; Prepare to play with stack
 30031 0000513B 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30032 0000513F 8B26[8405]              	MOV	SP,[USER_SP]
 30033 00005143 E805B3                          CALL	restore_world       ; User registers now restored
 30034                                  
 30035                                  	; 30/07/2018 - Retro DOS v3.0 
 30036                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30037                                          ; 14/03/2018 - Retro DOS v2.0
 30038                                  	;MOV	BYTE [CS:INDOS],0	
 30039                                          ;MOV	BYTE [CS:ERRORMODE],0
 30040                                          ;MOV	[CS:ConC_Spsave],SP
 30041                                  	;clc	;30/07/2018
 30042                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30043                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30044                                  			; Return: return via RETF 2 with CF set
 30045                                  			; DOS will abort program with errorlevel 0
 30046                                  			; else
 30047                                  			; interrupted DOS call continues
 30048                                  
 30049                                  	; 05/05/2019 - Retro DOS v4.0
 30050                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30051                                  
 30052                                  	; CS was used to address these variables. We have to use DOSDATA
 30053                                  	
 30054 00005146 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30055                                  			; (pop es, after 'call restore_world')	
 30056 00005147 1E                      	push	ds
 30057                                  	;getdseg <ds>			; ds -> dosdata
 30058 00005148 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30059 0000514D C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30060 00005152 C606[2003]00            	mov	byte [ERRORMODE],0
 30061 00005157 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30062                                  	; User SP has changed because of push. Adjust for it
 30063 0000515B 8306[3203]02            	add	word [ConC_Spsave],2
 30064                                  
 30065 00005160 803E[F211]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30066 00005165 1F                       	pop	ds	; restore ds
 30067 00005166 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30068 00005168 F8                      	CLC				
 30069 00005169 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30070 0000516B EB06                    	jmp	short ctrlc_ret_addr
 30071                                  
 30072                                  	; 05/05/2019
 30073                                  do_low_int23:
 30074 0000516D F8                      	clc
 30075 0000516E 2EFF1E[D44F]            	call	far [cs:LowInt23Addr]	
 30076                                  
 30077                                  	; 30/07/2018 
 30078                                  
 30079                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30080                                  
 30081                                  ; The user has returned to us. The circumstances we allow are:
 30082                                  ;
 30083                                  ;   IRET	We retry the operation by redispatching the system call
 30084                                  ;   CLC/RETF	POP the stack and retry
 30085                                  ;   ... 	Exit the current process with ^C exit
 30086                                  ;
 30087                                  ; User's may RETURN to us and leave interrupts on. 
 30088                                  ; Turn 'em off just to be sure
 30089                                  
 30090                                  ctrlc_ret_addr: ; 05/05/2019
 30091                                  
 30092 00005173 FA                      	CLI
 30093                                  
 30094                                  	; MSDOS 3.3 
 30095                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30096                                  	;PUSHF				; and the flags (maybe new call)
 30097                                  	;POP	AX
 30098                                  
 30099                                  	; 05/05/2019
 30100                                  	; MSDOS 6.0
 30101                                  
 30102                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30103                                  
 30104 00005174 50                      	push	ax
 30105 00005175 8CD8                    	mov	ax,ds
 30106                                  	;getdseg <ds>			; ds -> dosdata
 30107 00005177 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30108 0000517C A3[0A0D]                	mov	[TEMPSEG],ax
 30109 0000517F 58                      	pop	ax
 30110 00005180 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30111 00005183 9C                      	pushf				; and the flags (maybe new call)
 30112 00005184 58                      	pop	ax
 30113                                  
 30114                                  ; See if the input stack is identical to the output stack
 30115                                  
 30116                                  	; MSDOS 3.3
 30117                                  	;CMP	SP,[CS:ConC_Spsave]
 30118                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30119                                  
 30120                                  	; MSDOS 6.0
 30121 00005185 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30122 00005189 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30123                                  
 30124                                  ; Repeat the operation by redispatching the system call.
 30125                                  
 30126                                  ctrlc_repeat:
 30127                                  	; MSDOS 3.3
 30128                                  	;MOV	AX,[CS:USER_IN_AX]
 30129                                  	; 05/05/2019
 30130                                  	; MSDOS 6.0
 30131 0000518B A1[3A03]                	mov	ax,[USER_IN_AX]
 30132 0000518E 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30133                                  	; MSDOS 3.3 & MSDOS 6.0 
 30134                                  	;transfer COMMAND
 30135                                  COMMANDJ:
 30136 00005192 E973B1                  	JMP	COMMAND
 30137                                  
 30138                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30139                                  ; RETF'd leaving some flags on the stack and examine the input
 30140                                  
 30141                                  ctrlc_try_new:
 30142 00005195 83C402                  	ADD	SP,2			; pop those flags
 30143                                  	;;test	ax,1
 30144                                  	;TEST	AX,f_Carry		; did he return with carry?
 30145 00005198 A801                    	test	al,f_Carry ; test al,1
 30146 0000519A 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30147                                  
 30148                                  	; MSDOS 6.0
 30149 0000519C 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30150                                  
 30151                                  	; Well...  time to abort the user.  
 30152                                  	; Signal a ^C exit and use the EXIT system call..
 30153                                  
 30154                                  ctrlc_abort:
 30155                                  	; MSDOS 3.3
 30156                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30157                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 30158                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30159                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30160                                  	;;JMP	SHORT COMMANDJ
 30161                                  	;JMP	COMMAND
 30162                                  
 30163                                  	; 05/05/2019 - Retro DOS v4.0
 30164                                  	; MSDOS 6.0
 30165 000051A0 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30166 000051A3 1E                      	push	ds
 30167                                  	;getdseg <ds>			; ds -> dosdata
 30168 000051A4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30169 000051A9 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30170 000051AE 1F                      	pop	ds
 30171                                  	;transfer COMMAND		; give up by faking $EXIT
 30172 000051AF EBE1                    	JMP	SHORT COMMANDJ
 30173                                  	;JMP	COMMAND
 30174                                  
 30175                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30176                                  ;----------------------------------------------------------------------------
 30177                                  ;
 30178                                  ; Procedure Name : DIVOV
 30179                                  ;
 30180                                  ; Default handler for division overflow trap
 30181                                  ;
 30182                                  ;----------------------------------------------------------------------------
 30183                                  
 30184                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30185                                  DIVOV: 
 30186                                  	; 05/05/2019 - Retro DOS v4.0
 30187                                  	; 30/07/2018
 30188                                  	; 07/07/2018 - Retro DOS v3.0
 30189 000051B1 BE[9D09]                	mov	si,DIVMES
 30190 000051B4 2E8B1E[B009]            	mov	bx,[cs:DivMesLen]
 30191                                  	;mov	ax,cs
 30192                                  	;mov	ss,ax
 30193                                  	; 05/05/2019
 30194                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30195 000051B9 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30196 000051BE BC[A007]                	mov     sp,AUXSTACK
 30197                                  	;call	RealDivOv ; MSDOS 3.3
 30198 000051C1 E80200                  	call	_OUTMES ; MSDOS 6.0
 30199 000051C4 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30200                                  
 30201                                  ; 30/07/2018
 30202                                  
 30203                                  ; MSDOS 6.0
 30204                                  ;---------------------------------------------------------------------------
 30205                                  ;
 30206                                  ; Procedure Name : OutMes
 30207                                  ;
 30208                                  ;
 30209                                  ; OutMes: perform message output
 30210                                  ; Inputs:   SS:SI points to message
 30211                                  ;	    BX has message length
 30212                                  ; Outputs:  message to BCON
 30213                                  ;
 30214                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30215                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30216                                  ;NB. This procedure is called only from DIVOV. -SR
 30217                                  ;
 30218                                  ;---------------------------------------------------------------------------
 30219                                  
 30220                                  ;MSDOS 3.3
 30221                                  ;---------------------------------------------------------------------------
 30222                                  ; RealDivOv: perform actual divide overflow stuff.
 30223                                  ; Inputs:   none
 30224                                  ; Outputs:  message to BCON
 30225                                  ;---------------------------------------------------------------------------
 30226                                  
 30227                                  	; 05/05/2019 - Retro DOS v4.0
 30228                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30229                                  
 30230                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30231                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30232                                  
 30233                                  ;---------------------------------------------------------------------------
 30234                                  ;
 30235                                  ; Procedure Name : OutMes
 30236                                  ;
 30237                                  ; OutMes: perform message output
 30238                                  ; Inputs:   SS:SI points to message
 30239                                  ;	    BX has message length
 30240                                  ; Outputs:  message to BCON
 30241                                  ;
 30242                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30243                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30244                                  ;NB. This procedure is called only from DIVOV. -SR
 30245                                  ;
 30246                                  ;---------------------------------------------------------------------------
 30247                                  
 30248                                  	; 30/07/2018
 30249                                  	; MSDOS 6.0
 30250                                  _OUTMES:
 30251                                  	; MSDOS 3.3
 30252                                  ;RealDivOv:
 30253                                  	; 07/07/2018 - Retro DOS v3.0
 30254                                          ;Context ES
 30255 000051C6 16                      	push	ss ; 05/05/2019
 30256                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30257 000051C7 07                      	POP	ES
 30258                                          ;Context DS
 30259 000051C8 16                      	push	ss ; 05/05/2019	
 30260                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30261 000051C9 1F                      	POP	DS
 30262 000051CA C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30263 000051CF C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30264 000051D4 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30265                                  	; BX = [DivMesLen] = 19
 30266 000051DA 891E[A403]                      MOV     [DSKSTCNT],BX
 30267 000051DE BB[9203]                        MOV     BX,DSKSTCALL
 30268 000051E1 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30269                                  	; 08/09/2018
 30270                                  	;mov	[DEVIOBUF_PTR],si
 30271                                  	; MSDOS 6.0
 30272                                  					; CS is used for string, fill in 
 30273                                  					; segment address 
 30274 000051E5 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30275                                  
 30276 000051E9 C536[3200]                      LDS     SI,[BCON]
 30277 000051ED E89CF3                          CALL	DEVIOCALL2
 30278                                  
 30279                                  	;; 14/03/2018
 30280                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30281                                  	;; 08/09/2018
 30282                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30283                                          ;MOV	WORD [CS:DSKSTCNT],1
 30284                                          
 30285                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30286                                  
 30287                                  	; ES still points to DOSDATA. ES is
 30288                                  					; not destroyed by deviocall2. So use
 30289                                  					; ES override.
 30290                                  
 30291 000051F0 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30292 000051F7 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30293                                  
 30294 000051FE C3                      	RETN
 30295                                  
 30296                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30297                                  ;---------------------------------------------------------------------------
 30298                                  ;
 30299                                  ; Procedure Name : CHARHARD
 30300                                  ;
 30301                                  ;
 30302                                  ; Character device error handler
 30303                                  ; Same function as HARDERR
 30304                                  ;
 30305                                  ;---------------------------------------------------------------------------
 30306                                  
 30307                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30308                                  CHARHARD:
 30309                                  	; 05/05/2019 - Retro DOS v4.0
 30310                                  	; 30/07/2018
 30311                                  	; 08/07/2018 - Retro DOS v3.0
 30312                                  
 30313                                  	; MSDOS 6.0
 30314                                  		   			; M024 - start
 30315 000051FF 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30316                                  	;jne	short @f		; Y: allow fail
 30317 00005205 750B                    	jne	short chard1
 30318                                  
 30319 00005207 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30320                                  
 30321 0000520A 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30322 00005210 7503                    	jnz	short ctrlp		; Y: 
 30323                                  ;@@:
 30324                                  chard1:					; M024 - end
 30325                                  	; MSDOS 6.0 & MSDOS 3.3
 30326                                  
 30327                                  ; Character device error handler
 30328                                  ; Same function as HARDERR
 30329                                  
 30330                                  	;or	ah,38h
 30331 00005212 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30332                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30333 00005215 368826[4B03]            	mov	[SS:ALLOWED],ah
 30334                                  
 30335                                  	; 15/03/2018
 30336 0000521A 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30337 0000521F 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30338 00005224 56                              PUSH    SI
 30339                                  	;and	di,0FFh
 30340 00005225 81E7FF00                        AND     DI,STECODE
 30341 00005229 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30342 0000522B E86400                          CALL    FATALC
 30343 0000522E 5E                              POP     SI
 30344                                  	;return
 30345 0000522F C3                              RETN
 30346                                  
 30347                                  ;---------------------------------------------------------------------------
 30348                                  ;
 30349                                  ; Procedure Name : HardErr
 30350                                  ;
 30351                                  ; Hard disk error handler. Entry conditions:
 30352                                  ;	DS:BX = Original disk transfer address
 30353                                  ;	DX = Original logical sector number
 30354                                  ;	CX = Number of sectors to go (first one gave the error)
 30355                                  ;	AX = Hardware error code
 30356                                  ;	DI = Original sector transfer count	
 30357                                  ;	ES:BP = Base of drive parameters
 30358                                  ;	[READOP] = 0 for read, 1 for write
 30359                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30360                                  ; Output:
 30361                                  ;	[FAILERR] will be set if user responded FAIL
 30362                                  ;
 30363                                  ;--------------------------------------------------------------------------
 30364                                  
 30365                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30366                                  HARDERR:
 30367                                  	; 05/05/2019 - Retro DOS v4.0
 30368                                  	; 30/07/2018
 30369                                  	; 08/07/2018 - Retro DOS v3.0
 30370 00005230 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 30371                                          ;and	di,0FFh
 30372 00005231 81E7FF00                	AND     DI,STECODE              ; And off status bits
 30373                                          ;CMP	DI,WRECODE		; Write Protect Error?
 30374                                  	;cmp	di,0
 30375 00005235 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30376 00005238 750A                            JNZ     short NOSETWRPERR
 30377 0000523A 50                              PUSH    AX
 30378                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30379                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30380                                          ;;MOV	AL,[ES:BP+0]
 30381                                  	; 15/12/2022
 30382 0000523B 268A4600                	mov	al,[ES:BP]
 30383                                          	; 15/03/2018
 30384 0000523F 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 30385 00005243 58                              POP     AX
 30386                                  NOSETWRPERR:
 30387 00005244 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 30388 00005246 01C2                            ADD     DX,AX                   ; First sector number to retry
 30389 00005248 52                              PUSH    DX
 30390                                  	; 08/07/2018
 30391                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30392 00005249 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30393 0000524D 5A                              POP     DX
 30394 0000524E 01C3                            ADD     BX,AX                   ; First address for retry
 30395 00005250 30E4                            XOR     AH,AH                   ; Flag disk section in error
 30396                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 30397 00005252 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30398 00005256 721A                            JB      SHORT ERRINT
 30399 00005258 FEC4                            INC     AH                      ; Flag for FAT
 30400                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30401                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 30402 0000525A 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30403 0000525E 7308                    	JAE	short TESTDIR 		; No
 30404                                  		 ; Err in FAT must force recomp of freespace
 30405                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30406                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30407 00005260 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30408 00005266 EB0A                    	JMP	SHORT ERRINT
 30409                                  TESTDIR:
 30410 00005268 FEC4                            INC     AH
 30411                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 30412 0000526A 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 30413 0000526E 7202                            JB      SHORT ERRINT
 30414 00005270 FEC4                            INC     AH                      ; Must be in data area
 30415                                  ERRINT:
 30416 00005272 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 30417 00005274 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 30418                                  
 30419                                  	; 15/08/2018
 30420                                  					; SS override for allowed and EXITHOLD
 30421 00005279 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30422                                  
 30423                                          ;entry   FATAL
 30424                                  FATAL:
 30425                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30426                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30427                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 30428                                  	; 15/12/2022
 30429 0000527E 268A4600                	MOV	AL,[ES:BP]        
 30430                                  
 30431                                  	;entry   FATAL1
 30432                                  FATAL1:  
 30433                                  	; 15/03/2018      
 30434 00005282 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 30435 00005287 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 30436                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30437                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30438 0000528C 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30439 00005290 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 30440                                  
 30441                                  	; DI has the INT-24-style extended error. We now map the error code 
 30442                                  	; for this into the normalized get extended error set by using the 
 30443                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 30444                                  	; the device returned codes and leave all others beyond the look up 
 30445                                  	; table alone.
 30446                                  
 30447                                  	; 08/07/2018 - Retro DOS v3.0
 30448                                  FATALC:
 30449 00005292 E89701                  	call	SET_I24_EXTENDED_ERROR
 30450                                  	;cmp	di,0Ch
 30451 00005295 83FF0C                  	CMP	DI,error_I24_gen_failure
 30452 00005298 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30453 0000529A BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30454                                  					;  Only come via GetExtendedError
 30455                                  ;** ----------------------------------------------------------------
 30456                                  ;
 30457                                  ; Entry point used by REDIRector on Network I 24 errors.
 30458                                  ;
 30459                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30460                                  ;
 30461                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30462                                  ;     EXITHOLD set for restore of ES:BP.
 30463                                  ; ------------------------------------------------------------------
 30464                                  	;entry	NET_I24_ENTRY
 30465                                  NET_I24_ENTRY:
 30466                                  GOT_RIGHT_CODE:
 30467 0000529D 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30468 000052A3 7404                            JZ	SHORT NoSetFail
 30469 000052A5 B003                    	MOV	AL,3
 30470 000052A7 EB6C                    	JMP	short FailRet
 30471                                  NoSetFail:
 30472 000052A9 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 30473 000052AE 16                              PUSH	SS
 30474 000052AF 07                              POP	ES
 30475                                      
 30476                                  	; Wango!!! We may need to free some user state info... In 
 30477                                  	; particular, we may have locked down a JFN for a user and he may 
 30478                                  	; NEVER return to us. Thus,we need to free it here and then 
 30479                                  	; reallocate it when we come back.
 30480                                  
 30481 000052B0 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30482 000052B6 740C                    	JZ	short _NoFree
 30483 000052B8 1E                      	push	ds
 30484 000052B9 56                      	push	si
 30485 000052BA 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30486 000052BF C604FF                  	MOV	BYTE [SI],0FFH
 30487 000052C2 5E                      	pop	si
 30488 000052C3 1F                      	pop	ds
 30489                                  
 30490                                  _NoFree:
 30491 000052C4 FA                      	CLI
 30492                                  					; Prepare to play with stack
 30493 000052C5 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30494 000052CA 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 30495                                  
 30496                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30497                                  
 30498                                  	;; Extended Open hooks
 30499                                  					; AN000;IFS.I24 error disabled
 30500                                  	;test	byte [ss:EXTOPEN_ON],2
 30501 000052CF 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 30502 000052D5 7404                    	JZ	short i24yes		; AN000;IFS.no
 30503                                  faili24:				; AN000;
 30504 000052D7 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30505 000052D9 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30506                                  i24yes: 				; AN000;
 30507                                  	;; Extended Open hooks
 30508                                  
 30509 000052DB 368E16[8605]                    MOV     SS,[SS:USER_SS]
 30510 000052E0 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 30511                                  
 30512                                  	;;int	24h	
 30513                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 30514                                  					; must preserve ES
 30515                                  	; 05/05/2019
 30516 000052E5 26803E[F211]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 30517 000052EB 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30518 000052ED CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30519                                  					; must preserve ES
 30520 000052EF EB05                    	jmp	short criterr_ret_addr
 30521                                  
 30522                                  do_low_int24:
 30523                                  	; 05/05/2019
 30524                                  	; MSDOS 6.0
 30525 000052F1 2EFF1E[D84F]            	call    far [cs:LowInt24Addr]
 30526                                  criterr_ret_addr:
 30527 000052F6 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 30528 000052FB 268C16[8605]                    MOV     [ES:USER_SS],SS
 30529 00005300 8CC5                            MOV     BP,ES
 30530 00005302 8ED5                            MOV     SS,BP
 30531                                  passi24:
 30532 00005304 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 30533 00005309 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 30534 0000530E 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 30535 00005314 FB                              STI
 30536                                  FailRet:
 30537 00005315 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 30538                                  	
 30539                                  	; 08/07/2018
 30540                                  
 30541                                  	; Triage the user's reply.
 30542                                  
 30543 0000531A 3C01                    	CMP	AL,1
 30544 0000531C 723D                    	JB	short CheckIgnore	; 0 => ignore
 30545 0000531E 7445                    	JZ	short CheckRetry	; 1 => retry
 30546 00005320 3C03                    	CMP	AL,3			; 3 => fail
 30547 00005322 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30548                                  
 30549                                  	; The reply was fail. See if we are allowed to fail.
 30550                                  
 30551                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30552                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30553                                  	;test	byte [ss:ALLOWED],8
 30554 00005324 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30555 0000532A 7443                    	jz	short DoAbort	; No, do abort
 30556                                  DoFail:
 30557 0000532C B003                    	MOV	AL,3		; just in case...
 30558                                  				; AN000;EO. I24 error disabled
 30559                                  	; 05/05/2019
 30560                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30561 0000532E 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30562 00005334 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30563                                  	
 30564 00005336 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30565                                  CleanUp:
 30566 0000533B 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30567 00005341 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30568                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30569                                  	;jnz	short CleanUp2
 30570                                  	;retn
 30571                                  	; 17/12/2022
 30572 00005347 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30573                                  CleanUp2:
 30574 00005349 1E                      	push	ds
 30575 0000534A 56                      	push	si
 30576 0000534B 50                      	push	ax
 30577 0000534C 36A1[AA05]              	MOV	AX,[ss:SFN]
 30578 00005350 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30579 00005355 8804                    	MOV	[SI],AL
 30580 00005357 58                      	pop	ax
 30581 00005358 5E                      	pop	si
 30582 00005359 1F                      	pop	ds
 30583                                  Cleanup_retn:
 30584 0000535A C3                      	retn
 30585                                  
 30586                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30587                                  
 30588                                  CheckIgnore:
 30589                                  	;test	byte [ss:ALLOWED],20h
 30590 0000535B 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30591 00005361 74C9                    	jz	short DoFail			 ; No, do fail
 30592 00005363 EBD6                    	jmp	short CleanUp
 30593                                  
 30594                                  	; The reply was RETRY. See if we are allowed to retry.
 30595                                  
 30596                                  CheckRetry:
 30597                                  	;test	byte [ss:ALLOWED],10h
 30598 00005365 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30599 0000536B 74BF                    	jz	short DoFail			; No, do fail
 30600 0000536D EBCC                    	JMP	short CleanUp
 30601                                  
 30602                                  	; The reply was ABORT.
 30603                                  DoAbort:
 30604 0000536F 16                      	push	ss
 30605 00005370 1F                      	pop	ds
 30606                                  
 30607 00005371 803E[5703]00            	CMP	byte [CONSWAP],0
 30608 00005376 7403                    	JZ	short NOSWAP2
 30609 00005378 E8ADDE                  	call	SWAPBACK
 30610                                  NOSWAP2:
 30611                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30612                                  	; turn this abort into a fail.
 30613                                  
 30614                                  	;test	[fAborting],0FFh
 30615                                  	;jnz	short DoFail
 30616                                  
 30617 0000537B 803E[5903]00            	cmp	byte [fAborting],0
 30618 00005380 75AA                    	JNZ	short DoFail
 30619                                  
 30620                                  	; Set return code
 30621                                  
 30622 00005382 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30623 00005387 30C0                    	XOR	AL,AL
 30624                                  
 30625                                  	; we are truly aborting the process. Go restore information from 
 30626                                  	; the PDB as necessary.
 30627                                  
 30628 00005389 E9850D                  	jmp	exit_inner
 30629                                  
 30630                                  ;** --------------------------------------------------------------------------
 30631                                  ;
 30632                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30633                                  ; different, then an old-style return is performed. If they are the same,
 30634                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30635                                  ; the source of the terminate addresses.
 30636                                  ;
 30637                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30638                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30639                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30640                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30641                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30642                                  ; operation. In essence, we dis-allow the abort response.
 30643                                  ;
 30644                                  ; output:   none.
 30645                                  ; ----------------------------------------------------------------------------
 30646                                  
 30647                                  	;entry	reset_environment
 30648                                  	
 30649                                  reset_environment:
 30650                                  	; 30/07/2018 - Retro DOS v3.0
 30651                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30652                                  
 30653                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30654                                  
 30655 0000538C 1E                      	PUSH	DS			; save PDB of process
 30656                                  
 30657                                  	; There are no critical sections in force. Although we may enter 
 30658                                  	; here with critical sections locked down, they are no longer 
 30659                                  	; relevant. We may safely free all allocated resources.
 30660                                  
 30661 0000538D B482                    	MOV	AH,82h
 30662                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30663                                  	;int	2Ah 	
 30664 0000538F CD2A                    	INT	int_IBM
 30665                                  
 30666                                  					; SS override
 30667 00005391 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30668                                  
 30669                                  					; DOS 4.00 doesn't need it
 30670                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30671                                  					; Allow REDIR to clear some stuff
 30672                                  					; On process exit.
 30673 00005397 B82211                  	mov     ax, 1122h
 30674 0000539A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30675                                  			; SS = DOS CS
 30676                                  	;mov	al,22h	
 30677 0000539C B022                    	MOV	AL,int_terminate
 30678 0000539E E8D9BA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30679                                  
 30680 000053A1 59                      	POP	CX			; get ThisPDB
 30681 000053A2 06                      	push	es
 30682 000053A3 53                      	push	bx			; save return address
 30683                                  
 30684 000053A4 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30685 000053A9 8EDB                    	MOV	DS,BX
 30686 000053AB A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30687                                  
 30688                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30689                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30690                                  	; is not Exit_keep_process
 30691                                  	
 30692 000053AE 39D8                    	CMP	AX,BX
 30693 000053B0 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30694 000053B2 39CB                    	CMP	BX,CX
 30695 000053B4 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30696 000053B6 50                      	PUSH	AX			; save parent
 30697                                  
 30698                                  					; SS override
 30699                                  	;cmp	byte [SS:EXIT_TYPE],3
 30700 000053B7 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30701 000053BD 7406                    	JZ	short reset_to_parent 	; keeping this process
 30702                                  
 30703                                  	; We are truly removing a process. Free all allocation blocks 
 30704                                  	; belonging to this PDB
 30705                                  
 30706                                  	;invoke	arena_free_process
 30707 000053BF E8870D                  	call	arena_free_process
 30708                                  
 30709                                  	; Kill off remainder of this process. Close file handles and signal 
 30710                                  	; to relevant network folks that this process is dead. Remember that 
 30711                                  	; CurrentPDB is STILL the current process!
 30712                                  
 30713                                  	;invoke	DOS_ABORT
 30714 000053C2 E87DDA                  	call	DOS_ABORT
 30715                                  
 30716                                  reset_to_parent:
 30717                                  					; SS override
 30718 000053C5 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30719                                  
 30720                                  reset_return:				; come here for normal return
 30721                                  	;Context DS			; DS is used to refer to DOSDATA  
 30722 000053CA 16                      	push	ss
 30723 000053CB 1F                      	pop	ds	
 30724                                  
 30725 000053CC B0FF                    	MOV	AL,-1
 30726                                  
 30727                                  	; make sure that everything is clean In this case ignore any errors, 
 30728                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30729                                  
 30730                                  	;EnterCrit critDisk
 30731 000053CE E822BF                  	call	ECritDisk
 30732                                  	;invoke	FLUSHBUF
 30733 000053D1 E8A505                  	call	FLUSHBUF
 30734                                  	;LeaveCrit critDisk
 30735 000053D4 E837BF                  	call	LCritDisk
 30736                                  
 30737                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30738                                  
 30739 000053D7 E880F7                  	call	CHECK_VIRT_OPEN
 30740 000053DA FA                      	CLI
 30741 000053DB C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30742 000053E0 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30743 000053E5 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30744 000053EA 8F06[8005]              	POP	WORD [EXITHOLD]
 30745 000053EE 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30746                                  
 30747                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30748                                  
 30749 000053F2 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30750 000053F6 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30751 000053FA 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30752                                  
 30753 000053FE E84AB0                  	call	restore_world
 30754                                  
 30755                                  	; 05/05/2019
 30756 00005401 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30757                                  
 30758                                  	; MSDOS 6.0
 30759 00005402 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30760 00005403 8CD8                    	mov	ax,ds			; and not on stack.
 30761                                  	;getdseg <ds>			; ds -> dosdata
 30762 00005405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30763 0000540A A3[0A0D]                	mov	[TEMPSEG],ax
 30764 0000540D 58                      	pop	ax
 30765                                  					; set up ds to DOSDATA
 30766                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30767 0000540E A3[8405]                	mov	[USER_SP],ax
 30768                                  
 30769 00005411 58                      	POP	AX			; suck off CS:IP of interrupt...
 30770 00005412 58                      	POP	AX
 30771 00005413 58                      	POP	AX
 30772                                  
 30773                                  ; M011 : BEGIN
 30774                                  
 30775                                  	; MSDOS 3.3
 30776                                  ;	MOV	AX,0F202h	; STI
 30777                                  
 30778                                  	; MSDOS 6.0
 30779 00005414 9F                      	LAHF
 30780 00005415 86E0                    	XCHG	AH,AL
 30781 00005417 2402                    	AND	AL,2
 30782 00005419 B4F2                    	MOV	AH,0F2h
 30783                                  
 30784                                  ; M011 : END
 30785                                  
 30786                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30787 0000541B 50                      	PUSH	AX
 30788                                   
 30789                                  	;PUSH	word [CS:EXITHOLD+2]
 30790                                  	;PUSH	word [CS:EXITHOLD]
 30791                                  	
 30792                                  	; MSDOS 6.0
 30793 0000541C FF36[8205]              	PUSH	word [EXITHOLD+2]
 30794 00005420 FF36[8005]              	PUSH	word [EXITHOLD]
 30795                                  
 30796                                  	;MOV	AX,[CS:USER_SP]
 30797                                  
 30798                                  	; MSDOS 6.0
 30799 00005424 A1[8405]                	MOV	AX,[USER_SP]
 30800 00005427 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30801                                  
 30802 0000542B CF                      	IRET			; Long return back to user terminate address
 30803                                  
 30804                                  ;---------------------------------------------------------------------------
 30805                                  ;
 30806                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30807                                  ;
 30808                                  ; This routine handles extended error codes.
 30809                                  ; Input : DI = error code from device
 30810                                  ; Output: All EXTERR fields are set
 30811                                  ;
 30812                                  ;--------------------------------------------------------------------------
 30813                                  
 30814                                  SET_I24_EXTENDED_ERROR:
 30815 0000542C 50                      	PUSH	AX
 30816                                  					; ErrMap24End is in DOSDATA
 30817 0000542D B8[BB0E]                	MOV	AX,ErrMap24End
 30818 00005430 2D[AB0E]                	SUB	AX,ErrMap24
 30819                                  					; Change to dosdata to access 
 30820                                  					; ErrMap24 and EXTERR -SR
 30821                                  	; 05/05/2019 - Retro DOS v4.0
 30822                                  	
 30823                                  	; MSDOS 6.0
 30824 00005433 1E                      	push	ds
 30825                                  	;getdseg <ds>			; ds ->dosdata
 30826 00005434 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30827                                  
 30828                                  	; AX is the index of the first unavailable error. Do not translate 
 30829                                  	; if greater or equal to AX.
 30830                                  
 30831 00005439 39C7                    	CMP	DI,AX
 30832 0000543B 89F8                    	MOV	AX,DI
 30833 0000543D 7306                    	JAE	short NoTrans
 30834                                  
 30835                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30836 0000543F 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30837 00005443 30E4                    	XOR	AH,AH
 30838                                  NoTrans:
 30839                                  	;MOV	[CS:EXTERR],AX
 30840 00005445 A3[2403]                	mov	[EXTERR],AX
 30841 00005448 1F                      	pop	ds
 30842                                  	;assume	ds:nothing
 30843 00005449 58                      	POP	AX
 30844                                  
 30845                                  	; Now Extended error is set correctly. Translate it to get correct 
 30846                                  	; error locus class and recommended action.
 30847                                  
 30848 0000544A 56                      	PUSH	SI
 30849                                  					; ERR_TABLE_24 is in DOSCODE 
 30850 0000544B BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30851 0000544E E829B2                  	call	CAL_LK			; Set other extended error fields
 30852 00005451 5E                      	POP	SI
 30853 00005452 C3                      	retn
 30854                                  
 30855                                  ;============================================================================
 30856                                  ; FAT.ASM, MSDOS 6.0, 1991
 30857                                  ;============================================================================
 30858                                  ; 30/07/2018 - Retro DOS v3.0
 30859                                  ; 20/05/2019 - Retro DOS v4.0
 30860                                  
 30861                                  ;	TITLE	FAT - FAT maintenance routines
 30862                                  ;	NAME	FAT
 30863                                  
 30864                                  ;**	FAT.ASM
 30865                                  ;----------------------------------------------------------------------------
 30866                                  ;	Low level local device routines for performing disk change sequence,
 30867                                  ;	setting cluster validity, and manipulating the FAT
 30868                                  ;
 30869                                  ;	IsEof
 30870                                  ;	UNPACK
 30871                                  ;	PACK
 30872                                  ;	MAPCLUSTER
 30873                                  ;	FATREAD_SFT
 30874                                  ;	FATREAD_CDS
 30875                                  ;	FAT_operation
 30876                                  ;
 30877                                  ;	Revision history:
 30878                                  ;
 30879                                  ;	  AN000  version Jan. 1988
 30880                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30881                                  ;
 30882                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30883                                  ;	       from CL0FATENTRY rather than disk.
 30884                                  
 30885                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30886                                  
 30887                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30888                                  ;----------------------------------------------------------------------------
 30889                                  ;
 30890                                  ; Procedure Name : IsEOF
 30891                                  ;
 30892                                  ; IsEOF - check the fat value in BX for eof.
 30893                                  ;
 30894                                  ;   Inputs:	ES:BP point to DPB
 30895                                  ;		BX has fat value
 30896                                  ;   Outputs:	JAE eof
 30897                                  ;   Registers modified: none
 30898                                  ;
 30899                                  ;---------------------------------------------------------------------------
 30900                                  
 30901                                  IsEOF:
 30902                                  	;cmp	word [es:bp+0Dh],0FF6h
 30903 00005453 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30904 00005459 730B                    	JAE	short EOF16			; yes, check for eof there
 30905                                  
 30906                                  ;J.K. 8/27/86
 30907                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30908                                  ;of any media that has "F0"(Other) as a MediaByte.
 30909                                  ;Hopely, this does not create any side effect for those who may use any value
 30910                                  ;other than "FF8-FFF" as an EOF for their own file.
 30911                                  
 30912 0000545B 81FBF00F                	cmp	bx,0FF0h
 30913 0000545F 7404                    	je	short IsEOF_other
 30914                                  
 30915 00005461 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30916                                  IsEOF_other:
 30917 00005465 C3                      	retn
 30918                                  EOF16:
 30919 00005466 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30920 00005469 C3                      	retn
 30921                                  
 30922                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30923                                  
 30924                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30925                                  ;---------------------------------------------------------------------------
 30926                                  ;
 30927                                  ; Procedur Name : UNPACK
 30928                                  ;
 30929                                  ; Inputs:
 30930                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30931                                  ;	ES:BP = Base of drive parameters
 30932                                  ; Outputs:
 30933                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30934                                  ;	Zero set means DI=0 (free cluster)
 30935                                  ;	Carry set means error (currently user FAILed to I 24)
 30936                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30937                                  ;
 30938                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30939                                  ;
 30940                                  ;----------------------------------------------------------------------------
 30941                                  	
 30942                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30943                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30944                                  
 30945                                  	; 20/05/2019 - Retro DOS v4.0
 30946                                  UNPACK:
 30947                                  	; MSDOS 6.0			; M014 - Start
 30948 0000546A 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30949 0000546C 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30950 0000546E 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30951 00005472 09FF                    	or	di,di 			; return z if di=0
 30952 00005474 C3                      	retn				; done
 30953                                  up_cont:				; M014 - End
 30954                                  	; MSDOS 3.3 & MSDOS 6.0
 30955                                  	;cmp	bx,[es:bp+0Dh]
 30956 00005475 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30957 00005479 7726                    	JA	short HURTFAT
 30958 0000547B E8D600                  	CALL	MAPCLUSTER
 30959 0000547E 721E                    	jc	short _DoContext
 30960 00005480 8B3D                    	MOV	DI,[DI]
 30961 00005482 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30962 00005484 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30963 00005488 81FEF60F                	CMP	SI,4096-10
 30964 0000548C 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30965 0000548E 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30966 00005490 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30967                                  High12:
 30968 00005492 D1EF                    	SHR	DI,1
 30969 00005494 D1EF                    	SHR	DI,1
 30970 00005496 D1EF                    	SHR	DI,1
 30971 00005498 D1EF                    	SHR	DI,1
 30972                                  Unpack12:
 30973 0000549A 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30974                                  _DoContext:
 30975 0000549E 16                      	PUSH	SS
 30976 0000549F 1F                      	POP	DS
 30977 000054A0 C3                      	retn
 30978                                  HURTFAT:
 30979                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30980                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30981 000054A1 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30982 000054A7 50                      	PUSH	AX
 30983 000054A8 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30984                                  
 30985                                  ;hkn; SS override
 30986 000054AA 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30987                                  ;
 30988                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30989                                  ;
 30990 000054B0 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30991 000054B3 E8C8FD                  	call	FATAL
 30992 000054B6 3C03                    	CMP	AL,3
 30993 000054B8 F8                      	CLC
 30994 000054B9 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30995 000054BB F9                      	STC				; User said FAIL
 30996                                  OKU_RET:
 30997 000054BC 58                      	POP	AX
 30998                                  hurtfat_retn:
 30999 000054BD C3                      	retn
 31000                                  
 31001                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31002                                  
 31003                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31004                                  ;----------------------------------------------------------------------------
 31005                                  ;
 31006                                  ; Procedure Name : PACK
 31007                                  ;
 31008                                  ; Inputs:
 31009                                  ;	BX = Cluster number
 31010                                  ;	DX = Data
 31011                                  ;	ES:BP = Pointer to drive DPB
 31012                                  ; Outputs:
 31013                                  ;	The data is stored in the FAT at the given cluster.
 31014                                  ;	SI,DX,DI all destroyed
 31015                                  ;	Carry set means error (currently user FAILed to I 24)
 31016                                  ;	No other registers affected
 31017                                  ;
 31018                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31019                                  ;
 31020                                  ;---------------------------------------------------------------------------
 31021                                  
 31022                                  	; 02/01/2024
 31023                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31024                                  	; 20/05/2019 - Retro DOS v4.0
 31025                                  PACK:
 31026                                  	; MSDOS 6.0			; M014 - start
 31027 000054BE 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31028 000054C0 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31029 000054C2 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31030 000054C6 C3                      	retn				; done
 31031                                  p_cont:					; M014 - end
 31032                                  	; MSDOS 3.3 & MSDOS 6.0
 31033 000054C7 E88A00                  	CALL	MAPCLUSTER
 31034 000054CA 72D2                    	JC	short _DoContext
 31035 000054CC 8B35                    	MOV	SI,[DI]
 31036 000054CE 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31037 000054D0 51                      	PUSH	CX			; move data to upper 12 bits
 31038 000054D1 B104                    	MOV	CL,4
 31039 000054D3 D3E2                    	SHL	DX,CL
 31040 000054D5 59                      	POP	CX
 31041 000054D6 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31042 000054D9 EB14                    	JMP	SHORT PACKIN
 31043                                  ALIGNED:
 31044                                  	;cmp	word [es:bp+0Dh],0FF6h
 31045 000054DB 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31046 000054E1 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31047 000054E3 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31048 000054E7 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31049 000054EB EB02                    	JMP	SHORT PACKIN		; MZ go store
 31050                                  Pack16:
 31051 000054ED 31F6                    	XOR	SI,SI			; MZ no original data
 31052                                  PACKIN:
 31053 000054EF 09D6                    	OR	SI,DX
 31054 000054F1 8935                    	MOV	[DI],SI
 31055                                  
 31056                                  ;hkn; SS override
 31057 000054F3 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31058                                  	; MSDOS 6.0
 31059 000054F8 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31060                                  					;LB. if already dirty		  ;AN000;
 31061 000054FC 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31062                                  	; 10/06/2019
 31063 000054FE E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31064                                  	
 31065                                  	;or	byte [si+5],40h
 31066 00005501 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31067                                  yesdirty11:				;LB.				;AN000;
 31068                                  ;hkn; SS override
 31069 00005505 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31070                                  ;hkn; SS is DOSDATA
 31071 0000550B 16                      	push	ss
 31072 0000550C 1F                      	pop	ds
 31073 0000550D 74AE                    	jz	short hurtfat_retn	; Carry clear
 31074 0000550F 50                      	PUSH	AX
 31075 00005510 53                      	PUSH	BX
 31076 00005511 51                      	PUSH	CX
 31077 00005512 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31078 00005515 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31079                                  	;;add	si,16 ; MSDOS 3.3
 31080                                  	;add	si,20 ; MSDOS 6.0
 31081 00005519 83C614                  	ADD	SI,BUFINSIZ
 31082 0000551C 8824                    	MOV	[SI],AH
 31083                                  ;hkn; SS is DOSDATA
 31084                                  	;Context DS
 31085 0000551E 16                      	push	ss
 31086 0000551F 1F                      	pop	ds
 31087                                  	
 31088 00005520 50                      	PUSH	AX
 31089                                  	
 31090                                  	; MSDOS 6.0
 31091 00005521 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31092 00005525 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31093                                  
 31094                                  	; MSDOS 3.3 & MSDOS 6.0
 31095 00005529 8B16[9005]              	MOV	DX,[CLUSSEC]
 31096                                  
 31097                                  	;MOV	SI,1	  ; *
 31098                                  	;XOR	AL,AL     ; *
 31099                                  	;call	GETBUFFRB ; *
 31100                                  	; 22/09/2023
 31101 0000552D E83E03                  	call	GETBUFFRA ; *
 31102                                  
 31103 00005530 58                      	POP	AX
 31104 00005531 721B                    	JC	short POPP_RET
 31105 00005533 C53E[E205]              	LDS	DI,[CURBUF]
 31106                                  	
 31107                                  	; MSDOS 6.0
 31108 00005537 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31109                                  					;LB. if already dirty		  ;AN000;
 31110 0000553B 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31111 0000553D E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31112                                  	
 31113                                  	;or	byte [di+5],40h
 31114 00005540 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31115                                  yesdirty12:
 31116                                  	;;add	di,16
 31117                                  	;add	di,20 ; MSDOS 6.0
 31118                                  	; 02/01/2024
 31119                                  	;ADD	DI,BUFINSIZ
 31120                                  	;DEC	DI
 31121 00005544 83C713                  	add	di,BUFINSIZ-1 ; 19
 31122                                  
 31123                                  	;add	di,[es:bp+2]
 31124 00005547 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31125 0000554B 8805                    	MOV	[DI],AL
 31126 0000554D F8                      	CLC
 31127                                  POPP_RET:
 31128 0000554E 16                      	PUSH	SS
 31129 0000554F 1F                      	POP	DS
 31130 00005550 59                      	POP	CX
 31131 00005551 5B                      	POP	BX
 31132 00005552 58                      	POP	AX
 31133 00005553 C3                      	retn
 31134                                  
 31135                                  ; 31/07/2018 - Retro DOS v3.0
 31136                                  
 31137                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31138                                  ;---------------------------------------------------------------------------
 31139                                  ;
 31140                                  ; Procedure Name : MAPCLUSTER
 31141                                  ;
 31142                                  ; Inputs:
 31143                                  ;	ES:BP Points to DPB
 31144                                  ;	BX Is cluster number
 31145                                  ; Function:
 31146                                  ;	Get a pointer to the cluster
 31147                                  ; Outputs:
 31148                                  ;	DS:DI Points to contents of FAT for given cluster
 31149                                  ;	DS:SI Points to start of buffer
 31150                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31151                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31152                                  ;	Carry set if failed.
 31153                                  ; SI is destroyed.
 31154                                  ;
 31155                                  ;---------------------------------------------------------------------------
 31156                                  
 31157                                  	; 20/05/2019 - Retro DOS v4.0
 31158                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31159                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31160                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31161                                  
 31162                                  MAPCLUSTER:
 31163                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31164 00005554 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31165                                  	;SAVE	<AX,BX,CX,DX>
 31166 00005559 50                      	push	ax
 31167 0000555A 53                      	push	bx
 31168 0000555B 51                      	push	cx
 31169 0000555C 52                      	push	dx
 31170 0000555D 89D8                    	MOV	AX,BX			; AX = BX
 31171 0000555F 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31172 00005565 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31173 00005567 D1E8                    	SHR	AX,1			; AX = BX/2
 31174                                  Map16:	
 31175                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31176 00005569 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31177                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31178 0000556B 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31179 0000556D 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31180 0000556F 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31181                                  
 31182                                  ;IF FastDiv
 31183                                  ;
 31184                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31185                                  ; case and apply a really fast algorithm to get the desired results
 31186                                  ;
 31187                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31188                                  ; Fast method takes 39+20*4=119
 31189                                  ;
 31190                                  ; This saves a bunch.
 31191                                  
 31192 00005573 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31193 00005577 7510                    	jne	short _DoDiv		; 4  for no jump
 31194 00005579 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31195 0000557B 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31196 0000557F 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31197                                  	; MDOS 3.3
 31198                                  	;shr	al,1	
 31199                                  	; MDOS 6.0
 31200 00005581 D1EF                    	shr	di,1			; 2
 31201 00005583 D0D8                    	rcr	al,1			; 2
 31202                                  	; MDOS 3.3 (& MSDOS 6.0)
 31203 00005585 30E4                    	xor	ah,ah			; 3
 31204 00005587 EB04                    	jmp	short DivDone		; 16
 31205                                  _DoDiv:
 31206                                  ;ENDIF
 31207                                  	; MSDOS 3.3
 31208                                  	;xor	dx,dx
 31209                                  	; MSDOS 6.0
 31210 00005589 89FA                    	mov	dx,di			; 2
 31211                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31212 0000558B F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31213                                  ;IF FastDiv
 31214                                  DivDone:
 31215                                  ;ENDIF
 31216                                  	;add	ax,[es:bp+6]
 31217 0000558D 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31218 00005591 49                      	DEC	CX			; CX is sector size - 1
 31219                                  	;SAVE	<AX,DX,CX>
 31220 00005592 50                      	push	ax
 31221 00005593 52                      	push	dx
 31222 00005594 51                      	push	cx
 31223 00005595 89C2                    	MOV	DX,AX
 31224                                  
 31225                                  	; MSDOS 6.0
 31226                                  	; 22/09/2023
 31227                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31228                                  	;
 31229                                  	; MDOS 3.3 (& MSDOS 6.0)
 31230                                  	;XOR	AL,AL	   ; *
 31231                                  	;MOV	SI,1	   ; *
 31232                                  	;;invoke GETBUFFRB ; *
 31233                                  	;call	GETBUFFRB  ; *
 31234                                  	; 22/09/2023
 31235 00005597 E8CE02                  	call	GETBUFFRC  ; *!
 31236                                  
 31237                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31238 0000559A 59                      	pop	cx
 31239 0000559B 58                      	pop	ax
 31240 0000559C 5A                      	pop	dx
 31241 0000559D 724C                    	JC	short MAP_POP
 31242                                  
 31243 0000559F C536[E205]              	LDS	SI,[CURBUF]
 31244                                  	;;lea	di,[si+16]
 31245                                  	;lea	di,[si+20] ; MSDOS 6.0
 31246 000055A3 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31247 000055A6 01C7                    	ADD	DI,AX
 31248 000055A8 39C8                    	CMP	AX,CX
 31249 000055AA 752C                    	JNZ	short MAPRET
 31250 000055AC 8A05                    	MOV	AL,[DI]
 31251                                  	;Context DS		 	;hkn; SS is DOSDATA
 31252 000055AE 16                      	push	ss
 31253 000055AF 1F                      	pop	ds	
 31254 000055B0 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31255 000055B4 A2[8E05]                	MOV	[CLUSSAVE],AL
 31256 000055B7 8916[9005]              	MOV	[CLUSSEC],DX
 31257                                  	; MSDOS 6.0
 31258 000055BB C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31259 000055C1 42                      	INC	DX
 31260                                  
 31261                                  	; 22/09/2023
 31262                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31263                                  	;
 31264                                  	; MDOS 3.3 (& MSDOS 6.0)
 31265                                  	;XOR	AL,AL	   ; *
 31266                                  	;MOV	SI,1	   ; *
 31267                                  	;;invoke GETBUFFRB ; *
 31268                                  	;call	GETBUFFRB  ; *
 31269                                  	; 22/09/2023
 31270 000055C2 E8A302                  	call	GETBUFFRC  ; *!
 31271 000055C5 7224                    	JC	short MAP_POP
 31272                                  
 31273 000055C7 C536[E205]              	LDS	SI,[CURBUF]
 31274 000055CB 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31275 000055CE 8A05                    	MOV	AL,[DI]
 31276                                  	;Context DS			;hkn; SS is DOSDATA
 31277 000055D0 16                      	push	ss
 31278 000055D1 1F                      	pop	ds
 31279 000055D2 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31280                                  
 31281                                  ;hkn; CLUSSAVE is in DOSDATA
 31282 000055D5 BF[8E05]                	MOV	DI,CLUSSAVE
 31283                                  MAPRET:
 31284                                  	;RESTORE <DX,CX,BX>
 31285 000055D8 5A                      	pop	dx
 31286 000055D9 59                      	pop	cx
 31287 000055DA 5B                      	pop	bx
 31288 000055DB 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31289 000055DD 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31290 000055E3 7302                    	JAE	short MapSet		; MZ no, set flags
 31291 000055E5 89D8                    	MOV	AX,BX
 31292                                  MapSet:
 31293 000055E7 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31294                                  	;RESTORE <AX>
 31295 000055E9 58                      	pop	ax
 31296 000055EA C3                      	retn
 31297                                  
 31298                                  MAP_POP:
 31299                                  	;RESTORE <DX,CX,BX,AX>
 31300 000055EB 5A                      	pop	dx
 31301 000055EC 59                      	pop	cx
 31302 000055ED 5B                      	pop	bx
 31303 000055EE 58                      	pop	ax
 31304                                  fatread_sft_retn: ; 17/12/2022
 31305 000055EF C3                      	retn
 31306                                  
 31307                                  ; 20/05/2019 - Retro DOS v4.0
 31308                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31309                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31310                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31311                                  
 31312                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31313                                  ;----------------------------------------------------------------------------
 31314                                  ;
 31315                                  ; Procedure Name : FATREAD_SFT
 31316                                  ;
 31317                                  ; Inputs:
 31318                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31319                                  ;		giving a NET SFT will produce system crashing results).
 31320                                  ;	DS DOSDATA
 31321                                  ; Function:
 31322                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31323                                  ;	if disk changed.
 31324                                  ;	In other respects, same as FATREAD_CDS.
 31325                                  ;	(note ES:DI destroyed!)
 31326                                  ; Outputs:
 31327                                  ;	Carry set if error (currently user FAILed to I 24)
 31328                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31329                                  ;	as far as invalidating curdir_ID is concerned.
 31330                                  ;	Since getting a true disk changed on this call is a screw up
 31331                                  ;	anyway, that's the way it goes.
 31332                                  ;
 31333                                  ;---------------------------------------------------------------------------
 31334                                  
 31335                                  FATREAD_SFT:
 31336 000055F0 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31337                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31338                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31339                                  	; 15/12/2022
 31340 000055F4 268A4600                	mov	AL,[ES:BP]
 31341 000055F8 A2[7605]                	MOV	[THISDRV],AL
 31342 000055FB E830B0                  	call	GOTDPB			;Set THISDPB
 31343                                  	;CALL	FAT_GOT_DPB
 31344                                  	; 17/12/2022
 31345 000055FE EB78                    	jmp	FAT_GOT_DPB
 31346                                  ;fatread_sft_retn:
 31347                                  	;retn
 31348                                  
 31349                                  ;----------------------------------------------------------------------------
 31350                                  ;
 31351                                  ; Procedure Name : FATREAD_CDS
 31352                                  ;
 31353                                  ; Inputs:
 31354                                  ;	DS:DOSDATA
 31355                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31356                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31357                                  ; Function:
 31358                                  ;	If disk may have been changed, media is determined and buffers are
 31359                                  ;	flagged invalid. If not, no action is taken.
 31360                                  ; Outputs:
 31361                                  ;	ES:BP = Drive parameter block
 31362                                  ;	THISDPB = ES:BP
 31363                                  ;	THISDRV set
 31364                                  ;	Carry set if error (currently user FAILed to I 24)
 31365                                  ; DS preserved , all other registers destroyed
 31366                                  ;
 31367                                  ;---------------------------------------------------------------------------
 31368                                  
 31369                                  	; 20/05/2019 - Retro DOS v4.0
 31370                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31371                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31372                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31373                                  
 31374                                  FATREAD_CDS:
 31375 00005600 06                      	PUSH	ES
 31376 00005601 57                      	PUSH	DI
 31377                                  	;les	bp,[es:di+45h]
 31378 00005602 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31379                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31380                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31381                                  	; 15/12/2022
 31382 00005606 268A4600                	mov	AL,[ES:BP]
 31383 0000560A A2[7605]                	MOV	[THISDRV],AL
 31384 0000560D E81EB0                  	call	GOTDPB			;Set THISDPB
 31385 00005610 E86500                  	CALL	FAT_GOT_DPB
 31386 00005613 5F                      	POP	DI			;Get back CDS pointer
 31387 00005614 07                      	POP	ES
 31388 00005615 72D8                    	jc	short fatread_sft_retn
 31389 00005617 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31390                                  
 31391                                  ;	Media changed. We now need to find all CDS structures which use this
 31392                                  ;	DPB and invalidate their ID pointers.
 31393                                  
 31394                                  MED_CHANGE:
 31395 00005619 31C0                    	XOR	AX,AX
 31396 0000561B 48                      	DEC	AX			; AX = -1
 31397 0000561C 1E                      	PUSH	DS
 31398 0000561D 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31399 00005621 30ED                    	XOR	CH,CH			; CX is number of structures
 31400                                  	;lds	si,[es:di+45h]
 31401 00005623 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31402                                  
 31403                                  ;hkn; SS override
 31404                                  
 31405                                  ;	Find all CDSs with this DevPtr
 31406                                  ;
 31407                                  ;	(ax) = -1
 31408                                  ;	(ds:si) = DevPtr
 31409                                  
 31410 00005627 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31411                                  frcd20: 
 31412                                  	;;test	word [es:di+43h],8000h
 31413                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31414 0000562C 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31415 00005631 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31416                                  
 31417                                  	; MSDOS 3.3
 31418                                  	;push	es
 31419                                  	;push	di
 31420                                  	;les	di,[es:di+45h]
 31421                                  	;;les	di,[ES:DI+curdir.devptr]
 31422                                  	;call	POINTCOMP
 31423                                  	;pop	di
 31424                                  	;pop	es
 31425                                  	;jnz	short frcd25
 31426                                  
 31427                                  	; MSDOS 6.0
 31428 00005633 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31429 00005637 7512                    	jne	short frcd25		; no match
 31430 00005639 8CDB                    	mov	bx,ds
 31431 0000563B 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31432 0000563F 750A                    	jne	short frcd25		; CDS not for this drive
 31433                                  
 31434                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31435                                  	;test	[es:di+49h],ax
 31436 00005641 26854549                	test	[ES:DI+curdir.ID],AX
 31437 00005645 7404                    	JZ	short frcd25		; If root (0), leave root
 31438                                  	;mov	[es:di+49h],ax
 31439 00005647 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31440                                  frcd25:	
 31441                                  	;;add	di,81  ; MSDOS 3.3
 31442                                  	;add	di,88  ; MSDOS 6.0	 
 31443 0000564B 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31444 0000564E E2DC                    	LOOP	frcd20
 31445 00005650 1F                      	POP	DS
 31446                                  NO_CHANGE:
 31447 00005651 C42E[8A05]              	LES	BP,[THISDPB]
 31448 00005655 F8                      	CLC
 31449 00005656 C3                      	retn
 31450                                  
 31451                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31452                                  ;----------------------------------------------------------------------------
 31453                                  ;
 31454                                  ; Procedure Name : FAT_operation
 31455                                  ;
 31456                                  ;----------------------------------------------------------------------------
 31457                                  
 31458                                  	; 03/01/2024
 31459                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31460                                  
 31461                                  FAT_operation:
 31462                                  	; 31/07/2018 - Retro DOS v3.0
 31463                                  FATERR:
 31464                                  	;mov	word [es:bp+1Eh],-1
 31465                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31466 00005657 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31467                                  					; Err in FAT must force recomp of freespace
 31468                                  	;and	di,0FFh
 31469 0000565D 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31470                                  	;mov	byte [ALLOWED],18h
 31471 00005661 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31472                                  	;mov	ah,1Ah
 31473 00005666 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31474 00005668 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31475 0000566B E814FC                  	call	FATAL1
 31476 0000566E C42E[8A05]              	LES	BP,[THISDPB]
 31477 00005672 3C03                    	CMP	AL,3
 31478 00005674 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31479 00005676 F9                      	STC				; User said FAIL
 31480 00005677 C3                      	retn
 31481                                  
 31482                                  FAT_GOT_DPB:
 31483                                  	;Context DS			;hkn; SS is DOSDATA
 31484 00005678 16                      	push	ss			
 31485 00005679 1F                      	pop	ds
 31486                                  	;mov	al,0Fh
 31487 0000567A B00F                    	MOV	AL,DMEDHL
 31488                                  	;mov	ah,[es:bp+1]
 31489 0000567C 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31490 00005680 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31491 00005683 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31492 00005688 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31493                                  	;;mov	al,[es:bp+16h]
 31494                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31495 0000568E 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31496 00005692 A2[6703]                	MOV	[CALLMED],AL
 31497 00005695 06                      	PUSH	ES
 31498 00005696 1E                      	PUSH	DS
 31499                                  
 31500                                  ;hkn; DEVCALL is in DOSDATA
 31501 00005697 BB[5A03]                	MOV	BX,DEVCALL
 31502                                  	;;lds	si,[es:bp+12h]
 31503                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31504 0000569A 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31505 0000569E 07                      	POP	ES			; ES:BX Points to call header
 31506 0000569F E8EAEE                  	call	DEVIOCALL2
 31507                                  	;Context DS		 	;hkn; SS is DOSDATA
 31508 000056A2 16                      	push	ss
 31509 000056A3 1F                      	pop	ds
 31510 000056A4 07                      	POP	ES			; Restore ES:BP
 31511 000056A5 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31512                                  	;test	di,8000h
 31513                                  	;jnz	short FATERR
 31514 000056A9 09FF                    	or	di,di
 31515 000056AB 78AA                    	js	short FATERR		; have error
 31516 000056AD 30E4                    	XOR	AH,AH
 31517                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31518                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31519 000056AF 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31520 000056B3 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31521                                  ; See if we had changed volume id by creating one on the diskette
 31522 000056B6 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31523 000056BA 7508                    	jnz	short CHECK_BYT
 31524 000056BC C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31525 000056C1 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31526                                  					; new volume label.
 31527                                  CHECK_BYT:
 31528 000056C4 0A26[6803]              	OR	AH,[CALLRBYT]
 31529                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31530                                  	;JMP	short NEWDSK
 31531                                  	; 17/12/2022
 31532 000056C8 7863                    	js	short NEWDSK
 31533                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31534                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31535                                  	;JMP	short NEWDSK
 31536                                  
 31537                                  CHECK_ZR:
 31538 000056CA 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31539                                  	; 24/09/2023
 31540                                  	; cf=0 (after 'or' instruction)
 31541                                  	;CLC
 31542 000056CC C3                      	retn				; If Media not changed (NZ)
 31543                                  
 31544                                  DISK_CHNG_ERR:
 31545 000056CD 06                      	PUSH	ES
 31546 000056CE 55                      	PUSH	BP
 31547                                  	;;les	bp,[es:bp+12h]
 31548                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31549 000056CF 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31550                                  	;;test	word [es:bp+4],800h
 31551                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31552 000056D3 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31553 000056D8 5D                      	POP	BP
 31554 000056D9 07                      	POP	ES
 31555 000056DA 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31556 000056DC 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31557 000056DD 57                      	PUSH	DI
 31558 000056DE 16                      	push	ss			;hkn; SS is DOSDATA
 31559 000056DF 1F                      	pop	ds
 31560                                  	;mov	byte [ALLOWED],18h
 31561 000056E0 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31562 000056E5 06                      	PUSH	ES
 31563 000056E6 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31564 000056EA 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31565 000056EE 07                      	POP	ES
 31566 000056EF 893E[2803]              	MOV	[EXTERRPT],DI
 31567                                  	;mov	ax,0Fh
 31568 000056F3 B80F00                  	MOV	AX,error_I24_wrong_disk
 31569 000056F6 C606[7505]01            	MOV	byte [READOP],1		; Write
 31570                                  	;invoke	HARDERR
 31571 000056FB E832FB                  	call	HARDERR
 31572 000056FE 5F                      	POP	DI			; Get back buffer for ignore
 31573 000056FF 1F                      	POP	DS
 31574 00005700 3C03                    	CMP	AL,3
 31575                                  FAIL_OPJ2:
 31576 00005702 741C                    	JZ	short FAIL_OP
 31577 00005704 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31578                                  
 31579                                  CHKBUFFDIRT:
 31580                                  	; 20/05/2019 - Retro DOS v4.0
 31581                                  
 31582                                  	; MSDOS 3.3
 31583                                  	;lds	di,[BUFFHEAD]
 31584                                  
 31585                                  	; MSDOS 6.0
 31586 00005707 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31587 0000570D 741E                    	je	short NEWDSK			; no, skip the check
 31588 0000570F E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31589                                  nbuffer:
 31590                                  	;cmp	al,[di+4]
 31591 00005712 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31592 00005715 750D                    	jne	short lfnxt			; no, go for next buffer
 31593                                  	;test   byte [di+5],40h
 31594 00005717 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31595 0000571B 7407                    	jz	short lfnxt			; no, go for next buffer
 31596                                  	;Context DS
 31597 0000571D 16                      	push	ss
 31598 0000571E 1F                      	pop	ds
 31599                                  	; 24/09/2023
 31600                                  	; cf=0 (after 'test' instruction)
 31601                                  	;clc
 31602 0000571F C3                      	retn
 31603                                  
 31604                                  FAIL_OP:					; This label & code is here
 31605                                  	;Context DS				;  for reachability
 31606 00005720 16                      	push	ss
 31607 00005721 1F                      	pop	ds
 31608 00005722 F9                      	STC
 31609 00005723 C3                      	retn
 31610                                  
 31611                                  lfnxt:
 31612                                  	; 15/08/2018 - Retro DOS v3.0
 31613                                  	; MSDOS 3.3
 31614                                  	;lds	di,[di]
 31615                                  
 31616                                  	; 20/05/2019 - Retro DOS v4.0
 31617 00005724 8B3D                    	mov	di,[di]
 31618                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31619                                  	
 31620                                  	; MSDOS 3.3
 31621                                  	;cmp	di,-1
 31622                                  	;jne	short nbuffer
 31623                                  	
 31624                                  	; MSDOS 6.0
 31625 00005726 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31626 0000572B 75E5                    	jne	short nbuffer			; no, check this guy also
 31627                                  
 31628                                  ; If no dirty buffers, assume Media changed
 31629                                  NEWDSK:
 31630                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31631                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31632 0000572D 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31633                                  						;  recompute
 31634                                  	; MSDOS 3.3
 31635                                  	;call	SETVISIT
 31636                                  	; MSDOS 6.0
 31637 00005733 E8CD00                  	call	 GETCURHEAD
 31638                                  nxbuffer:
 31639                                  	; MSDOS 3.3
 31640                                  	;or 	byte [di+5],20h
 31641                                  	; MSDOS 3.3 & MSDOS 6.0
 31642                                  	;cmp	[di+4],al
 31643 00005736 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31644 00005739 7510                    	jne	short lfnxt2
 31645                                  	;test	byte [di+5],40h
 31646 0000573B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31647 0000573F 758C                    	jnz	short DISK_CHNG_ERR
 31648                                  	;mov	word [di+4],20FFh
 31649 00005741 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31650 00005746 E8CC00                  	call	SCANPLACE
 31651                                  	; MSDOS 6.0
 31652 00005749 EB02                    	jmp	short skpbuff
 31653                                  lfnxt2:
 31654 0000574B 8B3D                    	mov	di,[di]
 31655                                  	;mov	di,[di+BUFFINFO.buf_next]
 31656                                  skpbuff:
 31657                                  	; MSDOS 6.0
 31658 0000574D 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31659 00005752 75E2                    	jne	short nxbuffer
 31660                                  
 31661 00005754 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31662 0000575A 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31663 0000575C 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31664 00005761 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31665 00005763 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31666                                  ;lfnxt2:
 31667                                  	; MSDOS 3.3
 31668                                  	;call	SKIPVISIT
 31669                                  	;jnz	short nxbuffer
 31670                                  GOGETBPB:
 31671                                  	; MSDOS 3.3 & MSDOS 6.0
 31672                                  	;;lds	di,[es:bp+12h]
 31673                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31674 00005769 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31675                                  	; 20/05/2019
 31676                                  	;test	word [di+4],2000h
 31677                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31678 0000576D F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31679 00005771 7510                    	JNZ	short GETFREEBUF
 31680                                  	;context DS	    		;hkn; SS is DOSDATA
 31681 00005773 16                      	push	ss
 31682 00005774 1F                      	pop	ds
 31683 00005775 BB0200                  	MOV	BX,2
 31684 00005778 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31685                                  FAIL_OPJ:
 31686 0000577B 72A3                    	JC	short FAIL_OP
 31687 0000577D C53E[E205]              	LDS	DI,[CURBUF]
 31688 00005781 EB13                    	JMP	SHORT GOTGETBUF
 31689                                  
 31690                                  GETFREEBUF:
 31691 00005783 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31692 00005784 55                      	PUSH	BP
 31693                                  	; MSDOS 3.3
 31694                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31695                                  	; MSDOS 6.0
 31696 00005785 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31697                                  ;hkn; SS override
 31698 00005787 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31699 0000578C E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31700                                  	; MSDOS 3.3 & MSDOS 6.0
 31701 0000578F E84F02                  	call	BUFWRITE
 31702 00005792 5D                      	POP	BP
 31703 00005793 07                      	POP	ES
 31704                                  	;JC	short FAIL_OPJ
 31705 00005794 728A                    	jc	short FAIL_OP
 31706                                  GOTGETBUF:
 31707                                  	;;add	di,16
 31708                                  	;add	di,20 ; MSDOS 6.0
 31709 00005796 83C714                  	ADD	DI,BUFINSIZ
 31710                                  
 31711                                  ;hkn; SS override
 31712 00005799 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31713                                  	;Context DS			;hkn; SS is DOSDATA
 31714 0000579E 16                      	push	ss
 31715 0000579F 1F                      	pop	ds
 31716 000057A0 893E[6803]              	MOV	[CALLXAD],DI
 31717                                  	;mov	al,16h
 31718 000057A4 B016                    	MOV	AL,DBPBHL
 31719                                  	;mov	ah,[es:bp+1]
 31720 000057A6 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31721 000057AA A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31722 000057AD C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31723 000057B2 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31724                                  	;;mov	al,[es:bp+16h]
 31725                                  	;mov	al,[es:bp+17h]
 31726 000057B8 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31727 000057BC A2[6703]                	MOV	[CALLMED],AL
 31728 000057BF 06                      	PUSH	ES ; **
 31729 000057C0 1E                      	PUSH	DS ; *
 31730                                  	;;
 31731                                  ; 03/01/2023
 31732                                  %if 0
 31733                                  	;;push	word [es:bp+14h]
 31734                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31735                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31736                                  	;;push	word [es:bp+12h]
 31737                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31738                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31739                                  
 31740                                  ;hkn; DEVCALL is in DOSDATA
 31741                                  	MOV	BX,DEVCALL
 31742                                  	POP	SI
 31743                                  	POP	DS			; DS:SI Points to device header
 31744                                  %endif
 31745                                  	; 03/01/2024
 31746 000057C1 BB[5A03]                	mov	bx,DEVCALL
 31747                                  	;lds	si,[es:bp+13h]
 31748 000057C4 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31749                                  					; DS:SI Points to device header
 31750                                  	;;
 31751 000057C8 07                      	POP	ES ; *			; ES:BX Points to call header
 31752                                  	;invoke	DEVIOCALL2
 31753 000057C9 E8C0ED                  	call	DEVIOCALL2
 31754 000057CC 07                      	POP	ES ; **			; Restore ES:BP
 31755                                  	;Context DS
 31756 000057CD 16                      	push	ss		 	;hkn; SS is DOSDATA
 31757 000057CE 1F                      	pop	ds
 31758 000057CF 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31759                                  	; MSDOS 3.3
 31760                                  	;test	di,8000h
 31761                                  	;jnz	short FATERRJ
 31762                                  	; MSDOS 6.0
 31763 000057D3 09FF                    	or	di,di
 31764 000057D5 7829                    	js	short FATERRJ 		; have error
 31765                                  	;;mov	al,[es:bp+16h]
 31766                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31767 000057D7 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31768 000057DB C536[6C03]              	LDS	SI,[CALLBPB]
 31769                                  	;;mov	word [es:bp+1Ch],0
 31770                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31771 000057DF 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31772                                  	;invoke	$SETDPB
 31773 000057E5 E8CEB7                  	call	_$SETDPB
 31774                                  
 31775                                  ;hkn; SS override
 31776 000057E8 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31777                                  	;mov	al,[es:bp+8]
 31778 000057ED 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31779                                  
 31780                                  	; MSDOS 3.3
 31781                                  	;;mov	ah,[es:bp+0Fh]
 31782                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31783                                  	;;mov	[DI-8],ax
 31784                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31785                                  
 31786                                  	; MSDOS 6.0
 31787                                  	;mov	[di-0Ah],al
 31788 000057F1 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31789                                  						;>32mb		  ;AN000;
 31790                                  	;mov	ax,[es:bp+0Fh]
 31791 000057F4 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31792                                  	;mov	[di-9h],ax			  ;AC000;
 31793 000057F8 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31794                                  					;>32mb Correct buffer info ;AC000;
 31795                                  	;Context DS			;hkn; SS is DOSDATA
 31796 000057FB 16                      	push	ss
 31797 000057FC 1F                      	pop	ds
 31798 000057FD 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31799 000057FF C3                      	retn
 31800                                  
 31801                                  FATERRJ: 
 31802 00005800 E954FE                  	JMP	FATERR
 31803                                  
 31804                                  ;============================================================================
 31805                                  ; STDBUF.ASM
 31806                                  ;============================================================================
 31807                                  ; Retro DOS v2.0 - 12/03/2018
 31808                                  
 31809                                  ;
 31810                                  ; Standard buffer management for MSDOS
 31811                                  ;
 31812                                  
 31813                                  ;.xlist
 31814                                  ;.xcref
 31815                                  ;INCLUDE STDSW.ASM
 31816                                  ;.cref
 31817                                  ;.list
 31818                                  
 31819                                  ;TITLE	STDBUF - MSDOS buffer management
 31820                                  ;NAME	STDBUF
 31821                                  
 31822                                  ;INCLUDE BUF.ASM
 31823                                  
 31824                                  ;============================================================================
 31825                                  ; BUF.ASM
 31826                                  ;============================================================================
 31827                                  ; 31/07/2018 - Retro DOS v3.0
 31828                                  ; Retro DOS v2.0 - 12/03/2018
 31829                                  ;
 31830                                  ; buffer management for MSDOS
 31831                                  ;
 31832                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31833                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31834                                  ;
 31835                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31836                                  ;
 31837                                  ;SETVISIT:
 31838                                  ;	; 31/07/2018 - Retro DOS v3.0
 31839                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31840                                  ;; Inputs:
 31841                                  ;;      None
 31842                                  ;; Function:
 31843                                  ;;      Set up a scan of I/O buffers
 31844                                  ;; Outputs:
 31845                                  ;;      All visit flags = 0
 31846                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31847                                  ;;                    may cause a scan to stop in the middle leaving some
 31848                                  ;;                    visit flags set, and some not set.
 31849                                  ;;      DS:DI Points to [BUFFHEAD]
 31850                                  ;; No other registers altered
 31851                                  ;
 31852                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31853                                  ;	PUSH    AX
 31854                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31855                                  ;	;mov	al,0DFh
 31856                                  ;	mov	al,~buf_visit
 31857                                  ;SETLOOP:
 31858                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31859                                  ;	;and	[DI+5],al
 31860                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31861                                  ;       LDS     DI,[DI]
 31862                                  ;       CMP     DI,-1
 31863                                  ;       JNZ     SHORT SETLOOP
 31864                                  ;       POP     AX ; 09/09/2018
 31865                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31866                                  ;SVISIT_RETN:
 31867                                  ;       RETN
 31868                                  ;
 31869                                  ;SKIPVISIT:
 31870                                  ;	; 31/07/2018 - Retro DOS v3.0
 31871                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31872                                  ;
 31873                                  ;; Inputs:
 31874                                  ;;      DS:DI Points to a buffer
 31875                                  ;; Function:
 31876                                  ;;      Skip visited buffers
 31877                                  ;; Outputs:
 31878                                  ;;      DS:DI Points to next unvisited buffer
 31879                                  ;;      Zero is set if skip to LAST buffer
 31880                                  ;; No other registers altered
 31881                                  ;
 31882                                  ;       CMP     DI,-1
 31883                                  ;       ;retz
 31884                                  ;       JZ	SHORT SVISIT_RETN
 31885                                  ;
 31886                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31887                                  ;       ;;;retnz
 31888                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31889                                  ;
 31890                                  ;	;test	byte [di+5],20h
 31891                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31892                                  ;	JNZ	short SKIPLOOP
 31893                                  ;	
 31894                                  ;	push	ax
 31895                                  ;	or	al,1
 31896                                  ;	pop	ax
 31897                                  ;	retn	
 31898                                  ;
 31899                                  ;SKIPLOOP:
 31900                                  ;	LDS     DI,[DI]
 31901                                  ;       JMP     SHORT SKIPVISIT
 31902                                  
 31903                                  ;============================================================================
 31904                                  ; BUF.ASM, MSDOS 6.0, 1991
 31905                                  ;============================================================================
 31906                                  ; 31/07/2018 - Retro DOS v3.0
 31907                                  ; 04/05/2019 - Retro DOS v4.0
 31908                                  
 31909                                  ;	TITLE	BUF - MSDOS buffer management
 31910                                  ;	NAME	BUF
 31911                                  
 31912                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31913                                  ;
 31914                                  ;	GETCURHEAD
 31915                                  ;	ScanPlace
 31916                                  ;	PLACEBUF
 31917                                  ;	PLACEHEAD
 31918                                  ;	PointComp
 31919                                  ;	GETBUFFR
 31920                                  ;	GETBUFFRB
 31921                                  ;	FlushBuf
 31922                                  ;	BufWrite
 31923                                  ;	SET_RQ_SC_PARMS
 31924                                  ;
 31925                                  ;	Revision history:
 31926                                  ;
 31927                                  ;		AN000  version 4.00  Jan. 1988
 31928                                  ;		A004   PTM 3765 -- Disk reset failed
 31929                                  ;		M039 DB 10/17/90 - Disk write optimization
 31930                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31931                                  
 31932                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31933                                  ;----------------------------------------------------------------------------
 31934                                  ; Procedure Name : GetCurHead
 31935                                  ; Inputs:
 31936                                  ;	 No Inputs
 31937                                  ; Function:
 31938                                  ;	Returns the pointer to the first buffer in Queue
 31939                                  ;	and updates FIRST_BUFF_ADDR
 31940                                  ;       and invalidates LASTBUFFER (recency pointer)
 31941                                  ; Outputs:
 31942                                  ;	DS:DI = pointer to the first buffer in Queue
 31943                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31944                                  ;       LASTBUFFER = -1
 31945                                  ; No other registers altered
 31946                                  ;----------------------------------------------------------------------------
 31947                                  
 31948                                  ; 04/05/2019 - Retro DOS v4.0
 31949                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31950                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31951                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31952                                  
 31953                                  GETCURHEAD:
 31954 00005803 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31955 00005808 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31956 0000580F 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31957 00005814 C3                      	retn
 31958                                  
 31959                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31960                                  ;----------------------------------------------------------------------------
 31961                                  ; Procedure Name : ScanPlace
 31962                                  ; Inputs:
 31963                                  ;	Same as PLACEBUF
 31964                                  ; Function:
 31965                                  ;	Save scan location and call PLACEBUF
 31966                                  ; Outputs:
 31967                                  ;	DS:DI Points to saved scan location
 31968                                  ; All registers, except DS:DI, preserved.
 31969                                  ;----------------------------------------------------------------------------
 31970                                  ;M039: Rewritten to preserve registers.
 31971                                  
 31972                                  ;SCANPLACE:
 31973                                  ;	; 31/07/2018 - Retro DOS v3.0
 31974                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31975                                  ;	push	es
 31976                                  ;	les	si,[di]
 31977                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31978                                  ;	call	PLACEBUF
 31979                                  ;	push	es
 31980                                  ;	pop	ds
 31981                                  ;	mov	di,si
 31982                                  ;	pop	es
 31983                                  ;scanplace_retn:
 31984                                  ;	retn	
 31985                                  	
 31986                                  	; MSDOS 6.0
 31987                                  SCANPLACE:
 31988 00005815 FF35                    	push	word [di]
 31989                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31990 00005817 E80200                  	call	PLACEBUF
 31991 0000581A 5F                      	pop	di
 31992 0000581B C3                      	retn
 31993                                  
 31994                                  ;----------------------------------------------------------------------------
 31995                                  ; Procedure Name : PlaceBuf
 31996                                  ; Input:
 31997                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31998                                  ; Function:
 31999                                  ;	Remove buffer from queue and re-insert it in proper place.
 32000                                  ; NO registers altered
 32001                                  ;----------------------------------------------------------------------------
 32002                                  
 32003                                  ;procedure PLACEBUF,NEAR
 32004                                  
 32005                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32006                                  	; 20/05/2019 - Retro DOS v4.0
 32007                                  PLACEBUF:
 32008                                  	; 31/07/2018 - Retro DOS v3.0
 32009                                  
 32010                                  	; MSDOS 6.0
 32011 0000581C 50                      	push	AX			;Save only regs we modify	;AN000;
 32012 0000581D 53                      	push	BX							;AN000;
 32013                                  	; 23/09/2023
 32014                                  	;push	SI							;AN000;
 32015                                  	
 32016 0000581E 8B05                    	mov	ax,[di]
 32017                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32018 00005820 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32019                                  	
 32020 00005825 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32021 00005827 7422                    	je	short nret			;Yes, special case	;AN000;
 32022 00005829 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32023 0000582B 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32024 0000582D 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32025 00005831 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32026                                  not_first:
 32027                                  	; 23/09/2023
 32028 00005833 56                      	push	si
 32029                                  	;mov	si,[di+2]
 32030 00005834 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32031 00005837 8904                    	mov	[si],ax
 32032                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32033 00005839 96                      	xchg	si,ax
 32034                                  	;mov	[si+2],ax
 32035 0000583A 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32036                                  	
 32037 0000583D 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32038 00005840 893C                    	mov	[si],di
 32039                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32040 00005842 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32041 00005845 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32042 00005848 891D                    	mov	[di],bx
 32043                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32044                                  	; 23/09/2023
 32045 0000584A 5E                      	pop	si
 32046                                  nret:	
 32047                                  	; 23/09/2023							;AN000;
 32048                                  	;pop	SI							;AN000;
 32049 0000584B 5B                      	pop	BX							;AN000;
 32050 0000584C 58                      	pop	AX							;AN000;
 32051                                  									;AN000;
 32052                                  	;cmp	byte [di+4],0FFh
 32053 0000584D 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32054 00005851 7505                            jne	short pbx			; M039: -no, jump.
 32055 00005853 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32056                                  pbx:	
 32057 00005858 C3                      	retn								;AN000;
 32058                                  
 32059                                  	; 31/07/2018 - Retro DOS v3.0
 32060                                  
 32061                                  	; MSDOS 3.3
 32062                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32063                                  
 32064                                  ;PLACEBUF:
 32065                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32066                                  ;	
 32067                                  ;       CALL	save_world
 32068                                  ;       LES     CX,[DI]
 32069                                  ;       CMP     CX,-1           	; Buf is LAST?
 32070                                  ;       JZ      SHORT NRET		; Buffer already last
 32071                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32072                                  ;       PUSH    DS
 32073                                  ;       POP     ES              	; Buf is ES:DI
 32074                                  ;	; 15/03/2018
 32075                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32076                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32077                                  ;       JNZ     SHORT BUFLOOP
 32078                                  ;       MOV     [SS:BUFFHEAD],CX
 32079                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32080                                  ;       JMP     SHORT LOOKEND
 32081                                  ;BUFLOOP:
 32082                                  ;	; 31/07/2018
 32083                                  ;	mov	ax,ds
 32084                                  ;	mov	bx,si
 32085                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32086                                  ;       LDS     SI,[SI]
 32087                                  ;       CALL    POINTCOMP
 32088                                  ;       jnz	short BUFLOOP
 32089                                  ;	;
 32090                                  ;	mov	ds,ax
 32091                                  ;	mov	si,bx
 32092                                  ;	mov	[SI],cx
 32093                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32094                                  ;	mov	[SI+2],bp
 32095                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32096                                  ;LOOKEND:
 32097                                  ;	mov	ax,ds
 32098                                  ;	mov	bx,si
 32099                                  ;       LDS     SI,[SI]
 32100                                  ;       CMP     SI,-1
 32101                                  ;       jnz     short LOOKEND
 32102                                  ;GOTHEEND:
 32103                                  ;       mov	ds,ax
 32104                                  ;	mov	[BX],di
 32105                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32106                                  ;       MOV     WORD [ES:DI],-1
 32107                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32108                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32109                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32110                                  ;NRET:
 32111                                  ;       CALL	restore_world
 32112                                  ;	
 32113                                  ;	;cmp	byte [di+4],-1
 32114                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32115                                  ;	jnz     short scanplace_retn
 32116                                  ;	call    PLACEHEAD
 32117                                  ;	retn
 32118                                  
 32119                                  ;EndProc PLACEBUF
 32120                                  
 32121                                  ;M039 - Removed PLACEHEAD.
 32122                                  ;----------------------------------------------------------------------------
 32123                                  ; places buffer at head
 32124                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32125                                  ;	ONE IN THE LIST!!!!!!!
 32126                                  ; BUGBUG ---- this routine can be removed because it has only
 32127                                  ; BUGBUG ---- one instruction. This routine is called from
 32128                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32129                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32130                                  ; BUGBUG ---- But kept as it is for modularity
 32131                                  ;----------------------------------------------------------------------------
 32132                                  ;procedure   PLACEHEAD,NEAR
 32133                                  ;	mov	word ptr [BufferQueue], di
 32134                                  ;	ret
 32135                                  ;EndProc PLACEHEAD
 32136                                  ;M039
 32137                                  
 32138                                  ;----------------------------------------------------------------------------
 32139                                  ; Procedure Name : PLACEHEAD
 32140                                  ;
 32141                                  ; SAME AS PLACEBUF except places buffer at head
 32142                                  ;----------------------------------------------------------------------------
 32143                                  
 32144                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32145                                  	; 05/09/2018
 32146                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32147                                  ;PLACEHEAD:
 32148                                  ;	; 31/07/2018 - Retro DOS v3.0
 32149                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32150                                  ;
 32151                                  ;       CALL	save_world
 32152                                  ;       PUSH	DS
 32153                                  ;       POP	ES
 32154                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32155                                  ;       LDS     SI,[SS:BUFFHEAD]
 32156                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32157                                  ;	CALL    POINTCOMP
 32158                                  ;       JZ      SHORT GOTHEEND2
 32159                                  ;	MOV	[ES:DI],SI
 32160                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32161                                  ;       MOV	[ES:DI+2],DS
 32162                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32163                                  ;       MOV	[SS:BUFFHEAD],DI
 32164                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32165                                  ;LOOKEND2:
 32166                                  ;       mov	ax,ds
 32167                                  ;	mov	bx,si
 32168                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32169                                  ;       LDS     SI,[SI]
 32170                                  ;       CALL    POINTCOMP
 32171                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32172                                  ;       mov	ds,ax
 32173                                  ;	mov	word [bx],-1
 32174                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32175                                  ;	mov	word [bx+2],-1
 32176                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32177                                  ;GOTHEEND2:
 32178                                  ;      	call	restore_world
 32179                                  ;placehead_retn:
 32180                                  ;	retn
 32181                                  
 32182                                  ; 20/05/2019 - Retro DOS v4.0
 32183                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32184                                  
 32185                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32186                                  ;----------------------------------------------------------------------------
 32187                                  ;
 32188                                  ; Procedure Name : PointComp
 32189                                  ; Inputs:
 32190                                  ;         DS:SI & ES:DI
 32191                                  ; Function:
 32192                                  ;          Checks for ((SI==DI) && (ES==DS))
 32193                                  ;	   Assumes that pointers are normalized for the
 32194                                  ;	   same segment
 32195                                  ;
 32196                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32197                                  ; DO NOT USE FOR < or >
 32198                                  ; No Registers altered
 32199                                  ;
 32200                                  ;----------------------------------------------------------------------------
 32201                                  
 32202                                  POINTCOMP:
 32203                                  	; 31/07/2018 - Retro DOS v3.0
 32204                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32205 00005859 39FE                    	CMP	SI,DI
 32206 0000585B 750A                    	jnz	short _ret_label	; return if nz
 32207                                  	;jnz	short placehead_retn 
 32208 0000585D 51                      	PUSH	CX
 32209 0000585E 52                      	PUSH	DX
 32210 0000585F 8CD9                    	MOV	CX,DS
 32211 00005861 8CC2                    	MOV	DX,ES
 32212 00005863 39D1                    	CMP	CX,DX
 32213 00005865 5A                      	POP	DX
 32214 00005866 59                      	POP	CX
 32215                                  _ret_label:
 32216 00005867 C3                      	retn
 32217                                  
 32218                                  ; 01/08/2018 - Retro DOS v3.0
 32219                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32220                                  
 32221                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32222                                  
 32223                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32224                                  ;----------------------------------------------------------------------------
 32225                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32226                                  ;	It gets the specified local sector into one of the I/O buffers
 32227                                  ;	and shuffles the queue
 32228                                  ; 
 32229                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32230                                  ;		       ELSE no pre-read
 32231                                  ;		(DX) = Desired physical sector number	      (LOW)
 32232                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32233                                  ;		(ES:BP) = Pointer to drive parameters
 32234                                  ;		ALLOWED set in case of INT 24
 32235                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32236                                  ;		'C' clear if OK
 32237                                  ;		CURBUF Points to the Buffer for the sector
 32238                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32239                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32240                                  ;----------------------------------------------------------------------------
 32241                                  
 32242                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32243                                  ;----------------------------------------------------------------------------
 32244                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32245                                  ;	It gets the specified sector into one of the I/O buffers
 32246                                  ;	and shuffles the queue. We need a special entry point so that
 32247                                  ;	we can read the alternate FAT sector if the first read fails, also
 32248                                  ;	so we can mark the buffer as a FAT sector.
 32249                                  ; 
 32250                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32251                                  ;		       ELSE no pre-read
 32252                                  ;		(DX) = Desired physical sector number	     (LOW)
 32253                                  ;		(SI) != 0
 32254                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32255                                  ;		(ES:BP) = Pointer to drive parameters
 32256                                  ;		ALLOWED set in case of INT 24
 32257                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32258                                  ;		'C' clear if OK
 32259                                  ;		CUR ddBUF Points to the Buffer for the sector
 32260                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32261                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32262                                  ;----------------------------------------------------------------------------
 32263                                  
 32264                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32265                                  GETBUFFRC:
 32266 00005868 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32267                                  GETBUFFRA:
 32268 0000586E 30C0                    	xor	al,al
 32269 00005870 BE0100                  	mov	si,1
 32270 00005873 EB09                    	jmp	short GETBUFFRB
 32271                                  
 32272                                  	; 22/09/2023
 32273                                  GETBUFFER:
 32274 00005875 30C0                    	xor	al,al
 32275                                  GETBUFFRD:
 32276                                  	;mov	byte [ALLOWED],18h
 32277 00005877 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32278                                  
 32279                                  	; 20/05/2019 - Retro DOS v4.0
 32280                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32281                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32282                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32283                                  GETBUFFR:
 32284 0000587C 31F6                    	XOR	SI,SI
 32285                                  
 32286                                  ;	This entry point is called for FAT buffering with SI != 0
 32287                                  
 32288                                  GETBUFFRB:
 32289 0000587E A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32290                                  	; 15/12/2022
 32291 00005881 268A4600                	mov	al,[ES:BP]
 32292                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32293                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32294 00005885 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32295                                  	; MSDOS 6.0
 32296                                  ;hkn; SS override
 32297 00005889 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32298                                  
 32299                                  ;	See if this is the buffer that was most recently returned.
 32300                                  ;	A big performance win if it is.
 32301                                  
 32302 0000588E 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32303 00005891 7412                    	je	short getb5			; No
 32304                                  	;cmp	dx,[di+6]
 32305 00005893 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32306 00005896 750D                    	JNZ	short getb5			; Wrong sector
 32307                                  	
 32308                                  	; MSDOS 6.0
 32309                                  	;cmp	cx,[di+8]
 32310 00005898 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32311 0000589B 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32312                                  	
 32313                                  	;cmp	al,[di+4]
 32314 0000589D 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32315                                  	;JZ	getb35				; Just asked for same buffer
 32316 000058A0 7503                    	jnz	short getb5
 32317                                  	;jmp	getb35
 32318                                  	; 17/12/2022
 32319                                  	; 28/07/2019
 32320 000058A2 E9C700                  	jmp	getb35x
 32321                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32322                                  	;jmp	getb35
 32323                                  
 32324                                  ;	It's not the buffer most recently returned. See if it's in the
 32325                                  ;	cache.
 32326                                  ;
 32327                                  ;	(cx:dx) = sector #
 32328                                  ;	(al) = drive #
 32329                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32330                                  ;	??? list may be incomplete ???
 32331                                  
 32332                                  getb5:	
 32333                                  	; MSDOS 3.3
 32334                                  	;lds	di,[SS:BUFFHEAD]
 32335                                  	; MSDOS 6.0
 32336 000058A5 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32337                                  getb10:	
 32338                                  	;cmp	dx,[di+6]
 32339 000058A8 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32340 000058AB 750D                    	jne	short getb12			; wrong sector lo
 32341                                  	
 32342                                  	; MSDOS 6.0
 32343                                  	;cmp	cx,[di+8]
 32344 000058AD 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32345 000058B0 7508                    	jne	short getb12			; wrong sector hi
 32346                                  	
 32347                                  	;cmp	al,[di+4]
 32348 000058B2 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32349                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32350 000058B5 7503                    	jne	short getb12
 32351 000058B7 E98C00                  	jmp	getb25
 32352                                  getb12:	
 32353                                  	; MSDOS 3.3
 32354                                  	;;mov	di,[DI]
 32355                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32356                                  	;
 32357                                  	; 15/08/2018
 32358                                  	;lds	di,[di]
 32359                                  
 32360                                  	;cmp	di,-1 ; 0FFFFh
 32361                                  	;jne	short getb10
 32362                                  	;lds	di,[SS:BUFFHEAD]
 32363                                  
 32364                                  	; MSDOS 6.0
 32365 000058BA 8B3D                    	mov	di,[di]
 32366                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32367 000058BC 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32368 000058C1 75E5                    	jne	short getb10			; no, continue looking
 32369                                  
 32370                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32371                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32372                                  ;	new sector into it.
 32373                                  ;
 32374                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32375                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32376                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32377                                  ;	down a chain, but should be hashed.
 32378                                  ;
 32379                                  ;	(DS:DI) = first buffer in the queue
 32380                                  ;	(CX:DX) = sector # we want
 32381                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32382                                  
 32383                                  	; MSDOS 3.3 & MSDOS 6.0
 32384                                  ;hkn; SS override
 32385 000058C3 51                      	PUSH	CX  ; MSDOS 6.0
 32386 000058C4 56                      	push	si
 32387 000058C5 52                      	push	dx
 32388 000058C6 55                      	push	bp
 32389 000058C7 06                      	push	es
 32390 000058C8 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32391 000058CB 07                      	pop	es
 32392 000058CC 5D                      	pop	bp
 32393 000058CD 5A                      	pop	dx
 32394 000058CE 5E                      	pop	si
 32395 000058CF 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32396                                  	;jc	short getbx			; if got hard error
 32397 000058D4 7303                    	jnc	short getb13
 32398 000058D6 E99D00                  	jmp	getbx
 32399                                  
 32400                                  getb13:
 32401                                  	; MSDOS 6.0
 32402 000058D9 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32403                                  
 32404                                  ;	We're ready to read in the buffer, if need be. If the caller
 32405                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32406                                  
 32407 000058DC 30E4                    	XOR	AH,AH				; initial flags
 32408                                  ;hkn; SS override
 32409                                  	;test	byte [ss:PREREAD],0FFh
 32410                                  	;jnz	short getb20
 32411 000058DE 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32412 000058E3 7549                    	JNZ	short getb20			; no, we're done
 32413                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32414                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32415 000058E5 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32416                                  	;MOV	CX,1
 32417                                  	; 22/09/2023
 32418 000058E8 29C9                    	sub	cx,cx ; 0
 32419 000058EA 56                      	push	si
 32420 000058EB 57                      	push	di
 32421 000058EC 52                      	push	dx
 32422                                  	; MSDOS 6.0
 32423 000058ED 06                      	push	es ; ***
 32424                                  
 32425                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32426                                  ;	this point. -mrw 10/88
 32427                                  	
 32428                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32429                                  	; 22/09/2023
 32430 000058EE 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32431 000058F3 7407                    	jz	short getb14
 32432 000058F5 1E                      	push	ds ; **
 32433 000058F6 53                      	push	bx ; *
 32434 000058F7 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32435                                  getb14:
 32436                                  ;M039: Eliminated redundant HMA code.
 32437                                  
 32438                                  	; 22/09/2023
 32439 000058FC 41                      	inc	cx ; cx = 1
 32440                                  
 32441                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32442 000058FD 09F6                    	OR	SI,SI			; FAT sector ?
 32443 000058FF 7407                    	JZ	short getb15		
 32444                                  
 32445 00005901 E81CDD                  	call	FATSECRD
 32446                                  	;mov	ah,2
 32447 00005904 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32448                                  
 32449 00005906 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32450                                  
 32451                                  getb15:
 32452 00005908 E841DD                  	call	DREAD			; Buffer is marked free if read barfs
 32453 0000590B B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32454                                  getb17:
 32455                                  	; 17/12/2022	
 32456                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32457                                  ;%if 0
 32458                                  	; MSDOS 6.0							  ;I001
 32459 0000590D 9C                      	pushf								  ;I001
 32460 0000590E 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32461 00005914 7411                    	jz	short not_in_hma	; no				  ;I001
 32462                                  	;mov	cx,[es:bp+2]
 32463 00005916 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32464 0000591A D1E9                    	shr	cx,1							  ;I001
 32465 0000591C 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32466 0000591D 89DE                    	mov	si,bx							  ;I001
 32467 0000591F 5F                      	pop	di ; *							  ;I001
 32468 00005920 07                      	pop	es ; **							  ;I001
 32469 00005921 FC                      	cld								  ;I001
 32470 00005922 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32471 00005923 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32472 00005925 06                      	push	es							  ;I001
 32473 00005926 1F                      	pop	ds							  ;I001
 32474                                  ;%endif
 32475                                  
 32476                                  ; 17/12/2022
 32477                                  %if 0
 32478                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32479                                  	; MSDOS 5.0
 32480                                  	pushf
 32481                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32482                                  	jz	short not_in_hma	; no
 32483                                  	popf
 32484                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32485                                  	shr	cx,1
 32486                                  	mov	si,bx
 32487                                  	pop	di ; *
 32488                                  	pop	es ; **
 32489                                  	cld
 32490                                  	rep	movsw
 32491                                  	push	es
 32492                                  	pop	ds
 32493                                  	jmp	short getb19 ; 27/11/2022
 32494                                  %endif
 32495                                  
 32496                                  not_in_hma:								  ;I001
 32497 00005927 9D                      	popf							 	  ;I001
 32498                                  getb19:
 32499 00005928 07                      	pop	es ; ***
 32500 00005929 5A                      	pop	dx
 32501 0000592A 5F                      	pop	di
 32502 0000592B 5E                      	pop	si
 32503 0000592C 7248                    	JC	short getbx
 32504                                  
 32505                                  ;	The buffer has the data setup in it (if we were to read)
 32506                                  ;	Setup the various buffer fields
 32507                                  ;
 32508                                  ;	(ds:di) = buffer address
 32509                                  ;	(es:bp) = DPB address
 32510                                  ;	(HIGH_SECTOR:DX) = sector #
 32511                                  ;	(ah) = BUF_FLAGS value
 32512                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32513                                  
 32514                                  ;hkn; SS override
 32515                                  getb20:	; MSDOS 6.0
 32516 0000592E 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32517                                  	;mov	[di+8],cx
 32518 00005933 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32519                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32520                                   	;mov	[di+6],dx
 32521 00005936 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32522                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32523                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32524 00005939 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32525                                  	;;mov	[di+0Ch],es
 32526                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32527 0000593C 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32528                                  	; 15/12/2022
 32529 0000593F 268A4600                	mov	al,[es:bp]
 32530                                  	;mov	al,[es:bp+0]
 32531                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32532                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32533                                  	;mov	[di+4],ax
 32534 00005943 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32535                                  getb25:	
 32536                                  	; MSDOS 3.3
 32537                                  	;mov     ax,1
 32538                                  
 32539                                  	; MSDOS 6.0
 32540                                  	;mov	byte [di+0Ah],1
 32541 00005946 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32542 0000594A 31C0                    	XOR	AX,AX
 32543                                  
 32544                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32545 0000594C 09F6                    	OR	SI,SI				; FAT sector ?
 32546 0000594E 740B                    	JZ	short getb30
 32547                                  
 32548                                  	;mov	al,[es:bp+8]
 32549 00005950 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32550                                  	
 32551                                  	; MSDOS 6.0
 32552 00005954 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32553                                  	;mov	ax,[es:bp+0Fh]
 32554 00005957 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32555                                  						;  sectors
 32556                                  	; MSDOS 3.3
 32557                                  	;;mov	ah,[es:bp+0Fh]
 32558                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32559                                  
 32560                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32561                                  ;		is set
 32562                                  
 32563                                  getb30:	
 32564                                  	; MSDOS 6.0
 32565                                  	;mov	[di+0Bh],ax
 32566 0000595B 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32567                                  
 32568                                  	; MSDOS 3.3
 32569                                  	;;mov	[di+8],ax ; 15/08/2018	
 32570                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32571                                  
 32572 0000595E E8BBFE                  	CALL	PLACEBUF
 32573                                  
 32574                                  ;hkn; SS override for next 4
 32575                                  getb35: 
 32576                                  	; 17/12/2022
 32577                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32578                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32579                                  	;MOV	[SS:CURBUF+2],DS
 32580                                  	;MOV	[SS:LastBuffer+2],DS
 32581                                  	;MOV	[SS:CURBUF],DI
 32582                                  	;MOV	[SS:LastBuffer],DI
 32583                                  	;CLC
 32584                                  
 32585                                  	; 17/12/2022
 32586                                  	; 07/12/2022
 32587                                  	; Retro DOS v4.0
 32588 00005961 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32589 00005966 36893E[1E00]            	mov	[ss:LastBuffer],di
 32590 0000596B F8                      	clc
 32591                                  getb35x: ; 28/07/2019
 32592 0000596C 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32593 00005971 36893E[E205]            	MOV	[ss:CURBUF],di
 32594                                  
 32595                                  ;	Return with 'C' set appropriately
 32596                                  ;	(dx) = caller's original value
 32597                                  
 32598                                  getbx:	
 32599 00005976 16                      	push	ss
 32600 00005977 1F                      	pop	ds
 32601                                  	;retn
 32602                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32603                                  getbuffrb_retn:
 32604                                  ;flushbuf_retn:	; 17/12/2022
 32605 00005978 C3                      	retn
 32606                                  
 32607                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32608                                  ;----------------------------------------------------------------------------
 32609                                  ; Input:
 32610                                  ;	DS = DOSGROUP
 32611                                  ;	AL = Physical unit number local buffers only
 32612                                  ;	   = -1 for all units and all remote buffers
 32613                                  ; Function:
 32614                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32615                                  ;	Carry set if error (user FAILed to I 24)
 32616                                  ;	    Flush operation completed.
 32617                                  ; DS Preserved, all others destroyed (ES too)
 32618                                  ;----------------------------------------------------------------------------
 32619                                  
 32620                                  	; 20/05/2019 - Retro DOS v4.0
 32621                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32622                                  
 32623                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32624                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32625                                  FLUSHBUF:
 32626                                  	; MSDOS 3.3
 32627                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32628                                  	;lds	di,[BUFFHEAD]
 32629                                  
 32630                                  	; MSDOS 6.0
 32631 00005979 E887FE                  	call	GETCURHEAD
 32632                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32633 0000597C 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32634 00005982 7508                    	jnz	short scan_buf_queue
 32635 00005984 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32636 0000598A 7423                    	je	short end_scan
 32637                                  	
 32638                                  scan_buf_queue:
 32639 0000598C E82900                  	call	CHECKFLUSH
 32640                                  	;push	ax  ; MSDOS 3.3
 32641                                  	; MSDOS 6.0
 32642                                  	;mov	ah,[di+4]
 32643 0000598F 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32644 00005992 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32645 00005997 7408                    	je	short free_the_buf
 32646                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32647 00005999 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32648 0000599F 7405                    	jz	short dont_free_the_buf
 32649                                  	; MSDOS 3.3
 32650                                  	;;mov	al,[di+4]
 32651                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32652                                  	;cmp	[SS:WPERR],al					;hkn;
 32653                                  	; 15/08/2018
 32654                                  	;jne	short dont_free_the_buf	
 32655                                  free_the_buf:
 32656                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32657 000059A1 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32658                                  dont_free_the_buf:
 32659                                  	;pop	ax  ; MSDOS 3.3 	   	
 32660                                  
 32661                                  	; MSDOS 3.3
 32662                                  	;mov	di,[DI]
 32663                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32664                                  	;
 32665                                  	; 15/08/2018
 32666                                  	;lds	di,[di]
 32667                                  	;
 32668                                  	;cmp	di,-1 ; 0FFFFh
 32669                                  	;jnz	short scan_buf_queue 
 32670                                  	
 32671                                  	; MSDOS 6.0
 32672 000059A6 8B3D                    	mov	di,[di]
 32673                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32674 000059A8 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32675 000059AD 75DD                    	jne	short scan_buf_queue
 32676                                  
 32677                                  end_scan:
 32678 000059AF 16                      	push	ss
 32679 000059B0 1F                      	pop	ds
 32680                                  	; 01/08/2018 - Retro DOS v3.0
 32681                                  	;cmp	byte [FAILERR],0
 32682                                  	;jne	short bad_flush
 32683                                  	;retn
 32684                                  ;bad_flush:
 32685                                  	;stc
 32686                                  	;retn
 32687                                  
 32688                                  	; 17/12/2022
 32689                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32690                                  	; 01/08/2018 - Retro DOS v3.0
 32691 000059B1 803E[4A03]01            	cmp	byte [FAILERR],1
 32692 000059B6 F5                      	cmc
 32693                                  flushbuf_retn:
 32694 000059B7 C3                      	retn
 32695                                  	
 32696                                  	; 17/12/2022
 32697                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32698                                  	;cmp	byte [FAILERR],0
 32699                                  	;jne	short bad_flush
 32700                                  	;retn
 32701                                  ;bad_flush:
 32702                                  	;stc
 32703                                  	;retn
 32704                                  
 32705                                  ;----------------------------------------------------------------------------
 32706                                  ;
 32707                                  ; Procedure Name : CHECKFLUSH
 32708                                  ;
 32709                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32710                                  ;	   DS:DI - pointer to buffer
 32711                                  ;
 32712                                  ; Function : Write out a buffer if it is dirty
 32713                                  ;
 32714                                  ; Carry set if problem (currently user FAILed to I 24)
 32715                                  ;
 32716                                  ;----------------------------------------------------------------------------
 32717                                  
 32718                                  CHECKFLUSH:
 32719                                  	; MSDOS 6.0
 32720 000059B8 B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32721                                  	;cmp	[di+4],ah
 32722 000059BA 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32723 000059BD 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32724 000059BF 38C4                    	CMP	AH,AL			; 
 32725 000059C1 7406                    	JZ	short DOBUFFER		; do this buffer
 32726                                  	;cmp	al,[di+4]
 32727 000059C3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32728 000059C6 F8                      	CLC
 32729 000059C7 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32730                                  DOBUFFER:
 32731                                  	;test	byte [di+5],40h
 32732 000059C9 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32733 000059CD 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32734 000059CF 50                      	PUSH	AX
 32735                                  	;push	word [di+4]
 32736 000059D0 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32737 000059D3 E80B00                  	CALL	BUFWRITE
 32738 000059D6 58                      	POP	AX
 32739 000059D7 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32740                                  	;and	ah,0BFh
 32741 000059D9 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32742                                  	;mov	[di+4],ax
 32743 000059DC 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32744                                  LEAVE_BUF:
 32745 000059DF 58                      	POP	AX			; Search info
 32746                                  checkflush_retn:
 32747 000059E0 C3                      	retn
 32748                                  
 32749                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32750                                  ;----------------------------------------------------------------------------
 32751                                  ;
 32752                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32753                                  ;
 32754                                  ;	ENTRY	DS:DI Points to the buffer
 32755                                  ;
 32756                                  ;	EXIT	Buffer marked free
 32757                                  ;		Carry set if error (currently user FAILed to I 24)
 32758                                  ;
 32759                                  ;	USES	All buf DS:DI
 32760                                  ;		HIGH_SECTOR
 32761                                  ;----------------------------------------------------------------------------
 32762                                  
 32763                                  	; 20/05/2019 - Retro DOS v4.0
 32764                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32765                                  
 32766                                  
 32767                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32768                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32769                                  
 32770                                  BUFWRITE:
 32771                                  	; 10/09/2018
 32772                                  	; 01/08/2018 - Retro DOS v3.0
 32773                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32774 000059E1 B8FF00                  	MOV	AX,00FFH
 32775                                  	;xchg	ax,[di+4]
 32776 000059E4 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32777 000059E7 3CFF                    	CMP	AL,0FFH
 32778 000059E9 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32779                                  	;test	ah,40h
 32780 000059EB F6C440                  	test	AH,buf_dirty
 32781 000059EE 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32782                                  	; MSDOS 6.0
 32783 000059F0 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32784                                  
 32785                                  ;hkn; SS override
 32786 000059F3 363A06[2203]            	CMP	AL,[SS:WPERR]
 32787 000059F8 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32788                                  
 32789                                  ;hkn; SS override
 32790                                  	; MSDOS 6.0
 32791 000059FA 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32792                                  	
 32793                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32794                                  	;les	bp,[di+13] ; MSDOS 6.0
 32795 000059FE C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32796                                  	;;lea	bx,[di+16]
 32797                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32798 00005A01 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32799                                  	;mov	dx,[di+6]
 32800 00005A04 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32801                                  	
 32802                                  	; MSDOS 6.0
 32803                                  	;mov	cx,[di+8]
 32804 00005A07 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32805                                  
 32806                                  ;hkn; SS override
 32807 00005A0A 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32808 00005A0F 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32809                                  	; MSDOS 3.3
 32810                                  	;; mov	cx,[DI+8]
 32811                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32812                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32813 00005A12 30ED                    	XOR	CH,CH
 32814                                  	;;mov	ah,ch ; MSDOS 3.3
 32815                                  
 32816                                  ;hkn; SS override for ALLOWED
 32817                                  	;mov	byte [SS:ALLOWED],18h
 32818 00005A14 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32819                                  	;test	byte [di+5],8
 32820                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32821                                  	;test	ah,8
 32822 00005A1A F6C408                  	test	AH,buf_isDATA
 32823 00005A1D 7406                    	JZ	short NO_IGNORE
 32824                                  	;or	byte [SS:ALLOWED],20h
 32825 00005A1F 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32826                                  NO_IGNORE:
 32827                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32828                                  	; MSDOS 6.0
 32829                                  	;mov	ax,[di+11]
 32830 00005A25 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32831                                  
 32832 00005A28 57                      	PUSH	DI		; Save buffer pointer
 32833 00005A29 31FF                    	XOR	DI,DI		; Indicate failure
 32834                                  
 32835 00005A2B 1E                      	push	ds ; *
 32836 00005A2C 53                      	push	bx ; **
 32837                                  WRTAGAIN:
 32838 00005A2D 57                      	push	di ; ***
 32839 00005A2E 51                      	push	cx ; ****
 32840 00005A2F 50                      	push	ax ; *****
 32841                                  	;MOV	CX,1
 32842                                  	; 17/12/2022
 32843                                  	; ch = 0
 32844 00005A30 B101                    	mov	cl,1 ; 24/07/2019
 32845                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32846                                  	;mov	cx,1
 32847 00005A32 53                      	push	bx ; ******
 32848 00005A33 52                      	push	dx ; *******
 32849 00005A34 1E                      	push	ds ; ********
 32850                                  
 32851                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32852                                  
 32853                                  	; MSDOS 6.0
 32854                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32855                                  	; 22/09/2023
 32856 00005A35 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32857 00005A3A 7418                    	jz	short NBUFFINHMA
 32858 00005A3C 51                      	push	cx
 32859 00005A3D 06                      	push	es
 32860 00005A3E 89DE                    	mov	si,bx
 32861 00005A40 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32862 00005A44 D1E9                    	shr	cx,1
 32863 00005A46 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32864 00005A4B 89FB                    	mov	bx,di
 32865 00005A4D FC                      	cld
 32866 00005A4E F3A5                    	rep	movsw
 32867 00005A50 06                      	push	es
 32868 00005A51 1F                      	pop	ds
 32869 00005A52 07                      	pop	es
 32870 00005A53 59                      	pop	cx
 32871                                  NBUFFINHMA:
 32872 00005A54 E855DC                  	call	DWRITE		; Write out the dirty buffer
 32873 00005A57 1F                      	pop	ds ; ********
 32874 00005A58 5A                      	pop	dx ; *******
 32875 00005A59 5B                      	pop	bx ; ******
 32876 00005A5A 58                      	pop	ax ; *****
 32877 00005A5B 59                      	pop	cx ; ****
 32878 00005A5C 5F                      	pop	di ; ***
 32879 00005A5D 7201                    	JC	short NOSET
 32880 00005A5F 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32881                                  NOSET:				;	succeedes.
 32882 00005A60 01C2                    	ADD	DX,AX
 32883 00005A62 E2C9                    	LOOP	WRTAGAIN
 32884 00005A64 5B                      	pop	bx ; **
 32885 00005A65 1F                      	pop	ds ; *
 32886                                  	;OR	DI,DI		; Clears carry
 32887                                  	;JNZ	short BWROK	; At least one write worked
 32888                                  	;STC			; DI never got INCed, all writes failed.
 32889                                  	; 22/09/2023
 32890 00005A66 83FF01                  	cmp	di,1
 32891                                  BWROK:	
 32892 00005A69 5F                      	POP	DI
 32893 00005A6A C3                      	retn
 32894                                  
 32895                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32896                                  ;----------------------------------------------------------------------------
 32897                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32898                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32899                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32900                                  ;	code and time
 32901                                  ;
 32902                                  ;	ENTRY	ES:BP = drive parameter block
 32903                                  ;
 32904                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32905                                  ;		[SC_DRIVE]= drive #
 32906                                  ;
 32907                                  ;	USES	Flags
 32908                                  ;----------------------------------------------------------------------------
 32909                                  
 32910                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32911                                  ; 04/05/2019 - Retro DOS v4.0
 32912                                  
 32913                                  SET_RQ_SC_PARMS:
 32914                                  ;hkn; SS override for all variables used in this procedure.
 32915 00005A6B 50                      	push	ax
 32916                                  	;mov	ax,[es:bp+2]
 32917 00005A6C 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32918 00005A70 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32919                                  	;;mov	al,[es:bp+0]
 32920                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32921                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32922                                  	; 15/12/2022
 32923 00005A74 268A4600                	mov	al,[ES:BP]
 32924 00005A78 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32925 00005A7C 58                      	pop	ax
 32926                                  srspx:	
 32927 00005A7D C3                      	retn					;LB. return
 32928                                  
 32929                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32930                                  ;----------------------------------------------------------------------------
 32931                                  ; Input:
 32932                                  ;	none
 32933                                  ; Function:
 32934                                  ;	increment dirty buffers count
 32935                                  ; Output:
 32936                                  ;	dirty buffers count is incremented
 32937                                  ;
 32938                                  ; All registers preserved
 32939                                  ;----------------------------------------------------------------------------
 32940                                  
 32941                                  INC_DIRTY_COUNT:
 32942                                  ;; BUGBUG  ---- remove this routine
 32943                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32944 00005A7E 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32945 00005A83 C3                      	retn
 32946                                  
 32947                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32948                                  ;----------------------------------------------------------------------------
 32949                                  ; Input:
 32950                                  ;	none
 32951                                  ; Function:
 32952                                  ;	decrement dirty buffers count
 32953                                  ; Output:
 32954                                  ;	dirty buffers count is decremented
 32955                                  ;
 32956                                  ; All registers preserved
 32957                                  ;----------------------------------------------------------------------------
 32958                                  
 32959                                  DEC_DIRTY_COUNT:
 32960 00005A84 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32961 00005A8A 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32962 00005A8C 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32963                                  					; error condition to underflow here? ;hkn;
 32964                                  ddcx:	
 32965 00005A91 C3                      	retn
 32966                                  
 32967                                  ;============================================================================
 32968                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32969                                  ;============================================================================
 32970                                  ; 02/08/2018 - Retro DOS v3.0
 32971                                  ; 29/04/2019 - Retro DOS v4.0
 32972                                  
 32973                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32974                                  
 32975                                  ; Pseudo EXEC system call for DOS
 32976                                  
 32977                                  ;	TITLE	MSPROC - process maintenance
 32978                                  ;	NAME	MSPROC
 32979                                  
 32980                                  ; =========================================================================
 32981                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32982                                  ;	I/O specs are defined in DISPATCH.
 32983                                  ;
 32984                                  ;	$WAIT
 32985                                  ;	$EXEC
 32986                                  ;	$Keep_process
 32987                                  ;	Stay_resident
 32988                                  ;	$EXIT
 32989                                  ;	$ABORT
 32990                                  ;	abort_inner
 32991                                  ;
 32992                                  ;	Modification history:
 32993                                  ;
 32994                                  ;		Created: ARR 30 March 1983
 32995                                  ;		AN000	version 4.0 jan. 1988
 32996                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32997                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32998                                  ;
 32999                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33000                                  ;
 33001                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33002                                  ;		       dossym.inc. 7/30/90
 33003                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33004                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33005                                  ;		       stack is provided at the end of the program. Note that
 33006                                  ;		       only SP is changed.
 33007                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33008                                  ;
 33009                                  ;		M028 - 4b04 implementation
 33010                                  ;
 33011                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33012                                  ;			in memory block >= 64K, sp = 0. If memory block
 33013                                  ;			obtained is <64K, point sp at the end of the memory
 33014                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33015                                  ;			added for a stack segment which may be needed if it
 33016                                  ;			is loaded in low memory situations.
 33017                                  ;
 33018                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33019                                  ;
 33020                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33021                                  ;			a bad environment if it reached 32767 bytes. Changed
 33022                                  ;			to allow 32768 bytes of environment.
 33023                                  ;
 33024                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33025                                  ;		       COM file high. Also ensure that if the biggest block
 33026                                  ;		       into which we load the com file is less than 64K then
 33027                                  ;		       we provide atleast 256 bytes of stack to the user.
 33028                                  ;
 33029                                  ;		M050 - Made Lie table search CASE insensitive
 33030                                  ;
 33031                                  ;		M060 - Removed special version table from the kernal and
 33032                                  ;                      put it in a device drive which puts the address
 33033                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33034                                  ;		       as a DWORD.
 33035                                  ;
 33036                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33037                                  ;		       entry do not try to load low if there is no space in
 33038                                  ;		       UMBs.
 33039                                  ;
 33040                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33041                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33042                                  ;		       change return address to LeaveDos if AL=5.
 33043                                  ;
 33044                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33045                                  ;                      controls building a version of MSDOS.SYS that only
 33046                                  ;                      runs programs from a fixed list (defined in the
 33047                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33048                                  ;                      for details.  This feature is used to build a
 33049                                  ;                      "special" version of DOS that can be handed out to
 33050                                  ;                      OEM/ISV customers as part of a "service" disk.
 33051                                  ;
 33052                                  ; =========================================================================
 33053                                  
 33054                                  ;SAVEXIT  EQU  10
 33055                                  
 33056                                  ;BREAK	<$WAIT - return previous process error code>
 33057                                  ; =========================================================================
 33058                                  ;	$WAIT - Return previous process error code.
 33059                                  ;
 33060                                  ;	Assembler usage:
 33061                                  ;
 33062                                  ;	    MOV     AH, WaitProcess
 33063                                  ;	    INT     int_command
 33064                                  ;
 33065                                  ;	ENTRY	none
 33066                                  ;	EXIT	(ax) = exit code
 33067                                  ;	USES	all
 33068                                  ; =========================================================================
 33069                                  
 33070                                  	; 20/05/2019 - Retro DOS v4.0
 33071                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33072                                  
 33073                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33074                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33075                                  _$WAIT:
 33076                                  	; 02/08/2018 - Retro DOS v3.0
 33077                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33078                                  
 33079 00005A92 31C0                    	xor	AX,AX
 33080 00005A94 368706[3403]            	xchg	AX,[ss:exit_code]
 33081 00005A99 E99BAB                  	jmp	SYS_RET_OK
 33082                                  
 33083                                  ; =========================================================================
 33084                                  ;BREAK <$exec - load/go a program>
 33085                                  ;	EXEC.ASM - EXEC System Call
 33086                                  ;
 33087                                  ;
 33088                                  ; Assembler usage:
 33089                                  ;	    lds     DX, Name
 33090                                  ;	    les     BX, Blk
 33091                                  ;	    mov     AH, Exec
 33092                                  ;	    mov     AL, FUNC
 33093                                  ;	    int     INT_COMMAND
 33094                                  ;
 33095                                  ;	AL  Function
 33096                                  ;	--  --------
 33097                                  ;	 0  Load and execute the program.
 33098                                  ;	 1  Load, create the program header but do not
 33099                                  ;	    begin execution.
 33100                                  ;	 3  Load overlay. No header created.
 33101                                  ;
 33102                                  ;	    AL = 0 -> load/execute program
 33103                                  ;
 33104                                  ;	    +---------------------------+
 33105                                  ;	    | WORD segment address of	|
 33106                                  ;	    | environment.		|
 33107                                  ;	    +---------------------------+
 33108                                  ;	    | DWORD pointer to ASCIZ	|
 33109                                  ;	    | command line at 80h	|
 33110                                  ;	    +---------------------------+
 33111                                  ;	    | DWORD pointer to default	|
 33112                                  ;	    | FCB to be passed at 5Ch	|
 33113                                  ;	    +---------------------------+
 33114                                  ;	    | DWORD pointer to default	|
 33115                                  ;	    | FCB to be passed at 6Ch	|
 33116                                  ;	    +---------------------------+
 33117                                  ;
 33118                                  ;	    AL = 1 -> load program
 33119                                  ;
 33120                                  ;	    +---------------------------+
 33121                                  ;	    | WORD segment address of	|
 33122                                  ;	    | environment.		|
 33123                                  ;	    +---------------------------+
 33124                                  ;	    | DWORD pointer to ASCIZ	|
 33125                                  ;	    | command line at 80h	|
 33126                                  ;	    +---------------------------+
 33127                                  ;	    | DWORD pointer to default	|
 33128                                  ;	    | FCB to be passed at 5Ch	|
 33129                                  ;	    +---------------------------+
 33130                                  ;	    | DWORD pointer to default	|
 33131                                  ;	    | FCB to be passed at 6Ch	|
 33132                                  ;	    +---------------------------+
 33133                                  ;	    | DWORD returned value of	|
 33134                                  ;	    | CS:IP			|
 33135                                  ;	    +---------------------------+
 33136                                  ;	    | DWORD returned value of	|
 33137                                  ;	    | SS:IP			|
 33138                                  ;	    +---------------------------+
 33139                                  ;
 33140                                  ;	    AL = 3 -> load overlay
 33141                                  ;
 33142                                  ;	    +---------------------------+
 33143                                  ;	    | WORD segment address where|
 33144                                  ;	    | file will be loaded.	|
 33145                                  ;	    +---------------------------+
 33146                                  ;	    | WORD relocation factor to |
 33147                                  ;	    | be applied to the image.	|
 33148                                  ;	    +---------------------------+
 33149                                  ;
 33150                                  ; Returns:
 33151                                  ;	    AX = error_invalid_function
 33152                                  ;	       = error_bad_format
 33153                                  ;	       = error_bad_environment
 33154                                  ;	       = error_not_enough_memory
 33155                                  ;	       = error_file_not_found
 33156                                  ; =========================================================================
 33157                                  ;
 33158                                  ;   Revision history:
 33159                                  ;
 33160                                  ;	 A000	version 4.00  Jan. 1988
 33161                                  ;
 33162                                  ; =========================================================================
 33163                                  
 33164                                  Exec_Internal_Buffer		EQU	OPENBUF
 33165                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33166                                  
 33167                                  ; =========================================================================
 33168                                  
 33169                                  ;IF1		; warning message on buffers
 33170                                  ;%out	Please make sure that the following are contiguous and of the
 33171                                  ;%out	following sizes:
 33172                                  ;%out
 33173                                  ;%out	OpenBuf     128
 33174                                  ;%out	RenBuf	    128
 33175                                  ;%out	SearchBuf    53
 33176                                  ;%out	DummyCDS    curdirLen
 33177                                  ;ENDIF
 33178                                  
 33179                                  ; =========================================================================
 33180                                  
 33181                                  ; =========================================================================
 33182                                  ;
 33183                                  ; =========================================================================
 33184                                  
 33185                                  	; 20/05/2019 - Retro DOS v4.0
 33186                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33187                                  
 33188                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33189                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33190                                  	
 33191                                  _$EXEC:
 33192                                  	; 02/08/2018 - Retro DOS v3.0
 33193                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33194                                  
 33195                                  EXEC001S:
 33196                                  	;LocalVar    Exec_Blk		,DWORD
 33197                                  	;LocalVar    Exec_Func		,BYTE
 33198                                  	;LocalVar    Exec_Load_High	,BYTE
 33199                                  	;LocalVar    Exec_FH		,WORD
 33200                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33201                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33202                                  	;LocalVar    Exec_Environ	,WORD
 33203                                  	;LocalVar    Exec_Size		,WORD
 33204                                  	;LocalVar    Exec_Load_Block	,WORD
 33205                                  	;LocalVar    Exec_DMA		,WORD
 33206                                  	;LocalVar    ExecNameLen 	,WORD
 33207                                  	;LocalVar    ExecName		,DWORD
 33208                                  	;
 33209                                  	;LocalVar    Exec_DMA_Save	,WORD
 33210                                  	;LocalVar    Exec_NoStack	,BYTE
 33211                                  
 33212                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33213                                  	;%define	Exec_Blk	dword [bp-4]
 33214                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33215                                  	%define		Exec_BlkL	word [bp-4]	
 33216                                  	%define		Exec_BlkH	word [bp-2]
 33217                                  	%define		Exec_Func	byte [bp-5]
 33218                                  	%define		Exec_Load_High	byte [bp-6]
 33219                                  	%define		Exec_FH		word [bp-8]
 33220                                  	%define		Exec_Rel_Fac	word [bp-10]
 33221                                  	%define		Exec_Res_Len_Para word [bp-12]
 33222                                  	%define		Exec_Environ	word [bp-14]
 33223                                  	%define		Exec_Size	word [bp-16]
 33224                                  	%define		Exec_Load_Block	word [bp-18]
 33225                                  	%define		Exec_DMA	word [bp-20]
 33226                                  	%define		ExecNameLen	word [bp-22]
 33227                                  	;%define	ExecName	dword [bp-26]
 33228                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33229                                  	%define		ExecNameL	word [bp-26]	
 33230                                  	%define		ExecNameH	word [bp-24]
 33231                                  	; MSDOS 6.0
 33232                                  	%define		Exec_DMA_Save	word [bp-28]
 33233                                  	%define		Exec_NoStack	byte [bp-29]
 33234                                  	
 33235                                  	; ==================================================================
 33236                                  	; validate function
 33237                                  	; ==================================================================
 33238                                  		      	
 33239                                  	; M068 - Start
 33240                                  	;
 33241                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33242                                  	; possibility that the count may not be decremented all the way to
 33243                                  	; 0. A typical case is if the program for which we intended to keep 
 33244                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33245                                  	; calls), exits pre-maturely due to error conditions.
 33246                                  
 33247                                  	; MSDOS 6.0
 33248 00005A9C 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33249                                  
 33250                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33251                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33252                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33253                                  
 33254 00005AA2 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33255                                  	;jne	short @f
 33256 00005AA4 7505                    	jne	short Exec_@f		; N: continue
 33257                                  					; Y: change ret addr. to LeaveDos.
 33258 00005AA6 59                      	pop	cx			; Note CX is not input to ExecReady
 33259 00005AA7 B9[0404]                	mov	cx,LeaveDOS
 33260 00005AAA 51                      	push	cx
 33261                                  ;@@:
 33262                                  Exec_@f:
 33263                                  	; M068 - End
 33264                                  	
 33265                                  	;Enter
 33266                                  
 33267 00005AAB 55                      	push	bp
 33268 00005AAC 89E5                    	mov	bp,sp
 33269                                  	;;sub	sp,26	; MSDOS 3.3
 33270                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33271                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33272                                  	; 17/12/2022
 33273                                  	; 20/05/2019
 33274 00005AAE 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33275                                  
 33276                                  	; MSDOS 6.0
 33277 00005AB1 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33278                                  					; M030
 33279 00005AB3 7614                    	jna	short Exec_Check_2
 33280                                  
 33281                                  	; MSDOS 3.3
 33282                                  	;cmp	AL,3
 33283                                  	;jna	short Exec_Check_2
 33284                                  
 33285                                  Exec_Bad_Fun:
 33286 00005AB5 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33287                                  					; Extended Error Locus	;smr;SS Override
 33288                                  	;mov	al,1
 33289 00005ABB B001                    	mov	al,error_invalid_function
 33290                                  
 33291                                  Exec_Ret_Err:
 33292                                  	;Leave
 33293 00005ABD 89EC                    	mov	sp,bp
 33294 00005ABF 5D                      	pop	bp
 33295                                  	;transfer SYS_RET_ERR
 33296 00005AC0 E97DAB                  	jmp	SYS_RET_ERR
 33297                                  
 33298                                  	; MSDOS 6.0
 33299                                  ExecReadyJ:
 33300 00005AC3 E8FD17                  	call	ExecReady		; M028
 33301 00005AC6 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33302                                  
 33303                                  Exec_Check_2:
 33304 00005AC9 3C02                    	cmp	AL,2			
 33305 00005ACB 74E8                    	je	short Exec_Bad_Fun
 33306                                  
 33307                                  	; MSDOS 6.0
 33308 00005ACD 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33309 00005ACF 74E4                    	je	short Exec_Bad_Fun
 33310                                  	
 33311 00005AD1 3C05                    	cmp	al,5			; M028 ; M030
 33312 00005AD3 74EE                    	je	short ExecReadyJ	; M028
 33313                                  
 33314                                  	;mov	[bp-4],bx
 33315 00005AD5 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33316                                  	;mov	[bp-2],es
 33317 00005AD8 8C46FE                  	mov	Exec_BlkH,ES
 33318                                  	;mov	[bp-5],al
 33319 00005ADB 8846FB                  	mov	Exec_Func,AL
 33320                                  	;mov	byte [bp-6],0
 33321 00005ADE C646FA00                	mov	Exec_Load_High,0
 33322                                  
 33323                                  	;mov	[bp-26],dx
 33324 00005AE2 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33325                                  	;mov	[bp-24],ds
 33326 00005AE5 8C5EE8                  	mov	ExecNameH,DS
 33327 00005AE8 89D6                    	mov	SI,DX			; move pointer to convenient place
 33328                                  	;invoke	DStrLen
 33329 00005AEA E8F2B6                  	call	DStrLen
 33330                                  	;mov	[bp-22],cx
 33331 00005AED 894EEA                  	mov	ExecNameLen,CX		; save length
 33332                                  
 33333                                  	; MSDOS 6.0
 33334 00005AF0 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33335 00005AF4 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33336                                  
 33337 00005AF8 30C0                    	xor	AL,AL			; open for reading
 33338 00005AFA 55                      	push	BP
 33339                                  
 33340                                  	; MSDOS 6.0
 33341                                  	;or	byte [ss:DOS_FLAG],1
 33342 00005AFB 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33343                                  					; the redir that this open call is
 33344                                  					; due to an exec.
 33345                                  
 33346                                  	;invoke	$OPEN			; is the file there?
 33347 00005B01 E80513                  	call	_$OPEN
 33348                                  
 33349                                  	; MSDOS 6.0
 33350 00005B04 9C                      	pushf
 33351                                  	; 02/06/2019
 33352                                  	;and	byte [ss:DOS_FLAG],0FEh
 33353 00005B05 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33354 00005B0B 9D                      	popf
 33355                                  
 33356 00005B0C 5D                      	pop	BP
 33357                                  
 33358                                  	; MSDOS 3.3 & MSDOS 6.0
 33359 00005B0D 72AE                    	jc	short Exec_Ret_Err
 33360                                  
 33361                                  	;mov	[bp-8],ax
 33362 00005B0F 8946F8                  	mov	Exec_FH,AX
 33363 00005B12 89C3                    	mov	BX,AX
 33364 00005B14 30C0                    	xor	AL,AL
 33365                                  	;invoke	$Ioctl
 33366 00005B16 E808C7                  	call	_$IOCTL
 33367 00005B19 7207                    	jc	short Exec_BombJ
 33368                                  
 33369                                  	;test	dl,80h
 33370 00005B1B F6C280                  	test	DL,devid_ISDEV
 33371 00005B1E 740A                    	jz	short Exec_Check_Environ
 33372                                  
 33373                                  	;mov	al,2
 33374 00005B20 B002                    	mov	AL,error_file_not_found
 33375                                  Exec_BombJ:
 33376 00005B22 E9CA00                  	jmp	Exec_Bomb
 33377                                  
 33378                                  BadEnv:
 33379                                  	;mov	al,0Ah
 33380 00005B25 B00A                    	mov	AL,error_bad_environment
 33381 00005B27 E9C500                  	jmp	Exec_Bomb
 33382                                  
 33383                                  Exec_Check_Environ:
 33384                                  	;mov	word [bp-18],0
 33385 00005B2A C746EE0000              	mov	Exec_Load_Block,0
 33386                                  	;mov	word [bp-14],0
 33387 00005B2F C746F20000              	mov	Exec_Environ,0
 33388                                  					; overlays... no environment
 33389                                  	;test	byte [bp-5],2
 33390 00005B34 F646FB02                	test	Exec_Func,exec_func_overlay
 33391 00005B38 7552                    	jnz	short Exec_Read_Header
 33392                                  
 33393                                  	;lds	si,[bp-4]
 33394 00005B3A C576FC                  	lds	SI,Exec_Blk		; get block
 33395 00005B3D 8B04                    	mov	ax,[SI]
 33396                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33397 00005B3F 09C0                    	or	AX,AX
 33398 00005B41 750C                    	jnz	short Exec_Scan_Env
 33399                                  
 33400 00005B43 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33401                                  	;mov	ax,[44]
 33402 00005B48 A12C00                  	mov	AX,[PDB.ENVIRON]
 33403                                  
 33404                                  ; MSDOS 6.0
 33405                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33406                                  ;
 33407                                  ; Exec_environ is being correctly initialized after the environment has been
 33408                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33409                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33410                                  ; parent's environment.
 33411                                  ;	mov	Exec_Environ,AX
 33412                                  ;
 33413                                  ;----------------------------------------------------------------------------
 33414                                  
 33415                                  	;mov	[bp-14],ax
 33416                                  	;mov	Exec_Environ,ax
 33417                                  
 33418 00005B4B 09C0                    	or	AX,AX
 33419 00005B4D 743D                    	jz	short Exec_Read_Header
 33420                                  
 33421                                  Exec_Scan_Env:
 33422 00005B4F 8EC0                    	mov	ES,AX
 33423 00005B51 31FF                    	xor	DI,DI
 33424                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33425 00005B53 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33426 00005B56 30C0                    	xor	AL,AL
 33427                                  
 33428                                  Exec_Get_Environ_Len:
 33429 00005B58 F2AE                    	repnz	scasb			; find that nul byte
 33430 00005B5A 75C9                    	jnz	short BadEnv
 33431                                  
 33432 00005B5C 49                      	dec	CX			; Dec CX for the next nul byte test
 33433 00005B5D 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33434                                  
 33435 00005B5F AE                      	scasb				; is there another nul byte?
 33436 00005B60 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33437                                  
 33438 00005B62 57                      	push	DI
 33439                                  	;lea	bx,[DI+11h]
 33440 00005B63 8D5D11                  	lea	BX,[DI+0Fh+2]
 33441                                  	;add	bx,[bp-22]
 33442 00005B66 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33443                                  					; remember argv[0] length
 33444                                  					; round up and remember argc
 33445 00005B69 B104                    	mov	CL,4
 33446 00005B6B D3EB                    	shr	BX,CL			; number of paragraphs needed
 33447 00005B6D 06                      	push	ES
 33448                                  	;invoke	$Alloc			; can we get the space?
 33449 00005B6E E84406                  	call	_$ALLOC
 33450 00005B71 1F                      	pop	DS
 33451 00005B72 59                      	pop	CX
 33452                                  
 33453                                  	;jnc	short Exec_Save_Environ
 33454                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33455                                  	; 17/12/2022
 33456 00005B73 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33457                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33458                                  	;jnc	short Exec_Save_Environ
 33459                                  	;jmp	SHORT Exec_No_Mem
 33460                                  
 33461                                  Exec_Save_Environ:
 33462 00005B75 8EC0                    	mov	ES,AX
 33463                                  	;mov	[bp-14],ax
 33464 00005B77 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33465 00005B7A 31F6                    	xor	SI,SI
 33466 00005B7C 89F7                    	mov	DI,SI
 33467 00005B7E F3A4                    	rep	movsb			; copy the environment
 33468 00005B80 B80100                  	mov	AX,1
 33469 00005B83 AB                      	stosw
 33470                                  	;lds	si,[bp-26]
 33471 00005B84 C576E6                  	lds	SI,ExecName
 33472                                  	;mov	cx,[bp-22]
 33473 00005B87 8B4EEA                  	mov	CX,ExecNameLen
 33474 00005B8A F3A4                    	rep	movsb
 33475                                  
 33476                                  Exec_Read_Header:
 33477                                  	; We read in the program header into the above data area and
 33478                                  	; determine where in this memory the image will be located.
 33479                                  
 33480                                  	;Context DS
 33481 00005B8C 16                      	push	ss
 33482 00005B8D 1F                      	pop	ds
 33483                                  	;mov	cx,26
 33484 00005B8E B91A00                  	mov	CX,exec_header_len	; header size
 33485 00005B91 BA[C80F]                	mov	DX,exec_signature
 33486 00005B94 06                      	push	ES
 33487 00005B95 1E                      	push	DS
 33488 00005B96 E88304                  	call	ExecRead
 33489 00005B99 1F                      	pop	DS
 33490 00005B9A 07                      	pop	ES
 33491 00005B9B 7250                    	jc	short Exec_Bad_File
 33492                                  
 33493 00005B9D 09C0                    	or	AX,AX
 33494 00005B9F 744C                    	jz	short Exec_Bad_File
 33495                                  	;cmp	ax,26
 33496 00005BA1 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33497 00005BA4 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33498                                  
 33499 00005BA6 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33500 00005BAC 7504                    	jnz	short Exec_Check_Sig
 33501                                  
 33502                                  	;mov	byte [bp-6],0FFh
 33503 00005BAE C646FAFF                	mov	Exec_Load_High,-1
 33504                                  
 33505                                  Exec_Check_Sig:
 33506 00005BB2 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33507                                  	;cmp	ax,5A4Dh ; 'MZ'
 33508 00005BB5 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33509 00005BB8 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33510                                  
 33511                                  	;cmp	ax,4D5Ah ; 'ZM'
 33512 00005BBA 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33513 00005BBD 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33514                                  
 33515                                  Exec_Com_Filej:
 33516 00005BBF E9E901                  	jmp	Exec_Com_File
 33517                                  
 33518                                  	; We have the program header... determine memory requirements
 33519                                  
 33520                                  Exec_Save_Start:
 33521 00005BC2 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33522 00005BC5 B105                    	mov	CL,5			; convert to paragraphs
 33523 00005BC7 D3E0                    	shl	AX,CL
 33524 00005BC9 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33525                                  	;mov	[bp-12],ax
 33526 00005BCD 8946F4                  	mov	Exec_Res_Len_Para,AX
 33527                                  
 33528                                  		; Do we need to allocate memory?
 33529                                  		; Yes if function is not load-overlay
 33530                                  
 33531                                  	;test	byte [bp-5],2
 33532 00005BD0 F646FB02                	test	Exec_Func,exec_func_overlay
 33533 00005BD4 7445                    	jz	short Exec_Allocate	; allocation of space
 33534                                  
 33535                                  		; get load address from block
 33536                                  
 33537                                  	;les	di,[bp-4]
 33538 00005BD6 C47EFC                  	les	DI,Exec_Blk
 33539 00005BD9 268B05                  	mov	ax,[es:di]
 33540                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33541                                  	;mov	[bp-20],ax
 33542 00005BDC 8946EC                  	mov	Exec_DMA,AX
 33543                                  
 33544                                  	; 17/12/2022
 33545                                  	;;mov	ax,[es:di+2]
 33546                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33547                                  	;;mov	[bp-10],ax
 33548                                  	;mov	Exec_Rel_Fac,AX
 33549                                  
 33550                                  	; 17/12/2022
 33551                                  	; 30/11/2022 (!most proper code!)
 33552                                  	;mov	dx,[es:di+2]
 33553 00005BDF 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33554                                  	;mov	[bp-10],dx
 33555 00005BE3 8956F6                  	mov	Exec_Rel_Fac,dx
 33556                                  	; ax = Exec_DMA
 33557 00005BE6 E9DE00                  	jmp	Exec_Find_Res
 33558                                  
 33559                                  ; 17/12/2022
 33560                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33561                                  ; 27/09/2023
 33562                                  %if 0
 33563                                  	; 02/06/2019 - Retro DOS v4.0
 33564                                  	;mov	ax,[bp-20]  ; *+*
 33565                                  	mov	AX,Exec_DMA ; *+*
 33566                                  	; 10/08/2018
 33567                                  	jmp	Exec_Find_Res		; M000
 33568                                  %endif
 33569                                  
 33570                                  Exec_No_Mem:
 33571                                  	;mov	al,8
 33572 00005BE9 B008                    	mov	AL,error_not_enough_memory
 33573 00005BEB EB02                    	jmp	short Exec_Bomb
 33574                                  
 33575                                  Exec_Bad_File:
 33576                                  	;mov	al,0Bh
 33577 00005BED B00B                    	mov	AL,error_bad_format
 33578                                  
 33579                                  Exec_Bomb:
 33580                                  	;mov	bx,[bp-8]
 33581 00005BEF 8B5EF8                  	mov	BX,Exec_FH
 33582 00005BF2 E84004                  	call	Exec_Dealloc
 33583                                  	;LeaveCrit CritMem
 33584 00005BF5 E816B7                  	call	LCritMEM
 33585                                  	;save	<AX,BP>
 33586 00005BF8 50                      	push	ax
 33587 00005BF9 55                      	push	bp
 33588                                  	;invoke	$CLOSE
 33589 00005BFA E83D0A                  	call	_$CLOSE
 33590                                  	;restore <BP,AX>
 33591 00005BFD 5D                      	pop	bp
 33592 00005BFE 58                      	pop	ax
 33593 00005BFF E9BBFE                  	jmp	Exec_Ret_Err
 33594                                  
 33595                                  Exec_Chk_Mem: 
 33596                                  
 33597                                  	; 24/09/2023
 33598                                  	; ds = DOSDATA
 33599                                  ; 17/12/2022
 33600                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33601                                  ;%if 0
 33602                                  	; MSDOS 6.0    			; M063 - Start
 33603                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33604                                  	; 10/06/2019
 33605 00005C02 A0[0203]                	mov	al,[AllocMethod]
 33606                                  	;mov	bl,[ss:ALLOCMSAVE]
 33607 00005C05 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33608                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33609 00005C09 881E[0203]              	mov	[AllocMethod],bl
 33610                                  	
 33611 00005C0D F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33612 00005C10 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33613                                  	;				; N: continue
 33614                                  	;
 33615 00005C12 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33616 00005C14 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33617                                  	; 02/06/2019
 33618                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33619 00005C16 A1[8A00]                	mov	ax,[SAVE_AX]
 33620                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33621                                  					; M063 - End
 33622 00005C19 EB2B                    	jmp	short Exec_Norm_Alloc1
 33623                                  ;%endif
 33624                                  
 33625                                  ; 17/12/2022
 33626                                  %if 0
 33627                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33628                                  	; MSDOS 6.0    			; M063 - Start
 33629                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33630                                  	mov	bl,[ss:ALLOCMSAVE]
 33631                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33632                                  
 33633                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33634                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33635                                  	;				; N: continue
 33636                                  	;
 33637                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33638                                  	jz	short Exec_No_Mem	; N: no memory 
 33639                                  
 33640                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33641                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33642                                  					; M063 - End
 33643                                  %endif
 33644                                  
 33645                                  Exec_Allocate:
 33646                                  	; 09/09/2018
 33647                                  
 33648                                  	; M005 - START
 33649                                  	; If there is no STACK segment for this exe file and if this
 33650                                  	; not an overlay and the resident size is less than 64K - 
 33651                                  	; 256 bytes we shall add 256 bytes to the programs 
 33652                                  	; resident memory requirement and set Exec_SP to this value.
 33653                                  	
 33654                                  	; 17/12/2022
 33655 00005C1B 29DB                    	sub	bx,bx ; 0	
 33656                                  
 33657                                  	; MSDOS 6.0
 33658                                  	;;mov	byte [bp-29],0
 33659                                  	;mov	Exec_NoStack,0
 33660                                  	; 17/12/2022
 33661 00005C1D 885EE3                  	mov	Exec_NoStack,bl ; 0
 33662 00005C20 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33663                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33664 00005C24 7511                    	jne	short ea1		; Y: continue normal processing
 33665 00005C26 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33666                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33667 00005C2A 750B                    	jne	short ea1		; Y: continue normal processing
 33668                                  
 33669                                  	;inc	byte [bp-29]
 33670 00005C2C FE46E3                  	inc	Exec_NoStack
 33671 00005C2F 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33672 00005C32 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33673                                  
 33674 00005C34 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33675                                  ea1:
 33676                                  	; M005 - END
 33677                                  
 33678                                  	; MSDOS 6.0			; M000 - start
 33679                                  	; 20/05/2019
 33680                                  	; (ds = ss = DOSDATA)
 33681 00005C37 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33682                                  					; Q: is the alloc strat high_first
 33683 00005C3C 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33684                                  					; Y: set high_only bit
 33685 00005C3E 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33686                                  					; M000 - end
 33687                                  Exec_Norm_Alloc:
 33688 00005C43 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33689                                  Exec_Norm_Alloc1:	; 02/06/2019
 33690                                  					; M000: attempt at allocating memory
 33691                                  	; MSDOS 3.3
 33692                                  	;push	ax			; M000
 33693                                  
 33694 00005C46 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33695 00005C49 1E                      	push	DS
 33696                                  	;invoke	$Alloc			; should have carry set and BX has max
 33697 00005C4A E86805                  	call	_$ALLOC
 33698 00005C4D 1F                      	pop	DS
 33699                                  
 33700                                  	; MSDOS 6.0
 33701 00005C4E A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33702                                  	; MSDOS 3.3
 33703                                  	;pop	ax			; M000
 33704                                  
 33705 00005C51 83C010                  	add	AX,10h			; room for header
 33706 00005C54 83FB11                  	cmp	BX,11h			; enough room for a header
 33707                                  	; MSDOS 6.0
 33708 00005C57 72A9                    	jb	short Exec_Chk_Mem	; M000
 33709                                  	; MSDOS 3.3	
 33710                                  	;jb	short Exec_No_Mem
 33711                                  
 33712 00005C59 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33713                                  	; MSDOS 6.0
 33714 00005C5B 77A5                    	ja	short Exec_Chk_Mem	; M000
 33715                                  	; MSDOS 3.3
 33716                                  	;ja	short Exec_No_Mem
 33717                                  
 33718                                  	;test	byte [bp-6],0FFh
 33719 00005C5D F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33720 00005C61 7518                    	jnz	short Exec_BX_Max	; use max
 33721                                  
 33722                                  	; 09/09/2018
 33723                                  
 33724 00005C63 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33725                                  	; MSDOS 6.0
 33726 00005C67 7299                    	jc	short Exec_Chk_Mem		; M000
 33727                                  	; MSDOS 3.3
 33728                                  	;jc	short Exec_No_Mem
 33729                                  
 33730 00005C69 39D8                    	cmp	AX,BX			; enough space?
 33731                                  	; MSDOS 6.0
 33732 00005C6B 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33733                                  	; MSDOS 3.3
 33734                                  	;ja	short Exec_No_Mem
 33735                                  
 33736 00005C6D 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33737 00005C71 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33738 00005C75 7204                    	jc	short Exec_BX_Max
 33739                                  
 33740 00005C77 39D8                    	cmp	AX,BX
 33741 00005C79 7602                    	jbe	short Exec_Got_Block
 33742                                  
 33743                                  Exec_BX_Max:
 33744 00005C7B 89D8                    	mov	AX,BX
 33745                                  
 33746                                  Exec_Got_Block:
 33747                                  	; 03/08/2018 - Retro DOS v3.0
 33748                                  
 33749 00005C7D 1E                      	push	DS
 33750 00005C7E 89C3                    	mov	BX,AX
 33751                                  	;mov	[bp-16],bx
 33752 00005C80 895EF0                  	mov	Exec_Size,BX
 33753                                  	;invoke	$Alloc			; get the space
 33754 00005C83 E82F05                  	call	_$ALLOC
 33755 00005C86 1F                      	pop	DS
 33756                                  	; MSDOS 6.0
 33757                                  	;jc	short Exec_Chk_Mem	; M000
 33758                                  	; MSDOS 3.3
 33759                                  	;;jc	short Exec_No_Mem
 33760                                  	; 20/05/2019
 33761 00005C87 7303                    	jnc	short ea0
 33762 00005C89 E976FF                  	jmp	Exec_Chk_Mem
 33763                                  ea0:
 33764                                  	; MSDOS 6.0
 33765 00005C8C 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33766 00005C90 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33767                                  
 33768                                  ;M029; Begin changes
 33769                                  ; This code does special handling for programs with no stack segment. If so,
 33770                                  ;check if the current block is larger than 64K. If so, we do not modify
 33771                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33772                                  ;case Exec_SS is not changed.
 33773                                  
 33774                                  	; MSDOS 6.0
 33775                                  	;cmp	byte [bp-29],0
 33776 00005C94 807EE300                	cmp	Exec_NoStack,0
 33777                                  	;je	@f
 33778 00005C98 7412                    	je	short ea2
 33779                                  
 33780 00005C9A 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33781                                  	;jae	@f			; Y: Exec_SP = 0
 33782 00005C9E 730C                    	jae	short ea2
 33783                                  
 33784                                  ;Make Exec_SP point at the top of the memory block
 33785                                  
 33786 00005CA0 B104                    	mov	cl,4
 33787 00005CA2 D3E3                    	shl	bx,cl			; get byte offset
 33788 00005CA4 81EB0001                	sub	bx,100h			; take care of PSP
 33789 00005CA8 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33790                                  ea2:
 33791                                  ;@@:
 33792                                  ;M029; end changes
 33793                                  
 33794                                  	;mov	[bp-18],ax
 33795 00005CAC 8946EE                  	mov	Exec_Load_Block,AX
 33796 00005CAF 83C010                  	add	AX,10h
 33797                                  	;test	byte [bp-6],0FFh
 33798 00005CB2 F646FAFF                	test	Exec_Load_High,-1
 33799 00005CB6 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33800                                  
 33801                                  	;add	ax,[bp-16]
 33802 00005CB8 0346F0                  	add	AX,Exec_Size		; go to end
 33803                                  	;sub	ax,[bp-12]
 33804 00005CBB 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33805 00005CBE 83E810                  	sub	AX,10h			; drop off pdb
 33806                                  
 33807                                  Exec_Use_AX:
 33808                                  	;mov	[bp-10],ax
 33809 00005CC1 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33810                                  	;mov	[bp-20],ax
 33811 00005CC4 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33812                                  
 33813                                  	; Determine the location in the file of the beginning of
 33814                                  	; the resident
 33815                                  
 33816                                  ; 17/12/2022
 33817                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33818                                  ;%if 0
 33819                                  
 33820                                  Exec_Find_Res:
 33821                                  	; MSDOS 6.0
 33822                                  	;;mov	dx,[bp-20]
 33823                                  	;mov	DX,Exec_DMA ; *+*
 33824                                  	;;mov	[bp-28],dx
 33825                                  	;mov	Exec_DMA_Save,DX
 33826                                  
 33827                                  	; 17/12/2022
 33828                                  	; AX = Exec_DMA
 33829                                  
 33830                                  	; 02/06/2019 - Retro DOS v4.0
 33831                                  	;mov	[bp-28],ax ; *+*
 33832 00005CC7 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33833                                  
 33834                                  ;%endif
 33835                                  
 33836                                  ; 17/12/2022
 33837                                  %if 0
 33838                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33839                                  Exec_Find_Res:
 33840                                  	;mov	dx,[bp-20]
 33841                                  	mov	DX,Exec_DMA ; *+*
 33842                                  	;mov	[bp-28],dx
 33843                                  	mov	Exec_DMA_Save,DX
 33844                                  %endif
 33845                                  
 33846                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33847 00005CCA 8B16[D00F]              	mov	DX,[exec_par_dir]
 33848 00005CCE 52                      	push	DX
 33849 00005CCF B104                    	mov	CL,4
 33850 00005CD1 D3E2                    	shl	DX,CL			; low word of location
 33851 00005CD3 58                      	pop	AX
 33852 00005CD4 B10C                    	mov	CL,12
 33853 00005CD6 D3E8                    	shr	AX,CL			; high word of location
 33854 00005CD8 89C1                    	mov	CX,AX			; CX <- high
 33855                                  
 33856                                  		; Read in the resident image (first, seek to it)
 33857                                  	;mov	bx,[bp-8]
 33858 00005CDA 8B5EF8                  	mov	BX,Exec_FH
 33859 00005CDD 1E                      	push	DS
 33860 00005CDE 30C0                    	xor	AL,AL
 33861                                  	;invoke	$Lseek			; Seek to resident
 33862 00005CE0 E8D30A                  	call	_$LSEEK
 33863 00005CE3 1F                      	pop	DS
 33864 00005CE4 7303                    	jnc	short Exec_Big_Read
 33865                                  
 33866 00005CE6 E906FF                  	jmp	Exec_Bomb
 33867                                  
 33868                                  Exec_Big_Read:				; Read resident into memory
 33869                                  	;mov	bx,[bp-12]
 33870 00005CE9 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33871 00005CEC 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33872 00005CF0 7203                    	jb	short Exec_Read_OK
 33873                                  
 33874 00005CF2 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33875                                  
 33876                                  Exec_Read_OK:
 33877                                  	;sub	[bp-12],bx
 33878 00005CF5 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33879 00005CF8 53                      	push	BX
 33880 00005CF9 B104                    	mov	CL,4
 33881 00005CFB D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33882 00005CFD 89D9                    	mov	CX,BX			; Count in correct register
 33883 00005CFF 1E                      	push	DS
 33884                                  	;mov	ds,[bp-20]
 33885 00005D00 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33886                                  
 33887 00005D03 31D2                    	xor	DX,DX
 33888 00005D05 51                      	push	CX			; Save our count
 33889 00005D06 E81303                  	call	ExecRead
 33890 00005D09 59                      	pop	CX			; Get old count to verify
 33891 00005D0A 1F                      	pop	DS
 33892 00005D0B 7248                    	jc	short Exec_Bad_FileJ
 33893                                  
 33894 00005D0D 39C1                    	cmp	CX,AX			; Did we read enough?
 33895 00005D0F 5B                      	pop	BX			; Get paragraph count back
 33896 00005D10 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33897                                  
 33898                                  	; The read did not match the request. If we are off by 512
 33899                                  	; bytes or more then the header lied and we have an error.
 33900                                  
 33901 00005D12 29C1                    	sub	CX,AX
 33902 00005D14 81F90002                	cmp	CX,512
 33903 00005D18 733B                    	jae	short Exec_Bad_FileJ
 33904                                  
 33905                                  	; We've read in CX bytes... bump DTA location
 33906                                  
 33907                                  ExecCheckEnd:
 33908                                  	;add	[bp-20],bx
 33909 00005D1A 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33910                                  	;test	word [bp-12],0FFFFh
 33911 00005D1D F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33912 00005D22 75C5                    	jnz	short Exec_Big_Read
 33913                                  
 33914                                  	; The image has now been read in. We must perform relocation
 33915                                  	; to the current location.
 33916                                  
 33917                                  exec_do_reloc:
 33918                                  	;mov	cx,[bp-10]
 33919 00005D24 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33920 00005D27 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33921 00005D2A 01C8                    	add	AX,CX			; and relocate him
 33922 00005D2C A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33923                                  
 33924 00005D2F A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33925 00005D32 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33926                                  
 33927 00005D35 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33928 00005D39 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33929 00005D3C 8CC0                    	mov	AX,ES			; rms;NSS
 33930 00005D3E 01C8                    	add	AX,CX			; relocated...
 33931 00005D40 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33932                                  
 33933 00005D43 31C9                    	xor	CX,CX
 33934 00005D45 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33935                                  	;mov	bx,[bp-8]
 33936 00005D49 8B5EF8                  	mov	BX,Exec_FH
 33937 00005D4C 1E                      	push	DS
 33938 00005D4D 31C0                    	xor	AX,AX
 33939                                  	;invoke	$Lseek
 33940 00005D4F E8640A                  	call	_$LSEEK
 33941 00005D52 1F                      	pop	DS
 33942 00005D53 7303                    	jnc	short exec_get_entries
 33943                                  
 33944                                  Exec_Bad_FileJ:
 33945 00005D55 E995FE                  	jmp	Exec_Bad_File
 33946                                  
 33947                                  exec_get_entries:
 33948 00005D58 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33949                                  
 33950                                  exec_read_reloc:
 33951 00005D5C 52                      	push	DX
 33952                                  	;mov	dx,OPENBUF
 33953 00005D5D BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33954                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33955                                  	;mov	cx,396 ; MSDOS 6.0
 33956 00005D60 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33957 00005D63 1E                      	push	DS
 33958 00005D64 E8B502                  	call	ExecRead
 33959 00005D67 07                      	pop	ES
 33960 00005D68 5A                      	pop	DX
 33961 00005D69 72EA                    	jc	short Exec_Bad_FileJ
 33962                                  
 33963                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33964                                  	;mov	cx,99 ;  MSDOS 6.0
 33965 00005D6B B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33966                                  					; Pointer to byte location in header
 33967                                  	;mov	di,OPENBUF
 33968 00005D6E BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33969                                  	;mov	si,[bp-10]
 33970 00005D71 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33971                                  
 33972                                  exec_reloc_one:
 33973 00005D74 09D2                    	or	DX,DX			; Any more entries?
 33974 00005D76 7416                    	jz	short Exec_Set_PDBJ
 33975                                  
 33976                                  exec_get_addr:
 33977 00005D78 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33978 00005D7B 8CD8                    	mov	AX,DS			; Relocate address of item
 33979                                  
 33980                                  	; MSDOS 6.0
 33981                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33982                                  	;add	ax,[bp-28]
 33983 00005D7D 0346E4                  	add	AX,Exec_DMA_Save
 33984                                  
 33985 00005D80 8ED8                    	mov	DS,AX
 33986 00005D82 0137                    	add	[BX],SI
 33987 00005D84 83C704                  	add	DI,4
 33988 00005D87 4A                      	dec	DX
 33989 00005D88 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33990                                  
 33991                                  	; We've exhausted a single buffer's worth. Read in the next
 33992                                  	; piece of the relocation table.
 33993                                  
 33994 00005D8A 06                      	push	ES
 33995 00005D8B 1F                      	pop	DS
 33996 00005D8C EBCE                    	jmp	short exec_read_reloc
 33997                                  
 33998                                  Exec_Set_PDBJ:
 33999                                  	; MSDOS 6.0
 34000                                  	
 34001                                  	; We now determine if this is a buggy exe packed file and if 
 34002                                  	; so we patch in the right code. Note that fixexepatch will
 34003                                  	; point to a ret if dos loads low. The load segment as 
 34004                                  	; determined above will be in exec_dma_save
 34005                                  	
 34006 00005D8E 06                      	push	es
 34007 00005D8F 50                      	push	ax			; M030
 34008 00005D90 51                      	push	cx			; M030
 34009                                  	;mov	es,[bp-28]
 34010 00005D91 8E46E4                  	mov	es,Exec_DMA_Save
 34011 00005D94 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34012 00005D98 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34013 00005D9D 36FF16[F311]            	call	word [ss:FixExePatch]
 34014                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34015                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34016                                  	;call	word [ss:Rational386PatchPtr]
 34017 00005DA2 59                      	pop	cx			; M030
 34018 00005DA3 58                      	pop	ax			; M030
 34019 00005DA4 07                      	pop	es
 34020                                  
 34021 00005DA5 E9DE00                  	jmp	Exec_Set_PDB
 34022                                  
 34023                                  Exec_No_Memj:
 34024 00005DA8 E93EFE                  	jmp	Exec_No_Mem
 34025                                  
 34026                                  	; we have a .COM file. First, determine if we are merely
 34027                                  	; loading an overlay.
 34028                                  
 34029                                  Exec_Com_File:
 34030                                  	;test	byte [bp-5],2
 34031 00005DAB F646FB02                	test	Exec_Func,exec_func_overlay
 34032 00005DAF 742D                    	jz	short Exec_Alloc_Com_File
 34033                                  	;lds	si,[bp-4]
 34034 00005DB1 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34035 00005DB4 AD                      	lodsw				; get load address
 34036                                  	;mov	[bp-20],ax
 34037 00005DB5 8946EC                  	mov	Exec_DMA,AX
 34038 00005DB8 B8FFFF                  	mov	AX,0FFFFh
 34039 00005DBB EB63                    	jmp	short Exec_Read_Block	; read it all!
 34040                                  
 34041                                  Exec_Chk_Com_Mem:			
 34042                                  	; MSDOS 6.0	     		; M063 - Start
 34043 00005DBD 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34044 00005DC1 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34045 00005DC6 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34046 00005DCB F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34047 00005DCE 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34048                                  					; N: continue
 34049                                  	
 34050 00005DD0 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34051 00005DD2 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 34052                                  	
 34053                                  	;mov	ax,[bp-18]
 34054 00005DD4 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 34055 00005DD7 31DB                    	xor	bx,bx			; M047: bx => free arena
 34056 00005DD9 E87502                  	call	ChangeOwner		; M047: free this block
 34057                                  	
 34058 00005DDC EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34059                                  					; M063 - End
 34060                                  	
 34061                                  	; We must allocate the max possible size block (ick!)
 34062                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34063                                  	; size of block.
 34064                                  
 34065                                  Exec_Alloc_Com_File:
 34066                                  	; MSDOS 6.0			; M000 -start
 34067 00005DDE 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34068                                  					; Q: is the alloc strat high_first
 34069 00005DE4 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34070                                  					; Y: set high_only bit
 34071 00005DE6 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34072                                  					; M000 - end
 34073                                  Exec_Norm_Com_Alloc:			; M000
 34074                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34075 00005DEC BBFFFF                  	mov	BX,0FFFFh
 34076                                  	;invoke	$Alloc			; largest piece available as error
 34077 00005DEF E8C303                  	call	_$ALLOC
 34078 00005DF2 09DB                    	or	BX,BX
 34079                                  	; MSDOS 6.0
 34080 00005DF4 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34081                                  	; MSDOS 3.3
 34082                                  	;jz	short Exec_No_Memj
 34083                                  
 34084                                  	;mov	[bp-16],bx
 34085 00005DF6 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34086 00005DF9 53                      	push	BX
 34087                                  	;invoke	$ALLOC			; largest piece available
 34088 00005DFA E8B803                  	call	_$ALLOC
 34089 00005DFD 5B                      	pop	BX			; get size of block...
 34090                                  	;mov	[bp-18],ax
 34091 00005DFE 8946EE                  	mov	Exec_Load_Block,AX
 34092                                  
 34093 00005E01 83C010                  	add	AX,10h			; increment for header
 34094                                  	;mov	[bp-20],ax
 34095 00005E04 8946EC                  	mov	Exec_DMA,AX
 34096                                  
 34097 00005E07 31C0                    	xor	AX,AX			; presume 64K read...
 34098 00005E09 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34099 00005E0D 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34100                                  
 34101 00005E0F 89D8                    	mov	AX,BX			; convert size to bytes
 34102 00005E11 B104                    	mov	CL,4
 34103 00005E13 D3E0                    	shl	AX,CL
 34104                                  	; 17/12/2022
 34105                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34106                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34107                                  	; MSDOS 5.0
 34108                                  	;cmp	AX,100h   
 34109                                  	; 02/06/2019 - Retro DOS v4.0
 34110                                  	; MSDOS 6.0
 34111                                          ; 17/12/2022
 34112 00005E15 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34113 00005E18 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34114                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34115                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34116                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34117                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34118                                  
 34119                                  					; M047: size of the block is < 64K
 34120 00005E1A 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34121                                  
 34122                                  Exec_Read_Com:
 34123                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34124 00005E1D 2D0001                  	sub	AX,100h 		; remember size of psp
 34125                                  Exec_Read_Block:
 34126 00005E20 50                      	push	AX			; save number to read
 34127                                  	;mov	bx,[bp-8]
 34128 00005E21 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34129 00005E24 31C9                    	xor	CX,CX			; but seek to 0:0
 34130 00005E26 89CA                    	mov	DX,CX
 34131 00005E28 31C0                    	xor	AX,AX			; seek relative to beginning
 34132                                  	;invoke	$Lseek			; back to beginning of file
 34133 00005E2A E88909                  	call	_$LSEEK
 34134 00005E2D 59                      	pop	CX			; number to read
 34135                                  	;mov	ds,[bp-20]
 34136 00005E2E 8E5EEC                  	mov	DS,Exec_DMA
 34137 00005E31 31D2                    	xor	DX,DX
 34138 00005E33 51                      	push	CX
 34139 00005E34 E8E501                  	call	ExecRead
 34140 00005E37 5E                      	pop	SI			; get number of bytes to read
 34141 00005E38 7303                    	jnc	short OkRead
 34142 00005E3A E9B0FD                  	jmp	Exec_Bad_File
 34143                                  
 34144                                  	; 10/09/2018
 34145                                  OkRead:
 34146 00005E3D 39F0                    	cmp	AX,SI			; did we read them all?
 34147                                  	; MSDOS 6.0
 34148                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 34149                                  	; MSDOS 3.3
 34150                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34151 00005E3F 7503                    	jne	short OkRead2
 34152 00005E41 E979FF                  	jmp	Exec_Chk_Com_Mem
 34153                                  OkRead2:
 34154                                  	; MSDOS 6.0
 34155 00005E44 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34156 00005E49 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34157                                  
 34158                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34159                                  	;test	byte [bp-5],2
 34160 00005E4E F646FB02                	test	Exec_Func,exec_func_overlay
 34161 00005E52 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34162                                  
 34163                                  	;mov	ax,[bp-20]
 34164 00005E54 8B46EC                  	mov	AX,Exec_DMA
 34165 00005E57 83E810                  	sub	AX,10h
 34166 00005E5A 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34167 00005E5E 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34168                                  
 34169                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34170                                  	; of 0 on stack.
 34171                                  
 34172 00005E65 81C6FE00                	add	SI,0FEh 		; make room for stack
 34173                                  
 34174                                  	; MSDOS 6.0
 34175 00005E69 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34176 00005E6C 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34177 00005E6E 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34178                                  
 34179                                  Exec_St_Ok:
 34180                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34181 00005E72 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34182 00005E77 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34183 00005E7B 8ED8                    	mov	DS,AX
 34184 00005E7D C7040000                	mov	WORD [SI],0		; 0 for return
 34185                                  
 34186                                  	; MSDOS 6.0
 34187                                  
 34188                                  	; M068
 34189                                  	;
 34190                                  	; We now determine if this is a Copy Protected App. If so the 
 34191                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 34192                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34193                                  
 34194 00005E81 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34195                                  
 34196                                  Exec_Set_PDB:
 34197                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34198                                  	;mov	bx,[bp-8]
 34199 00005E86 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34200 00005E89 E8A901                  	call	Exec_Dealloc
 34201 00005E8C 55                      	push	BP
 34202                                  	;invoke	$Close			; release the jfn
 34203 00005E8D E8AA07                  	call	_$CLOSE
 34204 00005E90 5D                      	pop	BP
 34205 00005E91 E89301                  	call	Exec_Alloc
 34206                                  	;test	byte [bp-5],2
 34207 00005E94 F646FB02                	test	Exec_Func,exec_func_overlay
 34208 00005E98 743A                    	jz	short Exec_Build_Header
 34209                                  
 34210                                  	; MSDOS 6.0
 34211 00005E9A E8C201                  	call	Scan_Execname
 34212 00005E9D E8D601                  	call	Scan_Special_Entries
 34213                                  ;SR;
 34214                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34215                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34216                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34217                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34218                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34219                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34220                                  ;issues the version check, it gets the lie version until the next overlay
 34221                                  ;call is issued.
 34222                                  
 34223 00005EA0 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34224 00005EA6 7426                    	je	short norm_ovl		;yes, no special handling
 34225 00005EA8 56                      	push	si
 34226 00005EA9 06                      	push	es
 34227 00005EAA 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34228                                  	 
 34229                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34230 00005EAF 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34231 00005EB3 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34232                                  	
 34233 00005EB5 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34234 00005EBA 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34235 00005EBF 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34236                                  		;;; PDB.VERSION
 34237 00005EC4 EB06                    	jmp	short setver_done
 34238                                  sysinit_done:
 34239 00005EC6 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34240                                  setver_done:
 34241 00005ECC 07                      	pop	es
 34242 00005ECD 5E                      	pop	si
 34243                                  norm_ovl:
 34244                                  	;leave
 34245 00005ECE 89EC                    	mov	sp,bp		
 34246 00005ED0 5D                      	pop	bp
 34247                                  
 34248                                  	;transfer SYS_RET_OK		; overlay load -> done
 34249 00005ED1 E963A7                  	jmp	SYS_RET_OK
 34250                                  
 34251                                  Exec_Build_Header:
 34252                                  	;mov	dx,[bp-18]
 34253 00005ED4 8B56EE                  	mov	DX,Exec_Load_Block
 34254                                  					; assign the space to the process
 34255                                  	;mov	si,1
 34256 00005ED7 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34257                                  	;mov	ax,[bp-14]
 34258 00005EDA 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34259 00005EDD 09C0                    	or	AX,AX
 34260 00005EDF 7405                    	jz	short No_Owner		; no environment
 34261                                  
 34262 00005EE1 48                      	dec	AX			; point to header
 34263 00005EE2 8ED8                    	mov	DS,AX
 34264 00005EE4 8914                    	mov	[SI],DX 		; assign ownership
 34265                                  No_Owner:
 34266                                  	;mov	ax,[bp-18]
 34267                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34268                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34269                                  	; 17/12/2022
 34270 00005EE6 89D0                    	mov	ax,dx ; 06/06/2019
 34271                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34272                                  	
 34273 00005EE8 48                      	dec	AX
 34274 00005EE9 8ED8                    	mov	DS,AX			; point to header
 34275 00005EEB 8914                    	mov	[SI],DX 		; assign ownership
 34276                                  
 34277                                  	; MSDOS 6.0
 34278 00005EED 1E                      	push	DS			;AN000;MS. make ES=DS
 34279 00005EEE 07                      	pop	ES			;AN000;MS.
 34280                                  	;mov	di,8
 34281 00005EEF BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34282 00005EF2 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34283                                  					;	   ds:si->name, cx=name length
 34284 00005EF5 51                      	push	CX			;AN007;;MS. save for fake version
 34285 00005EF6 56                      	push	SI			;AN007;;MS. save for fake version
 34286                                  
 34287                                  MoveName:				;AN000;
 34288 00005EF7 AC                      	lodsb				;AN000;;MS. get char
 34289 00005EF8 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34290 00005EFA 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34291                                  					;AN000;
 34292 00005EFC AA                      	stosb				;AN000;;MS. move char
 34293                                  					; MSKK bug fix - limit length copied
 34294 00005EFD 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34295 00005F00 7302                    	jae	short Mem_Done		; jump if so
 34296                                  	;
 34297 00005F02 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34298                                  Mem_Done:				;AN000;
 34299 00005F04 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34300                                  	;cmp	di,16
 34301 00005F06 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34302 00005F09 7301                    	jae	short Fill8		;AN000;MS.
 34303                                  	
 34304 00005F0B AA                      	stosb				;AN000;MS.
 34305                                  	
 34306                                  Fill8:					;AN000;
 34307 00005F0C 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34308 00005F0D 59                      	pop	CX			;AN007;MS.
 34309                                  	
 34310 00005F0E E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34311                                  
 34312                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34313 00005F11 52                      	push	DX
 34314                                  	;mov	si,[bp-16]
 34315 00005F12 8B76F0                  	mov	SI,Exec_Size
 34316 00005F15 01D6                    	add	SI,DX
 34317                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34318 00005F17 E863B1                  	call	_$DUP_PDB
 34319 00005F1A 5A                      	pop	DX
 34320                                  
 34321                                  	;push	word [bp-14]
 34322 00005F1B FF76F2                  	push	Exec_Environ
 34323                                  	;pop	WORD [ES:2Ch]
 34324 00005F1E 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34325                                  
 34326                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34327                                  					; version number in PSP
 34328 00005F23 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34329 00005F28 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34330                                  		; PDB.VERSION
 34331                                  
 34332                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34333                                  	;lds	si,[bp-4]
 34334 00005F2D C576FC                  	lds	SI,Exec_Blk		; get the block
 34335 00005F30 1E                      	push	DS			; save its location
 34336 00005F31 56                      	push	SI
 34337                                  	;lds	si,[si+6]
 34338 00005F32 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34339                                  
 34340                                  	; DS points to user space 5C FCB
 34341                                  
 34342 00005F35 B90C00                  	mov	CX,12			; copy drive, name and ext
 34343 00005F38 51                      	push	CX
 34344 00005F39 BF5C00                  	mov	DI,5Ch
 34345 00005F3C 8A1C                    	mov	BL,[SI]
 34346 00005F3E F3A4                    	rep	movsb
 34347                                  
 34348                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34349                                  
 34350 00005F40 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34351 00005F42 AB                      	stosw
 34352 00005F43 AB                      	stosw
 34353                                  
 34354                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34355                                  
 34356 00005F44 59                      	pop	CX
 34357 00005F45 5E                      	pop	SI			; get block
 34358 00005F46 1F                      	pop	DS
 34359 00005F47 1E                      	push	DS			; save (again)
 34360 00005F48 56                      	push	SI
 34361                                  	;lds	si,[si+0Ah]
 34362 00005F49 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34363                                  
 34364                                  	; DS points to user space 6C FCB
 34365                                  
 34366 00005F4C 8A3C                    	mov	BH,[SI] 		; do same as above
 34367 00005F4E F3A4                    	rep	movsb
 34368 00005F50 AB                      	stosw
 34369 00005F51 AB                      	stosw
 34370 00005F52 5E                      	pop	SI			; get block (last time)
 34371 00005F53 1F                      	pop	DS
 34372                                  	;ld	si,[si+2]
 34373 00005F54 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34374                                  
 34375                                  	; DS points to user space 80 command line
 34376                                  
 34377 00005F57 80C980                  	or	CL,80h
 34378 00005F5A 89CF                    	mov	DI,CX
 34379 00005F5C F3A4                    	rep	movsb			; Wham!
 34380                                  
 34381                                  	; Process BX into default AX (validity of drive specs on args).
 34382                                  	; We no longer care about DS:SI.
 34383                                  
 34384 00005F5E FEC9                    	dec	CL			; get 0FFh in CL
 34385 00005F60 88F8                    	mov	AL,BH
 34386 00005F62 30FF                    	xor	BH,BH
 34387                                  	;invoke	GetVisDrv
 34388 00005F64 E8400A                  	call	GetVisDrv
 34389 00005F67 7302                    	jnc	short Exec_BL
 34390                                  
 34391 00005F69 88CF                    	mov	BH,CL
 34392                                  
 34393                                  Exec_BL:
 34394 00005F6B 88D8                    	mov	AL,BL
 34395 00005F6D 30DB                    	xor	BL,BL
 34396                                  	;invoke	GetVisDrv
 34397 00005F6F E8350A                  	call	GetVisDrv
 34398 00005F72 7302                    	jnc	short Exec_Set_Return
 34399                                  
 34400 00005F74 88CB                    	mov	BL,CL
 34401                                  
 34402                                  Exec_Set_Return:
 34403                                  	;invoke	Get_User_Stack			; get his return address
 34404 00005F76 E808A5                  	call	Get_User_Stack
 34405                                  
 34406                                  	;push	word [si+14h]
 34407 00005F79 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34408                                  	;push	word [si+12h]
 34409 00005F7C FF7412                  	push	word [SI+user_env.user_IP]
 34410                                  	;push	word [si+14h]
 34411 00005F7F FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34412                                  	;push	word [si+12h]
 34413 00005F82 FF7412                  	push	word [SI+user_env.user_IP]
 34414                                  	;pop	word [ES:0Ah]
 34415 00005F85 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34416                                  	;pop	word [ES:0Ch]
 34417 00005F8A 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34418                                  
 34419 00005F8F 31C0                    	xor	AX,AX
 34420 00005F91 8ED8                    	mov	DS,AX
 34421                                  					; save them where we can get them
 34422                                  					; later when the child exits.
 34423                                  	;pop	word [88h]
 34424 00005F93 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34425                                  	;pop	word [90h]
 34426 00005F97 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34427                                  
 34428 00005F9B 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34429 00005FA2 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34430 00005FA7 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34431                                  
 34432                                  	;test	byte [bp-5],1
 34433 00005FAC F646FB01                	test	Exec_Func,exec_func_no_execute
 34434 00005FB0 7427                    	jz	short exec_go
 34435                                  
 34436 00005FB2 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34437                                  	;les	di,[bp-4]
 34438 00005FB7 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34439                                  	;mov	[es:di+10h],ds
 34440 00005FBA 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34441                                  
 34442 00005FBE 4E                      	dec	SI			; 'push' default AX
 34443 00005FBF 4E                      	dec	SI
 34444 00005FC0 891C                    	mov	[SI],BX 		; save default AX reg
 34445                                  	;mov	[es:di+0Eh], si
 34446 00005FC2 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34447                                  
 34448 00005FC6 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34449                                  	;mov	[es:di+14h],ds
 34450 00005FCB 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34451                                  	;mov	[es:di+12h],ax
 34452 00005FCF 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34453                                  	
 34454                                  	;leave
 34455 00005FD3 89EC                    	mov	sp,bp
 34456 00005FD5 5D                      	pop	bp	
 34457                                  
 34458                                  	;transfer SYS_RET_OK
 34459 00005FD6 E95EA6                  	jmp	SYS_RET_OK
 34460                                  
 34461                                  exec_go:
 34462 00005FD9 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34463 00005FDE 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34464 00005FE3 8CC0                    	mov	AX,ES
 34465                                  
 34466                                  	; MSDOS 6.0
 34467 00005FE5 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34468 00005FEB 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34469                                  
 34470 00005FED 1E                      	push	ds			; Y: control must go to low mem stub
 34471                                  		
 34472 00005FEE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34473                                  					;    control to user 
 34474 00005FF3 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34475                                  					; M004: Set bit to signal int 21
 34476                                  					; ah = 25 & ah= 49. See dossym.inc 
 34477                                  					; under TAG M003 & M009 for 
 34478                                  					; explanation
 34479 00005FF8 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34480                                  					; M068: going to be turned OFF.
 34481                                  	
 34482 00005FFC 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34483 00005FFE 1F                      	pop	ds
 34484                                  	
 34485 00005FFF 50                      	push	ax			; ret far into the low mem stub
 34486 00006000 B8[FB10]                	mov	ax,disa20_xfer
 34487 00006003 50                      	push	ax
 34488 00006004 8CC0                    	mov	AX,ES			; restore ax
 34489 00006006 CB                      	retf
 34490                                  
 34491                                  Xfer_To_User:
 34492                                  	; DS:SI points to entry point
 34493                                  	; AX:DI points to initial stack
 34494                                  	; DX has PDB pointer
 34495                                  	; BX has initial AX value
 34496                                  
 34497 00006007 FA                      	cli
 34498                                  	; 15/08/2018
 34499 00006008 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34500                                  
 34501 0000600E 8ED0                    	mov	SS,AX			; set up user's stack
 34502 00006010 89FC                    	mov	SP,DI			; and SP
 34503 00006012 FB                      	sti
 34504                                  
 34505 00006013 1E                      	push	DS			; fake long call to entry
 34506 00006014 56                      	push	SI
 34507 00006015 8EC2                    	mov	ES,DX			; set up proper seg registers
 34508 00006017 8EDA                    	mov	DS,DX
 34509 00006019 89D8                    	mov	AX,BX			; set up proper AX
 34510                                  
 34511 0000601B CB                      	retf
 34512                                  
 34513                                  ; 04/08/2018 - Retro DOS v3.0
 34514                                  
 34515                                  ;----------------------------------------------------------------------------
 34516                                  ;
 34517                                  ;----------------------------------------------------------------------------
 34518                                  
 34519                                  ExecRead:
 34520 0000601C E81600                  	CALL	Exec_Dealloc
 34521                                  	;mov	bx,[bp-8]
 34522 0000601F 8B5EF8                  	MOV	bx,Exec_FH
 34523                                  
 34524 00006022 55                      	PUSH	BP
 34525 00006023 E82507                  	call	_$READ
 34526 00006026 5D                      	POP	BP
 34527                                  
 34528                                  	;CALL	Exec_Alloc
 34529                                  	;retn
 34530                                  	; 18/12/2022
 34531                                  	;jmp	short Exec_Alloc
 34532                                  
 34533                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34534                                  
 34535                                  ;----------------------------------------------------------------------------
 34536                                  ;
 34537                                  ;----------------------------------------------------------------------------
 34538                                  
 34539                                  Exec_Alloc:
 34540 00006027 53                      	push	BX
 34541                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34542                                  	; 20/05/2019 - Retro DOS v4.0
 34543                                  	; MSDOS 6.0
 34544 00006028 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34545 0000602D E81000                  	call	ChangeOwners
 34546 00006030 E8DBB2                  	call	LCritMEM
 34547 00006033 5B                      	pop	BX
 34548 00006034 C3                      	retn
 34549                                  
 34550                                  ;----------------------------------------------------------------------------
 34551                                  ;
 34552                                  ;----------------------------------------------------------------------------
 34553                                  
 34554                                  Exec_Dealloc:
 34555 00006035 53                      	push	BX
 34556                                  	;mov	bx,0
 34557 00006036 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34558 00006038 E8B8B2                  	call	ECritMEM
 34559 0000603B E80200                  	call	ChangeOwners
 34560 0000603E 5B                      	pop	BX
 34561 0000603F C3                      	retn
 34562                                  
 34563                                  ; 18/12/2022
 34564                                  %if 0
 34565                                  ;----------------------------------------------------------------------------
 34566                                  ;
 34567                                  ;----------------------------------------------------------------------------
 34568                                  
 34569                                  Exec_Alloc:
 34570                                  	push	BX
 34571                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34572                                  	; 20/05/2019 - Retro DOS v4.0
 34573                                  	; MSDOS 6.0
 34574                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34575                                  	call	ChangeOwners
 34576                                  	call	LCritMEM
 34577                                  	pop	BX
 34578                                  	retn
 34579                                  
 34580                                  %endif
 34581                                  
 34582                                  ;----------------------------------------------------------------------------
 34583                                  ;
 34584                                  ;----------------------------------------------------------------------------
 34585                                  
 34586                                  ChangeOwners:
 34587 00006040 9C                      	pushf
 34588 00006041 50                      	push	AX
 34589                                  	;mov	ax,[bp-14]
 34590 00006042 8B46F2                  	mov	AX,Exec_Environ
 34591 00006045 E80900                  	call	ChangeOwner
 34592                                  	;mov	ax,[bp-18]
 34593 00006048 8B46EE                  	mov	AX,Exec_Load_Block
 34594 0000604B E80300                  	call	ChangeOwner
 34595 0000604E 58                      	pop	AX
 34596 0000604F 9D                      	popf
 34597                                  chgown_retn:
 34598 00006050 C3                      	retn
 34599                                  
 34600                                  ;----------------------------------------------------------------------------
 34601                                  ;
 34602                                  ;----------------------------------------------------------------------------
 34603                                  
 34604                                  ChangeOwner:
 34605 00006051 09C0                    	or	AX,AX			; is area allocated?
 34606 00006053 74FB                    	jz	short chgown_retn	; no, do nothing
 34607 00006055 48                      	dec	AX
 34608 00006056 1E                      	push	DS
 34609 00006057 8ED8                    	mov	DS,AX
 34610 00006059 891E0100                	mov	[ARENA.OWNER],BX
 34611 0000605D 1F                      	pop	DS
 34612 0000605E C3                      	retn
 34613                                  
 34614                                  ;----------------------------------------------------------------------------
 34615                                  ;
 34616                                  ;----------------------------------------------------------------------------
 34617                                  
 34618                                  ; 20/05/2019 - Retro DOS v4.0
 34619                                  
 34620                                  	; MSDOS 6.0
 34621                                  Scan_Execname:
 34622 0000605F C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34623                                  Scan_Execname1:				; M028
 34624                                  Save_Begin:				;
 34625 00006062 89F1                    	mov	CX,SI			; CX= starting addr
 34626                                  Scan0:					;
 34627 00006064 AC                      	lodsb				; get char
 34628                                  
 34629 00006065 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34630 00006067 74F9                    	jz	short Save_Begin	; yes, save si
 34631 00006069 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34632 0000606B 74F5                    	jz	short Save_Begin	; yes, save si
 34633 0000606D 3C00                    	cmp	AL,0			; is end of name
 34634 0000606F 75F3                    	jnz	short Scan0		; no, continue scanning
 34635 00006071 29CE                    	sub	SI,CX			; get name's length
 34636 00006073 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34637                                  
 34638 00006075 C3                      	retn
 34639                                  
 34640                                  ;----------------------------------------------------------------------------
 34641                                  ;
 34642                                  ;----------------------------------------------------------------------------
 34643                                  
 34644                                  ; 20/05/2019 - Retro DOS v4.0
 34645                                  
 34646                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34647                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34648                                  
 34649                                  	; MSDOS 6.0
 34650                                  
 34651                                  Scan_Special_Entries:
 34652                                  
 34653 00006076 49                      	dec	CX			; cx= name length
 34654                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34655                                  					;reset to current version
 34656                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34657                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34658                                  	;mov	word [ss:SPECIAL_VERSION],5
 34659                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34660                                  
 34661                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34662 00006077 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34663                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34664                                  				; 24/09/2023
 34665                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34666                                  ;***	call	Reset_Version
 34667                                  
 34668                                  ;M060	push	SS
 34669                                  ;M060	pop	ES
 34670                                  
 34671 0000607E 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34672 00006083 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34673 00006085 09F8                    	or	AX,DI			;M060; be sure the table exists
 34674 00006087 7427                    	jz	short End_List		;M060; If ZR then no table
 34675                                  
 34676                                  GetEntries:
 34677 00006089 268A05                  	mov	AL,[ES:DI]		; end of list
 34678 0000608C 08C0                    	or	AL,AL
 34679 0000608E 7420                    	jz	short End_List		; yes
 34680                                  
 34681 00006090 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34682 00006095 38C8                    	cmp	AL,CL			; same length ?
 34683 00006097 751B                    	jnz	short SkipOne 		; no
 34684                                  
 34685 00006099 47                      	inc	DI			; es:di -> special name
 34686 0000609A 51                      	push	CX			; save length and name addr
 34687 0000609B 56                      	push	SI
 34688                                  
 34689                                  ; M050 - BEGIN
 34690                                  
 34691 0000609C 50                      	push	ax			; save len
 34692                                  sse_next_char:
 34693 0000609D AC                      	lodsb
 34694 0000609E E8D1EE                  	call	UCase
 34695 000060A1 AE                      	scasb
 34696 000060A2 750D                    	jne	short Not_Matched
 34697 000060A4 E2F7                    	loop	sse_next_char
 34698                                  	
 34699                                  ;	repz	cmpsb			; same name ?
 34700                                  ;	jnz	short Not_Matched	; no
 34701                                  
 34702 000060A6 58                      	pop	ax			; take len off the stack
 34703                                  
 34704                                  ; M050 - END
 34705                                  
 34706 000060A7 268B05                  	mov	AX,[ES:DI]		; get special version
 34707 000060AA 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34708                                  
 34709                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34710                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34711                                  
 34712 000060AE 5E                      	pop	SI
 34713 000060AF 59                      	pop	CX
 34714                                  	; 18/12/2022
 34715                                  	;jmp	SHORT End_List
 34716                                  
 34717                                  	; 18/12/2022
 34718                                  End_List:
 34719 000060B0 C3                      	retn
 34720                                  
 34721                                  Not_Matched:
 34722 000060B1 58                      	pop	ax			; get len from stack ; M050
 34723 000060B2 5E                      	pop	SI			; restore si,cx
 34724 000060B3 59                      	pop	CX
 34725                                  
 34726                                  SkipOne:
 34727 000060B4 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34728 000060B9 30E4                    	xor	AH,AH			; position to next entry
 34729 000060BB 01C7                    	add	DI,AX
 34730                                  
 34731 000060BD 83C703                  	add	DI,3			; DI -> next entry length
 34732                                  ;***	add	DI,4			; DI -> next entry length
 34733                                  
 34734 000060C0 EBC7                    	jmp	short GetEntries
 34735                                  
 34736                                  	; 18/12/2022
 34737                                  ;End_List:
 34738                                  	;retn
 34739                                  
 34740                                  ; 04/08/2018 - Retro DOS v3.0
 34741                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34742                                  
 34743                                  ;----------------------------------------------------------------------------
 34744                                  ;SUBTTL Terminate and stay resident handler
 34745                                  ;
 34746                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34747                                  ;	    truncate the current block.
 34748                                  ;
 34749                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34750                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34751                                  ;	    and restoring the vectors.
 34752                                  ;
 34753                                  ;----------------------------------------------------------------------------
 34754                                  
 34755                                  	; 20/05/2019 - Retro DOS v4.0
 34756                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34757                                  
 34758                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34759                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34760                                  
 34761                                  _$KEEP_PROCESS:
 34762 000060C2 50                      	push	AX			; keep exit code around
 34763                                  	;mov	byte [SS:EXIT_TYPE],3
 34764 000060C3 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34765 000060C9 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34766 000060CE 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34767 000060D1 7303                    	jae	short Keep_Shrink	; info
 34768                                  
 34769 000060D3 BA0600                  	mov	DX,6h
 34770                                  
 34771                                  Keep_Shrink:
 34772 000060D6 89D3                    	mov	BX,DX
 34773 000060D8 53                      	push	BX
 34774 000060D9 06                      	push	ES
 34775 000060DA E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34776 000060DD 1F                      	pop	DS
 34777 000060DE 5B                      	pop	BX
 34778 000060DF 7207                    	jc	short Keep_Done		; failed on modification
 34779                                  
 34780 000060E1 8CD8                    	mov	AX,DS
 34781 000060E3 01D8                    	add	AX,BX
 34782                                  	;mov	[2],ax
 34783 000060E5 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34784                                  
 34785                                  Keep_Done:
 34786 000060E8 58                      	pop	AX
 34787 000060E9 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34788                                  
 34789                                  ;----------------------------------------------------------------------------
 34790                                  ;
 34791                                  ;----------------------------------------------------------------------------
 34792                                  
 34793                                  STAY_RESIDENT:
 34794                                  	;mov	ax,3100h
 34795 000060EB B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34796 000060EE 83C20F                  	add	DX,15
 34797 000060F1 D1DA                    	rcr	DX,1
 34798 000060F3 B103                    	mov	CL,3
 34799 000060F5 D3EA                    	shr	DX,CL
 34800                                  
 34801 000060F7 E90EA2                  	jmp	COMMAND
 34802                                  
 34803                                  ;----------------------------------------------------------------------------
 34804                                  ;SUBTTL $EXIT - return to parent process
 34805                                  ;   Assembler usage:
 34806                                  ;	    MOV     AL, code
 34807                                  ;	    MOV     AH, Exit
 34808                                  ;	    INT     int_command
 34809                                  ;   Error return:
 34810                                  ;	    None.
 34811                                  ;
 34812                                  ;----------------------------------------------------------------------------
 34813                                  
 34814                                  	; 20/05/2019 - Retro DOS v4.0
 34815                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34816                                  
 34817                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34818                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34819                                  _$EXIT:
 34820                                  	; 04/08/2018 - Retro DOS v3.0
 34821                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34822 000060FA 30E4                    	xor	AH,AH
 34823 000060FC 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34824 00006101 08E4                    	or	AH,AH
 34825                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34826 00006103 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34827 00006109 7406                    	jz	short exit_inner
 34828                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34829 0000610B 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34830                                  
 34831                                  	;entry	Exit_inner
 34832                                  exit_inner:
 34833 00006111 E86DA3                  	call	Get_User_Stack		;PBUGBUG
 34834                                  
 34835 00006114 36FF36[3003]            	push	word [ss:CurrentPDB]
 34836                                  	;pop	word [si+14h]
 34837 00006119 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34838 0000611C EB08                    	jmp	short abort_inner
 34839                                  
 34840                                  ;BREAK <$ABORT -- Terminate a process>
 34841                                  ;----------------------------------------------------------------------------
 34842                                  ; Inputs:
 34843                                  ;	user_CS:00 must point to valid program header block
 34844                                  ; Function:
 34845                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34846                                  ;	to the terminate address
 34847                                  ; Returns:
 34848                                  ;	TO THE TERMINATE ADDRESS
 34849                                  ;----------------------------------------------------------------------------
 34850                                  
 34851                                  _$ABORT:
 34852 0000611E 30C0                    	xor	AL,AL
 34853                                  	;mov	byte [SS:EXIT_TYPE],0
 34854                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34855 00006120 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34856                                  
 34857                                  	; abort_inner must have AL set as the exit code! The exit type
 34858                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34859                                  	; to be correct as the one that is terminating.
 34860                                  
 34861                                  abort_inner:
 34862 00006126 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34863 0000612B 36A3[3403]              	mov	[SS:exit_code],AX
 34864 0000612F E84FA3                  	call	Get_User_Stack
 34865                                  
 34866                                  	;mov	ds,[si+14h]
 34867 00006132 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34868 00006135 31C0                    	xor	AX,AX
 34869 00006137 8EC0                    	mov	ES,AX
 34870                                  	;mov	si,10
 34871 00006139 BE0A00                  	mov	SI,SAVEXIT
 34872                                  	;mov	di,88h
 34873 0000613C BF8800                  	mov	DI,addr_int_terminate
 34874 0000613F A5                      	movsw
 34875 00006140 A5                      	movsw
 34876 00006141 A5                      	movsw
 34877 00006142 A5                      	movsw
 34878 00006143 A5                      	movsw
 34879 00006144 A5                      	movsw
 34880 00006145 E944F2                  	jmp	reset_environment
 34881                                  
 34882                                  ;----------------------------------------------------------------------------
 34883                                  ;
 34884                                  ; fixexepatch will point to this is DOS loads low. 
 34885                                  ;
 34886                                  ;----------------------------------------------------------------------------
 34887                                  ; MSDOS 6.0
 34888                                  
 34889                                  ; 29/04/2019 - Retro DOS v4.0
 34890                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34891                                  
 34892                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34893                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34894                                  
 34895                                  RetExePatch: ; proc near
 34896                                  	
 34897 00006148 C3                      	retn
 34898                                  
 34899                                  ;============================================================================
 34900                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34901                                  ;============================================================================
 34902                                  ; 04/08/2018 - Retro DOS v3.0
 34903                                  ; 14/05/2019 - Retro DOS v4.0
 34904                                  
 34905                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34906                                  
 34907                                  ;**
 34908                                  ;	Microsoft Confidential
 34909                                  ;	Copyright (C) Microsoft Corporation 1991
 34910                                  ;	All Rights Reserved.
 34911                                  ;
 34912                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34913                                  ;	I/O specs are defined in DISPATCH.
 34914                                  ;
 34915                                  ;	$ALLOC
 34916                                  ;	$SETBLOCK
 34917                                  ;	$DEALLOC
 34918                                  ;	$AllocOper
 34919                                  ;	arena_free_process
 34920                                  ;	arena_next
 34921                                  ;	check_signature
 34922                                  ;	Coalesce
 34923                                  ;
 34924                                  ;	Modification history:
 34925                                  ;
 34926                                  ;	    Created: ARR 30 March 1983
 34927                                  ;
 34928                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34929                                  ;		      M003 - added support for link/unlink UMBs from
 34930                                  ;			     DOS arena chain. 7/18/90
 34931                                  ;		      M009 - Added error returns invalid function and 
 34932                                  ;			     arena trashed in set link state call.
 34933                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34934                                  ;			     if UMB_HEAD is initialized.
 34935                                  ;
 34936                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34937                                  ;			     support. Please see under M009 in 
 34938                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34939                                  ;
 34940                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34941                                  ;			     sure that umb_head arena is valid and also make
 34942                                  ;			     sure that the previous arena is pointing to 
 34943                                  ;			     umb_head.
 34944                                  ;
 34945                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34946                                  ;			     set allloc strategy.
 34947                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34948                                  ;			     bx in AllocSetStrat.
 34949                                  ;
 34950                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34951                                  ;			     a bit to indicate to dos dispatcher to turn
 34952                                  ;			     a20 off before iret. See M016.
 34953                                  ;
 34954                                  
 34955                                  ;	BREAK	<memory allocation utility routines>
 34956                                  
 34957                                  
 34958                                  ; 15/04/2018 - Retro DOS v2.0
 34959                                  ;----------------------------------------------------------------------------
 34960                                  ; xenix memory calls for MSDOS
 34961                                  ;
 34962                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34963                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34964                                  ;
 34965                                  ;INCLUDE DOSSEG.ASM
 34966                                  
 34967                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34968                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34969                                  
 34970                                  ;.xlist
 34971                                  ;.xcref
 34972                                  ;INCLUDE DOSSYM.ASM
 34973                                  ;INCLUDE DEVSYM.ASM
 34974                                  ;.cref
 34975                                  ;.list
 34976                                  
 34977                                  ;TITLE ALLOC.ASM - memory arena manager
 34978                                  ;NAME Alloc
 34979                                  
 34980                                  ;SUBTTL memory allocation utility routines
 34981                                  ;PAGE
 34982                                  ;
 34983                                  ; arena data
 34984                                  ;
 34985                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34986                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34987                                  ;       i_need  FirstArena,WORD         ; first free block found
 34988                                  ;       i_need  BestArena,WORD          ; best free block found
 34989                                  ;       i_need  LastArena,WORD          ; last free block found
 34990                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34991                                  
 34992                                  ;**	Arena_Free_Process
 34993                                  ;----------------------------------------------------------------------------
 34994                                  ;	Free all arena blocks allocated to a prOcess
 34995                                  ;
 34996                                  ;	ENTRY	(bx) = PID of process
 34997                                  ;	EXIT	none
 34998                                  ;	USES	????? BUGBUG
 34999                                  ;----------------------------------------------------------------------------
 35000                                  
 35001                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35002                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35003                                  
 35004                                  arena_free_process:
 35005                                  	; 14/05/2019 - Retro DOS v4.0
 35006                                  	; 04/08/2018 - Retro DOS v3.0
 35007 00006149 36A1[2400]                      MOV	AX,[SS:arena_head]
 35008                                  arena_free_process_start:
 35009 0000614D BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35010                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35011 00006150 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 35012                                  
 35013                                  arena_free_process_loop:
 35014                                          ;retc
 35015 00006153 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35016 00006155 06                      	PUSH    ES
 35017 00006156 1F                              POP     DS
 35018                                  	;cmp	[1],bx 
 35019 00006157 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35020 0000615B 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35021                                  	;mov	[1],di
 35022 0000615D 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35023                                  
 35024                                  arena_free_next:
 35025                                  	;cmp	byte [di],5Ah ;'Z'
 35026 00006161 803D5A                          CMP     BYTE [DI],arena_signature_end
 35027                                                                          ; end of road, Jack?
 35028                                          ;retz				; never come back no more
 35029                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35030                                  	; 14/05/2019
 35031                                  	; MSDOS 6.0
 35032 00006164 7405                    	jz	short arena_chk_umbs
 35033                                          
 35034 00006166 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35035 00006169 EBE8                            JMP     SHORT arena_free_process_loop
 35036                                  
 35037                                  	; MSDOS 6.0
 35038                                  arena_chk_umbs:				; M010 - Start
 35039                                  	; 20/05/2019
 35040 0000616B 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35041 0000616F 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35042 00006172 741E                    	je	short ret_label		; N: we're done
 35043                                  	
 35044 00006174 8CDF                    	mov	di,ds			; di = last arena
 35045 00006176 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35046 00006178 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 35047 0000617A EBD1                    	jmp	short arena_free_process_start
 35048                                  					; M010 - End
 35049                                  ;AFP_RETN:
 35050                                  ;	RETN
 35051                                  
 35052                                  ;	BREAK	<Arena Helper Routines>
 35053                                  
 35054                                  ;**	Arena_Next - Find Next item in Arena
 35055                                  ;----------------------------------------------------------------------------
 35056                                  ;	ENTRY	DS - pointer to block head
 35057                                  ;		(di) = 0
 35058                                  ;	EXIT	AX,ES - pointers to next head
 35059                                  ;		'C' set iff arena damaged
 35060                                  ;----------------------------------------------------------------------------
 35061                                  
 35062                                  arena_next:
 35063 0000617C 8CD8                            MOV     AX,DS                   ; AX <- current block
 35064 0000617E 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35065 00006182 40                              INC     AX                      ; remember that header!
 35066                                  
 35067                                  ;       fall into check_signature and return
 35068                                  ;
 35069                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35070                                  ;       RETN
 35071                                  
 35072                                  ;**	Check_Signature - Check Memory Block Signature
 35073                                  ;----------------------------------------------------------------------------
 35074                                  ;	ENTRY	(AX) = address of block header
 35075                                  ;		(di) = 0
 35076                                  ;	EXIT	 ES = AX
 35077                                  ;		'C' clear if signature good
 35078                                  ;		'C' set if signature bad
 35079                                  ;	USES	ES, Flags
 35080                                  ;----------------------------------------------------------------------------
 35081                                  
 35082                                  check_signature:        
 35083                                  
 35084 00006183 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35085                                  	;cmp	byte [es:di],4Dh ; 'M'
 35086 00006185 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35087                                                                          ; IF next signature = not_end THEN
 35088 00006189 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35089                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35090 0000618B 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35091                                                                          ; IF next signature = end then
 35092 0000618F 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35093 00006191 F9                              STC                             ; set error
 35094                                  ret_label: ; MSDOS 6.0
 35095                                  AFP_RETN:
 35096                                   	; Retro DOS v2.0 - 05/03/2018
 35097                                  check_signature_ok:
 35098                                  COALESCE_RETN:
 35099 00006192 C3                      	RETN
 35100                                  
 35101                                  ;**	Coalesce - Combine free blocks ahead with current block
 35102                                  ;----------------------------------------------------------------------------
 35103                                  ;	Coalesce adds the block following the argument to the argument block,
 35104                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35105                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35106                                  ;	preceeding allocated block.
 35107                                  ;
 35108                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35109                                  ;		(di) = 0
 35110                                  ;	EXIT	'C' clear if OK
 35111                                  ;		  (ds) unchanged, this block updated
 35112                                  ;		  (ax) = address of next block, IFF not at end
 35113                                  ;		'C' set if arena trashed
 35114                                  ;	USES	(cx)
 35115                                  ;----------------------------------------------------------------------------
 35116                                          
 35117                                  Coalesce:
 35118                                  	;cmp	byte [di],5Ah ; 'Z'
 35119 00006193 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35120                                                                          ; IF current signature = END THEN
 35121                                          ;retz				;   GOTO ok
 35122 00006196 74FA                            jz	short COALESCE_RETN
 35123 00006198 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35124                                          ;retc				; IF no error THEN GOTO check
 35125 0000619B 72F5                    	jc	short COALESCE_RETN
 35126                                  
 35127                                  coalesce_check:
 35128                                  	;cmp	[es:1],di
 35129 0000619D 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35130                                          ;retnz				; IF next block isnt free THEN return
 35131 000061A2 75EE                            JNZ	SHORT COALESCE_RETN
 35132                                  	;mov	cx,[ES:3]
 35133 000061A4 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35134 000061A9 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35135                                          ;ADD	[3],CX
 35136 000061AA 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35137 000061AE 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35138 000061B1 880D                            MOV     [DI],CL
 35139 000061B3 EBDE                            JMP     SHORT Coalesce		; try again
 35140                                  
 35141                                  ; 04/08/2018 - Retro DOS v3.0
 35142                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35143                                  
 35144                                  ;	BREAK  <$Alloc - allocate space in memory>
 35145                                  
 35146                                  ; MSDOS 6.0
 35147                                  ;----------------------------------------------------------------------------
 35148                                  ;**	$Alloc - Allocate Memory Space
 35149                                  ;
 35150                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35151                                  ;	Alloc returns a pointer to a free block of memory that
 35152                                  ;	has the requested size in paragraphs.
 35153                                  ;
 35154                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35155                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35156                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35157                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35158                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35159                                  ;
 35160                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35161                                  ;	starts from arena_head.
 35162                                  ;
 35163                                  ;	Assembler usage:
 35164                                  ;           MOV     BX,size
 35165                                  ;           MOV     AH,Alloc
 35166                                  ;           INT     21h
 35167                                  ;
 35168                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35169                                  ;	so that we start searching the arena at it's first non-trivial free
 35170                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35171                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35172                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35173                                  ;	verify that this is true; if so, this can stay as is
 35174                                  ;
 35175                                  ;	ENTRY	(bx) = requested size, in bytes
 35176                                  ;		(DS) = (ES) = DOSGROUP
 35177                                  ;	EXIT	'C' clear if memory allocated
 35178                                  ;		  (ax:0) = address of requested memory
 35179                                  ;		'C' set if request failed
 35180                                  ;		  (AX) = error_not_enough_memory
 35181                                  ;		    (bx) = max size we could have allocated
 35182                                  ;		  (ax) = error_arena_trashed
 35183                                  ;	USES	All
 35184                                  ;----------------------------------------------------------------------------
 35185                                  
 35186                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35187                                  ;----------------------------------------------------------------------------
 35188                                  ;SUBTTL $Alloc - allocate space in memory
 35189                                  ;
 35190                                  ;   Assembler usage:
 35191                                  ;           MOV     BX,size
 35192                                  ;           MOV     AH,Alloc
 35193                                  ;           INT     21h
 35194                                  ;         AX:0 is pointer to allocated memory
 35195                                  ;         BX is max size if not enough memory
 35196                                  ;
 35197                                  ;   Description:
 35198                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35199                                  ;       memory that has the requested  size  in  paragraphs.
 35200                                  ;
 35201                                  ;   Error return:
 35202                                  ;           AX = error_not_enough_memory
 35203                                  ;              = error_arena_trashed
 35204                                  ;----------------------------------------------------------------------------
 35205                                  
 35206                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35207                                  
 35208                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35209                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35210                                  
 35211                                  _$ALLOC:
 35212                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35213                                  	; 14/05/2019 - Retro DOS v4.0
 35214                                  	; 04/08/2018 - Retro DOS v3.0
 35215                                  	;EnterCrit critMem
 35216 000061B5 E83BB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35217                                  
 35218                                  ; 17/12/2022
 35219                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35220                                  ;%if 0
 35221                                  	; 14/05/2019
 35222 000061B8 16                      	push	ss
 35223 000061B9 1F                      	pop	ds
 35224                                  
 35225                                  	; MSDOS 6.0
 35226                                  	;mov	ax,[ss:arena_head]
 35227                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35228                                  
 35229 000061BA A1[2400]                	mov	ax,[arena_head]
 35230 000061BD A3[8E00]                	mov	[START_ARENA],ax			
 35231                                  	
 35232                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35233 000061C0 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35234                                  					; Q: should we start scanning from 
 35235                                  					;    UMB's
 35236 000061C5 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35237                                  		
 35238                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35239                                  	;cmp	word [UMB_HEAD],-1
 35240                                  	;je	short norm_alloc	; N: scan from arena_head
 35241                                  
 35242                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35243 000061C7 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35244 000061CC 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35245                                  	
 35246                                  	;mov	ax,[ss:UMB_HEAD]
 35247                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35248 000061CE A1[8C00]                	mov	ax,[UMB_HEAD]
 35249 000061D1 A3[8E00]                	mov	[START_ARENA],ax
 35250                                  					; M000 - end
 35251                                  norm_alloc:
 35252 000061D4 31C0                            XOR     AX,AX
 35253 000061D6 89C7                            MOV     DI,AX
 35254                                  	; 15/03/2018
 35255                                          ;MOV	[SS:FirstArena],AX	; init the options
 35256                                          ;MOV	[SS:BestArena],AX
 35257                                          ;MOV	[SS:LastArena],AX
 35258                                  	; 14/05/2019
 35259 000061D8 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35260 000061DB A3[4203]                        MOV	[BestArena],AX
 35261 000061DE A3[4403]                        MOV	[LastArena],AX
 35262 000061E1 50                              PUSH    AX                      ; alloc_max <- 0
 35263                                  	; 04/08/2018
 35264                                  start_scan:
 35265                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35266                                  	;MOV	AX,[arena_head]
 35267                                  
 35268                                  	; 14/05/2019	
 35269                                  	; MSDOS 6.0
 35270                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35271 000061E2 A1[8E00]                	mov	ax,[START_ARENA]
 35272                                  
 35273                                  	; 27/09/2023 (BugFix) (*) 
 35274                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35275                                  start_scan_x:
 35276                                  
 35277 000061E5 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35278 000061E8 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35279                                  
 35280                                  ;%endif
 35281                                  
 35282                                  ; 17/12/2022
 35283                                  %if 0
 35284                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35285                                  
 35286                                  	; MSDOS 6.0
 35287                                  	mov	ax,[ss:arena_head]
 35288                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35289                                  
 35290                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35291                                  					; Q: should we start scanning from 
 35292                                  					;    UMB's
 35293                                  	jz	short norm_alloc	; N: scan from arena_head
 35294                                  		
 35295                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35296                                  	;je	short norm_alloc	; N: scan from arena_head
 35297                                  
 35298                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35299                                  	jz	short norm_alloc	; N: scan from arena_head
 35300                                  	
 35301                                  	mov	ax,[ss:UMB_HEAD]
 35302                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35303                                  					; M000 - end
 35304                                  norm_alloc:
 35305                                          XOR     AX,AX
 35306                                          MOV     DI,AX
 35307                                  	; 15/03/2018
 35308                                  	MOV	[SS:FirstArena],AX	; init the options
 35309                                  	MOV	[SS:BestArena],AX
 35310                                  	MOV	[SS:LastArena],AX
 35311                                          PUSH    AX                      ; alloc_max <- 0
 35312                                  	; 04/08/2018
 35313                                  start_scan:
 35314                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35315                                  	; 14/05/2019	
 35316                                  	; MSDOS 6.0
 35317                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35318                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35319                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35320                                  %endif
 35321                                  
 35322                                  alloc_scan:
 35323 000061EA 06                              PUSH    ES
 35324 000061EB 1F                              POP     DS                      ; DS <- ES
 35325 000061EC 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35326 000061F0 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35327                                  
 35328                                  alloc_next:
 35329                                  	; MSDOS 6.0			; M000 - start 
 35330 000061F2 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35331 000061F8 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35332                                  	
 35333 000061FA 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35334                                  					; Q: is alloc strategy high_first
 35335 00006200 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35336 00006202 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35337 00006206 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35338                                  					;    arena_head
 35339 0000620B 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35340 0000620D 8CD8                    	mov	ax,ds			; ax = current block
 35341 0000620F 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35342 00006214 EB03                    	jmp	short alloc_chk_end
 35343                                  
 35344                                  norm_strat:
 35345                                  	;cmp	byte [di],5Ah ; 'Z'
 35346 00006216 803D5A                          CMP     BYTE [DI],arena_signature_end
 35347                                                                          ; IF current block is last THEN
 35348                                  alloc_chk_end:
 35349 00006219 740E                            JZ      SHORT alloc_end		;   GOTO end
 35350 0000621B E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35351 0000621E 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35352                                  
 35353                                  alloc_err:
 35354 00006220 58                              POP     AX
 35355                                  
 35356                                  alloc_trashed:
 35357                                  	;LeaveCrit critMem
 35358 00006221 E8EAB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35359                                          ;error	error_arena_trashed
 35360                                  	;mov	al,7
 35361 00006224 B007                    	MOV	AL,error_arena_trashed
 35362                                  alloc_errj:
 35363 00006226 E917A4                  	JMP	SYS_RET_ERR
 35364                                  
 35365                                  alloc_end:
 35366                                  	; 18/05/2019
 35367 00006229 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35368 0000622F 7403                    	jz	short alloc_chk 
 35369 00006231 E98400                  	jmp	alloc_do_split
 35370                                  
 35371                                  alloc_chk:
 35372                                  	; MSDOS 6.0
 35373 00006234 36A1[2400]              	mov	ax,[ss:arena_head]
 35374 00006238 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35375 0000623D 740E                    	je	short alloc_fail	; Y: not enough memory
 35376                                  					; N:
 35377                                  					; Q: is the alloc strat HIGH_ONLY
 35378 0000623F 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35379 00006245 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35380                                  	
 35381 00006247 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35382                                  	; 27/09/2023 (*)
 35383 0000624B EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35384                                  	;jmp	short start_scan
 35385                                  					; M000 - end
 35386                                  
 35387                                  alloc_fail:
 35388                                          ;invoke Get_User_Stack
 35389 0000624D E831A2                          CALL	Get_User_Stack
 35390 00006250 5B                      	POP     BX
 35391                                          ;MOV	[SI].user_BX,BX
 35392                                  	;MOV	[SI+2],BX
 35393 00006251 895C02                  	mov	[SI+user_env.user_BX],bx
 35394                                  	;LeaveCrit critMem
 35395 00006254 E8B7B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35396                                  	;error	error_not_enough_memory
 35397                                  	;mov	al,8
 35398 00006257 B008                    	MOV	AL,error_not_enough_memory
 35399                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35400 00006259 EBCB                    	jmp	short alloc_errj
 35401                                  	;JMP	SYS_RET_ERR
 35402                                  
 35403                                  alloc_free:
 35404 0000625B E835FF                          CALL    Coalesce		; add following free block to current
 35405 0000625E 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35406 00006260 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35407 00006264 5A                              POP     DX                      ; check for max found size
 35408 00006265 39D1                            CMP     CX,DX
 35409 00006267 7602                            JNA     SHORT alloc_test
 35410 00006269 89CA                            MOV     DX,CX
 35411                                  
 35412                                  alloc_test:
 35413 0000626B 52                              PUSH    DX
 35414 0000626C 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35415 0000626E 7782                    	JA      SHORT alloc_next	;   GOTO next
 35416                                  
 35417                                  	; 15/03/2018
 35418 00006270 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35419 00006276 7505                    	JNZ	SHORT alloc_best
 35420 00006278 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35421                                  alloc_best:
 35422 0000627D 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35423 00006283 740E                            JZ      SHORT alloc_make_best	; initial best
 35424 00006285 06                              PUSH	ES
 35425 00006286 368E06[4203]                    MOV     ES,[SS:BestArena]
 35426 0000628B 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35427 00006290 07                              POP	ES
 35428 00006291 7605                            JBE     SHORT alloc_last
 35429                                  alloc_make_best:
 35430 00006293 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35431                                  alloc_last:
 35432 00006298 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35433 0000629D E952FF                          JMP     alloc_next
 35434                                  ;
 35435                                  ; split the block high
 35436                                  ;
 35437                                  alloc_do_split_high:
 35438 000062A0 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35439 000062A5 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35440 000062A9 29D9                            SUB     CX,BX
 35441 000062AB 8CDA                            MOV     DX,DS
 35442 000062AD 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35443 000062AF 01CA                            ADD     DX,CX                   ; point to next block
 35444 000062B1 8EC2                            MOV     ES,DX                   ; no decrement!
 35445 000062B3 49                              DEC     CX
 35446 000062B4 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35447 000062B6 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35448                                  ;
 35449                                  ; we have scanned memory and have found all appropriate blocks
 35450                                  ; check for the type of allocation desired; first and best are identical
 35451                                  ; last must be split high
 35452                                  ;
 35453                                  alloc_do_split:
 35454                                  
 35455                                  ; 17/12/2022
 35456                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35457                                  ;%if 0
 35458                                  	; 14/05/2019
 35459                                  	; MSDOS 6.0			; M000 - start
 35460                                  	;xor	cx,cx
 35461 000062B8 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35462                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35463 000062BD 80E13F                  	and	cl,3Fh
 35464                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35465 000062C0 80F901                  	cmp	cl,BEST_FIT
 35466 000062C3 77DB                    	ja	short alloc_do_split_high
 35467                                  ;%endif
 35468                                  
 35469                                  	; 17/12/2022
 35470                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35471                                  	; MSDOS 6.0 & MSDOS 5.0
 35472                                  	;xor	cx,cx
 35473                                  	;mov	cl,[ss:AllocMethod]
 35474                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35475                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35476                                  	;ja	short alloc_do_split_high
 35477                                  
 35478                                  	; 15/03/2018
 35479                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35480                                  	; 04/08/2018
 35481                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35482                                          ;JA	SHORT alloc_do_split_high
 35483                                          
 35484 000062C5 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35485 000062CA 7205                    	JB      SHORT alloc_get_size
 35486 000062CC 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35487                                  
 35488                                  alloc_get_size:
 35489 000062D1 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35490 000062D5 29D9                            SUB     CX,BX                   ; get room left over
 35491 000062D7 8CD8                            MOV     AX,DS
 35492 000062D9 89C2                            MOV     DX,AX                   ; save for owner setting
 35493 000062DB 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35494 000062DD 01D8                            ADD     AX,BX
 35495 000062DF 40                              INC     AX                      ; remember the header
 35496 000062E0 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35497 000062E2 49                              DEC     CX                      ; CX <- size of split block
 35498                                  alloc_set_sizes:
 35499 000062E3 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35500 000062E7 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35501                                  	;mov	bl,4Dh ; 'M'
 35502 000062EC B34D                            MOV     BL,arena_signature_normal
 35503 000062EE 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35504 000062F0 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35505 000062F3 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35506                                  
 35507                                  alloc_set_owner:
 35508 000062F8 8EDA                            MOV     DS,DX
 35509 000062FA 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35510 000062FE A30100                          MOV     [ARENA.OWNER],AX
 35511 00006301 8CD8                            MOV     AX,DS
 35512 00006303 40                              INC     AX
 35513 00006304 5B                              POP     BX
 35514                                  	;LeaveCrit critMem
 35515 00006305 E806B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35516                                  	
 35517                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35518                                  alloc_ok:
 35519                                          ;transfer SYS_RET_OK
 35520 00006308 E92CA3                  	JMP	SYS_RET_OK
 35521                                  
 35522                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35523                                  
 35524                                  ; MSDOS 6.0
 35525                                  ;----------------------------------------------------------------------------
 35526                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35527                                  ;
 35528                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35529                                  ;	any following free space onto this block; then we try to trim the
 35530                                  ;	block down to the size requested.
 35531                                  ;
 35532                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35533                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35534                                  ;	Thus the maximum-size-possible value that we return has already
 35535                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35536                                  ;
 35537                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35538                                  ;		finish it's work. For this reason we build the allocsf
 35539                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35540                                  ;		code.
 35541                                  ;
 35542                                  ;	ENTRY	(es) = segment of old block
 35543                                  ;		(bx) = newsize
 35544                                  ;		(ah) = SETBLOCK
 35545                                  ;
 35546                                  ;	EXIT	'C' clear if OK
 35547                                  ;		'C' set if error
 35548                                  ;		  (ax) = error_invalid_block
 35549                                  ;		       = error_arena_trashed
 35550                                  ;		       = error_not_enough_memory
 35551                                  ;		       = error_invalid_function
 35552                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35553                                  ;	USES	???? BUGBUG
 35554                                  ;----------------------------------------------------------------------------
 35555                                  
 35556                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35557                                  ;----------------------------------------------------------------------------
 35558                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35559                                  ;
 35560                                  ;   Assembler usage:
 35561                                  ;           MOV     ES,block
 35562                                  ;           MOV     BX,newsize
 35563                                  ;           MOV     AH,setblock
 35564                                  ;           INT     21h
 35565                                  ;         if setblock fails for growing, BX will have the maximum
 35566                                  ;         size possible
 35567                                  ;   Error return:
 35568                                  ;           AX = error_invalid_block
 35569                                  ;              = error_arena_trashed
 35570                                  ;              = error_not_enough_memory
 35571                                  ;              = error_invalid_function
 35572                                  ;----------------------------------------------------------------------------
 35573                                  
 35574                                  _$SETBLOCK:        
 35575                                  	; 04/08/2018 - Retro DOS v3.0
 35576                                  	;EnterCrit   critMem
 35577 0000630B E8E5AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35578                                  
 35579 0000630E BF0000                  	MOV     DI,ARENA.SIGNATURE
 35580 00006311 8CC0                            MOV     AX,ES
 35581 00006313 48                              DEC     AX
 35582 00006314 E86CFE                          CALL    check_signature
 35583 00006317 7303                            JNC     SHORT setblock_grab
 35584                                  
 35585                                  setblock_bad:
 35586 00006319 E905FF                          JMP     alloc_trashed
 35587                                  
 35588                                  setblock_grab:
 35589 0000631C 8ED8                            MOV     DS,AX
 35590 0000631E E872FE                          CALL    Coalesce
 35591 00006321 72F6                            JC      SHORT setblock_bad
 35592 00006323 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35593 00006327 51                              PUSH    CX
 35594 00006328 39CB                            CMP     BX,CX
 35595 0000632A 76A5                            JBE     SHORT alloc_get_size
 35596 0000632C E91EFF                          JMP     alloc_fail
 35597                                  
 35598                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35599                                  
 35600                                  ; MSDOS 6.0
 35601                                  ;----------------------------------------------------------------------------
 35602                                  ;**	$DEALLOC - Free Heap Memory
 35603                                  ;
 35604                                  ;	ENTRY	(es) = address of item
 35605                                  ;
 35606                                  ;	EXIT	'C' clear of OK
 35607                                  ;		'C' set if error
 35608                                  ;		  (AX) = error_invalid_block
 35609                                  ;	USES	???? BUGBUG
 35610                                  
 35611                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35612                                  ;----------------------------------------------------------------------------
 35613                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35614                                  ;
 35615                                  ;   Assembler usage:
 35616                                  ;           MOV     ES,block
 35617                                  ;           MOV     AH,dealloc
 35618                                  ;           INT     21h
 35619                                  ;
 35620                                  ;   Error return:
 35621                                  ;           AX = error_invalid_block
 35622                                  ;              = error_arena_trashed
 35623                                  ;---------------------------------------------------------------------------- 
 35624                                  
 35625                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35626                                  _$DEALLOC:
 35627                                  	; 14/05/2019 - Retro DOS v4.0    
 35628                                  	; 04/08/2018 - Retro DOS v3.0
 35629                                  	;EnterCrit   critMem
 35630 0000632F E8C1AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35631                                  
 35632                                  	; MSDOS 6.0			; M016, M068 - Start
 35633 00006332 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35634                                  					; Q: was the previous call an int 21
 35635                                  					;    exec call
 35636 00006338 740D                    	jz	short deallocate	; N: continue
 35637 0000633A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35638 00006340 7505                    	jne	short deallocate	; N: continue
 35639                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35640                                  	; 25/09/2023
 35641 00006342 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35642                                  deallocate:				; M016, M068 - End
 35643 00006347 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35644 0000634A 8CC0                            MOV     AX,ES
 35645 0000634C 48                              DEC     AX
 35646 0000634D E833FE                          CALL    check_signature
 35647 00006350 720A                            JC      SHORT dealloc_err
 35648 00006352 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35649                                  	;LeaveCrit critMem
 35650 00006357 E8B4AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35651                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35652                                          ;transfer SYS_RET_OK
 35653                                  dealloc_ok:
 35654 0000635A EBAC                    	jmp	short alloc_ok
 35655                                  	;JMP	SYS_RET_OK
 35656                                  
 35657                                  dealloc_err:
 35658                                  	;LeaveCrit critMem
 35659 0000635C E8AFAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35660                                          ;error	error_invalid_block
 35661                                  	;mov	al,9
 35662 0000635F B009                    	MOV	AL,error_invalid_block
 35663                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35664                                  dealloc_errj:
 35665                                  AllocOperErrj:	; 17/12/2022
 35666 00006361 E9DCA2                  	JMP	SYS_RET_ERR
 35667                                  
 35668                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35669                                  
 35670                                  ; MSDOS 6.0
 35671                                  ;----------------------------------------------------------------------------
 35672                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35673                                  ;
 35674                                  ;	Assembler usage:
 35675                                  ;           MOV     AH,AllocOper
 35676                                  ;           MOV     BX,method
 35677                                  ;           MOV     AL,func
 35678                                  ;           INT     21h
 35679                                  ;
 35680                                  ;	ENTRY	
 35681                                  ;		(al) = 0
 35682                                  ;		  Get allocation Strategy in (ax)
 35683                                  ;
 35684                                  ;		(al) = 1, (bx) = method = zw0000xy
 35685                                  ;		  Set allocation strategy.
 35686                                  ;		   w  = 1  => HIGH_ONLY
 35687                                  ;		   z  = 1  => HIGH_FIRST
 35688                                  ;		   xy = 00 => FIRST_FIT
 35689                                  ;		      = 01 => BEST_FIT
 35690                                  ;		      = 10 => LAST_FIT
 35691                                  ;
 35692                                  ;		(al) = 2
 35693                                  ;		  Get UMB link state in (al)
 35694                                  ;
 35695                                  ;		(al) = 3
 35696                                  ;		  Set UMB link state
 35697                                  ;		   (bx) = 0 => Unlink UMBs
 35698                                  ;		   (bx) = 1 => Link UMBs
 35699                                  ;
 35700                                  ;
 35701                                  ;	EXIT	'C' clear if OK
 35702                                  ;
 35703                                  ;		 if (al) = 0
 35704                                  ;		  (ax) = existing method
 35705                                  ;		 if (al) = 1
 35706                                  ;		  Sets allocation strategy
 35707                                  ;		 if (al) = 2
 35708                                  ;		  (al) = 0 => UMBs not linked
 35709                                  ;		  (al) = 1 => UMBs linked in
 35710                                  ;		 if (al) = 3
 35711                                  ;		  Links/Unlinks the UMBs into DOS chain
 35712                                  ;
 35713                                  ;		'C' set if error
 35714                                  ;		  AX = error_invalid_function
 35715                                  ;
 35716                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35717                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35718                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35719                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35720                                  ;		    arena' if an arena sig is damaged.
 35721                                  ;----------------------------------------------------------------------------
 35722                                  
 35723                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35724                                  ;----------------------------------------------------------------------------
 35725                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35726                                  ;
 35727                                  ;   Assembler usage:
 35728                                  ;           MOV     AH,AllocOper
 35729                                  ;           MOV     BX,method
 35730                                  ;           MOV     AL,func
 35731                                  ;           INT     21h
 35732                                  ;
 35733                                  ;   Error return:
 35734                                  ;           AX = error_invalid_function
 35735                                  ;----------------------------------------------------------------------------
 35736                                  
 35737                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35738                                  _$ALLOCOPER:
 35739                                  	; 14/05/2019 - Retro DOS v4.0
 35740                                  	; MSDOS 6.0
 35741 00006364 08C0                    	or	al,al ; 0
 35742 00006366 741E                    	jz	short AllocGetStrat
 35743                                  	; 17/12/2022
 35744                                  	;cmp	al,1
 35745                                  	;jz	short AllocSetStrat
 35746                                  
 35747                                  	; 01/12/2022
 35748                                  	;cmp	al, 2
 35749                                  	;jb	short AllocSetStrat
 35750                                  	;ja	short AllocSetLink
 35751                                  	;;jmp	short AllocGetLink
 35752                                  ;AllocGetLink:
 35753                                  	; MSDOS 6.0
 35754                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35755                                  	;and 	al,LINKSTATE		
 35756                                  	;;transfer SYS_RET_OK
 35757                                  	;jmp	SYS_RET_OK
 35758                                  
 35759 00006368 3C02                    	cmp	al,2
 35760                                  	; 17/12/2022
 35761 0000636A 7223                    	jb	short AllocSetStrat ; al = 1
 35762 0000636C 7432                    	je	short AllocGetLink
 35763                                  
 35764                                  	;cmp	al,2
 35765                                  	;jz	short AllocGetLink
 35766 0000636E 3C03                    	cmp	al,3
 35767 00006370 7436                    	jz	short AllocSetLink
 35768                                  
 35769                                  	; 15/04/2018
 35770                                  	;CMP	AL,1
 35771                                          ;JB	SHORT AllocOperGet
 35772                                          ;JZ	SHORT AllocOperSet
 35773                                  
 35774                                  AllocOperError:
 35775                                  	; 04/08/2018 - Retro DOS v3.0
 35776                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35777                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35778 00006372 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35779                                  	;error	error_invalid_function
 35780                                  	;mov	al,1
 35781 00006378 B001                    	MOV	AL,error_invalid_function
 35782                                  	; 17/12/2022
 35783                                  ;AllocOperErrj:
 35784                                  	;JMP	SYS_RET_ERR
 35785                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35786                                  	;jmp	short dealloc_errj
 35787                                  	; 17/12/2022
 35788 0000637A EBE5                    	jmp	short AllocOperErrj
 35789                                  
 35790                                  AllocArenaError:
 35791                                  	; MSDOS 6.0
 35792 0000637C 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35793                                  					; M009: Extended Error Locus
 35794                                  	;error	error_arena_trashed	; M009:
 35795                                  	;mov	al,7
 35796 00006382 B007                    	MOV	AL,error_arena_trashed
 35797                                  	;JMP	SYS_RET_ERR
 35798 00006384 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35799                                  
 35800                                  AllocGetStrat: 
 35801                                  	; MSDOS 6.0
 35802                                  AllocOperGet:
 35803 00006386 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35804 0000638A 30E4                            XOR     AH,AH
 35805                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35806                                  	;transfer SYS_RET_OK
 35807                                  AllocOperOk:
 35808                                  	; 17/12/2022
 35809                                  	;jmp	short dealloc_ok
 35810 0000638C E9A8A2                  	JMP	SYS_RET_OK
 35811                                  
 35812                                  AllocSetStrat: 
 35813                                  	; 14/05/2019
 35814                                  	; MSDOS 6.0
 35815 0000638F 53                      	push	bx			; M000 - start
 35816                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35817                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35818                                  	; 17/12/2022
 35819 00006390 80E33F                  	and	bl,3Fh
 35820 00006393 83FB02                  	cmp	bx,2			; BX must be 0-2
 35821                                  	;cmp	bl,2
 35822 00006396 5B                      	pop	bx			; M000 - end
 35823 00006397 77D9                    	ja	short AllocOperError
 35824                                  
 35825                                  AllocOperSet:
 35826 00006399 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35827                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35828                                  	;transfer SYS_RET_OK
 35829                                  AllocOperOkj:
 35830 0000639E EBEC                    	jmp	short AllocOperOk
 35831                                  	;JMP	SYS_RET_OK
 35832                                  
 35833                                  AllocGetLink:
 35834                                  	; MSDOS 6.0
 35835 000063A0 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35836                                  	;and	al,1
 35837 000063A4 2401                    	and 	al,LINKSTATE		
 35838                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35839                                  	;transfer SYS_RET_OK
 35840                                  AllocOperOkj2:
 35841                                  	; 17/12/2022
 35842 000063A6 EBE4                    	jmp	short AllocOperOk
 35843                                  	;jmp	short AllocOperOkj
 35844                                  	;;JMP	SYS_RET_OK
 35845                                  
 35846                                  AllocSetLink:
 35847                                  	; MSDOS 6.0			; M009 - start
 35848 000063A8 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35849 000063AD 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35850 000063B0 74C0                    	je	short AllocOperError	; N: error
 35851                                  					; Y: continue
 35852                                  					; M009 - end
 35853 000063B2 83FB01                  	cmp	bx,1			
 35854 000063B5 7204                    	jb	short UnlinkUmbs
 35855 000063B7 741C                    	jz	short LinkUmbs
 35856                                  	
 35857 000063B9 EBB7                    	jmp	short AllocOperError
 35858                                  	
 35859                                  UnlinkUmbs:
 35860                                  	;test	byte [ss:UMBFLAG],1
 35861 000063BB 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35862 000063C1 7410                    	jz	short unlinked		; Y: return 
 35863                                  	
 35864 000063C3 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35865 000063C6 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35866                                  	
 35867                                  					; make it last
 35868 000063C8 C60600005A              	mov	byte [0],arena_signature_end
 35869                                  	
 35870                                  	;and	byte [ss:UMBFLAG],0FEh
 35871 000063CD 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35872                                  	
 35873                                  unlinked:
 35874                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35875                                  	;transfer SYS_RET_OK
 35876                                  	; 17/12/2022
 35877 000063D3 EBB7                    	jmp	short AllocOperOk
 35878                                  	;jmp	short AllocOperOkj2
 35879                                  	;;JMP	SYS_RET_OK
 35880                                  
 35881                                  LinkUmbs:
 35882 000063D5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35883 000063DB 7510                    	jnz	short linked		; Y: return
 35884                                  	
 35885 000063DD E80F00                  	call	GetLastArena		; get arena before umb_head
 35886 000063E0 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35887                                  	
 35888                                  					; make it normal. M061: ds points to
 35889                                  					; arena before umb_head
 35890 000063E2 C60600004D              	mov	byte [0],arena_signature_normal
 35891                                  	
 35892 000063E7 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35893                                  linked:
 35894                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35895                                  	;transfer SYS_RET_OK
 35896                                  	; 17/12/2022
 35897 000063ED EB9D                    	jmp	short AllocOperOk
 35898                                  	;jmp	short unlinked
 35899                                  	;;JMP	SYS_RET_OK
 35900                                  
 35901                                  ; MSDOS 6.0
 35902                                  ;--------------------------------------------------------------------------
 35903                                  ; Procedure Name : GetLastArena		-  M003
 35904                                  ;
 35905                                  ; Inputs	 : cx = umb_head
 35906                                  ;
 35907                                  ;
 35908                                  ; Outputs	 : If UMBs are linked
 35909                                  ;			ES = umb_head
 35910                                  ;			DS = arena before umb_head
 35911                                  ;		   else
 35912                                  ;			DS = last arena
 35913                                  ;			ES = next arena. will be umb_head if NC.
 35914                                  ;
 35915                                  ;		   CY if error
 35916                                  ;
 35917                                  ; Uses		 : DS, ES, DI, BX
 35918                                  ;--------------------------------------------------------------------------
 35919                                  
 35920                                  ; 14/05/2019 - Retro DOS v4.0
 35921                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35922                                  
 35923                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35924                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35925                                  	
 35926                                  GetLastArena:
 35927 000063EF 50                      	push	ax			; save ax
 35928                                  
 35929 000063F0 36A1[2400]              	mov	ax,[ss:arena_head]
 35930 000063F4 8EC0                    	mov	es,ax			; es = arena_head
 35931 000063F6 31FF                    	xor	di,di
 35932                                  
 35933 000063F8 26803D5A                	cmp     byte [es:di],arena_signature_end
 35934                                  					; Q: is this the last arena
 35935 000063FC 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35936                                  					
 35937                                  GLA_next:
 35938 000063FE 8ED8                    	mov	ds,ax
 35939 00006400 E879FD                  	call	arena_next		; ax, es -> next arena
 35940                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35941                                  	;jc	short GLA_err
 35942                                  	; 17/12/2022
 35943 00006403 7228                    	jc	short GLA_err2
 35944                                  
 35945 00006405 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35946 0000640B 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35947                                  					;    umb_head
 35948                                  					; N: terminating condition is 05Ah
 35949                                  
 35950 0000640D 26803D5A                	cmp     byte [es:di],arena_signature_end
 35951                                  					; Q: is this the last arena
 35952 00006411 EB02                    	jmp	short GLA_@f
 35953                                  GLA_chkumb:
 35954 00006413 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35955                                  GLA_@f:
 35956 00006415 75E7                    	jne	short GLA_next		; N: get next arena
 35957                                  
 35958                                  GLA_done:
 35959                                  					; M061 - Start
 35960 00006417 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35961 0000641D 750B                    	jnz	short GLA_ret		; Y: we're done
 35962                                  					; N: let us confirm that the next 
 35963                                  					;    arena is umb_head
 35964 0000641F 8ED8                    	mov	ds,ax
 35965 00006421 E858FD                  	call	arena_next		; ax, es -> next arena
 35966                                  	;jc	short GLA_err
 35967 00006424 7207                    	jc	short GLA_err2
 35968 00006426 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35969 00006428 7502                    	jne	short GLA_err		; N: error
 35970                                  					; M061 - End
 35971                                  GLA_ret:
 35972                                  	; 17/12/2022				
 35973                                  	;clc
 35974                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35975                                  	;clc
 35976 0000642A 58                      	pop	ax			; M061
 35977 0000642B C3                      	retn				; M061
 35978                                  
 35979                                  GLA_err:
 35980 0000642C F9                      	stc				; M061
 35981                                  GLA_err2:
 35982 0000642D 58                      	pop	ax
 35983 0000642E C3                      	retn
 35984                                  
 35985                                  ;============================================================================
 35986                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35987                                  ;============================================================================
 35988                                  ; 04/08/2018 - Retro DOS v3.0
 35989                                  
 35990                                  ;	TITLE SRVCALL - Server DOS call
 35991                                  ;	NAME  SRVCALL
 35992                                  
 35993                                  ;**	SRVCALL.ASM - Server DOS call functions
 35994                                  ;
 35995                                  ;
 35996                                  ;	$ServerCall
 35997                                  ;
 35998                                  ;	Modification history:
 35999                                  ;
 36000                                  ;	    Created: ARR 08 August 1983
 36001                                  
 36002                                  ;AsmVars <Installed>
 36003                                  
 36004                                  ;include dpl.asm
 36005                                  
 36006                                  ;Installed = TRUE
 36007                                  
 36008                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36009                                  ; ---------------------------------------------------------------------------
 36010                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36011                                  
 36012                                  ;BREAK <ServerCall -- Server DOS call>
 36013                                  
 36014                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36015                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36016                                  
 36017                                  ;hkn; TABLE	SEGMENT
 36018                                  ;Public SRVC001S,SRVC001E
 36019                                  ;SRVC001S label byte
 36020                                  
 36021                                  SRVC001S:
 36022                                  
 36023 0000642F [3364]                  SERVERTAB:	dw	SERVER_DISP
 36024 00006431 [8564]                  SERVERLEAVE:	dw	SERVERRETURN
 36025 00006433 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36026 00006434 [ED64]                  		dw	SRV_CALL	; 0
 36027 00006436 [8664]                  		dw	COMMIT_ALL	; 1
 36028 00006438 [BC64]                  		dw	CLOSE_NAME	; 2
 36029 0000643A [C764]                  		dw	CLOSE_UID	; 3
 36030 0000643C [CE64]                  		dw	CLOSE_UID_PID	; 4
 36031 0000643E [D564]                  		dw	GET_LIST	; 5
 36032 00006440 [2E65]                  		dw	GET_DOS_DATA	; 6
 36033 00006442 [5265]                  		dw	SPOOL_OPER	; 7
 36034 00006444 [5265]                  		dw	SPOOL_OPER	; 8
 36035 00006446 [5265]                  		dw	SPOOL_OPER	; 9
 36036 00006448 [5E65]                  		dw	_$SetExtendedError  ; 10
 36037                                  
 36038                                  SERVER_DISP_END:  ;  LABEL BYTE
 36039                                  
 36040                                  ;SRVC001E label byte
 36041                                  
 36042                                  SRVC001E:
 36043                                  
 36044                                  ;hkn; TABLE	ENDS
 36045                                  
 36046                                  ;----------------------------------------------------------------------------
 36047                                  ;
 36048                                  ; Procedure Name : $ServerCall
 36049                                  ;
 36050                                  ; Inputs:
 36051                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36052                                  ; Function:
 36053                                  ;	AL=0	Server DOS call
 36054                                  ;	AL=1	Commit All files
 36055                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36056                                  ;	AL=3	Close all files for DPL_UID
 36057                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36058                                  ;	AL=5	Get open file list entry
 36059                                  ;		    IN: BX File Index
 36060                                  ;			CX User Index
 36061                                  ;		    OUT:ES:DI -> Name
 36062                                  ;			BX = UID
 36063                                  ;		    CX = # locked blocks held by this UID
 36064                                  ;	AL=6	Get DOS data area
 36065                                  ;		    OUT: DS:SI -> Start
 36066                                  ;			CX size in bytes of swap if indos
 36067                                  ;			DX size in bytes of swap always
 36068                                  ;	AL=7	Get truncate flag
 36069                                  ;	AL=8	Set truncate flag
 36070                                  ;	AL=9	Close all spool files
 36071                                  ;	AL=10	SetExtendedError
 36072                                  ;
 36073                                  ;----------------------------------------------------------------------------
 36074                                  
 36075                                  _$ServerCall:
 36076                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36077                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36078                                  	; 10/06/2019
 36079                                  	; 29/04/2019 - Retro DOS v4.0
 36080                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36081                                  
 36082                                  	; 05/08/2018 - Retro DOS v3.0
 36083                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36084 0000644A 3C07                    	CMP	AL,7
 36085 0000644C 7204                    	JB	short SET_STUFF
 36086 0000644E 3C09                    	CMP	AL,9
 36087 00006450 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36088                                  SET_STUFF:
 36089 00006452 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36090                                  	;mov	bx,[si+12h]
 36091 00006454 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36092                                  
 36093                                  	; MSDOS 6.0
 36094                                  ;SR;
 36095                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36096                                  ; of USER_ID
 36097                                  
 36098 00006457 36F606[3010]01          	test	byte [SS:IsWin386],1
 36099 0000645D 7505                    	jnz	short skip_win386
 36100                                  
 36101                                  ;hkn; SS override for user_id and proc_id
 36102                                  	; 15/08/2018
 36103 0000645F 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36104                                  
 36105                                  skip_win386:
 36106 00006464 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36107 00006467 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36108                                  NO_SET_ID:
 36109                                  	; 10/06/2019 - Retro DOS v4.0
 36110 0000646C 2EFF36[3164]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36111 00006471 2EFF36[2F64]            	PUSH	word [cS:SERVERTAB]	; push table address
 36112 00006476 50                      	PUSH	AX
 36113 00006477 E88CAD                  	call	TableDispatch
 36114                                  
 36115                                  ;hkn; SS override
 36116                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36117 0000647A 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36118                                  	;error	error_invalid_function
 36119                                  	;mov	al,1
 36120 00006480 B001                    	MOV	AL,error_invalid_function
 36121                                  servercall_error:
 36122 00006482 E9BBA1                  	JMP	SYS_RET_ERR
 36123                                  
 36124                                  SERVERRETURN:
 36125 00006485 C3                      	retn
 36126                                  
 36127                                  ; Commit - iterate through the open file list and make sure that the
 36128                                  ; directory entries are correctly updated.
 36129                                  
 36130                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36131                                  COMMIT_ALL:
 36132 00006486 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36133 00006488 16                      	push	ss
 36134 00006489 1F                      	pop	ds
 36135 0000648A E866AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36136                                  CommitLoop:
 36137 0000648D 53                      	push	bx
 36138 0000648E E82401                  	call	SFFromSFN
 36139 00006491 7222                    	JC	short CommitDone
 36140 00006493 26833D00                	cmp	word [es:di],0
 36141                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36142                                  					; if (ThisSFT->refcount != 0)
 36143 00006497 7418                    	JZ	short CommitNext
 36144                                  	;cmp	word [es:di],0FFFFh ; -1
 36145 00006499 26833DFF                	cmp	word [ES:DI],sf_busy
 36146                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36147                                  					; BUSY SFTs have god knows what
 36148 0000649D 7412                    	JZ	short CommitNext	;   in them.
 36149                                  	; 17/12/2022
 36150 0000649F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36151                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36152 000064A4 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36153                                  					;	doesn't deadlock
 36154 000064A6 893E[9E05]              	MOV	[THISSFT],DI
 36155 000064AA 8C06[A005]              	MOV	[THISSFT+2],ES
 36156 000064AE E83FCB                  	call	DOS_COMMIT		;	DOSCommit ();
 36157                                  CommitNext:
 36158 000064B1 5B                      	pop	bx
 36159 000064B2 43                      	INC	BX
 36160 000064B3 EBD8                    	JMP	short CommitLoop
 36161                                  CommitDone:
 36162 000064B5 E856AE                  	call	LCritSFT
 36163 000064B8 5B                      	pop	bx
 36164                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36165                                  Commit_Ok:
 36166 000064B9 E97BA1                  	jmp	SYS_RET_OK
 36167                                  	
 36168                                  
 36169                                  CLOSE_NAME:
 36170                                  
 36171                                  ;if installed
 36172                                  
 36173                                  ;hkn; SS override
 36174                                  	;call	far [ss:MFTcloN]
 36175 000064BC 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36176                                  ;else
 36177                                  ;	Call	MFTcloN
 36178                                  ;endif
 36179                                  
 36180                                  CheckReturns:
 36181 000064C1 7202                    	JC	short func_err
 36182                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36183                                  	;transfer SYS_RET_OK
 36184                                  Commit_Okj:
 36185 000064C3 EBF4                    	jmp	short Commit_Ok
 36186                                  	;jmp	SYS_RET_OK
 36187                                  
 36188                                  func_err:
 36189                                  	;transfer SYS_RET_ERR
 36190                                  	;jmp	SYS_RET_ERR
 36191 000064C5 EBBB                    	jmp	short servercall_error
 36192                                  
 36193                                  CLOSE_UID:
 36194                                  
 36195                                  ;if installed
 36196                                  ;hkn; SS override
 36197                                  	;call	far [ss:MFTclU]
 36198 000064C7 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36199                                  ;else
 36200                                  ;	Call	MFTclU
 36201                                  ;endif
 36202 000064CC EBF3                    	JMP	short CheckReturns
 36203                                  
 36204                                  CLOSE_UID_PID:
 36205                                  
 36206                                  ;if installed
 36207                                  ;hkn; SS override
 36208                                  	;call	far [ss:MFTCloseP]
 36209 000064CE 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36210                                  ;else
 36211                                  ;	Call	MFTCloseP
 36212                                  ;endif
 36213 000064D3 EBEC                    	JMP	short CheckReturns
 36214                                  
 36215                                  GET_LIST:
 36216                                  
 36217                                  ;if installed
 36218                                  ;hkn; SS override
 36219                                  	;call	far [ss:MFT_get]
 36220 000064D5 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36221                                  ;else
 36222                                  ;	Call	MFT_get
 36223                                  ;endif
 36224 000064DA 72E9                    	JC	short func_err
 36225 000064DC E8A29F                  	call	Get_User_Stack
 36226                                  	;mov	[si+2],bx
 36227 000064DF 895C02                  	MOV	[SI+user_env.user_BX],BX
 36228                                  	;mov	[si+10],di
 36229 000064E2 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36230                                  	;mov	[si+16],es
 36231 000064E5 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36232                                  SetCXOK:
 36233                                  	;mov	[si+4],cx
 36234 000064E8 894C04                  	MOV	[SI+user_env.user_CX],CX
 36235                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36236                                  	;transfer SYS_RET_OK
 36237                                  Commit_Okj2:
 36238                                  	; 17/12/2022
 36239 000064EB EBCC                    	jmp	short Commit_Ok
 36240                                  	;jmp	short Commit_Okj
 36241                                  	;;jmp	SYS_RET_OK
 36242                                  
 36243                                  SRV_CALL:
 36244 000064ED 58                      	POP	AX			; get rid of call to $srvcall
 36245 000064EE 1E                      	push	ds
 36246 000064EF 56                      	push	si
 36247 000064F0 E88E9F                  	call	Get_User_Stack
 36248 000064F3 5F                      	pop	di
 36249 000064F4 07                      	pop	es
 36250                                  
 36251                                  ; DS:SI point to stack
 36252                                  ; ES:DI point to DPL
 36253                                  
 36254 000064F5 E8EDAC                  	call	XCHGP
 36255                                  
 36256                                  ; DS:SI point to DPL
 36257                                  ; ES:DI point to stack
 36258                                  ;
 36259                                  ; We now copy the registers from DPL to save stack
 36260                                  
 36261 000064F8 56                      	push	si
 36262 000064F9 B90600                  	MOV	CX,6
 36263 000064FC F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36264 000064FE 47                      	INC	DI
 36265 000064FF 47                      	INC	DI			; Skip user_BP
 36266 00006500 A5                      	MOVSW				; DS
 36267 00006501 A5                      	MOVSW				; ES
 36268 00006502 5E                      	pop	si			; DS:SI -> DPL
 36269 00006503 8B04                    	mov	ax,[SI]
 36270                                  	;MOV	AX,[SI+DPL.AX]
 36271                                  	;mov	bx,[si+2]
 36272 00006505 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36273                                  	;mov	cx,[si+4]
 36274 00006508 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36275                                  	;mov	dx,[si+6]
 36276 0000650B 8B5406                  	MOV	DX,[SI+DPL.DX]
 36277                                  	;mov	di,[si+10]
 36278 0000650E 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36279                                  	;mov	es,[si+14]
 36280 00006511 8E440E                  	MOV	ES,[SI+DPL.ES]
 36281                                  	;push	word [si+8]
 36282 00006514 FF7408                  	PUSH	word [SI+DPL.SI]
 36283                                  	;mov	ds,[si+12]
 36284 00006517 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36285 0000651A 5E                      	POP	SI
 36286                                  
 36287                                  ;hkn; SS override for next 3
 36288 0000651B 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36289 00006520 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36290 00006525 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36291 0000652B E95A9E                  	jmp	REDISP
 36292                                  
 36293                                  GET_DOS_DATA:
 36294 0000652E 16                      	push	ss
 36295 0000652F 07                      	pop	es
 36296 00006530 BF[2003]                	MOV     DI,SWAP_START
 36297 00006533 B9[AC0A]                	MOV     CX,SWAP_END
 36298 00006536 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36299 00006539 29F9                    	SUB     CX,DI
 36300 0000653B 29FA                    	SUB     DX,DI
 36301 0000653D D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36302 0000653F 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36303 00006542 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36304 00006544 E83A9F                  	call	Get_User_Stack
 36305                                  	;mov	[si+14],es
 36306 00006547 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36307                                  	;mov	[si+8],di
 36308 0000654A 897C08                  	MOV     [SI+user_env.user_SI],DI
 36309                                  	;mov	[si+6],dx
 36310 0000654D 895406                  	MOV     [SI+user_env.user_DX],DX
 36311 00006550 EB96                    	JMP	short SetCXOK
 36312                                  
 36313                                  SPOOL_OPER:
 36314                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36315                                  
 36316 00006552 50                      	push    ax
 36317 00006553 B82511                  	mov     ax,1125h
 36318 00006556 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36319                                  			; STACK: WORD subfunction
 36320                                  			; Return: CF set on error, AX = error code
 36321                                  			; STACK unchanged
 36322 00006558 5B                      	pop	bx
 36323                                  	; 17/12/2022
 36324                                  	;JC	short func_err2
 36325 00006559 7390                    	jnc	short Commit_Okj2
 36326                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36327                                  	;;jmp	SYS_RET_OK
 36328                                  	;jmp	short Commit_Okj2
 36329                                  	
 36330                                  func_err2:
 36331 0000655B E9E2A0                  	jmp	SYS_RET_ERR
 36332                                  
 36333                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36334                                  ;--------------------------------------------------------------------------
 36335                                  ;
 36336                                  ; Procedure Name : $SetExtendedError
 36337                                  ;
 36338                                  ; $SetExtendedError takes extended error information and loads it up for the
 36339                                  ; next extended error call. This is used by interrupt-level proccessors to
 36340                                  ; mask their actions.
 36341                                  ;
 36342                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36343                                  ;   Outputs: none
 36344                                  ;
 36345                                  ;---------------------------------------------------------------------------
 36346                                  
 36347                                  _$SetExtendedError:
 36348                                  
 36349                                  ;hkn; SS override for all variables used
 36350                                  
 36351 0000655E 8B04                    	mov	ax,[si]
 36352                                  	;MOV	AX,[SI+DPL.AX]
 36353 00006560 36A3[2403]              	MOV	[SS:EXTERR],AX
 36354                                  	;mov	ax,[si+10]
 36355 00006564 8B440A                  	MOV	AX,[SI+DPL.DI]
 36356 00006567 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36357                                  	;mov	ax,[si+14]
 36358 0000656B 8B440E                  	MOV	AX,[SI+DPL.ES]
 36359 0000656E 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36360                                  	;mov	ax,[si+2]
 36361 00006572 8B4402                  	MOV	AX,[SI+DPL.BX]
 36362 00006575 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36363                                  	;mov	ax,[si+4]
 36364 00006579 8B4404                  	MOV	AX,[SI+DPL.CX]
 36365 0000657C 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36366 00006581 C3                      	retn
 36367                                  
 36368                                  ;============================================================================
 36369                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36370                                  ;============================================================================
 36371                                  ; 05/08/2018 - Retro DOS v3.0
 36372                                  ; 05/05/2019 - Retro DOS v4.0
 36373                                  
 36374                                  ;**	Handle related utilities for MSDOS 2.X.
 36375                                  ;----------------------------------------------------------------------------
 36376                                  ;	pJFNFromHandle	written
 36377                                  ;	SFFromHandle	written
 36378                                  ;	SFFromSFN	written
 36379                                  ;	JFNFree 	written
 36380                                  ;	SFNFree 	written
 36381                                  ;
 36382                                  ;	Modification history:
 36383                                  ;
 36384                                  ;	    Created: MZ 1 April 1983
 36385                                  ;----------------------------------------------------------------------------
 36386                                  
 36387                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36388                                  
 36389                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36390                                  ;----------------------------------------------------------------------------
 36391                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36392                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36393                                  ;
 36394                                  ;	NOTE:
 36395                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36396                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36397                                  ;
 36398                                  ;	ENTRY	(bx) = handle
 36399                                  ;	EXIT	'C' clear if ok
 36400                                  ;		  (es:di) = address of JFN value
 36401                                  ;		'C' set if error
 36402                                  ;		  (ax) = error code
 36403                                  ;	USES	AX, DI, ES, Flags
 36404                                  ;----------------------------------------------------------------------------
 36405                                  
 36406                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36407                                  
 36408                                  pJFNFromHandle:
 36409                                  	; 05/05/2019 - Retro DOS v4.0
 36410                                  	;getdseg <es>			; es -> dosdata
 36411 00006582 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36412                                  	
 36413                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36414 00006587 268E06[3003]            	mov	es,[es:CurrentPDB]
 36415                                  
 36416                                  	;cmp	bx,[ES:32h]
 36417 0000658C 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36418 00006591 7204                    	JB	short pjfn10		; no, get offset
 36419                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36420                                  	;mov	al,6
 36421 00006593 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36422                                  ReturnCarry:
 36423 00006595 F9                      	STC                             ; signal error
 36424 00006596 C3                      	retn				; go back
 36425                                  pjfn10: 
 36426                                  	;les	di,[es:34h]
 36427 00006597 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36428 0000659C 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36429                                  	;clc
 36430                                  pJFNFromHandle_error:
 36431 0000659E C3                      	retn
 36432                                  
 36433                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36434                                  ;----------------------------------------------------------------------------
 36435                                  ;
 36436                                  ; Procedure Name : SFFromHandle
 36437                                  ;
 36438                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36439                                  ;
 36440                                  ;   Input:      BX has handle
 36441                                  ;   Output:     Carry Set
 36442                                  ;                   AX has error code
 36443                                  ;               Carry Reset
 36444                                  ;                   ES:DI has pointer to SF entry
 36445                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36446                                  ; NOTE:
 36447                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36448                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36449                                  ;
 36450                                  ;----------------------------------------------------------------------------
 36451                                  
 36452                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36453                                  
 36454                                  SFFromHandle:
 36455 0000659F E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36456                                  	;retc				; return if error
 36457 000065A2 72FA                    	jc	short pJFNFromHandle_error
 36458 000065A4 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36459                                  	;JNZ	short GetSF		; nope, suck out SF
 36460                                  	;;mov	al,6
 36461                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36462                                  	;jmp	short ReturnCarry	; signal it
 36463                                  	; 17/12/2022
 36464                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36465 000065A8 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36466                                  	;JNZ	short GetSF		; nope, suck out SF
 36467                                  	;;mov	al,6
 36468                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36469                                  	;jmp	short ReturnCarry	; signal it
 36470                                  GetSF:
 36471 000065AA 53                      	push	bx			; save handle
 36472 000065AB 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36473 000065AE 30FF                    	XOR     BH,BH                   ; ignore upper half
 36474 000065B0 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36475 000065B3 5B                      	pop	bx			; restore
 36476 000065B4 C3                      	retn                        	; say goodbye
 36477                                  
 36478                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36479                                  
 36480                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36481                                  ;----------------------------------------------------------------------------
 36482                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36483                                  ;	is more than just a simple index instruction because the SF table
 36484                                  ;	can be made up of multiple pieces chained together. We follow the
 36485                                  ;	chain to the right piece and then do the index operation.
 36486                                  ;
 36487                                  ;   NOTE:
 36488                                  ;	This routine is called from SFFromHandle which is called
 36489                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36490                                  ;
 36491                                  ;	ENTRY	BX has SF index
 36492                                  ;	EXIT	'C' clear if OK
 36493                                  ;		  ES:DI points to SF entry
 36494                                  ;		'C' set if index too large
 36495                                  ;	USES	BX, DI, ES
 36496                                  ;----------------------------------------------------------------------------
 36497                                  
 36498                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36499                                  
 36500                                  SFFromSFN:
 36501                                  	; 05/05/2019 - Retro DOS v4.0
 36502                                  	;getdseg <es>			; es -> dosdata
 36503 000065B5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36504                                  
 36505                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36506 000065BA 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36507                                  sfsfn5:	
 36508                                  	;cmp	bx,[es:di+4]
 36509 000065BF 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36510 000065C3 720E                    	JB	short sfsfn7		; yes, go grab it
 36511                                  	;sub	bx,[es:di+4]
 36512 000065C5 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36513 000065C9 26C43D                  	les	di,[es:di] ; 14/08/2018
 36514                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36515 000065CC 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36516 000065CF 75EE                    	JNZ	short sfsfn5		; no, try again
 36517 000065D1 F9                      	STC
 36518 000065D2 C3                      	retn				; return with error, not found
 36519                                  sfsfn7:
 36520 000065D3 50                      	push	ax
 36521                                  	;mov	ax,53 ; MSDOS 3.3
 36522                                  	;mov	ax,59 ; MSDOS 6.0
 36523                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36524                                  	
 36525                                  	; 17/12/2022
 36526 000065D4 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36527                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36528                                  	;mov	ax,SF_ENTRY.size ; 59
 36529                                  	
 36530 000065D6 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36531 000065D8 01C7                    	ADD	DI,AX			; add base of SF block
 36532 000065DA 58                      	pop	ax
 36533                                  	;add	di,6
 36534 000065DB 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36535 000065DE C3                      	retn				; return with 'C' clear
 36536                                  
 36537                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36538                                  
 36539                                  ;**	JFNFree - Find a Free JFN Slot
 36540                                  ;----------------------------------------------------------------------------
 36541                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36542                                  ;
 36543                                  ;	ENTRY	(ss) = DOSDATA
 36544                                  ;	EXIT	'C' clear if OK
 36545                                  ;		  (bx) = new handle
 36546                                  ;		  (es:di) = pointer to JFN slot
 36547                                  ;		'C' set if error
 36548                                  ;		  (al) = error code
 36549                                  ;	USES	bx, di, es, flags
 36550                                  ;----------------------------------------------------------------------------
 36551                                  
 36552                                  JFNFree:
 36553 000065DF 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36554                                  jfnf1:	
 36555 000065E1 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36556 000065E4 7209                    	JC	short jfnf5		; no more handles
 36557 000065E6 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36558 000065EA 7405                    	je	short jfnfx		; yes, carry is clear
 36559 000065EC 43                      	INC     BX                      ; no, next handle
 36560 000065ED EBF2                    	JMP	short jfnf1		; and try again
 36561                                  
 36562                                  	; Error. 'C' set
 36563                                  jfnf5:	
 36564                                  	;mov	al,4
 36565 000065EF B004                    	MOV	AL,error_too_many_open_files
 36566                                  jfnfx:	
 36567 000065F1 C3                      	retn				; bye
 36568                                  
 36569                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36570                                  
 36571                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36572                                  ;----------------------------------------------------------------------------
 36573                                  ;	SFNFree scans through the sf table looking for a free entry
 36574                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36575                                  ;
 36576                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36577                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36578                                  ;	we can't just mark it busy because we may get blown out of our open
 36579                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36580                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36581                                  ;	an SFT with this value we look to see if it belongs to this user
 36582                                  ;	and process.  If it does belong to us then it must be an orphan
 36583                                  ;	and we reclaim it.
 36584                                  ;
 36585                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36586                                  ;		over and over, but we could at least set a high water mark...
 36587                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36588                                  ;		even though this is not a frequently called routine - jgl
 36589                                  ;
 36590                                  ;	ENTRY	(ss) = DOSDATA
 36591                                  ;	EXIT	'C' clear if no error
 36592                                  ;		  (bx) = SFN
 36593                                  ;		  (es:di) = pointer to SFT
 36594                                  ;		  es:[di].SFT_REF_COUNT = -1
 36595                                  ;		'C' set if error
 36596                                  ;		  (al) = error code
 36597                                  ;	USES	bx, di, es, Flags
 36598                                  ;----------------------------------------------------------------------------
 36599                                  
 36600                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36601                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36602                                  
 36603                                  SFNFree:
 36604                                  	; 12/08/2018
 36605                                  	; 05/08/2018 - Retro DOS v3.0
 36606                                  	;
 36607                                  	; MSDOS 6.0
 36608 000065F2 50                      	push	ax
 36609 000065F3 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36610                                  sfnf5:	
 36611 000065F5 53                      	push	bx
 36612 000065F6 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36613 000065F9 5B                      	pop	bx
 36614 000065FA 723A                    	jc	short sfnf95		; no more free SFNs
 36615 000065FC 26833D00                	cmp	word [ES:DI],0
 36616                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36617 00006600 741D                    	je	short sfnf20			; yep, got one
 36618                                  	
 36619                                  	;cmp	word [es:di],0FFFFh ; -1
 36620 00006602 26833DFF                	cmp	word [ES:DI],sf_busy
 36621                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36622 00006606 7403                    	je	short sfnf10		; special busy mark
 36623                                  sfnf7:	
 36624 00006608 43                      	inc	bx			; try the next one
 36625 00006609 EBEA                    	jmp	short sfnf5
 36626                                  
 36627                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36628                                  ;	it was abandoned during a earlier call and we can use it.
 36629                                  ;
 36630                                  ;	(bx)	= SFN
 36631                                  ;	(es:di) = pointer to SFT
 36632                                  ;	(TOS)	= caller's (ax)
 36633                                  
 36634                                  sfnf10:	
 36635 0000660B 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36636                                  	;cmp	[es:di+2Fh],ax
 36637 0000660F 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36638 00006613 75F3                    	jnz	short sfnf7		; not ours
 36639 00006615 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36640                                  	;cmp	[es:di+31h],ax
 36641 00006619 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36642 0000661D 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36643                                  
 36644                                  ;	We have an SFT to allocate
 36645                                  ;
 36646                                  ;	(bx)	= SFN
 36647                                  ;	(es:di) = pointer to SFT
 36648                                  ;	(TOS)	= caller's (ax)
 36649                                  
 36650                                  sfnf20:
 36651                                  	; cf = 0 ;; Retro DOS v3.0
 36652                                  
 36653                                  	;mov	word [es:di],0FFFFh
 36654 0000661F 26C705FFFF              	mov	word [ES:DI],sf_busy
 36655                                  					; make sure that this is allocated
 36656                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36657                                  
 36658 00006624 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36659                                  	;mov	[es:di+2Fh],ax
 36660 00006628 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36661 0000662C 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36662                                  	;mov	[es:di+31h],ax
 36663 00006630 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36664                                  sfnf21: ;; Retro DOS v3.0
 36665                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36666                                  	;pop	ax
 36667                                  	;;clc
 36668                                  	;retn				; return with no error
 36669                                  	; 17/12/2022
 36670 00006634 58                      	pop	ax
 36671                                  	;clc
 36672 00006635 C3                      	retn
 36673                                  
 36674                                  ;**	Error - no more free SFNs
 36675                                  ;
 36676                                  ;	'C' set
 36677                                  ;	(TOS) = saved ax
 36678                                  
 36679                                  sfnf95: 
 36680 00006636 58                      	pop	ax
 36681                                  	;mov	al,4
 36682 00006637 B004                    	mov	al,error_too_many_open_files
 36683 00006639 C3                      	retn				; return with 'C' and error
 36684                                  
 36685                                  ;============================================================================
 36686                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36687                                  ;============================================================================
 36688                                  ; 13/07/2018 - Retro DOS v3.0
 36689                                  ; 20/05/2019 - Retro DOS v4.0
 36690                                  
 36691                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36692                                  
 36693                                  ;	BREAK <$Close - return a handle to the system>
 36694                                  ;----------------------------------------------------------------------------
 36695                                  ;
 36696                                  ;**	$Close - Close a file Handle
 36697                                  ;
 36698                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36699                                  ;		path
 36700                                  ;
 36701                                  ;	Assembler usage:
 36702                                  ;	    MOV     BX, handle
 36703                                  ;	    MOV     AH, Close
 36704                                  ;	    INT     int_command
 36705                                  ;
 36706                                  ;	ENTRY	(bx) = handle
 36707                                  ;	EXIT	<normal INT21 return convention>
 36708                                  ;	USES	all
 36709                                  ;
 36710                                  ;----------------------------------------------------------------------------
 36711                                  
 36712                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36713                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36714                                  
 36715                                  _$CLOSE:
 36716                                  ;	Grab the SFT pointer from the JFN.
 36717                                  
 36718 0000663A E85A02                  	call	CheckOwner		; get system file entry
 36719 0000663D 722B                    	jc	short CloseError	; error return
 36720 0000663F 16                      	push	ss
 36721 00006640 1F                      	pop	ds			; For DOS_CLOSE
 36722 00006641 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36723 00006645 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36724                                  
 36725                                  ; DS:SI point to JFN table entry.
 36726                                  ; ES:DI point to SFT
 36727                                  ;
 36728                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36729                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36730                                  ; If the file was not a net FCB, we free the JFN too.
 36731                                  
 36732                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36733 00006649 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36734 0000664D 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36735                                  	;mov	al,[ES:DI+2]
 36736 0000664F 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36737                                  	;and	al,0F0h
 36738 00006653 24F0                    	AND	AL,SHARING_MASK
 36739                                  	;cmp	al,70h
 36740 00006655 3C70                    	CMP	AL,SHARING_NET_FCB
 36741 00006657 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36742                                  
 36743                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36744                                  ; -1.
 36745                                  
 36746                                  FreeJFN:
 36747 00006659 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36748 0000665C 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36749                                  PostFree:
 36750                                  
 36751                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36752                                  
 36753 00006660 E84BC8                  	call	DOS_CLOSE
 36754                                  
 36755                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36756                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36757                                  
 36758 00006663 7205                    	JC	short CloseError
 36759                                  	;mov	ah,3Eh
 36760 00006665 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36761                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36762                                  CloseOk:
 36763 00006667 E9CD9F                  	jmp	SYS_RET_OK
 36764                                  CloseError:
 36765 0000666A E9D39F                  	jmp	SYS_RET_ERR
 36766                                  
 36767                                  ;	BREAK <$Commit - commit the file>
 36768                                  ;----------------------------------------------------------------------------
 36769                                  ;
 36770                                  ;**	$Commit - Commit a File
 36771                                  ;
 36772                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36773                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36774                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36775                                  ;	and fix this!! jgl
 36776                                  ;
 36777                                  ;	Assembler usage:
 36778                                  ;	    MOV     BX, handle
 36779                                  ;	    MOV     AH, Commit
 36780                                  ;	    INT     int_command
 36781                                  ;
 36782                                  ;	ENTRY	(bx) = handle
 36783                                  ;	EXIT	none
 36784                                  ;	USES	all
 36785                                  ;;----------------------------------------------------------------------------
 36786                                  
 36787                                  _$COMMIT:
 36788                                  ;	Grab the SFT pointer from the JFN.
 36789                                  
 36790 0000666D E82702                  	call	CheckOwner		; get system file entry
 36791 00006670 7213                    	JC	short CommitError	; error return
 36792 00006672 16                      	push	ss
 36793 00006673 1F                      	pop	ds			; For DOS_COMMIT
 36794 00006674 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36795 00006678 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36796                                  
 36797                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36798                                  ;
 36799                                  ;	ES:DI point to SFT
 36800                                  
 36801 0000667C E871C9                  	call	DOS_COMMIT
 36802 0000667F 7204                    	JC	short CommitError
 36803                                  	; 07/12/2022
 36804                                  	;jc	short CloseError
 36805                                  	;mov	ah,68h
 36806 00006681 B468                    	MOV	AH,COMMIT
 36807                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36808                                  	;jmp	SYS_RET_OK
 36809                                  CommitOk:
 36810 00006683 EBE2                    	jmp	short CloseOk	
 36811                                  
 36812                                  CommitError:
 36813                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36814                                  	;jmp	SYS_RET_ERR
 36815 00006685 EBE3                    	jmp	short CloseError
 36816                                  
 36817                                  ;	BREAK <$ExtHandle - extend handle count>
 36818                                  
 36819                                  ;**	$ExtHandle - Extend Handle Count
 36820                                  ;----------------------------------------------------------------------------
 36821                                  ;	Assembler usage:
 36822                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36823                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36824                                  ;	    INT     int_command 		 busy )
 36825                                  ;
 36826                                  ;	ENTRY	(bx) = new number of handles
 36827                                  ;	EXIT	'C' clear if OK
 36828                                  ;		'C' set iff err
 36829                                  ;		  (ax) = error code
 36830                                  ;			 AX = error_not_enough_memory
 36831                                  ;			      error_too_many_open_files
 36832                                  ;	USES	all
 36833                                  ;----------------------------------------------------------------------------
 36834                                  
 36835                                  _$ExtHandle:
 36836 00006687 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36837                                  	;cmp	bx,20
 36838 00006689 83FB14                  	CMP	BX,FILPERPROC
 36839 0000668C 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36840 0000668E BB1400                  	MOV	BX,FILPERPROC
 36841                                  exth2:	
 36842 00006691 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36843                                  	;mov	cx,[ES:32h]
 36844 00006696 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36845 0000669B 39CB                    	CMP	BX,CX			; the requested == current
 36846 0000669D 7455                    	JE	short ok_done 		; yes and exit
 36847 0000669F 7722                    	JA	short larger		; go allocate new table
 36848                                  
 36849                                  ;	We're going to shrink the # of handles available
 36850                                  
 36851 000066A1 BD0100                  	MOV	BP,1			; shrink
 36852                                  	;mov	ds,[ES:36h]
 36853 000066A4 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36854 000066A9 89DE                    	MOV	SI,BX			;
 36855 000066AB 29D9                    	SUB	CX,BX			; get difference
 36856                                  
 36857                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36858                                  chck_handles:
 36859 000066AD 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36860 000066B0 753D                    	JNZ	short too_many_files	; status
 36861 000066B2 46                      	INC	SI
 36862 000066B3 E2F8                    	LOOP	chck_handles
 36863 000066B5 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36864 000066B8 7709                    	JA	short larger		; no
 36865                                  
 36866 000066BA BD0200                  	MOV	BP,2			; psp
 36867                                  	;mov	di,24
 36868 000066BD BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36869 000066C0 53                      	PUSH	BX
 36870 000066C1 EB1D                    	JMP	short movhandl
 36871                                  
 36872                                  larger:
 36873 000066C3 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36874 000066C6 747F                    	JZ	short invalid_func	; 10/08/2018
 36875 000066C8 F8                      	CLC
 36876 000066C9 53                      	PUSH	BX			; save requested number
 36877 000066CA 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36878 000066CD B104                    	MOV	CL,4
 36879                                  	;ror	bx,cl			; MSDOS 3.3
 36880 000066CF D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36881 000066D1 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36882                                  
 36883 000066D5 55                      	PUSH	BP
 36884 000066D6 E8DCFA                  	call	_$ALLOC			; allocate memory
 36885 000066D9 5D                      	POP	BP
 36886 000066DA 7266                    	JC	short no_memory		; not enough meory
 36887                                  
 36888 000066DC 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36889 000066DE 31FF                    	XOR	DI,DI
 36890                                  movhandl:
 36891 000066E0 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36892                                  
 36893 000066E5 F7C50300                	test	BP,3			; enlarge ?
 36894 000066E9 740C                    	JZ	short enlarge 		; yes
 36895 000066EB 59                      	POP	CX			; cx = the amount you shrink
 36896 000066EC 51                      	PUSH	CX
 36897 000066ED EB0C                    	JMP	short copy_hand
 36898                                  
 36899                                  ;	Done.  'C' clear
 36900                                  
 36901                                  ; 17/12/2022
 36902                                  ;ok_done:
 36903                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36904                                  ;	;jmp	short CommitOk
 36905                                  ;	; 17/12/2022
 36906                                  ;	jmp	SYS_RET_OK
 36907                                  
 36908                                  too_many_files:
 36909                                  	;mov	al,4
 36910 000066EF B004                    	MOV	AL,error_too_many_open_files
 36911                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36912                                  	;jmp	SYS_RET_ERR
 36913                                  CommitErrorj:
 36914                                  	;jmp	short CommitError
 36915                                  	; 17/12/2022
 36916 000066F1 E94C9F                  	jmp	SYS_RET_ERR
 36917                                  
 36918                                  ; 17/12/2022 
 36919                                  ok_done:
 36920                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36921                                  	;jmp	short CommitOk
 36922                                  	; 17/12/2022
 36923 000066F4 E9409F                  	jmp	SYS_RET_OK
 36924                                  
 36925                                  enlarge:
 36926                                  	;mov	cx,[32h]
 36927 000066F7 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36928                                  copy_hand:
 36929 000066FB 89CA                    	MOV	DX,CX
 36930                                  	;lds	si,[34h]
 36931 000066FD C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36932 00006701 F3A4                    	REP	MOVSB			; copy infomation to new table
 36933 00006703 59                      	POP	CX			; get new number of handles
 36934 00006704 51                      	PUSH	CX			; save it again
 36935 00006705 29D1                    	SUB	CX,DX			; get the difference
 36936 00006707 B0FF                    	MOV	AL,-1			; set availability to handles
 36937 00006709 F3AA                    	REP	STOSB
 36938 0000670B 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36939                                  	;cmp	word [34h],0
 36940 00006710 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36941 00006715 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36942 00006717 55                      	PUSH	BP
 36943 00006718 1E                      	PUSH	DS			; save old table segment
 36944 00006719 06                      	PUSH	ES			; save new table segment
 36945 0000671A 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36946 0000671E E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36947 00006721 07                      	POP	ES			; restore new table segment
 36948 00006722 1F                      	POP	DS			; restore old table segment
 36949 00006723 5D                      	POP	BP
 36950                                  
 36951                                  update_info:
 36952 00006724 F7C50200                	test	BP,2			; psp?
 36953 00006728 7408                    	JZ	short non_psp 		; no
 36954                                  	;mov	word [34h],18h ; 24
 36955 0000672A C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36956 00006730 EB06                    	JMP	short final
 36957                                  non_psp:
 36958                                  	;mov	word [34h],0
 36959 00006732 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36960                                  final:
 36961                                  	;mov	[36h],es	
 36962 00006738 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36963                                  	;pop	word [32h]
 36964 0000673C 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36965                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36966                                  	;jmp	SYS_RET_OK
 36967                                  ok_done_j:
 36968 00006740 EBB2                    	jmp	short ok_done
 36969                                  
 36970                                  no_memory:
 36971 00006742 5B                      	POP	BX			; clean stack
 36972                                  	;mov	al,8
 36973 00006743 B008                    	MOV	AL,error_not_enough_memory
 36974                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36975                                  	;jmp	SYS_RET_ERR
 36976                                  CommitErrorj2:
 36977 00006745 EBAA                    	jmp	short CommitErrorj
 36978                                  
 36979                                  invalid_func:
 36980                                  	;mov	al,1
 36981 00006747 B001                    	MOV	AL,error_invalid_function
 36982                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36983                                  	;jmp	SYS_RET_ERR
 36984                                  CommitErrorj3:
 36985                                  	;jmp	short CommitErrorj2
 36986                                  	; 17/12/2022
 36987 00006749 EBA6                    	jmp	short CommitErrorj
 36988                                  
 36989                                  ; 20/05/2019 - Retro DOS v4.0
 36990                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36991                                  
 36992                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36993                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36994                                  
 36995                                  ;	BREAK <$READ - Read from a file handle>
 36996                                  ;----------------------------------------------------------------------------
 36997                                  ;
 36998                                  ;**	$Read - Read from a File Handle
 36999                                  ;
 37000                                  ;   Assembler usage:
 37001                                  ;
 37002                                  ;	LDS	DX, buf
 37003                                  ;	MOV	CX, count
 37004                                  ;	MOV	BX, handle
 37005                                  ;	MOV	AH, Read
 37006                                  ;	INT	int_command
 37007                                  ;	  AX has number of bytes read
 37008                                  ;
 37009                                  ;	ENTRY	(bx) = file handle
 37010                                  ;		(cx) = byte count
 37011                                  ;		(ds:dx) = buffer address
 37012                                  ;	EXIT	Through system call return so that to user:
 37013                                  ;		  'C' clear if OK
 37014                                  ;		    (ax) = bytes read
 37015                                  ;		  'C' set if error
 37016                                  ;		    (ax) = error code
 37017                                  ;
 37018                                  ;----------------------------------------------------------------------------
 37019                                  
 37020                                  _$READ:
 37021 0000674B BE[4232]                	MOV	SI,DOS_READ
 37022                                  ReadDo:
 37023 0000674E E831FE                  	call	pJFNFromHandle
 37024 00006751 7208                    	JC	short ReadError
 37025                                  
 37026 00006753 268A05                  	MOV	AL,[ES:DI]
 37027 00006756 E83E01                  	call	CheckOwner		; get the handle
 37028 00006759 7303                    	JNC	short ReadSetup		; no errors do the operation
 37029                                  
 37030                                  ;	Have an error. 'C' set
 37031                                  
 37032                                  ReadError:
 37033                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37034                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37035                                  	;jmp	short CommitErrorj3
 37036                                  	; 17/12/2022
 37037 0000675B E9E29E                  	jmp	SYS_RET_ERR
 37038                                  
 37039                                  ReadSetup:
 37040 0000675E 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37041 00006763 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37042                                  	; 20/05/2019 - Retro DOS v4.0
 37043                                  	; MSDOS 6.0 
 37044                                  ;; Extended Open
 37045                                  	;test	byte [es:di+3],20h
 37046 00006768 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37047                                  						 ;AN000;;EO. need i24
 37048 0000676D 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37049 0000676F 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37050                                  					;AN000;;EO. set it off;smr;SS Override
 37051                                  needi24:				;AN000;
 37052                                  ;; Extended Open
 37053 00006775 36FF36[2C03]            	push	word [SS:DMAADD]
 37054 0000677A 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 37055                                  
 37056                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37057                                  
 37058                                  	; 26/07/2019
 37059                                  
 37060                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37061                                  	;
 37062                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37063                                  	; there is not another caller; it is better to put the code in this proc
 37064                                   	; here instead of calling it as a subroutine; but I have modified code
 37065                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37066                                  
 37067                                  	; MSDOS 6.0
 37068 0000677F E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37069                                  	
 37070                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37071                                  	; MSDOS 3.3
 37072                                  	;MOV	BX,DX			; copy offset
 37073                                  	;push	cx			; don't stomp on count
 37074                                  	;MOV	CL,4			; bits to shift bytes->para
 37075                                  	;SHR	BX,CL			; get number of paragraphs
 37076                                  	;pop	cx			; get count back
 37077                                  	;MOV	AX,DS			; get original segment
 37078                                  	;ADD	AX,BX			; get new segment
 37079                                  	;MOV	DS,AX			; in seg register
 37080                                  	;AND	DX,0Fh			; normalize offset
 37081                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37082                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37083                                  						;smr;SS Override
 37084                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37085                                  	
 37086 00006782 16                      	push	ss			; go for DOS addressability
 37087 00006783 1F                      	pop	ds
 37088                                  
 37089 00006784 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37090                                  
 37091 00006786 8F06[2E03]              	pop	word [DMAADD+2]
 37092 0000678A 8F06[2C03]              	pop	word [DMAADD]
 37093                                  	;JNC	short READ_OK		;AN002;
 37094                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37095                                  	; 17/12/2022
 37096 0000678E 72CB                    	jc	short ReadError
 37097                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37098                                  	;jnc	short READ_OK		;AN002;
 37099                                  	;jmp	short ReadError
 37100                                  
 37101                                  READ_OK:
 37102 00006790 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37103                                  Read_Okj:
 37104                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37105                                  	;;jmp	SYS_RET_OK		; successful return
 37106                                  	;jmp	short ok_done_j
 37107                                  	; 17/12/2022
 37108 00006792 E9A29E                  	jmp	SYS_RET_OK
 37109                                  
 37110                                  ; 13/07/2018 - Retro DOS v3.0
 37111                                  
 37112                                  ;----------------------------------------------------------------------------
 37113                                  
 37114                                  ;   Input: DS:DX points to user's buffer addr
 37115                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37116                                  ;   Output: [DMAADD] set
 37117                                  
 37118                                  ; 20/05/2019 - Retro DOS v4.0
 37119                                  ; 26/07/2019
 37120                                  ;	; MSDOS 6.0
 37121                                  ;Align_Buffer:
 37122                                  ;	MOV	BX,DX			; copy offset
 37123                                  ;	push	cx			; don't stomp on count
 37124                                  ;	MOV	CL,4			; bits to shift bytes->para
 37125                                  ;	SHR	BX,CL			; get number of paragraphs
 37126                                  ;	pop	cx			; get count back
 37127                                  ;	MOV	AX,DS			; get original segment
 37128                                  ;	ADD	AX,BX			; get new segment
 37129                                  ;	MOV	DS,AX			; in seg register
 37130                                  ;	AND	DX,0Fh			; normalize offset
 37131                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37132                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37133                                  ;						;smr;SS Override
 37134                                  ;	retn
 37135                                  
 37136                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37137                                  Align_Buffer:
 37138 00006795 89D3                    	MOV	BX,DX			; copy offset
 37139 00006797 51                      	push	cx			; don't stomp on count
 37140 00006798 B104                    	MOV	CL,4			; bits to shift bytes->para
 37141 0000679A D3EB                    	SHR	BX,CL			; get number of paragraphs
 37142 0000679C 59                      	pop	cx			; get count back
 37143 0000679D 8CD8                    	MOV	AX,DS			; get original segment
 37144 0000679F 01D8                    	ADD	AX,BX			; get new segment
 37145 000067A1 8ED8                    	MOV	DS,AX			; in seg register
 37146 000067A3 83E20F                  	AND	DX,0Fh			; normalize offset
 37147 000067A6 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37148 000067AB 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37149                                  						;smr;SS Override
 37150 000067B0 C3                      	retn
 37151                                  
 37152                                  ; 20/05/2019 - Retro DOS v4.0
 37153                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37154                                  
 37155                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37156                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37157                                  
 37158                                  ;BREAK <$WRITE - write to a file handle>
 37159                                  ;----------------------------------------------------------------------------
 37160                                  ;
 37161                                  ;   Assembler usage:
 37162                                  ;	    LDS     DX, buf
 37163                                  ;	    MOV     CX, count
 37164                                  ;	    MOV     BX, handle
 37165                                  ;	    MOV     AH, Write
 37166                                  ;	    INT     int_command
 37167                                  ;	  AX has number of bytes written
 37168                                  ;   Errors:
 37169                                  ;	    AX = write_invalid_handle
 37170                                  ;	       = write_access_denied
 37171                                  ;
 37172                                  ;   Returns in register AX
 37173                                  ;
 37174                                  ;----------------------------------------------------------------------------
 37175                                  
 37176                                  _$WRITE:
 37177 000067B1 BE[4234]                	MOV	SI,DOS_WRITE
 37178 000067B4 EB98                    	JMP	short ReadDo
 37179                                  
 37180                                  ;BREAK <$LSEEK - move r/w pointer>
 37181                                  ;----------------------------------------------------------------------------
 37182                                  ;
 37183                                  ;   Assembler usage:
 37184                                  ;	    MOV     DX, offsetlow
 37185                                  ;	    MOV     CX, offsethigh
 37186                                  ;	    MOV     BX, handle
 37187                                  ;	    MOV     AL, method
 37188                                  ;	    MOV     AH, LSeek
 37189                                  ;	    INT     int_command
 37190                                  ;	  DX:AX has the new location of the pointer
 37191                                  ;   Error returns:
 37192                                  ;	    AX = error_invalid_handle
 37193                                  ;	       = error_invalid_function
 37194                                  ;   Returns in registers DX:AX
 37195                                  ;
 37196                                  ;----------------------------------------------------------------------------
 37197                                  
 37198                                  ; 21/05/2019 - Retro DOS v4.0
 37199                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37200                                  
 37201                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37202                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37203                                  
 37204                                  _$LSEEK:
 37205 000067B6 E8DE00                  	call	CheckOwner		; get system file entry
 37206                                  
 37207                                  	; 17/12/2022
 37208                                  ;LSeekError:
 37209                                  	;JNC	short CHKOWN_OK		;AN002;
 37210                                  	;JMP	short ReadError		;AN002; error return
 37211                                  	; 17/12/2022
 37212                                  	; 02/06/2019
 37213 000067B9 72A0                    	jc	short ReadError
 37214                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37215                                  	;JNC	short CHKOWN_OK		;AN002;
 37216                                  	;JMP	short ReadError		;AN002; error return
 37217                                  
 37218                                  CHKOWN_OK:
 37219                                  					;AN002;
 37220 000067BB 3C02                    	CMP	AL,2			; is the seek value correct?
 37221 000067BD 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37222                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37223 000067BF 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37224                                  					;smr;SS Override
 37225                                  	;mov	al,1
 37226 000067C5 B001                    	mov	al,error_invalid_function ; invalid method
 37227                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37228                                  LSeekError2:
 37229 000067C7 EB92                    	jmp	short ReadError
 37230                                  
 37231                                  LSeekDisp:
 37232 000067C9 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37233 000067CB 720A                    	JB	short LSeekStore	; just store CX:DX
 37234 000067CD 771B                    	JA	short LSeekEOF		; seek from end of file
 37235                                  	;add	dx,[es:di+21]
 37236 000067CF 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37237                                  	;adc	cx,[es:di+23]
 37238 000067D3 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37239                                  LSeekStore:
 37240 000067D7 89C8                    	MOV	AX,CX			; AX:DX
 37241 000067D9 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37242                                  LSeekSetpos:
 37243                                  	;mov	[es:di+21],ax
 37244 000067DA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37245                                  	;mov	[es:di+23],dx
 37246 000067DE 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37247 000067E2 E89C9C                  	call	Get_User_Stack
 37248                                  	;mov	[si+6],dx
 37249 000067E5 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37250                                  	;jmp	SYS_RET_OK		; successful return
 37251                                  	; 25/06/2019
 37252                                  	;jmp	SYS_RET_OK_clc
 37253                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37254                                  	;jmp	SYS_RET_OK_clc
 37255                                  LSeekOk:
 37256 000067E8 EBA8                    	jmp     short Read_Okj
 37257                                  
 37258                                  LSeekEOF:
 37259                                  	;;test	word [es:di+5],8000h
 37260                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37261                                  	; 21/05/2019 - Retro DOS v4.0
 37262 000067EA 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37263 000067EF 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37264                                  LOCAL_LSeek:
 37265                                  	;add	dx,[es:di+17]
 37266 000067F1 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37267                                  	;adc	cx,[es:di+19]
 37268 000067F5 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37269 000067F9 EBDC                    	JMP	short LSeekStore	; go and set the position
 37270                                  
 37271                                  Check_LSeek_Mode:
 37272                                  	;;test	word [es:di+2],8000h
 37273                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37274                                  	; 21/05/2019
 37275 000067FB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37276 00006800 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37277                                  	;mov	ax,[es:di+2]
 37278 00006802 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37279                                  	;and	ax, 0F0h
 37280 00006806 25F000                  	AND	AX,SHARING_MASK
 37281                                  	;cmp	ax,40h
 37282 00006809 83F840                  	CMP	AX,SHARING_DENY_NONE
 37283 0000680C 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37284                                  	;cmp	ax,30h
 37285 0000680E 83F830                  	CMP	AX,SHARING_DENY_READ
 37286 00006811 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37287                                  NET_LSEEK:
 37288                                  ;	JMP	short LOCAL_LSeek
 37289                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37290                                  	;CallInstall Net_Lseek,MultNET,33
 37291                                  	;JNC	short LSeekSetPos
 37292                                  
 37293 00006813 B82111                  	mov     ax,1121h
 37294 00006816 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37295                                  			; CX:DX = offset (in bytes) from end
 37296                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37297                                  			; SS = DOS CS
 37298                                  			; Return: CF set on error
 37299                                  			; CF clear if successful, DX:AX = new file position
 37300 00006818 73C0                    	jnb     short LSeekSetpos
 37301                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37302                                  	;jmp	SYS_RET_ERR
 37303                                  ;LSeekError3:
 37304                                  	; 17/12/2022
 37305                                  LSeekError:
 37306                                  	;jmp	short LSeekError2
 37307                                  DupErr:	; 17/12/2022
 37308 0000681A E9239E                  	jmp	SYS_RET_ERR
 37309                                  
 37310                                  ;BREAK <FileTimes - modify write times on a handle>
 37311                                  ;----------------------------------------------------------------------------
 37312                                  ;
 37313                                  ;   Assembler usage:
 37314                                  ;	    MOV AH, FileTimes (57H)
 37315                                  ;	    MOV AL, func
 37316                                  ;	    MOV BX, handle
 37317                                  ;	; if AL = 1 then then next two are mandatory
 37318                                  ;	    MOV CX, time
 37319                                  ;	    MOV DX, date
 37320                                  ;	    INT 21h
 37321                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37322                                  ;	; for the handle.
 37323                                  ;
 37324                                  ;	AL=02		 get extended attributes
 37325                                  ;	   BX=handle
 37326                                  ;	   CX=size of buffer (0, return max size )
 37327                                  ;	   DS:SI query list (si=-1, selects all EA)
 37328                                  ;	   ES:DI buffer to hold EA list
 37329                                  ;
 37330                                  ;	AL=03		 get EA name list
 37331                                  ;	   BX=handle
 37332                                  ;	   CX=size of buffer (0, return max size )
 37333                                  ;	   ES:DI buffer to hold name list
 37334                                  ;
 37335                                  ;	AL=04		 set extended attributes
 37336                                  ;	   BX=handle
 37337                                  ;	   ES:DI buffer of EA list
 37338                                  ;
 37339                                  ;
 37340                                  ;   Error returns:
 37341                                  ;	    AX = error_invalid_function
 37342                                  ;	       = error_invalid_handle
 37343                                  ;
 37344                                  ;----------------------------------------------------------------------------
 37345                                  
 37346                                  ; 21/05/2019 - Retro DOS v4.0
 37347                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37348                                  
 37349                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37350                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37351                                  
 37352                                  _$FILE_TIMES:
 37353                                  	; 13/07/2018 - Retro DOS v3.0
 37354                                  
 37355                                  	; MSDOS 3.3
 37356                                  	;cmp	al,2			; correct subfunction ?
 37357                                  	;jb	short ft1
 37358                                  
 37359                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37360                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37361                                  						;SS Overr
 37362                                  	;;mov	al,1
 37363                                  	;mov	al,error_invalid_function ; give bad return
 37364                                  	;jmp	SYS_RET_ERR
 37365                                  
 37366                                  	; MSDOS 6.0
 37367 0000681D 3C02                    	cmp	al,2			; correct subfunction ?
 37368 0000681F 7340                    	jae	short inval_func
 37369                                  ;ft1:
 37370 00006821 E87300                  	call	CheckOwner		; get sft
 37371                                  	; 17/12/2022
 37372 00006824 72F4                    	jc	short LSeekError	; bad handle
 37373                                  
 37374 00006826 08C0                    	or	al,al			; get time/date ?
 37375 00006828 7515                    	jnz	short ft_set_time
 37376                                  
 37377                                  ;------ here we get the time & date from the sft for the user
 37378                                  
 37379 0000682A FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37380                                  	;mov	cx,[es:di+13]
 37381 0000682B 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37382                                  	;mov	dx,[es:di+15]
 37383 0000682F 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37384 00006833 FB                      	sti
 37385 00006834 E84A9C                  	call	Get_User_Stack
 37386                                  	;mov	[si+4],cx
 37387 00006837 894C04                  	mov	[si+user_env.user_CX],cx
 37388                                  	;mov	[si+6],dx
 37389 0000683A 895406                  	mov	[si+user_env.user_DX],dx
 37390 0000683D EB1F                    	jmp	short ok_ret
 37391                                  
 37392                                  ;------ here we set the time in sft
 37393                                  
 37394                                  ft_set_time:
 37395 0000683F E8B1AA                  	call    ECritSFT
 37396                                  	;mov	[es:di+13],cx
 37397 00006842 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37398                                  	;mov	[es:di+15],dx
 37399 00006846 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37400                                  
 37401 0000684A 31C0                    	xor	ax, ax
 37402 0000684C 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37403                                  
 37404                                  ;------ set the flags in SFT entry
 37405                                  	;and	word [es:di+5],0FFBFh
 37406                                  	; 18/12/2022
 37407                                  	;and	byte [es:di+5],0BFh
 37408 00006851 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37409                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37410                                  							; mark file as dirty
 37411                                  	;or	word [es:di+5],4000h
 37412                                  	; 17/12/2022
 37413                                  	;or	byte [es:di+6],40h
 37414 00006856 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37415                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37416                                  							; ask close not to
 37417                                  							;   bother about date
 37418                                  							;   and time
 37419 0000685B E8B0AA                  	call	LCritSFT
 37420                                  ok_ret:
 37421                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37422                                  	; 17/12/2022
 37423 0000685E E9D69D                  	jmp	SYS_RET_OK
 37424                                  	;jmp	short LSeekOk
 37425                                  
 37426                                  inval_func:
 37427                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37428 00006861 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37429                                  						;SS Overr
 37430                                  	;mov	al,1
 37431 00006867 B001                    	mov	al,error_invalid_function ; give bad return
 37432                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37433                                  ft_error:
 37434                                  	;;jmp	SYS_RET_ERR
 37435                                  	;jmp	short LSeekError3
 37436                                  	; 17/12/2022
 37437 00006869 EBAF                    	jmp	short LSeekError
 37438                                  
 37439                                  ; 21/05/2019 - Retro DOS v4.0
 37440                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37441                                  
 37442                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37443                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37444                                  
 37445                                  ;BREAK <$DUP - duplicate a jfn>
 37446                                  ;----------------------------------------------------------------------------
 37447                                  ;
 37448                                  ;   Assembler usage:
 37449                                  ;	    MOV     BX, fh
 37450                                  ;	    MOV     AH, Dup
 37451                                  ;	    INT     int_command
 37452                                  ;	  AX has the returned handle
 37453                                  ;   Errors:
 37454                                  ;	    AX = dup_invalid_handle
 37455                                  ;	       = dup_too_many_open_files
 37456                                  ;
 37457                                  ;----------------------------------------------------------------------------
 37458                                  
 37459                                  _$DUP:
 37460 0000686B 89D8                    	MOV	AX,BX			; save away old handle in AX
 37461 0000686D E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37462                                  DupErrorCheck:
 37463 00006870 72A8                    	JC	short DupErr		; nope, bye
 37464 00006872 06                      	push	es
 37465 00006873 57                      	push	di			; save away SFT
 37466 00006874 5E                      	pop	si			; into convenient place DS:SI
 37467 00006875 1F                      	pop	ds
 37468 00006876 93                      	XCHG	AX,BX			; get back old handle
 37469 00006877 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37470 0000687A 729E                    	JC	short DupErr		; errors go home
 37471 0000687C E847C1                  	call	DOS_Dup_Direct
 37472 0000687F E800FD                  	call	pJFNFromHandle		; get pointer
 37473 00006882 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37474 00006885 881C                    	MOV	[SI],BL			; stuff in new SFT
 37475                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37476                                  	;jmp	SYS_RET_OK		; and go home
 37477 00006887 EBD5                    	jmp	short ok_ret
 37478                                  
 37479                                  	; 17/12/2022
 37480                                  ;DupErr:
 37481                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37482                                  	;;jmp	SYS_RET_ERR
 37483                                  	;jmp	short ft_error
 37484                                  
 37485                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37486                                  ;----------------------------------------------------------------------------
 37487                                  ;
 37488                                  ;   Assembler usage:
 37489                                  ;	    MOV     BX, fh
 37490                                  ;	    MOV     CX, newfh
 37491                                  ;	    MOV     AH, Dup2
 37492                                  ;	    INT     int_command
 37493                                  ;   Error returns:
 37494                                  ;	    AX = error_invalid_handle
 37495                                  ;
 37496                                  ;----------------------------------------------------------------------------
 37497                                  
 37498                                  _$DUP2:
 37499 00006889 53                      	push	bx
 37500 0000688A 51                      	push	cx			; save source
 37501 0000688B 89CB                    	MOV	BX,CX			; get one to close
 37502 0000688D E8AAFD                  	call	_$CLOSE			; close destination handle
 37503 00006890 5B                      	pop	bx
 37504 00006891 58                      	pop	ax			; old in AX, new in BX
 37505 00006892 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37506 00006895 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37507                                  
 37508                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37509                                  ;----------------------------------------------------------------------------
 37510                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37511                                  ;   process without the process knowing it (delete/rename of open files, for
 37512                                  ;   example), it is possible for the redirector to issue a call to a handle
 37513                                  ;   that it soes not rightfully own. We check here to make sure that the
 37514                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37515                                  ;   SFFromHandle to really make sure that the SFT is good.
 37516                                  ;
 37517                                  ;	ENTRY	BX has the handle
 37518                                  ;		User_ID is the current user
 37519                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37520                                  ;		Carry Set => AX has error code
 37521                                  ;	USES	none
 37522                                  ;----------------------------------------------------------------------------
 37523                                  
 37524                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37525                                  	; 21/05/2019 - Retro DOS v4.0
 37526                                  CheckOwner:
 37527                                  	; 13/07/2018 - Retro DOS v3.0
 37528                                  
 37529 00006897 E805FD                  	call	SFFromHandle
 37530 0000689A 721B                    	jc	short co_ret_label	; retc
 37531                                  
 37532 0000689C 50                      	push	ax
 37533                                  
 37534                                  	; MSDOS 6.0
 37535                                  
 37536                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37537                                  ;SR; are shared across multiple VMs in win386.
 37538                                  
 37539 0000689D 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37540 000068A3 7404                    	jz	short no_win386		;win386 is not present
 37541 000068A5 31C0                    	xor	ax,ax			;set the zero flag
 37542 000068A7 EB08                    	jmp	short _skip_win386	
 37543                                  
 37544                                  no_win386:
 37545 000068A9 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37546                                  	;cmp	ax,[es:di+47]
 37547 000068AD 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37548                                  
 37549                                  _skip_win386:
 37550 000068B1 58                      	pop	ax
 37551                                  	
 37552                                  	; 17/12/2022
 37553 000068B2 7403                    	jz	short co_ret_label
 37554                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37555                                  	;jnz	short CheckOwner_err
 37556                                  	;retn
 37557                                  	
 37558                                  CheckOwner_err:
 37559                                  	;mov	al,6
 37560 000068B4 B006                    	mov	al,error_invalid_handle
 37561 000068B6 F9                      	stc
 37562                                  
 37563                                  co_ret_label:
 37564 000068B7 C3                      	retn
 37565                                  
 37566                                  ;============================================================================
 37567                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37568                                  ;============================================================================
 37569                                  ; Retro	DOS v3.0 - 11/07/2018
 37570                                  ; 21/05/2019 - Retro DOS v4.0
 37571                                  
 37572                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37573                                  ;	NAME	MACRO
 37574                                  
 37575                                  ;	Microsoft Confidential
 37576                                  ;	Copyright (C) Microsoft Corporation 1991
 37577                                  ;	All Rights Reserved.
 37578                                  
 37579                                  ;**	MACRO.ASM
 37580                                  ;
 37581                                  ;	$AssignOper
 37582                                  ;	FIND_DPB
 37583                                  ;	InitCDS
 37584                                  ;	$UserOper
 37585                                  ;	GetVisDrv
 37586                                  ;	GetThisDrv
 37587                                  ;	GetCDSFromDrv
 37588                                  ;
 37589                                  ;   Revision history:
 37590                                  ;
 37591                                  ;	Created: MZ 4 April 1983
 37592                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37593                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37594                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37595                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37596                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37597                                  ;				    aliasing.
 37598                                  ;
 37599                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37600                                  ;   each valid drive letter the text of the current directory on that drive.
 37601                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37602                                  ;   be at the root. A current directory is either the raw local directory
 37603                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37604                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37605                                  ;
 37606                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37607                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37608                                  ;   this and all * are expanded into ?'s.
 37609                                  ;
 37610                                  ;   The second part of name translation involves subtree aliasing. A list of
 37611                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37612                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37613                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37614                                  ;   replaced with the other subtree in the pair.
 37615                                  ;
 37616                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37617                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37618                                  ;   The output of the previous translation is examined to see if any of the
 37619                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37620                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37621                                  ;   'mount' one device under another.
 37622                                  ;
 37623                                  ;   The final form of name translation involves the mapping of a user's
 37624                                  ;   logical drive number into the internal physical drive. This is
 37625                                  ;   accomplished by converting the drive number into letter:CON, performing
 37626                                  ;   the above translation and then converting the character back into a drive
 37627                                  ;   number.
 37628                                  ;
 37629                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37630                                  ;   take a path and form the real text of the pathname with all . and ..
 37631                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37632                                  ;   TransPath.
 37633                                  ;
 37634                                  ;	A000	version 4.00  Jan. 1988
 37635                                  
 37636                                  ;Installed = TRUE
 37637                                  
 37638                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37639                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37640                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37641                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37642                                  ;					; current drive)
 37643                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37644                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37645                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37646                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37647                                  ;	I_need	MYNAME,16		; machine name
 37648                                  ;	I_need	MYNUM,WORD		; machine number
 37649                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37650                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37651                                  ;	I_need	DrvErr,BYTE		; drive error
 37652                                  
 37653                                  ;BREAK <$AssignOper -- Set up a Macro>
 37654                                  ;----------------------------------------------------------------------------
 37655                                  ; Inputs:
 37656                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37657                                  ;	AL = 01 set assign mode 		    (SetMode)
 37658                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37659                                  ;	AL = 03 Define Macro (attch start)
 37660                                  ;	    BL = Macro type
 37661                                  ;	       = 0 alias
 37662                                  ;	       = 1 file/device
 37663                                  ;	       = 2 drive
 37664                                  ;	       = 3 Char device -> network
 37665                                  ;	       = 4 File device -> network
 37666                                  ;	    DS:SI -> ASCIZ source name
 37667                                  ;	    ES:DI -> ASCIZ destination name
 37668                                  ;	AL = 04 Cancel Macro
 37669                                  ;	    DS:SI -> ASCIZ source name
 37670                                  ;	AL = 05 Modified get attach list entry
 37671                                  ;	AL = 06 Get ifsfunc item
 37672                                  ;	AL = 07 set in_use of a drive's CDS
 37673                                  ;	     DL = drive number, 0=default  0=A,,
 37674                                  ;	AL = 08 reset in_use of a drive's CDS
 37675                                  ;	     DL = drive number, 0=A, 1=B,,,
 37676                                  ; Function:
 37677                                  ;	Do macro stuff
 37678                                  ; Returns:
 37679                                  ;	Std Xenix style error return
 37680                                  ;----------------------------------------------------------------------------
 37681                                  
 37682                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37683                                  	; 21/05/2019 - Retro DOS v4.0
 37684                                  _$AssignOper:
 37685                                  	; MSDOS 6.0
 37686 000068B8 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37687 000068BA 7525                    	JNZ	short chk08		      ; no			;AN000;
 37688                                  srinuse:								;AN000;
 37689 000068BC 50                      	PUSH	AX			      ; save al 		;AN000;
 37690 000068BD 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37691 000068BF E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37692 000068C2 58                      	POP	AX			      ; 			;AN000;
 37693 000068C3 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37694                                  	;cmp	word [si+45h],0
 37695 000068C5 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37696 000068C9 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37697 000068CB 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37698 000068CD 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37699                                  	;or	word [si+43h],4000h
 37700                                  	; 17/12/2022
 37701                                  	;or	byte [si+44h],40h
 37702 000068CF 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37703                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37704 000068D3 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37705                                  resetdrv:
 37706                                  	;and	word [si+43h],0BFFFh									;AN000;
 37707                                  	; 18/12/2022
 37708 000068D5 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37709                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37710 000068D9 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37711                                  
 37712                                  	; 17/12/2022
 37713                                  baddrv: 								;AN000;
 37714 000068DB B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37715                                  
 37716                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37717                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37718                                  	; 17/12/2022
 37719                                  	; 21/05/2019
 37720                                  ASS_ERR:
 37721 000068DE E95F9D                  	jmp	SYS_RET_ERR
 37722                                  
 37723                                  chk08:									;AN000;
 37724 000068E1 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37725 000068E3 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37726                                  
 37727                                    ;IF	NOT INSTALLED
 37728                                  	;transfer NET_ASSOPER
 37729                                    ;ELSE
 37730                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37731 000068E5 50                      	PUSH	AX
 37732                                  	;mov	ax,111Eh
 37733                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37734 000068E6 B81E11                  	mov	ax,(MultNET*256)+30
 37735 000068E9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37736                                  			; SS = DOS CS
 37737                                  			; STACK: WORD function to execute
 37738                                  			; Return: CF set on error, AX = error code
 37739                                  			; STACK unchanged
 37740 000068EB 5B                      	POP	BX			; Don't zap error code in AX
 37741 000068EC 72F0                    	JC	short ASS_ERR
 37742                                  okdone:
 37743 000068EE E9469D                  	jmp	SYS_RET_OK
 37744                                  
 37745                                  	; 17/12/2022
 37746                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37747                                  ;ASS_ERR:
 37748                                  	;jmp	SYS_RET_ERR
 37749                                  
 37750                                    ;ENDIF
 37751                                  
 37752                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37753                                  ;----------------------------------------------------------------------------
 37754                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37755                                  ;
 37756                                  ;	ENTRY	AL has drive number A = 0
 37757                                  ;	EXIT	'C' set
 37758                                  ;		    No DPB for this drive number
 37759                                  ;		'C' clear
 37760                                  ;		    DS:SI points to DPB for drive
 37761                                  ;	USES	SI, DS, Flags
 37762                                  ;----------------------------------------------------------------------------
 37763                                  
 37764                                  	; 21/05/2019 - Retro DOS v4.0
 37765                                  FIND_DPB:
 37766 000068F1 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37767                                  fdpb5:	
 37768 000068F6 83FEFF                  	CMP	SI,-1
 37769 000068F9 7409                    	JZ	short fdpb10
 37770 000068FB 3A04                    	cmp	al,[si]
 37771                                  	;CMP	AL,[SI+DPB.DRIVE]
 37772 000068FD 7406                    	jz	short ret_label15	; Carry clear (retz)
 37773                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37774                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37775 000068FF C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37776 00006902 EBF2                    	JMP	short fdpb5
 37777                                  fdpb10:	
 37778 00006904 F9                      	STC
 37779                                  ret_label15:
 37780 00006905 C3                      	retn
 37781                                  
 37782                                  ;	Break <InitCDS - set up an empty CDS>
 37783                                  ;----------------------------------------------------------------------------
 37784                                  ;**	InitCDS - Setup an Empty CDS
 37785                                  ;
 37786                                  ;	ENTRY	ThisCDS points to CDS
 37787                                  ;		AL has uppercase drive letter
 37788                                  ;	EXIT	ThisCDS is now empty
 37789                                  ;		(ES:DI) = CDS
 37790                                  ;		'C' set if no DPB associated with drive
 37791                                  ;	USES	AH,ES,DI, Flags
 37792                                  ;----------------------------------------------------------------------------
 37793                                  
 37794                                  ; 21/05/2019 - Retro DOS v4.0
 37795                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37796                                  
 37797                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37798                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37799                                  
 37800                                  InitCDS:
 37801                                  	; 19/08/2018
 37802                                  	; 05/08/2018 - Retro DOS v3.0
 37803                                  	; MSDOS 6.0
 37804 00006906 50                      	push	ax			; save (AL) for caller
 37805 00006907 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37806                                  	;mov	word [es:di+67],0
 37807 0000690C 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37808 00006912 2C40                    	SUB	AL,"A"-1                ; A = 1
 37809 00006914 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37810 00006919 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37811 0000691B 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37812 0000691C 50                      	PUSH	AX			; save drive number for later
 37813 0000691D 0441                    	add	al,"A"
 37814 0000691F B43A                    	MOV	AH,':'
 37815 00006921 268905                  	mov	[ES:DI],ax
 37816                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37817                                  	;mov	ax,"\"
 37818                                  	;mov	[es:di+2],ax
 37819                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37820 00006924 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37821                                  	;or	word [es:di+67],4000h
 37822                                  	;or	byte [es:di+68],40h
 37823 0000692A 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37824 0000692F 29C0                    	sub	ax,ax
 37825                                  	;MOV	[es:di+73],ax ; 0
 37826 00006931 26894549                	MOV	[ES:DI+curdir.ID],ax
 37827                                  	;mov	[es:di+75],ax ; 0
 37828 00006935 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37829 00006939 B002                    	mov	al,2
 37830                                  	;mov	[es:di+79],aX ; 2
 37831 0000693B 2689454F                	MOV	[ES:DI+curdir.end],ax
 37832 0000693F 58                      	POP	AX			; (al) = drive number
 37833 00006940 1E                      	push	ds
 37834 00006941 56                      	push	si
 37835 00006942 E8ACFF                  	call	FIND_DPB
 37836 00006945 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37837                                  	;mov	[es:di+69],si
 37838 00006947 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37839                                  	;mov	[es:di+71],ds
 37840 0000694B 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37841                                  icds5:	
 37842 0000694F 5E                      	pop	si
 37843 00006950 1F                      	pop	ds
 37844                                  icdsx:	
 37845 00006951 58                      	pop	ax
 37846                                  RET45:
 37847 00006952 C3                      	retn
 37848                                  
 37849                                  ;Break <$UserOper - get/set current user ID (for net)>
 37850                                  ;----------------------------------------------------------------------------
 37851                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37852                                  ;	maintain this string and do no verifications.
 37853                                  ;
 37854                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37855                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37856                                  ;		DS:DX is user string pointer (calls 1,2)
 37857                                  ;		ES:DI is user buffer (call 3)
 37858                                  ;		BX is assign index (calls 2,3,4,5)
 37859                                  ;		CX is user number (call 1)
 37860                                  ;		DX is flag word (call 4)
 37861                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37862                                  ;			and user CX is set to the user number
 37863                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37864                                  ;		If AL = 5 then DX is flag word
 37865                                  ;----------------------------------------------------------------------------
 37866                                  
 37867                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37868                                  	; 21/05/2019 - Retro DOS v4.0
 37869                                  _$UserOper:
 37870                                  	; 05/08/2018 - Retro DOS v3.0
 37871                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37872 00006953 50                      	PUSH	AX
 37873 00006954 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37874 00006956 58                      	POP	AX
 37875 00006957 7211                    	JB	short UserGet 		; return to user the string
 37876 00006959 742E                    	JZ	short UserSet 		; set the current user
 37877 0000695B 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37878 0000695D 763D                    	JBE	short UserPrint		; yep
 37879                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37880 0000695F 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37881                                  					; Extended Error Locus
 37882                                  	;error	error_invalid_function	; not 0,1,2,3
 37883                                  	;mov	al,1
 37884 00006965 B001                    	MOV	AL,error_invalid_function
 37885                                  useroper_error:
 37886                                  	; 17/12/2022
 37887                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37888 00006967 E9D69C                  	JMP	SYS_RET_ERR
 37889                                  	;jmp	short ASS_ERR
 37890                                  
 37891                                  UserGet:
 37892                                  ; Transfer MYNAME to DS:DX
 37893                                  ; Set Return CX to MYNUM
 37894 0000696A 1E                      	PUSH	DS			; switch registers
 37895 0000696B 07                      	POP	ES
 37896 0000696C 89D7                    	MOV	DI,DX			; destination
 37897 0000696E 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37898 00006973 E80B9B                  	call	Get_User_Stack
 37899                                  	;mov	[si+4],cx
 37900 00006976 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37901 00006979 16                      	push	ss			; point to DOSDATA
 37902 0000697A 1F                      	pop	ds
 37903 0000697B BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37904                                  UserMove:
 37905 0000697E B90F00                  	MOV	CX,15
 37906 00006981 F3A4                    	REP	MOVSB			; blam.
 37907 00006983 31C0                    	XOR	AX,AX			; 16th byte is 0
 37908 00006985 AA                      	STOSB
 37909                                  UserBye:
 37910 00006986 E9AE9C                  	jmp	SYS_RET_OK		; no errors here
 37911                                  
 37912                                  UserSet:
 37913                                  ; Transfer DS:DX to MYNAME
 37914                                  ; CX to MYNUM
 37915 00006989 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37916 0000698E 89D6                    	MOV	SI,DX			; user space has source
 37917 00006990 16                      	push	ss
 37918 00006991 07                      	pop	es
 37919 00006992 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37920 00006995 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37921 0000699A EBE2                    	JMP	short UserMove
 37922                                  
 37923                                  UserPrint:
 37924                                  
 37925                                    ;IF NOT Installed
 37926                                    ;	transfer PRINTER_GETSET_STRING
 37927                                    ;ELSE
 37928 0000699C 50                      	PUSH	AX
 37929                                  	;mov	ax,111Fh
 37930                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37931 0000699D B81F11                  	mov	ax,(MultNET<<8)|31
 37932 000069A0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37933                                  			; STACK: WORD function
 37934                                  			; Return: CF set on error, AX = error code
 37935                                  			; STACK unchanged
 37936 000069A2 5A                      	POP	DX			; Clean stack
 37937                                  	;JNC	short OKPA
 37938 000069A3 73E1                    	jnc	short UserBye ; 21/05/2019
 37939                                  	; 17/12/2022
 37940 000069A5 EBC0                    	jmp	short useroper_error
 37941                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37942                                  	;jnb     short OKPA
 37943                                  	;jmp     short useroper_error
 37944                                  
 37945                                  	; 17/12/2022
 37946                                  ;OKPA:
 37947                                  ;	jmp	short UserBye
 37948                                  
 37949                                    ;ENDIF
 37950                                  
 37951                                  
 37952                                  ;Break	<GetVisDrv - return visible drive>
 37953                                  ;----------------------------------------------------------------------------
 37954                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37955                                  ;
 37956                                  ;   Inputs:	AL has drive identifier (0=default)
 37957                                  ;   Outputs:	Carry Set - invalid drive/macro
 37958                                  ;		Carry Clear - AL has physical drive (0=A)
 37959                                  ;		    ThisCDS points to CDS
 37960                                  ;   Registers modified: AL
 37961                                  ;----------------------------------------------------------------------------
 37962                                  
 37963                                  	; 21/05/2019 - Retro DOS v4.0
 37964                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37965                                  
 37966                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37967                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37968                                  GetVisDrv:
 37969                                  	; 05/08/2018 - Retro DOS v3.0
 37970                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37971 000069A7 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37972 000069AA 72A6                    	jc	short RET45
 37973 000069AC 1E                      	push	ds
 37974 000069AD 56                      	push	si
 37975 000069AE 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37976                                  	;test	word [si+67],2000h
 37977                                  	; 17/12/2022
 37978                                  	;test	byte [si+68],20h
 37979 000069B3 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37980                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37981 000069B7 5E                      	pop	si
 37982 000069B8 1F                      	pop	ds
 37983 000069B9 7497                    	jz	short RET45		; if not spliced, return OK
 37984                                  	; MSDOS 6.0
 37985                                  	;mov	byte [ss:DrvErr],0Fh
 37986 000069BB 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37987 000069C1 F9                      	STC				; signal error
 37988 000069C2 C3                      	retn
 37989                                  
 37990                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37991                                  ;----------------------------------------------------------------------------
 37992                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37993                                  ;	macro pointer
 37994                                  ;
 37995                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37996                                  ;   Outputs:
 37997                                  ;		Carry Set - invalid drive/macro
 37998                                  ;		Carry Clear - AL has physical drive (0=A)
 37999                                  ;		   ThisCDS points to macro
 38000                                  ;   Registers modified: AL
 38001                                  ;----------------------------------------------------------------------------
 38002                                  
 38003                                  	; 21/05/2019 - Retro DOS v4.0
 38004                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38005                                  
 38006                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38007                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38008                                  GETTHISDRV:
 38009                                  	; 05/08/2018
 38010                                  	; 12/07/2018 - Retro DOS v3.0
 38011                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38012                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38013 000069C3 08C0                    	OR	AL,AL			; are we using default drive?
 38014 000069C5 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38015 000069C7 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38016                                  	;INC	ax			; Counteract next instruction
 38017                                  	; 04/09/2018
 38018                                  	;inc	al
 38019                                  	; 07/12/2022
 38020 000069CB 40                      	inc	ax
 38021                                  GTD10:	
 38022                                  	;DEC	AX
 38023                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38024 000069CC 48                      	dec	ax			; 0 = A
 38025                                  	;dec	al
 38026 000069CD 1E                      	PUSH	DS			; save world
 38027 000069CE 56                      	PUSH	SI
 38028                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38029 000069CF 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38030 000069D5 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38031 000069DB 7420                    	JZ	SHORT GTD20		; Logical
 38032 000069DD 50                      	PUSH	AX
 38033 000069DE 06                      	PUSH	ES
 38034 000069DF 57                      	PUSH	DI
 38035 000069E0 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38036                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38037 000069E7 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38038 000069EC 0441                    	ADD	AL,'A'
 38039 000069EE E815FF                  	CALL	InitCDS			; InitCDS(c);
 38040                                  	;test	word [es:di+67],4000h
 38041                                  	; 17/12/2022
 38042                                  	;test	byte [es:di+68],40h
 38043 000069F1 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38044                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38045 000069F6 5F                      	POP	DI
 38046 000069F7 07                      	POP	ES
 38047 000069F8 58                      	POP	AX
 38048 000069F9 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38049 000069FB EB18                    	JMP	SHORT GTDX		; carry clear
 38050                                  GTD20:
 38051 000069FD E81800                  	CALL	GetCDSFromDrv
 38052 00006A00 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38053                                  	;test	word [si+43h],4000h
 38054                                  	; 17/12/2022
 38055                                  	;test	byte [si+44h],40h
 38056 00006A02 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38057                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38058 00006A06 750D                    	JNZ	SHORT GTDX		; carry clear
 38059                                  GTD30:	
 38060                                  	; 21/05/2019
 38061                                  	; MSDOS 6.0
 38062 00006A08 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38063 00006A0A 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38064                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38065 00006A0E 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38066 00006A14 F9                      	STC
 38067                                  GTDX:	
 38068 00006A15 5E                      	POP	SI			; restore world
 38069 00006A16 1F                      	POP	DS
 38070 00006A17 C3                      	RETN
 38071                                   
 38072                                  
 38073                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38074                                  ;----------------------------------------------------------------------------
 38075                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38076                                  ;	pointer, returning an error if the drive number is greater than the
 38077                                  ;	number of CDS's
 38078                                  ;
 38079                                  ;   Inputs:	AL is physical unit # A=0...
 38080                                  ;   Outputs:	Carry Set if Bad Drive
 38081                                  ;		Carry Clear
 38082                                  ;		    DS:SI -> CDS
 38083                                  ;		    [THISCDS] = DS:SI
 38084                                  ;   Registers modified: DS,SI
 38085                                  ;----------------------------------------------------------------------------
 38086                                  
 38087                                  	; 21/05/2019 - Retro DOS v4.0
 38088                                  GetCDSFromDrv:
 38089 00006A18 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38090                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38091                                  	;STC				; signal error
 38092                                  	;RETN				; bye
 38093                                  	; 23/09/2023
 38094 00006A1D F5                      	cmc	; cf=1 <-> cf=0
 38095 00006A1E 7217                    	jc	short GetCDS_retn
 38096                                  GetCDS:
 38097                                  	; 23/09/2023
 38098                                  	;PUSH	BX
 38099 00006A20 50                      	PUSH	AX
 38100 00006A21 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38101                                  	;mov	bl,81 ; MSDOS 3.3
 38102                                  	;mov	bl,88 ; MSDOS 6.0 
 38103                                  	; 23/09/2023
 38104                                  	;MOV	BL,curdir.size		; size in convenient spot
 38105                                  	;MUL	BL			; get net offset
 38106 00006A26 B458                    	mov	ah,curdir.size
 38107 00006A28 F6E4                    	mul	ah
 38108 00006A2A 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38109 00006A2C 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38110 00006A31 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38111 00006A36 58                      	POP	AX
 38112                                  	; 23/09/2023
 38113                                  	;POP	BX
 38114                                  	; (cf must be 0 here) ; *
 38115                                  	;CLC				; no error
 38116                                  GetCDS_retn:
 38117 00006A37 C3                      	RETN				; bye!
 38118                                  
 38119                                  ;============================================================================
 38120                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38121                                  ;============================================================================
 38122                                  ; Retro	DOS v3.0 - 12/07/2018
 38123                                  ; 22/05/2019 - Retro DOS v4.0
 38124                                  
 38125                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38126                                  ;----------------------------------------------------------------------------
 38127                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38128                                  ;       gritty substitution.
 38129                                  ;
 38130                                  ;   Inputs:     DS:DX - pointer to FCB
 38131                                  ;               ES:DI - point to destination
 38132                                  ;   Outputs:    Carry Set - invalid path in final map
 38133                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38134                                  ;                   Sattrib is set from possibly extended FCB
 38135                                  ;                   ExtFCB set if extended FCB found
 38136                                  ;   Registers modified: most
 38137                                  ;----------------------------------------------------------------------------
 38138                                  
 38139                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38140                                  TransFCB:
 38141                                  	; 22/05/2019 - Retro DOS v4.0
 38142                                  	; 12/07/2018 - Retro DOS v3.0
 38143                                  	;LocalVar FCBTmp,16
 38144                                  	;ENTER
 38145 00006A38 55                      	push	bp
 38146 00006A39 89E5                    	mov	bp,sp
 38147                                  	;sub	sp,15	; MSDOS 3.3
 38148 00006A3B 83EC10                  	sub	sp,16	; MSDOS 6.0
 38149 00006A3E 16                      	push	ss
 38150 00006A3F 07                      	pop	es
 38151 00006A40 06                      	push	es
 38152 00006A41 57                      	push	di
 38153                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38154                                  	;LEA	DI,FCBTmp 
 38155 00006A42 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38156 00006A45 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38157 00006A4B 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38158 00006A51 E8E6B1                  	call	GetExtended             ; get FCB, extended or not
 38159                                  	; 06/12/2022
 38160 00006A54 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38161 00006A56 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38162 00006A59 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38163 00006A5D 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38164                                  GetDrive:
 38165 00006A63 AC                      	lodsb				; get drive byte
 38166 00006A64 E85CFF                  	call	GETTHISDRV
 38167 00006A67 722A                    	jc	short BadPack
 38168 00006A69 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38169                                  
 38170                                  ; Scan the source to see if there are any illegal chars
 38171                                  
 38172                                  	;mov	bx,CharType		; load lookup table
 38173 00006A6C B90B00                  	mov	cx,11
 38174 00006A6F 56                      	push	si			; back over name, ext
 38175                                  FCBScan:
 38176 00006A70 AC                      	lodsb				; get a byte
 38177                                  	
 38178                                  	; 09/08/2018
 38179                                  	;;xlat	byte [es:bx]
 38180                                  	;es	xlat
 38181                                  
 38182                                  	; 22/05/2019 - Retro DOS v4.0	
 38183 00006A71 E836E5                  	call	GetCharType		; get flags
 38184                                  
 38185                                  	;test	al,8	
 38186 00006A74 A808                    	test	al,FFCB
 38187 00006A76 741B                    	jz	short BadPack
 38188                                  NextCh: 
 38189 00006A78 E2F6                    	loop	FCBScan
 38190 00006A7A 5E                      	pop	si
 38191 00006A7B 89FB                    	mov	bx,di
 38192 00006A7D E8F6B5                  	call	PackName                ; crunch the path
 38193 00006A80 5F                      	pop	di			; get original destination
 38194 00006A81 07                      	pop	es
 38195 00006A82 16                      	push	ss			; get DS addressability
 38196 00006A83 1F                      	pop	ds
 38197                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38198                                  	;LEA	SI,FCBTmp		; point at new pathname
 38199 00006A84 8D76F0                  	lea	si,[bp-16]
 38200 00006A87 803F00                  	cmp	byte [bx],0
 38201 00006A8A 7407                    	jz	short BadPack
 38202 00006A8C 55                      	push	bp
 38203 00006A8D E80E00                  	call	TransPathSet            ; convert the path
 38204 00006A90 5D                      	pop	bp
 38205 00006A91 7303                    	jnc	short FCBRet		; bye with transPath error code
 38206                                  BadPack:
 38207 00006A93 F9                      	STC
 38208                                  	;mov	al,3
 38209 00006A94 B003                    	MOV     AL,error_path_not_found
 38210                                  FCBRet: 
 38211                                  	;LEAVE
 38212 00006A96 89EC                    	mov	sp,bp
 38213 00006A98 5D                      	pop	bp
 38214                                  TransPath_retn:
 38215 00006A99 C3                      	retn
 38216                                  
 38217                                  ; 12/07/2018 - Retro DOS v3.0
 38218                                  
 38219                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38220                                  ;----------------------------------------------------------------------------
 38221                                  ;
 38222                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38223                                  ;       substitution, insertion of current directory and fixing . and ..
 38224                                  ;       entries. Perform splicing. Allow input string to match splice
 38225                                  ;       exactly.
 38226                                  ;
 38227                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38228                                  ;       matches splice.
 38229                                  ;
 38230                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38231                                  ;
 38232                                  ;   The following anomalous behaviour is required:
 38233                                  ;
 38234                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38235                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38236                                  ;       Raw net I/O sets ThisCDS => NULL.
 38237                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38238                                  ;
 38239                                  ;   Other behaviour:
 38240                                  ;
 38241                                  ;       ThisCDS set up.
 38242                                  ;       FatRead done on local CDS.
 38243                                  ;       ValidateCDS done on local CDS.
 38244                                  ;
 38245                                  ;   Brief flowchart:
 38246                                  ;
 38247                                  ;       if fSharing then
 38248                                  ;           set up DummyCDS (ThisCDS)
 38249                                  ;           canonicalize (sets cMeta)
 38250                                  ;           splice
 38251                                  ;           fatRead
 38252                                  ;           return
 38253                                  ;       if \\ or d:\\ lead then
 38254                                  ;           set up null CDS (ThisCDS)
 38255                                  ;           canonicalize (sets cMeta)
 38256                                  ;           return
 38257                                  ;       if device then
 38258                                  ;           set up dummyCDS (ThisCDS)
 38259                                  ;           canonicalize (sets cMeta)
 38260                                  ;           return
 38261                                  ;       if file then
 38262                                  ;           getCDS (sets (ThisCDS) from name)
 38263                                  ;           validateCDS (may reset current dir)
 38264                                  ;           Copy current dir
 38265                                  ;           canonicalize (set cMeta)
 38266                                  ;           splice
 38267                                  ;           generate correct CDS (ThisCDS)
 38268                                  ;           if local then
 38269                                  ;               fatread
 38270                                  ;           return
 38271                                  ;
 38272                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38273                                  ;               DI - point to buffer in DOSDATA
 38274                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38275                                  ;                   syntax, etc. or user FAILed to I 24.
 38276                                  ;               WFP_Start - points to beginning of buffer
 38277                                  ;               Curr_Dir_End - points to end of current dir in path
 38278                                  ;               DS - DOSDATA
 38279                                  ;   Registers modified: most
 38280                                  ;
 38281                                  ;----------------------------------------------------------------------------
 38282                                  
 38283                                  ; 22/05/2019
 38284                                  ; 13/05/2019 - Retro DOS v4.0
 38285                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38286                                  
 38287                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38288                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38289                                  
 38290                                  TransPath:
 38291 00006A9A 30C0                    	XOR     AL,AL
 38292 00006A9C EB02                    	JMP     SHORT SetSplice
 38293                                  TransPathSet:
 38294 00006A9E B0FF                    	MOV     AL,-1
 38295                                  SetSplice:
 38296 00006AA0 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38297 00006AA4 B0FF                    	MOV     AL,-1
 38298                                  TransPathNoSet:
 38299 00006AA6 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38300 00006AAA 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38301 00006AB0 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38302 00006AB5 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38303 00006ABC 16                      	push	ss
 38304 00006ABD 07                      	pop	es
 38305                                  	;lea	bp,[di+134]
 38306 00006ABE 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38307                                  ;
 38308                                  ; if this is through the server dos call, fsharing is set. We set up a
 38309                                  ; dummy cds and let the operation go.
 38310                                  ;
 38311 00006AC2 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38312 00006AC8 7435                    	JZ	short CheckUNC		; skip to UNC check
 38313                                  ;
 38314                                  ; ES:DI point to buffer
 38315                                  ;
 38316 00006ACA E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38317 00006ACD E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38318 00006AD0 722A                    	jc	short NoPath
 38319 00006AD2 E80A03                  	CALL	TextFromDrive		; drop in new
 38320 00006AD5 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38321 00006AD8 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38322 00006ADB 72BC                    	jc	short TransPath_retn	; errors
 38323                                  ;
 38324                                  ; Perform splices for net guys.
 38325                                  ;
 38326 00006ADD 16                      	push	ss
 38327 00006ADE 1F                      	pop	ds
 38328 00006ADF 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38329 00006AE3 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38330 00006AE8 7403                    	JZ	short NoServerSplice
 38331 00006AEA E83102                  	CALL    Splice
 38332                                  NoServerSplice:
 38333 00006AED 16                      	push	ss
 38334 00006AEE 1F                      	pop	ds                      ; for FATREAD
 38335 00006AEF C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38336 00006AF3 E8FDA7                  	call	ECritDisk
 38337 00006AF6 E807EB                  	call	FATREAD_CDS
 38338 00006AF9 E812A8                  	call	LCritDisk
 38339                                  NoPath:
 38340                                  	;mov	al,3
 38341 00006AFC B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38342 00006AFE C3                      	retn				; any errors are in Carry flag
 38343                                  
 38344                                  ; Let the network decide if the name is for a spooled device. It will map
 38345                                  ; the name if so.
 38346                                  
 38347                                  CheckUNC:
 38348 00006AFF 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38349                                  	;CallInstall NetSpoolCheck,MultNET,35
 38350 00006B06 B82311                  	mov	ax,1123h
 38351 00006B09 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38352                                  			; DS:SI -> ASCIZ filename to canonicalize
 38353                                  			; ES:DI -> 128-byte buffer for qualified name
 38354                                  			; Return: CF set if not resolved
 38355 00006B0B 7329                    	JNC	short UNCDone
 38356                                  
 38357                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38358                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38359                                  ; input, then the name has been changed to the remote spooler by the above net
 38360                                  ; call. Also, there may be a drive in front of the \\.
 38361                                  
 38362                                  NO_CHECK:
 38363 00006B0D E8B902                  	CALL    DriveFromText		; eat drive letter
 38364 00006B10 50                      	PUSH    AX                      ; save it
 38365 00006B11 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38366 00006B13 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 38367 00006B16 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38368 00006B18 E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 38369 00006B1B 751F                    	JNZ	short CheckDevice	; not a path char
 38370 00006B1D 38C4                    	CMP     AH,AL                   ; are they same?
 38371 00006B1F 751B                    	JNZ	short CheckDevice	; nope
 38372                                  
 38373                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38374                                  ; local machine root path
 38375                                  
 38376 00006B21 58                      	POP     AX
 38377 00006B22 A5                      	MOVSW                           ; get the lead \\.
 38378                                  UNCCpy:
 38379 00006B23 AC                      	LODSB                           ; get a byte
 38380 00006B24 E84BE4                   	call	UCase                   ;AN000;; convert the char
 38381 00006B27 08C0                    	OR      AL,AL
 38382 00006B29 740E                    	JZ	short UNCTerm		; end of string. All done.
 38383 00006B2B E899E4                  	call    PATHCHRCMP              ; is it a path char?
 38384 00006B2E 89FB                    	MOV     BX,DI                   ; backup position
 38385 00006B30 AA                      	STOSB
 38386 00006B31 75F0                    	JNZ	short UNCCpy		; no, go copy
 38387 00006B33 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38388                                  UNCDone:
 38389 00006B36 16                      	push	ss
 38390 00006B37 1F                      	pop	ds
 38391 00006B38 C3                       	retn				; return error code
 38392                                  UNCTerm:
 38393 00006B39 AA                      	STOSB                           ;AN000;
 38394 00006B3A EBFA                    	JMP	short UNCDone		;AN000;
 38395                                  
 38396                                  CheckDevice:
 38397                                  
 38398                                  ; Check DS:SI for device. First eat any path stuff
 38399                                  
 38400 00006B3C 58                      	POP     AX                      ; retrieve drive info
 38401 00006B3D 803C00                  	CMP     BYTE [SI],0		; check for null file
 38402 00006B40 7504                    	JNZ	short CheckPath
 38403                                  	;mov	al,2 
 38404 00006B42 B002                    	MOV     AL,error_file_not_found ; bad file error
 38405 00006B44 F9                      	STC                             ; signal error on null input
 38406 00006B45 C3                      	RETN				; bye!
 38407                                  CheckPath:
 38408 00006B46 50                      	push	ax
 38409 00006B47 55                      	push	bp			; save drive number
 38410                                  
 38411                                  
 38412                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38413                                  %if 0
 38414                                  	; MSDOS 6.0
 38415                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38416                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38417                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38418                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38419                                  ;;;end up having a 5D in the opcode's displacement field. The
 38420                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38421                                  ;;;
 38422                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38423                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38424                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38425                                  ;;;
 38426                                  ;;;More info:
 38427                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38428                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38429                                  ;;;
 38430                                  	call	no5Dshere
 38431                                  start5Dhack:
 38432                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38433                                  backfrom5Dhack:
 38434                                  
 38435                                  %endif
 38436                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38437                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38438 00006B48 E8EDD6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38439                                  
 38440 00006B4B 5D                      	pop	bp
 38441 00006B4C 58                      	pop	ax			; get drive letter back
 38442 00006B4D 731C                    	JNC	short DoFile		; yes we have a file.
 38443                                  
 38444                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38445                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38446                                  ; call.
 38447                                  
 38448 00006B4F 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38449 00006B55 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38450 00006B58 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38451                                  
 38452                                  ; Now that we have noted that we have a device, we put it into a form that
 38453                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38454                                  ; string. We relax this to state that if the d:\ is present then the path
 38455                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38456                                  ; a device.
 38457                                  
 38458 00006B5E E87E02                  	CALL    TextFromDrive
 38459 00006B61 B02F                    	MOV     AL,'/'                  ; path sep.
 38460 00006B63 AA                      	STOSB
 38461 00006B64 E852A6                  	call	StrCpy			; move remainder of string
 38462                                  
 38463 00006B67 F8                      	CLC                             ; everything OK.
 38464 00006B68 16                      	push	ss
 38465 00006B69 1F                      	pop	ds                      ; remainder of OK stuff
 38466                                  DoFile_retn:
 38467 00006B6A C3                      	retn
 38468                                  
 38469                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38470                                  %if 0
 38471                                  
 38472                                  no5Dshere:
 38473                                  	; 10/08/2018
 38474                                  	jmp	CheckThisDevice		; snoop for device
 38475                                  %endif
 38476                                  
 38477                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38478                                  
 38479                                  ; We have a file. Get the raw CDS.
 38480                                  
 38481                                  DoFile:
 38482                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38483                                  
 38484 00006B6B E839FE                  	call	GetVisDrv               ; get proper CDS
 38485                                  	;mov	al,3 
 38486 00006B6E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38487 00006B70 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38488                                  
 38489                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38490                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38491                                  ; Use the one that we are going to use (ES:DI).
 38492                                  
 38493                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38494 00006B72 1E                      	push	ds
 38495 00006B73 56                      	push	si
 38496 00006B74 06                      	push	es
 38497 00006B75 57                      	push	di
 38498 00006B76 E803D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38499                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38500 00006B79 5F                      	pop	di
 38501 00006B7A 07                      	pop	es
 38502 00006B7B 5E                      	pop	si
 38503 00006B7C 1F                      	pop	ds
 38504                                  	;mov	al,3
 38505 00006B7D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38506                                  	;retc				; someone failed an operation
 38507 00006B7F 72E9                    	jc	short DoFile_retn
 38508                                  
 38509                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38510                                  ; current directory. Copy it in.
 38511                                  
 38512 00006B81 1E                      	push	ds
 38513 00006B82 56                      	push	si
 38514 00006B83 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38515 00006B88 89FB                    	MOV     BX,DI                   ; point to destination
 38516                                  	;add	bx,[si+79] ; MSDOS 6.0
 38517 00006B8A 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38518                                  	;lea	bp,[di+134]
 38519 00006B8D 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38520                                  					;AN000;
 38521 00006B91 E834A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38522 00006B94 4F                      	DEC     DI                      ; point to NUL byte
 38523                                  
 38524                                  ; Make sure that there is a path char at end.
 38525                                  
 38526 00006B95 B05C                    	MOV     AL,'\'
 38527 00006B97 263845FF                	CMP     [ES:DI-1],AL
 38528 00006B9B 7401                    	JZ	short GetOrig
 38529 00006B9D AA                      	STOSB
 38530                                  
 38531                                  ; Now get original string.
 38532                                  
 38533                                  GetOrig:
 38534 00006B9E 4F                      	DEC     DI                      ; point to path char
 38535 00006B9F 5E                      	pop	si
 38536 00006BA0 1F                      	pop	ds
 38537                                  
 38538                                  ; BX points to the end of the root part of the CDS (at where a path char
 38539                                  ; should be). Now, we decide whether we use this root or extend it with the
 38540                                  ; current directory. See if the input string begins with a leading 
 38542 00006BA1 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38543 00006BA4 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38544 00006BA6 08C0                    	OR      AL,AL                   ; end of string?
 38545 00006BA8 7410                    	JZ	short DoCanon		; yes, skip.
 38546                                  ;
 38547                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38548                                  ; to this root. Make sure that there is a path char there and advance the
 38549                                  ; source string over all leading \'s.
 38550                                  ;
 38551 00006BAA 89DF                    	MOV     DI,BX                   ; back up to root point.
 38552                                  SkipPath:
 38553 00006BAC AC                      	LODSB
 38554 00006BAD E817E4                  	call    PATHCHRCMP
 38555 00006BB0 74FA                    	JZ	short SkipPath
 38556 00006BB2 4E                      	DEC     SI
 38557 00006BB3 08C0                    	OR      AL,AL
 38558 00006BB5 7403                    	JZ	short DoCanon
 38559                                  
 38560                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38561                                  ; for yucks.
 38562                                  
 38563                                  PathAssure:
 38564 00006BB7 B05C                    	MOV     AL,'\'	; 5Ch
 38565 00006BB9 AA                      	STOSB
 38566                                  
 38567                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38568                                  ; BP is the max extent to advance DI
 38569                                  ; BX is the backup limit for ..
 38570                                  
 38571                                  DoCanon:
 38572 00006BBA E85200                  	CALL    Canonicalize            ; wham.
 38573                                  	;retc				; badly formatted path.
 38574 00006BBD 72AB                    	jc	short DoFile_retn
 38575                                  
 38576                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38577                                  ; to wfp_start and do string substitution. BP is still the max position in
 38578                                  ; buffer.
 38579                                  
 38580 00006BBF 16                      	push	ss
 38581 00006BC0 1F                      	pop	ds
 38582 00006BC1 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38583 00006BC5 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38584 00006BC9 E81B02                  	CALL    PathPref                ; is there a prefix?
 38585 00006BCC 7514                    	JNZ	short DoSplice		; no, do splice
 38586                                  
 38587                                  ; We have a match. Check to see if we ended in a path char.
 38588                                  
 38589 00006BCE 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38590 00006BD1 E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38591 00006BD4 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38592                                  Pathline:                               ; 2/13/KK
 38593 00006BD6 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38594 00006BDA 7406                    	JZ	short DoSplice
 38595 00006BDC 47                      	INC     DI                      ; point to after current path char
 38596 00006BDD 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38597                                  
 38598                                  ; Splice the result.
 38599                                  
 38600                                  DoSplice:
 38601 00006BE2 16                      	push	ss
 38602 00006BE3 1F                      	pop	ds			; back to DOSDATA
 38603 00006BE4 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38604 00006BE8 31C9                    	XOR     CX,CX
 38605 00006BEA F606[7105]FF            	TEST	byte [FSPLICE],-1
 38606 00006BEF 7403                    	JZ	short SkipSplice
 38607 00006BF1 E82A01                  	CALL    Splice                  ; replaces in place.
 38608                                  SkipSplice:
 38609                                  
 38610                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38611                                  ; device.
 38612                                  
 38613 00006BF4 16                      	push	ss
 38614 00006BF5 1F                      	pop	ds
 38615 00006BF6 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38616                                  	;test	word [es:di+67],8000h
 38617                                  	; 17/12/2022
 38618                                  	;test	byte [es:di+68],80h
 38619 00006BFA 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38620                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38621 00006BFF 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38622 00006C01 E30B                    	JCXZ    Done
 38623 00006C03 E8EDA6                  	call	ECritDisk
 38624 00006C06 E8F7E9                  	call	FATREAD_CDS
 38625 00006C09 E802A7                  	call	LCritDisk
 38626                                  	;mov	al, 3
 38627 00006C0C B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38628                                  Done:   
 38629 00006C0E C3                      	retn                         ; any errors in carry flag.
 38630                                  
 38631                                  ; 13/07/2018
 38632                                  
 38633                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38634                                  ;----------------------------------------------------------------------------
 38635                                  ;   Canonicalize - copy path removing . and .. entries.
 38636                                  ;
 38637                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38638                                  ;               ES:DI - point to buffer
 38639                                  ;               BX - backup limit (offset from ES) points to slash
 38640                                  ;               BP - end of buffer
 38641                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38642                                  ;                   syntax, etc.
 38643                                  ;               Carry Clear -
 38644                                  ;                   DS:DI - advanced to end of string
 38645                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38646                                  ;   Registers modified: AX CX DX (in addition to those above)
 38647                                  ;----------------------------------------------------------------------------
 38648                                  
 38649                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38650                                  
 38651                                  Canonicalize:
 38652                                  
 38653                                  ; We copy all leading path separators.
 38654                                  
 38655 00006C0F AC                      	LODSB                           ;   while (PathChr (*s))
 38656 00006C10 E8B4E3                  	call    PATHCHRCMP
 38657 00006C13 7507                    	JNZ	short CanonDec
 38658 00006C15 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38659 00006C17 7319                    	JAE	short CanonBad		;           goto error;
 38660 00006C19 AA                      	STOSB
 38661 00006C1A EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38662                                  CanonDec:
 38663 00006C1C 4E                      	DEC     SI
 38664                                  
 38665                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38666                                  ; component (no leading path separators) and ES:DI being the destination
 38667                                  ; buffer.
 38668                                  
 38669                                  CanonLoop:
 38670                                  
 38671                                  ; If we are at the end of the source string, then we need to check to see that
 38672                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38673                                  ; Otherwise, do nothing
 38674                                  
 38675 00006C1D 31C0                    	XOR     AX,AX
 38676 00006C1F 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38677 00006C21 751A                    	JNZ	short DoComponent
 38678 00006C23 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38679 00006C28 7505                    	JNZ	short DoTerminate
 38680 00006C2A B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38681 00006C2C AA                      	STOSB
 38682 00006C2D 88E0                    	MOV     AL,AH
 38683                                  DoTerminate:
 38684 00006C2F AA                      	STOSB                           ;           *d++ = 0;
 38685 00006C30 F8                      	CLC                             ;           return (0);
 38686 00006C31 C3                      	retn
 38687                                  
 38688                                  CanonBad:
 38689 00006C32 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38690                                  	;mov	al,3
 38691 00006C35 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38692 00006C37 7402                    	JZ	short PathEnc		; path character encountered in string
 38693                                  	;mov	al,2
 38694 00006C39 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38695                                  PathEnc:
 38696 00006C3B F9                      	STC
 38697                                  CanonBad_retn:
 38698 00006C3C C3                      	retn
 38699                                  
 38700                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38701                                  ; it to 8.3
 38702                                  
 38703                                  DoComponent:                            ;           }
 38704 00006C3D E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38705 00006C40 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38706                                  
 38707                                  ; We special case the . and .. cases.  These will be backed up.
 38708                                  
 38709                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38710 00006C42 26833D2E                	CMP	WORD [ES:DI],002Eh
 38711 00006C46 7408                    	JZ	short Skip1
 38712                                  	;CMP	WORD PTR ES:[DI],'..'
 38713 00006C48 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38714 00006C4D 750A                    	JNZ	short CanonNormal
 38715 00006C4F 4F                      	DEC     DI                      ;           d--;
 38716                                  Skip1:  
 38717 00006C50 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38718                                  	;mov	al,3
 38719 00006C53 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38720 00006C55 72E5                    	jc	short CanonBad_retn
 38721 00006C57 EB02                    	JMP     short CanonPath         ;           }
 38722                                  
 38723                                  ; We have a normal path. Advance destination pointer over it.
 38724                                  
 38725                                  CanonNormal:                            ;       else
 38726 00006C59 01CF                    	ADD     DI,CX                   ;           d += ct;
 38727                                  
 38728                                  ; We have successfully copied a component. We are now pointing at a path
 38729                                  ; sep char or are pointing at a nul or are pointing at something else.
 38730                                  ; If we point at something else, then we have an error.
 38731                                  
 38732                                  CanonPath:
 38733 00006C5B E81600                  	CALL    PathSep
 38734 00006C5E 75D2                    	JNZ	short CanonBad		; something else...
 38735                                  
 38736                                  ; Copy the first path char we see.
 38737                                  
 38738 00006C60 AC                      	LODSB                           ; get the char
 38739 00006C61 E863E3                  	call    PATHCHRCMP              ; is it path char?
 38740 00006C64 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38741 00006C66 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38742 00006C68 73C8                    	JAE	short CanonBad		; yep, error.
 38743 00006C6A AA                      	STOSB                           ; copy the one byte
 38744                                  
 38745                                  ; Skip all remaining path chars
 38746                                  
 38747                                  CanonPathLoop:
 38748 00006C6B AC                      	LODSB                           ; get next byte
 38749 00006C6C E858E3                  	call    PATHCHRCMP              ; path char again?
 38750 00006C6F 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38751 00006C71 4E                      	DEC     SI                      ; back up
 38752 00006C72 EBA9                    	JMP	short  CanonLoop	; go copy component
 38753                                  
 38754                                  ;BREAK <PathSep - determine if char is a path separator>
 38755                                  ;----------------------------------------------------------------------------
 38756                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38757                                  ;   Inputs:     DS:SI - point to a char
 38758                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38759                                  ;               Zero set if AL is / \ or NUL
 38760                                  ;               Zero reset otherwise
 38761                                  ;   Registers modified: AL
 38762                                  ;----------------------------------------------------------------------------
 38763                                  
 38764                                  PathSep:
 38765 00006C74 8A04                    	MOV     AL,[SI]                 ; get the character
 38766                                  PathSepGotCh:				; already have character
 38767 00006C76 08C0                    	OR      AL,AL                   ; test for zero
 38768 00006C78 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38769                                  	;call	PATHCHRCMP              ; check for path character
 38770                                  	;retn				; and return HIS determination
 38771                                  	; 18/12/2022
 38772 00006C7A E94AE3                  	jmp	PATHCHRCMP
 38773                                  
 38774                                  
 38775                                  ;BREAK <SkipBack - move backwards to a path separator>
 38776                                  ;----------------------------------------------------------------------------
 38777                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38779                                  ;               BX has current directory back up limit (point to a / \)
 38780                                  ;   Outputs:    ES:DI backed up to point to a path char
 38781                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38782                                  ;               Carry set if illegal backup
 38783                                  ;               Carry Clear if ok
 38784                                  ;   Registers modified: DI,AL
 38785                                  ;----------------------------------------------------------------------------
 38786                                  
 38787                                  SkipBack:
 38788 00006C7D 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38789 00006C7F 720B                    	JB	short SkipBad		;       if (d < dlim)
 38790 00006C81 4F                      	DEC     DI                      ;           goto err;
 38791 00006C82 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38792 00006C85 E83FE3                  	call    PATHCHRCMP              ;           break;
 38793 00006C88 75F3                    	JNZ	short SkipBack		;       }
 38794 00006C8A F8                      	CLC                             ;   return (0);
 38795 00006C8B C3                      	retn				;
 38796                                  SkipBad:                                ;err:
 38797                                  	;mov	al,3
 38798 00006C8C B003                    	MOV     AL,error_path_not_found ; bad path error
 38799 00006C8E F9                      	STC                             ;   return (-1);
 38800 00006C8F C3                      	retn				;
 38801                                  
 38802                                  ;Break <CopyComponent - copy out a file path component>
 38803                                  ;----------------------------------------------------------------------------
 38804                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38805                                  ;
 38806                                  ;   Inputs:     DS:SI - source path
 38807                                  ;               ES:DI - destination
 38808                                  ;               ES:BP - end of buffer
 38809                                  ;   Outputs:    Carry Set - too long
 38810                                  ;               Carry Clear - DS:SI moved past component
 38811                                  ;                   CX has length of destination
 38812                                  ;   Registers modified: AX,CX,DX
 38813                                  ;----------------------------------------------------------------------------
 38814                                  
 38815                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38816                                  
 38817                                  CopyComponent:
 38818                                  
 38819                                  %define CopyBP	 [BP]		; word
 38820                                  %define CopyD	 [BP+2]		; dword
 38821                                  %define CopyDoff [BP+2]		; word
 38822                                  %define CopyS	 [BP+6]		; dword
 38823                                  %define CopySoff [BP+6]		; word
 38824                                  %define CopyTemp [BP+10]	; byte
 38825                                  
 38826 00006C90 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38827 00006C93 1E                      	push	ds
 38828 00006C94 56                      	push	si
 38829 00006C95 06                      	push	es
 38830 00006C96 57                      	push	di
 38831 00006C97 55                      	push	bp
 38832 00006C98 89E5                    	MOV     BP,SP
 38833 00006C9A B42E                    	MOV     AH,'.'
 38834 00006C9C AC                      	LODSB
 38835 00006C9D AA                      	STOSB
 38836 00006C9E 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38837 00006CA0 7518                    	JNZ	short NormalComp
 38838 00006CA2 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38839 00006CA5 740B                    	JZ	short NulTerm
 38840                                  TryTwoDot:
 38841 00006CA7 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38842 00006CA8 AA                      	STOSB
 38843 00006CA9 38E0                    	CMP     AL,AH
 38844 00006CAB 7557                    	JNZ	short CopyBad
 38845 00006CAD E8C4FF                  	CALL    PathSep
 38846 00006CB0 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38847                                  NulTerm:                                ;               return -1;
 38848 00006CB2 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38849 00006CB4 AA                      	STOSB
 38850 00006CB5 897606                  	MOV     CopySoff,SI
 38851 00006CB8 EB47                    	JMP     SHORT _GoodRet		;       }
 38852                                  NormalComp:                             ;   else {
 38853 00006CBA 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38854 00006CBD E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38855 00006CC0 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38856 00006CC3 743F                    	JZ	short CopyBad		;           return (-1);
 38857 00006CC5 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38858 00006CCB 7510                    	JNZ	short DoPack
 38859 00006CCD 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38860 00006CD0 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38861 00006CD5 7F2D                    	JG	short CopyBad		;               return (-1);
 38862 00006CD7 7504                    	JNZ	short DoPack		;           else
 38863 00006CD9 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38864 00006CDB 742F                    	JZ	short CopyBadPath	;               return (-1);
 38865                                  DoPack:                                 ;           }
 38866 00006CDD 897606                  	MOV     CopySoff,SI ; [bp+6]
 38867 00006CE0 16                      	push	ss
 38868 00006CE1 1F                      	pop	ds
 38869 00006CE2 BE[4B05]                	MOV     SI,NAME1
 38870 00006CE5 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38871 00006CE8 57                      	push	di
 38872 00006CE9 E88AB3                  	call	PackName                ;       PackName (Name1, temp);
 38873 00006CEC 5F                      	pop	di
 38874 00006CED E8E1A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38875 00006CF0 49                      	DEC     CX
 38876 00006CF1 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38877                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38878                                  	;cmp	cx,[bp+0]
 38879                                  	; 15/12/2022
 38880                                  	;cmp	cx,[bp]
 38881 00006CF4 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38882 00006CF7 730B                    	JAE	short CopyBad		;           return (-1);
 38883 00006CF9 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38884 00006CFB C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38885 00006CFE E8C7A4                  	call	FStrCpy
 38886                                  _GoodRet:				;       }
 38887 00006D01 F8                      	CLC
 38888 00006D02 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38889                                  CopyBad:
 38890 00006D04 F9                      	STC
 38891 00006D05 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38892                                  	;mov	al,2
 38893 00006D08 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38894 00006D0A 7503                    	JNZ	short CopyEnd
 38895                                  CopyBadPath:
 38896 00006D0C F9                      	STC
 38897                                  	;mov	al,3
 38898 00006D0D B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38899                                  CopyEnd:
 38900 00006D0F 5D                      	pop	bp
 38901 00006D10 5F                      	pop	di
 38902 00006D11 07                      	pop	es
 38903 00006D12 5E                      	pop	si
 38904 00006D13 1F                      	pop	ds
 38905 00006D14 9F                      	LAHF
 38906 00006D15 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38907 00006D18 E8B6A4                  	call	StrLen
 38908 00006D1B 49                      	DEC     CX
 38909 00006D1C 9E                      	SAHF
 38910 00006D1D C3                      	retn
 38911                                  
 38912                                  ; 14/05/2019 - Retro DOS v4.0
 38913                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38914                                  
 38915                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38916                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38917                                  
 38918                                  ;Break <Splice - pseudo mount by string substitution>
 38919                                  ;----------------------------------------------------------------------------
 38920                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38921                                  ;       ThisCDS to point to physical drive CDS.
 38922                                  ;   Inputs:     DS:SI point to string
 38923                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38924                                  ;   Outputs:    DS:SI points to thisCDS
 38925                                  ;               ES:DI points to DPB
 38926                                  ;               String at DS:SI may be reduced in length by removing prefix
 38927                                  ;               and substituting drive letter.
 38928                                  ;               CX = 0 If no splice done
 38929                                  ;               CX <> 0 otherwise
 38930                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38931                                  ;                   left alone
 38932                                  ;               ThisDPB points to proper DPB
 38933                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38934                                  ;----------------------------------------------------------------------------
 38935                                  
 38936                                  Splice:
 38937 00006D1E 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38938 00006D24 7469                    	JZ	short AllDone
 38939 00006D26 36FF36[A205]            	push	word [SS:THISCDS]
 38940 00006D2B 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38941 00006D30 1E                      	push	ds
 38942 00006D31 56                      	push	si
 38943 00006D32 5F                      	pop	di
 38944 00006D33 07                      	pop	es
 38945 00006D34 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38946                                  SpliceScan:
 38947 00006D36 E8DFFC                  	call	GetCDSFromDrv
 38948 00006D39 724A                    	JC	short SpliceDone
 38949 00006D3B FEC0                    	INC     AL
 38950                                  	; 17/12/2022
 38951                                  	;test	byte [si+68],20h
 38952 00006D3D F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38953                                  	;;test	word [si+67],2000h
 38954                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38955 00006D41 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38956 00006D43 57                      	push	di
 38957 00006D44 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38958 00006D47 7403                    	JZ	short SpliceFound	;
 38959                                  SpliceSkip:
 38960 00006D49 5F                      	pop	di
 38961 00006D4A EBEA                    	JMP	short SpliceScan	;               continue;
 38962                                  SpliceFound:
 38963 00006D4C 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38964 00006D50 7508                    	JNZ	short SpliceDo
 38965 00006D52 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38966 00006D58 75EF                    	JNZ	short SpliceSkip
 38967                                  SpliceDo:
 38968 00006D5A 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38969 00006D5C 06                      	push	es
 38970 00006D5D 1F                      	pop	ds
 38971 00006D5E 5F                      	pop	di
 38972 00006D5F E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38973 00006D62 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38974 00006D66 09C0                    	OR      AX,AX
 38975 00006D68 7808                    	JS	short NoPoke
 38976 00006D6A 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38977 00006D6C 29F0                    	SUB     AX,SI
 38978 00006D6E 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38979                                  NoPoke:
 38980 00006D72 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38981 00006D75 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38982 00006D77 B05C                    	MOV     AL,"\"
 38983 00006D79 AA                      	STOSB
 38984                                  SpliceCopy:                             ;               strcpy (src, p);
 38985 00006D7A E84BA4                  	call	FStrCpy
 38986 00006D7D 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38987 00006D80 80C901                  	OR      CL,1                    ; signal splice done.
 38988 00006D83 EB0C                    	JMP     SHORT DoSet             ;               return;
 38989                                  SpliceDone:                             ;               }
 38990 00006D85 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38991 00006D8A 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38992                                  AllDone:
 38993 00006D8F 31C9                    	XOR     CX,CX
 38994                                  DoSet:
 38995 00006D91 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38996                                  	;les	di,[si+69]
 38997 00006D96 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38998 00006D99 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38999 00006D9E 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39000                                  Splice_retn:
 39001 00006DA3 C3                      	retn
 39002                                  
 39003                                  ; 15/05/2019 - Retro DOS v4.0
 39004                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39005                                  
 39006                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39007                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39008                                  
 39009                                  ;Break <$NameTrans - partially process a name>
 39010                                  ;----------------------------------------------------------------------------
 39011                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39012                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39013                                  ;   to Transpath playing games with devices, we need to insure that the output
 39014                                  ;   has drive letter and : in it.
 39015                                  ;
 39016                                  ;   Inputs:     DS:SI - source string for translation
 39017                                  ;               ES:DI - pointer to buffer
 39018                                  ;   Outputs:
 39019                                  ;       Carry Clear
 39020                                  ;               Buffer at ES:DI is filled in with data
 39021                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39022                                  ;       Carry Set
 39023                                  ;               AX = error_path_not_found
 39024                                  ;   Registers modified: all
 39025                                  ;----------------------------------------------------------------------------
 39026                                  
 39027                                  _$NameTrans:
 39028 00006DA4 1E                      	push	ds
 39029 00006DA5 56                      	push	si
 39030 00006DA6 06                      	push	es
 39031 00006DA7 57                      	push	di
 39032 00006DA8 51                      	push	cx ; MSDOS 6.0
 39033                                  	
 39034                                  	; MSDOS 6.0	
 39035                                  ; M027 - Start
 39036                                  ;
 39037                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39038                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39039                                  ; device if the old call set the volume attribute bit. Note that devname in
 39040                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39041                                  ; and restore CX.
 39042                                  
 39043                                  	;mov	ch,16h
 39044 00006DA9 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39045 00006DAB E8B902                  	call	SetAttrib
 39046                                  
 39047                                  ; M027 - End
 39048                                  
 39049                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39050 00006DAE BF[BE03]                	MOV     DI,OPENBUF
 39051 00006DB1 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39052 00006DB4 59                      	pop	cx ; MSDOS 6.0
 39053 00006DB5 5F                      	pop     di
 39054 00006DB6 07                      	pop	es
 39055 00006DB7 5E                      	pop     si
 39056 00006DB8 1F                      	pop     ds
 39057 00006DB9 7303                    	JNC	short TransOK
 39058 00006DBB E98298                  	jmp	SYS_RET_ERR
 39059                                  TransOK:
 39060 00006DBE BE[BE03]                	MOV     SI,OPENBUF
 39061 00006DC1 16                      	push	ss
 39062 00006DC2 1F                      	pop	ds
 39063                                  ;GotText:
 39064 00006DC3 E802A4                  	call	FStrCpy
 39065 00006DC6 E96E98                  	jmp	SYS_RET_OK
 39066                                  
 39067                                  ;Break   <DriveFromText - return drive number from a text string>
 39068                                  ;----------------------------------------------------------------------------
 39069                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39070                                  ;   pointer.
 39071                                  ;
 39072                                  ;   Inputs:     DS:SI point to a text string
 39073                                  ;   Outputs:    AL has drive number
 39074                                  ;               DS:SI advanced
 39075                                  ;   Registers modified: AX,SI.
 39076                                  ;----------------------------------------------------------------------------
 39077                                  
 39078                                  DriveFromText:
 39079 00006DC9 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39080                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39081                                  	; 23/09/2023
 39082 00006DCB 3804                    	cmp	[si],al ; 0
 39083 00006DCD 74D4                    	jz	short Splice_retn
 39084 00006DCF 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39085 00006DD3 75CE                    	jnz	short Splice_retn
 39086 00006DD5 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39087 00006DD6 0C20                    	OR      AL,20h
 39088                                  	;sub	al,60h
 39089 00006DD8 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39090 00006DDA 75C7                    	jnz	short Splice_retn
 39091 00006DDC B0FF                    	MOV	AL,-1                   ; nuke AL...
 39092                                  	; 23/09/2023
 39093                                  	;dec	al ; -1
 39094 00006DDE C3                      	retn				;           }
 39095                                  
 39096                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39097                                  ;----------------------------------------------------------------------------
 39098                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39099                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39100                                  ;
 39101                                  ;   Inputs:     AL has 0-based drive number
 39102                                  ;   Outputs:    ES:DI advanced
 39103                                  ;   Registers modified: AX
 39104                                  ;----------------------------------------------------------------------------
 39105                                  
 39106                                  TextFromDrive:
 39107 00006DDF FEC0                    	INC     AL
 39108                                  TextFromDrive1:
 39109                                  	;add	al,40h
 39110 00006DE1 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39111 00006DE3 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39112 00006DE5 AB                      	STOSW
 39113                                  PathPref_retn:
 39114 00006DE6 C3                      	retn
 39115                                  
 39116                                  ;Break   <PathPref - see if one path is a prefix of another>
 39117                                  ;----------------------------------------------------------------------------
 39118                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39119                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39120                                  ;   prefix: A:\ and A:\FOO
 39121                                  ;
 39122                                  ;   Inputs:     DS:SI potential prefix
 39123                                  ;               ES:DI string
 39124                                  ;   Outputs:    Zero set => prefix found
 39125                                  ;                   DI/SI advanced past matching part
 39126                                  ;               Zero reset => no prefix, DS/SI garbage
 39127                                  ;   Registers modified: CX
 39128                                  ;----------------------------------------------------------------------------
 39129                                  
 39130                                  PathPref:
 39131 00006DE7 E8F5A3                  	call	DStrLen                 ; get length
 39132 00006DEA 49                      	DEC     CX                      ; do not include nul byte
 39133 00006DEB F3A6                    	REPZ    CMPSB                   ; compare
 39134 00006DED 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39135 00006DEF 50                      	push	ax			; save char register
 39136 00006DF0 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39137 00006DF3 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39138 00006DF6 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39139                                  NotSep:                                 ; 2/13/KK
 39140 00006DF8 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39141 00006DFB E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39142                                  Prefix:
 39143 00006DFE 58                      	pop	ax			; get back original
 39144 00006DFF C3                      	retn
 39145                                  
 39146                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39147                                  ;----------------------------------------------------------------------------
 39148                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39149                                  ;     a path separator.
 39150                                  ;
 39151                                  ;     Input:    DS:SI target string (null terminated)
 39152                                  ;     Output:   Zero set => path separator encountered in string
 39153                                  ;               Zero clear => null encountered
 39154                                  ;     Registers modified: SI
 39155                                  ;----------------------------------------------------------------------------
 39156                                  
 39157                                  ScanPathChar:
 39158 00006E00 AC                      	LODSB                           ; fetch a character
 39159 00006E01 E872FE                  	call    PathSepGotCh
 39160 00006E04 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39161                                  	;call	PATHCHRCMP              ; path separator?
 39162                                  	;retn
 39163                                  	; 18/12/2022
 39164 00006E06 E9BEE1                  	jmp	PATHCHRCMP
 39165                                  
 39166                                  ;============================================================================
 39167                                  ; FILE.ASM, MSDOS 6.0, 1991
 39168                                  ;============================================================================
 39169                                  ; 14/07/2018 - Retro DOS v3.0
 39170                                  
 39171                                  ; 13/05/2019 - Retro DOS v4.0
 39172                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39173                                  
 39174                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39175                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39176                                  
 39177                                  ; MSDOS 2.11
 39178                                  ;BREAK <$Open - open a file handle>
 39179                                  ;----------------------------------------------------------------------------
 39180                                  ;   Assembler usage:
 39181                                  ;           LDS     DX, Name
 39182                                  ;           MOV     AH, Open
 39183                                  ;           MOV     AL, access
 39184                                  ;           INT     int_command
 39185                                  ;
 39186                                  ;       ACCESS          Function
 39187                                  ;       ------          --------
 39188                                  ;       open_for_read   file is opened for reading
 39189                                  ;       open_for_write  file is opened for writing
 39190                                  ;       open_for_both   file is opened for both reading and writing.
 39191                                  ;
 39192                                  ;   Error returns:
 39193                                  ;           AX = error_invalid_access
 39194                                  ;              = error_file_not_found
 39195                                  ;              = error_access_denied
 39196                                  ;              = error_too_many_open_files
 39197                                  ;----------------------------------------------------------------------------
 39198                                  
 39199                                  ; MSDOS 6.0
 39200                                  ;	BREAK <$Open - open a file from a path string>
 39201                                  ;----------------------------------------------------------------------------
 39202                                  ;
 39203                                  ;**	$OPen - Open a File
 39204                                  ;
 39205                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39206                                  ;	file and and returns a handle
 39207                                  ;
 39208                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39209                                  ;		(AL) = open mode
 39210                                  ;	EXIT	'C' clear if OK
 39211                                  ;		  (ax) = file handle
 39212                                  ;		'C' set if error
 39213                                  ;		  (ax) = error code
 39214                                  ;	USES	all
 39215                                  ;
 39216                                  ;----------------------------------------------------------------------------
 39217                                  
 39218                                  ; 13/05/2019 - Retro DOS v4.0
 39219                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39220                                  
 39221                                  _$OPEN:       
 39222 00006E09 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39223                                  _$Open2:
 39224                                  	;mov	ch,16h
 39225 00006E0B B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39226 00006E0D E85702                  	call	SetAttrib
 39227 00006E10 B9[F82A]                	mov	cx,DOS_OPEN
 39228                                  
 39229                                  	;xor	ah,ah  ; MSDOS 3.3
 39230                                  
 39231 00006E13 50                      	push	ax
 39232                                  
 39233                                  ;*	General file open/create code. The $CREATE call and the various
 39234                                  ;	$OPEN calls all come here.
 39235                                  ;
 39236                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39237                                  ;	path names, etc., and then dispatch to our individual handlers.
 39238                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39239                                  ;
 39240                                  ;	(TOS) = create mode
 39241                                  ;	(CX) = address of routine to call to do actual function
 39242                                  ;	(DS:DX) = ASCIZ name
 39243                                  ;	SAttrib = Attribute mask
 39244                                  
 39245                                  ;	Get a free SFT and mark it "being allocated"
 39246                                  
 39247                                  AccessFile:
 39248 00006E14 E8DCA4                  	call	ECritSFT
 39249 00006E17 E8D8F7                  	call	SFNFree			; get a free sfn
 39250 00006E1A E8F1A4                  	call	LCritSFT
 39251 00006E1D 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39252 00006E1F 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39253 00006E24 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39254 00006E29 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39255                                  
 39256                                  ;	Find a free area in the user's JFN table.
 39257                                  
 39258 00006E2E E8AEF7                  	call	JFNFree			; get a free jfn
 39259 00006E31 7303                    	jnc	short SaveJFN
 39260                                  OpenFailJ:
 39261 00006E33 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39262                                  
 39263                                  SaveJFN:
 39264 00006E36 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39265 00006E3B 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39266 00006E40 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39267                                  
 39268                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39269                                  ;	reusing the same JFN.
 39270                                  
 39271 00006E45 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39272 00006E4A 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39273 00006E4D 89D6                    	MOV	SI,DX			; get name in appropriate place
 39274 00006E4F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39275 00006E52 51                      	push	cx			; save routine to call
 39276 00006E53 E844FC                  	call	TransPath		; convert the path
 39277 00006E56 5B                      	pop	bx			; (bx) = routine to call
 39278                                  
 39279 00006E57 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39280 00006E5C 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39281 00006E5E 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39282 00006E64 7404                    	JZ	short SetSearch
 39283                                  	;mov	al,2
 39284 00006E66 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39285                                  OpenCleanJ:
 39286 00006E68 EB50                    	JMP	short OpenClean
 39287                                  
 39288                                  SetSearch:
 39289 00006E6A 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39290                                  
 39291                                  ;	We need to get the new inheritance bits.
 39292                                  
 39293 00006E6B 31C9                    	xor	cx,cx
 39294                                  	; MSDOS 6.0
 39295                                  	;mov	[si+2],cx ; 0
 39296 00006E6D 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39297                                  	;mov    [si+51],cx ; 0
 39298 00006E70 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39299                                  	;
 39300 00006E73 81FB[F82A]              	CMP	BX,DOS_OPEN
 39301 00006E77 7509                    	JNZ	short _DoOper
 39302                                  	;test   al,80h
 39303 00006E79 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39304 00006E7B 7405                    	JZ	short _DoOper ; 10/08/2018
 39305 00006E7D 247F                    	AND	AL,7Fh			; mask off inherit bit
 39306                                  	;mov	cx,1000h
 39307 00006E7F B90010                  	MOV	CX,sf_no_inherit
 39308                                  _DoOper:
 39309                                  	;; MSDOS 3.3
 39310                                  	;;mov	word [si+2], 0
 39311                                  	;;mov	word [si+33h], 0
 39312                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39313                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39314                                  
 39315                                  	; MSDOS 6.0
 39316                                  ;**	Check if this is an extended open. If so you must set the
 39317                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39318                                  ;	Set_EXT_mode in creat.asm
 39319                                  
 39320                                  	; MSDOS 6.0
 39321                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39322 00006E82 57                      	push	di
 39323 00006E83 06                      	push	es
 39324 00006E84 1E                      	push	ds
 39325 00006E85 07                      	pop	es
 39326 00006E86 56                      	push	si
 39327 00006E87 5F                      	pop	di			; (es:di) = SFT address
 39328 00006E88 E859BC                  	call	Set_EXT_mode
 39329                                  	;RESTORE <es, di>
 39330 00006E8B 07                      	pop	es
 39331 00006E8C 5F                      	pop	di
 39332                                  
 39333                                  	;Context DS
 39334 00006E8D 16                      	push	ss
 39335 00006E8E 1F                      	pop	ds	
 39336                                  
 39337 00006E8F 51                      	push	cx
 39338 00006E90 FFD3                    	CALL	BX			; blam!
 39339 00006E92 59                      	pop	cx
 39340 00006E93 C536[9E05]              	LDS	SI,[THISSFT]
 39341 00006E97 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39342                                  	;jc	short OpenE ; MSDOS 3.3
 39343                                  
 39344                                  ;	The SFT was successfully opened. Remove busy mark.
 39345                                  
 39346                                  OpenOK:
 39347                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39348 00006E99 C7040100                	mov	word [SI],1
 39349                                  	;or	[SI+5],cx
 39350 00006E9D 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39351                                  
 39352                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39353                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39354                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39355                                  ;
 39356                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39357                                  ; sharer.
 39358                                  
 39359 00006EA0 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39360 00006EA4 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39361                                  
 39362 00006EA9 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39363                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39364                                  OpenOkj:
 39365 00006EB0 E98497                  	jmp	SYS_RET_OK		; bye with no errors
 39366                                  
 39367                                  	; MSDOS 6.0
 39368                                  ;Extended Open hooks check
 39369                                  OpenE2:					;AN000;;EO.
 39370 00006EB3 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39371 00006EB6 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39372 00006EB8 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39373                                  
 39374                                  ;	Extended Open hooks check
 39375                                  ;
 39376                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39377                                  
 39378                                  OpenClean:
 39379 00006EBA 5B                      	pop	bx			; clean off stack
 39380                                  OpenE:
 39381                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39382 00006EBB C7040000                	mov	word [SI],0
 39383 00006EBF 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39384 00006EC4 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39385 00006EC7 EB02                    	JMP	SHORT OpenCritLeave
 39386                                  
 39387                                  OpenFail:
 39388 00006EC9 FB                      	STI
 39389 00006ECA 59                      	pop	cx			; Clean stack
 39390                                  OpenCritLeave:
 39391 00006ECB 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39392                                  
 39393                                  	; MSDOS 6.0
 39394                                  ; File Tagging DOS 4.00
 39395 00006ED2 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39396                                  					;AN000;;FT. code page mismatch
 39397 00006ED8 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39398 00006EDA E96B97                  	jmp	From_GetSet		;AN000;;FT. yes
 39399                                  NORERR: 				;AN000;
 39400                                  ; File Tagging DOS 4.00
 39401                                  
 39402 00006EDD E96097                  	jmp	SYS_RET_ERR		; no free, return error
 39403                                  
 39404                                  ; MSDOS 2.11
 39405                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39406                                  ;----------------------------------------------------------------------------
 39407                                  ;   Assembler usage:
 39408                                  ;           LDS     DX, name
 39409                                  ;           MOV     AH, Creat
 39410                                  ;           MOV     CX, access
 39411                                  ;           INT     21h
 39412                                  ;       ; AX now has the handle
 39413                                  ;
 39414                                  ;   Error returns:
 39415                                  ;           AX = error_access_denied
 39416                                  ;              = error_path_not_found
 39417                                  ;              = error_too_many_open_files
 39418                                  ;----------------------------------------------------------------------------
 39419                                  
 39420                                  ; MSDOS 6.0
 39421                                  ;	BREAK <$Creat - create a brand-new file>
 39422                                  ;----------------------------------------------------------------------------
 39423                                  ;
 39424                                  ;**	$Creat - Create a File
 39425                                  ;
 39426                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39427                                  ;	initial attributes contained in CX
 39428                                  ;
 39429                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39430                                  ;		(CX) = initial attributes
 39431                                  ;	EXIT	'C' set if error
 39432                                  ;		  (ax) = error code
 39433                                  ;		'C' clear if OK
 39434                                  ;		  (ax) = file handle
 39435                                  ;	USES	all
 39436                                  ;
 39437                                  ;----------------------------------------------------------------------------
 39438                                  
 39439                                  _$CREAT:
 39440 00006EE0 51                      	push	cx			; Save attributes on stack
 39441 00006EE1 B9[D229]                	mov	CX,DOS_CREATE		; routine to call
 39442                                  AccessSet:
 39443                                  	;mov	byte [ss:SATTRIB],6
 39444 00006EE4 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39445                                  	; 10/08/2018
 39446 00006EEA E927FF                  	JMP	AccessFile		; use good ol' open
 39447                                  
 39448                                  ; MSDOS 6.0 (MSDOS 3.3)
 39449                                  ;	BREAK <$CHMOD - change file attributes>
 39450                                  ;----------------------------------------------------------------------------
 39451                                  ;
 39452                                  ;**	$CHMOD - Change File Attributes
 39453                                  ;
 39454                                  ;   Assembler usage:
 39455                                  ;	    LDS     DX, name
 39456                                  ;	    MOV     CX, attributes
 39457                                  ;	    MOV     AL,func (0=get, 1=set)
 39458                                  ;	    INT     21h
 39459                                  ;   Error returns:
 39460                                  ;	    AX = error_path_not_found
 39461                                  ;	    AX = error_access_denied
 39462                                  ;
 39463                                  ;----------------------------------------------------------------------------
 39464                                  
 39465                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39466                                  _$CHMOD:
 39467                                  	; 05/08/2018 - Retro DOS v3.0
 39468                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39469 00006EED BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39470 00006EF0 50                      	push	ax
 39471 00006EF1 51                      	push	cx			; save function and attributes
 39472 00006EF2 89D6                    	MOV	SI,DX			; get things in appropriate places
 39473 00006EF4 E8A7FB                  	call	TransPathSet		; get correct path
 39474 00006EF7 59                      	pop	cx
 39475 00006EF8 58                      	pop	ax			; and get function and attrs back
 39476 00006EF9 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39477 00006EFB 16                      	push	ss			; set up for later possible calls
 39478 00006EFC 1F                      	pop	ds
 39479 00006EFD 803E[7A05]FF            	CMP	byte [CMETA],-1
 39480 00006F02 754E                    	JNZ	short ChModErr
 39481                                  	;mov	byte [SATTRIB],16h
 39482 00006F04 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39483 00006F09 2C01                    	SUB	AL,1			; fast way to discriminate
 39484 00006F0B 720B                    	JB	short ChModGet		; 0 -> go get value
 39485 00006F0D 7417                    	JZ	short ChModSet		; 1 -> go set value
 39486                                  	;mov	byte [EXTERR_LOCUS],1
 39487 00006F0F C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39488                                  	;mov	al,1
 39489 00006F14 B001                    	mov	al,error_invalid_function ; bad value
 39490                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39491                                  chmod_errj:	
 39492                                  	;;jmp	SYS_RET_ERR
 39493                                  	;jmp	short ChModE	
 39494 00006F16 EBC5                    	jmp	short NORERR	; 06/12/2022
 39495                                  ChModGet:
 39496 00006F18 E8A2B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39497 00006F1B 7237                    	JC	short ChModE		; error codes are already set for ret
 39498 00006F1D E86195                  	call	Get_User_Stack		; point to user saved vaiables
 39499                                  	;mov	[SI+4],ax
 39500 00006F20 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39501                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39502                                  OpenOkj2:
 39503                                  	; 17/12/2022
 39504                                  	;;jmp	SYS_RET_OK		; say sayonara
 39505                                  	;jmp	short OpenOkj
 39506                                  	; 25/06/2019
 39507 00006F23 E91497                  	jmp	SYS_RET_OK_clc
 39508                                  
 39509                                  ChModSet:
 39510 00006F26 89C8                    	MOV	AX,CX			; get attrs in position
 39511 00006F28 E8F0B9                  	call	SET_FILE_ATTRIBUTE	; go set
 39512 00006F2B 7227                    	JC	short ChModE		; errors are set
 39513                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39514                                  	;jmp	SYS_RET_OK
 39515                                  OpenOkj3:
 39516                                  	;jmp	short OpenOkj2
 39517                                  	; 17/12/2022
 39518 00006F2D E90797                  	jmp	SYS_RET_OK
 39519                                  
 39520                                  ; 17/12/2022
 39521                                  %if 0
 39522                                  ChModErr:
 39523                                  NotFound:	; 17/12/2022
 39524                                  	;mov	al,3
 39525                                  	mov	al,error_path_not_found
 39526                                  ChModE:
 39527                                  UnlinkE:	; 17/12/2022
 39528                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39529                                  	;;jmp	SYS_RET_ERR
 39530                                  	;jmp	short chmod_errj
 39531                                  	; 17/12/2022
 39532                                  	jmp	short NORERR
 39533                                  %endif
 39534                                  
 39535                                  ; 22/05/2019 - Retro DOS v4.0
 39536                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39537                                  
 39538                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39539                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39540                                  
 39541                                  ;	BREAK <$UNLINK - delete a file entry>
 39542                                  ;----------------------------------------------------------------------------
 39543                                  ;
 39544                                  ;**	$UNLINK - Delete a File
 39545                                  ;
 39546                                  ;
 39547                                  ;	Assembler usage:
 39548                                  ;	    LDS     DX, name
 39549                                  ;	    IF VIA SERVER DOS CALL
 39550                                  ;	     MOV     CX,SEARCH_ATTRIB
 39551                                  ;	    MOV     AH, Unlink
 39552                                  ;	    INT     21h
 39553                                  ;
 39554                                  ;	ENTRY	(ds:dx) = path name
 39555                                  ;		(cx) = search_attribute, if via server_dos
 39556                                  ;	EXIT	'C' clear if no error
 39557                                  ;		'C' set if error
 39558                                  ;		  (ax) = error code
 39559                                  ;			= error_file_not_found
 39560                                  ;			= error_access_denied
 39561                                  ;
 39562                                  ;----------------------------------------------------------------------------
 39563                                  
 39564                                  _$UNLINK:
 39565 00006F30 51                      	push	cx			; Save possible CX input parm
 39566 00006F31 89D6                    	MOV	SI,DX			; Point at input string
 39567 00006F33 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39568 00006F36 E865FB                  	call	TransPathSet		; go get normalized path
 39569 00006F39 59                      	pop	cx
 39570 00006F3A 7216                    	JC	short ChModErr		; badly formed path
 39571 00006F3C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39572 00006F42 750E                    	JNZ	short NotFound
 39573 00006F44 16                      	push	ss
 39574 00006F45 1F                      	pop	ds
 39575                                  	;mov	ch,6
 39576 00006F46 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39577 00006F48 E81C01                  	call	SetAttrib
 39578 00006F4B E871B5                  	call	DOS_DELETE		; remove that file
 39579                                  	;JC	short UnlinkE 		; error is there
 39580                                  	; 17/12/2022
 39581 00006F4E 728D                    	jc	short NORERR
 39582                                  
 39583                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39584                                  UnlinkOk:
 39585                                  	;jmp	SYS_RET_OK		; okey doksy
 39586 00006F50 EBDB                    	jmp	short OpenOkj3
 39587                                  
 39588                                  	; 17/12/2022
 39589                                  ChModErr:	; 17/12/2022
 39590                                  NotFound:
 39591                                  	;mov	al,3
 39592 00006F52 B003                    	MOV	AL,error_path_not_found
 39593                                  ChModE:		; 17/12/2022
 39594                                  UnlinkE:
 39595                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39596                                  	;;jmp	SYS_RET_ERR		; bye
 39597                                  	;jmp	short ChModE
 39598                                  	; 17/12/2022
 39599 00006F54 EB87                    	jmp	short NORERR
 39600                                  
 39601                                  ;BREAK <$RENAME - move directory entries around>
 39602                                  ;----------------------------------------------------------------------------
 39603                                  ;
 39604                                  ;   Assembler usage:
 39605                                  ;	    LDS     DX, source
 39606                                  ;	    LES     DI, dest
 39607                                  ;	    IF VIA SERVER DOS CALL
 39608                                  ;	      MOV   CX,SEARCH_ATTRIB
 39609                                  ;	    MOV     AH, Rename
 39610                                  ;	    INT     21h
 39611                                  ;
 39612                                  ;   Error returns:
 39613                                  ;	    AX = error_file_not_found
 39614                                  ;	       = error_not_same_device
 39615                                  ;	       = error_access_denied
 39616                                  ;
 39617                                  ;----------------------------------------------------------------------------
 39618                                  
 39619                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39620                                  _$RENAME:
 39621                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39622 00006F56 51                      	push	cx
 39623 00006F57 1E                      	push	ds
 39624 00006F58 52                      	push	dx			; save source and possible CX arg
 39625 00006F59 06                      	PUSH	ES
 39626 00006F5A 1F                      	POP	DS			; move dest to source
 39627 00006F5B 89FE                    	MOV	SI,DI			; save for offsets
 39628 00006F5D BF[3E04]                	MOV	DI,RENBUF
 39629 00006F60 E83BFB                  	call	TransPathSet		; munge the paths
 39630 00006F63 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39631 00006F68 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39632 00006F6D 5E                      	pop	si
 39633 00006F6E 1F                      	pop	ds
 39634 00006F6F 59                      	pop	cx			; get back source and possible CX arg
 39635                                  epjc2:	
 39636 00006F70 72E0                    	JC	short ChModErr		; get old error
 39637 00006F72 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39638 00006F78 75D8                    	JNZ	short NotFound
 39639 00006F7A 51                      	push	cx			; Save possible CX arg
 39640 00006F7B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39641 00006F7E E81DFB                  	call	TransPathSet		; wham
 39642 00006F81 59                      	pop	cx
 39643 00006F82 72EC                    	JC	short epjc2
 39644 00006F84 16                      	push	ss
 39645 00006F85 1F                      	pop	ds
 39646 00006F86 803E[7A05]FF            	CMP	byte [CMETA],-1
 39647 00006F8B 72C5                    	JB	short NotFound
 39648                                  
 39649                                  	; MSDOS 6.0
 39650 00006F8D FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39651 00006F91 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39652 00006F95 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39653 00006F98 16                      	PUSH	SS			   ;AN000;;MS.
 39654 00006F99 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39655 00006F9A 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39656                                  rnloop: 				   ;AN000;
 39657 00006F9C E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39658 00006F9F 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39659 00006FA1 E8F3A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39660 00006FA4 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39661 00006FA6 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39662 00006FA8 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39663                                  rnerr:					   ;AN000;
 39664 00006FAA 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39665                                  	;error	error_current_directory    ;AN000;;MS.
 39666 00006FAD B010                    	mov	al,error_current_directory 
 39667                                  	;jmp	SYS_RET_ERR
 39668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39669 00006FAF EBA3                    	jmp	short UnlinkE
 39670                                  dorn:					   ;AN000;
 39671 00006FB1 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39672 00006FB6 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39673                                  
 39674 00006FBB 16                      	push	ss
 39675 00006FBC 1F                      	pop	ds
 39676                                  
 39677                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39678                                  	;mov	ch,16h
 39679 00006FBD B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39680                                  					; rename appropriate files
 39681 00006FBF E8A500                  	call	SetAttrib
 39682 00006FC2 E8CEB6                  	call	DOS_RENAME		; do the deed
 39683 00006FC5 728D                    	JC	short UnlinkE 		; errors
 39684                                  
 39685                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39686                                  	;jmp	SYS_RET_OK
 39687 00006FC7 EB87                    	jmp	short UnlinkOk
 39688                                  
 39689                                  
 39690                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39691                                  
 39692                                  ; 14/07/2018 - Retro DOS v3.0
 39693                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39694                                  
 39695                                  ;Break <$CreateNewFile - Create a new directory entry>
 39696                                  ;----------------------------------------------------------------------------
 39697                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39698                                  ;	was no previous directory entry, and fail if a directory entry with
 39699                                  ;	the same name existed previously.
 39700                                  ;
 39701                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39702                                  ;		CX contains default file attributes
 39703                                  ;   Outputs:	Carry Clear:
 39704                                  ;		    AX has file handle opened for read/write
 39705                                  ;		Carry Set:
 39706                                  ;		    AX has error code
 39707                                  ;   Registers modified: All
 39708                                  ;----------------------------------------------------------------------------
 39709                                  
 39710                                  _$CreateNewFile:
 39711 00006FC9 51                      	push	cx			; Save attributes on stack
 39712 00006FCA B9[9B2A]                	MOV	CX,DOS_Create_New	; routine to call
 39713 00006FCD E914FF                  	JMP	AccessSet		; use good ol' open
 39714                                  
 39715                                  ;**	BinToAscii - convert a number to a string.
 39716                                  ;----------------------------------------------------------------------------
 39717                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39718                                  ;	This routine is used to generate temp file names so we don't spend
 39719                                  ;	the time and code needed for a true hex number, we just use
 39720                                  ;	A thorugh O.
 39721                                  ;
 39722                                  ;	ENTRY	(ax) = value
 39723                                  ;		(es:di) = destination
 39724                                  ;	EXIT	(es:di) updated by 4
 39725                                  ;	USES	cx, di, flags
 39726                                  ;----------------------------------------------------------------------------
 39727                                  
 39728                                  ; MSDOS 3.3
 39729                                  ;BinToAscii:
 39730                                  ;	mov     cx,4
 39731                                  ;bta5:
 39732                                  ;	push    cx
 39733                                  ;	mov     cl,4
 39734                                  ;	rol     ax,cl
 39735                                  ;	push    ax
 39736                                  ;	and     al,0Fh
 39737                                  ;	add     al,'0'
 39738                                  ;	cmp     al,'9'
 39739                                  ;	jbe     short bta6
 39740                                  ;	add     al,7
 39741                                  ;bta6: 
 39742                                  ;	stosb
 39743                                  ;	pop     ax
 39744                                  ;	pop     cx
 39745                                  ;	loop    bta5
 39746                                  ;	retn
 39747                                  
 39748                                  ; MSDOS 6.0
 39749                                  BinToAscii:
 39750 00006FD0 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39751                                  bta5:	
 39752 00006FD3 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39753 00006FD5 50                      	push	ax			; preserve remainder of digits
 39754 00006FD6 240F                    	AND	AL,0Fh			; grab low nibble
 39755 00006FD8 0441                    	ADD	AL,'A'			; turn into ascii
 39756 00006FDA AA                      	STOSB				; drop in the character
 39757 00006FDB 58                      	pop	ax			; (ax) = shifted number
 39758 00006FDC FECD                    	dec	ch
 39759 00006FDE 75F3                    	jnz	short bta5		; process 4 digits
 39760 00006FE0 C3                      	retn
 39761                                  
 39762                                  ;Break	<$CreateTempFile - create a unique name>
 39763                                  ;----------------------------------------------------------------------------
 39764                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39765                                  ;	Method used is to get the current time, convert to a name and attempt
 39766                                  ;	a create new. Repeat until create new succeeds.
 39767                                  ;
 39768                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39769                                  ;		CX  contains default attributes
 39770                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39771                                  ;		AX has handle
 39772                                  ;   Registers modified: all
 39773                                  ;----------------------------------------------------------------------------
 39774                                  
 39775                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39776                                  
 39777                                  _$CreateTempFile:
 39778                                  	;Enter
 39779 00006FE1 55                      	push	bp
 39780 00006FE2 89E5                    	mov	bp,sp
 39781                                  
 39782                                  	;LocalVar  EndPtr,DWORD
 39783                                  	;LocalVar  FilPtr,DWORD
 39784                                  	;LocalVar  Attr,WORD
 39785                                  
 39786 00006FE4 83EC0A                  	sub	sp,10
 39787                                  
 39788                                  	;test	cx,0FFD8h
 39789 00006FE7 F7C1D8FF                	test	CX,~attr_changeable
 39790 00006FEB 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39791                                  
 39792                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39793                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39794                                  ; below. The code loops on error_access_denied, but if one of the non
 39795                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39796                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39797                                  ; need to detect these cases before getting to the loop.
 39798                                  
 39799                                  	;mov	ax, 5
 39800 00006FED B80500                  	MOV	AX,error_access_denied
 39801 00006FF0 EB69                    	JMP	SHORT SETTMPERR
 39802                                  
 39803                                  OKatts:
 39804                                  	;MOV	attr,CX 		; save attribute
 39805 00006FF2 894EF6                  	mov     [bp-10],cx
 39806                                  	;MOV	FilPtrL,DX		; pointer to file
 39807 00006FF5 8956F8                  	mov	[bp-8],dx
 39808                                  	;MOV	FilPtrH,DS
 39809 00006FF8 8C5EFA                  	mov	[bp-6],ds
 39810                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39811 00006FFB 8C5EFE                  	mov	[bp-2],ds
 39812 00006FFE 1E                      	PUSH	DS
 39813 00006FFF 07                      	POP	ES			; destination for nul search
 39814 00007000 89D7                    	MOV	DI,DX
 39815 00007002 89F9                    	MOV	CX,DI
 39816 00007004 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39817                                  	; MSDOS 6.0
 39818 00007006 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39819 00007008 7501                    	JNZ	short okok		;AN000;MS. no
 39820                                  	;MOV	CX,-1			;AN000;MS.
 39821                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39822                                  	; 17/12/2022
 39823 0000700A 49                      	dec	cx  ; mov cx,-1
 39824                                  	;mov	cx,-1 ; 0FFFh
 39825                                  okok:					;AN000;
 39826 0000700B 31C0                    	XOR	AX,AX			;AN000;
 39827 0000700D F2AE                    	REPNZ	SCASB			;AN000;
 39828                                  					;AN000;
 39829 0000700F 4F                      	DEC	DI			; point back to the null
 39830 00007010 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39831 00007014 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39832 00007017 7403                    	JZ	short SETENDPTR		; Yes
 39833                                  STOREPTH:
 39834 00007019 B05C                    	MOV	AL,'\'
 39835 0000701B AA                      	STOSB				; Add a path separator (and INC DI)
 39836                                  SETENDPTR:
 39837                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39838 0000701C 8856FC                  	mov	[bp-4],dl
 39839                                  CreateLoop:
 39840 0000701F 16                      	push	ss			; let ReadTime see variables
 39841 00007020 1F                      	pop	ds
 39842 00007021 55                      	push	bp
 39843 00007022 E8EB9A                  	call	READTIME		; go get time
 39844 00007025 5D                      	pop	bp
 39845                                  ;
 39846                                  ; Time is in CX:DX. Go drop it into the string.
 39847                                  ;
 39848                                  	;les	di,EndPtr		; point to the string
 39849 00007026 C47EFC                  	les	di,[BP-4]
 39850 00007029 89C8                    	mov	ax,cx
 39851 0000702B E8A2FF                  	call	BinToAscii		; store upper word
 39852 0000702E 89D0                    	mov	ax,dx
 39853 00007030 E89DFF                  	call	BinToAscii		; store lower word
 39854 00007033 30C0                    	xor	al,al
 39855 00007035 AA                      	STOSB				; nul terminate
 39856                                  	;LDS	DX,FilPtr		; get name
 39857 00007036 C556F8                  	lds	dx,[bp-8]
 39858                                  	;MOV	CX,Attr 		; get attr
 39859 00007039 8B4EF6                  	mov	cx,[bp-10]
 39860 0000703C 55                      	push	bp
 39861 0000703D E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39862 00007040 5D                      	pop	bp
 39863 00007041 7319                    	JNC	short CreateDone	; failed, go try again
 39864                                  
 39865                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39866                                  ; error and figure out what to do.
 39867                                  
 39868                                  	;; MSDOS 3.3			; M049 - start
 39869                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39870                                  ;;	cmp	al,error_file_exists
 39871                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39872                                  ;;	cmp	al,error_access_denied
 39873                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39874                                  
 39875                                  	; MSDOS 6.0
 39876                                  	;cmp	al,50h
 39877 00007043 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39878 00007045 74D8                    	JZ	short CreateLoop	; Y: try again
 39879                                  	;cmp	al,5
 39880 00007047 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39881 00007049 7510                    	JNZ	short SETTMPERR		; N: Error out
 39882                                  					; Y: Check to see if we got this due
 39883                                  					;    to the network drive. Note that
 39884                                  					;    the redir will set the exterr
 39885                                  					;    to error_cannot_make if this is 
 39886                                  					;    so. 
 39887 0000704B 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39888                                  					; See if it's REALLY an att mismatch
 39889 00007051 7408                    	je	short SETTMPERR		; no, network error, stop
 39890                                  ;M070
 39891                                  ; If the user failed on an I24, we do not want to try again
 39892                                  ;
 39893 00007053 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39894                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39895                                  
 39896                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39897                                  	; 17/12/2022
 39898 00007059 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39899                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39900                                  	;jz	short SETTMPERR
 39901                                  	;jmp	short CreateLoop
 39902                                  
 39903                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39904                                  					; M049 - end
 39905                                  SETTMPERR:
 39906 0000705B F9                      	STC
 39907                                  CreateDone:
 39908                                  	;Leave
 39909 0000705C 89EC                    	mov	sp,bp
 39910 0000705E 5D                      	pop	bp
 39911 0000705F 7203                    	JC	short CreateFail
 39912 00007061 E9D395                  	jmp	SYS_RET_OK		; success!
 39913                                  CreateFail:
 39914 00007064 E9D995                  	jmp	SYS_RET_ERR
 39915                                  
 39916                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39917                                  ;   (CH) or to the value in CL if the current system call is through
 39918                                  ;   serverdoscall.
 39919                                  ;
 39920                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39921                                  ;		fSharing == TRUE => set sattrib to CL
 39922                                  ;   Outputs:	none
 39923                                  ;   Registers changed:	CX
 39924                                  
 39925                                  SetAttrib:
 39926 00007067 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39927 0000706D 7502                    	jnz	short Set
 39928 0000706F 88E9                    	mov	cl,ch
 39929                                  Set:
 39930 00007071 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39931 00007076 C3                      	retn
 39932                                  
 39933                                  ; 14/07/2018 - Retro DOS v3.0
 39934                                  ; MSDOS 6.0
 39935                                  
 39936                                  ; 29/04/2019 - Retro DOS v4.0
 39937                                  
 39938                                  ;Break	<Extended_Open- Extended open the file>
 39939                                  ;----------------------------------------------------------------------------
 39940                                  ; Input: AL= 0 reserved  AH=6CH
 39941                                  ;	 BX= mode
 39942                                  ;	 CL= create attribute  CH=search attribute (from server)
 39943                                  ;	 DX= flag
 39944                                  ;	 DS:SI = file name
 39945                                  ;	 ES:DI = parm list
 39946                                  ;			   DD  SET EA list (-1) null
 39947                                  ;			   DW  n  parameters
 39948                                  ;			   DB  type (TTTTTTLL)
 39949                                  ;			   DW  IOMODE
 39950                                  ; Function: Extended Open
 39951                                  ; Output: carry clear
 39952                                  ;		     AX= handle
 39953                                  ;		     CX=1 file opened
 39954                                  ;			2 file created/opened
 39955                                  ;			3 file replaced/opened
 39956                                  ;	  carry set: AX has error code
 39957                                  ;----------------------------------------------------------------------------
 39958                                  
 39959                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39960                                  _$Extended_Open:			  ;AN000;
 39961                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39962 00007077 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39963 0000707C 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39964                                  	; 17/12/2022
 39965 00007083 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39966                                  	;;test	dx,0FE00h
 39967                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39968 00007086 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39969 00007088 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39970 0000708A 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39971 0000708D 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39972                                  	;and	dl,0Fh
 39973 0000708F 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39974 00007092 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39975 00007095 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39976                                  	;and	ah,0F0h
 39977 00007097 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39978 0000709A 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39979 0000709D 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39980                                  
 39981 0000709F 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39982 000070A4 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39983 000070A9 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39984 000070AE 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39985 000070B3 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39986 000070B8 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39987 000070BD 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39988 000070C2 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39989 000070C7 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39990 000070C9 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39991 000070CB EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39992                                  ext_inval2:				  ;AN000;;EO.
 39993                                  	;mov	al,1
 39994 000070CD B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39995                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39996                                  eo_err:
 39997                                  	;jmp	SYS_RET_ERR
 39998 000070CF EB93                    	jmp	short CreateFail
 39999                                  
 40000                                  ext_inval_parm:				  ;AN000;EO..
 40001 000070D1 59                      	POP	CX			  ;AN000;EO..  pop up satck
 40002 000070D2 5E                      	POP	SI			  ;AN000;EO..
 40003                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40004                                  	;mov	al,13
 40005 000070D3 B00D                    	mov	al,error_invalid_data
 40006                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40007                                  	;;jmp	SYS_RET_ERR
 40008                                  	;jmp	short eo_err
 40009                                  	; 17/12/2022
 40010 000070D5 EB8D                    	jmp	short CreateFail
 40011                                  
 40012                                  	; 17/12/2022	
 40013                                  ;error_return:				  ;AN000;EO.
 40014                                  ;	retn				  ;AN000;EO.. return with error
 40015                                  
 40016                                  goopen2:				  ;AN000;
 40017                                  	; 17/12/2022
 40018                                  	;test	bh,20h				 
 40019 000070D7 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40020                                  	;;test	bx,2000h
 40021                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40022 000070DA 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40023                                  	;or	byte [SS:EXTOPEN_ON],2
 40024 000070DC 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40025                                  goopen:					  ;AN000;
 40026                                  	;or	byte [SS:EXTOPEN_ON],1 
 40027 000070E2 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40028                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40029                                  	; 18/12/2022
 40030 000070E8 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40031                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40032 000070EE 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40033 000070F4 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40034 000070F6 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40035 000070F9 723F                    	JC	short error_return	  ;AN000;;EO. error
 40036                                  
 40037 000070FB 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40038 00007101 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40039                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40040 00007103 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 40041 0000710A EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 40042                                  
 40043                                  	; 17/12/2022
 40044                                  ;ok_return2:
 40045                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40046                                  
 40047                                  chknext:
 40048                                  	; 17/12/2022
 40049 0000710C 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40050                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40051                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40052 00007112 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40053 00007114 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40054 00007117 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40055 00007119 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40056 0000711F 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40057 00007121 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 40058 00007128 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40059 0000712E 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40060 00007130 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40061 00007137 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40062                                  error_return2:
 40063 00007139 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40064                                  error_return:	 ;17/12/2022
 40065 0000713A C3                      	retn				  ;AN000;;EO. return with error
 40066                                  
 40067                                  	; 17/12/2022
 40068                                  ok_return:
 40069                                  ok_return2:
 40070 0000713B E9F994                  	jmp	SYS_RET_OK
 40071                                  
 40072                                  exist_open:				  ;AN000;
 40073 0000713E 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40074 00007144 7402                    	jz	short noserver		  ;AN000;;EO. no
 40075 00007146 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40076                                  noserver:
 40077 00007148 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40078 0000714B 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40079 0000714D 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40080 00007153 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40081                                  local_extopen:
 40082                                  	;cmp	ax,2
 40083 00007155 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40084 00007158 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40085                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40086                                  	; 17/12/2022
 40087 0000715A 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40088                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40089                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40090                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40091                                  	; 17/12/2022
 40092 00007160 745D                    	jz	short extexit ; 10/06/2019
 40093                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40094                                  	;jnz	short do_creat
 40095                                  	;jmp	short extexit
 40096                                  do_creat:
 40097 00007162 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40098 00007167 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40099 0000716C 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40100 0000716E E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40101 00007171 724C                    	JC	short extexit 		  ;AN000;;EO. error
 40102                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40103 00007173 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40104                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40105 0000717A EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40106                                  
 40107                                  ext_ok:
 40108 0000717C 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40109 00007182 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40110                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40111 00007184 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40112                                  setXAttr:
 40113                                  	; 29/04/2019
 40114 0000718B 50                      	push	ax
 40115 0000718C E8F292                  	call	Get_User_Stack		  ;AN000;;EO.
 40116 0000718F 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40117                                  	;mov	[si+4],ax
 40118 00007193 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40119 00007196 58                      	pop	ax			  ;AN000;;EO.
 40120 00007197 8904                    	mov	[si],ax
 40121                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40122                                  	; 17/12/2022
 40123 00007199 EBA0                    	jmp	short ok_return
 40124                                  ;ok_return:				  ;AN000;
 40125                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40126                                  
 40127                                  extexit2:				  ;AN000; ERROR RECOVERY
 40128 0000719B 5B                      	POP	BX			  ;AN000;EO. close the handle
 40129 0000719C 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 40130                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40131 0000719D 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40132                                  					  ;AN000;EO. from create;smr;SS Override
 40133 000071A3 750C                    	JNZ	short justopen		  ;AN000;EO.
 40134 000071A5 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40135 000071AA C514                    	LDS	DX,[SI]			  ;AN000;EO.
 40136 000071AC E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40137 000071AF EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 40138                                  
 40139                                  justopen:				  ;AN000;
 40140 000071B1 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40141                                  reserror:				  ;AN000;
 40142 000071B4 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 40143 000071B5 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 40144                                  
 40145                                  ext_file_unfound:			  ;AN000;
 40146                                  	;mov	ax,2
 40147 000071B7 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40148 000071BA EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 40149                                  ext_inval:				  ;AN000;
 40150                                  	;mov	ax,1
 40151 000071BC B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 40152                                  lockoperr:	; 17/12/2022
 40153                                  extexit:
 40154 000071BF E97E94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40155                                  
 40156                                  ;============================================================================
 40157                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40158                                  ;============================================================================
 40159                                  ; 14/07/2018 - Retro DOS v3.0
 40160                                  ; 22/05/2019 - Retro DOS v4.0
 40161                                  
 40162                                  ;BREAK <$LockOper - Lock Calls>
 40163                                  ;----------------------------------------------------------------------------
 40164                                  ;
 40165                                  ;   Assembler usage:
 40166                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40167                                  ;	    MOV     CX, OffsetHigh
 40168                                  ;	    MOV     DX, OffsetLow
 40169                                  ;	    MOV     SI, LengthHigh
 40170                                  ;	    MOV     DI, LengthLow
 40171                                  ;	    MOV     AH, LockOper
 40172                                  ;	    MOV     AL, Request
 40173                                  ;	    INT     21h
 40174                                  ;
 40175                                  ;   Error returns:
 40176                                  ;	    AX = error_invalid_handle
 40177                                  ;	       = error_invalid_function
 40178                                  ;	       = error_lock_violation
 40179                                  ;
 40180                                  ;   Assembler usage:
 40181                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40182                                  ;
 40183                                  ;				    0? lock all
 40184                                  ;				    8? lock write
 40185                                  ;				    ?2 lock multiple
 40186                                  ;				    ?3 unlock multiple
 40187                                  ;				    ?4 lock/read
 40188                                  ;				    ?5 write/unlock
 40189                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40190                                  ;	    MOV     BX, Handle
 40191                                  ;	    MOV     CX, count or size
 40192                                  ;	    LDS     DX, buffer
 40193                                  ;	    INT     21h
 40194                                  ;
 40195                                  ;   Error returns:
 40196                                  ;	    AX = error_invalid_handle
 40197                                  ;	       = error_invalid_function
 40198                                  ;	       = error_lock_violation
 40199                                  ;
 40200                                  ;----------------------------------------------------------------------------
 40201                                  
 40202                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40203                                  _$LockOper:
 40204 000071C2 3C01                    	CMP	AL,1
 40205 000071C4 770B                    	JA	short lock_bad_func
 40206                                  
 40207 000071C6 57                      	PUSH	DI			       ; Save LengthLow
 40208 000071C7 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40209 000071CA 731D                    	JNC	short lock_do 		       ; have valid handle
 40210 000071CC 5F                      	POP	DI			       ; Clean stack
 40211                                  	;mov	al,6
 40212 000071CD B006                    	mov	al,error_invalid_handle
 40213                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40214                                  ;lockoperr:
 40215                                  	;jmp	SYS_RET_ERR
 40216                                  	; 17/12/2022
 40217 000071CF EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40218                                  
 40219                                  lock_bad_func:
 40220                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40221 000071D1 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40222                                  	;mov	al,1
 40223 000071D7 B001                    	mov	al,error_invalid_function
 40224                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40225                                  lockoperrj:
 40226                                  	;jmp	SYS_RET_ERR
 40227 000071D9 EBE4                    	jmp	short lockoperr
 40228                                  
 40229                                  	; 22/05/2019 - Retro DOS v4.0
 40230                                  
 40231                                  	; MSDOS 6.0 
 40232                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40233                                  ; Dead code deleted, MD, 23 Mar 90
 40234                                  
 40235                                  ;lock_do:
 40236                                  ;	; MSDOS 3.3
 40237                                  ;	or	al,al
 40238                                  ;	pop	ax
 40239                                  ;	jz	short DOS_Lock
 40240                                  ;DOS_Unlock:
 40241                                  ;	;test	word [es:di+5],8000h
 40242                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40243                                  ;	JZ	short LOCAL_UNLOCK
 40244                                  ;	push    ax
 40245                                  ;	mov     ax,110Bh
 40246                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40247                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40248                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40249                                  ;			; SFT DPB field -> DPB of drive containing file
 40250                                  ;			; Return: CF set error
 40251                                  ;	pop     bx
 40252                                  ;	jmp     short ValChk
 40253                                  ;
 40254                                  ;LOCAL_UNLOCK:
 40255                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40256                                  ;ValChk:
 40257                                  ;	JNC	short Lock_OK
 40258                                  ;lockerror:
 40259                                  ;	jmp	SYS_RET_ERR
 40260                                  ;Lock_OK:
 40261                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40262                                  ;	jmp	SYS_RET_OK
 40263                                  ;DOS_Lock:
 40264                                  ;	;test	word [es:di+5],8000h
 40265                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40266                                  ;	JZ	short LOCAL_LOCK
 40267                                  ;	;CallInstall NET_XLock,MultNET,10
 40268                                  ;	mov     ax, 110Ah
 40269                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40270                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40271                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40272                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40273                                  ;			; Return: CF set error
 40274                                  ;	JMP	short ValChk
 40275                                  ;
 40276                                  ;LOCAL_LOCK:
 40277                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40278                                  ;	JMP	short ValChk
 40279                                  
 40280                                  ; 17/12/2022
 40281                                  LOCAL_UNLOCK:
 40282                                  	; MSDOS 3.3
 40283                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40284                                  	; MSDOS 6.0
 40285 000071DB FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40286                                  ValChk:
 40287 000071DF 7302                    	JNC	short Lock_OK
 40288                                  lockerror:
 40289                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40290                                  	;;jmp	SYS_RET_ERR
 40291                                  	;jmp	short lockoperrj
 40292                                  	; 17/12/2022
 40293 000071E1 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40294                                  Lock_OK:
 40295                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40296                                  	; 10/06/2019
 40297 000071E3 A1[0C06]                	mov	ax,[TEMP_VAR]
 40298 000071E6 E94E94                  	jmp	SYS_RET_OK
 40299                                  
 40300                                  	; 22/05/2019
 40301                                  lock_do:
 40302                                  	; MSDOS 6.0
 40303 000071E9 89C3                    	MOV	BX,AX				; save AX
 40304 000071EB BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40305                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40306                                  	;;mov	[bp+0],dx
 40307                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40308                                  	; 15/12/2022
 40309 000071EE 895600                  	mov	[bp],dx
 40310                                  	;mov	[bp+2],cx
 40311 000071F1 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40312 000071F4 59                      	POP	CX				; get low length
 40313                                  	;mov	[bp+4],cx
 40314 000071F5 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40315                                  	;mov	[bp+6],si
 40316 000071F8 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40317 000071FB B90100                  	MOV	CX,1				; one range
 40318                                  
 40319                                  ;	PUSH	CS				;
 40320                                  ;	POP	DS				; DS:DX points to
 40321                                  
 40322 000071FE 16                      	push	ss
 40323 000071FF 1F                      	pop	ds
 40324                                  
 40325 00007200 89EA                    	MOV	DX,BP				; Lock_Buffer
 40326                                  	;test	al,1
 40327 00007202 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40328                                  	;JNZ	short DOS_Unlock		; yes
 40329                                  	;JMP	short DOS_Lock			; function 0
 40330                                  	; 17/12/2022
 40331                                  	; 10/06/2019
 40332 00007204 740E                    	jz	short DOS_Lock
 40333                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40334                                  	;JNZ	short DOS_Unlock
 40335                                  	;JMP	short DOS_Lock
 40336                                  
 40337                                  DOS_Unlock:
 40338                                  	;;test	word [es:di+5],8000h
 40339                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40340 00007206 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40341 0000720B 74CE                    	JZ	short LOCAL_UNLOCK
 40342                                  
 40343                                  lock_unlock: ; 22/05/2019
 40344                                  	
 40345                                  	;CallInstall Net_Xlock,MultNET,10
 40346                                  	
 40347                                  	; MSDOS 3.3
 40348                                  	;mov     ax,110Bh
 40349                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40350                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40351                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40352                                  			; SFT DPB field -> DPB of drive containing file
 40353                                  			; Return: CF set error
 40354                                  	; MSDOS 6.0
 40355 0000720D B80A11                  	mov     ax,110Ah
 40356 00007210 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40357                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40358                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40359                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40360                                  			; Return: CF set error
 40361                                  
 40362 00007212 EBCB                    	JMP	SHORT ValChk
 40363                                  
 40364                                  ; 17/12/2022
 40365                                  %if 0
 40366                                  LOCAL_UNLOCK:
 40367                                  	; MSDOS 3.3
 40368                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40369                                  	; MSDOS 6.0
 40370                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40371                                  ValChk:
 40372                                  	JNC	short Lock_OK
 40373                                  lockerror:
 40374                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40375                                  	;jmp	SYS_RET_ERR
 40376                                  	jmp	short lockoperrj
 40377                                  Lock_OK:
 40378                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40379                                  	; 10/06/2019
 40380                                  	mov	ax,[TEMP_VAR]
 40381                                  	jmp	SYS_RET_OK
 40382                                  %endif
 40383                                  
 40384                                  DOS_Lock:
 40385                                  	;;test	word [es:di+5],8000h
 40386                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40387 00007214 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40388 00007219 7407                    	JZ	short LOCAL_LOCK
 40389                                  
 40390                                  	;CallInstall NET_XLock,MultNET,10
 40391                                  
 40392 0000721B B80A11                  	mov     ax,110Ah
 40393 0000721E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40394                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40395                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40396                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40397                                  			; Return: CF set error
 40398                                  
 40399 00007220 EBBD                    	JMP	short ValChk
 40400                                  
 40401                                  LOCAL_LOCK:
 40402                                  	; MSDOS 3.3
 40403                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40404                                  	; MSDOS 6.0
 40405 00007222 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40406                                  
 40407 00007226 EBB7                    	JMP	short ValChk
 40408                                  
 40409                                  ; 14/07/2018 - Retro DOS v3.0
 40410                                  ; LOCK_CHECK
 40411                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40412                                  
 40413                                  ;----------------------------------------------------------------------------
 40414                                  ; Inputs:
 40415                                  ;	Outputs of SETUP
 40416                                  ;	[USER_ID] Set
 40417                                  ;	[PROC_ID] Set
 40418                                  ; Function:
 40419                                  ;	Check for lock violations on local I/O
 40420                                  ;	Retries are attempted with sleeps in between
 40421                                  ; Outputs:
 40422                                  ;    Carry clear
 40423                                  ;	Operation is OK
 40424                                  ;    Carry set
 40425                                  ;	A lock violation detected
 40426                                  ; Outputs of SETUP preserved
 40427                                  ;----------------------------------------------------------------------------
 40428                                  
 40429                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40430                                  	; 22/05/2019 - Retro DOS v4.0
 40431                                  LOCK_CHECK:
 40432 00007228 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40433                                  LockRetry:
 40434 0000722C 53                      	push	bx		; save regs
 40435 0000722D 50                      	push	ax ; MSDOS 6.0
 40436                                  
 40437                                  	;MSDOS 3.3
 40438                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40439                                  	;MSDOS 6.0
 40440 0000722E FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40441                                  
 40442 00007232 58                      	pop	ax ; MSDOS 6.0
 40443 00007233 5B                      	pop	bx		; restrore regs
 40444 00007234 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40445                                  LockN:
 40446 00007236 E8B39F                  	call	Idle		; wait a while
 40447 00007239 4B                      	DEC	BX		; remember a retry
 40448 0000723A 75F0                    	JNZ	short LockRetry	; more retries left...
 40449 0000723C F9                      	STC
 40450                                  lc_ret_label:
 40451 0000723D C3                      	retn
 40452                                  
 40453                                  ; 14/07/2018 - Retro DOS v3.0
 40454                                  ; LOCK_VIOLATION
 40455                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40456                                  
 40457                                  ;----------------------------------------------------------------------------
 40458                                  ; Inputs:
 40459                                  ;	[THISDPB] set
 40460                                  ;	[READOP] indicates whether error on read or write
 40461                                  ; Function:
 40462                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40463                                  ; Outputs:
 40464                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40465                                  ;	Carry clear if user wants a retry
 40466                                  ;
 40467                                  ; DS, ES, DI, CX preserved, others destroyed
 40468                                  ;----------------------------------------------------------------------------
 40469                                  
 40470                                  LOCK_VIOLATION:
 40471 0000723E 1E                      	PUSH	DS
 40472 0000723F 06                      	PUSH	ES
 40473 00007240 57                      	PUSH	DI
 40474 00007241 51                      	PUSH	CX
 40475                                  	;mov	ax,21h
 40476 00007242 B82100                  	MOV	AX,error_lock_violation
 40477                                  	;mov	byte [ALLOWED],18h
 40478 00007245 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40479 0000724A C42E[8A05]              	LES	BP,[THISDPB]
 40480 0000724E BF0100                  	MOV	DI,1		; Fake some registers
 40481 00007251 89F9                    	MOV	CX,DI
 40482                                  	;mov	dx,[es:bp+11]
 40483 00007253 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40484 00007257 E8D6DF                  	call	HARDERR
 40485 0000725A 59                      	POP	CX
 40486 0000725B 5F                      	POP	DI
 40487 0000725C 07                      	POP	ES
 40488 0000725D 1F                      	POP	DS
 40489 0000725E 3C01                    	CMP	AL,1
 40490 00007260 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40491 00007262 F9                      	STC
 40492 00007263 C3                      	retn
 40493                                  
 40494                                  ; 14/07/2018 - Retro DOS v3.0
 40495                                  
 40496                                  ;----------------------------------------------------------------------------
 40497                                  
 40498                                  ;	do a retz to return error
 40499                                  
 40500                                  	; 22/05/2019 - Retro DOS v4.0
 40501                                  CheckShare:
 40502                                  	; MSDOS 3.3
 40503                                  	;cmp	byte [cs:fShare],0
 40504                                  	;retn
 40505                                  
 40506                                  	; MSDOS 6.0
 40507 00007264 1E                      	push	ds			;smr;
 40508                                  	;getdseg <ds>			; ds -> dosdata
 40509 00007265 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40510 0000726A 803E[0303]00            	cmp	byte [fShare],0
 40511 0000726F 1F                      	pop	ds			;smr;
 40512 00007270 C3                      	retn
 40513                                  	
 40514                                  ;============================================================================
 40515                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40516                                  ;============================================================================
 40517                                  ; 14/07/2018 - Retro DOS v3.0
 40518                                  ; 22/05/2019 - Retro DOS v4.0
 40519                                  
 40520                                  ; SHARE_CHECK
 40521                                  ;----------------------------------------------------------------------------
 40522                                  ; Inputs:
 40523                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40524                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40525                                  ;       [WFP_START] has full path of name
 40526                                  ;       [USER_ID] Set
 40527                                  ;       [PROC_ID] Set
 40528                                  ; Function:
 40529                                  ;       Check for sharing violations on local file/device access
 40530                                  ; Outputs:
 40531                                  ;    Carry clear
 40532                                  ;       Sharing approved
 40533                                  ;    Carry set
 40534                                  ;       A sharing violation detected
 40535                                  ;           AX is error code
 40536                                  ; USES    ALL but DS
 40537                                  ;----------------------------------------------------------------------------
 40538                                  
 40539                                  	; 22/05/2019 - Retro DOS v4.0
 40540                                  SHARE_CHECK:
 40541                                  	; 26/07/2019
 40542 00007271 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40543                                  shchk_retn:
 40544 00007275 C3                      	retn
 40545                                  
 40546                                  ; SHARE_VIOLATION
 40547                                  ;----------------------------------------------------------------------------
 40548                                  ; Inputs:
 40549                                  ;       [THISDPB] Set
 40550                                  ;       AX has error code
 40551                                  ; Function:
 40552                                  ;       Handle Sharing errors
 40553                                  ; Outputs:
 40554                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40555                                  ;       Carry clear if user wants a retry
 40556                                  ;
 40557                                  ; DS, ES, DI preserved, others destroyed
 40558                                  ;----------------------------------------------------------------------------
 40559                                  
 40560                                  SHARE_VIOLATION:
 40561 00007276 1E                      	PUSH    DS
 40562 00007277 06                      	PUSH	ES
 40563 00007278 57                      	PUSH    DI
 40564 00007279 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40565                                  	;mov	byte [ALLOWED],18h
 40566 0000727E C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40567 00007283 C42E[8A05]              	LES     BP,[THISDPB]
 40568 00007287 BF0100                  	MOV     DI,1			; Fake some registers
 40569 0000728A 89F9                    	MOV     CX,DI
 40570                                  	;mov	dx,[es:bp+17]
 40571 0000728C 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40572 00007290 E89DDF                  	call	HARDERR
 40573 00007293 5F                      	POP     DI
 40574 00007294 07                      	POP	ES
 40575 00007295 1F                      	POP     DS
 40576 00007296 3C01                    	CMP     AL,1
 40577 00007298 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40578 0000729A F9                      	STC
 40579 0000729B C3                      	retn
 40580                                  
 40581                                  ;----------------------------------------------------------------------------
 40582                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40583                                  ;       NOT perform a close, it merely asserts that the sharing information
 40584                                  ;       for the SFT/UID/PID may be safely released.
 40585                                  ;
 40586                                  ;   Inputs:     ES:DI points to an SFT
 40587                                  ;   Outputs:    None
 40588                                  ;   Registers modified: all except DS,ES,DI
 40589                                  ;----------------------------------------------------------------------------
 40590                                  
 40591                                  ShareEnd:
 40592                                  	; 26/07/2019
 40593 0000729C FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40594 000072A0 C3                      	retn
 40595                                  
 40596                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40597                                  ;----------------------------------------------------------------------------
 40598                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40599                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40600                                  ;
 40601                                  ;   Inputs:     ThisSFT points to the SFT
 40602                                  ;               WFP_Start points to the WFP
 40603                                  ;   Outputs:    Carry clear => successful entry
 40604                                  ;               Carry set => failed system call
 40605                                  ;   Registers modified: all
 40606                                  ;----------------------------------------------------------------------------
 40607                                  
 40608                                  ShareEnter:
 40609 000072A1 51                      	push	cx
 40610                                  retry:
 40611 000072A2 8B0E[1A00]              	mov     cx,[RetryCount]
 40612                                  attempt:
 40613 000072A6 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40614 000072AA 31C0                    	XOR     AX,AX
 40615                                   	;mov	[es:di+51],axfff
 40616 000072AC 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40617 000072B0 51                      	push	cx
 40618 000072B1 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40619 000072B4 59                      	pop	cx
 40620 000072B5 730A                    	jnc	short done		; success, let the user see this
 40621 000072B7 E8329F                  	call	Idle                    ; wait a while
 40622 000072BA E2EA                    	loop    attempt                 ; go back for another attempt
 40623 000072BC E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40624 000072BF 73E1                    	jnc	short retry		; user said to retry, go do it
 40625                                  done:
 40626 000072C1 59                      	pop	cx
 40627 000072C2 C3                      	retn
 40628                                  
 40629                                  ;============================================================================
 40630                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40631                                  ;============================================================================
 40632                                  ; 29/04/2019 - Retro DOS 4.0
 40633                                  
 40634                                  ;** EXEPATCH.ASM 
 40635                                  ;----------------------------------------------------------------------------
 40636                                  ;	Contains the foll:
 40637                                  ;
 40638                                  ;		- code to find and overlay buggy unpack code
 40639                                  ;		- new code to be overlayed on buggy unpack code 
 40640                                  ;		- old code sequence to identify buggy unpack code
 40641                                  ;
 40642                                  ;	Revision history:
 40643                                  ;
 40644                                  ;		Created: 5/14/90
 40645                                  ;----------------------------------------------------------------------------
 40646                                  
 40647                                  ;----------------------------------------------------------------------------
 40648                                  ;
 40649                                  ; M020 : Fix for rational bug - for details see routine header
 40650                                  ; M028 : 4b04 implementation
 40651                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40652                                  ; M032 : set turnoff bit only if DOS in HMA.
 40653                                  ; M033 : if IP < 2 then not exepacked.
 40654                                  ; M046 : support for a 4th version of exepacked files.
 40655                                  ; M068 : support for copy protected apps.
 40656                                  ; M071 : use A20OFF_COUNT of 10.
 40657                                  ;
 40658                                  ;----------------------------------------------------------------------------
 40659                                  
 40660                                  PATCH1_COM_OFFSET	EQU	06CH
 40661                                  PATCH1_OFFSET		EQU	028H
 40662                                  PATCH1_CHKSUM		EQU	0EF4EH
 40663                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40664                                  
 40665                                  PATCH2_COM_OFFSET	EQU	076H
 40666                                  PATCH2_OFFSET		EQU	032H
 40667                                  
 40668                                  	; The strings that start at offset 076h have two possible 
 40669                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40670                                  
 40671                                  PATCH2_CHKSUM		EQU	78B2H
 40672                                  CHKSUM2_LEN		EQU	119H/2
 40673                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40674                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40675                                  
 40676                                  PATCH3_COM_OFFSET	EQU	074H
 40677                                  PATCH3_OFFSET		EQU	032H
 40678                                  PATCH3_CHKSUM		EQU	4EDEH
 40679                                  CHKSUM3_LEN		EQU	117H/2
 40680                                  
 40681                                  ;**	Data structure passed for ExecReady call
 40682                                  ;
 40683                                  ;struc ERStruc
 40684                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40685                                  ; .ER_Flags:	resw	1
 40686                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40687                                  ; .ER_PSP:	resw	1	; PSP of the program
 40688                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40689                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40690                                  ; .size:
 40691                                  ;endstruc
 40692                                  
 40693                                  ;DOSCODE SEGMENT
 40694                                  
 40695                                  	; 22/05/2019 - Retro DOS v4.0
 40696                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40697                                  
 40698                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40699                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40700                                  
 40701                                  ; M028 - BEGIN
 40702                                  
 40703                                  ;--------------------------------------------------------------------------
 40704                                  ;
 40705                                  ;	Procedure Name		: ExecReady
 40706                                  ;
 40707                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40708                                  ;
 40709                                  ;--------------------------------------------------------------------------
 40710                                  
 40711                                  ExecReady:
 40712 000072C3 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40713                                  	;;test	word [si+2],1
 40714                                  	; 17/12/2022
 40715 000072C5 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40716                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40717 000072C9 7413                    	jz	short er_setver		; only setver for .COM files
 40718                                  
 40719                                  	;mov	ax,[si+8]
 40720 000072CB 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40721 000072CE 83C010                  	add	ax,10h
 40722 000072D1 8EC0                    	mov	es,ax
 40723                                  
 40724                                  	;mov	cx,[si+10]
 40725 000072D3 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40726                                  	;mov	cx,[si+12]
 40727 000072D6 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40728                                  
 40729                                  	;call	[ss:FixExePatch]
 40730 000072D9 36FF16[F311]            	call	word [ss:FixExePatch] ; 28/12/2022
 40731                                  	
 40732                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40733                                  	;call	[ss:Rational386PatchPtr]
 40734                                  
 40735                                  er_setver:
 40736                                  	;;test	word [si+2],2		; Q: is this an overlay
 40737                                  	; 17/12/2022
 40738 000072DE F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40739                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40740 000072E2 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40741                                  					; N: set up lie version first
 40742 000072E4 1E                      	push	ds
 40743 000072E5 56                      	push	si
 40744                                  	;lds	si,[si+4]
 40745 000072E6 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40746 000072E9 E876ED                  	call	Scan_Execname1
 40747 000072EC E887ED                  	call	Scan_Special_Entries
 40748 000072EF 5E                      	pop	si
 40749 000072F0 1F                      	pop	ds
 40750                                  	;mov	es,[si+8]
 40751 000072F1 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40752 000072F4 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40753 000072F8 26A34000                	mov	[es:PDB.Version],ax
 40754                                  
 40755                                  er_chkdoshi:
 40756 000072FC 36803E[F211]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40757 00007302 741F                    	je	short er_done		; M032: N: done
 40758                                  
 40759                                  					; M068 - Start
 40760                                  	;mov	ax,[si+8]
 40761 00007304 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40762                                  
 40763                                  	;or	byte [ss:DOS_FLAG],4
 40764 00007307 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40765                                  					; ah = 25 & ah= 49. See dossym.inc 
 40766                                  					; under TAG M003 & M009 for 
 40767                                  					; explanation
 40768                                  	;;test	word [si+2],1
 40769                                  	; 17/12/2022
 40770 0000730D F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40771                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40772 00007311 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40773                                  					;    a20off_psp and ret
 40774 00007313 1E                         	push	ds
 40775 00007314 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40776 00007316 E88E02                  	call	IsCopyProt		; check if copy protected
 40777 00007319 1F                      	pop	ds
 40778                                  
 40779                                  er_setA20:
 40780                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40781                                  	; is non-zero at this point it indicates that the A20 is to be 
 40782                                  	; turned off for that many int 21 calls made by the app. In 
 40783                                  	; addition the A20 has to be turned off when we exit from this 
 40784                                  	; call. Hence the inc.
 40785                                  
 40786 0000731A 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40787 0000731F 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40788                                  					; turned OFF.
 40789                                  er_done:				; M068 - End
 40790 00007323 31C0                    	xor	ax,ax
 40791 00007325 C3                      	retn
 40792                                  
 40793                                  ; M028 - END
 40794                                  
 40795                                  
 40796                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40797                                  %if 0
 40798                                  
 40799                                  ;----------------------------------------------------------------------------
 40800                                  ;
 40801                                  ; procedure : Rational386Patch
 40802                                  ;
 40803                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40804                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40805                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40806                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40807                                  ;
 40808                                  ; This routine applies patches to the Rational DOS Extender to work around
 40809                                  ; most of the register trashing bugs.
 40810                                  ;
 40811                                  ; Note that there are additional register trashing bugs not fixed by these
 40812                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40813                                  ; may be modified on interrupts.
 40814                                  ;
 40815                                  ; There are two different Rational DOS Extender patchs in this module.
 40816                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40817                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40818                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40819                                  ; or not.
 40820                                  ;
 40821                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40822                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40823                                  ; running in the HMA.
 40824                                  ;
 40825                                  ; This patch detection and replacement is based on an example supplied by
 40826                                  ; Ben Williams at Rational.
 40827                                  ;
 40828                                  ;----------------------------------------------------------------------------
 40829                                  
 40830                                  ; 22/05/2019 - Retro DOS v4.0
 40831                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40832                                  
 40833                                  ;----------------------------------------------------------------------------
 40834                                  ;
 40835                                  ; INPUT : ES = segment where program got loaded
 40836                                  ;
 40837                                  ;----------------------------------------------------------------------------
 40838                                  
 40839                                  rpFind1:
 40840                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40841                                  
 40842                                  rpFind1Len equ	$ - rpFind1
 40843                                  
 40844                                  ;	cli
 40845                                  ;	in	al, 21h
 40846                                  ;	pusha
 40847                                  ;	xor	ax, ax
 40848                                  ;	out	43h, al
 40849                                  ;	mov	dx, ...
 40850                                  
 40851                                  rpFind1a:
 40852                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40853                                  
 40854                                  rpFind1aLen equ	$ - rpFind1a
 40855                                  
 40856                                  ;	mov	al, 0Eh
 40857                                  ;	out	37h, al
 40858                                  ;	xor	ax, ax
 40859                                  ;	out	0F2h, al
 40860                                  
 40861                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40862                                  
 40863                                  rpFind2:
 40864                                  	db	0Fh, 20h, 0C0h
 40865                                  
 40866                                  rpFind2Len equ	$ - rpFind2
 40867                                  
 40868                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40869                                  
 40870                                  rpFind3:
 40871                                  	db	0Fh, 22h, 0C0h, 0EAh
 40872                                  
 40873                                  rpFind3Len equ	$ - rpFind3
 40874                                  
 40875                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40876                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40877                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40878                                  
 40879                                  ; note, there is no rpRepl1 string
 40880                                  
 40881                                  rpRepl2:
 40882                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40883                                  
 40884                                  rpRepl2Len equ	$ - rpRepl2
 40885                                  
 40886                                  ;	push	eax
 40887                                  ;	push	cx
 40888                                  ;	mov	eax, cr0
 40889                                  
 40890                                  rpRepl3:
 40891                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40892                                  
 40893                                  rpRepl3Len equ	$ - rpRepl3
 40894                                  
 40895                                  ;	mov	ss, bx
 40896                                  ;	pop	cx
 40897                                  ;	pop	eax
 40898                                  
 40899                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40900                                  
 40901                                  rpFind4:
 40902                                  	db	93h, 58h, 8Bh, 0CCh
 40903                                  
 40904                                  rpFind4Len equ	$ - rpFind4
 40905                                  
 40906                                  ;	xchg	bx, ax
 40907                                  ;	pop	ax
 40908                                  ;	mov	cx, sp
 40909                                  
 40910                                  rpFind5:
 40911                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40912                                  
 40913                                  rpFind5Len equ	$ - rpFind5
 40914                                  
 40915                                  ;	mov	ax, DE0Ch
 40916                                  ;	int	67h
 40917                                  ;	mov	sp, cx
 40918                                  ;	jmp	bx
 40919                                  
 40920                                  rpRepl4:
 40921                                  	db	93h, 58h, 8Bh, 0CCh
 40922                                  	db	02Eh, 066h, 0A3h
 40923                                  
 40924                                  rpRepl4o1Len equ $ - rpRepl4
 40925                                  
 40926                                  	db	00h, 00h
 40927                                  	db	02Eh, 066h, 89h, 36h
 40928                                  
 40929                                  rpRepl4o2Len equ $ - rpRepl4
 40930                                  
 40931                                  	db	00h, 00h
 40932                                  
 40933                                  rpRepl4Len equ	$ - rpRepl4
 40934                                  
 40935                                  ;	xchg	bx, ax
 40936                                  ;	pop	ax
 40937                                  ;	mov	cx, sp
 40938                                  ;	mov	dword ptr cs:[xxxx], eax
 40939                                  ;	mov	dword ptr cs:[xxxx], esi
 40940                                  
 40941                                  rpRepl5:
 40942                                  	db	8Bh, 0E1h
 40943                                  	db	2Eh, 66h, 0A1h
 40944                                  
 40945                                  rpRepl5o1Len equ $ - rpRepl5
 40946                                  
 40947                                  	db	00h, 00h
 40948                                  	db	2Eh, 66h, 8Bh, 36h
 40949                                  
 40950                                  rpRepl5o2Len equ $ - rpRepl5
 40951                                  
 40952                                  	db	00h, 00h
 40953                                  	db	0FFh, 0E3h
 40954                                  
 40955                                  rpRepl5Len equ	$ - rpRepl5
 40956                                  
 40957                                  ;	mov	sp, cx
 40958                                  ;	mov	eax, dword ptr cs:[xxxx]
 40959                                  ;	mov	esi, dword ptr cs:[xxxx]
 40960                                  ;	jmp	bx
 40961                                  
 40962                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40963                                  
 40964                                  rpFind6:
 40965                                  	db	0FAh, 52h, 51h
 40966                                  
 40967                                  rpFind6Len equ	$ - rpFind6
 40968                                  
 40969                                  ;	cli
 40970                                  ;	push	dx
 40971                                  ;	push	cx
 40972                                  
 40973                                  rpFind7a:
 40974                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40975                                  
 40976                                  rpFind7aLen equ	$ - rpFind7a
 40977                                  
 40978                                  ;	mov	ax, 0DE0Ch
 40979                                  ;	call	fword ptr es:[xxxx]
 40980                                  
 40981                                  rpFind7b:
 40982                                  	db	59h, 5Ah, 5Bh
 40983                                  
 40984                                  rpFind7bLen equ	$ - rpFind7b
 40985                                  
 40986                                  ;	pop	cx
 40987                                  ;	pop	dx
 40988                                  ;	pop	bx
 40989                                  
 40990                                  rpRepl6 :
 40991                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40992                                  
 40993                                  rpRepl6Len equ	$ - rpRepl6
 40994                                  
 40995                                  ;	cli
 40996                                  ;	push	eax
 40997                                  ;	push	ebx
 40998                                  ;	push	ecx
 40999                                  ;	push	edx
 41000                                  
 41001                                  rpRepl7:
 41002                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41003                                  
 41004                                  rpRepl7Len equ	$ - rpRepl7
 41005                                  
 41006                                  ;	pop	edx
 41007                                  ;	pop	ecx
 41008                                  ;	pop	ebx
 41009                                  ;	pop	eax
 41010                                  ;	pop	bx
 41011                                  
 41012                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41013                                  
 41014                                  rpFind8:
 41015                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41016                                  
 41017                                  rpFind8Len equ	$ - rpFind8
 41018                                  
 41019                                  ;	pusha
 41020                                  ;	push	es
 41021                                  ;	push	ds
 41022                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41023                                  ;	mov	ds, ax
 41024                                  
 41025                                  rpFind9 :
 41026                                  	db	1Fh, 07h, 61h
 41027                                  
 41028                                  rpFind9Len equ	$ - rpFind9
 41029                                  
 41030                                  ;	pop	ds
 41031                                  ;	pop	es
 41032                                  ;	popa
 41033                                  
 41034                                  rpRepl8:
 41035                                   	db	66h, 60h, 06h, 1Eh
 41036                                  
 41037                                  rpRepl8Len equ	$ - rpRepl8
 41038                                  
 41039                                  ;	pushad
 41040                                  ;	push	es
 41041                                  ;	push	ds
 41042                                  
 41043                                  rpRepl9:
 41044                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41045                                  
 41046                                  rpRepl9Len equ	$ - rpRepl9
 41047                                  
 41048                                  ;	pop	ds
 41049                                  ;	pop	es
 41050                                  ;	popad
 41051                                  ;	retn			;no need to jmp back to main-line
 41052                                  
 41053                                  ;----------------------------------------------------------------------------
 41054                                  
 41055                                  struc SearchPair
 41056                                   .sp_off1: resw 1	; offset of 1st search string
 41057                                   .sp_len1: resw 1	; length of 1st search string
 41058                                   .sp_off2: resw 1	; 2nd string
 41059                                   .sp_len2: resw 1	; 2nd string
 41060                                   .sp_diff: resw 1	; max difference between offsets
 41061                                   .size:
 41062                                  endstruc
 41063                                  
 41064                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41065                                  
 41066                                  rpBug1Strs:
 41067                                  	dw	rpFind2
 41068                                  	dw	rpFind2Len ; 3
 41069                                  	dw	rpFind3
 41070                                  	dw	rpFind3Len ; 4
 41071                                  	dw	20h
 41072                                  
 41073                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41074                                  
 41075                                  rpBug2Strs:
 41076                                  	dw	rpFind4
 41077                                  	dw	rpFind4Len ; 4
 41078                                  	dw	rpFind5
 41079                                  	dw	rpFind5Len ; 9
 41080                                  	dw	80h
 41081                                  
 41082                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41083                                  
 41084                                  rpBug3Strs:
 41085                                  	dw	rpFind6
 41086                                  	dw	rpFind6Len ; 3
 41087                                  	dw	rpFind7a
 41088                                  	dw	rpFind7aLen ; 7
 41089                                  	dw	80h
 41090                                  
 41091                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41092                                  
 41093                                  rpBug4Strs:
 41094                                  	dw	rpFind8
 41095                                  	dw	4
 41096                                  	dw	rpFind9
 41097                                  	dw	rpFind9Len ; 3
 41098                                  	dw	80h
 41099                                  
 41100                                  ;----------------------------------------------------------------------------
 41101                                  
 41102                                  struc StackVars
 41103                                   .sv_wVersion:	resw 1		; Rational extender version #
 41104                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41105                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41106                                   .size:
 41107                                  endstruc
 41108                                  
 41109                                  ;----------------------------------------------------------------------------
 41110                                  
 41111                                  ; 22/05/2019 - Retro DOS v4.0
 41112                                  
 41113                                  Rational386Patch:
 41114                                  	; Do a few quick checks to see if this looks like a Rational
 41115                                  	; Extended application. Hopefully this will quickly weed out
 41116                                  	; most non Rational apps.
 41117                                  
 41118                                  	cmp	word [es:0],395		; version number goes here - versions
 41119                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41120                                  
 41121                                  	cmp	word [es:0Ch],20h	; always has this value here
 41122                                  	jne	short rp3QuickOut
 41123                                  
 41124                                  	push	ax
 41125                                  
 41126                                  	mov	ax,18h 			; extender has 18h at
 41127                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41128                                  	jne	short rp3QO_ax
 41129                                  	cmp	[es:28],ax
 41130                                  	jne	short rp3QO_ax
 41131                                  	cmp	[es:36],ax
 41132                                  	je	short rp3Maybe
 41133                                  rp3QO_ax:
 41134                                  	pop	ax
 41135                                  rp3QuickOut:
 41136                                  	retn
 41137                                  
 41138                                  ; It might be the rational extender, do more extensive checking
 41139                                  
 41140                                  rp3Maybe:
 41141                                  	cld
 41142                                  	push	bx			; note ax pushed above
 41143                                  	push	cx
 41144                                  	push	dx
 41145                                  	push	si
 41146                                  	push	di
 41147                                  	push	es
 41148                                  	push	ds			; we use all of them
 41149                                  	push	bp
 41150                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41151                                  	mov	bp,sp
 41152                                  
 41153                                  	push	cs
 41154                                  	pop	ds
 41155                                  
 41156                                  	mov	ax,[es:0]		; save version #
 41157                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41158                                  	mov	[bp],ax	
 41159                                  					; check that binary version # matches
 41160                                  	call	VerifyVersion		;   ascii string
 41161                                  	jne	short rp3Exit_j
 41162                                  
 41163                                  ; Looks like this is it, find where to put the patch code.  The
 41164                                  ; patch will be located on top of Rational code specific to 80286
 41165                                  ; processors, so these patchs MUST NOT be applied if running on
 41166                                  ; an 80286 system.
 41167                                  
 41168                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41169                                  
 41170                                  	mov	cx,4500h		; force search len to 4700h (searches
 41171                                  	;mov	[bp+2],cx
 41172                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41173                                  
 41174                                  	mov	es,[es:20h]		; es=code segment
 41175                                  
 41176                                  	mov	si,rpFind1		; string to find
 41177                                  	mov	dx,rpFind1Len ; 10	; length to match
 41178                                  	call	ScanCodeSeq		; look for code seq
 41179                                  	jz	short rpGotPatch
 41180                                  
 41181                                  ; According to Rational, some very old versions of the extender may not
 41182                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41183                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41184                                  
 41185                                  	mov	si,rpFind1a
 41186                                  	mov	dx,rpFind1aLen  ;8
 41187                                  	call	ScanCodeSeq
 41188                                  	jz	short rpGotPatch
 41189                                  
 41190                                  rp3Exit_j:
 41191                                  	jmp	rp3Exit
 41192                                  
 41193                                  ; Found the location to write patch code! DI = offset in code seg.
 41194                                  
 41195                                  rpGotPatch:
 41196                                  	;mov	[bp+4],di
 41197                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41198                                  
 41199                                  ;----------------------------------------------------------------------------
 41200                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41201                                  
 41202                                  	;cmp	word [bp+0],381
 41203                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41204                                  	cmp	word [bp],381
 41205                                  	jae	short rpBug2			;   < 3.81
 41206                                  
 41207                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41208                                  	call	FindBadCode
 41209                                  	jc	short rpBug2
 41210                                  
 41211                                  ; si = rpFind2 offset, di = rpFind3 offset
 41212                                  
 41213                                  	push	di
 41214                                  	mov	di,si				; rpFind2 offset
 41215                                  	mov	dx,rpFind2Len ; 3
 41216                                  
 41217                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41218                                  	jne	short rp_no_cx
 41219                                  
 41220                                  	dec	di				;   yes, gobble up push cx too
 41221                                  	inc	dx
 41222                                  rp_no_cx:
 41223                                  	mov	si,rpRepl2			; patch out find2 sequence
 41224                                  	mov	cx,rpRepl2Len  ; 6
 41225                                  	call	GenPatch
 41226                                  
 41227                                  	pop	di				; rpFind3 offset
 41228                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41229                                  	jne	short rp_no_cx2
 41230                                  
 41231                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41232                                  rp_no_cx2:
 41233                                  	;mov	ax,[bp+4]
 41234                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41235                                  	;mov	[es:di+4],ax
 41236                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41237                                  
 41238                                  	push	di				; save find3 offset
 41239                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41240                                  	mov	cx,rpRepl3Len ; 5
 41241                                  	call	CopyPatch
 41242                                  
 41243                                  	pop	bx				; find3 offset
 41244                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41245                                  	call	GenJump 			; jmp back from patch area
 41246                                  	;mov	[bp+4],di
 41247                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41248                                  						;   area pointer
 41249                                  
 41250                                  ;----------------------------------------------------------------------------
 41251                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41252                                  
 41253                                  rpBug2:
 41254                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41255                                  	call	FindBadCode
 41256                                  	jc	short rpBug3
 41257                                  
 41258                                  ; si = rpFind4 offset, di = rpFind5 offset
 41259                                  
 41260                                  	;push	word [bp+4]
 41261                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41262                                  						;   (where repl4 goes)
 41263                                  	push	di				; save find5 offset
 41264                                  
 41265                                  	mov	di,si
 41266                                  	mov	dx,rpFind4Len ; 4
 41267                                  	mov	si,rpRepl4
 41268                                  	mov	cx,rpRepl4Len ; 15
 41269                                  	call	GenPatch			; patch out find4 code
 41270                                  
 41271                                  	pop	di				; find5 offset
 41272                                  	add	di,5				; keep 5 bytes of find5 code
 41273                                  	;mov	bx,[bp+4]
 41274                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41275                                  	push	bx				; save repl5 location
 41276                                  	call	GenJump
 41277                                  
 41278                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41279                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41280                                  	call	CopyPatch			;   so no need to jmp back to
 41281                                  						;   main-line code
 41282                                  
 41283                                  ; patches have been made, now update the patch code to store/load dwords just
 41284                                  ; after the code in the patch area
 41285                                  
 41286                                  	pop	di				; repl5 location
 41287                                  	pop	si				; repl4 location
 41288                                  
 41289                                  	;mov	ax,[bp+4]
 41290                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41291                                  
 41292                                  	;mov	[es:si+7],ax
 41293                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41294                                  	;mov	[es:di+5],ax
 41295                                  	mov	[es:di+rpRepl5o1Len],ax
 41296                                  	add	ax,4
 41297                                  	;mov	[es:si+0Dh],ax
 41298                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41299                                  	;mov	[es:di+0Bh],ax
 41300                                  	mov	[es:di+rpRepl5o2Len],ax
 41301                                  
 41302                                  	;add	word [bp+4],8
 41303                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41304                                  						; patch area
 41305                                  
 41306                                  ;----------------------------------------------------------------------------
 41307                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41308                                  
 41309                                  rpBug3:
 41310                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41311                                  	call	FindBadCode
 41312                                  	jc	short rpBug4
 41313                                  
 41314                                  	;add	di,9
 41315                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41316                                  	push	si				;   code and locate find7b
 41317                                  	mov	si,rpFind7b			;   sequence
 41318                                  	mov	dx,rpFind7bLen ; 3
 41319                                  	call	ScanCodeSeq_di
 41320                                  	pop	si
 41321                                  	jnz	short rpBug4
 41322                                  
 41323                                  	push	di				; save find7b code offset
 41324                                  
 41325                                  	mov	di,si
 41326                                  	mov	dx,rpFind6Len ; 3
 41327                                  	mov	si,rpRepl6
 41328                                  	mov	cx,rpRepl6Len ; 9
 41329                                  	call	GenPatch			; patch out find6 code
 41330                                  
 41331                                  	pop	di
 41332                                  	mov	dx,rpFind7bLen ; 3
 41333                                  	mov	si,rpRepl7
 41334                                  	mov	cx,rpRepl7Len ; 9
 41335                                  	call	GenPatch			; patch out find7b code
 41336                                  
 41337                                  ;----------------------------------------------------------------------------
 41338                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41339                                  
 41340                                  rpBug4:
 41341                                  	;cmp	word [bp+0],360
 41342                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41343                                  	cmp	word [bp],360
 41344                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41345                                  
 41346                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41347                                  	call	FindBadCode
 41348                                  	jc	short rp3Exit
 41349                                  
 41350                                  	push	di				; save find9 code offset
 41351                                  
 41352                                  	mov	di,si
 41353                                  	mov	dx,3
 41354                                  	mov	si,rpRepl8
 41355                                  	mov	cx,rpRepl8Len ; 4
 41356                                  	call	GenPatch			; patch out find8 code
 41357                                  
 41358                                  	pop	di				; find9 offset
 41359                                  	;mov	bx,[bp+4]
 41360                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41361                                  	call	GenJump 			;   patch area
 41362                                  
 41363                                  	mov	si,rpRepl9			; copy replacement code to
 41364                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41365                                  	call	CopyPatch			;   so no jmp back to main-line
 41366                                  
 41367                                  rp3Exit:
 41368                                  	add	sp,StackVars.size
 41369                                  	pop	bp
 41370                                  	pop	ds
 41371                                  	pop	es
 41372                                  	pop	di
 41373                                  	pop	si
 41374                                  	pop	dx
 41375                                  	pop	cx
 41376                                  	pop	bx
 41377                                  	pop	ax
 41378                                  	retn
 41379                                  
 41380                                  ;----------------------------------------------------------------------------
 41381                                  ;
 41382                                  ; FindBadCode
 41383                                  ;
 41384                                  ; Searches Rational code segment looking for a pair of find strings (all
 41385                                  ; patches have at least two find strings).
 41386                                  ;
 41387                                  ; Entry:
 41388                                  ;	ES    = code segment to search
 41389                                  ;	DS:BX = search pair structure for this search
 41390                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41391                                  ;
 41392                                  ; Exit:
 41393                                  ;	CY flag clear if both strings found, and
 41394                                  ;	SI    = offset in ES of 1st string
 41395                                  ;	DI    = offset in ES of 2nd string
 41396                                  ;	CY set if either string not found, or strings too far apart
 41397                                  ;
 41398                                  ; Used:
 41399                                  ;	CX
 41400                                  ;
 41401                                  ;----------------------------------------------------------------------------
 41402                                  
 41403                                  ;struc SearchPair
 41404                                  ; .sp_off1: resw 1	; offset of 1st search string
 41405                                  ; .sp_len1: resw 1	; length of 1st search string
 41406                                  ; .sp_off2: resw 1	; 2nd string
 41407                                  ; .sp_len2: resw 1	; 2nd string
 41408                                  ; .sp_diff: resw 1	; max difference between offsets
 41409                                  ; .size:
 41410                                  ;endstruc
 41411                                  
 41412                                  FindBadCode:
 41413                                  	;mov	cx,[bp+2]
 41414                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41415                                  
 41416                                  	mov	si,[bx]	; mov si,[bx+0]
 41417                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41418                                  	
 41419                                  	;mov	dx,[bx+2]
 41420                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41421                                  	call	ScanCodeSeq
 41422                                  	jnz	short fbc_error		; done if 1st not found
 41423                                  
 41424                                  	push	di			; save 1st string offset
 41425                                  
 41426                                  	;mov	si,[bx+4]
 41427                                  	mov	si,[bx+SearchPair.sp_off2]
 41428                                  	;mov	dx,[bx+6]
 41429                                  	mov	dx,[bx+SearchPair.sp_len2]
 41430                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41431                                  
 41432                                  	pop	si			; restore 1st string offset
 41433                                  	jnz	short fbc_error
 41434                                  
 41435                                  	mov	ax,di			; sanity check that
 41436                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41437                                  	jc	short fbc_error
 41438                                  	;cmp	ax,[bx+8]
 41439                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41440                                  	ja	short fbc_error
 41441                                  
 41442                                  	clc
 41443                                  	retn
 41444                                  
 41445                                  fbc_error:
 41446                                  	stc
 41447                                  	retn
 41448                                  
 41449                                  ;----------------------------------------------------------------------------
 41450                                  ;
 41451                                  ; GenPatch
 41452                                  ;
 41453                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41454                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41455                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41456                                  ; code.
 41457                                  ;
 41458                                  ; Entry:
 41459                                  ;	ES:DI = start of buggy code to be patched
 41460                                  ;	DX    = length of buggy code to be patched
 41461                                  ;	DS:SI = replacement patch code
 41462                                  ;	CX    = length of replacement patch code
 41463                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41464                                  ;
 41465                                  ; Exit:
 41466                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41467                                  ;
 41468                                  ; Used:
 41469                                  ;	AX, BX, SI, Flags
 41470                                  ;
 41471                                  ;----------------------------------------------------------------------------
 41472                                  
 41473                                  GenPatch:
 41474                                  	push	di			;save offset of buggy code
 41475                                  
 41476                                  	;mov	bx,[bp+4]
 41477                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41478                                  					;jump from buggy code to patch area
 41479                                  	call	GenJump
 41480                                  
 41481                                  	call	CopyPatch		;copy replacement code to patch area
 41482                                  
 41483                                  	pop	bx			;offset of buggy code + buggy code
 41484                                  	add	bx,dx			;  length = return from patch offset
 41485                                  
 41486                                  	call	GenJump 		;jump from patch area back to main-
 41487                                  	;mov	[bp+4],di
 41488                                  	mov	[bp+StackVars.sv_pPatch],di
 41489                                  					;  line code, update patch pointer
 41490                                  	retn
 41491                                  
 41492                                  ;----------------------------------------------------------------------------
 41493                                  ;
 41494                                  ; CopyPatch
 41495                                  ;
 41496                                  ; Copies patch code to patch location.
 41497                                  ;
 41498                                  ; Entry:
 41499                                  ;	DS:SI = patch code to be copied
 41500                                  ;	ES    = segment of code to patch
 41501                                  ;	CX    = length of code to copy
 41502                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41503                                  ;
 41504                                  ; Exit:
 41505                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41506                                  ;
 41507                                  ; Used:
 41508                                  ;	SI, Flags
 41509                                  ;
 41510                                  ;----------------------------------------------------------------------------
 41511                                  
 41512                                  CopyPatch:
 41513                                  	push	cx
 41514                                  	;mov	di,[bp+4]
 41515                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41516                                  	cld
 41517                                  	rep movsb
 41518                                  	pop	cx
 41519                                  	;mov	[bp+4],di
 41520                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41521                                  	retn
 41522                                  
 41523                                  ;----------------------------------------------------------------------------
 41524                                  ;
 41525                                  ; GenJump
 41526                                  ;
 41527                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41528                                  ;
 41529                                  ; Entry:
 41530                                  ;	ES:DI = from location (where to put jmp instruction)
 41531                                  ;	BX    = to location (where to jump to)
 41532                                  ;
 41533                                  ; Exit:
 41534                                  ;	DI = byte after generated jump
 41535                                  ;
 41536                                  ; Used:
 41537                                  ;	AX
 41538                                  ;
 41539                                  ;----------------------------------------------------------------------------
 41540                                  
 41541                                  GenJump:
 41542                                  	mov	al,0E9h		; jmp rel16 opcode
 41543                                  	stosb
 41544                                  
 41545                                  	mov	ax,bx		; calc offset to 'to' location
 41546                                  	sub	ax,di
 41547                                  	sub	ax,2
 41548                                  
 41549                                  	stosw			; output offset
 41550                                  
 41551                                  	retn
 41552                                  
 41553                                  ;----------------------------------------------------------------------------
 41554                                  ;
 41555                                  ; ScanCodeSeq
 41556                                  ;
 41557                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41558                                  ;
 41559                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41560                                  ;
 41561                                  ;----------------------------------------------------------------------------
 41562                                  
 41563                                  ScanCodeSeq:
 41564                                  	mov	di,200h
 41565                                  ScanCodeSeq_di:
 41566                                  	push	cx
 41567                                  	sub	cx,dx
 41568                                  	inc	cx
 41569                                  scsagain:
 41570                                  	push	si
 41571                                  	push	di
 41572                                  	push	cx
 41573                                  	mov	cx,dx
 41574                                  	rep	cmpsb
 41575                                  	pop	cx
 41576                                  	pop	di
 41577                                  	pop	si
 41578                                  	je	short scsfound
 41579                                  	inc	di
 41580                                  	loop	scsagain
 41581                                  scsfound:
 41582                                  	pop	cx
 41583                                  vvexit:		; 18/12/2022
 41584                                  	retn
 41585                                  	
 41586                                  ;----------------------------------------------------------------------------
 41587                                  ;
 41588                                  ; VerifyVersion
 41589                                  ;
 41590                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41591                                  ; from ES:2A.
 41592                                  ;
 41593                                  ;       Entry: AX = binary version number 
 41594                                  ;       Exit : Z flag set if version numbers match
 41595                                  ;
 41596                                  ;----------------------------------------------------------------------------
 41597                                  
 41598                                  VerifyVersion:
 41599                                  	mov	si,[es:2Ah]		; offset of version number
 41600                                  					;  in ascii
 41601                                  	mov	bl,10
 41602                                  	add	si,3			; point to last digit
 41603                                  
 41604                                  	call	VVDigit
 41605                                  	jne	short vvexit
 41606                                  	call	VVDigit
 41607                                  	jne	short vvexit
 41608                                  	cmp	byte [es:si],'.'
 41609                                  	jne	short vvexit
 41610                                  	dec	si
 41611                                  	;call	VVDigit
 41612                                  	; 18/12/2022
 41613                                  	;jmp	short VVDigit
 41614                                  ;vvexit:
 41615                                  	;retn
 41616                                  VVDigit:
 41617                                  	div	bl
 41618                                  	add	ah,'0'
 41619                                  	dec	si
 41620                                  	cmp	[es:si+1],ah
 41621                                  	mov	ah,0			; do not xor or sub we need Z
 41622                                  	retn
 41623                                  
 41624                                  %endif
 41625                                  
 41626                                  ;-----------------------------------------------------------------------
 41627                                  
 41628                                  ; 23/05/2019 - Retro DOS v4.0
 41629                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41630                                  
 41631                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41632                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41633                                  
 41634                                  exepatch_start:	 ; label byte
 41635                                  
 41636                                  	; The following is the code that'll be layed over the buggy unpack
 41637                                  	; code.
 41638                                  str1:
 41639 00007326 06                      	db  06h	  		;push	es		 
 41640 00007327 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41641                                  
 41642                                  first_stop equ	$-str1
 41643                                  			
 41644 00007329 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41645                                  
 41646                                  first:  ; label	byte
 41647                                  
 41648 0000732B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41649 0000732D 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41650 0000732F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41651 00007332 57                      	db  57h	    		;push	di
 41652 00007333 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41653 00007336 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41654 00007338 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41655 0000733A 47                      	db  47h	    		;inc	di			
 41656 0000733B 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41657 0000733D 5F                      	db  5Fh	    		;pop	di
 41658 0000733E 58                      	db  58h	    		;pop	ax
 41659                                  
 41660                                  second_stop equ	$-first
 41661                                  
 41662 0000733F 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41663                                  
 41664                                  second: ; label	byte
 41665                                  
 41666 00007341 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41667                                  		    		;NextRec:				
 41668 00007343 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41669                                  		    		;norm_agn:				
 41670 00007346 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41671 00007348 F7D0                    	db  0F7h,0D0h		;not	ax		
 41672 0000734A D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41673 0000734C 7413                    	db  74h,13h		;jz	short SI_ok			
 41674 0000734E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41675 00007350 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41676 00007353 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41677 00007355 7308                    	db  73h,08h		;jnc	short SItoDS			
 41678 00007357 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41679 00007359 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41680 0000735B 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41681 0000735D 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41682                                  				;SItoDS: 				
 41683 0000735F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41684                                  				;SI_ok:					
 41685 00007361 87F7                    	db  87h,0F7h		;xchg	si,di			
 41686 00007363 1E                      	db  1Eh			;push	ds			
 41687 00007364 06                      	db  06h			;push	es			
 41688 00007365 1F                      	db  1Fh			;pop	ds			
 41689 00007366 07                      	db  07h			;pop	es			
 41690 00007367 FECD                    	db  0FEh,0CDh		;dec	ch			
 41691 00007369 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41692 0000736B AC                      	db  0ACh		;lodsb			
 41693 0000736C 92                      	db  92h			;xchg	dx,ax
 41694 0000736D 4E                      	db  4Eh			;dec	si
 41695 0000736E AD                      	db  0ADh		;lodsw			
 41696 0000736F 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41697 00007371 46                      	db  46h			;inc	si		
 41698 00007372 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41699 00007374 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41700 00007376 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41701 00007378 7505                    	db  75h,05h		;jne	short TryEnum
 41702 0000737A AC                      	db  0ACh		;lodsb				
 41703 0000737B F3AA                    	db  0F3h,0AAh		;rep stosb			
 41704                                  
 41705                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41706 0000737D EB06                    	db  0EBh,06h		;jmp	short TryNext
 41707                                  
 41708                                  				;TryEnum:
 41709 0000737F 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41710 00007381 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41711 00007383 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41712                                  				;TryNext:
 41713                                  
 41714 00007385 92                      	db  92h			;xchg	dx,ax
 41715                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41716                                  
 41717 00007386 A801                    	db  0A8h,01h		;test	al,1			
 41718 00007388 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41719 0000738A 9090                    	db  90h,90h		;nop,nop
 41720                                  	
 41721                                  last_stop equ $-second
 41722                                  size_str1 equ $-str1
 41723                                  
 41724                                  	; The following is the code that we need to look for in the exe
 41725                                  	; file.
 41726                                  
 41727                                  scan_patch1: ; label byte
 41728                                  
 41729 0000738C 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41730 0000738E 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41731 00007390 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41732 00007392 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41733 00007394 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41734 00007396 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41735 00007399 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41736 0000739C B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41737 0000739E F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41738 000073A0 47                      	db  47h			;inc	di			
 41739 000073A1 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41740 000073A3 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41741 000073A5 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41742 000073A7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41743 000073A9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41744                                  				;NextRec:
 41745 000073AC B104                    	db  0B1h,04h		;mov	cl,4
 41746 000073AE 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41747 000073B0 F7D0                    	db  0F7h,0D0h		;not	ax		
 41748 000073B2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41749 000073B4 7409                    	db  74h,09h		;jz	short SI_ok
 41750 000073B6 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41751 000073B8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41752 000073BA 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41753 000073BC 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41754                                  	       			;SI_ok:
 41755 000073BF 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41756 000073C1 F7D0                    	db  0F7h,0D0h		;not	ax
 41757 000073C3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41758 000073C5 7409                    	db  74h,09h		;jz	short DI_ok
 41759 000073C7 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41760 000073C9 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41761 000073CB 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41762 000073CD 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41763                                  				;DI_ok:
 41764                                  
 41765                                  size_scan_patch1 equ $-scan_patch1
 41766                                  
 41767                                  scan_patch2: ; label byte
 41768                                  			
 41769 000073D0 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41770 000073D2 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41771 000073D4 48                      	db  48h			;dec	ax
 41772 000073D5 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41773 000073D7 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41774 000073D9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41775 000073DC B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41776 000073DF B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41777 000073E1 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41778 000073E3 47                      	db  47h			;inc	di			
 41779 000073E4 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41780 000073E6 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41781 000073E8 48                      	db  48h			;dec	ax
 41782 000073E9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41783 000073EB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41784                                  				;NextRec:
 41785 000073EE B104                    	db  0B1h,04h		;mov	cl,4
 41786 000073F0 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41787 000073F2 F7D0                    	db  0F7h,0D0h		;not	ax		
 41788 000073F4 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41789 000073F6 740A                    	db  74h,0Ah		;jz	short SI_ok
 41790 000073F8 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41791 000073FA 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41792 000073FC 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41793 000073FE 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41794                                  				;or	si,0FFF0H
 41795                                  				;SI_ok:
 41796 00007402 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41797 00007404 F7D0                    	db  0F7h,0D0h		;not	ax
 41798 00007406 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41799 00007408 740A                    	db  74h,0Ah		;jz	short DI_ok
 41800 0000740A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41801 0000740C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41802 0000740E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41803 00007410 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41804                                  				;or	di,0FFF0H
 41805                                  				;DI_ok:
 41806                                  
 41807                                  size_scan_patch2 equ $-scan_patch2
 41808                                  
 41809                                  scan_patch3: ; label byte
 41810                                  
 41811 00007414 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41812 00007416 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41813 00007418 48                      	db  48h			;dec	ax
 41814 00007419 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41815 0000741B 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41816 0000741D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41817 00007420 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41818 00007423 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41819 00007425 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41820 00007427 47                      	db  47h			;inc	di			
 41821 00007428 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41822 0000742A 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41823 0000742C 48                      	db  48h			;dec	ax
 41824 0000742D 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41825 0000742F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41826                                  				;NextRec:
 41827 00007432 B104                    	db  0B1h,04h		;mov	cl,4
 41828 00007434 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41829 00007436 F7D0                    	db  0F7h,0D0h		;not	ax		
 41830 00007438 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41831 0000743A 7409                    	db  74h,09h		;jz	short SI_ok
 41832 0000743C 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41833 0000743E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41834 00007440 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41835 00007442 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41836                                  				;SI_ok:
 41837 00007445 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41838 00007447 F7D0                    	db  0F7h,0D0h		;not	ax
 41839 00007449 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41840 0000744B 7409                    	db  74h,09h		;jz	short DI_ok
 41841 0000744D 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41842 0000744F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41843 00007451 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41844 00007453 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41845                                  				;DI_ok:
 41846                                  
 41847                                  size_scan_patch3 equ $-scan_patch3
 41848                                  
 41849                                  scan_com: ; label byte
 41850                                  
 41851 00007456 AC                      	db  0ACh		;lodsb			
 41852 00007457 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41853 00007459 4E                      	db  4Eh			;dec	si
 41854 0000745A AD                      	db  0ADh		;lodsw			
 41855 0000745B 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41856 0000745D 46                      	db  46h			;inc	si		
 41857 0000745E 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41858 00007460 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41859 00007462 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41860 00007464 7506                    	db  75h,06h		;jne	short TryEnum
 41861 00007466 AC                      	db  0ACh		;lodsb				
 41862 00007467 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41863 00007469 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41864                                  				;TryEnum:
 41865 0000746C 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41866 0000746E 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41867 00007470 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41868                                  				;TryNext:
 41869 00007472 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41870 00007474 A801                    	db  0A8h,01h		;test	al,1			
 41871                                  ;	db  74h,0BAh		;jz	short NextRec			
 41872                                  
 41873                                  size_scan_com	equ	$-scan_com
 41874                                  
 41875                                  ;-----------------------------------------------------------------------
 41876                                  
 41877                                  ; 23/05/2019 - Retro DOS v4.0
 41878                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41879                                  
 41880                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41881                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41882                                  
 41883                                  ExePatch:
 41884                                  	; 28/12/2022 - Retro DOS v4.1
 41885                                  	;call	ExePackPatch
 41886                                  	;;call	word [ss:RationalPatchPtr]
 41887                                  	;retn
 41888                                  	; 28/12/2022
 41889                                  	;jmp	short ExePackPatch
 41890                                  
 41891                                  ;-----------------------------------------------------------------------
 41892                                  ;
 41893                                  ; Procedure Name 	: ExePackPatch
 41894                                  ;
 41895                                  ; Inputs	 	: DS 			-> DOSDATA
 41896                                  ;			  ES:0 			-> read in image
 41897                                  ;			  ax:cx = start cs:ip of program
 41898                                  ; Output		:		
 41899                                  ;
 41900                                  ;	1. If ES <= 0fffh
 41901                                  ;	   2. if exepack signature ('RB') found
 41902                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41903                                  ;	       	 4. if rest of the code & checksum compares
 41904                                  ;	  	    5. overlay buggy code with code in 
 41905                                  ;		       doscode:str1.
 41906                                  ;		 6. endif
 41907                                  ;	      7. endif
 41908                                  ;	   8. endif
 41909                                  ;	9. endif
 41910                                  ;
 41911                                  ;
 41912                                  ; Uses			: NONE
 41913                                  ;
 41914                                  ;-----------------------------------------------------------------------
 41915                                  		
 41916                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41917                                  	; 23/05/2019 - Retro DOS v4.0	
 41918                                  ExePackPatch:
 41919 00007476 53                      	push	bx
 41920 00007477 8CC3                    	mov	bx,es			; bx has load segment
 41921 00007479 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41922 0000747D 7602                    	jbe	short ep_cont		; N: 
 41923 0000747F 5B                      	pop	bx			; Y: no need to patch
 41924 00007480 C3                      	retn
 41925                                  ep_cont:
 41926 00007481 1E                      	push	ds
 41927 00007482 06                      	push	es
 41928 00007483 50                      	push	ax
 41929 00007484 51                      	push	cx
 41930 00007485 56                      	push	si
 41931 00007486 57                      	push	di
 41932                                  	
 41933                                  		; M033 - start
 41934                                  		; exepacked programs have an IP of 12h (>=2)
 41935                                  
 41936 00007487 83E902                  	sub	cx,2			; Q: is IP >=2 
 41937 0000748A 7303                    	jnb	short epp_1		; N: exit
 41938 0000748C E9C500                  	jmp	ep_notpacked
 41939                                  					; ax:cx now points to location of
 41940                                  					; 'RB' if this is an exepacked file.
 41941                                  		; M033 - end
 41942                                  epp_1:
 41943 0000748F 89CF                    	mov	di,cx
 41944 00007491 8EC0                    	mov	es,ax
 41945 00007493 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41946                                  					; unpack_offset
 41947                                  
 41948 00007498 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41949                                  	;ljne	ep_notpacked
 41950 0000749D 7403                    	je	short epp_2
 41951 0000749F E9B200                  	jmp	ep_notpacked
 41952                                  epp_2:
 41953 000074A2 0E                      	push	cs
 41954 000074A3 1F                      	pop	ds			; set ds to cs
 41955                                  
 41956                                  	;add	di,6Ch
 41957 000074A4 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41958                                  					;          file where we hope to find
 41959                                  					;	   scan string. 
 41960                                  
 41961 000074A7 E8B200                  	call	chk_common_str		; check for match
 41962                                  
 41963 000074AA 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41964                                  					; N: check at patch2_offset
 41965                                  					; Y: check for rest of patch string
 41966 000074AC BE[8C73]                	mov	si,scan_patch1
 41967                                  					; ds:si -> scan string 
 41968 000074AF 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41969                                  
 41970                                  	;add	di,28h
 41971                                  	; 07/12/2022
 41972 000074B4 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41973                                  					;          file where we hope to find
 41974                                  					;	   scan string. 
 41975                                  	;mov	cx,68
 41976 000074B7 B94400                  	mov	cx,size_scan_patch1
 41977                                  	;mov	bx,142
 41978 000074BA BB8E00                  	mov	bx,CHKSUM1_LEN
 41979                                  	;mov	ax,0EF4Eh
 41980 000074BD B84EEF                  	mov	ax,PATCH1_CHKSUM
 41981 000074C0 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41982 000074C3 7208                    	jc	short ep_done1		; Q: did we pass the test
 41983                                  					; N: exit
 41984                                  					; Y: overlay code with new 
 41985 000074C5 BE[2673]                	mov	si,str1
 41986                                  	;mov	cx,102
 41987 000074C8 B96600                  	mov	cx,size_str1
 41988                                  	
 41989 000074CB F3A4                    	rep	movsb
 41990                                  ep_done1:
 41991 000074CD E98400                  	jmp	ep_done
 41992                                  
 41993                                  ep_chkpatch2:
 41994                                  	;mov	di,76h
 41995 000074D0 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41996                                  					; in another version of unpack
 41997 000074D3 E88600                  	call	chk_common_str		; check for match
 41998                                  
 41999 000074D6 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42000                                  					; N: check for patch3_offset
 42001                                  					; Y: check for rest of patch string
 42002                                  
 42003 000074D8 BE[D073]                	mov	si,scan_patch2
 42004                                  					; ds:si -> scan string 
 42005                                  	;mov	di,32h
 42006 000074DB BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 42007                                  					;          file where we hope to find
 42008                                  	;mov	cx,68			;	   scan string. 
 42009 000074DE B94400                  	mov	cx,size_scan_patch2
 42010                                  	;mov	bx,140
 42011 000074E1 BB8C00                  	mov	bx,CHKSUM2_LEN
 42012                                  	;mov	ax,78B2h
 42013 000074E4 B8B278                  	mov	ax,PATCH2_CHKSUM
 42014 000074E7 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 42015                                  
 42016                                  					; M046 - Start
 42017                                  					; Q: did we pass the test
 42018 000074EA 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 42019                                  					; N: try with a different chksum
 42020                                  
 42021 000074EC BE[D073]                	mov	si,scan_patch2
 42022                                  					; ds:si -> scan string 
 42023                                  	;mov	cx,68
 42024 000074EF B94400                  	mov	cx,size_scan_patch2
 42025                                  	;mov	bx,129
 42026 000074F2 BB8100                  	mov	bx,CHKSUM2A_LEN
 42027                                  	;mov	ax,1C47h
 42028 000074F5 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42029 000074F8 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 42030                                  					; Q: did we pass the test
 42031 000074FB 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 42032                                  					; Y: overlay code with new 
 42033                                  						
 42034                                  ep_patchcode2:			       	; M046 - End
 42035 000074FD BE[2673]                	mov	si,str1
 42036                                  	;mov	cx,3
 42037 00007500 B90300                  	mov	cx,first_stop
 42038 00007503 F3A4                    	rep	movsb
 42039 00007505 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42040 00007508 AB                      	stosw
 42041 00007509 83C602                  	add	si,2
 42042                                  	;mov	cx,20
 42043 0000750C B91400                  	mov	cx,second_stop
 42044 0000750F F3A4                    	rep	movsb
 42045 00007511 AB                      	stosw				; put in dec ax and nop
 42046 00007512 83C602                  	add	si,2
 42047                                  	;mov	cx,75
 42048 00007515 B94B00                  	mov	cx,last_stop
 42049 00007518 F3A4                    	rep	movsb
 42050 0000751A EB38                    	jmp	short ep_done
 42051                                  
 42052                                  ep_chkpatch3:
 42053                                  	;mov	di,74h
 42054 0000751C BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42055                                  					; in another version of unpack
 42056 0000751F E83A00                  	call	chk_common_str		; check for match
 42057                                  
 42058 00007522 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 42059                                  					; N: exit
 42060                                  					; Y: check for rest of patch string
 42061 00007524 BE[1474]                	mov	si,scan_patch3
 42062                                  					; ds:si -> scan string 
 42063                                  	;mov	di,32h
 42064 00007527 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 42065                                  					;          file where we hope to find
 42066                                  					;	   scan string. 
 42067                                  	;mov	cx,66
 42068 0000752A B94200                  	mov	cx,size_scan_patch3
 42069                                  	;mov	bx,139
 42070 0000752D BB8B00                  	mov	bx,CHKSUM3_LEN
 42071                                  	;mov	ax,4EDEh
 42072 00007530 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42073 00007533 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42074 00007536 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 42075                                  					; N: exit
 42076                                  					; Y: overlay code with new 
 42077 00007538 BE[2673]                	mov	si,str1
 42078                                  	;mv	cx,3
 42079 0000753B B90300                  	mov	cx,first_stop
 42080 0000753E F3A4                    	rep	movsb
 42081 00007540 B048                    	mov	al,48h			; al = opcode for dec ax
 42082 00007542 AA                      	stosb
 42083 00007543 83C602                  	add	si,2
 42084                                  	;mov	cx,20
 42085 00007546 B91400                  	mov	cx,second_stop
 42086 00007549 F3A4                    	rep	movsb
 42087 0000754B AA                      	stosb				; put in dec ax
 42088 0000754C 83C602                  	add	si,2
 42089                                  	;mov	cx,75
 42090 0000754F B94B00                  	mov	cx,last_stop
 42091 00007552 F3A4                    	rep	movsb
 42092                                  
 42093                                  ep_notpacked:
 42094                                  	;stc
 42095                                  ep_done:
 42096 00007554 5F                      	pop	di
 42097 00007555 5E                      	pop	si
 42098 00007556 59                      	pop	cx
 42099 00007557 58                      	pop	ax
 42100 00007558 07                      	pop	es
 42101 00007559 1F                      	pop	ds
 42102 0000755A 5B                      	pop	bx
 42103 0000755B C3                      	retn
 42104                                  
 42105                                  ;-------------------------------------------------------------------------
 42106                                  ;
 42107                                  ; 	Procedure Name	: chk_common_str
 42108                                  ;
 42109                                  ;	Input		: DS = DOSCODE
 42110                                  ;			; ES:DI points to string in packed file
 42111                                  ;
 42112                                  ;	Output		; Z if match else NZ
 42113                                  ;
 42114                                  ;-------------------------------------------------------------------------
 42115                                  
 42116                                  	; 23/05/2019 - Retro DOS v4.0
 42117                                  chk_common_str:
 42118 0000755C BE[5674]                	mov	si,scan_com
 42119                                  					; ds:si -> scan string 
 42120                                  	;mov	cx,32
 42121 0000755F B92000                  	mov	cx,size_scan_com
 42122                                  
 42123 00007562 F3A6                    	repe	cmpsb	       
 42124                                  
 42125                                  					; M046 - start
 42126                                  	; a fourth possible version of these exepacked programs have a 
 42127                                  	; 056h instead of 06Bh. See scan_com above
 42128                                  	;
 42129                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 42130                                  	;
 42131                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 42132                                  	; we shall try to match the rest of the string
 42133                                  	;
 42134                                  
 42135 00007564 7409                    	jz	short ccs_done
 42136 00007566 26807DFF56              	cmp	byte [es:di-1],56h
 42137 0000756B 7502                    	jnz	short ccs_done
 42138                                  
 42139 0000756D F3A6                    	repe	cmpsb	    
 42140                                  ccs_done:				; M046 - end
 42141 0000756F C3                      	retn
 42142                                  
 42143                                  ;-------------------------------------------------------------------------
 42144                                  ;
 42145                                  ;	Procedure Name	: chk_patchsum
 42146                                  ;
 42147                                  ;	Input		: DS:SI -> string we're looking for
 42148                                  ;			: ES:DI -> offset in packed file
 42149                                  ;			: CX 	= scan length
 42150                                  ;			: BX	= length of check sum
 42151                                  ;			: AX 	= value of check sum
 42152                                  ;
 42153                                  ;	Output		: if patch & check sum compare
 42154                                  ;				NC
 42155                                  ;			  else
 42156                                  ;				CY
 42157                                  ;
 42158                                  ;	Uses		: AX, BX, CX, SI
 42159                                  ;
 42160                                  ;-------------------------------------------------------------------------
 42161                                  
 42162                                  	; 23/05/2019 - Retro DOS v4.0
 42163                                  chk_patchsum:
 42164 00007570 57                      	push	di
 42165                                  
 42166 00007571 F3A6                    	repe	cmpsb			   
 42167                                  
 42168 00007573 7518                    	jnz	short cp_fail		; Q: does the patch match
 42169                                  					; N: exit
 42170                                  					; Y:	
 42171                                  
 42172                                  		; we do a check sum starting from the location of the 
 42173                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42174                                  		; unpacking code.
 42175                                  
 42176 00007575 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42177 0000757A 89D9                    	mov	cx,bx			; cx = length of check sum
 42178                                  
 42179 0000757C 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42180 0000757E 31C0                    	xor	ax,ax
 42181                                  ep_chksum:
 42182 00007580 260305                  	add	ax,[es:di]
 42183 00007583 83C702                  	add	di,2
 42184 00007586 E2F8                    	loop	ep_chksum
 42185                                  
 42186 00007588 5F                      	pop	di			; restore di
 42187                                  
 42188 00007589 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42189                                  	;jne	short cp_fail		; N: exit
 42190                                  					; Y: 
 42191                                  	; 25/09/2023
 42192                                  	;clc	
 42193                                  	;retn
 42194 0000758B 74E2                    	je	short ccs_done ; cf=0
 42195                                  	
 42196                                  cp_fail:
 42197 0000758D F9                      	stc
 42198 0000758E C3                      	retn
 42199                                  
 42200                                  ; 28/12/2022 - Retro DOS v4.1
 42201                                  %if 0
 42202                                  ;--------------------------------------------------------------------------- 
 42203                                  
 42204                                  
 42205                                  ; M020 : BEGIN
 42206                                  ;
 42207                                  ;---------------------------------------------------------------------------
 42208                                  ;
 42209                                  ; procedure : RationalPatch
 42210                                  ;
 42211                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42212                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42213                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42214                                  ;
 42215                                  ; THE BUG is in the following code sequence:
 42216                                  ;
 42217                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42218                                  ;90		even				; word align
 42219                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42220                                  ;e8 xx xx	call	set_A20			; enable A20
 42221                                  ;
 42222                                  ; This patch routine replaces the mov & the loop with a far call into a
 42223                                  ; routine in DOS data segment which is in low memory (because A20 line
 42224                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42225                                  ; a mov & loop.
 42226                                  ;
 42227                                  ; Identification of Buggy Rational EXE
 42228                                  ; ====================================
 42229                                  ;
 42230                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42231                                  ;
 42232                                  ; OFFSET				Contains
 42233                                  ; ------				--------
 42234                                  ; 0000h			100 times Version number in binary
 42235                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42236                                  ;
 42237                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42238                                  ;
 42239                                  ; 002ah			offset where version number is stored in ASCII
 42240                                  ;				e.g. '3.48A'
 42241                                  ;
 42242                                  ; 0030h			offset of copyright string. Copyright strings either
 42243                                  ;			start with "DOS/16M Copyright...." or
 42244                                  ;			"Copyright.....". The string contains
 42245                                  ;			"Rational Systems, Inc."
 42246                                  ;
 42247                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42248                                  ;				from the program image
 42249                                  ; 0016h			word : size of buggy code segment
 42250                                  ;
 42251                                  ;	Buggy code is definite to start after offset 200h in its segment
 42252                                  ;
 42253                                  ;----------------------------------------------------------------------------
 42254                                  
 42255                                  ; 23/05/2019 - Retro DOS v4.0
 42256                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42257                                  
 42258                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42259                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42260                                  
 42261                                  RScanPattern1:
 42262                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42263                                  
 42264                                  RLen1 equ $ - RScanPattern1
 42265                                  
 42266                                  RScanPattern2:
 42267                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42268                                  
 42269                                  RLen2 equ $ - RScanPattern2
 42270                                  
 42271                                  RScanPattern3:
 42272                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42273                                  
 42274                                  RLen3 equ $ - RScanPattern2
 42275                                  
 42276                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42277                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42278                                  
 42279                                  ;----------------------------------------------------------------------------
 42280                                  ;
 42281                                  ; INPUT : ES = segment where program got loaded
 42282                                  ;
 42283                                  ;----------------------------------------------------------------------------
 42284                                  
 42285                                  RationalPatch:
 42286                                  	cld
 42287                                  	push	ax
 42288                                  	push	bx
 42289                                  	push	cx
 42290                                  	push	dx
 42291                                  	push	si
 42292                                  	push	di
 42293                                  	push	es
 42294                                  	push	ds			; we use all of them
 42295                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42296                                  	push	cs
 42297                                  	pop	ds
 42298                                  	
 42299                                  	mov	si,RScanPattern1
 42300                                  	;mov	cx,10
 42301                                  	mov	cx,RLen1
 42302                                  	rep	cmpsb			; do we have the pattern ?
 42303                                  	jne	short rpexit
 42304                                  	mov	ax,[es:0]
 42305                                  	cmp	ax,348			; is it a buggy version ?
 42306                                  	jb	short rpexit
 42307                                  	cmp	ax,383			; is it a buggy version
 42308                                  	ja	short rpexit
 42309                                  
 42310                                  	call	VerifyVersion
 42311                                  	jne	short rpexit
 42312                                  
 42313                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42314                                  	sub	cx,200h			; Length we search (we start
 42315                                  					;  at offset 200h)
 42316                                  	mov	es,[es:20h]		; es=buggy code segment
 42317                                  	mov	si,RScanPattern2
 42318                                  	;mov	dx,8	
 42319                                  	mov	dx,RLen2
 42320                                  	call	ScanCodeSeq		; look for code seq with nop
 42321                                  	jz	short rpfound
 42322                                  
 42323                                  	mov	si,RScanPattern3
 42324                                  	;mov	dx,15
 42325                                  	mov	dx,RLen3
 42326                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42327                                  	jnz	short rpexit
 42328                                  
 42329                                  rpfound:
 42330                                  	
 42331                                  ;	we set up a far call into DOS data
 42332                                  ;	dx has the length of the code seq we were searching for
 42333                                  
 42334                                  	mov	al,9Ah			; far call opcode
 42335                                  	stosb
 42336                                  	mov	ax,RatBugCode
 42337                                  	stosw
 42338                                  	mov	ax,ss
 42339                                  	stosw
 42340                                  	mov	cx,dx
 42341                                  	sub	cx,6			; filler (with NOPs)
 42342                                  	mov	al,90h
 42343                                  	rep	stosb
 42344                                  rpexit:
 42345                                  	pop	ds
 42346                                  	pop	es
 42347                                  	pop	di
 42348                                  	pop	si
 42349                                  	pop	dx
 42350                                  	pop	cx
 42351                                  	pop	bx
 42352                                  	pop	ax
 42353                                  	retn
 42354                                  
 42355                                  ; M020 END
 42356                                  
 42357                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42358                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42359                                  
 42360                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42361                                  
 42362                                  ;----------------------------------------------------------------------------
 42363                                  ;
 42364                                  ; ScanCodeSeq
 42365                                  ;
 42366                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42367                                  ;
 42368                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42369                                  ;
 42370                                  ;----------------------------------------------------------------------------
 42371                                  
 42372                                  ScanCodeSeq:
 42373                                  	; 17/12/2022
 42374                                  	mov	di,200h
 42375                                  ;ScanCodeSeq_di:
 42376                                  	push	cx
 42377                                  	sub	cx,dx
 42378                                  	inc	cx
 42379                                  	; 17/12/2022
 42380                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42381                                  	;mov	di,200h
 42382                                  scsagain:
 42383                                  	push	si
 42384                                  	push	di
 42385                                  	push	cx
 42386                                  	mov	cx,dx
 42387                                  	rep	cmpsb
 42388                                  	pop	cx
 42389                                  	pop	di
 42390                                  	pop	si
 42391                                  	je	short scsfound
 42392                                  	inc	di
 42393                                  	loop	scsagain
 42394                                  scsfound:
 42395                                  	pop	cx
 42396                                  vvexit:		; 18/12/2022
 42397                                  	retn
 42398                                  
 42399                                  
 42400                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42401                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42402                                  
 42403                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42404                                  
 42405                                  ;----------------------------------------------------------------------------
 42406                                  ;
 42407                                  ; VerifyVersion
 42408                                  ;
 42409                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42410                                  ; from ES:2A.
 42411                                  ;
 42412                                  ;       Entry: AX = binary version number 
 42413                                  ;       Exit : Z flag set if version numbers match
 42414                                  ;
 42415                                  ;----------------------------------------------------------------------------
 42416                                  
 42417                                  VerifyVersion:
 42418                                  	mov	si,[es:2Ah]		; offset of version number
 42419                                  					;  in ascii
 42420                                  	mov	bl,10
 42421                                  	add	si,3			; point to last digit
 42422                                  
 42423                                  	call	VVDigit
 42424                                  	jne	short vvexit
 42425                                  	call	VVDigit
 42426                                  	jne	short vvexit
 42427                                  	cmp	byte [es:si],'.' ; 2Eh
 42428                                  	jne	short vvexit
 42429                                  	dec	si
 42430                                  	;call	VVDigit
 42431                                  	; 18/12/2022
 42432                                  	;jmp	short VVDigit
 42433                                  ;vvexit:
 42434                                  	;retn
 42435                                  VVDigit:
 42436                                  	div	bl
 42437                                  	add	ah,'0' ; 30h
 42438                                  	dec	si
 42439                                  	cmp	[es:si+1],ah
 42440                                  	mov	ah,0			; do not xor or sub we need Z
 42441                                  	retn
 42442                                  
 42443                                  ;--------------------------------------------------------------------------- 
 42444                                  %endif	; 28/12/2022
 42445                                  
 42446                                  ;---------------------------------------------------------------------------
 42447                                  ;
 42448                                  ;	M068
 42449                                  ;
 42450                                  ; 	Procedure Name	: IsCopyProt
 42451                                  ;
 42452                                  ;	Inputs		: DS:100 -> start of com file just read in
 42453                                  ;
 42454                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42455                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42456                                  ;			  copy protect scheme that relies on the A20 line
 42457                                  ;			  being turned off for it's scheme to work.
 42458                                  ;
 42459                                  ;			  Note: The int 21 function dispatcher will turn 
 42460                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42461                                  ;				and dec the A20OFF_COUNT before	iretting 
 42462                                  ;				to the user. 
 42463                                  ;
 42464                                  ;	Uses		: ES, DI, SI, CX
 42465                                  ;
 42466                                  ;---------------------------------------------------------------------------
 42467                                  
 42468                                  ; 23/05/2019 - Retro DOS v4.0
 42469                                  
 42470                                  CPStartOffset	EQU	0175h
 42471                                  CPID1Offset	EQU	011Bh
 42472                                  CPID2Offset	EQU	0173h
 42473                                  CPID3Offset	EQU	0146h
 42474                                  CPID4Offset	EQU	0124h
 42475                                  ID1		EQU	05343h
 42476                                  ID2		EQU	05044h
 42477                                  ID3		EQU	0F413h
 42478                                  ID4		EQU	08000h
 42479                                  
 42480                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42481                                  
 42482                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42483                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42484                                  
 42485                                  CPScanPattern:
 42486 0000758F 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42487 00007593 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42488 00007597 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42489 0000759D 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42490 000075A1 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42491 000075A4 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42492                                  
 42493                                  CPSPlen	EQU $ - CPScanPattern
 42494                                  
 42495                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42496                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42497                                  
 42498                                  IsCopyProt:
 42499 000075A7 813E1B014353            	cmp	word [CPID1Offset],ID1
 42500 000075AD 752D                    	jne	short CP_done
 42501                                  
 42502 000075AF 813E73014450            	cmp	word [CPID2Offset],ID2
 42503 000075B5 7525                    	jne	short CP_done
 42504                                  
 42505 000075B7 813E460113F4            	cmp	word [CPID3Offset],ID3
 42506 000075BD 751D                    	jne	short CP_done
 42507                                  
 42508 000075BF 813E24010080            	cmp	word [CPID4Offset],ID4
 42509 000075C5 7515                    	jne	short CP_done
 42510                                  
 42511 000075C7 0E                      	push	cs
 42512 000075C8 07                      	pop	es
 42513 000075C9 BF[8F75]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42514                                  
 42515 000075CC BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42516                                  					; of pattern
 42517                                  
 42518 000075CF B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42519 000075D2 F3A6                    	repe	cmpsb
 42520 000075D4 7506                    	jnz	short CP_done
 42521                                  
 42522 000075D6 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42523                                  CP_done:
 42524 000075DC C3                      	retn
 42525                                  	
 42526                                  ;DOSCODE ENDS
 42527                                  
 42528                                  	;END
 42529                                  
 42530                                  ;----------------------------------------------------------------------------
 42531                                  
 42532                                  ;align 2 ; 05/09/2018 (Error!)
 42533                                  
 42534                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42535                                  ;align 16 ; 08/09/2018 (OK.)
 42536 000075DD 90                      align 2
 42537                                  
 42538                                  ; 06/08/2018 - Retro DOS v3.0
 42539                                  ;============================================================================
 42540                                  ; MSINIT.ASM
 42541                                  ;============================================================================
 42542                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42543                                  ;
 42544                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42545                                  ;
 42546                                  	; 15/07/2018 - Retro DOS v3.0
 42547                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42548                                  
 42549                                  ; temp iret instruction
 42550                                  
 42551                                  
 42552                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42553                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42554                                  
 42555                                  initiret: ; MSDOS 6.0
 42556                                  SYSBUF:
 42557                                  ;IRETT: ; 06/05/2019
 42558 000075DE CF                      	iret
 42559                                  
 42560                                  ; 22/04/2019 - Retro DOS v4.0
 42561                                  
 42562                                  ; pointer to the BIOS data segment that will be available just to the
 42563                                  ; initialization code
 42564                                  
 42565 000075DF 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42566                                  
 42567                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42568                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42569                                  
 42570                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42571                                  
 42572                                  ParaRound:
 42573 000075E1 83C00F                  	add	ax, 15
 42574 000075E4 D1D8                    	rcr	ax, 1
 42575 000075E6 D1E8                    	shr	ax, 1
 42576 000075E8 D1E8                    	shr	ax, 1
 42577 000075EA D1E8                    	shr	ax, 1
 42578 000075EC C3                      	retn
 42579                                  
 42580                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42581                                  
 42582                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42583                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42584                                  	
 42585                                  	; 30/05/2019
 42586                                  	; 22/04/2019 - Retro DOS v4.0
 42587                                  	; 07/07/2018 - Retro DOS v3.0
 42588                                  	; Retro DOS v2.0 - 03/03/2018
 42589                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42590                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42591                                  DOSINIT:
 42592                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42593                                  	;
 42594                                  	; Far call from SYSINIT
 42595                                  	; DX = Memory size in paragraphs
 42596                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42597                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42598                                  	;
 42599                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42600                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42601                                  
 42602 000075ED FA                              CLI
 42603 000075EE FC                              CLD
 42604                                  
 42605                                  	; 03/11/2022
 42606                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42607                                  	
 42608                                  	; 17/12/2022
 42609                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42610                                  	;push	dx ; =*=		; save parameters from BIOS
 42611                                  	
 42612 000075EF 56                      	push	si
 42613 000075F0 1E                      	push	ds
 42614 000075F1 57                      	push	di			;save di (ptr to BiosComBlock)
 42615                                  
 42616 000075F2 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42617                                  
 42618                                  ; First, move the DOS data segment to its final location in low memory
 42619                                  
 42620                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42621                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42622 000075F4 B8[6E7A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42623                                  
 42624                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42625                                  	;and	ax,~15	; 0FFF0h	; boundary
 42626                                  
 42627                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42628                                  					; code segment
 42629                                  
 42630                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42631 000075F7 83C00F                  	add	ax,15			; round to nearest paragraph
 42632 000075FA 83E0F0                  	and	ax,~15			; boundary
 42633                                  
 42634 000075FD 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42635                                  					; code segment
 42636                                  	; 05/12/2022
 42637                                  	; 30/04/2019 - Retro DOS v4.0
 42638                                  	;xor	si,si
 42639                                  	
 42640 000075FF 8CC8                    	mov	ax,cs
 42641 00007601 8ED8                    	mov	ds,ax			; ds = current code segment
 42642                                  					; DS:SI now points to dosdata
 42643                                  
 42644                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42645                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42646                                  					;  BData segment. Cannot use
 42647                                  					;  getdseg macro here!!!
 42648                                  	; 17/12/2022
 42649 00007603 8E06[DF75]              	mov	es,[InitBioDataSeg]
 42650                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42651                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42652                                  
 42653                                  	;mov	es,[es:3]
 42654 00007607 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42655                                  
 42656 0000760C 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42657                                  
 42658                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42659                                  	;mov	cx,4976  ; 25/05/2019
 42660                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42661                                  	;mov	cx,4962
 42662                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42663 0000760E B9A512                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42664 00007611 F3A4                    	rep	movsb			; move data to final location
 42665                                  	
 42666 00007613 5F                      	pop	di			; restore ptr to BiosComBlock
 42667 00007614 1F                      	pop	ds			; restore parms from BIOS
 42668 00007615 5E                      	pop	si
 42669                                  	; 17/12/2022
 42670                                  	;pop	dx ; 30/05/2019	
 42671                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42672                                  	;pop	dx ; =*=		
 42673                                  
 42674 00007616 06                      	push	es
 42675 00007617 1E                      	push	ds
 42676 00007618 07                      	pop	es			; es:si -> device chain
 42677 00007619 1F                      	pop	ds			; ds points to dosdata
 42678                                  
 42679                                  ;SR;
 42680                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42681                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42682                                  ;lie table handling for device drivers. This can be expanded later on to
 42683                                  ;establish a communication block from the BIOS to the DOS.
 42684                                  
 42685                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42686                                  	;mov	[1042h],bx
 42687 0000761A 893E[4010]              	mov	[BiosDataPtr],di
 42688 0000761E 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42689                                  
 42690 00007622 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42691                                  
 42692                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42693                                  
 42694 00007627 2E8C1E[D64F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42695 0000762C 2E8C1E[DA4F]            	mov	[cs:LowInt24Addr+2],ds
 42696 00007631 2E8C1E[DE4F]            	mov	[cs:LowInt28Addr+2],ds
 42697                                  
 42698                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42699                                  	;mov	[584h],sp
 42700                                  	;mov	[586h],ss
 42701 00007636 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42702 0000763A 8926[8405]              	mov	[USER_SP],sp
 42703 0000763E 8C16[8605]              	mov	[USER_SS],ss
 42704                                  
 42705 00007642 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42706 00007644 8ED0                    	mov	ss,ax
 42707                                  
 42708                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42709                                  	;mov	sp,offset dosdata:dskstack
 42710 00007646 BC[2009]                	mov	sp,DSKSTACK
 42711                                  
 42712                                  ;M023
 42713                                  ; Init patch ptrs to default values
 42714                                  
 42715                                  	;mov	word [1212h],RetExePatch
 42716                                  	;mov	word [1214h],RetExePatch
 42717                                  	;mov	word [61h],RetExePatch
 42718 00007649 C706[F311][4861]        	mov	word [FixExePatch],RetExePatch	; M023
 42719                                  	; 28/12/2022 - Retro DOS v4.1
 42720                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42721 0000764F C706[6100][4861]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42722                                  
 42723                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42724                                  %if 0	; 19/09/2023
 42725                                  
 42726                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42727                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42728                                  ; running in the HMA.
 42729                                  
 42730                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42731                                  	cmp	al,2		;   386 or later?
 42732                                  	mov	ax,Rational386Patch
 42733                                  	jae	short di_set_patch
 42734                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42735                                  di_set_patch:
 42736                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42737                                  
 42738                                  %endif
 42739                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42740                                  
 42741 00007655 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42742                                  
 42743                                  	; ax now holds segment of DOS code
 42744 00007657 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42745                                  
 42746 0000765A 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42747 0000765E 8936[4800]              	mov	word [NULDEV],si
 42748                                  ;SR;
 42749                                  ; There are some locations in the Win386 instance data structures
 42750                                  ; which need to be set up with the DOS data segment. First, initialize
 42751                                  ; the segment part of the instance table pointer in the SIS.
 42752                                  
 42753                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42754 00007662 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42755                                  
 42756                                  ; Now initialize the segment part of the pointer to the data in each
 42757                                  ; instance table entry.
 42758                                  
 42759 00007666 56                      	push	si		; preserve pointer to device chain
 42760                                  	; 18/12/2022
 42761                                  	; cx = 0
 42762 00007667 B107                    	mov	cl,7
 42763                                  	;mov	cx,7		; There are 7 entries in the instance table
 42764                                  				; M019
 42765                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42766 00007669 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42767                                  Instance_init_loop:
 42768 0000766C 8C1C                    	mov	[si],ds		; set offset in instance entry
 42769                                  	;add	si,6
 42770 0000766E 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42771 00007671 E2F9                    	loop	Instance_init_loop
 42772                                  
 42773                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42774                                  
 42775                                  	; 18/12/2022
 42776 00007673 B105                    	mov	cl,5
 42777                                  	;mov	cx,5		; There are five entries in the instance table
 42778                                  
 42779                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42780                                  	;mov	si,11EDh	; point si to segment field
 42781 00007675 BE[CE11]                	mov	si,OldInstanceJunk+6
 42782                                  OldInstance_init_loop:
 42783 00007678 8C1C                    	mov	[si],ds		; set offset in instance entry
 42784 0000767A 83C606                  	add	si,6		; move on to next entry
 42785 0000767D E2F9                    	loop	OldInstance_init_loop
 42786 0000767F 5E                      	pop	si		; restore pointer to device chain
 42787                                  
 42788                                  ; End of WIN386 2.xx compatibility bullshit
 42789                                  
 42790                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42791                                  %if 0	
 42792                                     	; 30/04/2019
 42793                                  	;push	es
 42794                                  	;pop	ds
 42795                                  			; ds:si points to console device
 42796                                  
 42797                                  	; 24/04/2019 - Retro DOS v4.0
 42798                                  
 42799                                  	; 15/07/2018
 42800                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42801                                  	; (Set INT 2Ah handler address to an 'IRET')
 42802                                  
 42803                                  	; need crit vector inited to use deviocall
 42804                                  	;push	ds			; preserve segment of device chain
 42805                                  	push	es ; 30/04/2019
 42806                                  
 42807                                  %endif
 42808                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42809 00007680 06                      	push	es
 42810                                  	; 17/12/2022
 42811                                  	;pop	ds
 42812                                  	;push	ds
 42813                                  
 42814 00007681 31C0                    	xor	ax,ax
 42815 00007683 8ED8                    	mov	ds,ax			; point DS to int vector table
 42816 00007685 B8[DE75]                	mov	ax,initiret
 42817                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42818 00007688 A3A800                  	mov	[addr_int_ibm],ax
 42819 0000768B 8CC8                    	mov	ax,cs
 42820                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42821 0000768D A3AA00                  	mov	[addr_int_ibm+2],ax
 42822 00007690 1F                      	pop	ds			; restore segment of device chain
 42823                                  
 42824 00007691 E81C02                  	call	CHARINIT  		; initialize console driver
 42825 00007694 56                      	push	si			; save pointer to header
 42826                                  
 42827 00007695 16                      	push	ss			; move pointer to dos data...
 42828 00007696 07                      	pop	es			; ...into ES
 42829                                  
 42830                                  	;initialize sft for file 0 (CON)
 42831                                  
 42832                                          ; 07/07/2018 - Retro DOS v3.0
 42833                                  	; 24/04/2019 - Retro DOS v4.0
 42834                                  	;mov	di,SFTABL+6 
 42835 00007697 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42836 0000769A B80300                          MOV     AX,3
 42837 0000769D AB                              STOSW           	; Refcount
 42838 0000769E FEC8                            DEC     AL
 42839 000076A0 AB                              STOSW           	; Access rd/wr, compatibility
 42840 000076A1 30C0                            XOR     AL,AL
 42841 000076A3 AA                              STOSB           	; attribute
 42842                                  	;mov	al,0C3h
 42843 000076A4 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42844 000076A6 AB                      	STOSW			; flags
 42845 000076A7 89F0                            mov	ax,si
 42846 000076A9 AB                              stosw			; device pointer in devptr	
 42847 000076AA 8CD8                            mov	ax,ds
 42848 000076AC AB                      	stosw
 42849 000076AD 31C0                    	xor	ax,ax	; 0
 42850 000076AF AB                      	stosw			; firclus
 42851 000076B0 AB                      	stosw			; time
 42852 000076B1 AB                      	stosw			; date
 42853 000076B2 48                      	dec	ax	; -1
 42854 000076B3 AB                      	stosw			; size
 42855 000076B4 AB                      	stosw
 42856 000076B5 40                      	inc	ax	; 0
 42857 000076B6 AB                      	stosw			; position
 42858 000076B7 AB                      	stosw
 42859                                  	;add	di,7
 42860 000076B8 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42861                                  				; point at name
 42862                                  	;add	si,10
 42863 000076BB 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42864                                  				; point to name
 42865 000076BE B90400                  	mov	cx,4
 42866 000076C1 F3A5                    	rep	movsw		; name
 42867 000076C3 B103                    	mov	cl,3
 42868 000076C5 B020                    	mov	al," "
 42869 000076C7 F3AA                    	rep	stosb		; extension
 42870                                  
 42871 000076C9 5E                      	pop	si		; get back pointer to header
 42872                                  
 42873                                  				; mark device as CON I/O
 42874                                  	; 15/07/2018
 42875                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42876 000076CA 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42877                                  	; 12/03/2018
 42878                                  	;mov	[ss:32h],si
 42879 000076CE 368936[3200]            	MOV     [SS:BCON],SI
 42880                                  	;mov	[ss:34h],ds
 42881 000076D3 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42882                                  
 42883                                  	; initialize each device until the clock device is found
 42884                                  
 42885                                  CHAR_INIT_LOOP:
 42886 000076D8 C534                            LDS     SI,[SI]			; AUX device
 42887 000076DA E8D301                  	call	CHARINIT 
 42888                                         	;15/07/2018
 42889                                  	;test	byte [SI+4],8
 42890 000076DD F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42891 000076E1 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42892                                  	; 12/03/2018
 42893                                  	;mov	[ss:2Eh],si
 42894 000076E3 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42895                                  	;mov	[ss:30h],ds
 42896 000076E8 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42897                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42898                                  
 42899                                  	;mov	bp,4970			; bp = pointer to free mem
 42900                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42901                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42902                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42903 000076ED BDA512                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42904                                  
 42905 000076F0 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42906 000076F5 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42907                                  PERDRV:
 42908                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42909 000076FA C534                            LDS	SI,[SI]			; Next device
 42910 000076FC 83FEFF                          CMP	SI,-1	; 0FFFFh
 42911 000076FF 7479                    	JZ	SHORT CONTINIT
 42912                                  
 42913 00007701 E8AC01                          call	CHARINIT
 42914                                  
 42915                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42916                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42917                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42918                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42919                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42920                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42921                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42922                                  
 42923                                          ; 15/07/2018
 42924                                  	;test	word [SI+4],8000h		; DEVTYP
 42925                                          ; 17/12/2022
 42926                                  	;test	byte [SI+5],80h
 42927 00007704 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42928                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42929 00007708 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42930                                  
 42931 0000770A 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42932 0000770F 30ED                    	XOR     CH,CH
 42933                                          ; 07/07/2018
 42934                                  	;MOV	[SI+10],CL		; Number of units in name field
 42935 00007711 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42936 00007714 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42937 00007719 30F6                    	XOR     DH,DH
 42938 0000771B 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42939 00007720 1E                      	PUSH    DS
 42940 00007721 56                              PUSH    SI
 42941 00007722 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42942                                  
 42943                                  PERUNIT:
 42944 00007727 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42945 00007729 43                              INC     BX
 42946 0000772A 43                              INC     BX                      ; On to next BPB
 42947                                  	; 15/12/2022
 42948                                  	; 07/07/2018
 42949                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42950 0000772B 26885600                	MOV     [ES:BP],DL
 42951                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42952                                  	;;mov	[ES:BP+0],DL
 42953                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42954                                  
 42955                                  	;MOV	[ES:BP+1],DH
 42956 0000772F 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42957 00007733 53                              PUSH    BX
 42958 00007734 51                              PUSH    CX
 42959 00007735 52                              PUSH    DX
 42960                                  
 42961                                          ;invoke	$SETDPB
 42962 00007736 E87D98                          CALL	_$SETDPB		; build DPB!
 42963                                  
 42964                                  	; 07/07/2018
 42965                                  	;MOV	AX,[ES:BP+2]
 42966 00007739 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42967                                          ; 12/03/2018
 42968 0000773D 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42969 00007742 7604                    	JBE     SHORT NOTMAX		; N:
 42970 00007744 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42971                                  NOTMAX:					
 42972                                  	; set the next dpb field in the currently built bpb
 42973                                  	; and mark as never accessed
 42974                                          
 42975                                  	; 24/04/2019
 42976 00007748 89E8                    	mov	ax,bp			; get pointer to DPB
 42977                                  	;add	ax,33
 42978 0000774A 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42979                                  					; set seg & offset of next DPB
 42980                                  	;mov	[es:bp+25],ax
 42981 0000774D 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42982                                  	;mov	[es:bp+27],es
 42983 00007751 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42984                                  					; mark as never accessed
 42985                                  	;mov	byte [es:bp+24],0FFh
 42986 00007755 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42987                                  
 42988 0000775A 5A                      	POP     DX
 42989 0000775B 59                              POP     CX
 42990 0000775C 5B                              POP     BX
 42991 0000775D 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42992 0000775F 5E                              POP     SI
 42993 00007760 1F                              POP     DS
 42994                                  					; ds:si -> device header
 42995                                  					; store it in the corresponding dpb
 42996                                  	; 07/07/2018
 42997                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42998 00007761 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42999                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 43000 00007765 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43001                                  
 43002 00007769 1E                              PUSH    DS			; save pointer to device header
 43003 0000776A 56                              PUSH    SI
 43004 0000776B FEC6                            INC     DH			; inc unit #
 43005 0000776D FEC2                            INC     DL			; inc drive #
 43006 0000776F 8ED8                            MOV     DS,AX			; restore segment of BPB array
 43007                                          ;add	bp,33 ; 24/04/2019
 43008 00007771 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 43009 00007774 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 43010                                          
 43011 00007776 5E                      	POP     SI			; restore pointer to device header
 43012 00007777 1F                              POP     DS
 43013 00007778 EB80                    	JMP	PERDRV			; process all drivers in chain
 43014                                  
 43015                                  CONTINIT:
 43016                                  	; 24/04/2019
 43017                                  	;sub	bp,33			; set link in last DPB to -1
 43018 0000777A 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43019                                  					; set last link offset & segment
 43020                                  	;mov	word [bp+25],0FFFFh
 43021 0000777D C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 43022                                  	;mov	word [bp+27],0FFFFh
 43023 00007782 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 43024                                  	;add	bp,33
 43025 00007787 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43026                                  					; the DPB chain is done.  
 43027 0000778A 16                      	push	ss
 43028 0000778B 1F                      	pop	ds
 43029                                  
 43030 0000778C 89E8                    	mov	ax,bp
 43031 0000778E E850FE                  	call	ParaRound		; round up to segment
 43032                                  
 43033 00007791 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43034 00007793 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43035                                  
 43036 00007795 BB0F00                  	mov	bx,0Fh
 43037                                  	
 43038                                  	; 24/05/2019
 43039                                  	;mov	cx,[ENDMEM]
 43040                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43041                                  	; 17/12/2022
 43042                                  	;mov	cx,[ENDMEM] 
 43043                                  					; set seg inpacketto dosdata					
 43044 00007798 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 43045                                  
 43046                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43047                                  ; Also patch in the segment of the pointers in the dosdata area.
 43048                                  ;
 43049                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43050                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43051                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43052                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43053                                  
 43054 0000779C 52                      	push	dx			; preserve first free segment
 43055                                  
 43056 0000779D A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43057 000077A0 8EC0                    	mov	es,ax			; es = segment of DOS
 43058 000077A2 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43059                                  
 43060 000077A8 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43061 000077AB E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43062                                  					; other tables with seg in ES.
 43063                                  	; 17/12/2022
 43064                                  	; cx = 0
 43065 000077AE 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43066                                  
 43067 000077B2 5A                      	pop	dx			; restore first free segment
 43068                                  
 43069                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43070                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43071                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43072                                  ; low_mem_stub by seg_reinit.
 43073                                  
 43074                                  	;xor	ax,ax ; 0
 43075                                  	;mov	ds,ax
 43076                                  	;mov	es,ax
 43077                                  	; 17/12/2022
 43078                                  	; cx = 0
 43079                                  	;xor	cx,cx ; 0
 43080 000077B3 8ED9                    	mov	ds,cx
 43081 000077B5 8EC1                    	mov	es,cx
 43082                                  
 43083                                  	; set the segment of int 24 vector that was 
 43084                                  	; left out by patch_vec_segments above.
 43085                                  
 43086                                  	; 17/12/2022
 43087                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43088                                  ;%if 0
 43089                                  	; 24/05/2019
 43090                                  	;;mov	di,90h
 43091                                  	;;mov	di,4*int_fatal_abort
 43092                                  	;mov	di,addr_int_fatal_abort
 43093 000077B7 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43094                                  
 43095 000077BA 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43096                                  	;mov	[di+2],ax  ; int 24h segment
 43097 000077BE 8905                    	mov	[di],ax ; 24/05/2019
 43098                                  
 43099                                  	;;mov	di,82h
 43100                                  	;mov	di,INTBASE+2
 43101                                  
 43102                                  ;%endif
 43103                                  	; 17/12/2022
 43104                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43105                                  	;;mov	di,90h
 43106                                  	;;mov	di,4*int_fatal_abort
 43107                                  	;mov	di,addr_int_fatal_abort
 43108                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43109                                  	;mov	[di+2],ax  ; int 24h segment
 43110                                  	;;mov	di,82h
 43111                                  	;mov	di,INTBASE+2
 43112                                  
 43113                                  	; set default divide trap offset
 43114                                  
 43115                                  	;mov	word ptr ds:[0],offset doscode:divov
 43116 000077C0 C7060000[B151]          	mov	word [0],DIVOV	
 43117                                  
 43118                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43119                                  
 43120                                  	;mov	di,80h
 43121 000077C6 BF8000                  	mov	di,INTBASE
 43122                                  	;mov	ax,offset doscode:irett
 43123 000077C9 B8[E202]                	mov	ax,IRETT
 43124                                  
 43125                                  	; 17/12/2022
 43126                                  	; cx = 0
 43127 000077CC B109                    	mov	cl,9
 43128                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43129                                  					;   sets offsets for ints 20h-28h
 43130                                  iset1:
 43131 000077CE AB                      	stosw
 43132                                  	;add	di,2
 43133                                  	; 20/09/2023
 43134 000077CF 47                      	inc	di
 43135 000077D0 47                      	inc	di
 43136 000077D1 E2FB                    	loop	iset1
 43137                                  
 43138 000077D3 83C704                  	add	di,4			; skip vector 29h
 43139                                  
 43140                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43141                                  ;					;   sets offsets for ints 2ah-2fh
 43142                                  ;iset2:
 43143                                  ;	stosw
 43144                                  ;	add	di,2
 43145                                  ;	loop	iset2
 43146                                  
 43147                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43148                                  ; patch_vec_segments above. So skip it.
 43149                                  
 43150                                  ;	add	di,8			; skip vector 30h & 31h 
 43151                                  
 43152                                  	;;;
 43153                                  	; 06/05/2019 - Retro DOS v4.0
 43154                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43155                                  	; 17/12/2022
 43156 000077D6 B105                    	mov	cl,5 ; 28/06/2019
 43157                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43158                                  	;mov	cx,6
 43159                                  iset2:
 43160 000077D8 AB                      	stosw
 43161                                  	;add	di,2
 43162                                  	; 20/09/2023
 43163 000077D9 47                      	inc	di
 43164 000077DA 47                      	inc	di
 43165 000077DB E2FB                    	loop	iset2
 43166                                  
 43167                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43168                                  	; 17/12/2022
 43169 000077DD 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43170                                  	;add	di,8
 43171                                  	;;;
 43172                                  
 43173                                  	; 17/12/2022
 43174 000077E0 B10E                    	mov	cl,14
 43175                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43176                                  					;   sets offsets for ints 32h-3fh
 43177                                  iset3:
 43178 000077E2 AB                      	stosw
 43179                                  	;add	di,2
 43180                                  	; 20/09/2023
 43181 000077E3 47                      	inc	di
 43182 000077E4 47                      	inc	di
 43183 000077E5 E2FB                    	loop	iset3
 43184                                  
 43185                                  ;if installed
 43186                                  	; set the offset of int2f handler
 43187                                  	;mov	word [0BCh],INT2F
 43188 000077E7 C706BC00[0307]          	mov	word [02Fh*4],INT2F
 43189                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43190 000077ED 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43191                                  	;mov	[0BEh],ax
 43192 000077F1 A3BE00                  	mov	[(02Fh*4)+2],ax
 43193                                  ;endif
 43194                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43195                                  	; long jump will be patched in by seg_reinit
 43196                                  
 43197                                  	;mov	byte [C0h],0EAh
 43198 000077F4 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43199                                  	;mov	byte [C1h],CALL_ENTRY
 43200 000077F9 C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43201                                  
 43202 000077FF C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43203 00007805 C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43204 0000780B C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43205 00007811 89168A00                	mov	word [addr_int_terminate+2],dx	
 43206 00007815 C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43207 0000781B C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43208 00007821 C7069C00[EB60]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43209                                  
 43210 00007827 16                      	push	ss
 43211 00007828 1F                      	pop	ds
 43212                                  	
 43213                                  	; 24/05/2019
 43214                                  	;push	ss
 43215                                  	;pop	es
 43216                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43217                                  	; 17/12/2022
 43218                                  	;push	ss
 43219                                  	;pop	es
 43220                                  
 43221 00007829 52                      	push	dx			; remember address of arena
 43222                                  
 43223 0000782A 42                      	inc	dx			; leave room for arena header
 43224                                  	;mov	[330h],dx
 43225 0000782B 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43226                                  
 43227 0000782F 31FF                    	xor	di,di			; point es:di at end of memory
 43228 00007831 8EC2                    	mov	es,dx			; ...where psp will be
 43229 00007833 31C0                    	xor	ax,ax
 43230                                  	;mov	cx,80h			; psp is 128 words
 43231                                  	; 17/12/2022
 43232 00007835 B180                    	mov	cl,128 ; 28/06/2019
 43233                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43234                                  	;mov	cx,128
 43235                                  
 43236 00007837 F3AB                    	rep	stosw			; zero out psp area
 43237 00007839 A1[4603]                        mov     ax,[ENDMEM]
 43238                                  	
 43239                                  	; 17/12/2022
 43240                                  	; cx = 0
 43241 0000783C E8C598                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43242                                  
 43243                                  	; ds, es now point to PSP
 43244                                  
 43245 0000783F 16                      	push	ss
 43246 00007840 1F                      	pop	ds
 43247                                  
 43248                                  	;mov	di,24
 43249 00007841 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43250 00007844 31C0                    	xor	ax,ax
 43251 00007846 AB                      	stosw
 43252 00007847 AA                      	stosb				; 0,1 and 2 are con device
 43253 00007848 B0FF                    	mov	al,0FFh
 43254                                  	;mov	cx,FILPERPROC-3 ; 17
 43255                                  	; 17/12/2022
 43256                                  	; cx = 4
 43257 0000784A B111                    	mov	cl,FILPERPROC-3 ; 17
 43258 0000784C F3AA                    	rep	stosb			; rest are unused
 43259                                  
 43260 0000784E 16                      	push	ss
 43261 0000784F 07                      	pop	es
 43262                                  					; must be set to print messages
 43263 00007850 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43264                                  
 43265                                  ; after this point the char device functions for con will work for
 43266                                  ; printing messages
 43267                                  
 43268                                  	; 24/04/2019 - Retro DOS v4.0
 43269                                  
 43270                                  ; 12/05/2019
 43271                                  ;
 43272                                  ;write_version_msg:
 43273                                  ;
 43274                                  ;	;if	(not ibm)
 43275                                  ;	;mov	si,offset doscode:header
 43276                                  ;	mov	si,HEADER
 43277                                  ;outmes:
 43278                                  ;	;lods	cs:byte ptr [si]
 43279                                  ;	cs
 43280                                  ;	lodsb
 43281                                  ;	cmp	al,"$"
 43282                                  ;	je	short outdone
 43283                                  ;	call	OUTT
 43284                                  ;	jmp	short outmes
 43285                                  ;outdone:
 43286                                  ;	push	ss			; out stomps on segments
 43287                                  ;	pop	ds
 43288                                  ;	push	ss
 43289                                  ;	pop	es
 43290                                  ;	;endif
 43291                                  
 43292                                  	; at this point es is dosdata
 43293                                  
 43294                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43295                                  	; in sysinittable (ms_data.asm)
 43296                                  
 43297                                  	;mov	si,0D28h
 43298 00007854 BE[280D]                	mov	si,SysInitTable
 43299                                  
 43300                                  	; 17/12/2022
 43301                                  	; ds = es = ss
 43302                                  
 43303                                  	; 17/12/2022
 43304                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43305                                  ;%if 0
 43306                                  	;;mov	[es:si+6],es
 43307                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43308                                  	;;mov	[es:si+2],es
 43309                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43310                                  	
 43311 00007857 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43312 0000785A 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43313                                  
 43314                                  	; buffhead -> dosdata:hashinitvar 
 43315                                  
 43316                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43317 0000785D 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43318                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43319                                  	;mov	si,6Dh
 43320 00007861 BE[6D00]                	mov	si,HASHINITVAR
 43321                                  	;mov	[es:BUFFHEAD],si
 43322 00007864 8936[3800]              	mov	[BUFFHEAD],si
 43323                                  
 43324 00007868 5A                              pop     dx                      ; restore address of arena
 43325                                  
 43326                                  	;mov	[032Ch+2],dx
 43327 00007869 8916[2E03]                      mov     [DMAADD+2],dx
 43328                                  
 43329                                  	;mov	[es:arena_head],dx
 43330 0000786D 8916[2400]              	mov	[arena_head],dx
 43331                                  
 43332                                  ;%endif
 43333                                  
 43334                                  ; 17/12/2022
 43335                                  %if 0
 43336                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43337                                  	;;;
 43338                                  	;mov	[es:si+6],es
 43339                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43340                                  	;mov	[es:si+2],es
 43341                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43342                                  
 43343                                  	; buffhead -> dosdata:hashinitvar 
 43344                                  
 43345                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43346                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43347                                  	;mov	si,6Dh
 43348                                  	mov	si,HASHINITVAR
 43349                                  	mov	[es:BUFFHEAD],si
 43350                                  
 43351                                          pop     dx                      ; restore address of arena
 43352                                  
 43353                                  	;mov	[032Ch+2],dx
 43354                                          mov     [DMAADD+2],dx
 43355                                  
 43356                                  	mov	[es:arena_head],dx
 43357                                  	;;;
 43358                                  %endif
 43359                                  
 43360 00007871 8EDA                            mov     ds,dx
 43361                                  
 43362                                  	;mov	byte [0],'Z'
 43363 00007873 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43364                                          ;mov	word [1],0
 43365 00007878 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43366                                  
 43367 0000787E 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43368 00007882 29D0                    	sub	ax,dx
 43369 00007884 48                              dec     ax
 43370 00007885 A30300                          mov     [ARENA.SIZE],ax
 43371                                  
 43372                                  	; point to sft 0
 43373                                  
 43374                                  	;mov	di,offset dosdata:sftabl + sftable
 43375                                  	;mov	di,SFTABL+6
 43376 00007888 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43377 0000788B B80300                          mov     ax,3
 43378 0000788E AB                              stosw           		; adjust refcount
 43379                                  
 43380                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43381                                  
 43382                                          ;mov	di,offset dosdata:sysinittable
 43383                                  	;mov	di,0D28h
 43384 0000788F BF[280D]                	mov	di,SysInitTable	
 43385                                  
 43386 00007892 42                      	inc	dx			; advance dx from arena to psp
 43387 00007893 8EDA                    	mov	ds,dx			; point ds to psp
 43388                                  
 43389                                  					; pass the address os seg_reinit 
 43390                                  					; in dx
 43391 00007895 BA[0379]                	mov	dx,seg_reinit
 43392 00007898 B9[2673]                	mov	cx,exepatch_start
 43393 0000789B 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43394                                  
 43395 0000789F B8[DE75]                	mov	ax,SYSBUF
 43396 000078A2 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43397                                  	
 43398 000078A5 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43399 000078AA 368E16[8605]                    mov     ss,[ss:USER_SS]
 43400                                  
 43401 000078AF CB                              retf
 43402                                  
 43403                                  ;
 43404                                  ; END OF DOSINIT
 43405                                  ;
 43406                                  ;--------------------------------------------------------------------------
 43407                                  
 43408                                  CHARINIT:
 43409                                  	; 24/04/2019 - Retro DOS v4.0
 43410                                  	; 07/07/2018 - Retro DOS v3.0
 43411                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43412 000078B0 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43413                                  	;mov	byte [ss:035Bh],0
 43414 000078B6 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43415                                  	;mov	byte [ss:035Ch],0
 43416 000078BC 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43417                                  	;mov	word [ss:035BD],0
 43418 000078C2 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43419 000078C9 06                              PUSH	ES
 43420 000078CA 53                              PUSH	BX
 43421 000078CB 50                              PUSH	AX
 43422 000078CC BB[5A03]                        MOV	BX,DEVCALL
 43423                                          ;PUSH	CS
 43424 000078CF 16                      	PUSH	SS ; 30/04/2019
 43425 000078D0 07                              POP	ES
 43426 000078D1 E8B8CC                          CALL	DEVIOCALL2	
 43427 000078D4 58                      	POP	AX
 43428 000078D5 5B                              POP	BX
 43429 000078D6 07                              POP	ES
 43430 000078D7 C3                              RETN
 43431                                  
 43432                                  ; 25/04/2019 - Retro DOS v4.0
 43433                                  
 43434                                  ;-----------------------------------------------------------------------------
 43435                                  ;
 43436                                  ;	check_XMM: routine to check presence of XMM driver
 43437                                  ;
 43438                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43439                                  ;
 43440                                  ;	USED:	none
 43441                                  ;
 43442                                  ;-----------------------------------------------------------------------------
 43443                                  
 43444                                  check_XMM: ; proc near
 43445                                  ;
 43446                                  ; determine whether or not an XMM driver is installed
 43447                                  ;
 43448 000078D8 50                      	push	ax
 43449                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43450 000078D9 B80043                  	mov	ax,4300h
 43451 000078DC CD2F                    	int	2Fh
 43452                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43453                                  		; Return: AL = 80h XMS driver installed
 43454                                  		; AL <> 80h no driver
 43455 000078DE 3C80                    	cmp	al,80h			; Q: installed
 43456 000078E0 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43457                                  ;
 43458                                  ; get the XMM control functions entry point, save it, we
 43459                                  ; need to call it later.
 43460                                  ;
 43461 000078E2 53                      	push	bx
 43462 000078E3 52                      	push	dx
 43463 000078E4 1E                      	push	ds
 43464 000078E5 06                      	push	es
 43465                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43466 000078E6 B81043                  	mov	ax,4310h
 43467 000078E9 CD2F                    	int	2Fh
 43468                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43469                                  		; Return: ES:BX -> driver entry point
 43470                                  
 43471 000078EB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43472                                  
 43473 000078F0 891E[4911]              	mov	[XMMcontrol],bx
 43474 000078F4 8C06[4B11]              	mov	[XMMcontrol+2],es
 43475                                  cXMMexit:
 43476 000078F8 F8                      	clc
 43477 000078F9 07                      	pop	es
 43478 000078FA 1F                      	pop	ds
 43479 000078FB 5A                      	pop	dx
 43480 000078FC 5B                      	pop	bx
 43481 000078FD 58                      	pop	ax
 43482 000078FE C3                      	retn				; done
 43483                                  ;
 43484                                  ; set carry if XMM driver not present
 43485                                  ;
 43486                                  cXMM_no_driver:
 43487 000078FF F9                      	stc
 43488 00007900 58                      	pop	ax
 43489 00007901 C3                      	retn
 43490                                  
 43491                                  ;-----------------------------------------------------------------------------
 43492                                  ;
 43493                                  ; Procedure Name : seg_reinit
 43494                                  ;
 43495                                  ; Inputs	 : ES has final dos code location
 43496                                  ;		   AX = 0 / 1
 43497                                  ;
 43498                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43499                                  ;		   if AX =0
 43500                                  ;		      if first entry
 43501                                  ;			 patch segment & offset of vectors with stub
 43502                                  ;			 and stub with segment in ES
 43503                                  ;		      else
 43504                                  ;			 patch stub with segment in ES
 43505                                  ;
 43506                                  ;		   else if AX = 1
 43507                                  ;			patch segment of vectors with segment in ES	
 43508                                  ;
 43509                                  ; NOTE		 : This routine can be called at most twice!
 43510                                  ;
 43511                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43512                                  ;-----------------------------------------------------------------------------
 43513                                  
 43514 00007902 00                      num_entry: db	0		; keeps track of the # of times this routine
 43515                                  				; has been called. (0 or 1)
 43516                                  
 43517                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43518                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43519                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43520                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43521                                  
 43522                                  seg_reinit:	; proc	far
 43523 00007903 1E                      	push	ds
 43524                                  
 43525 00007904 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43526                                  
 43527 00007909 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43528                                  					; other tables with seg in ES.
 43529                                  	; 17/12/2022
 43530                                  	; cx = 0
 43531 0000790C 39C8                    	cmp	ax,cx ; 0
 43532                                  	;cmp	ax,0
 43533 0000790E 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43534                                  
 43535                                  	; 17/12/2022
 43536 00007910 2E380E[0279]            	cmp	[cs:num_entry],cl ; 0
 43537                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43538 00007915 7508                    	jne	short second_entry	; N: just patch the stub with 
 43539                                  					;    segment in ES
 43540                                  					; Y: patch the vectors with stub 
 43541 00007917 8CD8                    	mov	ax,ds
 43542 00007919 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43543 0000791C E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43544                                  					; with those in the stub.
 43545                                  	; 17/12/2022
 43546                                  	; cx = 0
 43547                                  second_entry:
 43548 0000791F 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43549                                  
 43550                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43551                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43552 00007921 BF[4810]                	mov	di,DOSINTTABLE
 43553                                  	; 17/12/2022
 43554                                  	; cx = 0
 43555                                  	;mov	cx,9
 43556 00007924 B109                    	mov	cl,9
 43557 00007926 1E                      	push	ds			
 43558 00007927 07                      	pop	es			; es:di -> DOSINTTABLE
 43559                                  
 43560                                  dosinttabloop:
 43561                                  	;add	di,2
 43562                                  	; 19/06/2023
 43563 00007928 47                      	inc	di
 43564 00007929 47                      	inc	di
 43565 0000792A AB                      	stosw
 43566 0000792B E2FB                    	loop	dosinttabloop	
 43567                                  
 43568                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43569                                  ; use the HMA, so we don't want to check CS
 43570                                  
 43571                                  ;ifndef ROMDOS
 43572 0000792D 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43573 00007930 7220                    	jb	short sr_done		; N: done
 43574                                  ;endif
 43575 00007932 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43576 00007935 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43577                                  					; A20 toggling in the stub.
 43578                                  	; 17/12/2022
 43579                                  	; cx = 0
 43580 00007937 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43581                                  ; M021-
 43582                                  	;mov	byte [1211h],1
 43583 0000793A C606[F211]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43584                                  				
 43585                                  					; set pointer to the routine that 
 43586                                  					; patches buggy exepacked code.
 43587                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43588 0000793F C706[F311][7674]        	mov	word [FixExePatch],ExePatch
 43589                                  					; M068: set pointer to the routine 
 43590                                  					; M068: that detects copy protected
 43591                                  					; M068: apps
 43592                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43593 00007945 C706[6100][A775]        	mov	word [ChkCopyProt],IsCopyProt
 43594                                  
 43595                                  	; 19/09/2023
 43596 0000794B EB05                    	jmp	short sr_done
 43597                                  
 43598                                  ; 28/12/2022 - Retro DOS v4.1
 43599                                  %if 0
 43600                                  ;----------------------------------------------------------------------------
 43601                                  
 43602                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43603                                  
 43604                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43605                                  ;
 43606                                  ;; M020 - begin
 43607                                  ;
 43608                                  ;	call	WhatCPUType
 43609                                  ;	cmp	al,1
 43610                                  ;	jne	short sr_done 		; we need Rational Patch only
 43611                                  ;					;  on 286 systems
 43612                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43613                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43614                                  ;
 43615                                  ;; M020 - end
 43616                                  ;
 43617                                  ;	jmp	short sr_done
 43618                                  ;
 43619                                  ;patch_vec_seg:				; patch vectors with segment in es
 43620                                  ;	mov	ax,es
 43621                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43622                                  ;					; NOTE we don't have to patch the 
 43623                                  ;					; offsets as they have been already
 43624                                  ;					; set to the doscode offsets at
 43625                                  ;					; DOSINIT.
 43626                                  ;sr_done:
 43627                                  ;	mov	byte [cs:num_entry],1
 43628                                  ;	pop	ds
 43629                                  ;	retf	; ! far return !
 43630                                  
 43631                                  ;----------------------------------------------------------------------------
 43632                                  ;
 43633                                  ; Procedure Name : WhatCPUType
 43634                                  ;
 43635                                  ; Inputs	 : none
 43636                                  ;
 43637                                  ; Outputs	 : AL = 0 if CPU <  286
 43638                                  ;		      = 1 if CPU == 286
 43639                                  ;		      = 2 if CPU >= 386
 43640                                  ;
 43641                                  ; Regs. Mod.	 : AX
 43642                                  ;
 43643                                  ;----------------------------------------------------------------------------
 43644                                  
 43645                                  WhatCPUType:
 43646                                  	; 25/04/2019 - Retro DOS v4.0
 43647                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43648                                  
 43649                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43650                                  
 43651                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43652                                  ; 	it is called from both CODE and SYSINITSEG.
 43653                                  ;
 43654                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43655                                  ;  Returns: AX = 0 if 8086 or 8088
 43656                                  ;              = 1 if 80286
 43657                                  ;              = 2 if 80386
 43658                                  
 43659                                  	; 04/11/2022
 43660                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43661                                  
 43662                                  Get_CPU_Type:	;macro
 43663                                  	pushf
 43664                                  	push	bx			; preserve bx
 43665                                  	xor	bx,bx			; init bx to zero
 43666                                  
 43667                                  	xor	ax,ax			; 0000 into AX
 43668                                  	push	ax			; put it on the stack...
 43669                                  	popf				; ...then shove it into the flags
 43670                                  	pushf				; get it back out of the flags...
 43671                                  	pop	ax			; ...and into ax
 43672                                  	and	ax,0F000h		; mask off high four bits
 43673                                  	cmp	ax,0F000h		; was it all 1's?
 43674                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43675                                  
 43676                                  	mov	ax,0F000h		; now try to set the high four bits..
 43677                                  	push	ax
 43678                                  	popf
 43679                                  	pushf
 43680                                  	pop	ax			; ...and see what happens
 43681                                  	and	ax,0F000h		; any high bits set ?
 43682                                  	jz	short cpu_286		; nay; it's an 80286
 43683                                  
 43684                                  cpu_386:				; bx starts as zero
 43685                                  	inc	bx			; inc twice if 386
 43686                                  cpu_286:				; just inc once if 286
 43687                                  	inc	bx
 43688                                  cpu_8086:				; don't inc at all if 086
 43689                                  	mov	ax,bx			; put CPU type value in ax
 43690                                  	pop	bx			; restore original bx
 43691                                  	popf
 43692                                  	
 43693                                  	;endm
 43694                                  
 43695                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43696                                  	retn	; 19/09/2023
 43697                                  
 43698                                  ; 19/09/2023
 43699                                  ;	; 04/11/2022
 43700                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43701                                  ;	cmp	al,1
 43702                                  ;	jne	short sr_done 		; we need Rational Patch only
 43703                                  ;					;  on 286 systems
 43704                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43705                                  
 43706                                  ;----------------------------------------------------------------------------
 43707                                  %endif	; 28/12/2022
 43708                                  
 43709                                  	; 19/09/2023
 43710                                  	;jmp	short sr_done
 43711                                  
 43712                                  patch_vec_seg:				; patch vectors with segment in es
 43713 0000794D 8CC0                    	mov	ax,es
 43714 0000794F E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43715                                  					; NOTE we don't have to patch the 
 43716                                  					; offsets as they have been already
 43717                                  					; set to the doscode offsets at
 43718                                  					; DOSINIT.
 43719                                  sr_done:
 43720 00007952 2EC606[0279]01          	mov	byte [cs:num_entry],1
 43721 00007958 1F                      	pop	ds
 43722 00007959 CB                      	retf	; ! far return !
 43723                                  
 43724                                  ;----------------------------------------------------------------------------
 43725                                  ;
 43726                                  ; Procedure Name : patch_vec_segments
 43727                                  ;
 43728                                  ; Inputs	 : ax -> has segment address to patch in
 43729                                  ;		   ds -> DOSDATA
 43730                                  ;
 43731                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43732                                  ;			
 43733                                  ;			0,20-28,3a-3f
 43734                                  ;
 43735                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43736                                  ;
 43737                                  ;----------------------------------------------------------------------------
 43738                                  
 43739                                  patch_vec_segments:
 43740                                  
 43741 0000795A 06                      	push	es
 43742                                  
 43743 0000795B 31C9                    	xor	cx,cx ; 0
 43744 0000795D 8EC1                    	mov	es,cx
 43745                                  
 43746                                  	;mov	di,82h
 43747 0000795F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43748                                  
 43749 00007962 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43750                                  
 43751                                  					; set vectors 20 & 21
 43752                                  	; 04/11/2022
 43753                                  	;mov	cx,2
 43754                                  	; 17/12/2022
 43755                                  	;mov	cl,2
 43756                                  ps_set1:
 43757 00007966 AB                      	stosw	; int 20h segment
 43758                                  	;add	di,2
 43759                                  	; 17/12/2022
 43760 00007967 47                      	inc	di
 43761 00007968 47                      	inc	di
 43762                                  	;loop	ps_set1
 43763                                  
 43764                                  	; 17/12/2022
 43765 00007969 AB                      	stosw	; int 21h segment
 43766                                  	;inc	di
 43767                                  	;inc	di
 43768                                  
 43769                                  	;add	di,4			; skip int 22h vector
 43770 0000796A 83C706                  	add	di,6 ; *
 43771                                  
 43772 0000796D AB                      	stosw				; set int 23h
 43773 0000796E 83C706                  	add	di,6			; skip int 24h
 43774                                  
 43775                                  					; set vectors 25-28 and 2a-3f 
 43776                                  	; 04/11/2022
 43777                                  	;mov	cx,4			; set 4 segments
 43778                                  	; 17/12/2022
 43779 00007971 B104                    	mov	cl,4
 43780                                  ps_set2:
 43781 00007973 AB                      	stosw				
 43782                                  	;add	di,2
 43783                                  	; 17/12/2022
 43784 00007974 47                      	inc	di
 43785 00007975 47                      	inc	di
 43786 00007976 E2FB                    	loop	ps_set2
 43787                                  
 43788 00007978 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43789                                  					;   already be set.
 43790                                  	; 04/11/2022
 43791                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43792                                  	; 17/12/2022
 43793 0000797B B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43794                                  ps_set3:
 43795 0000797D AB                      	stosw
 43796                                  	;add	di,2
 43797                                  	; 17/12/2022
 43798 0000797E 47                      	inc	di
 43799 0000797F 47                      	inc	di
 43800 00007980 E2FB                    	loop	ps_set3
 43801                                  
 43802                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43803                                  ; below. So skip it.
 43804                                  
 43805 00007982 83C708                  	add	di,8			; skip vector 30h & 31h 
 43806                                  	
 43807                                  	; 04/11/2022
 43808                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43809                                  	; 17/12/2022
 43810 00007985 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43811                                  ps_set4:
 43812 00007987 AB                      	stosw
 43813                                  	;add	di,2
 43814                                  	; 17/12/2022
 43815 00007988 47                      	inc	di
 43816 00007989 47                      	inc	di
 43817 0000798A E2FB                    	loop	ps_set4
 43818                                  
 43819                                  ; set offset of int2f
 43820                                  
 43821                                  ;if installed
 43822                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43823                                  ;endif
 43824                                  	;mov	[es:0C3h],ax
 43825 0000798C 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43826                                  	; 17/12/2022
 43827                                  	; cx = 0
 43828 00007990 07                      	pop	es
 43829 00007991 C3                      	retn
 43830                                  
 43831                                  ;---------------------------------------------------------------------------
 43832                                  ;
 43833                                  ; Procedure Name : patch_misc_segments
 43834                                  ;
 43835                                  ; Inputs	 : es = segment to patch in
 43836                                  ;		   ds = dosdata
 43837                                  ;
 43838                                  ; outputs	 : patches in the sharer and other tables in the dos
 43839                                  ;		   with right dos code segment in es
 43840                                  ;
 43841                                  ; Regs Mod	 : DI,SI,CX
 43842                                  ;
 43843                                  ;---------------------------------------------------------------------------
 43844                                  
 43845                                  patch_misc_segments:
 43846                                  
 43847 00007992 53                      	push	bx
 43848 00007993 06                      	push	es
 43849 00007994 50                      	push	ax
 43850                                  
 43851 00007995 8CC0                    	mov	ax,es			; ax - > DOS segment
 43852                                  	
 43853 00007997 1E                      	push	ds
 43854 00007998 07                      	pop	es			; es -> DOSDATA
 43855                                  	
 43856                                  ; initialize the jump table for the sharer...
 43857                                  
 43858                                  	;mov	di,offset dosdata:jshare
 43859                                  	;mov	di,90h
 43860 00007999 BF[9000]                	mov	di,JShare
 43861                                  	;mov	bx,[0AAAh]
 43862 0000799C 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43863                                  					; table was patched during the first
 43864                                  					; call to this routine
 43865 000079A0 B90F00                  	mov	cx,15
 43866                                  jumptabloop:
 43867                                  	;add	di,2			; skip offset
 43868                                  	; 17/12/2022
 43869 000079A3 47                      	inc	di
 43870 000079A4 47                      	inc	di
 43871 000079A5 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43872 000079A8 7405                    	je	short share_patch	; Y: patch in sharer table
 43873                                  					; N: 
 43874 000079AA 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43875 000079AD 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43876                                  share_patch:
 43877 000079AF AB                      	stosw				; drop in segment
 43878                                  no_share_patch:
 43879 000079B0 E2F1                    	loop	jumptabloop
 43880                                  					; BUGBUG patching the country info 
 43881                                  					; with dosdata can be done inline
 43882                                  					; in dosinit.
 43883                                  					; for dos 3.3 country info
 43884                                  					; table address
 43885                                  
 43886                                  	;mov	si,offset dosdata:country_cdpg
 43887                                  	;mov	si,122Ah   
 43888 000079B2 BE[0012]                	mov	si,COUNTRY_CDPG
 43889                                  					; initialize double word
 43890                                  					; pointers with dosdata in ds
 43891                                  	;mov	[si+4Fh],ds
 43892                                  	;mov	[si+54h],ds
 43893                                  	;mov	[si+59h],ds
 43894                                  	;mov	[si+5Eh],ds
 43895                                  	;mov	[si+80h],ds
 43896                                  	;mov	[si+63h],ds
 43897 000079B5 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43898 000079B8 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43899 000079BB 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43900 000079BE 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43901 000079C1 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43902 000079C5 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43903                                  
 43904                                  					; fastopen routines are in doscode
 43905                                  					; so patch with doscode seg in ax
 43906                                  
 43907                                  	;mov	si,offset dosdata:fastopentable
 43908                                  	;mov	si,0D30h
 43909 000079C8 BE[300D]                	mov	si,FastOpenTable
 43910                                  
 43911                                  	; 17/12/2022
 43912                                  	; bx = [TEMP_DOSLOC]
 43913 000079CB 83FBFF                  	cmp	bx,-1
 43914                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43915 000079CE 7405                    	je	short fast_patch	; Y: patch segment
 43916                                  	;mov	cx,[TEMP_DOSLOC]
 43917                                  					; Q: has fastopen patched in it's
 43918                                  					;    segment
 43919                                  	; 17/12/2022
 43920 000079D0 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43921                                  	;;cmp	cx,[si+4]
 43922                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43923 000079D3 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43924                                  
 43925                                  fast_patch:
 43926                                  	;mov	[si+4],ax
 43927 000079D5 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43928                                  no_fast_patch:
 43929                                  	; 17/12/2022
 43930                                  	; cx = 0
 43931 000079D8 58                      	pop	ax
 43932 000079D9 07                      	pop	es
 43933 000079DA 5B                      	pop	bx
 43934                                  
 43935 000079DB C3                      	retn
 43936                                  
 43937                                  ;--------------------------------------------------------------------------
 43938                                  ;
 43939                                  ; Procedure Name : patch_offset
 43940                                  ; 
 43941                                  ; Inputs	 : NONE
 43942                                  ;
 43943                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43944                                  ;		   0,20-28,3a-3f, and 30,31
 43945                                  ;
 43946                                  ;
 43947                                  ; Regs. Mod	 : AX,DI,CX
 43948                                  ;--------------------------------------------------------------------------
 43949                                  
 43950                                  patch_offset:
 43951 000079DC 06                      	push	es		; preserve es
 43952                                  
 43953 000079DD 31C0                    	xor	ax,ax
 43954 000079DF 8EC0                    	mov	es,ax
 43955                                  				; set default divide trap address
 43956                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43957                                  	;mov	word [es:0],108Ah
 43958 000079E1 26C7060000[7010]        	mov	word [es:0],ldivov
 43959                                  
 43960                                  	;mov	di,80h
 43961 000079E8 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43962                                  	;mov	ax,offset dosdata:lirett
 43963                                  	;mov	ax,10DAh
 43964 000079EB B8[C010]                	mov	ax,lirett
 43965                                  				; set vectors 20 & 21 to point to iret.
 43966                                  	; 17/12/2022
 43967                                  	; cx = 0
 43968                                  
 43969                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43970                                  po_iset1:
 43971 000079EE AB                      	stosw	; int 20h offset
 43972                                  	;add	di,2 ; *
 43973                                  	;loop	po_iset1
 43974                                  	; 17/12/2022
 43975 000079EF 47                      	inc	di
 43976 000079F0 47                      	inc	di
 43977 000079F1 AB                      	stosw	; int 21h offset
 43978                                  
 43979                                  	;add	di,4		; skip vector 22h
 43980                                  	; 17/12/2022
 43981 000079F2 83C706                  	add	di,6 ; *	
 43982                                  
 43983 000079F5 AB                      	stosw			; set offset of 23h
 43984                                  	;add	di,6		; skip 24h
 43985                                  	; 19/09/2023
 43986 000079F6 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43987                                  
 43988                                  				; set vectors 25-28 and 2a-3f to iret.
 43989                                  	; 04/11/2022
 43990                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43991                                  	; 19/09/2023
 43992                                  	; 17/12/2022
 43993                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43994                                  po_iset2:
 43995 000079F9 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43996                                  	;add	di,2
 43997                                  	; 19/09/2023
 43998                                  	; 17/12/2022
 43999                                  	;inc	di
 44000                                  	;inc	di
 44001                                  	; 19/09/2023
 44002                                  	;loop	po_iset2
 44003                                  
 44004                                  	;add	di,4		; skip vector 29h
 44005                                  	; 19/09/2023
 44006 000079FA 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44007                                  
 44008                                  	; 04/11/2022
 44009                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44010                                  	; 17/12/2022
 44011                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 44012 000079FD B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44013                                  po_iset3:
 44014 000079FF AB                      	stosw
 44015                                  	;add	di,2
 44016                                  	; 17/12/2022
 44017 00007A00 47                      	inc	di
 44018 00007A01 47                      	inc	di
 44019 00007A02 E2FB                    	loop	po_iset3
 44020                                  
 44021                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44022                                  ; below. So skip it.
 44023                                  
 44024                                  	;add	di,8		; skip vector 30h & 31h 
 44025                                  	; 17/12/2022
 44026 00007A04 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44027                                  
 44028                                  	; 04/11/2022
 44029                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44030                                  				;   sets offsets for ints 32h-3fh
 44031                                  	; 17/12/2022
 44032 00007A07 B10E                    	mov	cl,14 ; 26/06/2019
 44033                                  po_iset4:
 44034 00007A09 AB                      	stosw
 44035                                  	;add	di,2
 44036                                  	; 17/12/2022
 44037 00007A0A 47                      	inc	di
 44038 00007A0B 47                      	inc	di
 44039 00007A0C E2FB                    	loop	po_iset4
 44040                                  
 44041                                  ;if installed
 44042                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44043                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44044 00007A0E 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 44045                                  ;endif
 44046                                  
 44047                                  ; set up entry point call at vectors 30-31h
 44048                                  	;mov	byte [es:0C0h],0EAh
 44049 00007A15 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44050                                  	;mov	word [es:0C1h],10D0h
 44051                                  
 44052 00007A1B 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44053                                  
 44054                                  							; 19/09/2023
 44055                                  	;mov	word [es:80h],1094h
 44056 00007A22 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44057                                  	;mov	word [es:84h],109Eh
 44058 00007A29 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44059                                  	;mov	word [es:94h],10A8h
 44060 00007A30 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44061                                  	;mov	word [es:98h],10B2h
 44062 00007A37 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44063                                  	;mov	word [es:9Ch],10BCh
 44064 00007A3E 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44065                                  
 44066                                  	; 17/12/2022
 44067                                  	; CX = 0
 44068 00007A45 07                      	pop	es		; restore es
 44069 00007A46 C3                      	retn
 44070                                  
 44071                                  ;--------------------------------------------------------------------------
 44072                                  ;
 44073                                  ; 	Procedure Name	:	patch_in_nops
 44074                                  ;
 44075                                  ; 	Entry		: 	ES -> DOSDATA
 44076                                  ;
 44077                                  ;	Regs Mod	: 	cx, di
 44078                                  ;
 44079                                  ;	Description:
 44080                                  ;		This routine patches in 2 nops at the offsets specified in 
 44081                                  ;	patch_table. This basically enables the low mem stub to start 
 44082                                  ;	making XMS calls.
 44083                                  ;
 44084                                  ;--------------------------------------------------------------------------
 44085                                  
 44086                                  	; 04/11/2022
 44087                                  	; (MSDOS 5.0 MSDOS.SYS)
 44088                                  	; DOSCODE:0BC50h
 44089                                  
 44090                                  patch_table:	; label	byte
 44091                                  	;dw	offset dosdata:i0patch
 44092                                  	;dw	offset dosdata:i20patch
 44093                                  	;dw	offset dosdata:i21patch
 44094                                  	;dw	offset dosdata:i25patch
 44095                                  	;dw	offset dosdata:i26patch
 44096                                  	;dw	offset dosdata:i27patch
 44097                                  	;dw	offset dosdata:i2fpatch
 44098                                  	;dw	offset dosdata:cpmpatch
 44099 00007A47 [7010]                  	dw	i0patch
 44100 00007A49 [7A10]                  	dw	i20patch
 44101 00007A4B [8410]                  	dw	i21patch
 44102 00007A4D [8E10]                  	dw	i25patch
 44103 00007A4F [9810]                  	dw	i26patch
 44104 00007A51 [A210]                  	dw	i27patch
 44105 00007A53 [AC10]                  	dw	i2fpatch
 44106 00007A55 [B610]                  	dw	cpmpatch
 44107                                  
 44108                                  patch_table_size equ ($-patch_table)/2
 44109                                  
 44110                                  patch_in_nops:
 44111 00007A57 50                      	push	ax
 44112 00007A58 56                      	push	si
 44113 00007A59 BE[477A]                	mov	si,patch_table
 44114 00007A5C B89090                  	mov	ax,9090h ; nop, nop
 44115                                  	; 17/12/2022
 44116                                  	; cx = 0
 44117                                  	;mov	cx,8
 44118                                  	;mov	cx,patch_table_size ; 8
 44119 00007A5F B108                    	mov	cl,patch_table_size ; 8
 44120                                  pin_loop:
 44121 00007A61 2E8B3C                  	mov	di,[cs:si]
 44122 00007A64 AB                      	stosw
 44123                                  	;add	si,2
 44124                                  	; 17/12/2022
 44125 00007A65 46                      	inc	si
 44126 00007A66 46                      	inc	si
 44127 00007A67 E2F8                    	loop	pin_loop
 44128 00007A69 5E                      	pop	si
 44129 00007A6A 58                      	pop	ax
 44130 00007A6B C3                      	retn
 44131                                  
 44132                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44133                                  ; ---------------------------------------------------------------------------
 44134                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44135                                  ; ---------------------------------------------------------------------------
 44136                                  
 44137                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 44138                                  DOSCODE_END:
 44139                                  	;times	9 db 0	; db 9 dup(0)
 44140                                  	; 18/12/2022
 44141 00007A6C 0000                    	dw	0  ;	times 2 db 0
 44142                                  
 44143                                  ;align 16
 44144                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44145                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44146                                  
 44147                                  ; ---------------------------------------------------------------------------
 44148                                  
 44149                                  
 44150                                  ;memstrt label word
 44151                                  ; ---------------------------------------------------------------------------
 44152                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44153                                  ; ---------------------------------------------------------------------------
 44154                                  
 44155                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44156                                  
 44157                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44158                                  ; the dos initialization segment
 44159                                  
 44160                                  ;ifndef ROMDOS
 44161                                  
 44162                                  ;doscode ends
 44163                                  
 44164                                  ;else
 44165                                  
 44166                                  ;;dosinitseg ends
 44167                                  
 44168                                  ;endif ; ROMDOS
 44169                                  
 44170                                  ;============================================================================
 44171                                  
 44172                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44173                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44174                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44175                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44176                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44177                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44178                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44179                                  
 44180                                  ;; burasý doscode sonu
 44181                                  
 44182                                  ;============================================================================
 44183                                  ; DOSDATA
 44184                                  ;============================================================================
 44185                                  ; 29/04/2019 - Retro DOS 4.0
 44186                                  
 44187                                  ;[BITS 16]
 44188                                  
 44189                                  ;[ORG 0]
 44190                                  
 44191                                  ; 25/04/2019 - Retro DOS v4.0
 44192                                  
 44193                                  ;============================================================================
 44194                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44195                                  ;============================================================================
 44196                                  
 44197                                  ;align 16
 44198                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44199                                  	; (4970 bytes for MSDOS 6.21)
 44200                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44201                                  
 44202                                  ;============================================================================
 44203                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44204                                  ;============================================================================
 44205                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44206                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44207                                  ; 16/07/2018 - Retro DOS 3.0	
 44208                                  
 44209                                  ;Break <Initialized data and data used at DOS initialization>
 44210                                  ;----------------------------------------------------------------------------
 44211                                  
 44212                                  ; We need to identify the parts of the data area that are relevant to tasks
 44213                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44214                                  ; data will be gathered with the system code. The process data under 2.x will
 44215                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44216                                  ;
 44217                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44218                                  ; describing that data item.
 44219                                  
 44220                                  ;DOSDATA SEGMENT
 44221                                  
 44222                                  ; 04/11/2022
 44223                                  ;[ORG 0]
 44224                                  
 44225                                  ; ----------------------------------------------------------------------------
 44226                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44227                                  ; ----------------------------------------------------------------------------
 44228                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44229                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44230                                  ; ----------------------------------------------------------------------------
 44231                                  
 44232                                  ; 04/11/2022
 44233                                  
 44234                                  ;DOSDATA:0000h
 44235                                  
 44236 00007A6E 90<rep 2h>              align 16
 44237                                  
 44238                                  ; ----------------------------------------------------------------------------
 44239                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44240                                  ; ----------------------------------------------------------------------------
 44241                                  
 44242                                  segment .data  vstart=0 ; 06/12/2022
 44243                                  								
 44244                                  ; ============================================================================
 44245                                  
 44246                                  ; 06/12/2022
 44247                                  ;DOSDATASTART equ $
 44248                                  DOSDATASTART:
 44249                                  
 44250                                  
 44251                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44252                                  
 44253                                  	;; 03/11/2022
 44254                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44255                                  
 44256                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44257                                  	;db	4 dup (?)	
 44258 00000000 00<rep 4h>              	times	4 db 0
 44259                                  
 44260                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44261                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44262                                  	;dw	0
 44263                                  
 44264                                  	;EVEN
 44265                                  
 44266                                  ;align 2
 44267                                  
 44268                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44269                                  ; area compatability. This location must be incremented EACH TIME the data
 44270                                  ; area here gets mucked with.
 44271                                  ;
 44272                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44273                                  
 44274                                  MSCT001S:	; LABEL BYTE
 44275                                  	
 44276                                  DataVersion:	
 44277 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44278                                  
 44279                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44280                                  ;hkn; been removed to DOSCODE above
 44281                                  
 44282                                  ;M044
 44283                                  ; First part of save area for saving last para of Window memory
 44284                                  
 44285                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44286 00000006 00<rep 8h>              	times	8 db 0
 44287                                  
 44288                                  	; MSDOS 6.21 DOSDATA:000Eh
 44289                                  MYNUM:			; Offset 000Eh
 44290 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44291                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44292 00000010 0000                    	dw	0
 44293                                  OpenLRU:
 44294 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44295                                  OEM_HANDLER: 		
 44296 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44297                                  
 44298                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44299                                  ;;			way that we leave DOS???? - jgl
 44300                                  
 44301                                  LeaveAddr:
 44302 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44303                                  RetryCount:		
 44304 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44305                                  RetryLoop:
 44306 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44307                                  LastBuffer:
 44308 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44309                                  CONTPOS:
 44310 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44311                                  arena_head:
 44312 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44313                                  
 44314                                  ;; 16/07/2018
 44315                                  ;;***************************************************************************
 44316                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44317                                  ;;***************************************************************************
 44318                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44319                                  ;;
 44320                                  ;;	AH = 52h
 44321                                  ;;
 44322                                  ;;	on return:
 44323                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44324                                  ;;		Known "invars" fields follow (varies with DOS version):
 44325                                  ;;
 44326                                  ;;	Offset Size		 Description
 44327                                  ;;
 44328                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44329                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44330                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44331                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44332                                  ;;		      0 indicates no unread input (DOS 3.x)
 44333                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44334                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44335                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44336                                  ;;	  08   dword  pointer to $CLOCK device driver
 44337                                  ;;	  0C   dword  pointer to CON device driver
 44338                                  ;;	  10   byte   number of logical drives in system
 44339                                  ;;	  11   word   maximum bytes/block of any block device
 44340                                  ;;	  13   dword  pointer to DOS cache buffer header
 44341                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44342                                  ;;		      point to the next device in device chain
 44343                                  ;;
 44344                                  ;;***************************************************************************
 44345                                  
 44346                                  ; The following block of data is used by SYSINIT. 
 44347                                  ; Do not change the order or size of this block
 44348                                  
 44349                                  ;SYSINITVAR:
 44350                                  ;----------------------------------------------------------------------------
 44351                                  SYSINITVARS:
 44352                                  DPBHEAD:
 44353 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44354                                  SFT_ADDR:
 44355 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44356                                  BCLOCK:
 44357 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44358                                  BCON:
 44359 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44360                                  MAXSEC:
 44361 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44362                                  BUFFHEAD:
 44363 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44364                                  CDSADDR:
 44365 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44366                                  SFTFCB:
 44367 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44368                                  KEEPCOUNT:
 44369 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44370                                  NUMIO:
 44371 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44372                                  CDSCOUNT:
 44373 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44374                                  
 44375                                  ; A fake header for the NUL device
 44376                                  NULDEV:
 44377 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44378                                  	;dw	8004h
 44379 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44380 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44381 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44382 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44383                                  SPLICES:
 44384 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44385                                  
 44386                                  Special_Entries:
 44387 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44388                                  UU_IFS_DOS_CALL:
 44389 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44390                                  ; 
 44391                                  ; UU_IFS_HEADER:
 44392                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44393                                  
 44394                                  ChkCopyProt:
 44395 00000061 0000                    	dw	0	; M068
 44396                                  A20OFF_PSP:
 44397 00000063 0000                    	dw	0	; M068
 44398                                  BUFFERS_PARM1:
 44399 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44400                                  BUFFERS_PARM2:
 44401 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44402                                  BOOTDRIVE:
 44403 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44404                                  DDMOVE:
 44405 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44406                                  EXT_MEM_SIZE:
 44407 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44408                                  
 44409                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44410                                  ;
 44411                                  ; Replaced by next two declarations
 44412                                  ;
 44413                                  ;UU_BUF_HASH_PTR:
 44414                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44415                                  ;UU_BUF_HASH_COUNT:
 44416                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44417                                  
 44418                                  BufferQueue:
 44419 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44420                                  DirtyBufferCount:
 44421 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44422                                  			; BUGBUG ---- change to byte
 44423                                  SC_CACHE_PTR:
 44424 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44425                                  SC_CACHE_COUNT:
 44426 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44427                                  BuffInHMA:
 44428 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44429                                  LoMemBuff:
 44430 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44431                                  			;  in Low mem when buffs are in HMA
 44432                                  ;
 44433                                  ; All variables which have UU_ as prefix can be reused for other
 44434                                  ; purposes and can be renamed. All these variables were used for
 44435                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44436                                  ; manager ---- MOHANS
 44437                                  ;
 44438                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44439                                  UU_BUF_EMS_FIRST_PAGE:	
 44440 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44441                                  
 44442                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44443                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44444                                  ;	dw	0			
 44445                                  
 44446                                  CL0FATENTRY:
 44447 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44448                                  			; is used in pack/unpack rts.
 44449                                  			; in fat.asm if cluster 0 is specified.
 44450                                  			; SR;
 44451                                  IoStatFail:
 44452 00000083 00                      	db	0	; IoStatFail has been added to 
 44453                                  			; record a fail on an I24 
 44454                                  			; issued from IOFUNC on a status call. 
 44455                                  
 44456                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44457                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44458                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44459                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44460                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44461                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44462                                  ;
 44463                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44464                                  						; state of the 	buffers page.
 44465                                  						; This one byte is retained to 
 44466                                  						; keep the size of this data 
 44467                                  						; block the same.;
 44468                                  ALLOCMSAVE:
 44469 00000084 00                      	db	0	; M063: temp var. used to 
 44470                                  			; M063: save alloc method in
 44471                                  			; M063: msproc.asm
 44472                                  A20OFF_COUNT:
 44473 00000085 00                      	db	0	; M068: indiactes the # of 
 44474                                  			; M068: int 21 calls for 
 44475                                  			; M068: which A20 is off
 44476                                  DOS_FLAG:
 44477 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44478                                  			; definitions
 44479                                  UNPACK_OFFSET:
 44480 00000087 0000                    	dw	0	; saves pointer to the start
 44481                                  			; of unpack code in exepatch.
 44482                                  			; asm.
 44483                                  UMBFLAG:
 44484 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44485                                  			; M003: link state of the UMBs
 44486                                  			; M003: whether linked or not 
 44487                                  			; M003: to the DOS arena chain
 44488                                  SAVE_AX:
 44489 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44490                                  			; M000: in msproc.asm
 44491                                  UMB_HEAD:
 44492 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44493                                  			; M000: the first umb arena by 
 44494                                  			; M000: BIOS sysinit.
 44495                                  START_ARENA:
 44496 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44497                                  			; M000: from which DOS will 
 44498                                  			; M000: start its scan for alloc.
 44499                                  
 44500                                  ; End of SYSINITVar block
 44501                                  ;----------------------------------------------------------------------------
 44502                                  
 44503                                  ; 25/04/2019 - Retro DOS v4.0
 44504                                  
 44505                                  ; 16/07/2018
 44506                                  ; MSDOS 3.3 (& MDOS 6.0)
 44507                                  
 44508                                  ;
 44509                                  ; Sharer jump table
 44510                                  ;
 44511                                  
 44512                                  ;PUBLIC	JShare
 44513                                  	;EVEN
 44514                                  
 44515                                  ;JShare	LABEL	DWORD
 44516                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44517                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44518                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44519                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44520                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44521                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44522                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44523                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44524                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44525                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44526                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44527                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44528                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44529                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44530                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44531                                  
 44532                                  align 2
 44533                                  
 44534                                  JShare:
 44535 00000090 [FD06]0000              		DW	BadCall,0
 44536 00000094 [0107]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44537 00000098 [0107]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44538 0000009C [FD06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44539 000000A0 [FD06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44540 000000A4 [FD06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44541 000000A8 [FD06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44542 000000AC [FD06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44543 000000B0 [0107]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44544 000000B4 [FD06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44545 000000B8 [FD06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44546 000000BC [FD06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44547 000000C0 [0107]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44548 000000C4 [FD06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44549 000000C8 [FD06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44550                                  
 44551                                  
 44552                                  ;============================================================================
 44553                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44554                                  ;============================================================================
 44555                                  ; 25/04/2019 - Retro DOS 4.0 
 44556                                  ; 16/07/2018 - Retro DOS 3.0	
 44557                                  
 44558                                  ;Break <Initialized data and data used at DOS initialization>
 44559                                  ;----------------------------------------------------------------------------
 44560                                  
 44561                                  ; We need to identify the parts of the data area that are relevant to tasks
 44562                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44563                                  ; data will be gathered with the system code.  The process data under 2.x will
 44564                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44565                                  ;
 44566                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44567                                  ; describing that data item.
 44568                                  
 44569                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44570                                  
 44571                                  ;
 44572                                  ; Table of routines for assignable devices
 44573                                  ;
 44574                                  ; MSDOS allows assignment if the following standard devices:
 44575                                  ;   stdin  (usually CON input)
 44576                                  ;   stdout (usually CON output)
 44577                                  ;   auxin  (usually AUX input)
 44578                                  ;   auxout (usually AUX output)
 44579                                  ;   stdlpt (usually PRN output)
 44580                                  ;
 44581                                  ; SPECIAL NOTE:
 44582                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44583                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44584                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44585                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44586                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44587                                  ;   as EOF).
 44588                                  
 44589                                  ; Default SFTs for boot up
 44590                                  
 44591                                  		;PUBLIC	SFTABL
 44592                                  
 44593                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44594 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44595 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44596 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44597                                  		;times 295 db 0 ; MSDOS 6.0
 44598 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44599                                  
 44600                                  ; the next two variables relate to the position of the logical stdout/stdin
 44601                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44602                                  ; console.
 44603                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44604 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44605 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44606                                  					;	   of buffered input call
 44607 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44608 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44609                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44610 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44611 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44612 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44613                                  switch_character:
 44614 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44615 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44616 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44617 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44618 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44619                                  
 44620                                  ; The following table is a list of addresses that the sharer patches to be
 44621                                  ; PUSH AX to enable the critical sections
 44622                                  
 44623                                  		; DOSDATA:0315h (MSDOS 6.21)
 44624                                  
 44625                                  ;PUBLIC	CritPatch
 44626                                  
 44627                                  CritPatch:	; LABEL WORD
 44628                                  
 44629                                  ;IRP sect,<critDisk,critDevice>
 44630                                  
 44631                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44632                                  ;
 44633                                  ;SR; Change code patch address to a variable in data segment
 44634                                  ;
 44635                                  ;       dw OFFSET DOSDATA: redir_patch
 44636                                  ;       dw OFFSET DOSDATA: redir_patch
 44637                                  ;
 44638                                  ;;hkn	Short_Addr  E&sect
 44639                                  ;;hkn	Short_Addr  L&sect
 44640                                  ;
 44641                                  ;ELSE
 44642                                  ;	DW	0
 44643                                  ;	DW	0
 44644                                  ;ENDIF
 44645                                  ;ENDM
 44646                                  ;	DW	0
 44647                                  
 44648                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44649                                   
 44650 00000315 [0C0D]                  	dw 	redir_patch
 44651 00000317 [0C0D]                  	dw 	redir_patch			
 44652 00000319 [0C0D]                  	dw	redir_patch
 44653 0000031B [0C0D]                  	dw 	redir_patch
 44654                                  
 44655 0000031D 0000                    	dw	0
 44656                                  
 44657                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44658                                  ; Also, IBM server 1.0 requires this also.
 44659                                  
 44660                                  	;EVEN			; Force swap area to start on word boundry
 44661 0000031F 90                      align 2
 44662                                  	;PUBLIC	SWAP_START
 44663                                  SWAP_START:	; LABEL BYTE
 44664 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44665 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44666 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44667 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44668 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44669                                  
 44670                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44671 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44672 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44673                                  ; end warning
 44674                                   
 44675 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44676                                  
 44677 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44678 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44679 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44680 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44681 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44682 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44683                                  ;				; F.C. 2/17/86
 44684 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44685 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44686                                  ;align 2
 44687                                  SWAP_ALWAYS:	; 05/08/2018
 44688 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44689                                  				;   extended error type stuff.
 44690                                  				;   NOTE: does not have Correct value on
 44691                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44692                                  				;   GetExtendedError system calls)
 44693 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44694 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44695 00000340 0000                    FirstArena:	dw 0		; first free block found
 44696 00000342 0000                    BestArena:	dw 0		; best free block found
 44697 00000344 0000                    LastArena:	dw 0		; last free block found
 44698 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44699 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44700 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44701 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44702 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44703 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44704 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44705                                  
 44706                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44707                                  	;EVEN
 44708 0000034F 90                      align 2
 44709                                  		; DOSDATA:0350h (MSDOS 6.21)
 44710 00000350 00                      DAY:		db 0		; Day of month
 44711 00000351 00                      MONTH:		db 0		; Month of year
 44712 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44713 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44714 00000356 00                      WEEKDAY:	db 0		; Day of week
 44715                                  ; end warning
 44716                                  
 44717 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44718 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44719 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44720                                  
 44721                                  ; Combination of all device call parameters
 44722                                  	;PUBLIC	DEVCALL 	;
 44723                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44724                                  DEVCALL: ; 08/08/2018
 44725 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44726 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44727 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44728 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44729 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44730                                  
 44731                                  	;PUBLIC	CALLUNIT
 44732                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44733                                  CALLFLSH: ; LABEL   WORD	;
 44734 00000367 00                      CALLMED:	db 0		; media byte
 44735                                  CALLBR:	  ; LABEL   DWORD	;
 44736                                  	;PUBLIC	CALLXAD 	;
 44737                                  CALLXAD:  ; LABEL   DWORD	;
 44738 00000368 00                      CALLRBYT:	db 0		;
 44739                                  	;PUBLIC	CALLVIDM	;
 44740                                  CALLVIDM: ; LABEL   DWORD	;
 44741 00000369 00<rep 3h>              	times 3 db 0	;
 44742                                  	;PUBLIC CallBPB		;
 44743                                  CALLBPB:  ; LABEL   DWORD	;
 44744                                  CALLSCNT:			;
 44745 0000036C 0000                    		dw 0		;
 44746                                  	;PUBLIC	CALLSSEC	;
 44747                                  CALLSSEC: ; LABEL   WORD	;
 44748 0000036E 0000                    		dw 0		;
 44749 00000370 00000000                CALLVIDRW:	dd 0		;
 44750                                  ;MSDOS 6.0
 44751 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44752 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44753                                  
 44754                                  ; Same as above for I/O calls	;
 44755                                  				;
 44756                                  	;PUBLIC	IOCall		;
 44757                                  ;IOCALL	SRHEAD	<>		;
 44758                                  IOCALL:	; 07/08/2018
 44759 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44760 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44761 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44762 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44763 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44764                                  IOFLSH:	  ; LABEL   WORD	;
 44765                                          ;PUBLIC  IORCHR		;
 44766                                  IORCHR:	  ; LABEL   BYTE	;
 44767 00000389 00                      IOMED:		db 0		;
 44768 0000038A 00000000                IOXAD:		dd 0		;
 44769 0000038E 0000                    IOSCNT:		dw 0		;	
 44770 00000390 0000                    IOSSEC:		dw 0		;
 44771                                  
 44772                                  ; Call struct for DSKSTATCHK	;
 44773 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44774 00000393 00                      		db 0
 44775 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44776 00000395 0000                    DSKSTST:	dw 0		;
 44777 00000397 00<rep 8h>              	times 8	db 0		;
 44778 0000039F 00                      DSKCHRET:	db 0		;
 44779                                  
 44780                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44781                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44782                                  ;hkn   short_addr  DEVIOBUF	;
 44783                                  	
 44784 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44785 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44786 000003A4 0100                    DSKSTCNT:	dw 1		;
 44787 000003A6 0000                    		dw 0		;
 44788                                  
 44789 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44790                                  
 44791                                  ;MSDOS 6.0
 44792                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44793 000003A9 00000000                		dd 0		;MS. position
 44794 000003AD 00000000                		dd 0		;MS. length
 44795                                  
 44796                                  ;hkn; the foll. was moved from dosmes.asm.
 44797                                  
 44798                                  	;EVEN
 44799 000003B1 90                      align 2				; needed to maintain offsets
 44800                                  
 44801                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44802                                  USERNUM:
 44803 000003B2 0000                     		dw 0		; 24 bit user number
 44804 000003B4 00                      		db 0
 44805                                  ;IF IBM
 44806                                  ;IF IBMCOPYRIGHT
 44807                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44808                                  ;ELSE
 44809                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44810                                  ;ENDIF
 44811                                  ;ELSE
 44812 000003B5 FF                      OEMNUM:		DB 0FFh
 44813                                  ;ENDIF
 44814                                  
 44815                                  ;============================================================================
 44816                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44817                                  ;============================================================================
 44818                                  ; 25/04/2019 - Retro DOS 4.0
 44819                                  
 44820                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44821                                  ; ----------------------------------------------------------
 44822                                  ; This data section which was named as uninitialized data
 44823                                  ; (as overlayed by initialization code) but follows 
 44824                                  ; initialized data section from DOSDATA:03B6h address
 44825                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44826                                  ; and there is not overlaying..)
 44827                                  ; **********************************************************
 44828                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44829                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44830                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44831                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44832                                  ; TIMEBUF is at offset 03B6h.
 44833                                  ; **********************************************************	
 44834                                  
 44835                                  ;Break <Uninitialized data overlayed by initialization code>
 44836                                  ;----------------------------------------------------------------------------
 44837                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44838                                  ; Init code overlaps with data area below
 44839                                  
 44840                                  ; 	ORG     0
 44841                                  
 44842                                  MSDAT001S:	; label byte
 44843                                  
 44844                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44845                                  TIMEBUF: ;	times 6 db 0
 44846 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44847 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44848                                  
 44849                                  ; The following areas are used as temp buffer in EXEC system call
 44850                                  
 44851                                  ; DOSDATA:03BEh
 44852                                  OPENBUF: ;times 64  dw	0
 44853 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44854                                  RENBUF:	
 44855 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44856                                  
 44857                                  ; Buffer for search calls
 44858                                  SEARCHBUF:	
 44859 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44860                                  DUMMYCDS:  ;times 88 db 0
 44861 000004F3 00<rep 58h>             	times	curdirLen db 0
 44862                                  
 44863                                  ; End of contiguous buffer
 44864                                   
 44865                                  ; Temporary directory entry for use by many routines. Device directory
 44866                                  ; entries (bogus) are built here.
 44867                                  
 44868                                  ; DOSDATA:054Bh
 44869                                  
 44870                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44871                                  
 44872                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44873                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44874                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44875                                  
 44876                                  NAME1:	
 44877 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44878                                  NAME2:
 44879 00000557 00<rep Dh>              	times	13 db	0 		;
 44880                                  DESTSTART:
 44881 00000564 0000                    	dw	0			;
 44882                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44883                                  	;times	5  db	0
 44884 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44885                                  
 44886                                  ; End Temporary directory entry.
 44887                                  
 44888 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44889                                  EXTFCB:	
 44890 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44891                                  SATTRIB:
 44892 0000056D 00                      	db	0		; Storage for search attributes
 44893                                  OPEN_ACCESS:
 44894 0000056E 00                      	db	0		; access of open system call
 44895                                  FOUNDDEL:
 44896 0000056F 00                      	db	0		; true => file was deleted
 44897                                  FOUND_DEV:
 44898 00000570 00                      	db	0		; true => search found a device
 44899                                  FSPLICE:
 44900 00000571 00                      	db	0		; true => do a splice in transpath
 44901                                  FSHARING:
 44902 00000572 00                      	db	0		; TRUE => no redirection
 44903                                  SECCLUSPOS:
 44904 00000573 00                      	db	0		; Position of first sector within cluster
 44905 00000574 00                      TRANS:	db	0		;
 44906 00000575 00                      READOP:	db	0		;
 44907                                  THISDRV:
 44908 00000576 00                      	db	0		;
 44909                                  CLUSFAC:
 44910 00000577 00                      	db	0		;
 44911                                  CLUSSPLIT:
 44912 00000578 00                      	db	0		;
 44913                                  INSMODE:
 44914 00000579 00                      	db	0		; true => insert mode in buffered read
 44915 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44916 0000057B 00                      VOLID:	db	0		;
 44917                                  EXIT_TYPE:
 44918 0000057C 00                      	db	0		; type of exit...
 44919                                   
 44920                                  	;EVEN
 44921                                  
 44922 0000057D 90                      align 2
 44923                                  
 44924                                  ; DOSDATA:057Eh
 44925                                  
 44926                                  ; WARNING - the following two items are accessed as a word
 44927                                  
 44928                                  CREATING:
 44929 0000057E 00                      	db	0		; true => creating a file
 44930 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44931                                  				; = DIRFREE iff BUGBUG
 44932                                  EXITHOLD:
 44933 00000580 00000000                	dd	0		; Temp location for proc terminate
 44934                                  USER_SP:
 44935 00000584 0000                    	dw	0		; User SP for system call
 44936                                  USER_SS:
 44937 00000586 0000                    	dw	0		; User SS for system call
 44938                                  CONTSTK:
 44939 00000588 0000                    	dw	0		;
 44940                                  THISDPB:
 44941 0000058A 00000000                	dd	0		;
 44942                                  CLUSSAVE:
 44943 0000058E 0000                    	dw	0		;
 44944                                  CLUSSEC:
 44945 00000590 00000000                	dd	0		;>32mb			AC0000
 44946                                  PREREAD:
 44947 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44948 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44949                                  FATBYTE:
 44950 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44951                                  ; DOSDATA:059Ah
 44952 0000059A 00000000                DEVPT:	dd	0		;
 44953                                  THISSFT:
 44954 0000059E 00000000                	dd	0		; Address of user SFT
 44955                                  THISCDS:
 44956 000005A2 00000000                	dd	0		; Address of current CDS
 44957                                  THISFCB:
 44958 000005A6 00000000                	dd	0		; Address of user FCB
 44959 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44960 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44961 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44962                                  WFP_START:
 44963 000005B2 0000                    	dw	0		;
 44964                                  REN_WFP:
 44965 000005B4 0000                    	dw	0		;
 44966                                  CURR_DIR_END:
 44967 000005B6 0000                    	dw	0		;
 44968                                  NEXTADD:
 44969 000005B8 0000                    	dw	0		;
 44970                                  LASTPOS:
 44971 000005BA 0000                    	dw	0		;
 44972                                  CLUSNUM:
 44973 000005BC 0000                    	dw	0		;
 44974 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44975                                  DIRSTART:
 44976 000005C2 0000                    	dw	0		;
 44977 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44978 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44979                                                                  ; sectors
 44980                                  BYTSECPOS:
 44981 000005CC 0000                    	dw	0		; Position of first byte within sector
 44982                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44983 000005CE 0000<rep 2h>                    times	2 dw 0
 44984                                  BYTCNT1:
 44985 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44986                                  BYTCNT2:
 44987 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44988 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44989                                  ; DOSDATA:05D8h
 44990                                  ENTFREE:
 44991 000005D8 0000                    	dw	0		;
 44992                                  ENTLAST:
 44993 000005DA 0000                    	dw	0		;
 44994                                  NXTCLUSNUM:
 44995 000005DC 0000                    	dw	0		;
 44996                                  GROWCNT:
 44997 000005DE 00000000                	dd	0		;
 44998 000005E2 00000000                CURBUF:	dd	0		;
 44999 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45000 000005EA 0000                    SAVEBX:	dw	0		;
 45001 000005EC 0000                    SAVEDS:	dw	0		;
 45002                                  RESTORE_TMP:
 45003 000005EE 0000                    	dw	0		; return address for restore world
 45004 000005F0 0000                    NSS:	dw	0
 45005 000005F2 0000                    NSP:	dw	0
 45006                                  ; DOSDATA:05F4h
 45007                                  EXTOPEN_FLAG:
 45008 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45009                                  EXTOPEN_ON:
 45010 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45011                                  EXTOPEN_IO_MODE:
 45012 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45013                                  SAVE_DI:
 45014 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45015                                  SAVE_ES:
 45016 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45017                                  SAVE_DX:
 45018 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45019                                  SAVE_CX:
 45020 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45021                                  SAVE_BX:
 45022 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45023                                  SAVE_SI:
 45024 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45025                                  SAVE_DS:
 45026 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45027                                  
 45028                                  ; DOSDATA:0607h
 45029                                  
 45030                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45031                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45032                                  ; the high 16, the low 16 are still in the register.
 45033                                  
 45034                                  HIGH_SECTOR:	
 45035 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45036                                  	; 25/09/2023
 45037                                  OffsetMagicPatch:
 45038                                  	;dw	MagicPatch	;scottq 8/6/92
 45039                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45040 00000609 0000                    	dw	0
 45041                                  				;see dos\mpatch.asm
 45042                                  DISK_FULL:
 45043 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45044                                  TEMP_VAR:
 45045 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45046                                  TEMP_VAR2:
 45047 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45048 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45049                                  DOS34_FLAG:
 45050 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45051                                  NO_FILTER_PATH:
 45052 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45053                                  NO_FILTER_DPATH:
 45054 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45055                                  ; M008
 45056                                  AbsRdWr_SS:
 45057 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45058                                  AbsRdWr_SP:
 45059 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45060                                  
 45061                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 45062                                  ; M008
 45063                                   
 45064                                   
 45065                                  ; make those pushes fast!!!
 45066                                  
 45067                                  ;EVEN
 45068                                  
 45069 0000061F 90                      align 2
 45070                                  
 45071                                  StackSize   equ 180h  ; 384	; gross but effective
 45072                                  
 45073                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45074                                  ;				; made up their minds about
 45075                                   
 45076                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45077                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45078                                  
 45079                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45080                                   
 45081 00000620 00<rep 180h>                    times	StackSize db	0	;
 45082                                  AUXSTACK:			; LABEL   BYTE
 45083                                   
 45084 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45085                                  DSKSTACK:			; LABEL   BYTE
 45086                                   
 45087 00000920 00<rep 180h>                    times	StackSize db	0	;
 45088                                  IOSTACK:			; LABEL   BYTE
 45089                                  
 45090                                  ; DOSDATA:0AA0h 
 45091                                   
 45092                                  ; patch space for Boca folks.
 45093                                  ; Say What????!!! This does NOT go into the swappable area!
 45094                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45095                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45096                                   
 45097                                  IBMPATCH: ; label byte
 45098                                  PRINTER_FLAG:
 45099 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45100                                  VOLCHNG_FLAG:
 45101 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45102                                  VIRTUAL_OPEN:
 45103 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45104                                   
 45105                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45106                                  
 45107                                  FSeek_drive:
 45108 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45109                                  FSeek_firclus:
 45110 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45111                                  FSeek_logclus:
 45112 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45113                                  FSeek_logsave:
 45114 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45115                                  
 45116                                  ; DOSDATA:0AAAh
 45117                                  
 45118                                  TEMP_DOSLOC:
 45119 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45120                                  				;at SYSINIT time.
 45121                                  SWAP_END:  ; LABEL   BYTE
 45122                                   
 45123                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45124                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45125                                  ; to include this byte.
 45126                                   
 45127 00000AAC 00                      	db	0
 45128                                  
 45129                                  ; DOSDATA:0AADh
 45130                                   
 45131                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45132                                  
 45133                                  ;DOSDATA    ENDS
 45134                                  
 45135                                  ;============================================================================
 45136                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45137                                  ;============================================================================
 45138                                  ; 27/04/2019 - Retro DOS 4.0
 45139                                  ; 16/07/2018 - Retro DOS 3.0
 45140                                  
 45141                                  ;DOSDATA Segment
 45142                                  
 45143                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45144                                  
 45145                                  ;
 45146                                  ; upper case table
 45147                                  ; ---------------------------------------------------------------------------
 45148                                  UCASE_TAB:	; label   byte
 45149 00000AAD 8000                    	dw	128
 45150 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45151 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45152 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45153 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45154 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45155 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45156 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45157 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45158 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45159 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45160 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45161 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45162 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45163 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45164 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45165 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45166                                  ;
 45167                                  ; file upper case table
 45168                                  ; ---------------------------------------------------------------------------
 45169                                  FILE_UCASE_TAB:	; label  byte
 45170 00000B2F 8000                    	dw	128
 45171 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45172 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45173 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45174 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45175 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45176 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45177 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45178 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45179 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45180 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45181 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45182 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45183 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45184 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45185 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45186 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45187                                  ;
 45188                                  ; file char list
 45189                                  ; ---------------------------------------------------------------------------
 45190                                  FILE_CHAR_TAB:	; label  byte
 45191 00000BB1 1600                    	dw	22				; length
 45192 00000BB3 0100FF                  	db	1,0,255 			; include all
 45193 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45194 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45194 00000BC2 7C3C3E2B3D3B2C     
 45195                                  	;db	24 dup (?)			; reserved
 45196 00000BC9 00<rep 18h>             	times	24 db 0
 45197                                  
 45198                                  ;
 45199                                  ; collate table
 45200                                  ; ---------------------------------------------------------------------------
 45201                                  COLLATE_TAB:	; label   byte
 45202 00000BE1 0001                    	dw	256
 45203 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45204 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45205 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45206 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45207 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45208 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45209 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45210 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45211 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45212 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45213 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45214 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45215 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45216 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45217 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45218 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45219 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45220 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45221 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45222 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45223 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45224 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45225 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45226 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45227 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45228 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45229 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45230 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45231 00000CC3 E053                    	db	224,"S"
 45232 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45233 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45234 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45235 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45236                                  
 45237                                  ; ------------------------------------------------<MSKK01>----------------------
 45238                                  
 45239                                  ; DOSDATA:0CE3h
 45240                                  
 45241                                  ; 29/04/2019
 45242                                  
 45243                                  ; dbcs is not supported in DOS 3.3
 45244                                  ;		   DBCS_TAB	    CC_DBCS <>
 45245                                  ;
 45246                                  ; DBCS for DOS 4.00			   2/12/KK
 45247                                  
 45248                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45249                                  ; ------------------------------------------------<MSKK01>----------------------
 45250                                  ;ifdef	DBCS
 45251                                  ; ifdef	  JAPAN
 45252                                  ;		dw	6		; <MSKK01>
 45253                                  ;		db	081h,09fh	; <MSKK01>
 45254                                  ;		db	0e0h,0fch	; <MSKK01>
 45255                                  ;		db	0,0		; <MSKK01>
 45256                                  ;
 45257                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45258                                  ; endif
 45259                                  ; ifdef	  TAIWAN
 45260                                  ;		dw	4		; <TAIWAN>
 45261                                  ;		db	081h,0FEh	; <TAIWAN>
 45262                                  ;		db	0,0		; <TAIWAN>
 45263                                  ;
 45264                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45265                                  ; endif
 45266                                  ; ifdef   KOREA                         ; Keyl
 45267                                  ;               dw      4               ; <KOREA>
 45268                                  ;               db      0A1h,0FEh       ; <KOREA>
 45269                                  ;               db      0,0             ; <KOREA>
 45270                                  ;
 45271                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45272                                  ;  endif
 45273                                  ;else
 45274 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45275                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45276 00000CE5 00<rep 10h>             		times	16 db 0
 45277                                  
 45278                                  ;		dw	6		;  2/12/KK
 45279                                  ;		db	081h,09Fh	;  2/12/KK
 45280                                  ;		db	0E0h,0FCh	;  2/12/KK
 45281                                  ;		db	0,0		;  2/12/KK
 45282                                  ;
 45283                                  ;endif
 45284                                  ; ------------------------------------------------<MSKK01>----------------------
 45285                                  
 45286                                  ; DOSDATA:0CF5h
 45287                                  
 45288                                  ; ---------------------------------------------------------------------------
 45289                                  ;
 45290                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45291                                  ;     ENTRY: AL = Character to map
 45292                                  ;     EXIT:  AL = The converted character
 45293                                  ; Alters no registers except AL and flags.
 45294                                  ; The routine should do nothing to chars below 80H.
 45295                                  ; ---------------------------------------------------------------------------
 45296                                  ; Example:
 45297                                  
 45298                                  MAP_CASE:
 45299                                  ;Procedure MAP_CASE,FAR
 45300                                  
 45301 00000CF5 3C80                    	CMP	AL,80h
 45302 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45303 00000CF9 CB                      	RETF
 45304                                  Map1:
 45305 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45306 00000CFC 1E                      	PUSH	DS
 45307 00000CFD 53                      	PUSH	BX
 45308 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45309                                  FINISH:
 45310 00000D01 0E                      	PUSH	CS		;Move to DS
 45311 00000D02 1F                      	POP	DS
 45312 00000D03 D7                      	XLAT			;Get upper case character
 45313 00000D04 5B                      	POP	BX
 45314 00000D05 1F                      	POP	DS
 45315                                  L_RET:	
 45316 00000D06 CB                      	RETF
 45317                                  
 45318                                  ;EndProc MAP_CASE
 45319                                  
 45320                                  ; ---------------------------------------------------------------------------
 45321                                  
 45322                                  ; The variables for ECS version are moved here for the same data alignments
 45323                                  ; as IBM-DOS and MS-DOS.
 45324                                  
 45325                                  InterChar:
 45326 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45327                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45328                                  DUMMY:	; LABEL   WORD
 45329                                  InterCon:  
 45330 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45331                                  SaveCurFlg:
 45332 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45333                                  
 45334                                  ; ---------------------------------------------------------------------------
 45335                                  
 45336 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45337                                  redir_patch:
 45338 00000D0C 00                      	  db	0
 45339                                  
 45340                                  ; DOSDATA:0D0Dh
 45341                                  
 45342                                  Mark1:	; label byte
 45343                                  
 45344                                  ;IF2
 45345                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45346                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45347                                  ;	ENDIF
 45348                                  ;ENDIF
 45349                                  
 45350 00000D0D 00<rep 5h>              	  times 5 db 0
 45351                                  
 45352                                  ;############################################################################
 45353                                  ;
 45354                                  ; ** HACK FOR DOS 4.0 REDIR **
 45355                                  ; 
 45356                                  ; The redir requires the following:
 45357                                  ;
 45358                                  ;	MSVERS	offset D12H
 45359                                  ;	YRTAB	offset D14H
 45360                                  ; 	MONTAB	offset D1CH
 45361                                  ;
 45362                                  ; WARNING! WARNING!
 45363                                  ; 
 45364                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45365                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45366                                  ;
 45367                                  ; CURRENTLY MARK1 = 0D0DH
 45368                                  ;
 45369                                  ;############################################################################
 45370                                  
 45371                                  	;ORG	0D12h
 45372                                  
 45373                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45374                                  
 45375                                  	;db	6
 45376                                  	;db	20
 45377                                  
 45378                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45379                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45380 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45381 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45382                                  
 45383                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45384                                  ;
 45385                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45386                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45387                                  
 45388                                  ; Days in year
 45389                                  
 45390                                  YRTAB:   
 45391 00000D14 C8A6                    	DB	200,166			; Leap year
 45392 00000D16 C8A5                    	DB	200,165
 45393 00000D18 C8A5                    	DB	200,165
 45394 00000D1A C8A5                    	DB	200,165
 45395                                  
 45396                                  ; Days of each month
 45397                                  
 45398                                  MONTAB:        
 45399 00000D1C 1F                      	DB      31                      ; January
 45400                                  february:
 45401 00000D1D 1C                      	DB	28 			; February--reset each 
 45402                                  					; time year changes
 45403 00000D1E 1F                              DB      31                      ; March
 45404 00000D1F 1E                              DB      30                      ; April
 45405 00000D20 1F                              DB      31                      ; May
 45406 00000D21 1E                              DB      30                      ; June
 45407 00000D22 1F                              DB      31                      ; July
 45408 00000D23 1F                              DB      31                      ; August
 45409 00000D24 1E                              DB      30                      ; September
 45410 00000D25 1F                              DB      31                      ; October
 45411 00000D26 1E                              DB      30                      ; November
 45412 00000D27 1F                              DB      31                      ; December
 45413                                  
 45414                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45415                                  
 45416                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45417                                  
 45418                                  SysInitTable:
 45419                                  	;dw	SYSINITVAR
 45420 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45421 00000D2A 0000                            dw      0		; segment
 45422 00000D2C [0012]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45423 00000D2E 0000                            dw      0		; segment of pointer
 45424                                  
 45425                                  ; DOS 3.3 F.C. 6/12/86
 45426                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45427                                  
 45428                                  FastTable:				; a better name
 45429                                  FastOpenTable:
 45430 00000D30 0200                    	dw      2                       ; number of entries
 45431 00000D32 [8A12]                  	dw      FastRet			; pointer to ret instr.
 45432 00000D34 0000                    	dw      0                       ; and will be modified by
 45433 00000D36 [8A12]                  	dw      FastRet			; FASTxxx when loaded in
 45434 00000D38 0000                    	dw      0                       
 45435                                  
 45436                                  ; DOS 3.3 F.C. 6/12/86
 45437                                  
 45438                                  FastFlg:				; flags
 45439                                  FastOpenFlg:
 45440 00000D3A 00                      	db	0			; don't change the foll: order  
 45441                                  
 45442                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45443                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45444                                  ; or filled by FastOPen when calling FastOpen Lookup
 45445                                  
 45446                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45447                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45448                                  	;times	11 db 0
 45449 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45450                                  
 45451                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45452                                  ; when calling FastOpen Lookup
 45453                                  
 45454                                  Dir_Info_Buff:	; label  byte
 45455                                  	;db   	SIZE dir_entry dup (0)
 45456                                  	;times	32 db 0
 45457 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45458                                  
 45459                                  Next_Element_Start:
 45460 00000D66 0000                    	dw	0			; save next element start offset
 45461                                  Del_ExtCluster:
 45462 00000D68 0000                    	dw	0			; for dos_delete                       
 45463                                  
 45464                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45465                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45466                                  ; not to destroy the INT 21 stack saved for the user.
 45467                                  
 45468                                  USER_SP_2F:	; LABEL  WORD
 45469 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45470                                  
 45471                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45472                                  DOS_TEMP:	; label  word		; temporary word
 45473                                  FAKE_STACK_2F:  
 45474                                  	; dw  14 dup (0)		; 12 register temporary storage
 45475 00000D6C 0000<rep Eh>            	times 14 dw 0
 45476                                  
 45477                                  Hash_Temp: 	;label  word		; temporary word             
 45478                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45479 00000D88 0000<rep 4h>            	times 4 dw 0
 45480                                              	
 45481                                  SCAN_FLAG:	
 45482 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45483                                  DATE_FLAG:
 45484 00000D91 0000                    	dw     0                	; flag to update the date
 45485                                  
 45486                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45487 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45488                                  
 45489                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45490 00000D95 00000000                	dd     0               		; for extended error                   
 45491 00000D99 00000000                	dd     0			; for parser                           
 45492 00000D9D 00000000                	dd     0			; for critical errror                  
 45493 00000DA1 00000000                	dd     0			; for IFS                              
 45494 00000DA5 00000000                	dd     0			; for code reduction                   
 45495                                  
 45496                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45497 00000DA9 FFFFFFFF                	dd     -1                                                        
 45498                                  SC_SECTOR_SIZE:
 45499 00000DAD 0000                    	dw	0			; sector size for SC                 
 45500                                  SC_DRIVE:
 45501 00000DAF 00                      	db	0			; drive # for secondary cache        
 45502                                  CurSC_DRIVE:
 45503 00000DB0 FF                      	db	-1			; current SC drive                   
 45504                                  CurSC_SECTOR:
 45505 00000DB1 00000000                	dd	0			; current SC starting sector         
 45506                                  SC_STATUS:
 45507 00000DB5 0000                    	dw	0			; SC status word                     
 45508                                  SC_FLAG:
 45509 00000DB7 00                      	db	0			; SC flag                            
 45510                                  AbsDskErr:
 45511 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45512                                                                                            
 45513                                  NO_NAME_ID:	; label byte                                                           
 45514 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45514 00000DC3 2020               
 45515                                  
 45516                                  ;hkn; moved from TABLE segment in kstrin.asm
 45517                                  
 45518                                  KISTR001S:	; label	byte		; 2/17/KK
 45519 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45520                                  KISTR001E:	; label	byte		; 2/17/KK
 45521                                  
 45522                                  ; the nul device driver used to be part of the code. However, since the 
 45523                                  ; header is in the data, and the entry points are only given as an offset,
 45524                                  ; the strategy and interrupt entry points must also be in the data now.
 45525                                  
 45526                                  ; DOSDATA:0DC6h
 45527                                  
 45528                                  SNULDEV:
 45529                                  ;procedure snuldev,far
 45530                                  	;or	word [es:bx+3],100h
 45531                                  	; 17/12/2022
 45532                                  	;or	byte [es:bx+4],01h
 45533                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45534                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45535 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45536                                  INULDEV:
 45537 00000DCC CB                      	retf				; must not be a return!
 45538                                  ;endproc snuldev
 45539                                  
 45540                                  ;M044
 45541                                  ; Second part of save area for saving last para of Windows memory
 45542                                  
 45543                                  WinoldPatch2:
 45544                                  	;db	8 dup (?)	; M044
 45545 00000DCD 00<rep 8h>              	times	8 db 0	
 45546                                  UmbSave2:
 45547                                  	;db	5 dup (?)	; M062
 45548 00000DD5 00<rep 5h>              	times	5 db 0
 45549                                  UmbSaveFlag:
 45550 00000DDA 00                      	db	0		; M062
 45551                                  
 45552                                  ; DOSDATA:0DDBh
 45553                                  
 45554                                  Mark2:	; label byte
 45555                                  
 45556                                  ;IF2
 45557                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45558                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45559                                  ;	ENDIF
 45560                                  ;ENDIF
 45561                                  
 45562                                  ;############################################################################
 45563                                  ;
 45564                                  ; ** HACK FOR DOS 4.0 REDIR **
 45565                                  ; 
 45566                                  ; The redir requires the following:
 45567                                  ;
 45568                                  ;	ERR_TABLE_21	offset DDBH
 45569                                  ;	ERR_TABLE_24	offset E5BH
 45570                                  ; 	ErrMap24	offset EABH
 45571                                  ;
 45572                                  ; WARNING! WARNING!
 45573                                  ;
 45574                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45575                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45576                                  ;
 45577                                  ; CURRENTLY MARK2 = 0DD0H
 45578                                  ;
 45579                                  ;############################################################################
 45580                                  
 45581                                  	;ORG	0DDBh
 45582                                  
 45583                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45584                                  
 45585                                  ; ---------------------------------------------------------------------------
 45586                                  ;
 45587                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45588                                  ; errors. Each entry is 4 bytes long:
 45589                                  ;
 45590                                  ;       Err#,Class,Action,Locus
 45591                                  ;
 45592                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45593                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45594                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45595                                  ;
 45596                                  ; ---------------------------------------------------------------------------
 45597                                  
 45598                                  ;ErrTab  Macro   err,class,action,locus
 45599                                  ;ifidn <locus>,<0FFh>
 45600                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45601                                  ;ELSE
 45602                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45603                                  ;ENDIF
 45604                                  ;ENDM
 45605                                  
 45606                                  ERR_TABLE_21: ; LABEL   BYTE
 45607 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45608 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45609 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45610 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45611 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45612 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45613 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45614 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45615 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45616 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45617 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45618 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45619 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45620 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45621 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45622 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45623 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45624 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45625 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45626 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45627 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45628 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45629 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45630 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45631 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45632 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45633 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45634 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45635                                      ; MSDOS 6.0
 45636 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45637 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45638 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45639 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45640                                  
 45641                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45642                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45643                                  ;		db 2,8,3,2
 45644                                  ;		db 3,8,3,2
 45645                                  ;		db 4,1,4,1
 45646                                  ;		db 5,3,3,0FFh
 45647                                  ;		db 6,7,4,1
 45648                                  ;		db 7,7,5,5
 45649                                  ;		db 8,1,4,5
 45650                                  ;		db 9,7,4,5
 45651                                  ;		db 0Ah,7,4,5
 45652                                  ;		db 0Bh,9,3,1
 45653                                  ;		db 0Ch,7,4,1
 45654                                  ;		db 0Dh,9,4,1
 45655                                  ;		db 0Fh,8,3,2
 45656                                  ;		db 10h,3,3,2
 45657                                  ;		db 11h,0Dh,3,2
 45658                                  ;		db 12h,8,3,2
 45659                                  ;		db 50h,0Ch,3,2
 45660                                  ;		db 20h,0Ah,2,2
 45661                                  ;		db 21h,0Ah,2,2
 45662                                  ;		db 54h,1,4,0FFh
 45663                                  ;		db 56h,3,3,1
 45664                                  ;		db 52h,1,4,2
 45665                                  ;		db 32h,9,3,3
 45666                                  ;		db 55h,0Ch,3,3
 45667                                  ;		db 57h,9,3,1
 45668                                  ;		db 53h,0Dh,4,1
 45669                                  ;		db 24h,1,4,5
 45670                                  ; MSDOS 6.0 (MSDOS 6.21)
 45671                                  ;		db 26h,1,4,1
 45672                                  ;		db 27h,1,4,1
 45673                                  ;		db 5Ah,0Dh,4,2
 45674                                  ; MSDOS 6.0 & MSDOS 3.3
 45675                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45676                                  
 45677                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45678                                  
 45679                                  ; ---------------------------------------------------------------------------
 45680                                  ;
 45681                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45682                                  ; errors. Each entry is 4 bytes long:
 45683                                  ;
 45684                                  ;       Err#,Class,Action,Locus
 45685                                  ;
 45686                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45687                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45688                                  ; THE END.
 45689                                  ;
 45690                                  ; ---------------------------------------------------------------------------
 45691                                  
 45692                                  ERR_TABLE_24: ; LABEL   BYTE
 45693 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45694 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45695 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45696 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45697 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45698 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45699 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45700 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45701 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45702 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45703 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45704 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45705 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45706 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45707 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45708 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45709 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45710 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45711 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45712 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45713                                  
 45714                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45715                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45716                                  ;		db 14h,4,5,1
 45717                                  ;		db 15h,5,7,0FFh
 45718                                  ;		db 16h,4,5,1
 45719                                  ;		db 17h,0Bh,4,2
 45720                                  ;		db 18h,4,5,1
 45721                                  ;		db 19h,5,1,2
 45722                                  ;		db 1Ah,0Bh,7,2
 45723                                  ;		db 1Bh,0Bh,4,2
 45724                                  ;		db 1Ch,2,7,4
 45725                                  ;		db 1Dh,5,4,0FFh
 45726                                  ;		db 1Eh,5,4,0FFh
 45727                                  ;		db 1Fh,0Dh,4,0FFh
 45728                                  ;		db 20h,0Ah,2,2
 45729                                  ;		db 21h,0Ah,2,2
 45730                                  ;		db 22h,0Bh,7,2
 45731                                  ;		db 32h,9,3,3
 45732                                  ;		db 23h,7,4,1
 45733                                  ;		db 24h,1,4,5
 45734                                  ;		db 0FFh,0Dh,5,0FFh
 45735                                  
 45736                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45737                                  
 45738                                  ; ---------------------------------------------------------------------------
 45739                                  ;
 45740                                  ; We need to map old int 24 errors and device driver errors into the new set
 45741                                  ; of errors. The following table is indexed by the new errors
 45742                                  ;
 45743                                  ; ---------------------------------------------------------------------------
 45744                                  
 45745                                  ;Public  ErrMap24
 45746                                  ErrMap24: ; Label   BYTE
 45747 00000EAB 13                          DB  error_write_protect	; 0
 45748 00000EAC 14                          DB  error_bad_unit		; 1
 45749 00000EAD 15                          DB  error_not_ready		; 2
 45750 00000EAE 16                          DB  error_bad_command	; 3
 45751 00000EAF 17                          DB  error_CRC		; 4
 45752 00000EB0 18                          DB  error_bad_length	; 5
 45753 00000EB1 19                          DB  error_seek		; 6
 45754 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45755 00000EB3 1B                          DB  error_sector_not_found	; 8
 45756 00000EB4 1C                          DB  error_out_of_paper	; 9
 45757 00000EB5 1D                          DB  error_write_fault	; A
 45758 00000EB6 1E                          DB  error_read_fault	; B
 45759 00000EB7 1F                          DB  error_gen_failure	; C
 45760 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45761 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45762 00000EBA 22                          DB  error_wrong_disk	; F
 45763                                  
 45764                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45765                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45766                                  	
 45767                                  ErrMap24End: ; LABEL   BYTE
 45768                                  
 45769                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45770                                  
 45771                                  ; ---------------------------------------------------------------------------
 45772                                  
 45773                                  ; 27/04/2019 - Retro DOS v4.0
 45774                                  
 45775                                  FIRST_BUFF_ADDR:
 45776 00000EBB 0000                    	dw	0			; first buffer address               
 45777                                  SPECIAL_VERSION:
 45778 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45779                                  FAKE_COUNT:
 45780 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45781                                  OLD_FIRSTCLUS:
 45782 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45783                                  
 45784                                  ; ---------------------------------------------------------------------------
 45785                                  
 45786                                  ;smr; moved from TABLE segment in exec.asm
 45787                                  
 45788 00000FC0 0000                    exec_init_SP: dw 0
 45789 00000FC2 0000                    exec_init_SS: dw 0
 45790 00000FC4 0000                    exec_init_IP: dw 0
 45791 00000FC6 0000                    exec_init_CS: dw 0
 45792                                  
 45793                                  exec_signature:
 45794 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45795                                  exec_len_mod_512:
 45796 00000FCA 0000                    	dw	0	; low 9 bits of length
 45797                                  exec_pages:
 45798 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45799                                  exec_rle_count:
 45800 00000FCE 0000                    	dw	0	; count of reloc entries
 45801                                  exec_par_dir:
 45802 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45803                                  exec_min_BSS:
 45804 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45805                                  exec_max_BSS:
 45806 00000FD4 0000                    	dw	0	; max number of para of BSS
 45807                                  exec_SS:
 45808 00000FD6 0000                    	dw	0	; stack of image
 45809                                  exec_SP:
 45810 00000FD8 0000                    	dw	0	; SP of image
 45811                                  exec_chksum:
 45812 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45813                                  exec_IP:
 45814 00000FDC 0000                    	dw	0	; IP of entry
 45815                                  exec_CS:
 45816 00000FDE 0000                    	dw	0	; CS of entry
 45817                                  exec_rle_table:
 45818 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45819                                  
 45820                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45821                                  
 45822                                  ;smr; eom
 45823                                  
 45824                                  ; ---------------------------------------------------------------------------
 45825                                  
 45826                                  ;SR;
 45827                                  ; WIN386 instance table for DOS
 45828                                  
 45829                                  Win386_Info:
 45830 00000FE2 0300                    	db	3, 0
 45831 00000FE4 000000000000000000-     	dd	0, 0, 0
 45831 00000FED 000000             
 45832 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45833                                  
 45834                                  Instance_Table:
 45835 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45836 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45837 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45838 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45839 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45840 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45841 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45842 0000101E 00000000                	dw	0, 0
 45843                                  
 45844                                  ; M001; SR;
 45845                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45846                                  ; M001; some DOS variables. Note that the only really important variable in 
 45847                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45848                                  ; M001; which does not need to be done in DOS 5.0. 
 45849                                  
 45850                                  ; 29/12/2022
 45851                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45852                                  
 45853                                  Win386_DOSVars:
 45854 00001022 05                      	db	5	;Major version 5 ; M001
 45855 00001023 00                      	db	0	;Minor version 0 ; M001
 45856 00001024 [EC05]                  	dw	SAVEDS	; M001
 45857 00001026 [EA05]                  	dw	SAVEBX	; M001
 45858 00001028 [2103]                  	dw	INDOS	; M001
 45859 0000102A [3E03]                  	dw	USER_ID	; M001
 45860 0000102C [1503]                  	dw	CritPatch ; M001
 45861 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45862                                  
 45863                                  ;SR;
 45864                                  ; Flag to indicate whether WIN386 is running or not
 45865                                  
 45866 00001030 00                      IsWin386: db	0
 45867                                  
 45868                                  ;M018
 45869                                  ; This variable contains the path to the VxD device needed for Win386
 45870                                  
 45871 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45871 0000103A 2E33383600         
 45872                                  
 45873                                  ;End WIN386 support
 45874                                  
 45875                                  ; ---------------------------------------------------------------------------
 45876                                  
 45877                                  ;SR;
 45878                                  ; These variables have been added for the special lie support for device
 45879                                  ;drivers.
 45880                                  ;
 45881                                  
 45882                                  DriverLoad:	
 45883 0000103F 01                      	db	1	;initialized to do special handling
 45884                                  BiosDataPtr:
 45885 00001040 00000000                	dd	0
 45886                                  
 45887                                  ; 29/12/2022 - Retro DOS v4.1
 45888                                  %if 0
 45889                                  
 45890                                  ; 27/04/2019 - Retro DOS v4.0
 45891                                  ; 04/11/2022
 45892                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45893                                  
 45894                                  ;------------------------------------------------------------------------
 45895                                  ; Patch for Sidekick
 45896                                  ;
 45897                                  ; A documented method for finding the offset of the Errormode flag in the 
 45898                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45899                                  ; for the following sequence of instructions.
 45900                                  ;
 45901                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45902                                  ;
 45903                                  ; The Offset of Errormode flag is 0320h
 45904                                  ;
 45905                                  ;------------------------------------------------------------------------
 45906                                  
 45907                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45908                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45909                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45910                                  	db	0CDh, 028h			 ; int  28h
 45911                                  
 45912                                  ;--------------------------------------------------------------------------
 45913                                  ; Patch for PortOfEntry - M036
 45914                                  ;
 45915                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45916                                  ; the offset of Errormode flag. The following patch is to support them in 
 45917                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45918                                  ;
 45919                                  ;---------------------------------------------------------------------------
 45920                                  
 45921                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45922                                  	db	075h, 037h			 ; jnz	NearLabel
 45923                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45924                                  
 45925                                  %endif ; 29/12/2022
 45926                                  
 45927                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45928                                  
 45929                                  ;--------------------------------------------------------------------------
 45930                                  
 45931                                  ;*** New FCB Implementation
 45932                                  ; This variable is used as a cache in the new FCB implementation to remember
 45933                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45934                                  
 45935 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45936                                  
 45937                                  ;DOSDATA ENDS
 45938                                  
 45939                                  ;============================================================================
 45940                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45941                                  ;============================================================================
 45942                                  ; 27/04/2019 - Retro DOS 4.0
 45943                                  
 45944                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45945                                  
 45946                                  ;---------------------------------------------------------------------------
 45947                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45948                                  ;----------------------------------------------------------------------------
 45949                                  	
 45950                                  	;db	90h
 45951                                  
 45952                                  	;EVEN
 45953                                  align 2
 45954                                  
 45955                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45956                                  
 45957                                  DOSINTTABLE:	; LABEL	DWORD
 45958                                  
 45959                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45960                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45961                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45962                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45963                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45964                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45965                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45966                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45967                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45968                                  	
 45969 00001048 [B151]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45970 0000104C [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45971 00001050 [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45972 00001054 [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45973 00001058 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45974 0000105C [EB60]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45975 00001060 [0307]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45976 00001064 [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45977 00001068 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45978                                  
 45979 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45980 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45981                                  
 45982                                  ;-------------------------------------------------------------------------
 45983                                  ;
 45984                                  ; LOW MEM STUB:
 45985                                  ;
 45986                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45987                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45988                                  ; DOS load in HIMEM. Each entry point does this.
 45989                                  ;
 45990                                  ; 	1. if jmp to 8 has been patched out
 45991                                  ;	   2. if A20 OFF
 45992                                  ;	      3. Enable A20
 45993                                  ;	   4. else 
 45994                                  ;	      5. just go to dos entry
 45995                                  ;	   6. endif
 45996                                  ;	7. else
 45997                                  ;	   8. just go to dos entry
 45998                                  ;	9. endif
 45999                                  ;
 46000                                  ;--------------------------------------------------------------------------
 46001                                  
 46002                                  ; 27/04/2019 - Retro DOS v4.0
 46003                                  
 46004                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46005                                  
 46006                                  ;--------------------------------------------------------------------------
 46007                                  ;
 46008                                  ; DIVIDE BY 0 handler
 46009                                  ;
 46010                                  ;--------------------------------------------------------------------------
 46011                                  
 46012                                  ldivov:
 46013                                  	; The following jump, skipping the XMS calls will be patched to 
 46014                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46015                                  	; needed because the stub is installed even before the XMS driver
 46016                                  	; is loaded if the user specifies dos=high in the config.sys
 46017                                  i0patch:
 46018 00001070 EB03                    	jmp	short divov_cont	
 46019                                  
 46020 00001072 E8D800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46021                                  divov_cont:
 46022 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46023                                  
 46024                                  ;------------------------------------------------------------------------
 46025                                  ;
 46026                                  ; INT 20 Handler
 46027                                  ;
 46028                                  ; Here we do not have to set up the stack to return here as the abort call
 46029                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46030                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46031                                  ; will be restored then.
 46032                                  ;
 46033                                  ;-------------------------------------------------------------------------
 46034                                  
 46035                                  lquit:
 46036                                  	; The following jump, skipping the XMS calls will be patched to 
 46037                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46038                                  	; needed because the stub is installed even before the XMS driver
 46039                                  	; is loaded if the user specifies dos=high in the config.sys
 46040                                  i20patch:
 46041 0000107A EB03                    	jmp	short quit_cont	
 46042                                  
 46043 0000107C E8CE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46044                                  quit_cont:
 46045 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46046                                  
 46047                                  ;--------------------------------------------------------------------------
 46048                                  ;
 46049                                  ; INT 21 Handler
 46050                                  ;
 46051                                  ;--------------------------------------------------------------------------
 46052                                  
 46053                                  lcommand:
 46054                                  	; The following jump, skipping the XMS calls will be patched to 
 46055                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46056                                  	; needed because the stub is installed even before the XMS driver
 46057                                  	; is loaded if the user specifies dos=high in the config.sys
 46058                                  i21patch:
 46059 00001084 EB03                    	jmp	short command_cont	
 46060                                  
 46061 00001086 E8C400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46062                                  command_cont:
 46063 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46064                                  
 46065                                  ;------------------------------------------------------------------------
 46066                                  ;
 46067                                  ; INT 25 
 46068                                  ;
 46069                                  ;----------------------------------------------------------------------------
 46070                                  
 46071                                  labsdrd:
 46072                                  	; The following jump, skipping the XMS calls will be patched to 
 46073                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46074                                  	; needed because the stub is installed even before the XMS driver
 46075                                  	; is loaded if the user specifies dos=high in the config.sys
 46076                                  i25patch:
 46077 0000108E EB03                    	jmp	short absdrd_cont	
 46078                                  
 46079 00001090 E8BA00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46080                                  absdrd_cont:
 46081 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46082                                  
 46083                                  ;-------------------------------------------------------------------------
 46084                                  ;
 46085                                  ; INT 26
 46086                                  ;
 46087                                  ;-----------------------------------------------------------------------
 46088                                  
 46089                                  labsdwrt:
 46090                                  	; The following jump, skipping the XMS calls will be patched to 
 46091                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46092                                  	; needed because the stub is installed even before the XMS driver
 46093                                  	; is loaded if the user specifies dos=high in the config.sys
 46094                                  i26patch:
 46095 00001098 EB03                    	jmp	short absdwrt_cont	
 46096                                  
 46097 0000109A E8B000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46098                                  absdwrt_cont:
 46099 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46100                                  
 46101                                  ;------------------------------------------------------------------------
 46102                                  ;
 46103                                  ; INT 27
 46104                                  ;
 46105                                  ;-----------------------------------------------------------------------
 46106                                  
 46107                                  lstay_resident:
 46108                                  	; The following jump, skipping the XMS calls will be patched to 
 46109                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46110                                  	; needed because the stub is installed even before the XMS driver
 46111                                  	; is loaded if the user specifies dos=high in the config.sys
 46112                                  i27patch:
 46113 000010A2 EB03                    	jmp	short sr_cont	
 46114                                  
 46115 000010A4 E8A600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46116                                  sr_cont:
 46117 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46118                                  
 46119                                  ;-----------------------------------------------------------------------------
 46120                                  ;
 46121                                  ; INT 2f
 46122                                  ;
 46123                                  ;-------------------------------------------------------------------------
 46124                                  
 46125                                  lint2f:
 46126                                  	; The following jump, skipping the XMS calls will be patched to 
 46127                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46128                                  	; needed because the stub is installed even before the XMS driver
 46129                                  	; is loaded if the user specifies dos=high in the config.sys
 46130                                  i2fpatch:
 46131 000010AC EB03                    	jmp	short int2f_cont	
 46132                                  
 46133 000010AE E89C00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46134                                  int2f_cont:
 46135 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46136                                  
 46137                                  ;-----------------------------------------------------------------------------
 46138                                  ;
 46139                                  ; CPM entry
 46140                                  ;
 46141                                  ;------------------------------------------------------------------------
 46142                                  
 46143                                  lcall_entry:
 46144                                  	; The following jump, skipping the XMS calls will be patched to 
 46145                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46146                                  	; needed because the stub is installed even before the XMS driver
 46147                                  	; is loaded if the user specifies dos=high in the config.sys
 46148                                  cpmpatch:
 46149 000010B6 EB03                    	jmp	short callentry_cont	
 46150                                  
 46151 000010B8 E89200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46152                                  callentry_cont:
 46153 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46154                                  
 46155                                  ;--------------------------------------------------------------------------
 46156                                  
 46157                                  lirett:
 46158 000010C0 CF                      	iret
 46159                                  
 46160                                  ;---------------------------------------------------------------------------
 46161                                  ;
 46162                                  ; LowIntXX:
 46163                                  ;
 46164                                  ; Interrupts from DOS that pass control to a user program must be done from
 46165                                  ; low memory, as the user program may change the state of the A20 line or
 46166                                  ; they may require that the A20 line be OFF. The following piece of code is
 46167                                  ; far call'd from the following places in DOS:
 46168                                  ;
 46169                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46170                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46171                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46172                                  ;
 46173                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46174                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46175                                  ; before doing the ints and then do a far junp back into DOS.
 46176                                  ;
 46177                                  ;---------------------------------------------------------------------------
 46178                                  
 46179 000010C1 00000000                DosRetAddr23:	dd	0
 46180 000010C5 00000000                DosRetAddr24:	dd	0
 46181 000010C9 00000000                DosRetAddr28:	dd	0
 46182                                  
 46183                                  	; Execute int 23h from low memory
 46184                                  LowInt23:
 46185                                  					; save the return address that is on
 46186                                  					; the stack
 46187 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 46188 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 46189                                  
 46190 000010D7 CD23                    	int	23h			; ctrl C
 46191                                  					; turn on A20 it has been turned OFF
 46192                                  					; by int 28/23/24 handler.
 46193                                  
 46194 000010D9 E87100                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46195                                  
 46196 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46197                                  
 46198                                  
 46199                                  	; Execute int 24h from low memory
 46200                                  LowInt24:
 46201                                  					; save the return address that is on
 46202                                  					; the stack
 46203 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46204 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46205                                  
 46206 000010EB CD24                    	int	24h			; crit error
 46207                                  					; turn on A20 it has been turned OFF
 46208                                  					; by int 28/23/24 handler.
 46209                                  
 46210 000010ED E85D00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46211                                  
 46212 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46213                                  
 46214                                  
 46215                                   
 46216                                  	; Execute int 28h from low memory
 46217                                  LowInt28:
 46218 000010F5 CD28                    	int	28h			; idle int
 46219                                  					; turn on A20 it has been turned OFF
 46220                                  					; by int 28/23/24 handler.
 46221                                  
 46222 000010F7 E85300                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46223                                  
 46224 000010FA CB                      	retf
 46225                                  
 46226                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46227                                  
 46228                                  ;-------------------------------------------------------------------------
 46229                                  ;
 46230                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46231                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46232                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46233                                  ; This is so because exepac'd programs rely on address wrap.
 46234                                  ;
 46235                                  ;------------------------------------------------------------------------- 
 46236                                  
 46237                                  disa20_xfer:
 46238 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46239                                  
 46240                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46241                                  
 46242                                  	; DS:SI points to entry point
 46243                                  	; AX:DI points to initial stack
 46244                                  	; DX has PDB pointer
 46245                                  	; BX has initial AX value
 46246                                  
 46247 000010FE FA                      	cli
 46248 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46249                                  
 46250 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46251 00001107 89FC                    	mov	SP,DI			; and SP
 46252 00001109 FB                      	sti
 46253                                  
 46254 0000110A 1E                      	push	DS			; fake long call to entry
 46255 0000110B 56                      	push	SI
 46256 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46257 0000110E 8EDA                    	mov	DS,DX
 46258 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46259 00001112 CB                      	retf
 46260                                  
 46261                                  ;-------------------------------------------------------------------------
 46262                                  ;
 46263                                  ; M003:
 46264                                  ;
 46265                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46266                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46267                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46268                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46269                                  ; more info.	
 46270                                  ;
 46271                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46272                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46273                                  ; stack to avoid additional stack overhead for the user.
 46274                                  ;
 46275                                  ; -------------------------------------------------------------------------
 46276                                  
 46277                                  disa20_iret:
 46278 00001113 E82700                  	call	XMMDisableA20
 46279 00001116 FE0E[2103]              	dec	byte [INDOS]
 46280 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46281 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46282 00001122 89E5                    	mov	BP,SP
 46283                                  	;mov	[BP+user_env.user_AX],AL
 46284 00001124 884600                  	mov	[bp],al
 46285 00001127 A1[F205]                	mov	AX,[NSP]
 46286 0000112A A3[8405]                	mov	[USER_SP],AX
 46287 0000112D A1[F005]                	mov	AX,[NSS]
 46288 00001130 A3[8605]                	mov	[USER_SS],AX
 46289                                  
 46290 00001133 58                      	pop	AX			; restore user regs
 46291 00001134 5B                      	pop	BX
 46292 00001135 59                      	pop	CX
 46293 00001136 5A                      	pop	DX
 46294 00001137 5E                      	pop	SI
 46295 00001138 5F                      	pop	DI
 46296 00001139 5D                      	pop	BP
 46297 0000113A 1F                      	pop	DS
 46298 0000113B 07                      	pop	ES
 46299 0000113C CF                      	iret
 46300                                  
 46301                                  ;**************************************************************************
 46302                                  ;***	XMMDisableA20 - switch 20th address line			      
 46303                                  ;									      
 46304                                  ;	This routine is used to disable the 20th address line in 	      
 46305                                  ;	the system using XMM calls.					      
 46306                                  ;									      
 46307                                  ;	ENTRY	none		;ds = _DATA				      
 46308                                  ;	EXIT	A20 line disabled					      
 46309                                  ;	USES	NOTHING					      
 46310                                  ;									      
 46311                                  ;**************************************************************************
 46312                                  
 46313                                  XMMDisableA20:
 46314 0000113D 53                      	push	bx
 46315 0000113E 50                      	push	ax
 46316                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46317 0000113F B406                    	mov	ah,6
 46318 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46319 00001146 58                      	pop	ax
 46320 00001147 5B                      	pop	bx
 46321 00001148 C3                      	retn
 46322                                  
 46323                                  ; The entry point in the BIOS XMS driver is defined here.
 46324                                  
 46325                                  XMMcontrol:
 46326 00001149 00000000                	dd	0
 46327                                  
 46328                                  ;--------------------------------------------------------------------------
 46329                                  ;
 46330                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46331                                  ;									      
 46332                                  ;	This routine is used to query the A20 state in		 	      
 46333                                  ;	the system using XMM calls.					      
 46334                                  ;									      
 46335                                  ;	ENTRY: none		
 46336                                  ;
 46337                                  ;	EXIT : A20 will be ON
 46338                                  ;		
 46339                                  ; 	USES : NONE								      
 46340                                  ;									      
 46341                                  ;--------------------------------------------------------------------------
 46342                                  
 46343                                  ; 19/09/2023
 46344                                  ;LowMemory:	; label dword		; Set equal to 0000:0080
 46345                                  ;	dw	00080h
 46346                                  ;	dw	00000h
 46347                                  ;
 46348                                  ;HighMemory:	; label dword
 46349                                  ;	dw	00090h			; Set equal to FFFF:0090
 46350                                  ;	dw	0FFFFh
 46351                                  
 46352                                  EnsureA20ON:
 46353 0000114D 9C                      	pushf
 46354 0000114E 1E                      	push    ds
 46355 0000114F 06                      	push	es
 46356 00001150 51                      	push	cx
 46357 00001151 56                      	push	si
 46358 00001152 57                      	push	di
 46359                                  
 46360                                  	; 19/09/2023
 46361                                  	;lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46362                                  	;les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46363                                  
 46364 00001153 31FF                    	xor	di,di
 46365 00001155 8EC7                    	mov	es,di
 46366 00001157 4F                      	dec	di
 46367 00001158 BE9000                  	mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46368 0000115B 8EDF                    	mov	ds,di
 46369 0000115D BF8000                  	mov	di,80h ; 0000h:0080h	; LowMemory
 46370                                  	
 46371 00001160 B90400                  	mov	cx,4
 46372 00001163 FC                      	cld
 46373 00001164 F3A7                    	repe    cmpsw
 46374                                  
 46375 00001166 7407                    	jz	short EA20_OFF
 46376                                  EA20_RET:
 46377 00001168 5F                      	pop	di
 46378 00001169 5E                      	pop	si
 46379 0000116A 59                      	pop	cx
 46380 0000116B 07                      	pop	es
 46381 0000116C 1F                      	pop	ds
 46382 0000116D 9D                      	popf
 46383 0000116E C3                      	retn
 46384                                  
 46385                                  EA20_OFF:
 46386                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46387                                  	; NOTE: ints are disabled at this point.
 46388                                  
 46389 0000116F 53                      	push	bx
 46390 00001170 50                      	push	ax
 46391                                  
 46392 00001171 8CD0                    	mov	ax,ss			; save user's stack pointer
 46393 00001173 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46394 00001177 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46395 0000117C 8CC8                    	mov	ax,cs
 46396 0000117E 8ED0                    	mov	ss,ax
 46397 00001180 BC[A007]                	mov	sp,AUXSTACK
 46398                                  					; ss:sp -> DOSDATA:AuxStack
 46399                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46400 00001183 B405                    	mov	ah,5
 46401 00001185 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46402 0000118A 09C0                    	or	ax,ax
 46403 0000118C 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46404                                  
 46405 0000118E 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46406 00001192 8ED0                    	mov	ss,ax
 46407 00001194 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46408                                  
 46409 00001199 58                      	pop	ax
 46410 0000119A 5B                      	pop	bx
 46411                                  
 46412 0000119B EBCB                    	jmp	short EA20_RET
 46413                                  
 46414                                  XMMerror:				; M006 - Start
 46415 0000119D B40F                    	mov	ah,0Fh			; get video mode
 46416 0000119F CD10                    	int	10h
 46417 000011A1 3C07                    	cmp	al,7			; Q: are we an MDA
 46418 000011A3 7406                    	je	short XMMcont			; Y: do not change mode
 46419 000011A5 30E4                    	xor	ah,ah ; 0			; set video mode
 46420 000011A7 B002                    	mov	al,02h			; 80 X 25 text
 46421 000011A9 CD10                    	int	10h
 46422                                  XMMcont:
 46423 000011AB B405                    	mov	ah,05h			; set display page
 46424 000011AD 30C0                    	xor	al,al			; page 0
 46425 000011AF CD10                    	int	10h
 46426                                  	
 46427 000011B1 BE[8E12]                	mov	si,XMMERRMSG
 46428 000011B4 0E                      	push	cs
 46429 000011B5 1F                      	pop	ds
 46430 000011B6 FC                      	cld				; clear direction flag
 46431                                  XMMprnt:
 46432 000011B7 AC                      	lodsb
 46433 000011B8 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46434 000011BA 7409                    	jz	short XMMStall		; function 0Eh	
 46435 000011BC B40E                    	mov	ah,0Eh
 46436 000011BE BB0700                  	mov	bx,7
 46437 000011C1 CD10                    	int	10h
 46438 000011C3 EBF2                    	jmp	short XMMprnt
 46439                                  
 46440                                  XMMStall:
 46441 000011C5 FB                      	sti				; allow the user to warm boot
 46442 000011C6 EBFD                    	jmp	short XMMStall		; M006 - End
 46443                                  
 46444                                  ;---------------------------------------------------------------------------
 46445                                  
 46446                                  ; 27/04/2019 - Retro DOS v4.0
 46447                                  
 46448                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46449                                  ALTAH	equ 0Ch
 46450                                  
 46451                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46452                                  ;table was different for this. Segments will be patched in at init time.
 46453                                  
 46454                                  OldInstanceJunk:
 46455 000011C8 7000                    	dw	70h	;segment of BIOS
 46456 000011CA 0000                    	dw	0	;indicate stacks in SYSINIT area
 46457 000011CC 0600                    	dw	6	;5 instance items
 46458                                  
 46459                                  	;dw	0,offset dosdata:contpos, 2
 46460                                  	;dw	0,offset dosdata:bcon, 4
 46461                                  	;dw	0,offset dosdata:carpos,106h
 46462                                  	;dw	0,offset dosdata:charco, 1
 46463                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46464                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46465                                  
 46466 000011CE 0000[2200]0200          	dw	0,CONTPOS,2
 46467 000011D4 0000[3200]0400          	dw	0,BCON,4
 46468 000011DA 0000[F901]0601          	dw	0,CARPOS,106h
 46469 000011E0 0000[0003]0100          	dw	0,CHARCO,1
 46470 000011E6 0000[C00F]2200          	dw	0,exec_init_SP,34
 46471 000011EC 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46472                                  
 46473                                  ;---------------------------------------------------------------------------
 46474                                  
 46475                                  ; M021-
 46476                                  ;
 46477                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46478                                  ; 	takes control of the HMA. When running, this word is a reliable
 46479                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46480                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46481                                  
 46482                                  DosHasHMA:
 46483 000011F2 00                      	db	0
 46484                                  FixExePatch:
 46485 000011F3 0000                    	dw	0		; M012
 46486                                  
 46487                                  ; 28/12/2022 - Retro DOS v4.1
 46488                                  ;RationalPatchPtr:
 46489                                  ;	dw	0		; M012
 46490                                  
 46491                                  ; End M021
 46492                                  
 46493                                  ;---------------------------------------------------------------------------
 46494                                  
 46495                                  ; 28/12/2022 - Retro DOS v4.1
 46496                                  %if 0
 46497                                  
 46498                                  ; M020 Begin
 46499                                  
 46500                                  RatBugCode:	; proc	far
 46501                                  	push	cx
 46502                                  	mov	cx,[10h]
 46503                                  rbc_loop:
 46504                                  	;loop	$
 46505                                  	loop	rbc_loop
 46506                                  	pop	cx
 46507                                  	retf
 46508                                  		
 46509                                  ; M020 End
 46510                                  
 46511                                  %endif
 46512                                  
 46513                                  ;---------------------------------------------------------------------------
 46514                                  	
 46515                                  UmbSave1:
 46516                                  	;db	11 dup (?)	; M023
 46517 000011F5 00<rep Bh>              	times	11 db 0	
 46518                                  
 46519                                  ; DOSDATA:122Ah
 46520                                  
 46521                                  Mark3:	; label byte
 46522                                  
 46523                                  ;IF2
 46524                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46525                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46526                                  ;	ENDIF
 46527                                  ;ENDIF
 46528                                  
 46529                                  ;############################################################################
 46530                                  ;
 46531                                  ; ** HACK FOR DOS 4.0 REDIR **
 46532                                  ;
 46533                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46534                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46535                                  ; COUNTRY_CDPG if it can. 
 46536                                  ;
 46537                                  ; MARK3 SHOULD NOT BE > 122AH 
 46538                                  ;
 46539                                  ; As of 9/6/90, this area is FULL!
 46540                                  ;
 46541                                  ;############################################################################
 46542                                   
 46543                                  	;ORG	0122Ah
 46544                                  
 46545                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46546                                  
 46547                                  ; The following table is used for DOS 3.3
 46548                                  ;DOS country and code page information is defined here for DOS 3.3.
 46549                                  ;The initial value for ccDosCountry is 1 (USA).
 46550                                  ;The initial value for ccDosCodepage is 850.
 46551                                  
 46552                                  ; country and code page information
 46553                                  ; ---------------------------------------------------------------------------
 46554                                  COUNTRY_CDPG:	; label  byte
 46555 00001200 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46556 00001208 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46556 00001211 53595300           
 46557                                  	;db   51 dup (?)
 46558 00001215 00<rep 33h>             	times 51 db 0
 46559                                  ; ------------------------------------------------<MSKK01>-------------------
 46560                                  ;ifdef	DBCS
 46561                                  ;  ifdef JAPAN
 46562                                  ;	dw   932			; system code page id (JAPAN)
 46563                                  ;  endif
 46564                                  ;  ifdef TAIWAN
 46565                                  ;	dw   938			; system code page id (TAIWAN)
 46566                                  ;  endif
 46567                                  ;  ifdef KOREA
 46568                                  ;	dw   934			; system code page id (KOREA IBM)
 46569                                  ;  endif
 46570                                  ;else
 46571 00001248 B501                    	dw   437			; system code page id
 46572                                  ;endif
 46573                                  ; ------------------------------------------------<MSKK01>-------------------
 46574 0000124A 0600                    	dw   6				; number of entries
 46575 0000124C 02                      	db   SetUcase  ; 2		; Ucase type
 46576 0000124D [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46577 0000124F 0000                    	dw   0				; segment of poiter
 46578 00001251 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46579 00001252 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46580 00001254 0000                    	dw   0				; segment of poiter
 46581 00001256 05                      	db   SetFileList ; 5		; valid file chars type
 46582 00001257 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46583 00001259 0000                    	dw   0				; segment of poiter
 46584 0000125B 06                      	db   SetCollate	; 6		; collate type
 46585 0000125C [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46586 0000125E 0000                    	dw   0				; segment of poiter
 46587 00001260 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46588 00001261 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46589 00001263 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46590 00001265 01                      	db   SetCountryInfo  ; 1	; country info type
 46591 00001266 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46592                                  ; ------------------------------------------------<MSKK01>-------------------
 46593                                  ;ifdef	DBCS
 46594                                  ;	...... 
 46595                                  ;else
 46596 00001268 0100                    	dw   1				; USA country id
 46597 0000126A B501                    	dw   437			; USA system code page id
 46598 0000126C 0000                    	dw   0 				; date format
 46599 0000126E 2400000000              	db   '$',0,0,0,0		; currency symbol
 46600 00001273 2C00                    	db   ',',0			; thousand separator
 46601 00001275 2E00                    	db   '.',0			; decimal separator
 46602 00001277 2D00                    	db   '-',0			; date separator
 46603 00001279 3A00                    	db   ':',0			; time separator
 46604 0000127B 00                      	db   0				; currency format flag
 46605 0000127C 02                      	db   2				; # of digits in currency
 46606 0000127D 00                      	db   0 				; time format
 46607 0000127E [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46608 00001280 0000                    	dw   0				; segment of entry point
 46609 00001282 2C00                    	db   ',',0			; data list separator
 46610 00001284 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46610 0000128D 00                 
 46611                                  ;endif
 46612                                  ; ------------------------------------------------<MSKK01>-------------------
 46613                                  
 46614                                  ; 27/04/2019 - Retro DOS v4.0
 46615                                  
 46616                                  ;include msdos.cl2			; XMMERRMSG
 46617                                  
 46618                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 46619                                  
 46620                                  XMMERRMSG:
 46621 0000128E 0D0A                    	db	0Dh,0Ah
 46622 00001290 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46622 00001299 617265204572726F72-
 46622 000012A2 0D0A24             
 46623                                  
 46624                                  ; DOSDATA ends
 46625                                  
 46626                                  ; 05/11/2022
 46627                                  ;----------------------------------------------------------------------------
 46628                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46629                                  ;----------------------------------------------------------------------------
 46630                                  
 46631                                  ; 28/12/2022 - Retro DOS v4.1
 46632                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46633                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46634                                  ;----------------------------------------------------------------------------
 46635                                  %if 0
 46636                                  
 46637                                  ;----------------------------------------------------------------------------
 46638                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46639                                  
 46640                                  ;============================================================================
 46641                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46642                                  ;============================================================================
 46643                                  ; 27/04/2019 - Retro DOS 4.0
 46644                                  
 46645                                  ;DOSDATA Segment
 46646                                  
 46647                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46648                                  
 46649                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46650                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46651                                  
 46652                                  ; first and second DOS patches
 46653                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46654                                  ;
 46655                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46656                                  ;	DVRDLP:
 46657                                  ;	DVWRTLP:
 46658                                  ;
 46659                                  ;
 46660                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46661                                  ;	lds	si,si+7 				  ; sf_devptr
 46662                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46663                                  
 46664                                  DOSP1_ID:	db	036h,0C5h,036h
 46665                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46666                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46667                                  
 46668                                  		db	90h, 90h
 46669                                  
 46670                                  DOSP12_ID:	db	036h,0C5h,036h
 46671                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46672                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46673                                  
 46674                                  ; DOSDATA:12E3h
 46675                                  
 46676                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46677                                  ;
 46678                                  ; Code in disk.asm, 1 location
 46679                                  ;	GETBUF:
 46680                                  ;
 46681                                  ; 051h	push	cx	<- begin special int28 mode
 46682                                  ;	push	es
 46683                                  ;	push	di
 46684                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46685                                  ;	call	????	; $STD_CON_STRING_INPUT
 46686                                  ;	pop	di
 46687                                  ;	pop	es
 46688                                  ; 059h	pop	cx	<- end special int28 mode
 46689                                  
 46690                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46691                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46692                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46693                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46694                                  DOSP4_ID:	db	059h			; pop cx
 46695                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46696                                  	
 46697                                  ; DOSDATA:12EFh
 46698                                  
 46699                                  ; Fifth DOS patch - System call 40h (Write) to console
 46700                                  ;
 46701                                  ; Code in disk.asm, 1 location
 46702                                  ;
 46703                                  ;		push	cx
 46704                                  ;      WRCONLP: lodsb
 46705                                  ;		cmp	al,1Ah
 46706                                  ;		jz	????
 46707                                  ;		call	????	<- "simulate" int28 event
 46708                                  ;		loop	WRCONLP
 46709                                  ;      CONEOF:	pop	ax
 46710                                  
 46711                                  DOSP5_ID:	db	051h			; push cx
 46712                                  		db	0ACh,03Ch,01Ah,074h,005h
 46713                                  		db	0E8h			; call
 46714                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46715                                  
 46716                                  ; DOSDATA:12F6h
 46717                                  
 46718                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46719                                  ;
 46720                                  ; Code in disp.asm, 1 location
 46721                                  ;
 46722                                  ;
 46723                                  ;	mov [SaveDS],ds
 46724                                  ;	mov [SaveBX],bx
 46725                                  ;	mov bx,cs
 46726                                  ;	mov ds,bx
 46727                                  ;	inc [indos]
 46728                                  ;	xor ax,ax
 46729                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46730                                  
 46731                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46732                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46733                                  		db	02Eh,089h,01Eh
 46734                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46735                                  		db	08Ch,0CBh		; mov bx,cs
 46736                                  		db	08Eh,0DBh		; mov ds,bx
 46737                                  		db	0FEh,006h
 46738                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46739                                  		db	033h,0C0h		; xor ax,ax
 46740                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46741                                  
 46742                                  ; DOSDATA:130Ah
 46743                                  
 46744                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46745                                  ;
 46746                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46747                                  ;
 46748                                  ;
 46749                                  ;
 46750                                  ;	push	ax
 46751                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46752                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46753                                  ;	pop	ax
 46754                                  ;	jz	????
 46755                                  
 46756                                  DOSP8_ID:	db	050h			; push ax
 46757                                  		db	036h,0A1h
 46758                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46759                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46760                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46761                                  		db	02Fh,058h		; pop  ax
 46762                                  
 46763                                  ; DOSDATA:1314h
 46764                                  
 46765                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46766                                  ;
 46767                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46768                                  ;   a yeild when a character is not ready to be read.
 46769                                  ;
 46770                                  ; Code in disk.asm, 3 locations
 46771                                  ;
 46772                                  ;   DVRDRAW:
 46773                                  ;	    PUSH    ES
 46774                                  ;	    POP     DS
 46775                                  ;   ReadRawRetry:				<- Patch 10
 46776                                  ;	    MOV     BX,DI
 46777                                  ;	    XOR     AX,AX			<- Reenter #2
 46778                                  ;	    MOV     DX,AX
 46779                                  ;	    call    SETREAD
 46780                                  ;	    PUSH    DS				<- Reenter #1
 46781                                  ;	    LDS     SI,[THISSFT]
 46782                                  ;	    call    DEVIOCALL
 46783                                  ;	    MOV     DX,DI
 46784                                  ;	    MOV     AH,86H
 46785                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46786                                  ;	    TEST    DI,STERR
 46787                                  ;	    JZ	    CRDROK
 46788                                  ;	    call    CHARHARD
 46789                                  ;	    MOV     DI,DX
 46790                                  ;	    OR	    AL,AL
 46791                                  ;	    JZ	    CRDROK
 46792                                  ;	    CMP     AL,3
 46793                                  ;	    JZ	    CRDFERR
 46794                                  ;	    POP     DS
 46795                                  ;	    JMP     ReadRawRetry
 46796                                  ;
 46797                                  ;   CRDFERR:
 46798                                  ;	    POP     DI				<- Patch 11
 46799                                  ;   DEVIOFERR:
 46800                                  ;	    LES     DI,[THISSFT]
 46801                                  ;	    jmp     SET_ACC_ERR_DS
 46802                                  ;
 46803                                  ;   CRDROK:
 46804                                  ;	    POP     DI				<- Patch 12
 46805                                  ;	    MOV     DI,DX
 46806                                  ;	    ADD     DI,[CALLSCNT]
 46807                                  ;	    JMP     SHORT ENDRDDEVJ3
 46808                                  
 46809                                  DOSP10_ID:		db	006H,01FH
 46810                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46811                                  DOSP10_LOC:		db	08BH,0DFH
 46812                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46813                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46814                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46815                                  			db	0DFH,00EH
 46816                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46817                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46818                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46819                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46820                                  			db	009H,003H
 46821                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46822                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46823                                  			db	01FH,0EBH,0CFH
 46824                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46825                                  			db	05FH
 46826                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46827                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46828                                  
 46829                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46830                                  			db	05FH,08BH,0FAH
 46831                                  ; DOSDATA:1353h
 46832                                  
 46833                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46834                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46835                                  ;
 46836                                  ;	    Sets focus to current VM so user can see fatal message.
 46837                                  ;
 46838                                  ;
 46839                                  ;	l0: lodsb		<- Setfocus here
 46840                                  ;	    cmp al, '$'
 46841                                  ;	    je l1
 46842                                  ;	    mov bl, 7
 46843                                  ;	    mov ah, 0Eh
 46844                                  ;	    int 10h
 46845                                  ;	    jmp l0
 46846                                  ;	l1: jmp $
 46847                                  
 46848                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46849                                  		db	03Ch,024h		;     cmp al, '$'
 46850                                  		db	074h,008h		;     je l1
 46851                                  		db	0B3h,007h		;     mov bl, 7
 46852                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46853                                  		db	0CDh,010h		;     int 10h
 46854                                  		db	0EBh,0F3h		;     jmp l0
 46855                                  		db	0EBh,0FEh		; l1: jmp $
 46856                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46857                                  
 46858                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46859                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46860                                  
 46861                                  ; 06/12/2022
 46862                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46863                                  
 46864                                  ; DOSDATA ends
 46865                                  
 46866                                  ;============================================================================
 46867                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46868                                  ;============================================================================
 46869                                  ; 27/04/2019 - Retro DOS 4.0
 46870                                  
 46871                                  ;mpatch.asm -- holds data patch location for callouts 
 46872                                  ; -- allocate cluster in rom.asm
 46873                                  ;
 46874                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46875                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46876                                  ; cluster allocation, however it can be expanded to be used by other
 46877                                  ; patches. This is important since we have an easy-access pointer to
 46878                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46879                                  ; only patch out a far call/retf, so any space after that could be
 46880                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46881                                  ; to call out here.
 46882                                  ;
 46883                                  ; Currently, we allocate only the minimum space required for the 6
 46884                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46885                                  ; to reserve space here if your new data will be position dependent
 46886                                  ; and would prohibit growing of this table.
 46887                                  ;       
 46888                                  ;history	-	created 8-7-92 by scottq
 46889                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46890                                  ;
 46891                                  ;Exported Functions
 46892                                  ;==================
 46893                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46894                                  
 46895                                  ; DosData Segment
 46896                                  
 46897                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46898                                  
 46899                                  ; ---------------------------------------------------------------------------
 46900                                  
 46901                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46902                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46903                                  ; greater). Added to this file because it needed to be somewhere and is
 46904                                  ; 'patch' related.
 46905                                  
 46906                                  Rational386PatchPtr:
 46907                                  	dw	0	; points to patch routine or RET instr.
 46908                                  ; ---------------------------------------------------------------------------
 46909                                  
 46910                                  MagicPatch:
 46911                                  ;MagicPatch proc far
 46912                                          retf            ;default is to just return to allocate
 46913                                          nop             ;however, this code will be patched
 46914                                          nop             ;by magicdrv.sys to
 46915                                          nop             ; call far ?:?     
 46916                                          nop             ; retf or perhaps just jmp far
 46917                                          nop             ;retf/nop take one byte, so we need six instructions
 46918                                                          ;for 6 byte patch
 46919                                  ;MagicPatch endp
 46920                                  
 46921                                  ; ---------------------------------------------------------------------------
 46922                                  
 46923                                  ;DosData Ends
 46924                                  
 46925                                  ; DOSDATA:136Ah
 46926                                  
 46927                                  ;----------------------------------------------------------------------------
 46928                                  
 46929                                  ;DOSDATALAST SEGMENT
 46930                                  
 46931                                  ; 29/04/2019 - Retro DOS v4.0
 46932                                  
 46933                                  ;----------------------------------------------------------------------------
 46934                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46935                                  
 46936                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 46937                                  
 46938                                  ;align 16
 46939                                  
 46940                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46941                                  
 46942                                  ;----------------------------------------------------------------------------
 46943                                  
 46944                                  %endif	; 05/11/2022
 46945                                  
 46946                                  ; 05/12/2022
 46947                                  ;MSDAT001E:	; label byte
 46948                                  
 46949                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46950                                  DOSDATAEND equ $
 46951                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46952                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46953                                  
 46954                                  ;DOSDATALAST ENDS
 46955                                  
 46956                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46957                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46958                                  ;============================================================================
 46959                                  ;	END
 46960                                  ;============================================================================
 46961                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46962                                  ; -----------------------------
 46963                                  ; MAY 2019, ISTANBUL - TURKIYE.
