     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 04/02/2024 - Retro DOS v4.2 ((Previous: 29/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E93C76                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [7061]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [5616]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [5F16]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [1117]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [2C17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [3217]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [9D15]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [C915]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [7713]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [D013]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [DC13]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [4617]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [5017]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [9B0F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [820E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [1F1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [EF17]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [0E1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [541F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [9517]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [761C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [7A1C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [FE1E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [5B18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [5306]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [7D0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [720E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [2A0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [2C0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [5306]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [5306]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [6B0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [5306]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [7E1C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [821C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [A717]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [7D17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [A30E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [A810]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [721C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [6E1C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [1F0F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [5E0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [7B0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [9A0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [AB0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [630C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [5F0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [3A0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [1461]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [6D0F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [550F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [940E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [3C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [D00E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [6A0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [DA21]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [2621]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [6121]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [326F]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [5B6E]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [8C66]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [9D67]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [0368]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [826F]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [0868]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [3F6F]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [3B22]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [BD68]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [DB68]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [C220]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [0762]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [8163]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [5D63]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [EE5A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [4C61]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [E45A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [0C20]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [6020]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [610F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [D00F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [5E0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [9710]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [A86F]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [6F68]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [B663]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [E40E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [3370]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [1B70]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [1472]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [9C64]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [A569]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [0A69]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [F66D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [5306]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [040F]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [ED0C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [EA0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [D966]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [BF66]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [9A11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [BF66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [5306]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [C970]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [1007]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [3509]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [C82E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [C50E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2F09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [1950]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [6116]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [EF52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [6E58]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [BD2F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [335A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [C872]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [142C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [FE2B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [F00A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [0612]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [6758]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [0612]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [D311]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [EB11]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [C44F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [AB58]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [0A5A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [0766]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [6A6A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [156A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [1B6E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [970B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [300C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [8D0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [B111]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [5869]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [D465]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [F66D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7A06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [5241]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [0612]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [F911]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [A812]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [8C66]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [AE12]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [9D67]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [6A12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [EB12]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [DA12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [0813]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [0C13]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [5306]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[F211]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8474C                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E8B555                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8B10D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8C30D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E87831                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E8B733                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E82A0D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E89103                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E8390D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E85436                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E81231                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7216                    	JC	SHORT SKIPGET
  5022 000005FE E81464                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025 00000603 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5026 00000605 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5027 00000608 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5028 0000060A F9                      	STC				;DCR.			;AN000;
  5029 0000060B A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5030 0000060E C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5031                                  SKIPGET:
  5032 00000614 58                      	POP	AX
  5033 00000615 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5034                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5035                                  	;jnc	short getbp_t
  5036                                  	;retn
  5037                                  getbp_t:
  5038 00000617 C42E[A205]              	LES	BP,[THISCDS]
  5039                                  	; 15/12/2022
  5040 0000061B 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5041                                  	; 07/12/2022
  5042                                  	;TEST	WORD [ES:BP+43H],8000H
  5043                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5044 00000620 7408                    	JZ	SHORT GETBP_CDS
  5045 00000622 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5046 00000628 F9                      	STC
  5047                                  GETBP_RETN:
  5048 00000629 C3                      	RETN
  5049                                  
  5050                                  GETBP_CDS:
  5051                                  	;LES	BP,[ES:BP+45H]
  5052 0000062A 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5053                                  GOTDPB:
  5054                                  	; Load THISDPB from ES:BP
  5055 0000062E 892E[8A05]              	MOV	[THISDPB],BP
  5056 00000632 8C06[8C05]              	MOV	[THISDPB+2],ES
  5057 00000636 C3                      	RETN
  5058                                  
  5059                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5060                                  
  5061                                  ;----------------------------------------------------------------------------
  5062                                  ;
  5063                                  ; Procedure Name : SYS_RETURN
  5064                                  ;
  5065                                  ; These are the general system call exit mechanisms. All internal system
  5066                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5067                                  ; is to set the user's flags and set his AX register for return.
  5068                                  ;
  5069                                  ;----------------------------------------------------------------------------
  5070                                  
  5071                                          ;procedure   SYS_RETURN,NEAR
  5072                                  SYS_RETURN:        
  5073                                          ;entry	SYS_RET_OK
  5074                                  SYS_RET_OK:   
  5075 00000637 E847FE                  	call    Get_User_Stack
  5076                                  		; turn off user's carry flag
  5077                                  SYS_RET_OK_clc: ; 25/06/2019 
  5078                                          ;;and	word [SI+16h],0FFFEh 
  5079                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5080                                          ; 25/06/2019
  5081 0000063A 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5082 0000063E EB10                    	JMP     SHORT DO_RET
  5083                                  
  5084                                          ;entry   SYS_RET_ERR
  5085                                  SYS_RET_ERR:        
  5086 00000640 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5087 00000642 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5088 00000645 E81A00                  	CALL	ErrorMap
  5089                                  
  5090                                  	;entry	From_GetSet
  5091                                  From_GetSet:
  5092 00000648 E836FE                          call    Get_User_Stack
  5093                                  		 ; signal carry to user
  5094                                  	;;or	word [SI+16h],1
  5095                                  	;OR	word [SI+user_env.user_F],f_Carry
  5096                                  	; 25/06/2019
  5097 0000064B 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5098 0000064F F9                      	STC			; also, signal internal error
  5099                                  DO_RET:
  5100                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5101 00000650 8904                    	MOV	[SI],AX
  5102 00000652 C3                      	RETN
  5103                                  
  5104                                  	;entry	FCB_RET_OK
  5105                                  FCB_RET_OK:
  5106                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5107                                  NO_OP:
  5108 00000653 30C0                    	XOR	AL,AL
  5109 00000655 C3                      	retn
  5110                                  
  5111                                  	;entry	FCB_RET_ERR
  5112                                  FCB_RET_ERR:
  5113 00000656 30E4                    	XOR	AH,AH
  5114 00000658 36A3[2403]              	mov	[ss:EXTERR],AX
  5115 0000065C E80300                  	CALL	ErrorMap
  5116 0000065F B0FF                    	MOV	AL,-1
  5117 00000661 C3                      	retn
  5118                                  
  5119                                  	;entry	ErrorMap
  5120                                  ErrorMap:
  5121 00000662 56                      	PUSH	SI
  5122                                  				; ERR_TABLE_21 is now in DOSDATA
  5123 00000663 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5124                                  				; SS override for FAILERR and EXTERR
  5125 00000666 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5126 0000066C 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5127                                  		 ; Ooops, this is the REAL reason
  5128                                  	;mov	word [SS:EXTERR],53h
  5129 0000066E 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5130                                  EXTENDED_NORMAL:
  5131 00000675 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5132 00000678 5E                      	POP	SI
  5133 00000679 C3                      	retn
  5134                                  
  5135                                  	;EndProc SYS_RETURN
  5136                                  
  5137                                  ;---------------------------------------------------------------------------
  5138                                  ;
  5139                                  ; Procedure Name : CAL_LK
  5140                                  ;
  5141                                  ; Inputs:
  5142                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5143                                  ;		(DS NEED not be DOSDATA)
  5144                                  ;	[EXTERR] is set with error
  5145                                  ; Function:
  5146                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5147                                  ; Outputs:
  5148                                  ;	[EXTERR_CLASS] set
  5149                                  ;	[EXTERR_ACTION] set
  5150                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5151                                  ; Destroys SI, FLAGS
  5152                                  ;
  5153                                  ;---------------------------------------------------------------------------
  5154                                  
  5155                                  	;procedure CAL_LK,NEAR
  5156                                  CAL_LK:
  5157 0000067A 1E                      	PUSH	DS
  5158 0000067B 50                      	PUSH	AX
  5159 0000067C 53                      	PUSH	BX
  5160                                  
  5161                                  ;M048	Context DS		; DS:SI -> Table
  5162                                  ;
  5163                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5164                                  ; is DOSDATA
  5165                                  
  5166                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5167                                  	; 15/05/2019 - Retro DOS v4.0
  5168 0000067D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5169                                  
  5170                                  	; 18/07/2018
  5171                                  	;push	ss
  5172                                  	;pop	ds
  5173                                  
  5174 00000682 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5175                                  TABLK1:
  5176 00000686 AC                      	LODSB
  5177                                  
  5178 00000687 3CFF                    	CMP	AL,0FFH
  5179 00000689 7409                    	JZ	short GOT_VALS	; End of table
  5180 0000068B 38D8                    	CMP	AL,BL
  5181 0000068D 7405                    	JZ	short GOT_VALS	; Got entry
  5182 0000068F 83C603                  	ADD	SI,3		; Next table entry
  5183                                  	; 15/08/2018
  5184 00000692 EBF2                    	JMP	short TABLK1
  5185                                  
  5186                                  GOT_VALS:
  5187 00000694 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5188                                  
  5189 00000695 80FCFF                  	CMP	AH,0FFH
  5190 00000698 7404                    	JZ	short NO_SET_ACT
  5191 0000069A 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5192                                  NO_SET_ACT:
  5193 0000069E 3CFF                    	CMP	AL,0FFH
  5194 000006A0 7403                    	JZ	short NO_SET_CLS
  5195 000006A2 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5196                                  NO_SET_CLS:
  5197 000006A5 AC                      	LODSB			; Get LOCUS
  5198                                  
  5199 000006A6 3CFF                    	CMP	AL,0FFH
  5200 000006A8 7403                    	JZ	short NO_SET_LOC
  5201 000006AA A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5202                                  NO_SET_LOC:
  5203 000006AD 5B                      	POP	BX
  5204 000006AE 58                      	POP	AX
  5205 000006AF 1F                      	POP	DS
  5206 000006B0 C3                      	retn
  5207                                  
  5208                                  	;EndProc CAL_LK
  5209                                  
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ;
  5212                                  ; Procedure Name : ETAB_LK
  5213                                  ;
  5214                                  ; Inputs:
  5215                                  ;	AX is error code
  5216                                  ;	[USER_IN_AX] has AH value of system call involved
  5217                                  ; Function:
  5218                                  ;	Make sure error code is appropriate to this call.
  5219                                  ; Outputs:
  5220                                  ;	AX MAY be mapped error code
  5221                                  ;	[EXTERR] = Input AX
  5222                                  ; Destroys ONLY AX and FLAGS
  5223                                  ;
  5224                                  ;---------------------------------------------------------------------------
  5225                                  
  5226                                  	;procedure ETAB_LK,NEAR
  5227                                  
  5228                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5229 000006B1 1E                      	PUSH	DS
  5230 000006B2 56                      	PUSH	SI
  5231 000006B3 51                      	PUSH	CX
  5232 000006B4 53                      	PUSH	BX
  5233                                  
  5234                                  	;Context DS			; SS is DOSDATA
  5235                                  
  5236 000006B5 16                      	push	ss
  5237 000006B6 1F                      	pop	ds
  5238                                  
  5239 000006B7 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5240                                  
  5241                                  					; I21_MAP_E_TAB is now in DOSCODE
  5242 000006BA BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5243 000006BD 88C7                    	MOV	BH,AL			; Real code to BH
  5244 000006BF 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5245                                  TABLK2:
  5246                                  	; 15/05/2019 - Retro DOS v4.0
  5247 000006C3 2E                      	cs
  5248 000006C4 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5249                                  	
  5250                                  	; 18/07/2018 - Retro DOS v3.0
  5251                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5252                                  
  5253 000006C5 3CFF                    	CMP	AL,0FFH 		; End of table?
  5254 000006C7 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5255 000006C9 38D8                    	CMP	AL,BL			; Found call?
  5256 000006CB 740C                    	JZ	short GOT_CALL		; Yes
  5257 000006CD 86E0                    	XCHG	AH,AL			; Count to AL
  5258 000006CF 30E4                    	XOR	AH,AH			; Make word for add
  5259 000006D1 01C6                    	ADD	SI,AX			; Next table entry
  5260 000006D3 EBEE                    	JMP	short TABLK2
  5261                                  
  5262                                  NOT_IN_TABLE:
  5263 000006D5 88F8                    	MOV	AL,BH			; Restore original code
  5264 000006D7 EB0C                    	JMP	SHORT NO_MAP
  5265                                  
  5266                                  GOT_CALL:
  5267 000006D9 88E1                    	MOV	CL,AH
  5268 000006DB 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5269                                  CHECK_CODE:
  5270                                  	; 15/05/2019 - Retro DOS v4.0
  5271 000006DD 2E                      	cs
  5272 000006DE AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5273                                  
  5274                                  	; 18/07/2018
  5275                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5276                                  
  5277 000006DF 38F8                    	CMP	AL,BH			; Code OK?
  5278 000006E1 7402                    	JZ	short NO_MAP		; Yes
  5279 000006E3 E2F8                    	LOOP	CHECK_CODE
  5280                                  NO_MAP:
  5281 000006E5 30E4                    	XOR	AH,AH			; AX is now valid code
  5282 000006E7 5B                      	POP	BX
  5283 000006E8 59                      	POP	CX
  5284 000006E9 5E                      	POP	SI
  5285 000006EA 1F                      	POP	DS
  5286 000006EB C3                      	retn
  5287                                  
  5288                                  	;EndProc ETAB_LK
  5289                                  
  5290                                  ; 18/07/2018 - Retro DOS v3.0
  5291                                  ;---------------------------------------------------------------------------
  5292                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5293                                  
  5294                                  ;IF installed ; (*)
  5295                                  
  5296                                  ;---------------------------------------------------------------------------
  5297                                  ;
  5298                                  ; Procedure Name : SetBad
  5299                                  ;
  5300                                  ; SetBad sets up info for bad functions
  5301                                  ;
  5302                                  ;---------------------------------------------------------------------------
  5303                                  
  5304                                  SetBad:
  5305                                  	;mov	ax,1
  5306 000006EC B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5307                                  
  5308                                  	; MSDOS 3.3
  5309                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5310                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5311                                  
  5312                                  ;	set up ds to point to DOSDATA
  5313                                  
  5314                                  	; 15/05/2019 - Retro DOS v4.0
  5315                                  	; MSDOS 6.0
  5316 000006EF 1E                      	push	ds
  5317                                  
  5318                                  	;getdseg <ds>
  5319 000006F0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5320                                  
  5321 000006F5 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5322                                  
  5323 000006FA 1F                      	pop	ds	  	;hkn; restore ds
  5324                                  
  5325 000006FB F9                      	STC
  5326 000006FC C3                      	retn
  5327                                  
  5328                                  ;--------------------------------------------------------------------------
  5329                                  ;
  5330                                  ; Procedure Name : BadCall
  5331                                  ;
  5332                                  ; BadCall is the initial routine for bad function calls
  5333                                  ;
  5334                                  ;--------------------------------------------------------------------------
  5335                                  
  5336                                  BadCall:
  5337 000006FD E8ECFF                  	call	SetBad
  5338 00000700 CB                      	retf
  5339                                  
  5340                                  ;--------------------------------------------------------------------------
  5341                                  ;
  5342                                  ; OKCall always sets carry to off.
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------
  5345                                  
  5346                                  OKCall:
  5347 00000701 F8                      	CLC
  5348 00000702 CB                      	retf
  5349                                  
  5350                                  ;---------------------------------------------------------------------------
  5351                                  ;
  5352                                  ; Procedure Name : INT2F
  5353                                  ;
  5354                                  ; INT 2F handler works as follows:
  5355                                  ;   PUSH    AX
  5356                                  ;   MOV     AX,multiplex:function
  5357                                  ;   INT     2F
  5358                                  ;   POP     ...
  5359                                  ; The handler itself needs to make the AX available for the various routines.
  5360                                  ;
  5361                                  ;----------------------------------------------------------------------------
  5362                                  
  5363                                  ; 15/05/2019 - Retro DOS v4.0
  5364                                  
  5365                                  ;KERNEL_SEGMENT equ 70h
  5366                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5367                                  DOSBIODATASEG equ 70h
  5368                                  
  5369                                  ; retrodos4.s - offset in BIOSDATA
  5370                                  bios_i2f equ 5
  5371                                  
  5372                                  ;PUBLIC	Int2F
  5373                                  ;INT2F	PROC	FAR
  5374                                  
  5375                                  ; 15/05/2019
  5376                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5377                                  
  5378                                  ; 04/11/2022
  5379                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5380                                  
  5381                                  	; 05/01/2024
  5382                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5383                                  	; 18/07/2018 - Retro DOS v3.0
  5384                                  INT2F:
  5385                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5386                                  INT2FNT:
  5387                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5388 00000703 FB                      	STI
  5389                                  	;cmp	ah,11h
  5390 00000704 80FC11                  	CMP	AH,MultNET
  5391 00000707 750A                    	JNZ	short INT2FSHR
  5392                                  TestInstall:
  5393 00000709 08C0                    	OR	AL,AL
  5394 0000070B 7403                    	JZ	short Leave2F
  5395                                  BadFunc:
  5396 0000070D E8DCFF                  	CALL	SetBad
  5397                                  
  5398                                  	;entry	Leave2F
  5399                                  Leave2F:
  5400 00000710 CA0200                  	RETF	2			; long return + clear flags off stack
  5401                                  
  5402                                  INT2FSHR:
  5403                                  	;cmp	ah,10h
  5404 00000713 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5405 00000716 74F1                    	JZ	short TestInstall	; yes, check for installation
  5406                                  INT2FNLS:
  5407                                  	;cmp	ah,14h
  5408 00000718 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5409 0000071B 74EC                    	JZ	short TestInstall	; yes check for installation
  5410                                  INT2FDOS:
  5411                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5412                                  
  5413                                  	; 18/07/2018
  5414                                  	; MSDOS 3.3
  5415                                  	;;cmp	ah,12h	
  5416                                  	;CMP	AH,MultDOS
  5417                                  	;jz	short DispatchDOS
  5418                                  	;iret
  5419                                  
  5420                                  	; 15/05/2019
  5421                                  	; MSDOS 6.0
  5422                                  	;cmp	ah,12h	; 07/12/2022
  5423 0000071D 80FC12                  	CMP	AH,MultDOS
  5424 00000720 7503                    	JNZ	short check_win		;check if win386 broadcast
  5425 00000722 E9F201                  	jmp	DispatchDOS
  5426                                  
  5427                                  	; .... win386 .... 
  5428                                  
  5429                                  check_win:
  5430                                  	;cmp	ah,16h
  5431 00000725 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5432 00000728 7408                    	je	short Win386_Msg
  5433                                  
  5434                                  	; M044
  5435                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5436                                  	; of Windows. If so, do special action of going and saving last para
  5437                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5438                                  	; bug
  5439                                  
  5440 0000072A 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5441                                  	;jne	short next_i2f		; no, chain on
  5442                                  	; 15/12/2022
  5443                                  	;jmp	winold_swap		; yes, do desired action
  5444 0000072D 7442                    	je	short winold_swap
  5445 0000072F E90501                  	jmp	next_i2f
  5446                                  
  5447                                  	; 15/12/2022
  5448                                  ;next_i2f:
  5449                                  ;	;;;jmp	bios_i2f
  5450                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5451                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5452                                  ;	; 04/11/2022
  5453                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5454                                  
  5455                                  ;	IRET				; This assume that we are at the head
  5456                                  					; of the list
  5457                                  ;INT2F	ENDP
  5458                                  
  5459                                  ; 15/05/2019 - Retro DOS v4.0
  5460                                  
  5461                                  ; We have received a message from Win386. There are three possible
  5462                                  ; messages we could get from Win386:
  5463                                  ;
  5464                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5465                                  ;		  to the Win386 startup info structure.
  5466                                  ; Exit		- for this, we clear the IsWin386 flag.
  5467                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5468                                  ;		  has already been handled. this is indicated by setting
  5469                                  ;		  CX to a non-zero value.
  5470                                  
  5471                                  Win386_Msg:
  5472 00000732 1E                      	push	ds
  5473                                  
  5474                                  	;getdseg <DS>			; ds is DOSDATA
  5475 00000733 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5476                                  
  5477                                  	; For WIN386 2.xx instance data
  5478                                  
  5479 00000738 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5480 0000073A 7503                    	jne	short Win386_Msg_exit
  5481 0000073C E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5482                                  Win386_Msg_exit:
  5483 0000073F 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5484 00000741 7503                    	jne	short Win386_Msg_devcall
  5485 00000743 E92C01                  	jmp	Win386_Leaving
  5486                                  Win386_Msg_devcall:
  5487 00000746 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5488 00000748 7503                    	jne	short Win386_Msg_init
  5489 0000074A E96001                  	jmp	Win386_Query
  5490                                  Win386_Msg_init:
  5491 0000074D 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5492 0000074F 7403                    	je	short Win386_Starting
  5493 00000751 E9E200                  	jmp	win_nexti2f		; no, return
  5494                                  Win386_Starting:
  5495                                  	; 17/12/2022
  5496 00000754 F6C201                  	test	dl,1
  5497                                  	;test	dx,1			; is this really win386?
  5498 00000757 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5499 00000759 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5500                                  Win386_vchk:
  5501                                  	; M018 -- start of block changes
  5502                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5503                                  	; than 030Ah, we skip the VxD presence check
  5504                                  
  5505                                  ;M067 -- Begin changes
  5506                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5507                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5508                                  ;So, we null out the VxD ptr before the check.
  5509                                  
  5510                                  	;mov	word [Win386_Info+6],0
  5511 0000075C C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5512                                  	;mov	word [Win386_Info+8],0
  5513 00000762 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5514                                  
  5515                                  ;M067 -- End changes
  5516                                  
  5517                                  ;ifdef JAPAN
  5518                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5519                                  ;else
  5520 00000768 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5521                                  ;endif
  5522                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5523 0000076C 724E                    	jb	short Win386_vxd
  5524 0000076E E9DD00                  	jmp	noVxD31
  5525                                  
  5526                                  	; 15/12/2022
  5527                                  winold_swap:
  5528 00000771 1E                      	push	ds
  5529 00000772 06                      	push	es
  5530 00000773 56                      	push	si
  5531 00000774 57                      	push	di
  5532 00000775 51                      	push	cx
  5533                                  
  5534                                  	;getdseg <ds>			;ds = DOSDATA
  5535 00000776 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5536                                  
  5537 0000077B 3C01                    	cmp	al,1			;swap Windows out call
  5538 0000077D 751B                    	jne	short swapin		;no, check if Swap in call
  5539 0000077F E88801                  	call	getwinlast
  5540 00000782 1E                      	push	ds
  5541 00000783 07                      	pop	es
  5542 00000784 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5543 00000786 31F6                    	xor	si,si
  5544 00000788 BF[0600]                	mov	di,WinoldPatch1
  5545 0000078B B90800                  	mov	cx,8
  5546 0000078E FC                      	cld
  5547 0000078F 51                      	push	cx
  5548 00000790 F3A4                    	rep	movsb			;save first 8 bytes
  5549 00000792 59                      	pop	cx
  5550 00000793 BF[CD0D]                	mov	di,WinoldPatch2
  5551 00000796 F3A4                    	rep	movsb			;save next 8 bytes
  5552 00000798 EB1B                    	jmp	short winold_done
  5553                                  swapin:
  5554 0000079A 3C02                    	cmp	al,2			;swap Windows in call?
  5555 0000079C 7517                    	jne	short winold_done	;no, something else, pass it on
  5556 0000079E E86901                  	call	getwinlast
  5557 000007A1 8EC6                    	mov	es,si
  5558 000007A3 31FF                    	xor	di,di
  5559 000007A5 BE[0600]                	mov	si,WinoldPatch1
  5560 000007A8 B90800                  	mov	cx,8
  5561 000007AB FC                      	cld
  5562 000007AC 51                      	push	cx
  5563 000007AD F3A4                    	rep	movsb			;restore first 8 bytes
  5564 000007AF 59                      	pop	cx
  5565 000007B0 BE[CD0D]                	mov	si,WinoldPatch2
  5566 000007B3 F3A4                    	rep	movsb			;restore next 8 bytes
  5567                                  winold_done:
  5568 000007B5 59                      	pop	cx
  5569 000007B6 5F                      	pop	di
  5570 000007B7 5E                      	pop	si
  5571 000007B8 07                      	pop	es
  5572 000007B9 1F                      	pop	ds
  5573 000007BA EB7B                    	jmp	short next_i2f		;chain on
  5574                                  	; 15/12/2022
  5575                                  	;jmp	next_i2f	
  5576                                  
  5577                                  Win386_vxd:
  5578 000007BC 50                      	push	ax
  5579 000007BD 53                      	push	bx
  5580 000007BE 51                      	push	cx
  5581 000007BF 52                      	push	dx
  5582 000007C0 56                      	push	si
  5583 000007C1 57                      	push	di			; save regs !!dont change order!!
  5584                                  
  5585 000007C2 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5586 000007C6 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5587 000007C9 741F                    	je	short Vxd31		; N: continue
  5588                                  					; Y: save arena associated with 
  5589                                  					;    umb_head
  5590                                  
  5591 000007CB C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5592                                  					; umb_arena
  5593 000007D0 1E                      	push	ds
  5594 000007D1 06                      	push	es
  5595                                  
  5596                                  	;mov	ax,ds
  5597                                  	;mov	es,ax			; es - > dosdata
  5598                                  	; 05/01/2024
  5599 000007D2 1E                      	push	ds
  5600 000007D3 07                      	pop	es
  5601                                  
  5602 000007D4 8EDB                    	mov	ds,bx
  5603 000007D6 31F6                    	xor	si,si			; ds:si -> umb_head
  5604                                  
  5605 000007D8 FC                      	cld
  5606                                  
  5607 000007D9 BF[F511]                	mov	di,UmbSave1
  5608 000007DC B90B00                  	mov	cx,11
  5609 000007DF F3A4                    	rep	movsb
  5610                                  
  5611 000007E1 BF[D50D]                	mov	di,UmbSave2
  5612                                  	;mov	cx,5
  5613                                  	; 18/12/2022
  5614 000007E4 B105                    	mov	cl,5
  5615 000007E6 F3A4                    	rep	movsb	
  5616                                  
  5617 000007E8 07                      	pop	es
  5618 000007E9 1F                      	pop	ds			; M062 - End
  5619                                  
  5620                                  Vxd31:
  5621                                  	;test	byte [DOS_FLAG],2
  5622 000007EA F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5623 000007EF 7408                    	jz	short Dont_Supress		; M066
  5624 000007F1 5F                      	pop	di				; M066
  5625 000007F2 5E                      	pop	si				; M066
  5626 000007F3 5A                      	pop	dx				; M066
  5627 000007F4 59                      	pop	cx				; M066
  5628 000007F5 5B                      	pop	bx				; M066
  5629 000007F6 58                      	pop	ax				; M066
  5630 000007F7 EB55                    	jmp	short noVxD31			; M066
  5631                                  
  5632                                  	; We check here if the VxD is available in the root of the boot drive. 
  5633                                  	; We do an extended open to suppress any error messages
  5634                                  	
  5635                                  Dont_Supress:
  5636 000007F9 A0[6900]                	mov	al,[BOOTDRIVE]
  5637 000007FC 0440                    	add	al,'A' - 1		; get drive letter
  5638 000007FE A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5639                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5640                                  	;mov	al,0			; no extended attributes
  5641                                  	; 18/12/2022
  5642 00000801 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5643 00000804 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5644                                  					; no inherit, suppress crit err
  5645 00000807 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5646 0000080A BA0100                  	mov	dx,1			; fail if file does not exist
  5647 0000080D BE[3110]                	mov	si,VxDpath	
  5648                                  					; path of VxD file
  5649 00000810 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5650                                  
  5651 00000813 CD21                    	int	21h			; do extended open
  5652                                  
  5653 00000815 5F                      	pop	di
  5654 00000816 5E                      	pop	si
  5655 00000817 5A                      	pop	dx
  5656 00000818 59                      	pop	cx
  5657                                  
  5658 00000819 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5659                                  
  5660                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5661                                  	; to indicate error to Windows after displaying message to user that 
  5662                                  	; VxD needs to be present to run Windows in enhanced mode.
  5663                                  
  5664 0000081B 52                      	push	dx
  5665 0000081C 1E                      	push	ds
  5666 0000081D 56                      	push	si
  5667 0000081E BE[B209]                	mov	si,NoVxDErrMsg
  5668 00000821 0E                      	push	cs
  5669 00000822 1F                      	pop	ds
  5670 00000823 B96300                  	mov	cx,VxDMesLen ; 99	;
  5671 00000826 B402                    	mov	ah,2			; write char to console
  5672 00000828 FC                      	cld
  5673                                  vxdlp:
  5674 00000829 AC                      	lodsb
  5675 0000082A 86D0                    	xchg	dl,al			; get char in dl
  5676 0000082C CD21                    	int	21h
  5677 0000082E E2F9                    	loop	vxdlp
  5678                                  
  5679 00000830 5E                      	pop	si
  5680 00000831 1F                      	pop	ds
  5681 00000832 5A                      	pop	dx
  5682 00000833 5B                      	pop	bx
  5683 00000834 58                      	pop	ax			;all registers restored
  5684 00000835 41                      	inc	cx			;cx != 0 to indicate error
  5685                                  	; 15/12/22022
  5686                                  	;jmp	win_nexti2f		;chain on
  5687                                  	;jmp	short win_nexti2f
  5688                                  
  5689                                  	; 15/12/2022
  5690                                  win_nexti2f:
  5691 00000836 1F                      	pop	ds
  5692                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5693                                  	; 15/12/2022
  5694                                  next_i2f:
  5695                                  	;;;jmp	bios_i2f
  5696                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5697                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5698                                  	; 04/11/2022
  5699 00000837 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5700                                  
  5701                                  VxDthere:
  5702 0000083C 89C3                    	mov	bx,ax
  5703 0000083E B43E                    	mov	ah,CLOSE ; 3Eh
  5704 00000840 CD21                    	int	21h			;close the file
  5705                                  
  5706                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5707                                  
  5708                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5709                                  	;mov	bx,Win386_Info
  5710                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5711                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5712                                  	; 15/12/2022
  5713 00000842 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5714 00000848 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5715                                  
  5716 0000084C 5B                      	pop	bx
  5717 0000084D 58                      	pop	ax
  5718                                  noVxD31:
  5719                                  	; M018; End of block changes
  5720                                  
  5721 0000084E 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5722 00000853 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5723                                  
  5724                                  	; M002;
  5725                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5726                                  
  5727 00000858 52                      	push	dx			; M002
  5728 00000859 89DA                    	mov	dx,bx			; M002
  5729                                  					; point ES:BX to Win386_Info ; M002
  5730 0000085B BB[E20F]                	mov	bx,Win386_Info 
  5731 0000085E 895702                  	mov	[bx+2],dx		; M002
  5732 00000861 8C4704                  	mov	[bx+4],es		; M002
  5733 00000864 5A                      	pop	dx			; M002
  5734 00000865 1E                      	push	ds			; M002
  5735 00000866 07                      	pop	es			; M002
  5736                                  	;jmp	win_nexti2f		; M002
  5737                                  	; 15/12/2022
  5738 00000867 EBCD                    	jmp	short win_nexti2f
  5739                                  
  5740                                  	; 15/12/2022
  5741                                  	; Code to return Win386 2.xx instance table
  5742                                  OldWin386Init:
  5743 00000869 58                      	pop	ax			; discard ds pushed on stack
  5744 0000086A BE[C811]                	mov	si,OldInstanceJunk 
  5745                                  					; ds:si = instance table
  5746 0000086D B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5747                                  	;jmp	next_i2f
  5748                                  	; 15/12/2022
  5749 00000870 EBC5                    	jmp	short next_i2f
  5750                                  
  5751                                  Win386_Leaving:
  5752                                  	; 15/12/2022
  5753 00000872 F6C201                  	test 	dl,1
  5754                                  	;test	dx,1			; is this really win386?
  5755                                  	;jz	short Win386_Leaving_c
  5756                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5757                                  	; 15/12/2022
  5758 00000875 75BF                    	jnz	short win_nexti2f	
  5759                                  
  5760                                  Win386_Leaving_c:
  5761                                  					; M062 - Start
  5762 00000877 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5763                                  					;    up.
  5764 0000087C 7523                    	jne	short noumb		; N: not saved 
  5765 0000087E C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5766                                  					;    previously saved umb_head
  5767                                  	; 05/01/2024
  5768                                  	;push	ax ; (not necessary)
  5769 00000883 06                      	push	es
  5770 00000884 51                      	push	cx
  5771 00000885 56                      	push	si
  5772 00000886 57                      	push	di
  5773                                  
  5774                                  	;mov	ax,[UMB_HEAD]
  5775                                  	;mov	es,ax
  5776                                  	; 05/01/2024
  5777 00000887 8E06[8C00]              	mov	es,[UMB_HEAD]
  5778 0000088B 31FF                    	xor	di,di			; es:di -> umb_head
  5779                                  
  5780 0000088D FC                      	cld
  5781                                  
  5782 0000088E BE[F511]                	mov	si,UmbSave1
  5783 00000891 B90B00                  	mov	cx,11
  5784 00000894 F3A4                    	rep	movsb
  5785 00000896 BE[D50D]                	mov	si,UmbSave2
  5786                                  	;mov	cx,5
  5787                                  	; 18/12/2022
  5788 00000899 B105                    	mov	cl,5
  5789 0000089B F3A4                    	rep	movsb
  5790                                  
  5791 0000089D 5F                      	pop	di
  5792 0000089E 5E                      	pop	si
  5793 0000089F 59                      	pop	cx
  5794 000008A0 07                      	pop	es
  5795                                  	; 05/01/2024
  5796                                  	;pop	ax
  5797                                  noumb:					; M062 - End
  5798 000008A1 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5799 000008A6 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5800 000008AB EB89                    	jmp	short win_nexti2f
  5801                                  
  5802                                  ;	; 15/12/2022
  5803                                  ;	; Code to return Win386 2.xx instance table
  5804                                  ;OldWin386Init:
  5805                                  ;	pop	ax			; discard ds pushed on stack
  5806                                  ;	mov	si,OldInstanceJunk 
  5807                                  ;					; ds:si = instance table
  5808                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5809                                  ;	;jmp	next_i2f
  5810                                  ;	; 15/12/2022
  5811                                  ;	jmp	short _next_i2f
  5812                                  
  5813                                  Win386_Query:
  5814 000008AD 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5815 000008B0 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5816 000008B2 09C9                    	or	cx,cx			; is it an instance query?
  5817 000008B4 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5818 000008B6 41                      	inc	cx			; indicate that data is instanced
  5819                                  ;
  5820                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5821                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5822                                  ; M001;  
  5823                                  ; M001; OFFSETS STRUC
  5824                                  ; M001; 	Major_version	db	?
  5825                                  ; M001; 	Minor_version	db	?
  5826                                  ; M001; 	SaveDS		dw	?
  5827                                  ; M001; 	SaveBX		dw	?
  5828                                  ; M001; 	Indos		dw	?
  5829                                  ; M001; 	User_id		dw	?
  5830                                  ; M001; 	CritPatch	dw	?
  5831                                  ; M001; OFFSETS	ENDS
  5832                                  ; M001; 
  5833                                  ; M001; User_Id is the only variable really important for proper functioning  
  5834                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5835                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5836                                  ; M001; pass this table because Win386 depends on this table to get the 
  5837                                  ; M001; User_Id offset.
  5838                                  ; M001; 
  5839 000008B7 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5840 000008BA 1E                      	push	ds			; M001
  5841 000008BB 07                      	pop	es			; es:bx points at offset table ; M001
  5842 000008BC EB40                    	jmp	short PopIret		; M001
  5843                                  
  5844                                  ; 15/12/2022
  5845                                  ;	; Code to return Win386 2.xx instance table
  5846                                  ;OldWin386Init:
  5847                                  ;	pop	ax			; discard ds pushed on stack
  5848                                  ;	mov	si,OldInstanceJunk 
  5849                                  ;					; ds:si = instance table
  5850                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5851                                  ;	;jmp	next_i2f
  5852                                  ;	; 15/12/2022
  5853                                  ;	jmp	short _next_i2f
  5854                                  
  5855                                  dosmgr_func:
  5856 000008BE 49                      	dec	cx
  5857 000008BF 7435                    	jz	short win386_patch	; call to patch DOS
  5858 000008C1 49                      	dec	cx
  5859 000008C2 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5860 000008C4 49                      	dec	cx
  5861 000008C5 7439                    	jz	short win386_size	; get size of DOS data structures
  5862 000008C7 49                      	dec	cx
  5863 000008C8 7428                    	jz	short win386_inst	; instance more data
  5864                                  	;dec	cx
  5865                                  	;jnz	short PopIret		; no functions above this
  5866                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5867 000008CA E232                    	loop	PopIret
  5868                                  
  5869                                  	; Get DOS device driver size -- es:di points at device driver header
  5870                                  	; In DOS 4.x, the para before the device header contains an arena 
  5871                                  	; header for the driver.
  5872                                  
  5873 000008CC 8CC0                    	mov	ax,es			; ax = device header segment
  5874                                  
  5875                                  	; We check to see if we have a memory arena for this device driver. 
  5876                                  	; The way to do this would be to look at the previous para to see if
  5877                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5878                                  	; in the arena is the same as the device header segment. These two 
  5879                                  	; checks together should take care of all cases
  5880                                  
  5881 000008CE 48                      	dec	ax			; get arena header
  5882 000008CF 06                      	push	es
  5883 000008D0 8EC0                    	mov	es,ax			; arena header for device driver
  5884                                  
  5885 000008D2 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5886 000008D6 7517                    	jnz	short cantsize		; no, cant size this driver
  5887 000008D8 40                      	inc	ax			; get back device header segment
  5888 000008D9 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5889 000008DD 7510                    	jnz	short cantsize		; no, not a proper arena
  5890                                  
  5891 000008DF 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5892 000008E3 07                      	pop	es
  5893                                  
  5894                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5895                                  	; Speed is not critical and so we choose the shortest method 
  5896                                  	; -- use "mul"
  5897                                  
  5898 000008E4 BB1000                  	mov	bx,16
  5899 000008E7 F7E3                    	mul	bx
  5900 000008E9 89C1                    	mov	cx,ax
  5901 000008EB 89D3                    	mov	bx,dx
  5902 000008ED EB09                    	jmp	short win386_done	; return with device driver size
  5903                                  cantsize:
  5904 000008EF 07                      	pop	es
  5905 000008F0 31C0                    	xor	ax,ax
  5906                                  win386_inst:	; 05/01/2024
  5907 000008F2 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5908 000008F4 EB08                    	jmp	short PopIret		; return
  5909                                  
  5910                                  win386_patch:
  5911                                  	; dx contains bits marking the patches to be applied. We return 
  5912                                  	; the field with all bits set to indicate that all patches have been
  5913                                  	; done
  5914                                  
  5915 000008F6 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5916                                   	;jmp	short win386_done	; done, return
  5917                                  	; 15/12/2022
  5918                                  	; 15/12/2022
  5919                                  win386_done:
  5920 000008F8 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5921 000008FB BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5922                                  PopIret:
  5923 000008FE 1F                      	pop	ds
  5924 000008FF CF                      	iret	
  5925                                  
  5926                                  win386_size:
  5927                                  	; Return the size of DOS data structures -- currently only CDS size
  5928                                  
  5929                                  	; 17/12/2022
  5930 00000900 F6C201                  	test	dl,1
  5931                                  	;test	dx,1			; check for CDS size bit
  5932 00000903 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5933                                  
  5934 00000905 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5935 00000908 EBEE                    	jmp	short win386_done	; return with the size
  5936                                  
  5937                                  ; 05/01/2024
  5938                                  %if 0
  5939                                  win386_inst:
  5940                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5941                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5942                                  	; this by returning a status of not previously instanced. The basic
  5943                                  	; structure of these things have not changed and so the current
  5944                                  	; DOSMGR code should be able to work it out
  5945                                  
  5946                                  	xor	dx,dx			; make sure dx has a not done value
  5947                                  	jmp	short PopIret		; skip done indication
  5948                                  %endif
  5949                                  
  5950                                  	; 15/12/2022
  5951                                  ;win386_done:
  5952                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5953                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5954                                  ;PopIret:
  5955                                  ;	pop	ds
  5956                                  ;	iret				; return back up the chain
  5957                                  
  5958                                  	; 15/12/2022
  5959                                  ;win_nexti2f:
  5960                                  	;pop	ds
  5961                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5962                                  
  5963                                  ;End WIN386 support
  5964                                  
  5965                                  ; 15/05/2019
  5966                                  
  5967                                  ;M044; Start of changes
  5968                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5969                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5970                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5971                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5972                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5973                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5974                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5975                                  ; last para of the Windows memory block and then restore this para on the
  5976                                  ; Windows swapin callout. 
  5977                                  
  5978                                  getwinlast:
  5979                                  	; 07/12/2022
  5980 0000090A 8B36[3003]              	mov	si,[CurrentPDB]
  5981 0000090E 4E                      	dec	si
  5982 0000090F 8EC6                    	mov	es,si
  5983 00000911 2603360300              	add	si,[es:3]
  5984 00000916 C3                      	retn
  5985                                  
  5986                                  ; 15/12/2022
  5987                                  %if 0
  5988                                  winold_swap:
  5989                                  	push	ds
  5990                                  	push	es
  5991                                  	push	si
  5992                                  	push	di
  5993                                  	push	cx
  5994                                  
  5995                                  	;getdseg <ds>			;ds = DOSDATA
  5996                                  	mov	ds,[cs:DosDSeg]
  5997                                  
  5998                                  	cmp	al,1			;swap Windows out call
  5999                                  	jne	short swapin		;no, check if Swap in call
  6000                                  	call	getwinlast
  6001                                  	push	ds
  6002                                  	pop	es
  6003                                  	mov	ds,si			;ds = memory arena of Windows
  6004                                  	xor	si,si
  6005                                  	mov	di,WinoldPatch1
  6006                                  	mov	cx,8
  6007                                  	cld
  6008                                  	push	cx
  6009                                  	rep	movsb			;save first 8 bytes
  6010                                  	pop	cx
  6011                                  	mov	di,WinoldPatch2
  6012                                  	rep	movsb			;save next 8 bytes
  6013                                  	jmp	short winold_done
  6014                                  swapin:
  6015                                  	cmp	al,2			;swap Windows in call?
  6016                                  	jne	short winold_done	;no, something else, pass it on
  6017                                  	call	getwinlast
  6018                                  	mov	es,si
  6019                                  	xor	di,di
  6020                                  	mov	si,WinoldPatch1
  6021                                  	mov	cx,8
  6022                                  	cld
  6023                                  	push	cx
  6024                                  	rep	movsb			;restore first 8 bytes
  6025                                  	pop	cx
  6026                                  	mov	si,WinoldPatch2
  6027                                  	rep	movsb			;restore next 8 bytes
  6028                                  winold_done:
  6029                                  	pop	cx
  6030                                  	pop	di
  6031                                  	pop	si
  6032                                  	pop	es
  6033                                  	pop	ds
  6034                                  	jmp	next_i2f		;chain on
  6035                                  
  6036                                  %endif
  6037                                  
  6038                                  ;M044; End of changes
  6039                                  
  6040                                  ; 15/05/2019
  6041                                  
  6042                                  DispatchDOS:
  6043 00000917 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6044 0000091C 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6045 00000921 50                      	PUSH	AX			; push index
  6046 00000922 55                      	PUSH	BP
  6047 00000923 89E5                    	MOV	BP,SP
  6048                                  		; stack looks like:
  6049                                  		;   0	BP
  6050                                  		;   2	DISPATCH
  6051                                  		;   4	TABLE
  6052                                  		;   6	RETURN
  6053                                  		;   8	LONG-RETURN
  6054                                  		;   C	FLAGS
  6055                                  		;   E	AX
  6056                                  	
  6057 00000925 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6058 00000928 5D                      	POP	BP
  6059 00000929 E8F408                  	call	TableDispatch
  6060 0000092C E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6061                                  
  6062                                  INT2F_etcetera:
  6063                                  	;entry	DosGetGroup
  6064                                  DosGetGroup:
  6065                                  	; MSDOS 3.3
  6066                                  	;push	cs
  6067                                  	;pop	ds
  6068                                  	;retn
  6069                                  
  6070                                  	; MSDOS 6.0
  6071                                  ;SR; Cannot use CS now
  6072                                  ;
  6073                                  ;	PUSH	CS
  6074                                  ;	POP	DS
  6075                                  
  6076                                  	; 04/11/2022
  6077                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6078                                  
  6079                                  	;getdseg <ds>
  6080 0000092F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6081 00000934 C3                      	retn
  6082                                  
  6083                                  	;entry	DOSInstall
  6084                                  DOSInstall:
  6085 00000935 B0FF                    	MOV	AL,0FFh
  6086 00000937 C3                      	retn
  6087                                  
  6088                                  ;ENDIF ; (*)
  6089                                  
  6090                                  
  6091                                  ; 15/05/2019 - Retro DOS v4.0
  6092                                  
  6093                                  ;------------------------------------------------------------------------
  6094                                  ;
  6095                                  ; Procedure Name : RW32_CONVERT
  6096                                  ;
  6097                                  ;Input: same as ABSDRD and ABSDWRT
  6098                                  ;	 ES:BP -> DPB
  6099                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6100                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6101                                  ;	 carry clear, parms ok
  6102                                  ;
  6103                                  ;------------------------------------------------------------------------
  6104                                  
  6105                                  	; 06/01/2024
  6106                                  RW32_CONVERT:
  6107                                  	;inc	cx ; *	; 01 -> 0
  6108 00000938 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6109 0000093B 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6110                                  	;dec	cx ; *
  6111 0000093D 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6112 0000093E 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6113                                  	;mov	ax,[es:bp+0Dh]
  6114 0000093F 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6115                                  	;mov	dl,[es:bp+4]
  6116 00000943 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6117 00000947 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6118 0000094A 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6119                                  	;INC	DL			;>32mb			;AN000;
  6120                                  	; 17/12/2022
  6121 0000094C 42                      	inc	dx
  6122 0000094D 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6123 0000094F F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6124 00000951 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6125                                  letold:
  6126 00000953 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6127 00000954 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6128 00000955 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6129                                  
  6130 00000957 1E                      	push	ds
  6131                                  	;getdseg <ds>
  6132 00000958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6133 0000095D C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6134 00000963 1F                      	pop	ds
  6135                                  
  6136 00000964 F9                      	STC				;>32mb			;AN000;
  6137 00000965 C3                      	retn				;>32mb			;AN000;
  6138                                  
  6139                                  new32format:
  6140                                  	;mov	dx,[bx+2]
  6141 00000966 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6142                                  
  6143 00000969 1E                      	push	ds			; set up ds to DOSDATA
  6144                                  	;getdseg <ds>
  6145 0000096A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6146 0000096F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6147 00000973 1F                      	pop	ds
  6148                                  
  6149 00000974 8B17                    	mov	dx,[bx]
  6150                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6151                                  	;mov	cx,[bx+4]
  6152 00000976 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6153                                  	;lds	bx,[bx+6]
  6154 00000979 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6155                                  old_style:				;>32mb			;AN000;
  6156                                  	; 06/01/2024
  6157                                  	; cf=0
  6158                                  	;CLC				;>32mb			;AN000;
  6159 0000097C C3                      	retn				;>32mb			;AN000;
  6160                                  
  6161                                  ;------------------------------------------------------------------------
  6162                                  ;
  6163                                  ; Procedure Name : Fastxxx_Purge
  6164                                  ;
  6165                                  ; Input: None
  6166                                  ; Functions: Purge Fastopen/ Cache Buffers
  6167                                  ; Output: None
  6168                                  ;
  6169                                  ;------------------------------------------------------------------------
  6170                                  
  6171                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6172                                  
  6173                                  Fastxxx_Purge:
  6174 0000097D 50                      	PUSH	AX			; save regs.	;AN000;
  6175 0000097E 56                      	PUSH	SI						;AN000;
  6176 0000097F 52                      	PUSH	DX						;AN000;
  6177                                  topen:
  6178 00000980 1E                      	push	ds			; set up ds to DOSDATA
  6179                                  	;getdseg <ds>
  6180 00000981 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6181                                  
  6182 00000986 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6183                                  					; fastopen installed ?	;AN000;
  6184 0000098B 1F                      	pop	ds
  6185 0000098C 740B                    	JZ	short nofast		; no			;AN000;
  6186 0000098E B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6187                                  dofast:
  6188 00000990 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6189                                  	;;mov	dl,[es:bp+0]
  6190                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6191                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6192                                  	; 15/12/2022
  6193 00000992 268A5600                	mov	dl,[es:bp]
  6194                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6195 00000996 E80D1D                  	call	Fast_Dispatch
  6196                                  nofast:
  6197 00000999 5A                      	POP	DX						;AN000;
  6198 0000099A 5E                      	POP	SI			; restore regs		;AN000;
  6199 0000099B 58                      	POP	AX			 			;AN000;
  6200 0000099C C3                      	retn				; exit
  6201                                  
  6202                                  ;============================================================================
  6203                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6204                                  ;============================================================================
  6205                                  ; 29/04/2019 - Retro DOS v4.0
  6206                                  
  6207                                  ;include dossym.inc
  6208                                  ;include dosmac.inc
  6209                                  ;include doscntry.inc
  6210                                  
  6211                                  ; DOSCODE Segment
  6212                                  
  6213                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6214                                  ; ---------------------------------------------------------------------------
  6215                                  ;include divmes.inc
  6216                                  
  6217                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; -------------------------------------
  6219                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6220                                  
  6221                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6222                                  	;PUBLIC	DIVMES
  6223                                  
  6224 0000099D 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6224 000009A6 6F766572666C6F770D-
  6224 000009AF 0A                 
  6225                                  
  6226                                  	;PUBLIC	DivMesLen
  6227                                  DivMesLen:
  6228 000009B0 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6229                                  
  6230                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6231                                  ; -------------------------------------
  6232                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6233                                  
  6234                                  ; (MSDOS 6.0)
  6235                                  ; VxD not found error message
  6236                                  
  6237                                  NoVxDErrMsg:
  6238 000009B2 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6238 000009BB 686176652074686520-
  6238 000009C4 66696C652057494E41-
  6238 000009CD 32302E33383620696E-
  6238 000009D6 2074686520726F6F74-
  6238 000009DF 206F6620796F757220-
  6238 000009E8 626F6F742064726976-
  6238 000009F1 65                 
  6239 000009F2 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6239 000009FB 57696E646F77732069-
  6239 00000A04 6E20456E68616E6365-
  6239 00000A0D 64204D6F64650D0A   
  6240                                  
  6241                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6242                                  
  6243                                  ; 13/05/2019 - Retro DOS v4.0
  6244                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6245                                  
  6246                                  ;include yesno.asm  (MNSDOS 6.0)
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6249                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6250                                  
  6251                                  ; This is for country Yes and No
  6252                                  
  6253 00000A15 59                      NLS_YES:	db 'Y'
  6254 00000A16 4E                      NLS_NO:		db 'N'
  6255 00000A17 79                      NLS_yes2:	db 'y'
  6256 00000A18 6E                      NLS_no2:	db 'n'
  6257                                  
  6258                                  ; ---------------------------------------------------------------------------
  6259                                  
  6260                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6261                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6262                                  
  6263                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6264                                  
  6265                                  ; The following two tables implement the current buffered input editing
  6266                                  ; routines. The tables are pairwise associated in reverse order for ease
  6267                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6268                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6269                                  
  6270                                  	;PUBLIC	CANCHAR
  6271                                  CANCHAR:
  6272 00000A19 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6273                                  	
  6274                                  	;PUBLIC	ESCCHAR
  6275                                  ESCCHAR:
  6276 00000A1A 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6277                                  	
  6278                                  	;IF	NOT Rainbow
  6279                                  
  6280                                  ESCTAB:	; LABEL BYTE
  6281                                  
  6282                                  	;IF	IBM
  6283 00000A1B 40                      	DB	64		; Ctrl-Z - F6
  6284 00000A1C 4D                      	DB	77		; Copy one char - -->
  6285 00000A1D 3B                      	DB	59		; Copy one char - F1
  6286 00000A1E 53                      	DB	83		; Skip one char - DEL
  6287 00000A1F 3C                      	DB	60		; Copy to char - F2
  6288 00000A20 3E                      	DB	62		; Skip to char - F4
  6289 00000A21 3D                      	DB	61		; Copy line - F3
  6290 00000A22 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6291 00000A23 3F                      	DB	63		; Reedit line (new template) - F5
  6292 00000A24 4B                      	DB	75		; Backspace - <--
  6293 00000A25 52                      	DB	82		; Enter insert mode - INS (toggle)
  6294 00000A26 52                      	DB	82		; Exit insert mode - INS (toggle)
  6295 00000A27 41                      	DB	65		; Escape character - F7
  6296 00000A28 41                      	DB	65		; End of table
  6297                                  	;ENDIF
  6298                                  
  6299                                  ESCEND: ; LABEL BYTE
  6300                                  
  6301                                  ESCTABLEN EQU ESCEND-ESCTAB
  6302                                  
  6303                                  ESCFUNC: ; LABEL WORD
  6304                                  	
  6305 00000A29 [1514]                  	short_addr  GETCH	; Ignore the escape sequence
  6306 00000A2B [9214]                  	short_addr  TWOESC
  6307 00000A2D [8715]                  	short_addr  EXITINS
  6308 00000A2F [8715]                  	short_addr  ENTERINS
  6309 00000A31 [8D14]                  	short_addr  BACKSP
  6310 00000A33 [7315]                  	short_addr  REEDIT
  6311 00000A35 [7A14]                  	short_addr  KILNEW
  6312 00000A37 [0915]                  	short_addr  COPYLIN
  6313 00000A39 [3B15]                  	short_addr  SKIPSTR
  6314 00000A3B [0F15]                  	short_addr  COPYSTR
  6315 00000A3D [3215]                  	short_addr  SKIPONE
  6316 00000A3F [1415]                  	short_addr  COPYONE
  6317 00000A41 [1415]                  	short_addr  COPYONE
  6318 00000A43 [8E15]                  	short_addr  CTRLZ
  6319                                  
  6320                                  	;ENDIF
  6321                                  
  6322                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6323                                  ; ---------------------------------------------------------------------------
  6324                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6325                                  
  6326                                  ; OEMFunction key is expected to process a single function
  6327                                  ;   key input from a device and dispatch to the proper
  6328                                  ;   routines leaving all registers UNTOUCHED.
  6329                                  ;
  6330                                  ; Inputs:   CS, SS are DOSGROUP
  6331                                  ; Outputs:  None. This function is expected to JMP to onw of
  6332                                  ;           the following labels:
  6333                                  ;
  6334                                  ;           GetCh       - ignore the sequence
  6335                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6336                                  ;           ExitIns     - toggle insert mode
  6337                                  ;           EnterIns    - toggle insert mode
  6338                                  ;           BackSp      - move backwards one space
  6339                                  ;           ReEdit      - reedit the line with a new template
  6340                                  ;           KilNew      - discard the current line and start from scratch
  6341                                  ;           CopyLin     - copy the rest of the template into the line
  6342                                  ;           SkipStr     - read the next character and skip to it in the template
  6343                                  ;           CopyStr     - read next char and copy from template to line until char
  6344                                  ;           SkipOne     - advance position in template one character
  6345                                  ;           CopyOne     - copy next character in template into line
  6346                                  ;           CtrlZ       - place a ^Z into the template
  6347                                  ; Registers that are allowed to be modified by this function are:
  6348                                  ;           AX, CX, BP
  6349                                  
  6350                                  ; 13/05/2019 - Retro DOS v4.0
  6351                                  ; -------------------------------------
  6352                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6353                                  
  6354                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6357                                  
  6358                                  OEMFunctionKey:
  6359 00000A45 E82F09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6360 00000A48 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6361 00000A4A 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6362 00000A4B BF[1B0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6363 00000A4E 06                      	push	es
  6364 00000A4F 0E                      	push	cs
  6365 00000A50 07                      	pop	es
  6366 00000A51 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6367 00000A53 07                      	pop	es
  6368 00000A54 5F                      	POP     DI                      ; restore DI
  6369 00000A55 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6370 00000A57 89CD                    	MOV     BP,CX                   ; move to indexable register
  6371                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6372 00000A59 2EFFA6[290A]            	JMP	word [CS:BP+ESCFUNC]
  6373                                  
  6374                                  ;DOSCODE ENDS
  6375                                  	
  6376                                  ;============================================================================
  6377                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6378                                  ;============================================================================
  6379                                  ; Retro DOS v3.0 - 18/07/2018
  6380                                  
  6381                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6382                                  ;----------------------------------------------------------------------------
  6383                                  ; Retro DOS v2.0 - 13/03/2018
  6384                                  
  6385                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6386                                  
  6387                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6388                                  
  6389                                  ;**	$GET_DATE - Get Current Date
  6390                                  ;----------------------------------------
  6391                                  ;	ENTRY	none
  6392                                  ;	EXIT	(cx:dx) = current date
  6393                                  ;	USES	all
  6394                                  
  6395                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6396                                  
  6397                                  _$GET_DATE:	;System call 42
  6398                                  
  6399 00000A5E 16                      	PUSH	SS
  6400 00000A5F 1F                      	POP	DS
  6401 00000A60 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6402 00000A63 A1[5203]                	MOV	AX,[YEAR]
  6403                                  
  6404                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6405                                  
  6406 00000A66 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6407 00000A6A E814FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6408                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6409 00000A6D 895C06                  	MOV	[SI+user_env.user_DX],BX
  6410 00000A70 05BC07                  	ADD	AX,1980		;Put bias back
  6411                                  	;MOV	[SI+4],AX	;CX=year
  6412 00000A73 894404                  	MOV	[SI+user_env.user_CX],AX
  6413 00000A76 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6414                                  RET20:	; 05/11/2022
  6415                                  RET24:	; 18/12/2022
  6416 00000A7A C3                      	RETN
  6417                                  
  6418                                  ;**	$SET_DATE - Set Current Date
  6419                                  ;----------------------------------------
  6420                                  ;	ENTRY	(cx:dx) = current date
  6421                                  ;	EXIT	(al) = -1 iff bad date
  6422                                  ;		(al) = 0 if ok
  6423                                  ;	USES	all
  6424                                  
  6425                                  _$SET_DATE:	;System call 43
  6426                                  
  6427 00000A7B B0FF                    	MOV	AL,-1		;Be ready to flag error
  6428 00000A7D 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6429                                  	;JC	SHORT RET24	;Error if not big enough
  6430                                  	; 05/11/2022
  6431 00000A81 72F7                    	jc	short RET20
  6432 00000A83 83F977                  	CMP	CX,119		;Year must be less than 2100
  6433 00000A86 77F2                    	JA	SHORT RET24
  6434 00000A88 08F6                    	OR	DH,DH
  6435                                  	;JZ	SHORT RET24
  6436                                   	; 05/11/2022
  6437 00000A8A 74EE                    	jz	short RET20
  6438 00000A8C 08D2                    	OR	DL,DL
  6439                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6440                                  	; 05/11/2022
  6441 00000A8E 74EA                    	jz	short RET20
  6442 00000A90 80FE0C                  	CMP	DH,12		;Check against max. month
  6443 00000A93 77E5                    	JA	SHORT RET24
  6444 00000A95 16                      	PUSH	SS
  6445 00000A96 1F                      	POP	DS
  6446                                  	;CALL	DODATE
  6447                                  	; 18/12/2022
  6448 00000A97 E91301                  	jmp	DODATE
  6449                                  ;RET24:  
  6450                                  	;RETN
  6451                                  
  6452                                  ;**	$GET_TIME - Get Current Time
  6453                                  ;----------------------------------------
  6454                                  ;	ENTRY	none
  6455                                  ;	EXIT	(cx:dx) = current time
  6456                                  ;	USES	all
  6457                                  
  6458                                  _$GET_TIME:			;System call 44
  6459                                  
  6460 00000A9A 16                      	PUSH	SS
  6461 00000A9B 1F                      	POP	DS
  6462 00000A9C E87B00                  	CALL	READTIME
  6463 00000A9F E8DFF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6464                                  	;MOV	[SI+6],DX
  6465 00000AA2 895406                  	MOV	[SI+user_env.user_DX],DX
  6466                                  	;MOV	[SI+4],CX
  6467 00000AA5 894C04                  	MOV	[SI+user_env.user_CX],CX
  6468                                  set_time_ok:	; 06/01/2024
  6469 00000AA8 30C0                    	XOR	AL,AL
  6470                                  RET26:  
  6471 00000AAA C3                      	RETN
  6472                                  
  6473                                  ;**	$SET_TIME - Set Current Time
  6474                                  ;----------------------------------------
  6475                                  ;	ENTRY	(cx:dx) = time
  6476                                  ;	EXIT	(al) = 0 if 0k
  6477                                  ;		(al) = -1 if invalid
  6478                                  ;	USES	ALL
  6479                                  
  6480                                  _$SET_TIME:			;System call 45
  6481                                  
  6482 00000AAB B0FF                    	MOV	AL,-1		;Flag in case of error
  6483 00000AAD 80FD18                  	CMP	CH,24		;Check hours
  6484 00000AB0 73F8                    	JAE	SHORT RET26
  6485 00000AB2 80F93C                  	CMP	CL,60		;Check minutes
  6486 00000AB5 73F3                    	JAE	SHORT RET26
  6487 00000AB7 80FE3C                  	CMP	DH,60		;Check seconds
  6488 00000ABA 73EE                    	JAE	SHORT RET26
  6489 00000ABC 80FA64                  	CMP	DL,100		;Check 1/100's
  6490 00000ABF 73E9                    	JAE	SHORT RET26
  6491 00000AC1 51                      	PUSH	CX
  6492 00000AC2 52                      	PUSH	DX
  6493 00000AC3 16                      	PUSH	SS
  6494 00000AC4 1F                      	POP	DS
  6495 00000AC5 BB[B603]                	MOV	BX,TIMEBUF
  6496 00000AC8 B90600                  	MOV	CX,6
  6497                                  	;XOR	DX,DX
  6498                                  	;MOV	AX,DX
  6499 00000ACB 31C0                    	xor	ax,ax
  6500 00000ACD 99                      	cwd	; 06/01/2024
  6501 00000ACE 53                      	PUSH	BX
  6502 00000ACF E8933B                  	CALL	SETREAD
  6503 00000AD2 1E                      	PUSH	DS
  6504 00000AD3 C536[2E00]              	LDS	SI,[BCLOCK]
  6505 00000AD7 E8153B                  	CALL	DEVIOCALL2	;Get correct day count
  6506 00000ADA 1F                      	POP	DS
  6507 00000ADB 5B                      	POP	BX
  6508 00000ADC E8B93B                  	CALL	SETWRITE
  6509 00000ADF 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6510 00000AE3 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6511 00000AE7 C536[2E00]              	LDS	SI,[BCLOCK]
  6512 00000AEB E8013B                  	CALL	DEVIOCALL2	;Set the time
  6513                                  	; 06/01/2024
  6514                                  	;XOR	AL,AL
  6515                                  	;RETN
  6516 00000AEE EBB8                    	jmp	short set_time_ok
  6517                                  
  6518                                  ; 11/07/2018 - Retro DOS v3.0
  6519                                  ; Retro DOS v2.0 - 14/03/2018
  6520                                  
  6521                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6522                                  
  6523                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6524                                  ;----------------------------------------------------------
  6525                                  ; Date16 returns the current date in AX, current time in DX
  6526                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6527                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6528                                  
  6529                                  DATE16:
  6530                                  	
  6531                                  ;M048	Context DS
  6532                                  ;
  6533                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6534                                  ; is DOSDATA
  6535                                  
  6536                                  	;push	ss
  6537                                  	;pop	ds
  6538                                  
  6539                                  	;getdseg <ds>		; M048
  6540                                  
  6541                                  	; 13/05/2019 - Retro DOS v4.0
  6542 00000AF0 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6543                                  
  6544 00000AF5 51                      	PUSH	CX
  6545 00000AF6 06                      	PUSH	ES
  6546 00000AF7 E82000                  	CALL	READTIME
  6547 00000AFA 07                      	POP	ES
  6548 00000AFB D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6549 00000AFD D0E1                    	SHL	CL,1
  6550 00000AFF D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6551 00000B01 D1E1                    	SHL	CX,1
  6552 00000B03 D1E1                    	SHL	CX,1
  6553 00000B05 D0EE                    	SHR	DH,1		;Count every two seconds
  6554 00000B07 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6555 00000B09 89CA                    	MOV	DX,CX
  6556                                  
  6557                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6558                                  
  6559 00000B0B A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6560 00000B0E B104                    	MOV	CL,4
  6561 00000B10 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6562 00000B12 D1E0                    	SHL	AX,1
  6563 00000B14 59                      	POP	CX
  6564 00000B15 0A06[5003]              	OR	AL,[DAY]
  6565                                  RET21:
  6566 00000B19 C3                      	RETN
  6567                                  
  6568                                  ;----------------------------------------------------------
  6569                                  
  6570                                  READTIME:
  6571                                  
  6572                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6573                                  ;Uses AX, CX, DX.
  6574                                  
  6575 00000B1A C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6576 00000B20 56                      	PUSH	SI
  6577 00000B21 53                      	PUSH	BX
  6578                                  
  6579 00000B22 BB[B603]                	MOV	BX,TIMEBUF
  6580                                  
  6581 00000B25 B90600                  	MOV	CX,6
  6582                                  	;XOR	DX,DX
  6583                                  	;MOV	AX,DX
  6584                                  	; 06/01/2024
  6585 00000B28 31C0                    	xor	ax,ax
  6586 00000B2A 99                      	cwd
  6587 00000B2B E8373B                  	CALL	SETREAD
  6588 00000B2E 1E                      	PUSH	DS
  6589 00000B2F C536[2E00]              	LDS	SI,[BCLOCK]
  6590 00000B33 E8B93A                  	CALL	DEVIOCALL2	;Get correct date and time
  6591 00000B36 1F                      	POP	DS
  6592 00000B37 5B                      	POP	BX
  6593 00000B38 5E                      	POP	SI
  6594 00000B39 A1[B603]                	MOV	AX,[TIMEBUF]
  6595 00000B3C 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6596 00000B40 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6597 00000B44 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6598                                  	;JZ	SHORT RET22
  6599 00000B48 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6600                                  	;cmp	ax,43830
  6601 00000B4A 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6602 00000B4D 733D                    	JAE	SHORT RET22	;Ignore if too large
  6603 00000B4F A3[5403]                	MOV	[DAYCNT],AX
  6604 00000B52 56                      	PUSH	SI
  6605 00000B53 51                      	PUSH	CX
  6606 00000B54 52                      	PUSH	DX		;Save time
  6607 00000B55 31D2                    	XOR	DX,DX
  6608                                  	;mov	cx,1461
  6609 00000B57 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6610 00000B5A F7F1                    	DIV	CX		;Compute number of 4-year units
  6611 00000B5C D1E0                    	SHL	AX,1
  6612 00000B5E D1E0                    	SHL	AX,1
  6613 00000B60 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6614 00000B62 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6615                                  
  6616 00000B64 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6617                                  
  6618 00000B67 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6619 00000B6A D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6620 00000B6C 7304                    	JNC	SHORT SK	;Extra half-year?
  6621 00000B6E 81C2C800                	ADD	DX,200
  6622                                  SK:
  6623 00000B72 E82200                  	CALL	SETYEAR
  6624 00000B75 B101                    	MOV	CL,1		;At least at first month in year
  6625                                  
  6626 00000B77 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6627                                  	
  6628 00000B7A E81000                  	CALL	DSLIDE		;Find out which month we're in
  6629 00000B7D 880E[5103]              	MOV	[MONTH],CL
  6630 00000B81 42                      	INC	DX		;Remainder is day of month (start with one)
  6631 00000B82 8816[5003]              	MOV	[DAY],DL
  6632 00000B86 E89400                  	CALL	WKDAY		;Set day of week
  6633 00000B89 5A                      	POP	DX
  6634 00000B8A 59                      	POP	CX
  6635 00000B8B 5E                      	POP	SI
  6636                                  RET22:  
  6637 00000B8C C3                      	RETN
  6638                                  
  6639                                  ;----------------------------------------------------------
  6640                                  
  6641                                  DSLIDE:
  6642                                  	;MOV	AH,0
  6643                                  	; 06/01/2024
  6644                                  	; (AH=0)
  6645                                  DSLIDE1:
  6646 00000B8D AC                      	LODSB			;Get count of days
  6647 00000B8E 39C2                    	CMP	DX,AX		;See if it will fit
  6648                                  	;JB	SHORT RET23	;If not, done
  6649 00000B90 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6650 00000B92 29C2                    	SUB	DX,AX
  6651 00000B94 41                      	INC	CX		;Count one more month/year
  6652 00000B95 EBF6                    	JMP	SHORT DSLIDE1
  6653                                  
  6654                                  ;----------------------------------------------------------
  6655                                  
  6656                                  SETYEAR:
  6657                                  
  6658                                  ;Set year with value in CX. Adjust length of February for this year.
  6659                                  
  6660                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6661                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6662                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6663                                  ;	preserve DS as CHKYR is also called as a routine.
  6664                                  
  6665                                  	; MSDOS 6.0 (18/07/2018) ; *
  6666                                  
  6667                                  	;GETDSEG DS
  6668                                  
  6669                                  	;PUSH	CS  ; *
  6670                                  	;POP	DS  ; *
  6671                                  
  6672                                  	; 13/05/2019 - Retro DOS v4.0
  6673 00000B97 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6674                                  
  6675                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6676                                  	; 05/11/2022 
  6677                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6678                                  
  6679 00000B9C 880E[5203]              	MOV	[YEAR],CL
  6680                                  CHKYR:
  6681 00000BA0 F6C103                  	TEST	CL,3		;Check for leap year
  6682 00000BA3 B01C                    	MOV	AL,28
  6683 00000BA5 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6684 00000BA7 FEC0                    	INC	AL		;Add leap day
  6685                                  SAVFEB:
  6686 00000BA9 A2[1D0D]                	mov	[february],al
  6687                                  	;MOV	[MONTAB+1],AL	;Store for February
  6688                                  RET23:  
  6689 00000BAC C3                      	RETN
  6690                                  
  6691                                  ;----------------------------------------------------------
  6692                                  
  6693                                  DODATE:
  6694 00000BAD E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6695 00000BB0 88F0                    	MOV	AL,DH
  6696                                  
  6697 00000BB2 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6698                                  
  6699 00000BB5 D7                      	XLAT			;Look up days in month
  6700 00000BB6 38D0                    	CMP	AL,DL
  6701 00000BB8 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6702                                  	;JB	SHORT RET25	;Error if too many days
  6703 00000BBA 72F0                    	jb	short RET23 ; 18/07/2018
  6704 00000BBC E8D8FF                  	CALL	SETYEAR
  6705                                  ;
  6706                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6707                                  ;
  6708 00000BBF 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6709 00000BC3 D1E9                    	SHR	CX,1
  6710 00000BC5 D1E9                    	SHR	CX,1
  6711                                  	;mov	ax,1461
  6712 00000BC7 B8B505                  	MOV	AX,FOURYEARS
  6713 00000BCA 89D3                    	MOV	BX,DX
  6714 00000BCC F7E1                    	MUL	CX
  6715 00000BCE 8A0E[5203]              	MOV	CL,[YEAR]
  6716 00000BD2 80E103                  	AND	CL,3
  6717                                  
  6718 00000BD5 BE[140D]                	MOV	SI,YRTAB
  6719                                  
  6720 00000BD8 89C2                    	MOV	DX,AX
  6721 00000BDA D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6722 00000BDC E85100                  	CALL	DSUM		;Add up the days in each year
  6723 00000BDF 88F9                    	MOV	CL,BH		;Month of year
  6724                                  
  6725 00000BE1 BE[1C0D]                	MOV	SI,MONTAB
  6726                                  
  6727 00000BE4 49                      	DEC	CX		;Account for months starting with one
  6728 00000BE5 E84800                  	CALL	DSUM		;Add up days in each month
  6729 00000BE8 88D9                    	MOV	CL,BL		;Day of month
  6730 00000BEA 49                      	DEC	CX		;Account for days starting with one
  6731 00000BEB 01CA                    	ADD	DX,CX		;Add in to day total
  6732 00000BED 92                      	XCHG	AX,DX		;Get day count in AX
  6733 00000BEE A3[5403]                	MOV	[DAYCNT],AX
  6734 00000BF1 56                      	PUSH	SI
  6735 00000BF2 53                      	PUSH	BX
  6736 00000BF3 50                      	PUSH	AX
  6737                                  
  6738 00000BF4 BB[B603]                	MOV	BX,TIMEBUF
  6739                                  
  6740 00000BF7 B90600                  	MOV	CX,6
  6741                                  	;XOR	DX,DX
  6742                                  	;MOV	AX,DX
  6743                                  	; 06/01/2024
  6744 00000BFA 31C0                    	xor	ax,ax
  6745 00000BFC 99                      	cwd
  6746 00000BFD 53                      	PUSH	BX
  6747 00000BFE E8643A                  	CALL	SETREAD
  6748                                  
  6749 00000C01 1E                      	PUSH	DS
  6750 00000C02 C536[2E00]              	LDS	SI,[BCLOCK]
  6751 00000C06 E8E639                  	CALL	DEVIOCALL2	;Get correct date and time
  6752 00000C09 1F                      	POP	DS
  6753 00000C0A 5B                      	POP	BX
  6754 00000C0B E88A3A                  	CALL	SETWRITE
  6755 00000C0E 8F06[B603]              	POP	WORD [TIMEBUF]
  6756 00000C12 1E                      	PUSH	DS
  6757 00000C13 C536[2E00]              	LDS	SI,[BCLOCK]
  6758 00000C17 E8D539                  	CALL	DEVIOCALL2	;Set the date
  6759 00000C1A 1F                      	POP	DS
  6760 00000C1B 5B                      	POP	BX
  6761 00000C1C 5E                      	POP	SI
  6762                                  WKDAY:
  6763 00000C1D A1[5403]                	MOV	AX,[DAYCNT]
  6764 00000C20 31D2                    	XOR	DX,DX
  6765 00000C22 B90700                  	MOV	CX,7
  6766 00000C25 40                      	INC	AX
  6767 00000C26 40                      	INC	AX		;First day was Tuesday
  6768 00000C27 F7F1                    	DIV	CX		;Compute day of week
  6769 00000C29 8816[5603]              	MOV	[WEEKDAY],DL
  6770 00000C2D 30C0                    	XOR	AL,AL		;Flag OK
  6771                                  RET25:
  6772 00000C2F C3                      	RETN
  6773                                  
  6774                                  ;----------------------------------------------------------
  6775                                  
  6776                                  ;**	DSUM - Compute the sum of a string of bytes
  6777                                  ;
  6778                                  ;	ENTRY	(cx) = byte count
  6779                                  ;		(ds:si) = byte address
  6780                                  ;		(dx) = sum register, initialized by caller
  6781                                  ;	EXIT	(dx) updated
  6782                                  ;	USES	ax, cx, dx, si, flags
  6783                                  
  6784                                  DSUM:
  6785 00000C30 B400                    	MOV	AH,0
  6786 00000C32 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6787                                  	;JCXZ	RET25 ; 18/07/2018
  6788                                  DSUM1:
  6789 00000C34 AC                      	LODSB
  6790 00000C35 01C2                    	ADD	DX,AX
  6791 00000C37 E2FB                    	LOOP	DSUM1
  6792                                  DSUM9:
  6793 00000C39 C3                      	RETN
  6794                                  
  6795                                  ;============================================================================
  6796                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6797                                  ;============================================================================
  6798                                  ; 29/04/2019 - Retro DOS v4.0
  6799                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6800                                  
  6801                                  ; 12/03/2018 - Retro DOS v2.0 
  6802                                  
  6803                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6804                                  ;NAME	GETSET
  6805                                  
  6806                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6807                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6808                                  
  6809                                  ;USERNUM:
  6810                                  ;	DW	0			; 24 bit user number
  6811                                  ;       DB      0
  6812                                  ;;	IF      IBM
  6813                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6814                                  ;;	ELSE
  6815                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6816                                  ;;	ENDIF
  6817                                  
  6818                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6819                                  ;; 08/07/2018 - Retro DOS v3.0
  6820                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6821                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6822                                  
  6823                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6824                                  ;----------------------------------------------------------------------------
  6825                                  
  6826                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6827                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6828                                  
  6829                                  _$GET_VERSION:
  6830                                  
  6831                                  ; Inputs:
  6832                                  ;       None
  6833                                  ; Function:
  6834                                  ;       Return MS-DOS version number
  6835                                  ; Outputs:
  6836                                  ;       OEM number in BH
  6837                                  ;       User number in BL:CX (24 bits)
  6838                                  ;       Version number as AL.AH in binary
  6839                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6840                                  
  6841                                  ; MSDOS 6.0
  6842                                  ;
  6843                                  ;	Fake_Count is used to lie about the version numbers to support
  6844                                  ;	old binarys. See ms_table.asm for more info.
  6845                                  ;
  6846                                  ;		if input al = 00
  6847                                  ;		  (bh) = OEM number			
  6848                                  ;		else if input al = 01
  6849                                  ;		  (bh) = version flags
  6850                                  ;		 
  6851                                  ;		       	 bits 0-2 = DOS internal revision
  6852                                  ;		       	 bits 3-7 = DOS type flags
  6853                                  ;		              bit 3    = DOS is in ROM
  6854                                  ;		              bit 4    = DOS in in HMA
  6855                                  ;		              bits 5-7 = reserved
  6856                                  ;               M007 change - only bit 3 is now valid. Other bits
  6857                                  ;               are 0 when AL = 1
  6858                                  
  6859                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6860 00000C3A 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6861 00000C3F 8CDB                    	mov	bx, ds
  6862                                  
  6863                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6864                                  	;--------------------------------------
  6865                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6866                                  
  6867 00000C41 16                              PUSH    SS
  6868 00000C42 1F                              POP     DS
  6869                                          
  6870                                  	; 06/01/2024
  6871                                  	;MOV	BX,[USERNUM+2]
  6872                                          ;MOV	CX,[USERNUM]
  6873                                  
  6874                                  	; 13/05/2019 - Retro DOS v4.0
  6875                                  
  6876                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6877                                  	;DOS flags
  6878                                  
  6879 00000C43 3C01                    	cmp	AL,1
  6880 00000C45 7502                    	jne	short Norm_Vers
  6881                                  
  6882                                  ;ifdef ROMDOS
  6883                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6884                                  ;				(DOSINROM = 8)
  6885                                  ;else
  6886 00000C47 30FF                            xor     bh,bh		; Otherwise return 0
  6887                                  ;endif				;M007 end
  6888                                  
  6889                                  Norm_Vers:
  6890                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6891                                  
  6892                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6893                                  	; 13/05/2019 - Retro DOS v4.0
  6894 00000C49 1E                      	push	ds		; Get the version number from the
  6895 00000C4A 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6896                                  	;mov	ax,[40h]
  6897 00000C4E A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6898                                  	; 07/12/2022
  6899 00000C51 1F                      	pop	ds
  6900 00000C52 E82CF8                  	call	Get_User_Stack
  6901                                  				; Put values for return registers
  6902                                  				; in the proper place on the user's	 
  6903                                  				; stack addressed by DS:SI
  6904                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6905                                  gdrvfspc_ret:
  6906                                          ;MOV	[SI+user_env.user_AX],AX
  6907 00000C55 8904                            MOV	[SI],AX
  6908                                          ;MOV	[SI+4],CX
  6909 00000C57 894C04                  	mov	[SI+user_env.user_CX],CX
  6910                                  set_user_bx:
  6911                                  	;MOV	[SI+2],BX
  6912 00000C5A 895C02                  	mov	[SI+user_env.user_BX],BX
  6913                                  
  6914 00000C5D C3                      	RETN
  6915                                  
  6916                                  ; 18/07/2018 - Retro DOS v3.0
  6917                                  
  6918                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6919                                  ;----------------------------------------------------------------------------
  6920                                  
  6921                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6922                                  ;
  6923                                  ;	ENTRY	none
  6924                                  ;	EXIT	(al) = value of VERIFY flag
  6925                                  ;	USES	all
  6926                                  
  6927                                  
  6928                                  _$GET_VERIFY_ON_WRITE:
  6929                                  
  6930                                  ;hkn; SS override
  6931 00000C5E 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6932 00000C62 C3                      	retn
  6933                                  
  6934                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6935                                  ;
  6936                                  ;	ENTRY	(al) = value of VERIFY flag
  6937                                  ;	EXIT	none
  6938                                  ;	USES	all
  6939                                  
  6940                                  _$SET_VERIFY_ON_WRITE:
  6941                                  
  6942 00000C63 2401                    	AND	AL,1
  6943                                  ;hkn; SS override
  6944 00000C65 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6945                                  RET27:	; 18/07/2018
  6946 00000C69 C3                      	retn
  6947                                  
  6948                                  ; 19/07/2018 - Retro DOS v3.0
  6949                                  
  6950                                  ;BREAK <$International - return country-dependent information>
  6951                                  ;----------------------------------------------------------------------------
  6952                                  ;
  6953                                  ; Procedure Name : $INTERNATIONAL
  6954                                  ;
  6955                                  ; Inputs:
  6956                                  ;	MOV	AH,International
  6957                                  ;	MOV	AL,country	(al = 0 => current country)
  6958                                  ;      [MOV	BX,country]
  6959                                  ;	LDS	DX,block
  6960                                  ;	INT	21
  6961                                  ; Function:
  6962                                  ;	give users an idea of what country the application is running
  6963                                  ; Outputs:
  6964                                  ;	IF DX != -1 on input (get country)
  6965                                  ;	  AL = 0 means return current country table.
  6966                                  ;	  0<AL<0FFH means return country table for country AL
  6967                                  ;	  AL = 0FF means return country table for country BX
  6968                                  ;	  No Carry:
  6969                                  ;	     Register BX will contain the 16-bit country code.
  6970                                  ;	     Register AL will contain the low 8 bits of the country code.
  6971                                  ;	     The block pointed to by DS:DX is filled in with the information
  6972                                  ;	     for the particular country.
  6973                                  ;		BYTE  Size of this table excluding this byte and the next
  6974                                  ;		BYTE  Country code represented by this table
  6975                                  ;			A sequence of n bytes, where n is the number specified
  6976                                  ;			by the first byte above and is not > internat_block_max,
  6977                                  ;			in the correct order for being returned by the
  6978                                  ;			INTERNATIONAL call as follows:
  6979                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6980                                  ;		5 BYTE	Currency symbol null terminated
  6981                                  ;		2 BYTE	thousands separator null terminated
  6982                                  ;		2 BYTE	Decimal point null terminated
  6983                                  ;		2 BYTE	Date separator null terminated
  6984                                  ;		2 BYTE	Time separator null terminated
  6985                                  ;		1 BYTE	Bit field.  Currency format.
  6986                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6987                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6988                                  ;		1 BYTE	No. of significant decimal digits in currency
  6989                                  ;		1 BYTE	Bit field.  Time format.
  6990                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6991                                  ;		DWORD	Call address of case conversion routine
  6992                                  ;		2 BYTE	Data list separator null terminated.
  6993                                  ;	  Carry:
  6994                                  ;	     Register AX has the error code.
  6995                                  ;	IF DX = -1 on input (set current country)
  6996                                  ;	  AL = 0 is an error
  6997                                  ;	  0<AL<0FFH means set current country to country AL
  6998                                  ;	  AL = 0FF means set current country to country BX
  6999                                  ;	  No Carry:
  7000                                  ;	    Current country SET
  7001                                  ;	    Register AL will contain the low 8 bits of the country code.
  7002                                  ;	  Carry:
  7003                                  ;	     Register AX has the error code.
  7004                                  ;-----------------------------------------------------------------------------
  7005                                  
  7006                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7007                                  
  7008                                  ; 13/05/2019 - Retro DOS v4.0
  7009                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7010                                  
  7011                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7012                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7013                                  
  7014                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7015                                  	 
  7016 00000C6A 3CFF                    	CMP	AL,0FFH
  7017 00000C6C 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7018 00000C6E 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7019 00000C70 30FF                    	XOR	BH,BH
  7020                                  BX_HAS_CODE:
  7021 00000C72 1E                      	PUSH	DS
  7022 00000C73 07                      	POP	ES
  7023 00000C74 52                      	PUSH	DX
  7024 00000C75 5F                      	POP	DI			; User buffer to ES:DI
  7025                                  
  7026                                  ;hkn; SS is DOSDATA
  7027                                  ;	context DS
  7028                                  
  7029 00000C76 16                      	push	ss
  7030 00000C77 1F                      	pop	ds
  7031                                  
  7032 00000C78 83FFFF                  	CMP	DI,-1
  7033 00000C7B 745D                    	JZ	short international_set
  7034 00000C7D 09DB                    	OR	BX,BX
  7035 00000C7F 7505                    	JNZ	short international_find
  7036                                  
  7037                                  ;hkn; country_cdpg is in DOSDATA segment.
  7038 00000C81 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7039                                  
  7040 00000C84 EB39                    	JMP	SHORT international_copy
  7041                                  
  7042                                  international_find:
  7043                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7044                                  	; 06/01/2024
  7045 00000C86 31ED                    	xor	bp,bp ; 0
  7046 00000C88 E80A00                  	CALL	international_get
  7047 00000C8B 7255                    	JC	short errtn
  7048                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7049                                  	; 06/01/2024
  7050 00000C8D 09DB                    	or	bx,bx
  7051 00000C8F 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7052 00000C91 89D3                    	MOV	BX,DX			 ; put country back
  7053 00000C93 EB3A                    	JMP	SHORT international_ok3
  7054                                  
  7055                                  international_get:
  7056 00000C95 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7057                                  
  7058                                  ;hkn; country_cdpg is in DOSDATA segment.
  7059                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7060                                  
  7061                                  	; MSDOS 3.3
  7062                                  	;;cmp	bx,[SI+63h]
  7063                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7064                                  	;jz	short RET27
  7065                                  
  7066                                  	; 13/05/2019 - Retro DOS v4.0
  7067                                  
  7068                                  	; MSDOS 6.0
  7069                                  	;cmp	bx,[ss:si+68h]
  7070 00000C98 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7071 00000C9C 74CB                    	jz	short RET27			; return if equal
  7072                                  
  7073 00000C9E 89DA                    	MOV	DX,BX
  7074 00000CA0 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7075                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7076 00000CA2 B80014                  	mov	ax,1400h
  7077 00000CA5 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7078                                  			; Return: AL = 00h not installed, OK to install
  7079                                  			; 01h not installed, not OK
  7080                                  			; FFh installed
  7081 00000CA7 3CFF                    	CMP	AL,0FFH
  7082 00000CA9 7510                    	JNZ	short interr		; not in memory
  7083                                  	
  7084                                  	; 06/01/2024
  7085 00000CAB B80314                  	mov	ax,1403h		; set country info
  7086                                  
  7087                                  	;cmp	bp,0
  7088 00000CAE 09ED                    	or	bp,bp			; GetCntry ?
  7089 00000CB0 7501                    	JNZ	short stcdpg
  7090                                  	
  7091                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7092                                  	;mov	ax,1404h
  7093 00000CB2 40                      	inc	ax	; AX = 1404h ; get country info
  7094                                  
  7095                                  	; 06/01/2024
  7096                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7097                                  	;		; BX = code page, DX = country code,
  7098                                  	;		; DS:SI -> internal code page structure
  7099                                  	;		; ES:DI -> user buffer
  7100                                  	;		; Return: AL = status
  7101                                  	;
  7102                                  	;JMP	short chkok
  7103                                  	
  7104                                  	;nop
  7105                                  
  7106                                  stcdpg:
  7107                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7108                                  	; 06/01/2024
  7109                                  	;mov     ax,1403h
  7110                                  gscdpg:
  7111 00000CB3 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7112                                  			; DS:SI -> internal code page structure
  7113                                  			; BX = code page, DX = country code
  7114                                  			; Return: AL = status
  7115                                  chkok:
  7116 00000CB5 08C0                    	or	al,al			; success ?
  7117                                  	;retz				; yes
  7118 00000CB7 74B0                    	jz	short RET27
  7119                                  
  7120                                  setcarry:
  7121 00000CB9 F9                      	STC				; set carry
  7122 00000CBA C3                      	retn
  7123                                  interr:
  7124 00000CBB B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7125 00000CBD EBFA                    	JMP	short setcarry
  7126                                  
  7127                                  international_copy:
  7128                                  
  7129                                  ;hkn; country_cdpg is in DOSDATA segment.
  7130                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7131                                  
  7132                                  	; MSDOS 3.3
  7133                                  	;;mov	bx,[SI+63h]
  7134                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7135                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7136                                  
  7137                                  	; 13/05/2019 - Retro DOS v4.0
  7138                                  
  7139                                  	; MSDOS 6.0
  7140                                  	;mov	bx,[ss:si+68h]
  7141 00000CBF 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7142 00000CC3 BE[6C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7143                                  
  7144                                  	;mov	cx,24
  7145 00000CC6 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7146                                  
  7147                                  	; MSDOS 6.0
  7148                                  
  7149                                  ;hkn;	must set up DS to SS so that international info can be copied
  7150                                  	
  7151 00000CC9 1E                      	push	ds
  7152                                  
  7153 00000CCA 16                      	push	ss			; cs -> ss
  7154 00000CCB 1F                      	pop	ds
  7155                                  
  7156 00000CCC F3A4                    	REP	MOVSB			; copy country info
  7157                                  
  7158                                  	; MSDOS 6.0
  7159                                  
  7160 00000CCE 1F                      	pop	ds	;hkn;	restore ds
  7161                                  
  7162                                  international_ok3:
  7163 00000CCF E8AFF7                  	call	Get_User_Stack
  7164                                  ;ASSUME	DS:NOTHING
  7165                                  	;MOV	[SI+2],BX
  7166 00000CD2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7167                                  international_ok:
  7168 00000CD5 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7169                                  ;SYS_RET_OK_jmp:
  7170                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7171                                  nono:	; 15/12/2022
  7172                                  SYS_RET_OK_jmp:
  7173 00000CD7 E95DF9                  	jmp	SYS_RET_OK
  7174                                  
  7175                                  international_set:
  7176                                  
  7177                                  ;hkn; ASSUME	DS:DOSGROUP
  7178                                  ;ASSUME	DS:DOSDATA
  7179                                  
  7180 00000CDA BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7181 00000CDD E8B5FF                  	CALL	international_get
  7182 00000CE0 73F3                    	JNC	short international_ok
  7183                                  errtn:
  7184 00000CE2 3CFF                    	CMP	AL,0FFH
  7185 00000CE4 7403                    	JZ	short errtn2
  7186                                  errtn1:
  7187 00000CE6 E957F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7188                                  errtn2:
  7189                                  	;error	error_invalid_function	; NLSFUNC not existent
  7190                                  
  7191                                  	;mov	al,1
  7192 00000CE9 B001                    	mov	al,error_invalid_function 
  7193 00000CEB EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7194                                  ;errtn3:
  7195                                  ;	jmp	SYS_RET_ERR
  7196                                  
  7197                                  ;EndProc $INTERNATIONAL
  7198                                  
  7199                                  ; 19/07/2018
  7200                                  
  7201                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7202                                  
  7203                                  ;----------------------------------------------------------------------------
  7204                                  ;
  7205                                  ; Procedure Name : $GetExtCntry
  7206                                  ;
  7207                                  ; Inputs:
  7208                                  ;	if AL >= 20H
  7209                                  ;	  AL= 20H    capitalize single char, DL= char
  7210                                  ;	      21H    capitalize string, CX= string length
  7211                                  ;	      22H    capitalize ASCIIZ string
  7212                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7213                                  ;	      80H bit 0 = use normal upper case table
  7214                                  ;		      1 = use file upper case table
  7215                                  ;	   DS:DX points to string
  7216                                  ;
  7217                                  ;	else
  7218                                  ;
  7219                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7220                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7221                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7222                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7223                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7224                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7225                                  ;	INT	21
  7226                                  ; Function:
  7227                                  ;	give users extended country dependent information
  7228                                  ;	or capitalize chars
  7229                                  ; Outputs:
  7230                                  ;	  No Carry:
  7231                                  ;	     extended country info is succesfully returned
  7232                                  ;	  Carry:
  7233                                  ;	     Register AX has the error code.
  7234                                  ;	     AX=0, NO	 for YES/NO CHECK
  7235                                  ;		1, YES
  7236                                  ;----------------------------------------------------------------------------
  7237                                  
  7238                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7239                                  
  7240                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7241                                  
  7242                                  	; MSDOS 6.0
  7243                                  _$GetExtCntry:
  7244 00000CED 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7245 00000CEF 7269                    	JB	short notcap
  7246                                  capcap: 				;
  7247 00000CF1 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7248 00000CF3 7505                    	JNZ	short fileupper		; file upper case
  7249                                  
  7250                                  ;hkn; UCASE_TAB in DOSDATA
  7251 00000CF5 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7252 00000CF8 EB05                    	JMP	SHORT capit
  7253                                  
  7254                                  fileupper:
  7255                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7256                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7257                                  	; AL >= 80h
  7258 00000CFA 247F                    	and	al,7Fh 
  7259                                  
  7260                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7261 00000CFC BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7262                                  capit:					;
  7263 00000CFF 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7264 00000D01 750D                    	JNZ	short chkyes		; no
  7265 00000D03 88D0                    	MOV	AL,DL			; set up AL
  7266 00000D05 E8E142                  	call	GETLET3 		; upper case it
  7267 00000D08 E876F7                  	call	Get_User_Stack		; get user stack
  7268                                  	;mov	[si+6],al
  7269 00000D0B 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7270 00000D0E EBC7                    	JMP	SHORT nono		; done
  7271                                  chkyes: 				;
  7272 00000D10 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7273 00000D12 7522                    	JNZ	short capstring		; no
  7274                                  
  7275 00000D14 31C0                    	XOR	AX,AX			; presume NO
  7276                                  		      
  7277                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7278                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7279                                  
  7280                                  	; 06/08/2018 - Retro DOS v3.0
  7281                                  	; 13/05/2019 - Retro DOS v4.0
  7282                                  	;cmp	dl,'Y'
  7283 00000D16 2E3A16[150A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7284 00000D1B 7416                    	JZ	short yesyes		; yes
  7285                                  	;cmp	dl,'y'
  7286 00000D1D 2E3A16[170A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7287 00000D22 740F                    	JZ	short yesyes		; yes
  7288                                  	;cmp	dl,'N'
  7289 00000D24 2E3A16[160A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7290 00000D29 74AC                    	JZ	short nono		; no
  7291                                  	;cmp	dl,'n'
  7292 00000D2B 2E3A16[180A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7293 00000D30 74A5                    	JZ	short nono		; no
  7294                                  ;dbcs_char:				;
  7295 00000D32 40                      	INC	AX			; not YES or NO
  7296                                  yesyes: 				;
  7297 00000D33 40                      	INC	AX			; return 1
  7298                                  	; 15/12/2022
  7299                                  ;nono:	
  7300 00000D34 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7301                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7302                                  	;jmp	SYS_RET_OK		; done
  7303                                  
  7304                                  capstring:				;
  7305 00000D36 89D6                    	MOV	SI,DX			; si=dx
  7306 00000D38 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7307 00000D3A 750D                    	JNZ	short capascii		; no
  7308                                  	;OR	CX,CX			; check count 0
  7309                                  	;JZ	short nono		; yes finished
  7310                                  	; 06/01/2024
  7311 00000D3C E399                    	jcxz	nono
  7312                                  concap: 				;
  7313 00000D3E AC                      	LODSB				; get char
  7314 00000D3F E8A742                  	call	GETLET3 		; upper case it
  7315 00000D42 8844FF                  	MOV	byte [SI-1],AL		; store back
  7316                                  ;next99: 				;
  7317 00000D45 E2F7                    	LOOP	concap			; continue
  7318 00000D47 EB8E                    	JMP	short nono		; done
  7319                                  capascii:				;
  7320 00000D49 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7321 00000D4B 7545                    	JNZ	short capinval		; no
  7322                                  concap2:				;
  7323 00000D4D AC                      	LODSB				; get char
  7324 00000D4E 08C0                    	or	al,al			; end of string ?
  7325 00000D50 7485                    	JZ	short nono		; yes
  7326 00000D52 E89442                  	call	GETLET3 		; upper case it
  7327 00000D55 8844FF                  	MOV	[SI-1],AL		; store back
  7328 00000D58 EBF3                    	JMP	short concap2 		; continue
  7329                                  
  7330                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7331                                  
  7332                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7333                                  ; _$GetExtCntry:
  7334                                  
  7335                                  notcap:
  7336 00000D5A 83F905                  	CMP	CX,5			; minimum size is 5
  7337 00000D5D 7277                    	jb	short sizeerror
  7338                                  
  7339                                  GEC_CONT:
  7340                                  ;hkn; SS is DOSDATA
  7341                                  	;context DS
  7342                                  
  7343 00000D5F 16                      	push	ss
  7344                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7345 00000D60 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7346                                  	
  7347                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7348 00000D61 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7349                                  
  7350 00000D64 83FAFF                  	CMP	DX,-1			; active country ?
  7351 00000D67 7503                    	JNZ	short GETCDPG 		; no
  7352                                  
  7353                                  ;hkn; use DS override to accesss country_cdpg fields
  7354                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7355                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7356 00000D69 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7357                                  					; get active country id;smr;use DS
  7358                                  GETCDPG:
  7359 00000D6C 83FBFF                  	CMP	BX,-1			; active code page?
  7360 00000D6F 7503                    	JNZ	short CHKAGAIN		; no, check again
  7361                                  
  7362                                  ;hkn; use DS override to accesss country_cdpg fields
  7363                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7364                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7365 00000D71 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7366                                  					; get active code page id;smr;Use DS
  7367                                  CHKAGAIN:
  7368                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7369 00000D74 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7370                                  					; same as active country id?;smr;use DS
  7371 00000D77 7550                    	JNZ	short CHKNLS		; no
  7372                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7373 00000D79 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7374                                  					; same as active code pg id?;smr;use DS
  7375 00000D7C 754B                    	JNZ	short CHKNLS		; no
  7376                                  CHKTYPE:
  7377                                  	;mov	bx,[si+48h]
  7378 00000D7E 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7379                                  					; bx = sys code page id;smr;use DS
  7380 00000D81 51                      	PUSH	CX			; save cx
  7381                                  	;mov	cx,[si+4Ah]
  7382 00000D82 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7383                                  	;mov	si,COUNTRY_CDPG+76
  7384 00000D85 BE[4C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7385                                  NXTENTRY:
  7386 00000D88 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7387 00000D8A 740B                    	JZ	short FOUNDIT
  7388 00000D8C 83C605                  	ADD	SI,5			; next entry
  7389 00000D8F E2F7                    	LOOP	NXTENTRY
  7390 00000D91 59                      	POP	CX
  7391                                  capinval:
  7392                                  	;error	error_invalid_function	; info type not found
  7393                                  	;mov	al,1
  7394 00000D92 B001                    	mov	al,error_invalid_function
  7395                                  ;SYS_RET_ERR_jmp:
  7396                                  	;jmp	SYS_RET_ERR
  7397                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7398                                  SYS_RET_ERR_jmp:
  7399 00000D94 E9A9F8                  	jmp	SYS_RET_ERR	
  7400                                  
  7401                                  FOUNDIT:
  7402 00000D97 A4                      	MOVSB				; move info id byte
  7403 00000D98 59                      	POP	CX			; restore char count
  7404                                  	;cmp	al,1
  7405 00000D99 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7406 00000D9B 7415                    	JZ	short setsize
  7407 00000D9D B90400                  	MOV	CX,4			; 4 bytes will be moved
  7408 00000DA0 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7409                                  OK_RETN:
  7410 00000DA3 F3A4                    	REP	MOVSB			; copy info
  7411 00000DA5 89C1                    	MOV	CX,AX			; CX = actual length returned
  7412 00000DA7 89D8                    	MOV	AX,BX			; return sys code page in ax
  7413                                  GETDONE:
  7414 00000DA9 E8D5F6                  	call	Get_User_Stack		; return actual length to user's CX
  7415                                  	;mov	[si+4],cx 
  7416 00000DAC 894C04                  	MOV	[SI+user_env.user_CX],CX
  7417                                  	;jmp	SYS_RET_OK
  7418                                  	; 15/12/2022
  7419                                  	; 25/06/2019
  7420 00000DAF E988F8                  	jmp	SYS_RET_OK_clc
  7421                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7422                                  	; 15/12/2022
  7423                                  ;nono_jmp:
  7424                                  	;jmp	short nono
  7425                                  setsize:
  7426 00000DB2 83E903                  	SUB	CX,3			; size after length field
  7427 00000DB5 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7428 00000DB7 7302                    	JAE	short setsize2		; no
  7429 00000DB9 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7430                                  setsize2:
  7431 00000DBB 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7432                                  	;ADD	DI,2			; update index
  7433                                  	;ADD	SI,2
  7434                                  	; 06/01/2024
  7435 00000DBE 47                      	inc	di
  7436 00000DBF 47                      	inc	di
  7437 00000DC0 46                      	inc	si
  7438 00000DC1 46                      	inc	si
  7439 00000DC2 89C8                    	MOV	AX,CX
  7440 00000DC4 83C003                  	ADD	AX,3			; AX has the actual length
  7441 00000DC7 EBDA                    	JMP	short OK_RETN 		; go move it
  7442                                  CHKNLS:
  7443 00000DC9 30E4                    	XOR	AH,AH
  7444                                  	;PUSH	AX			; save info type
  7445                                  	;POP	BP			; bp = info type
  7446                                  	; 06/01/2024
  7447 00000DCB 89C5                    	mov	bp,ax
  7448                                  	
  7449                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7450 00000DCD B80014                  	mov     ax,1400h
  7451 00000DD0 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7452                                  			; Return: AL = 00h not installed, OK to install
  7453                                  			; 01h not installed, not OK
  7454                                  			; FFh installed
  7455 00000DD2 3CFF                    	CMP	AL,0FFH
  7456 00000DD4 7404                    	JZ	short NLSNXT		; in memory
  7457                                  
  7458                                  sizeerror:
  7459                                  	;error	error_invalid_function
  7460                                  	;mov	al,1
  7461 00000DD6 B001                    	mov	al,error_invalid_function
  7462                                  	;jmp	SYS_RET_ERR
  7463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7464                                  sys_ret_err_jmp2:
  7465 00000DD8 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7466                                  
  7467                                  NLSNXT: 
  7468                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7469 00000DDA B80214                  	mov     ax,1402h
  7470 00000DDD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7471                                  			; BP = subfunction, BX = code page
  7472                                  			; DX = country code, DS:SI -> internal code page structure
  7473                                  			; ES:DI -> user buffer, CX = size of user buffer
  7474                                  			; Return: AL = status
  7475                                  			; 00h successful
  7476                                  			; else DOS error code
  7477                                  
  7478 00000DDF 3C00                    	CMP	AL,0			; success ?
  7479 00000DE1 7505                    	JNZ	short NLSERROR
  7480                                  	;mov	ax,[si+48h] ; 13/05/2019
  7481 00000DE3 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7482                                  			; ax = sys code page id;smr;use ds;
  7483                                  			;BUGBUG;check whether DS is OK after the above calls
  7484 00000DE6 EBC1                    	JMP	short GETDONE
  7485                                  seterr:
  7486                                  	; 15/12/2022
  7487                                  NLSERROR:
  7488                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7489                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7490                                  	;jmp	short sys_ret_err_jmp2
  7491                                  	; 15/12/2022
  7492 00000DE8 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7493                                  
  7494                                  ;EndProc $GetExtCntry
  7495                                  
  7496                                  ; 13/05/2019 - Retro DOS v4.0
  7497                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7498                                  
  7499                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7500                                  ;----------------------------------------------------------------------------
  7501                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7502                                  ;
  7503                                  ;   System call format:
  7504                                  ;
  7505                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7506                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7507                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7508                                  ;	INT	21
  7509                                  ;
  7510                                  ;	ENTRY	(al) = n
  7511                                  ;		(bx) = code page
  7512                                  ;	EXIT	'C' clear
  7513                                  ;		  global code page is set	(set global code page)
  7514                                  ;		  (BX) = active code page id	(get global code page)
  7515                                  ;		  (DX) = system code page id	(get global code page)
  7516                                  ;		'C' set
  7517                                  ;		  (AX) = error code
  7518                                  
  7519                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7520                                  
  7521                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7522                                  	; DOSCODE:4BC9h
  7523                                  
  7524                                  _$GetSetCdPg:
  7525                                  
  7526                                  ;hkn; SS is DOSDATA
  7527                                  	;context DS
  7528                                  
  7529 00000DEA 16                      	push	ss
  7530 00000DEB 1F                      	pop	ds
  7531                                  
  7532                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7533 00000DEC BE[0012]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7534                                  
  7535 00000DEF 3C01                    	CMP	AL,1		       ; get global code page
  7536 00000DF1 7512                    	JNZ	short setglpg 	       ; set global code page
  7537                                  	
  7538                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7539                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7540 00000DF3 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7541                                  					; get active code page id;smr;use ds
  7542                                  	;mov	dx,[si+48h]
  7543 00000DF6 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7544                                  				  	; get sys code page id;smr;use ds
  7545 00000DF9 E885F6                  	call	Get_User_Stack
  7546                                  ;ASSUME DS:NOTHING
  7547                                  	;;mov	[si+2],bx
  7548                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7549                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7550 00000DFC E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7551                                  	;mov	[si+6],dx
  7552 00000DFF 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7553                                  OK_RETURN:
  7554                                  	; 15/12/2022
  7555                                  	;transfer SYS_RET_OK
  7556 00000E02 E932F8                  	jmp	SYS_RET_OK
  7557                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7558                                  	;jmp	short nono_jmp
  7559                                  
  7560                                  ;hkn; ASSUME DS:DOSGROUP
  7561                                  ;ASSUME	DS:DOSDATA
  7562                                  
  7563                                  setglpg:
  7564 00000E05 3C02                    	CMP	AL,2
  7565 00000E07 752F                    	JNZ	short nomem
  7566                                  	
  7567                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7568                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7569 00000E09 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7570                                  	
  7571                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7572 00000E0C B80014                  	mov     ax,1400h
  7573 00000E0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7574                                  			; Return: AL = 00h not installed, OK to install
  7575                                  			; 01h not installed, not OK
  7576                                  			; FFh installed
  7577 00000E11 3CFF                    	CMP	AL,0FFH
  7578 00000E13 7523                    	JNZ	short nomem		; not in memory
  7579                                  
  7580                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7581 00000E15 B80114                  	mov     ax,1401h
  7582 00000E18 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7583                                  			; DS:SI -> internal code page structure
  7584                                  			; BX = new code page, DX = country code???
  7585                                  			; Return: AL = status
  7586                                  			; 00h successful
  7587                                  			; else DOS error code
  7588                                  	;cmp	al,0
  7589 00000E1A 08C0                    	or	al,al			; success ?
  7590 00000E1C 74E4                    	JZ	short OK_RETURN		; yes
  7591                                  
  7592 00000E1E 3C41                    	CMP	AL,65			; set device code page failed
  7593 00000E20 75C6                    	JNZ	short seterr
  7594                                  	;MOV	AX,65
  7595                                  	; 06/01/2024
  7596 00000E22 98                      	cbw
  7597 00000E23 A3[2403]                	MOV	[EXTERR],AX
  7598                                  	;mov	byte [EXTERR_ACTION],6
  7599                                  	;mov	byte [EXTERR_CLASS],5
  7600                                  	;mov	byte [EXTERR_LOCUS],4
  7601 00000E26 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7602 00000E2B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7603 00000E30 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7604                                  	;transfer From_GetSet
  7605 00000E35 E910F8                  	jmp	From_GetSet
  7606                                  
  7607                                  	; 15/12/2022
  7608                                  ;seterr:
  7609                                  	;;;transfer SYS_RET_ERR
  7610                                  	;;jmp	SYS_RET_ERR
  7611                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7612                                  	;jmp	short NLSERROR
  7613                                  
  7614                                  nomem:
  7615                                  	;error	error_invalid_function	; function not defined
  7616                                  	;mov	al,1
  7617 00000E38 B001                    	mov	al,error_invalid_function
  7618 00000E3A EBAC                    	jmp	short seterr
  7619                                  
  7620                                  ;EndProc $GetSetCdPg
  7621                                  
  7622                                  ; 09/01/2024
  7623                                  ; 13/05/2019 - Retro DOS v4.0
  7624                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7625                                  
  7626                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7627                                  ;----------------------------------------------------------------------------
  7628                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7629                                  ;
  7630                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7631                                  ;		drive.
  7632                                  ;
  7633                                  ;	This call returns the same info in the same registers (except for the
  7634                                  ;	FAT pointer) as the old FAT pointer calls
  7635                                  ;
  7636                                  ;	ENTRY	DL = Drive number
  7637                                  ;	EXIT	AX = Sectors per allocation unit
  7638                                  ;		   = -1 if bad drive specified
  7639                                  ;		On User Stack
  7640                                  ;		    BX = Number of free allocation units
  7641                                  ;		    DX = Total Number of allocation units on disk
  7642                                  ;		    CX = Sector size
  7643                                  
  7644                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7645                                  
  7646                                  _$GET_DRIVE_FREESPACE:
  7647                                  
  7648                                  ;hkn; SS is DOSDATA
  7649                                  	;context DS
  7650 00000E3C 16                      	push	ss
  7651 00000E3D 1F                      	pop	ds
  7652                                  
  7653 00000E3E 88D0                    	MOV	AL,DL
  7654                                  	;invoke	GetThisDrv		; Get drive
  7655 00000E40 E8D25B                  	call	GETTHISDRV
  7656                                  SET_AX_RET:
  7657 00000E43 7212                    	JC	short BADFDRV
  7658                                  	;invoke	DISK_INFO
  7659 00000E45 E8321E                  	call	DISK_INFO
  7660 00000E48 87D3                    	XCHG	DX,BX
  7661                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7662                                  	; 06/01/2024
  7663 00000E4A 720B                    	jc	short BADFDRV
  7664 00000E4C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7665                                  DoSt:
  7666 00000E4E E830F6                  	call	Get_User_Stack
  7667                                  ;ASSUME	DS:NOTHING
  7668                                  	;mov	[si+6],dx
  7669                                  	;;mov	[si+4],cx
  7670                                  	;;mov	[si+2],bx
  7671                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7672 00000E51 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7673                                  	;MOV	[SI+user_env.user_CX],CX
  7674                                  	;MOV	[SI+user_env.user_BX],BX
  7675                                  	;;MOV	[SI+user_env.user_AX],AX
  7676                                  	;mov	[si],ax
  7677                                  	;;return
  7678                                  	;retn
  7679                                  	; 09/01/2024
  7680 00000E54 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7681                                  
  7682                                  BADFDRV:
  7683                                  	; MSDOS 3.3
  7684                                  	;;mov	al,0Fh
  7685                                  	;mov	al,error_invalid_drive	; Assume error
  7686                                  
  7687                                  	; 13/05/2019 - Retro DOS v4.0
  7688                                  
  7689                                  	; MSDOS 6.0 & MSDOS 3.3
  7690                                  	;invoke	FCB_RET_ERR
  7691 00000E57 E8FCF7                  	call	FCB_RET_ERR
  7692                                  	
  7693 00000E5A B8FFFF                  	MOV	AX,-1
  7694 00000E5D EBEF                    	JMP	short DoSt
  7695                                  
  7696                                  ;EndProc $GET_DRIVE_FREESPACE
  7697                                  
  7698                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7699                                  ;----------------------------------------------------------------------------
  7700                                  ;**	$Get_DMA - Get Disk Transfer Address
  7701                                  ;
  7702                                  ;	ENTRY	none
  7703                                  ;	EXIT	ES:BX is current transfer address
  7704                                  ;	USES	all
  7705                                  
  7706                                  	; 09/01/2024
  7707                                  _$GET_DMA:
  7708 00000E5F 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7709 00000E64 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7710 00000E69 E815F6                  	call	Get_User_Stack
  7711                                  	;mov	[si+2],bx
  7712                                  	;mov	[si+10h],cx
  7713                                  	; 09/01/2024
  7714                                  	;MOV	[SI+user_env.user_BX],BX
  7715 00000E6C 894C10                  	MOV	[SI+user_env.user_ES],CX
  7716                                  	;retn
  7717                                  	; 09/01/2024
  7718 00000E6F E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7719                                  
  7720                                  ;**	$Set_DMA - Set Disk Transfer Address
  7721                                  ;----------------------------------------------------------------------------
  7722                                  ;	ENTRY	DS:DX is current transfer address
  7723                                  ;	EXIT	none
  7724                                  ;	USES	all
  7725                                  
  7726                                  _$SET_DMA:
  7727 00000E72 368916[2C03]            	MOV	[SS:DMAADD],DX
  7728 00000E77 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7729 00000E7C C3                      	retn
  7730                                  
  7731                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7732                                  ;------------------------------------------------------------------------------
  7733                                  
  7734                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7735                                  ;-----------------------------------------------------
  7736                                  ;	ENTRY	none
  7737                                  ;	EXIT	(AL) = drive number
  7738                                  ;	USES	all
  7739                                  
  7740                                  _$GET_DEFAULT_DRIVE:
  7741 00000E7D 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7742 00000E81 C3                      	retn
  7743                                  
  7744                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7745                                  ;-----------------------------------------------------
  7746                                  ;	ENTRY	(DL) = Drive number for new default drive
  7747                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7748                                  
  7749                                  _$SET_DEFAULT_DRIVE:
  7750 00000E82 88D0                    	MOV	AL,DL
  7751 00000E84 FEC0                    	INC	AL			; A=1, B=2...
  7752 00000E86 E8705B                  	call	GetVisDrv		; see if visible drive
  7753 00000E89 7204                    	JC	short SETRET		; errors do not set
  7754 00000E8B 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7755                                  
  7756                                  SETRET:
  7757 00000E8F 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7758 00000E93 C3                      	retn
  7759                                  
  7760                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7761                                  ;----------------------------------------------------------------------------
  7762                                  
  7763                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7764                                  ;---------------------------------------------------
  7765                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7766                                  ;	contents of an interrupt vector.
  7767                                  ;
  7768                                  ;	ENTRY	(AL) = interrupt number
  7769                                  ;	EXIT	(ES:BX) = current interrupt vector
  7770                                  
  7771                                  _$GET_INTERRUPT_VECTOR:
  7772 00000E94 E82E00                  	CALL	RECSET
  7773 00000E97 26C41F                  	LES	BX,[ES:BX]
  7774 00000E9A E8E4F5                  	call	Get_User_Stack
  7775                                  set_user_es_bx:
  7776                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7777                                  	;;mov	[si+2],bx
  7778                                  	;mov	[si+10h],es
  7779                                  	;MOV	[SI+user_env.user_BX],BX
  7780 00000E9D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7781                                  	;retn
  7782 00000EA0 E9B7FD                  	jmp	set_user_bx
  7783                                  
  7784                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7785                                  ;---------------------------------------------------
  7786                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7787                                  ;	contents of an interrupt vector.
  7788                                  ;
  7789                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7790                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7791                                  ;	for explanation.
  7792                                  ;
  7793                                  ;	ENTRY	(AL) = interrupt number
  7794                                  ;		(ds:dx) = desired new vector value
  7795                                  ;	EXIT	none
  7796                                  ;	USES	all
  7797                                  
  7798                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7799                                  ; 13/05/2019 - Retro DOS v4.0
  7800                                  
  7801                                  _$SET_INTERRUPT_VECTOR:
  7802 00000EA3 E81F00                  	CALL	RECSET
  7803 00000EA6 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7804 00000EA7 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7805 00000EAA 268C5F02                	MOV	[ES:BX+2],DS
  7806 00000EAE FB                      	STI
  7807                                  					; M004, M068 - Start
  7808                                  	; MSDOS 6.0
  7809 00000EAF 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7810                                  					; Q: was the previous call an int 21h
  7811                                  					;    exec call
  7812                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7813                                  	;jnz	short siv_1		; Y: go set count
  7814                                  	;retn				; N: return
  7815                                  	; 15/12/2022
  7816 00000EB5 740D                    	jz	short siv_2
  7817                                  siv_1:	
  7818 00000EB7 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7819 00000EBD 7505                    	jnz	short siv_2		 ; N: done
  7820                                  	; 20/09/2023
  7821 00000EBF 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7822                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7823                                  					 ; dispatcher to turn A20 Off before
  7824                                  					 ; returning to user.
  7825                                  siv_2:
  7826                                  	; 07/12/2022
  7827 00000EC4 C3                      	retn				; M004, M068 - End
  7828                                  	
  7829                                  RECSET:
  7830 00000EC5 31DB                    	XOR	BX,BX
  7831 00000EC7 8EC3                    	MOV	ES,BX
  7832 00000EC9 88C3                    	MOV	BL,AL
  7833 00000ECB D1E3                    	SHL	BX,1
  7834 00000ECD D1E3                    	SHL	BX,1
  7835 00000ECF C3                      	retn
  7836                                  
  7837                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7838                                  ;-------------------------------------------------------------------------------------
  7839                                  
  7840                                  ;**	$Char_Oper - Manipulate Switch Character
  7841                                  ;
  7842                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7843                                  ;
  7844                                  ;	ENTRY	AL = function:
  7845                                  ;		    0 - read switch char
  7846                                  ;		    1 - set switch char (char in DL)
  7847                                  ;		    2 - read device availability
  7848                                  ;			Always returns available
  7849                                  ;		    3 - set device availability
  7850                                  ;			No longer supported (NOP)
  7851                                  ;	EXIT	(al) = 0xff iff error
  7852                                  ;		(al) != 0xff if ok
  7853                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7854                                  ;	USES	AL, DL
  7855                                  ;
  7856                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7857                                  ;		The character / is always returned for subfunction 0,
  7858                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7859                                  
  7860                                  ; 13/05/2019 - Retro DOS v4.0
  7861                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7862                                  
  7863                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7864                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7865                                  
  7866                                  _$CHAR_OPER:
  7867                                  	; MSDOS 6.0
  7868 00000ED0 08C0                    	or	al,al				; get switch?
  7869 00000ED2 B22F                    	mov	dl,'/'				; assume yes
  7870 00000ED4 7407                    	jz	short chop_1			; jump if yes
  7871 00000ED6 3C02                    	cmp	al,2				; check device availability?
  7872 00000ED8 B2FF                    	mov	dl,-1				; assume yes
  7873 00000EDA 7401                    	jz	short chop_1			; jump if yes
  7874 00000EDC C3                      	retn					; otherwise just quit
  7875                                  
  7876                                  ; subfunctions requiring return of value to user come here. DL holds
  7877                                  ; value to return
  7878                                  
  7879                                  chop_1:
  7880 00000EDD E8A1F5                  	call	Get_User_Stack
  7881 00000EE0 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7882 00000EE3 C3                      	retn
  7883                                  
  7884                                  	; MSDOS 3.3
  7885                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7886                                  	;push	ss
  7887                                  	;pop	ds
  7888                                  	;cmp	al,1
  7889                                  	;jb	short chop_1
  7890                                  	;jz	short chop_2
  7891                                  	;cmp	al,3
  7892                                  	;jb	short chop_3
  7893                                  	;jz	short chop_5
  7894                                  	;mov	al,0FFh
  7895                                  	;retn
  7896                                  ;chop_1:
  7897                                  	;mov	dl,[chSwitch]
  7898                                  	;jmp	short chop_4
  7899                                  ;chop_2:
  7900                                  	;mov	[chSwitch],dl
  7901                                  	;retn
  7902                                  ;chop_3:
  7903                                  	;mov	dl, FFh
  7904                                  ;chop_4:
  7905                                  	;call	Get_User_Stack
  7906                                  	;mov	[si+6],dx
  7907                                  ;chop_5:
  7908                                  	;retn
  7909                                  
  7910                                  ;**	$GetExtendedError - Return Extended error code
  7911                                  ;----------------------------------------------------------------------------
  7912                                  ;	This function reads up the extended error info from the static
  7913                                  ;	variables where it was stored.
  7914                                  ;
  7915                                  ;	ENTRY	none
  7916                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7917                                  ;		BL = recommended action
  7918                                  ;		BH = class of error
  7919                                  ;		CH = locus of error
  7920                                  ;		ES:DI = may be pointer
  7921                                  ;	USES	ALL
  7922                                  
  7923                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7924                                  
  7925                                  _$GetExtendedError:
  7926 00000EE4 16                      	push	ss
  7927 00000EE5 1F                      	pop	ds
  7928 00000EE6 A1[2403]                	MOV	AX,[EXTERR]
  7929 00000EE9 C43E[2803]              	LES	DI,[EXTERRPT]
  7930 00000EED 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7931 00000EF1 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7932 00000EF5 E889F5                  	call	Get_User_Stack
  7933                                  	;mov	[si+0Ah],di
  7934 00000EF8 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7935                                  
  7936                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7937                                  	;;mov	[si+10h],es
  7938                                  	;MOV	[SI+user_env.user_ES],ES
  7939                                  	;;mov	[si+2],bx
  7940                                  	;MOV	[SI+user_env.user_BX],BX
  7941 00000EFB E89FFF                  	call	set_user_es_bx
  7942                                  
  7943                                  	;mov	[si+4],cx
  7944 00000EFE 894C04                  	MOV	[SI+user_env.user_CX],CX
  7945                                  jmp_SYS_RET_OK:
  7946                                  	; 15/12/2022
  7947                                  	;jmp	SYS_RET_OK
  7948                                  	; 25/06/2019
  7949 00000F01 E936F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7950                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7951                                  ;jmp_SYS_RET_OK:
  7952                                  	;jmp	SYS_RET_OK
  7953                                  
  7954                                  ; --------------------------------------------------------------------------
  7955                                  ; 09/01/2024
  7956                                  %if 0
  7957                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7958                                  	; DOSCODE:4CF3h
  7959                                  ;patch_or_unknown:
  7960                                  ;get_code_page:
  7961                                  	push    si
  7962                                  	mov     si, COUNTRY_CDPG
  7963                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7964                                  	mov     ax, [ss:si+6Ah]
  7965                                  	pop     si
  7966                                  	retn
  7967                                  %endif
  7968                                  ; --------------------------------------------------------------------------
  7969                                  
  7970                                  ; 29/04/2019 - Retro DOS v4.0
  7971                                  
  7972                                  ;BREAK	<ECS_call - Extended Code System support function>
  7973                                  ;---------------------------------------------------------------------------
  7974                                  ; Inputs:
  7975                                  ;	AL = 0	get lead byte table
  7976                                  ;		on return DS:SI has the table location
  7977                                  ;
  7978                                  ;	AL = 1	set / reset interim console flag
  7979                                  ;		DL = flag (00H or 01H)
  7980                                  ;		no return
  7981                                  ;
  7982                                  ;	AL = 2	get interim console flag
  7983                                  ;		on return DL = current flag value
  7984                                  ;
  7985                                  ;	AL = OTHER then error, and returns with:
  7986                                  ;		AX = error_invalid_function
  7987                                  ;
  7988                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7989                                  ;	 SS:SP WILL BE PRESERVED!
  7990                                  ;---------------------------------------------------------------------------
  7991                                  
  7992                                  _$ECS_Call:
  7993 00000F04 08C0                    	or	al,al			; AL = 0 (get table)?
  7994                                  	;jnz	short _okok
  7995                                  	; 15/12/2022
  7996 00000F06 7403                    	jz	short get_lbt
  7997                                  ;_okok:
  7998 00000F08 E92CF7                  	jmp	SYS_RET_OK
  7999                                  get_lbt:
  8000 00000F0B E873F5                  	call	Get_User_Stack		; *
  8001                                  
  8002                                  ;hkn; dbcs_table moved low to dosdata
  8003                                  	;mov	word [si+8],DBCS_TAB+2
  8004 00000F0E C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8005                                  
  8006 00000F13 06                      	push	es
  8007                                  	;getdseg <es>			; es = DOSDATA
  8008 00000F14 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8009                                  	;mov	[si+14],es
  8010 00000F19 8C440E                  	mov	[SI+user_env.user_DS],es
  8011 00000F1C 07                      	pop	es
  8012                                  
  8013                                  	; 15/12/2022
  8014 00000F1D EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8015                                  ;_okok:
  8016                                  	; 15/12/2022	
  8017                                  	;;transfer SYS_RET_OK
  8018                                  	;jmp	short jmp_SYS_RET_OK
  8019                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8020                                  	;;jmp	SYS_RET_OK
  8021                                  	;jmp	short jmp_SYS_RET_OK
  8022                                  
  8023                                  ;============================================================================
  8024                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8025                                  ;============================================================================
  8026                                  ; 19/07/2018 - Retro DOS v3.0
  8027                                  ; 15/05/2019 - Retro DOS v4.0
  8028                                  
  8029                                  ; System calls for parsing command lines
  8030                                  ;
  8031                                  ;   $PARSE_FILE_DESCRIPTOR
  8032                                  ;
  8033                                  ;   Modification history:
  8034                                  ;
  8035                                  ;       Created: ARR 30 March 1983
  8036                                  ;               EE PathParse 10 Sept 1983
  8037                                  ;
  8038                                  
  8039                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8040                                  ;---------------------------------------------------------------------------
  8041                                  ; Inputs:
  8042                                  ;       DS:SI Points to a command line
  8043                                  ;       ES:DI Points to an empty FCB
  8044                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8045                                  ;                   = 0 Parse stops if separator encountered
  8046                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8047                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8048                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8049                                  ;                   = 0  "       "      "       - put blanks in FCB
  8050                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8051                                  ;                   = 0  "       "      "        - put blanks in FCB
  8052                                  ; Function:
  8053                                  ;       Parse command line into FCB
  8054                                  ; Returns:
  8055                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8056                                  ;       DS:SI points to first character after filename
  8057                                  ;---------------------------------------------------------------------------
  8058                                  
  8059                                  _$PARSE_FILE_DESCRIPTOR:
  8060 00000F1F E8693F                  	call	MAKEFCB
  8061 00000F22 56                      	PUSH    SI
  8062 00000F23 E85BF5                  	call	Get_User_Stack
  8063                                  	;pop	word [si+8]
  8064 00000F26 8F4408                  	POP     word [SI+user_env.user_SI]
  8065 00000F29 C3                      	retn
  8066                                  
  8067                                  ;============================================================================
  8068                                  ; MISC.ASM, MSDOS 6.0, 1991
  8069                                  ;============================================================================
  8070                                  ; 19/07/2018 - Retro DOS v3.0
  8071                                  
  8072                                  ; 29/04/2019 - Retro DOS v4.0
  8073                                  
  8074                                  ;ENTRYPOINTSEG	EQU	0CH
  8075                                  ;MAXDIF		EQU	0FFFH
  8076                                  ;SAVEXIT 	EQU	10
  8077                                  ;WRAPOFFSET	EQU	0FEF0h
  8078                                  
  8079                                  ;
  8080                                  ;----------------------------------------------------------------------------
  8081                                  ;
  8082                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8083                                  ;
  8084                                  ;	Return Stuff sort of like old get fat call
  8085                                  ;
  8086                                  ;	ENTRY	none
  8087                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8088                                  ;			GOD help anyone who tries to do ANYTHING except
  8089                                  ;			READ this ONE byte.
  8090                                  ;		DX = Total Number of allocation units on disk
  8091                                  ;		CX = Sector size
  8092                                  ;		AL = Sectors per allocation unit
  8093                                  ;		   = -1 if bad drive specified
  8094                                  ;	USES	all
  8095                                  ;
  8096                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8097                                  ;
  8098                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8099                                  ;
  8100                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8101                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8102                                  ;			GOD help anyone who tries to do ANYTHING except
  8103                                  ;			READ this ONE byte.
  8104                                  ;		DX = Total Number of allocation units on disk
  8105                                  ;		CX = Sector size
  8106                                  ;		AL = Sectors per allocation unit
  8107                                  ;		   = -1 if bad drive specified
  8108                                  ;	USES	all
  8109                                  ;
  8110                                  ;----------------------------------------------------------------------------
  8111                                  ;
  8112                                  
  8113                                  _$SLEAZEFUNC:
  8114                                  	; 10/01/2024
  8115                                  	; 15/05/2019 - Retro DOS v4.0
  8116 00000F2A B200                    	MOV	DL,0
  8117                                  _$SLEAZEFUNCDL:
  8118 00000F2C 16                      	push	ss
  8119 00000F2D 1F                      	pop	ds
  8120                                  	
  8121 00000F2E 88D0                    	MOV	AL,DL
  8122 00000F30 E8E25A                  	call	GETTHISDRV		; Get CDS structure
  8123                                  SET_AL_RET:
  8124                                  	; MSDOS 3.3
  8125                                  	;;mov	al, 0Fh
  8126                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8127                                  	
  8128                                  	; MSDOS 6.0 & MSDOS 3.3
  8129 00000F33 721D                    	JC	short BADSLDRIVE
  8130                                  
  8131 00000F35 E8421D                  	call	DISK_INFO
  8132                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8133 00000F38 7218                    	jc	short BADSLDRIVE
  8134 00000F3A 8826[9805]              	MOV	[FATBYTE],AH
  8135                                  
  8136                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8137                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8138                                  ; CALL AGAIN
  8139                                  
  8140                                  	; 10/01/2024
  8141                                  	;MOV	DI,FATBYTE
  8142 00000F3E 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8143 00000F40 E83EF5                  	call	Get_User_Stack
  8144                                  	;mov	[si+4],cx
  8145                                  	;mov	[si+6],bx
  8146                                  	;mov	[si+2],di
  8147 00000F43 894C04                  	MOV	[SI+user_env.user_CX],CX
  8148 00000F46 895C06                  	MOV	[SI+user_env.user_DX],BX
  8149                                  	;MOV	[SI+user_env.user_BX],DI
  8150                                  	; 10/01/2024
  8151 00000F49 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8152                                  	
  8153                                  	;mov	[si+0Eh],ss
  8154 00000F4E 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8155                                  
  8156 00000F51 C3                      	retn
  8157                                  
  8158                                  BADSLDRIVE:
  8159 00000F52 E901F7                  	jmp	FCB_RET_ERR
  8160                                  
  8161                                  ;
  8162                                  ;----------------------------------------------------------------------------
  8163                                  ;
  8164                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8165                                  ;
  8166                                  ;	Returns location of DOS status for interrupt routines
  8167                                  ;
  8168                                  ;	ENTRY	none
  8169                                  ;	EXIT	(es:bx) = flag location
  8170                                  ;	USES	all
  8171                                  ;
  8172                                  ;----------------------------------------------------------------------------
  8173                                  ;
  8174                                  
  8175                                  _$GET_INDOS_FLAG:
  8176 00000F55 E829F5                          CALL	Get_User_Stack
  8177                                          ;MOV	WORD [SI+2],INDOS
  8178 00000F58 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8179                                  getin_segm:	; 13/01/2024
  8180                                  	;MOV	[SI+10H],SS
  8181 00000F5D 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8182 00000F60 C3                      	RETN 
  8183                                  ;
  8184                                  ;----------------------------------------------------------------------------
  8185                                  ;
  8186                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8187                                  ;
  8188                                  ;	Return a pointer to interesting DOS variables This call is version
  8189                                  ;	dependent and is subject to change without notice in future versions.
  8190                                  ;	Use at risk.
  8191                                  ;
  8192                                  ;	ENTRY	none
  8193                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8194                                  ;	uses	ALL
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  
  8199                                  	; 13/01/2024
  8200                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8201                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8202                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8203                                  
  8204                                  _$GET_IN_VARS:
  8205 00000F61 E81DF5                  	CALL	Get_User_Stack
  8206                                  	;MOV	WORD [SI+2],SYSINITVAR
  8207                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8208 00000F64 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8209                                  	; 13/01/2024
  8210                                  	;;MOV	[SI+10H],SS
  8211                                  	;MOV	[SI+user_env.user_ES],SS
  8212                                  	;RETN
  8213 00000F69 EBF2                    	jmp	short getin_segm
  8214                                  
  8215                                  ;
  8216                                  ;----------------------------------------------------------------------------
  8217                                  ;
  8218                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8219                                  ;
  8220                                  ;	Return pointer to drive parameter table for default drive
  8221                                  ;
  8222                                  ;	ENTRY	none
  8223                                  ;	EXIT	(ds:bx) = DPB address
  8224                                  ;	USES	all
  8225                                  ;
  8226                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8227                                  ;
  8228                                  ;	Return pointer to a specified drive parameter table
  8229                                  ;
  8230                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8231                                  ;	EXIT	(al) = 0 iff ok
  8232                                  ;		  (ds:bx) = DPB address
  8233                                  ;		(al) = -1 if bad drive
  8234                                  ;	USES	all
  8235                                  ;
  8236                                  ;----------------------------------------------------------------------------
  8237                                  ;
  8238                                  
  8239                                  ; 15/05/2019 - Retro DOS v4.0
  8240                                  
  8241                                  _$GET_DEFAULT_DPB:
  8242 00000F6B B200                    	MOV	DL,0
  8243                                  _$GET_DPB:
  8244 00000F6D 16                      	push	ss
  8245 00000F6E 1F                      	pop	ds
  8246                                  
  8247 00000F6F 88D0                    	MOV	AL,DL
  8248 00000F71 E8A15A                  	call	GETTHISDRV		; Get CDS structure
  8249 00000F74 7222                    	JC	short ISNODRV 		; no valid drive
  8250 00000F76 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8251                                  	;;test	word [es:di+43h],8000h
  8252                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8253                                  	;test	byte [es:di+44h],80h
  8254 00000F7A 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8255 00000F7F 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8256 00000F81 E88903                  	call	ECritDisk
  8257 00000F84 E8CB46                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8258 00000F87 E89E03                  	call	LCritDisk
  8259 00000F8A 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8260                                  					;   have.
  8261 00000F8C E8F2F4                  	call	Get_User_Stack
  8262                                  	;mov	[si+2],bp
  8263 00000F8F 896C02                  	MOV	[SI+user_env.user_BX],BP
  8264                                  	;mov	[si+0Eh],es
  8265 00000F92 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8266 00000F95 30C0                    	XOR	AL,AL
  8267 00000F97 C3                      	retn
  8268                                  ISNODRV:
  8269 00000F98 B0FF                    	MOV	AL,-1
  8270 00000F9A C3                      	retn
  8271                                  
  8272                                  ;
  8273                                  ;----------------------------------------------------------------------------
  8274                                  ;
  8275                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8276                                  ;
  8277                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8278                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8279                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8280                                  ;
  8281                                  ;	ENTRY	none
  8282                                  ;	EXIT	none
  8283                                  ;	USES	all
  8284                                  ;
  8285                                  ;----------------------------------------------------------------------------
  8286                                  ;
  8287                                  
  8288                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8289                                  	; DOSCODE:4D94h
  8290                                  _$DISK_RESET:
  8291                                  	; 15/05/2019 - Retro DOS v4.0
  8292 00000F9B B0FF                    	mov	al,0FFh	; -1
  8293 00000F9D 16                      	push	ss
  8294 00000F9E 1F                      	pop	ds
  8295                                  	; 06/11/2022
  8296                                  	;MOV	AL,-1
  8297 00000F9F E86B03                  	call	ECritDisk
  8298                                  	; MSDOS 6.0
  8299                                  	;;or	word [DOS34_FLAG],4
  8300                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8301 00000FA2 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8302 00000FA7 E8214A                  	call	FLUSHBUF
  8303                                  	; MSDOS 6.0
  8304                                  	;and	word [DOS34_FLAG],0FFFBh
  8305                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8306                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8307                                  	; 15/12/2022
  8308 00000FAA 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8309 00000FAF C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8310                                  ;
  8311                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8312                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8313                                  ; let's do it.
  8314                                  ;
  8315                                  ; Invalidate 'last-buffer' used
  8316                                  ;
  8317 00000FB5 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8318 00000FB8 891E[2000]              	MOV	[LastBuffer+2],BX
  8319 00000FBC 891E[1E00]              	MOV	[LastBuffer],BX
  8320                                  
  8321                                  	; MSDOS 3.3 
  8322                                  	; IBMDOS.COM, Offset 1C66h
  8323                                  	;;;;
  8324                                  	;lds	si,[BUFFHEAD]
  8325                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8326                                  				; .buf_flags, AH = 0, reset/clear
  8327                                  ;DRST_1:
  8328                                  	;;mov	[si+4],ax
  8329                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8330                                  	;lds	si,[SI]
  8331                                  	;cmp	si,bx ; -1
  8332                                  	;je	short DRST_2
  8333                                  	;;mov	[si+4],ax
  8334                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8335                                  	;lds	si,[SI]
  8336                                  	;cmp	si,bx
  8337                                  	;jne	short DRST_1
  8338                                  	;;;;
  8339                                  ;DRST_2:
  8340 00000FC0 E86503                  	call	LCritDisk
  8341 00000FC3 B8FFFF                  	MOV	AX,-1
  8342                                  	; 07/12/2022
  8343                                  	;mov	ax,0FFFFh
  8344                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8345 00000FC6 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8346 00000FC7 B82011                  	mov     ax,1120h
  8347 00000FCA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8348                                  			; DS = DOS CS
  8349                                  			; Return: CF clear (successful)
  8350 00000FCC 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8351                                  	
  8352 00000FCD C3                      	retn
  8353                                  
  8354                                  	; 19/07/2018 - Retro DOS v3.0
  8355                                  
  8356                                  ;
  8357                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8358                                  ;
  8359                                  ;----------------------------------------------------------------------------
  8360                                  ;
  8361                                  ;**	$SetDPB - Create a DPB
  8362                                  ;
  8363                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8364                                  ;
  8365                                  ;	ENTRY	ES:BP Points to DPB
  8366                                  ;		DS:SI Points to BPB
  8367                                  ;	EXIT	DPB setup
  8368                                  ;	USES	ALL but BP, DS, ES
  8369                                  ;
  8370                                  ;----------------------------------------------------------------------------
  8371                                  ;
  8372                                  
  8373                                  ; 10/05/2019 - Retro DOS v4.0
  8374                                  
  8375                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8376                                  
  8377                                  ; MSDOS 6.0
  8378 00000FCE 0300                    word3:	dw	3			; M008 -- word value for divides
  8379                                  
  8380                                  ; 13/01/2024
  8381                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8382                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8383                                  
  8384                                  ;procedure   $SETDPB,NEAR
  8385                                  
  8386                                  _$SETDPB:
  8387 00000FD0 89EF                    	MOV	DI,BP
  8388                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8389                                  	; 13/01/2024
  8390 00000FD2 47                      	inc	di
  8391 00000FD3 47                      	inc	di
  8392 00000FD4 AD                      	LODSW
  8393 00000FD5 AB                      	STOSW				; dpb_sector_size
  8394                                  	; MSDOS 6.0
  8395                                  	;cmp	byte [si+3],0
  8396 00000FD6 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8397 00000FDA 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8398                                  	;mov	byte [es:di+4],0
  8399 00000FDC 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8400                                  	; 13/01/2024
  8401 00000FE1 89C3                    	mov	bx,ax
  8402 00000FE3 EB70                    	JMP	short setend			     ; NO		;AN000;
  8403                                  
  8404                                  yesfat: ; 10/08/2018
  8405 00000FE5 89C2                    	MOV	DX,AX
  8406 00000FE7 AC                      	LODSB
  8407                                  	;DEC	AL
  8408                                  	; 17/12/2022
  8409 00000FE8 48                      	dec	ax
  8410 00000FE9 AA                      	STOSB				; dpb_cluster_mask
  8411                                  	;INC	AL
  8412 00000FEA 40                      	inc	ax
  8413 00000FEB 30E4                    	XOR	AH,AH
  8414                                  LOG2LOOP:
  8415 00000FED A801                    	test	AL,1
  8416 00000FEF 7506                    	JNZ	short SAVLOG
  8417 00000FF1 FEC4                    	INC	AH
  8418 00000FF3 D0E8                    	SHR	AL,1
  8419 00000FF5 EBF6                    	JMP	SHORT LOG2LOOP
  8420                                  SAVLOG:
  8421 00000FF7 88E0                    	MOV	AL,AH
  8422 00000FF9 AA                      	STOSB				; dpb_cluster_shift
  8423 00000FFA 88C3                    	MOV	BL,AL
  8424 00000FFC A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8425 00000FFD AC                      	LODSB
  8426 00000FFE AA                      	STOSB				; dpb_FAT_count Number of FATs
  8427                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8428                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8429 00000FFF 88C7                    	MOV	BH,AL
  8430 00001001 AD                      	LODSW
  8431 00001002 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8432 00001003 B105                    	MOV	CL,5
  8433 00001005 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8434 00001007 48                      	DEC	AX
  8435 00001008 01D0                    	ADD	AX,DX			; Cause Round Up
  8436 0000100A 89D1                    	MOV	CX,DX
  8437 0000100C 31D2                    	XOR	DX,DX
  8438 0000100E F7F1                    	DIV	CX
  8439 00001010 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8440 00001012 47                      	INC	DI
  8441 00001013 47                      	INC	DI			; Skip dpb_first_sector
  8442 00001014 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8443 00001015 AC                      	LODSB
  8444                                  	;mov	[es:bp+17h],al
  8445 00001016 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8446 0000101A AD                      	LODSW				; Number of sectors in a FAT
  8447                                  	
  8448                                  	;;;
  8449                                  	;MSDOS 3.3
  8450                                  	;
  8451                                  	;STOSB		; DPB.FAT_SIZE
  8452                                  	;MUL	BH
  8453                                  	
  8454                                  	;MSDOS 6.0
  8455                                  	;
  8456 0000101B AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8457 0000101C 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8458 0000101E 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8459 00001020 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8460                                  	;;;
  8461                                  	
  8462                                  	;add	ax,[es:bp+6]
  8463 00001022 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8464 00001026 AB                      	STOSW				; dpb_dir_sector
  8465 00001027 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8466                                  	;mov	[es:bp+0Bh],ax
  8467 00001029 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8468                                  	
  8469                                  	; MSDOS 6.0
  8470 0000102D 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8471                                  	;;cmp	word [es:bp+0Dh],0
  8472                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8473                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8474                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8475                                  	; 15/12/2022
  8476                                  	; 28/07/2019
  8477 0000102F 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8478 00001033 09DB                    	or	bx,bx
  8479 00001035 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8480                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8481                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8482                                  	
  8483                                  
  8484 00001037 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8485                                  	;mov	bx,[si+8]
  8486 00001039 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8487                                  	;mov	dx,[si+10]
  8488 0000103C 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8489 0000103F 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8490 00001041 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8491 00001044 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8492 00001046 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8493                                  rott:					;AN000;;F.C. >32mb
  8494 00001048 F8                      	CLC				;AN000;;F.C. >32mb
  8495 00001049 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8496 0000104B D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8497 0000104D E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8498                                  norot:					;AN000;
  8499                                  	; 15/12/2022
  8500                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8501 0000104F EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8502                                  normal_dpb:
  8503                                  	;;sub	ax,[es:bp+0Dh]
  8504                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8505                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8506                                  	; 15/12/2022
  8507                                  	; bx = [es:bp+DSKSIZ]
  8508                                  	;sub	ax,bx ; 28/07/2019
  8509                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8510                                  	; 15/12/2022
  8511 00001051 29C3                    	sub	bx,ax
  8512                                  	;NEG	AX			; Sectors in data area
  8513                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8514                                  	; 15/12/2022
  8515                                  	; CL = cluster shift
  8516                                  	; BX = number of data sectors 
  8517                                  	;SHR	AX,CL			; Div by sectors/cluster
  8518 00001053 D3EB                    	shr	bx,cl 
  8519                                  setend:
  8520                                  ;	M008 - CAS
  8521                                  ;
  8522                                  	; 15/12/2022
  8523 00001055 43                      	inc	bx
  8524                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8525                                  ;
  8526                                  ;	There has been a bug in our fatsize calculation for so long
  8527                                  ;	  that we can't correct it now without causing some user to
  8528                                  ;	  experience data loss. There are even cases where allowing
  8529                                  ;	  the number of clusters to exceed the fats is the optimal
  8530                                  ;	  case -- where adding 2 more fat sectors would make the
  8531                                  ;	  data field smaller so that there's nothing to use the extra
  8532                                  ;	  fat sectors for.
  8533                                  ;
  8534                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8535                                  ;	  still report that there was a cluster left when the disk was
  8536                                  ;	  actually full. Very graceful failure for a corrupt system
  8537                                  ;	  configuration. There may be worse cases that were never
  8538                                  ;	  properly traced back to this bug. The problem cases only
  8539                                  ;	  occurred when partition sizes were very near FAT sector
  8540                                  ;	  rounding boundaries, which were rare cases.
  8541                                  ;
  8542                                  ;	Also, it's possible that some third-party partition program might
  8543                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8544                                  ;	  scheme. In this hypothetical case, the number of allocation
  8545                                  ;	  clusters which don't actually have FAT entries to represent
  8546                                  ;	  them might be larger and might create a more catastrophic
  8547                                  ;	  failure. So we'll provide the safeguard of limiting the
  8548                                  ;	  max_cluster to the amount that will fit in the FATs.
  8549                                  ;
  8550                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8551                                  
  8552                                  ;	make sure the number of fat sectors is actually enough to
  8553                                  ;	  hold that many clusters. otherwise, back the number of
  8554                                  ;	  clusters down
  8555                                  
  8556                                  	; 15/12/2022
  8557                                  	; bx = number of clusters
  8558                                  
  8559                                  	; 19/07/2018 - Retro DOS v3.0
  8560                                  	; MSDOS 6.0
  8561                                  	; 15/12/2022
  8562                                  	;mov	bx,ax			; remember calculated # clusters
  8563                                  
  8564                                  	; 01/08/2018 (MSDOS 3.3)
  8565                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8566                                  	;xor	ah,ah 
  8567                                  
  8568                                  	; 10/05/2019 - Retro DOS v4.0
  8569                                  	;mov	ax,[ES:BP+0Fh]
  8570 00001056 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8571                                  
  8572                                  	;mul	word [es:bp+2]	
  8573 0000105A 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8574 0000105E 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8575 00001062 720D                    	jb	short setend_fat12
  8576 00001064 D1EA                    	shr	dx,1
  8577                                  
  8578                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8579                                  	; 15/12/2022
  8580                                  ;cs3 7/2/92
  8581 00001066 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8582                                  					; than enough for the maximum FAT,
  8583                                  					; so go ahead and use the calculated
  8584                                  					; number of clusters.
  8585                                  ;cs3 7/2/92
  8586                                  
  8587 00001068 D1D8                    	rcr	ax,1			; find number of entries
  8588 0000106A 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8589                                  ;					;  into 12-bit fatland?
  8590 0000106D 7215                    	jb	short setend_faterr	; then go ahead and let the
  8591                                  ;					;  inconsistency pass through
  8592                                  ;					;  rather than lose data by
  8593                                  ;					;  correcting the fat type
  8594 0000106F EB0E                    	jmp	short setend_fat16
  8595                                  
  8596                                  setend_fat12:
  8597 00001071 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8598 00001073 11D2                    	adc	dx,dx
  8599                                  
  8600                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8601                                  ;cs3 7/2/92
  8602                                  	; 15/12/2022
  8603 00001075 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8604 00001078 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8605                                  					; here. Check for it and use
  8606                                  					; the calculated size in this case.
  8607                                  ;cs3 7/2/92
  8608                                  
  8609 0000107A 2EF736[CE0F]            	div	word [cs:word3]
  8610                                  
  8611                                  setend_fat16:
  8612 0000107F 48                      	dec	ax			; limit at 1
  8613 00001080 39D8                    	cmp	ax,bx			; is fat big enough?
  8614 00001082 7602                    	jbe	short setend_fat	; use max value that'll fit
  8615                                  
  8616                                  setend_faterr:
  8617 00001084 89D8                    	mov	ax,bx			; use calculated value
  8618                                  
  8619                                  setend_fat:
  8620                                  
  8621                                  ;	now ax = maximum legal cluster
  8622                                  
  8623                                  ;	end M008
  8624                                  
  8625                                  	;mov	[es:bp+0Dh], ax
  8626 00001086 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8627                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8628                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8629 0000108A 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8630                                  					; Init so first ALLOC starts at
  8631                                  					; begining of FAT
  8632                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8633                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8634 00001090 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8635                                  
  8636 00001096 C3                      	retn
  8637                                  
  8638                                  ;EndProc $SETDPB
  8639                                  
  8640                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8641                                  
  8642                                  ;
  8643                                  ;----------------------------------------------------------------------------
  8644                                  ;
  8645                                  ;**	$Dup_PDB
  8646                                  ;
  8647                                  ; Inputs:   DX is new segment address of process
  8648                                  ;	    SI is end of new allocation block
  8649                                  ;
  8650                                  ;----------------------------------------------------------------------------
  8651                                  ;
  8652                                  
  8653                                  _$DUP_PDB:
  8654                                  
  8655                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8656                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8657                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8658                                  
  8659                                  	; MSDOS 3.3
  8660                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8661                                  	;MOV	DS,[CS:CurrentPDB]
  8662                                  
  8663                                  	; 15/05/2019 - Retro DOS v4.0
  8664                                  	; MSDOS 6.0
  8665 00001097 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8666 0000109C C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8667 000010A1 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8668                                  
  8669 000010A5 56                      	PUSH	SI
  8670 000010A6 EB0A                    	JMP	SHORT CreateCopy
  8671                                  
  8672                                  ;
  8673                                  ;----------------------------------------------------------------------------
  8674                                  ;
  8675                                  ; Inputs:
  8676                                  ;	DX = Segment number of new base
  8677                                  ; Function:
  8678                                  ;	Set up program base and copy term and ^C from int area
  8679                                  ; Returns:
  8680                                  ;	None
  8681                                  ; Called at DOS init
  8682                                  ;
  8683                                  ;----------------------------------------------------------------------------
  8684                                  ;
  8685                                  
  8686                                  ; 15/05/2019 - Retro DOS v4.0
  8687                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8688                                  
  8689                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8690                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8691                                  
  8692                                  _$CREATE_PROCESS_DATA_BLOCK:
  8693                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8694 000010A8 E8D6F3                  	CALL	Get_User_Stack
  8695                                  	;mov	ds,[si+14h]
  8696 000010AB 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8697                                  	;push	word [2]
  8698 000010AE FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8699                                  CreateCopy:
  8700 000010B2 8EC2                    	MOV	ES,DX
  8701                                  
  8702 000010B4 31F6                    	XOR	SI,SI			; copy entire PDB
  8703 000010B6 89F7                    	MOV	DI,SI
  8704 000010B8 B98000                  	MOV	CX,128
  8705 000010BB F3A5                    	REP	MOVSW
  8706                                  
  8707                                  ; DOS 3.3 7/9/86
  8708                                  	;mov	cx,20
  8709                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8710                                  	; 15/12/2022
  8711 000010BD B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8712                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8713                                  	;mov	cx,FILPERPROC
  8714                                  
  8715                                  	;mov	di,18h
  8716 000010BF BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8717                                  	;;PUSH	DS ; * 15/05/2019
  8718                                  	;;lds	si,[34h]
  8719                                  	;LDS	SI,[PDB.JFN_Pointer]
  8720                                  	;REP	MOVSB
  8721                                  	;;POP	DS ; * 15/05/2019
  8722                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8723                                  	; 05/12/2022
  8724                                  	; (push ds then pop ds is not needed here!)
  8725                                  	;push	ds
  8726                                  	;lds	si,[34h]
  8727 000010C2 C5363400                	lds	si,[PDB.JFN_Pointer]
  8728 000010C6 F3A4                    	rep	movsb
  8729                                  	;pop	ds
  8730                                  
  8731                                  ; DOS 3.3 7/9/86
  8732                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8733                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8734                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8735                                  
  8736 000010C8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8737                                  
  8738                                  	;;test	byte [cs:CreatePDB],0FFh
  8739                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8740                                  	; 17/12/2022
  8741 000010CD 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8742                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8743 000010D1 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8744                                  
  8745                                  ; Here we set up for a new process...
  8746                                  
  8747                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8748                                  	;POP	DS
  8749                                  
  8750                                  	; MSDOS 6.0
  8751                                  	;;getdseg <ds>			; ds -> dosdata
  8752                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8753                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8754                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8755                                  	; 15/12/2022
  8756                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8757                                  
  8758 000010D3 31DB                    	XOR	BX,BX			; dup all jfns
  8759                                  	;mov	cx,20
  8760                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8761                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8762                                  	; 15/12/2022
  8763 000010D5 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8764                                  
  8765                                  Create_dup_jfn:
  8766 000010D7 06                      	PUSH	ES ;**			; save new PDB
  8767 000010D8 E81655                  	call	SFFromHandle		; get sf pointer
  8768 000010DB B0FF                    	MOV	AL,-1			; unassigned JFN
  8769 000010DD 7224                    	JC	short CreateStash	; file was not really open
  8770                                  	;;test	word [es:di+5],1000h
  8771                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8772                                  	; 15/05/2019
  8773                                  	;test	byte [es:di+6],10h
  8774 000010DF 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8775 000010E4 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8776                                  
  8777                                  ; We do not inherit network file handles.
  8778                                  
  8779                                  	;mov	ah,[es:di+2]
  8780 000010E6 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8781                                  	;and	ah,0F0h
  8782 000010EA 80E4F0                  	AND	AH,SHARING_MASK
  8783                                  	;cmp	ah,70h
  8784 000010ED 80FC70                  	CMP	AH,SHARING_NET_FCB
  8785 000010F0 7411                    	jz	short CreateStash
  8786                                  
  8787                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8788                                  ; duplication operation.
  8789                                  
  8790 000010F2 893E[9E05]              	MOV	[THISSFT],DI
  8791 000010F6 8C06[A005]              	MOV	[THISSFT+2],ES
  8792 000010FA E8D918                  	call	DOS_DUP 		; signal duplication
  8793                                  
  8794                                  ; get the old sfn for copy
  8795                                  
  8796 000010FD E8D454                  	call	pJFNFromHandle		; ES:DI is jfn
  8797 00001100 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8798                                  
  8799                                  ; Take AL (old sfn or -1) and stash it into the new position
  8800                                  
  8801                                  CreateStash:
  8802 00001103 07                      	POP	ES ;**
  8803                                  	;mov	[es:bx+18h],al
  8804 00001104 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8805 00001108 43                      	INC	BX			; next jfn...
  8806 00001109 E2CC                    	LOOP	Create_dup_jfn
  8807                                  
  8808 0000110B 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8809                                  	; 06/11/2022
  8810                                  	;mov	[es:16h],bx
  8811 0000110F 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8812 00001114 8C06[3003]              	MOV	[CurrentPDB],ES
  8813                                  	;MOV	DS,BX ; 28/07/2019
  8814                                  	; 07/12/2022
  8815                                  	;mov	ds,[cs:DosDSeg]
  8816                                  	; 15/12/2022
  8817                                  	; ds = [cs:DosDSeg]
  8818 00001118 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8819                                  	;mov	ds,bx
  8820                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8821                                  	; 15/12/2022
  8822                                  	;mov	ds,bx
  8823                                  
  8824                                  ; end of new process create
  8825                                  
  8826                                  Create_PDB_cont:
  8827                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8828                                  
  8829                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8830                                  
  8831                                  	;; 28/07/2019
  8832                                  	;;push	ds
  8833                                  	;;mov	ds,[cs:DosDSeg]
  8834                                  	;mov	byte [CreatePDB],0
  8835                                  	;;pop	ds
  8836                                  
  8837                                  ; 05/12/2022
  8838                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8839                                  ;	; (push-pop ds is nonsense here! 
  8840                                  ;	;  but i am using same code with original MSDOS.SYS
  8841                                  ;	;  for address compatibility.)
  8842                                  ;	push	ds
  8843                                  ;	; ds = [cs:DosDSeg] !
  8844                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8845                                  ;	mov	byte [CreatePDB],0
  8846                                  ;	pop	ds
  8847                                  
  8848 0000111D 58                      	POP	AX ;*
  8849                                  
  8850                                  	;entry	SETMEM
  8851                                  
  8852                                  	; 17/12/2022
  8853                                  	; cx = 0
  8854                                  
  8855                                  ;---------------------------------------------------------------------------
  8856                                  ; Inputs:
  8857                                  ;	AX = Size of memory in paragraphs
  8858                                  ;	DX = Segment
  8859                                  ; Function:
  8860                                  ;	Completely prepares a program base at the
  8861                                  ;	specified segment.
  8862                                  ; Called at DOS init
  8863                                  ; Outputs:
  8864                                  ;	DS = DX
  8865                                  ;	ES = DX
  8866                                  ;	[0] has INT int_abort
  8867                                  ;	[2] = First unavailable segment
  8868                                  ;	[5] to [9] form a long call to the entry point
  8869                                  ;	[10] to [13] have exit address (from int_terminate)
  8870                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8871                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8872                                  ; DX,BP unchanged. All other registers destroyed.
  8873                                  ;---------------------------------------------------------------------------
  8874                                  
  8875                                  SETMEM:
  8876                                  	;XOR	CX,CX
  8877                                  	; 17/12/2022
  8878                                  	; cx = 0
  8879 0000111E 8ED9                    	MOV	DS,CX
  8880 00001120 8EC2                    	MOV	ES,DX
  8881                                  	;mov	si,88h
  8882 00001122 BE8800                  	MOV	SI,addr_int_terminate
  8883                                  	;mov	di,10 ; 0Ah
  8884 00001125 BF0A00                  	MOV	DI,SAVEXIT
  8885                                  	;MOV	CX,6
  8886                                  	; 15/12/2022
  8887 00001128 B106                    	mov	cl,6
  8888 0000112A F3A5                    	REP	MOVSW
  8889 0000112C 26A30200                	MOV	[ES:2],AX
  8890 00001130 29D0                    	SUB	AX,DX
  8891 00001132 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8892 00001135 7603                    	JBE	short HAVDIF
  8893 00001137 B8FF0F                  	MOV	AX,MAXDIF
  8894                                  HAVDIF:
  8895 0000113A 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8896 0000113D BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8897 00001140 29C3                    	SUB	BX,AX
  8898 00001142 B104                    	MOV	CL,4
  8899 00001144 D3E0                    	SHL	AX,CL
  8900 00001146 8EDA                    	MOV	DS,DX
  8901                                  
  8902                                  	; (MSDOS 6.0 note)
  8903                                  	;
  8904                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8905                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8906                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8907                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8908                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8909                                  	; making this equvalence valid for this particular case. If however
  8910                                  	; there is less than 64K remaining the address in BX:AX will not 
  8911                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8912                                  	; into the PSP.
  8913                                  	;
  8914                                  	; Therefore for the case where there is less than 64K remaining in 
  8915                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8916                                  	; requirements will not work. Call 5, however will continue to work
  8917                                  	; for all cases.
  8918                                  	;
  8919                                  
  8920                                  	;mov	[6],ax
  8921                                  	;mov	[8],bx
  8922                                  
  8923 00001148 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8924 0000114B 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8925                                  
  8926                                  	; 06/05/2019 - Retro DOS v4.0
  8927 0000114F 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8928                                  					;    memory left
  8929 00001152 740C                    	je	short addr_ok		; Y: the above calculated address is
  8930                                  					;    OK
  8931                                  					; N: 
  8932                                  
  8933 00001154 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8934 0000115A C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8935                                  addr_ok:
  8936                                  	;mov	word [0],20CDh
  8937 00001160 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8938                                  	;mov	byte [5],9Ah
  8939 00001166 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8940                                  	;mov	word [50h],21CDh
  8941 0000116B C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8942                                  	;mov	byte [52h],0CBh
  8943 00001171 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8944                                  	;mov	word [34h],18h
  8945 00001176 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8946                                  	;mov	word [36h],ds
  8947 0000117C 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8948                                  	;mov	word [32h],20
  8949 00001180 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8950                                  ;
  8951                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8952                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8953                                  ; particular SFT.  We perform this by requiring that the server link together
  8954                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8955                                  ; initialize this pointer.
  8956                                  ;
  8957                                   	;mov	word [38h],-1
  8958 00001186 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8959                                  	;mov	word [3Ah],-1
  8960 0000118C C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8961                                  
  8962                                  	; 06/05/2019
  8963                                  	; Set the real version number in the PSP - 5.00
  8964                                  
  8965                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8966                                  	; 07/12/2022
  8967 00001192 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8968                                  
  8969 00001199 C3                      	retn
  8970                                  
  8971                                  ; 29/04/2019 - Retro DOS v4.0
  8972                                  
  8973                                  ;BREAK <$GSetMediaID -- get set media ID>
  8974                                  
  8975                                  ;---------------------------------------------------------------------------
  8976                                  ; Inputs:
  8977                                  ;	BL= drive number as defined in IOCTL
  8978                                  ;	AL= 0 get media ID
  8979                                  ;	    1 set media ID
  8980                                  ;	DS:DX= buffer containing information
  8981                                  ;		DW  0  info level (set on input)
  8982                                  ;		DD  ?  serial #
  8983                                  ;		DB  11 dup(?)  volume id
  8984                                  ;		DB   8 dup(?)  file system type
  8985                                  ; Function:
  8986                                  ;	Get or set media ID
  8987                                  ; Returns:
  8988                                  ;	carry clear, DS:DX is filled
  8989                                  ;	carry set, error
  8990                                  ;---------------------------------------------------------------------------
  8991                                  
  8992                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8993                                  _$GSetMediaID:
  8994                                  	; RAWIO - GET_MEDIA_ID
  8995 0000119A B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8996 0000119D 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8997 0000119F 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8998                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8999                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9000                                  	; 15/12/2022
  9001 000011A1 FEC8                    	dec	al
  9002 000011A3 7507                    	jnz	short errorfunc ; al > 1
  9003                                  	; RAWIO - SET_MEDIA_ID
  9004                                  	;mov	cx,0846h	      ;AN001;MS.;
  9005                                  	; 15/12/2022
  9006 000011A5 B146                    	mov	cl,46h	; cx = 0846h 
  9007                                  doioctl:			      ;AN000;
  9008 000011A7 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9009                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9010                                  	;call	_$IOCTL
  9011                                  	;retn			      ;AN000;MS.;
  9012                                  	; 15/12/2022
  9013 000011A9 E98F10                  	jmp	_$IOCTL
  9014                                  errorfunc:			      ;AN000;
  9015                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9016                                  	;mov	al,1
  9017 000011AC B001                    	mov	al,error_invalid_function
  9018 000011AE E98FF4                  	jmp	SYS_RET_ERR
  9019                                  
  9020                                  ; 16/05/2019 - Retro DOS v4.0
  9021                                  
  9022                                  ;============================================================================
  9023                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9024                                  ;============================================================================
  9025                                  ; 20/07/2018 - Retro DOS v3.0
  9026                                  ; 29/04/2019 - Retro DOS v4.0
  9027                                  
  9028                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9029                                  ;----------------------------------------------------------------------------
  9030                                  ;
  9031                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9032                                  ;	     Strings of different lengths don't match.
  9033                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9034                                  ;   Outputs: Z if strings same, NZ if different
  9035                                  ;   Registers modified: NONE
  9036                                  ;----------------------------------------------------------------------------
  9037                                  
  9038                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9039                                  StrCmp:
  9040 000011B1 56                      	push	si
  9041 000011B2 57                      	push	di
  9042 000011B3 50                      	push	ax
  9043                                  Cmplp:
  9044 000011B4 AC                      	LODSB
  9045 000011B5 E80C3E                  	call	UCase			; convert to upper case
  9046 000011B8 E85E3E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9047 000011BB 88C4                    	MOV	AH,AL
  9048 000011BD 268A05                  	MOV	AL,[ES:DI]
  9049 000011C0 47                      	INC	DI
  9050 000011C1 E8003E                  	call	UCase			; convert to upper case
  9051 000011C4 E8523E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9052 000011C7 38C4                    	CMP	AH,AL
  9053 000011C9 7504                    	JNZ	short PopRet		; Strings dif
  9054                                  
  9055 000011CB 08C0                    	OR	AL,AL
  9056 000011CD 75E5                    	JNZ	short Cmplp		; More string
  9057                                  PopRet:
  9058 000011CF 58                      	pop	ax
  9059 000011D0 5F                      	pop	di
  9060 000011D1 5E                      	pop	si
  9061 000011D2 C3                      	retn
  9062                                  
  9063                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9064                                  ;----------------------------------------------------------------------------
  9065                                  ;
  9066                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9067                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9068                                  ;	characters.
  9069                                  ;
  9070                                  ;   Inputs:	DS:SI - pointer to source string
  9071                                  ;		ES:DI - pointer to destination string
  9072                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9073                                  ;		DS:SI point byte after nul byte at end of source string
  9074                                  ;   Registers modified: SI,DI
  9075                                  ;----------------------------------------------------------------------------
  9076                                  
  9077                                  StrCpy:
  9078 000011D3 50                      	push	ax
  9079                                  CPYLoop:
  9080 000011D4 AC                      	LODSB
  9081 000011D5 E8EC3D                  	call	UCase			; convert to upper case
  9082 000011D8 E83E3E                  	call	PATHCHRCMP		; convert / to \ ;
  9083 000011DB AA                      	STOSB
  9084                                  
  9085 000011DC 08C0                    	OR	AL,AL
  9086 000011DE 75F4                    	JNZ	short CPYLoop
  9087 000011E0 58                      	pop	ax
  9088 000011E1 C3                      	retn
  9089                                  
  9090                                  ;----------------------------------------------------------------------------
  9091                                  ; Procedure Name : FStrCpy
  9092                                  ;----------------------------------------------------------------------------
  9093                                  
  9094                                  FStrCpy:
  9095 000011E2 50                      	push	ax
  9096                                  FCPYLoop:
  9097 000011E3 AC                      	LODSB
  9098 000011E4 AA                      	STOSB
  9099 000011E5 08C0                    	OR	AL,AL
  9100 000011E7 75FA                    	JNZ	short FCPYLoop
  9101 000011E9 58                      	pop	ax
  9102 000011EA C3                      	retn
  9103                                  
  9104                                  ; 20/07/2018 - Retro DOS v3.0
  9105                                  ;----------------------------------------------------------------------------
  9106                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9107                                  ;----------------------------------------------------------------------------
  9108                                  ;
  9109                                  ;UCase:	
  9110                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9111                                  ;	retn
  9112                                  
  9113                                  ;Break <StrLen - compute length of string ES:DI>
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ;**	StrLen - Compute Length of String
  9116                                  ;
  9117                                  ;	StrLen computes the length of a string, including the trailing 00
  9118                                  ;
  9119                                  ;	ENTRY	(es:di) = address of string
  9120                                  ;	EXIT	(cx) = size of string
  9121                                  ;	USES	cx, flags
  9122                                  ;----------------------------------------------------------------------------
  9123                                  
  9124                                  StrLen:
  9125 000011EB 57                      	push	di
  9126 000011EC 50                      	push	ax
  9127                                  	;MOV	CX,-1
  9128 000011ED B9FFFF                  	mov	cx,65535
  9129 000011F0 30C0                    	XOR	AL,AL
  9130 000011F2 F2AE                    	REPNE	SCASB
  9131 000011F4 F7D1                    	NOT	CX
  9132 000011F6 58                      	pop	ax
  9133 000011F7 5F                      	pop	di
  9134 000011F8 C3                      	retn
  9135                                  
  9136                                  ;----------------------------------------------------------------------------
  9137                                  ;**	DStrLen - Compute Length of String
  9138                                  ;
  9139                                  ;	ENTRY	(ds:si) = address of string
  9140                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9141                                  ;	USES	cx, flags
  9142                                  ;----------------------------------------------------------------------------
  9143                                  
  9144                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9145 000011F9 E80300                  	CALL	XCHGP
  9146 000011FC E8ECFF                  	CALL	StrLen
  9147                                  	;CALL	XCHGP
  9148                                  	;retn
  9149                                  	; 18/12/2022
  9150                                  	;jmp	short XCHGP
  9151                                  
  9152                                  ;----------------------------------------------------------------------------
  9153                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9154                                  ;
  9155                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9156                                  ;
  9157                                  ;	ENTRY	none
  9158                                  ;	EXIT	pairs exchanged
  9159                                  ;	USES	SI, DI, DS, ES
  9160                                  ;----------------------------------------------------------------------------
  9161                                  
  9162                                  XCHGP:
  9163 000011FF 1E                      	push	ds
  9164 00001200 06                      	push	es
  9165 00001201 1F                      	pop	ds
  9166 00001202 07                      	pop	es
  9167 00001203 87F7                    	XCHG	SI,DI
  9168                                  xchgp_retn:
  9169 00001205 C3                      	retn
  9170                                  
  9171                                  ;Break	<Idle - wait for a specified amount of time>
  9172                                  ;----------------------------------------------------------------------------
  9173                                  ;
  9174                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9175                                  ;   	   we spin until RetryLoop is exhausted.
  9176                                  ;
  9177                                  ;   Inputs:	RetryLoop is the number of times we spin
  9178                                  ;   Outputs:	Wait
  9179                                  ;   Registers modified: none
  9180                                  ;----------------------------------------------------------------------------
  9181                                  
  9182                                  Idle:
  9183                                  	;test	byte [SS:FSHARING],0FFh
  9184 00001206 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9185                                  	;retnz
  9186 0000120C 75F7                    	jnz	short xchgp_retn
  9187                                  	;SAVE	<CX>
  9188 0000120E 51                      	push	cx
  9189 0000120F 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9190 00001214 E308                    	JCXZ	Idle3
  9191                                  Idle1:	
  9192 00001216 51                      	PUSH	CX
  9193 00001217 31C9                    	XOR	CX,CX
  9194                                  Idle2:	
  9195 00001219 E2FE                    	LOOP	Idle2
  9196 0000121B 59                      	POP	CX
  9197 0000121C E2F8                    	LOOP	Idle1
  9198                                  Idle3:	
  9199                                  	;RESTORE <CX>
  9200 0000121E 59                      	pop	cx
  9201 0000121F C3                      	retn
  9202                                  
  9203                                  ;Break	<TableDispatch - dispatch to a table>
  9204                                  ;----------------------------------------------------------------------------
  9205                                  ;
  9206                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9207                                  ;   routine. Preserve all input registers to the routine.
  9208                                  ;
  9209                                  ;   Inputs:	Push	return address
  9210                                  ;		Push	Table address
  9211                                  ;		Push	index (byte)
  9212                                  ;   Outputs:	appropriate routine gets jumped to.
  9213                                  ;		return indicates invalid index
  9214                                  ;   Registers modified: none.
  9215                                  ;----------------------------------------------------------------------------
  9216                                  
  9217                                  struc TFrame	 ; TableFrame
  9218 00000000 ????                    .OldBP:	 resw 1  ; 0
  9219 00000002 ????                    .OldRet: resw 1  ; 2
  9220 00000004 ??                      .Index:	 resb 1  ; 4
  9221 00000005 ??                      .Pad:	 resb 1  ; 5  
  9222 00000006 ????                    .Tab:	 resw 1  ; 6
  9223 00000008 ????                    .NewRet: resw 1  ; 8
  9224                                  endstruc
  9225                                  
  9226                                  TableDispatch:
  9227 00001220 55                      	PUSH	BP
  9228 00001221 89E5                    	MOV	BP,SP
  9229 00001223 53                      	PUSH	BX			; save BX
  9230                                  	;mov	bx,[bp+6]
  9231 00001224 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9232 00001227 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9233                                  	;cmp	[bp+4],bl
  9234 0000122A 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9235 0000122D 7317                    	JAE	short TableError	; yes
  9236                                  	;mov	bl,[bp+4]
  9237 0000122F 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9238 00001232 30FF                    	XOR	BH,BH			; convert to word
  9239 00001234 D1E3                    	SHL	BX,1			; convert to word pointer
  9240 00001236 43                      	INC	BX			; point past first length byte
  9241                                  	; 17/08/2018
  9242                                  	;add	bx,[bp+6]
  9243 00001237 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9244 0000123A 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9245                                  	;mov	[bp+6],bx
  9246 0000123D 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9247 00001240 5B                      	POP	BX			; restore BX
  9248 00001241 5D                      	POP	BP			; restore BP
  9249 00001242 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9250 00001245 C3                      	retn				; do operation
  9251                                  TableError:
  9252 00001246 5B                      	POP	BX			; restore BX
  9253 00001247 5D                      	POP	BP			; restore BP
  9254 00001248 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9255                                  
  9256                                  ;Break	<TestNet - determine if a CDS is for the network>
  9257                                  ;----------------------------------------------------------------------------
  9258                                  ;
  9259                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9260                                  ;	network CDS. This will handle NULL cds also.
  9261                                  ;
  9262                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9263                                  ;   Outputs:	ES:DI = ThisCDS
  9264                                  ;		carry Set => network
  9265                                  ;		carry Clear => local
  9266                                  ;   Registers modified: none.
  9267                                  ;----------------------------------------------------------------------------
  9268                                  
  9269                                  TestNet:
  9270                                  	;LES	DI,[CS:THISCDS]
  9271                                  
  9272                                  	; 16/05/2019 - Retro DOS v4.0
  9273 0000124B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9274 00001250 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9275 00001255 83FFFF                  	CMP	DI,-1
  9276 00001258 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9277                                  	;;test	word [es:di+43h],8000h
  9278                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9279                                  	;test	byte [es:di+44h],80h
  9280 0000125A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9281 0000125F 7501                    	JNZ	short CMCRet		; jump has carry clear
  9282 00001261 C3                      	retn				; carry is clear
  9283                                  CMCRet: 
  9284 00001262 F5                      	CMC
  9285 00001263 C3                      	retn
  9286                                  
  9287                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9288                                  ;----------------------------------------------------------------------------
  9289                                  ;
  9290                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9291                                  ;	network file.
  9292                                  ;
  9293                                  ;   Inputs:	ES:DI point to SFT
  9294                                  ;   Outputs:	Zero set if not network sft
  9295                                  ;		zero reset otherwise
  9296                                  ;		Carry CLEAR!!!
  9297                                  ;   Registers modified: none.
  9298                                  ;----------------------------------------------------------------------------
  9299                                  
  9300                                  IsSFTNet:
  9301                                  	;;test	word [es:di+5],8000h
  9302                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9303                                  	; 16/05/2019 
  9304                                  	;test	byte [es:di+6],80h
  9305 00001264 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9306 00001269 C3                      	retn
  9307                                  
  9308                                  ;Break	<FastInit - Initialize FastTable entries >
  9309                                  ;----------------------------------------------------------------------------
  9310                                  ;   DOS 4.00   2/9/87
  9311                                  ;   FastInit  - initialize the FASTXXX routine entry
  9312                                  ;		  in the FastTable
  9313                                  ;
  9314                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9315                                  ;		DS:SI = address of FASTXXX routine entry
  9316                                  ;		   SI = -1 for query only
  9317                                  ;   Outputs:	Carry flag clear, if success
  9318                                  ;		Carry flag set,   if failure
  9319                                  ;
  9320                                  ;
  9321                                  ;----------------------------------------------------------------------------
  9322                                  
  9323                                  ;Procedure FastInit,NEAR
  9324                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9325                                  
  9326                                  ;	; MSDOS 3.3
  9327                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9328                                  ;FastInit:
  9329                                  ;	mov	di,FastTable ; FastOpenTable
  9330                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9331                                  ;	mov	bx,cs			; get DOS segment
  9332                                  ;	cmp	ax,bx			; first time installed ?	
  9333                                  ;	je	short ok_install	; yes
  9334                                  ;	stc				; set carry
  9335                                  ;	retn				; (cf=1 means) already installed !
  9336                                  ;
  9337                                  ;ok_install:
  9338                                  ;	mov	bx,FastTable ; FastOpenTable
  9339                                  ;	mov	cx,ds
  9340                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9341                                  ;	mov	[cs:bx+4],cx
  9342                                  ;	mov	[cs:bx+2],si
  9343                                  ;	retn
  9344                                  
  9345                                  ; 16/05/2019 - Retro DOS v4.0
  9346                                  
  9347                                  FastInit:
  9348                                  	; MSDOS 6.0
  9349                                  	;hkn; set up es to dosdataseg.
  9350 0000126A 06                      	push	es
  9351                                  	;getdseg <es>			; es -> dosdata
  9352 0000126B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9353                                  
  9354                                  	;hkn; FastTable is in DOSDATA
  9355 00001270 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9356 00001273 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9357 00001274 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9358 00001276 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9359 00001278 D1E3                    	SHL	BX,1			;AN000;FO.
  9360 0000127A 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9361 0000127C 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9362                                  fcheck: 				;AN000;
  9363 00001280 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9364 00001282 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9365 00001284 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9366 00001286 09C0                    	OR	AX,AX			;AN000;FO.;
  9367                                  	;JZ	short ok_install	;AN000;FO.;
  9368                                  	;STC				;AN000;FO.;; already installed !
  9369                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9370                                  	; 14/01/2024
  9371 00001288 F9                      	stc
  9372 00001289 7517                    	jnz	short FSret
  9373                                  ok_install:				;AN000;
  9374 0000128B 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9375 0000128E 7412                    	JZ	short FSret		;AN000;FO.; yes
  9376 00001290 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9377 00001292 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9378 00001296 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9379                                  
  9380                                  ;hkn; FastFlg moved to DOSDATA
  9381 00001299 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9382 0000129C 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9383                                  	;or	byte [es:di],80h
  9384 0000129E 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9385                                  FSret:					;AN000;
  9386 000012A2 07                      	pop	es
  9387 000012A3 C3                      	retn				;AN000;FO.
  9388                                  
  9389                                  ;EndProc FastInit
  9390                                  
  9391                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9392                                  ;----------------------------------------------------------------------------
  9393                                  ;   DOS 3.3   6/10/86
  9394                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9395                                  ;
  9396                                  ;   Inputs:	None
  9397                                  ;   Outputs:	AX = -1 and carry flag set
  9398                                  ;
  9399                                  ;   Registers modified: none.
  9400                                  ;----------------------------------------------------------------------------
  9401                                  
  9402                                  FastRet:
  9403                                  	;mov	ax,-1
  9404                                  	;stc
  9405                                  	;retf
  9406 000012A4 F9                      	STC
  9407 000012A5 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9408 000012A7 CB                      	RETF
  9409                                  
  9410                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9411                                  ;----------------------------------------------------------------------------
  9412                                  ;   DOS 3.3   6/10/86
  9413                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9414                                  ;
  9415                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9416                                  ;   Outputs:	same output as $OPEN
  9417                                  ;
  9418                                  ;----------------------------------------------------------------------------
  9419                                  
  9420                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9421                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9422                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9423                                  
  9424                                  NLS_OPEN:
  9425                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9426                                  ;	MOV	BYTE [CPSWFLAG],0
  9427                                  ;	PUSH	BX		 ; save current state
  9428                                  
  9429 000012A8 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9430 000012AA E8AE5B                  	call	_$OPEN
  9431                                  
  9432                                  ;	POP	BX		 ; restore current state
  9433                                  ;	MOV	[CPSWFLAG],BL
  9434                                  
  9435 000012AD C3                      	RETN
  9436                                  
  9437                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9438                                  ;----------------------------------------------------------------------------
  9439                                  ;   DOS 3.3   6/10/86
  9440                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9441                                  ;
  9442                                  ;   Inputs:	BP = open mode
  9443                                  ;   Outputs:	same output as $LSEEK
  9444                                  ;
  9445                                  ;----------------------------------------------------------------------------
  9446                                  
  9447                                  ; 16/05/2019 - Retro DOS v4.0
  9448                                  
  9449                                  NLS_LSEEK:
  9450 000012AE 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9451 000012B3 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9452 000012B8 E81000                  	CALL	Fake_User_Stack
  9453 000012BB 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9454 000012BD E84855                  	call	_$LSEEK
  9455 000012C0 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9456 000012C5 368F06[8405]            	POP	word [SS:USER_SP]
  9457 000012CA C3                      	RETN
  9458                                  
  9459                                  ;Break	<Fake_User_Stack - save user stack>
  9460                                  ;----------------------------------------------------------------------------
  9461                                  ;   DOS 3.3   6/10/86
  9462                                  ;   Fake_User_Stack - save user stack pointer
  9463                                  ;
  9464                                  ;----------------------------------------------------------------------------
  9465                                  
  9466                                  Fake_User_Stack:
  9467 000012CB 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9468 000012CF 36A3[8405]              	MOV	[SS:USER_SP],AX
  9469 000012D3 8CD0                    	MOV	AX,SS
  9470 000012D5 36A3[8605]              	MOV	[SS:USER_SS],AX
  9471 000012D9 C3                      	RETN
  9472                                  
  9473                                  ;Break	<GetDevList - get device header list pointer>
  9474                                  ;----------------------------------------------------------------------------
  9475                                  ;   DOS 3.3   7/25/86
  9476                                  ;   GetDevList - get device header list pointer
  9477                                  ;
  9478                                  ;   Output: AX:BX points to the device header list
  9479                                  ;----------------------------------------------------------------------------
  9480                                  
  9481                                  GetDevList:
  9482                                  	; 16/05/2019 - Retro DOS v4.0
  9483 000012DA BE[280D]                	MOV	SI,SysInitTable
  9484 000012DD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9485 000012E2 C534                    	LDS	SI,[SI]
  9486                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9487 000012E4 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9488                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9489 000012E7 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9490 000012EA C3                      	RETN
  9491                                  
  9492                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9493                                  ;----------------------------------------------------------------------------
  9494                                  ;   DOS 3.3   7/25/86
  9495                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9496                                  ;
  9497                                  ;   Inputs:	BP = function code 0CH
  9498                                  ;   Outputs:	same output as generic $IOCTL
  9499                                  ;
  9500                                  ;----------------------------------------------------------------------------
  9501                                  
  9502                                  NLS_IOCTL:
  9503                                  	; 16/05/2019 - Retro DOS v4.0
  9504 000012EB 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9505 000012F0 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9506 000012F5 E8D3FF                  	CALL	Fake_User_Stack
  9507 000012F8 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9508 000012FA E83E0F                  	call	_$IOCTL
  9509 000012FD 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9510 00001302 368F06[8405]            	POP	word [SS:USER_SP]
  9511 00001307 C3                      	RETN
  9512                                  
  9513                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9514                                  ;----------------------------------------------------------------------------
  9515                                  ;   DOS 3.3   7/25/86
  9516                                  ;   NLS_GETEXT	-
  9517                                  ;
  9518                                  ;   Inputs:	none
  9519                                  ;   Outputs:	AX = extended error
  9520                                  ;
  9521                                  ;----------------------------------------------------------------------------
  9522                                  
  9523                                  NLS_GETEXT:
  9524                                  	; 16/05/2019 - Retro DOS v4.0
  9525 00001308 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9526                                  	; 23/09/2023
  9527                                  MSG_RETRIEVAL:
  9528 0000130C C3                      	RETN
  9529                                  
  9530                                  ; 29/04/2019 - Retro DOS v4.0
  9531                                  
  9532                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9533                                  
  9534                                  ;----------------------------------------------------------------------------
  9535                                  ;   DOS 4.00
  9536                                  ;
  9537                                  ;   Inputs:	DL=0 get extended error message addr
  9538                                  ;		  =1 set extended error message addr
  9539                                  ;		  =2 get parser error message addr
  9540                                  ;		  =3 set parser error message addr
  9541                                  ;		  =4 get critical error message addr
  9542                                  ;		  =5 set critical error message addr
  9543                                  ;		  =6 get file system error message addr
  9544                                  ;		  =7 set file system error message addr
  9545                                  ;		  =8 get address for code reduction
  9546                                  ;		  =9 set address for code reduction
  9547                                  ;   Function:	get/set message address
  9548                                  ;   Outputs:	ES:DI points to addr when get
  9549                                  ;----------------------------------------------------------------------------
  9550                                  
  9551                                  ;Procedure MSG_RETRIEVAL,NEAR
  9552                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9553                                  
  9554                                  ; 23/09/2023
  9555                                  ;MSG_RETRIEVAL:
  9556                                  
  9557                                  ;;	NOTE:  This function lives in command.com resident code now.
  9558                                  ;;	If the int 2F ever gets this far, we'll return registers
  9559                                  ;;	unchanged, which produces the same result as before, if
  9560                                  ;;	command.com wasn't present (and therefore no messages available).
  9561                                  ;;
  9562                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9563                                  ;;	No_Op zeroes AL.
  9564                                  ;;
  9565                                  ;;;hkn; set up ds to point to DOSDATA
  9566                                  ;;	push	ds
  9567                                  ;;	getdseg	<ds>			; ds -> dosdata
  9568                                  ;;
  9569                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9570                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9571                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9572                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9573                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9574                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9575                                  ;;	DEC	AL		    ;AN000;;MS.
  9576                                  ;;toget:				    ;AN000;
  9577                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9578                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9579                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9580                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9581                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9582                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9583                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9584                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9585                                  ;;getget: 				     ;AN000;
  9586                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9587                                  ;;MSGret: 				     ;AN000;
  9588                                  ;;	POP	SI			     ;AN000;;MS.
  9589                                  ;;	POP	AX			     ;AN000;;MS.
  9590                                  ;;
  9591                                  ;;	pop	ds
  9592                                  
  9593                                  ;	return				     ;AN000;;MS. exit
  9594                                  
  9595                                  ; 23/09/2023
  9596                                  ;	retn	; 29/04/2019
  9597                                  
  9598                                  ;============================================================================
  9599                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9600                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9601                                  ;============================================================================
  9602                                  ; 20/07/2018 - Retro DOS v3.0
  9603                                  
  9604                                  ;	; MSDOS 3.3
  9605                                  ;	; 08/08/2018 - Retro DOS v3.0
  9606                                  ;ECritMEM:
  9607                                  ;ECritSFT:
  9608                                  ;	;
  9609                                  ;ECritDisk:
  9610                                  ;	retn
  9611                                  ;	;push	ax
  9612                                  ;	
  9613                                  ;	mov	ax,8001h
  9614                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9615                                  ;			; AL = critical section number (00h-0Fh)
  9616                                  ;	pop	ax
  9617                                  ;	retn
  9618                                  ;
  9619                                  ;	; MSDOS 3.3
  9620                                  ;	; 08/08/2018 - Retro DOS v3.0
  9621                                  ;LCritMEM:
  9622                                  ;LCritSFT:
  9623                                  ;	;
  9624                                  ;LCritDisk:
  9625                                  ;	retn
  9626                                  ;	;push	ax
  9627                                  ;	
  9628                                  ;	mov	ax,8101h
  9629                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9630                                  ;			; AL = critical section number (00h-0Fh)
  9631                                  ;	pop	ax
  9632                                  ;	retn
  9633                                  ;
  9634                                  ;ECritDevice:
  9635                                  ;	retn
  9636                                  ;	;push	ax
  9637                                  ;	
  9638                                  ;	mov	ax,8002h
  9639                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9640                                  ;			; AL = critical section number (00h-0Fh)
  9641                                  ;	pop	ax
  9642                                  ;	retn
  9643                                  ;
  9644                                  ;LCritDevice:
  9645                                  ;	retn
  9646                                  ;	;push	ax
  9647                                  ;	
  9648                                  ;	mov	ax,8102h
  9649                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9650                                  ;			; AL = critical section number (00h-0Fh)
  9651                                  ;	pop	ax
  9652                                  ;	retn
  9653                                  
  9654                                  ;============================================================================
  9655                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9656                                  ;============================================================================
  9657                                  ; 12/05/2019 - Retro DOS v4.0
  9658                                  
  9659                                  ; Critical Section Routines
  9660                                  
  9661                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9662                                  
  9663                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9664                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9665                                  
  9666                                  ; ---------------------------------------------------------------------------
  9667                                  ; Each handler must leave everything untouched; including flags!
  9668                                  ;
  9669                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9670                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9671                                  ; ---------------------------------------------------------------------------
  9672                                  
  9673                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9674                                  ; ---------------------------------------------------------------------------
  9675                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9676                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9677                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9678                                  ; ---------------------------------------------------------------------------
  9679                                  
  9680                                  ;%macro POPFF 0
  9681                                  ;	jmp	$+3
  9682                                  ;	iret
  9683                                  ;	push	cs
  9684                                  ;	call	$-2
  9685                                  ;%endmacro
  9686                                  
  9687                                  ; ---------------------------
  9688                                  
  9689                                  ;Procedure  ECritDisk,NEAR
  9690                                  	;public  ECritMEM
  9691                                  	;public  ECritSFT
  9692                                  ECritMEM:
  9693                                  ECritSFT:
  9694                                  ;
  9695                                  ECritDisk:
  9696                                  
  9697                                  ;SR; Check if critical section is to be entered
  9698                                  
  9699 0000130D 9C                      	pushf
  9700 0000130E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9701 00001314 740D                    	jz	short ECritDisk_2
  9702                                  
  9703                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9704                                  ;	;popff  ; * (macro)
  9705                                  ;	jmp	short ECritDisk_1 ; *
  9706                                  ;
  9707                                  ;ECritDisk_iret: ; *
  9708                                  ;	iret ; *
  9709                                  
  9710                                  	; 16/12/2022
  9711                                  	; 13/11/2022
  9712                                  	;jmp	short ECritDisk_1
  9713                                  	; 06/11/2022
  9714                                  ;ECritDisk_iret:
  9715                                  ;	iret	
  9716                                  
  9717                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9718                                  ECritDisk_1:
  9719 00001316 0E                      	push	cs ; *
  9720 00001317 E80800                  	call	ECritDisk_iret ; *		
  9721                                  	
  9722                                  ECritDisk_0:
  9723 0000131A 50                      	PUSH    AX
  9724                                  	;MOV	AX,8000h+critDisk
  9725                                  	;INT	int_IBM
  9726 0000131B B80180                  	mov	ax,8001h
  9727 0000131E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9728                                  			; AL = critical section number (00h-0Fh)
  9729 00001320 58                      	POP     AX
  9730 00001321 C3                      	retn
  9731                                  
  9732                                  	; 16/12/2022
  9733                                  	; 13/11/2022
  9734                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9735                                  LCritDisk_iret: 
  9736 00001322 CF                      	iret
  9737                                  
  9738                                  ECritDisk_2:
  9739                                  	;;popff ; *
  9740                                  	;;retn
  9741                                  ;	jmp	short ECritDisk_3 ; *
  9742                                  ;ECritDisk_iret2: ; *
  9743                                  ;	iret
  9744                                  	
  9745                                  	; 16/12/2022
  9746                                  	; 13/11/2022
  9747                                  	;jmp	short ECritDisk_3
  9748                                  ;ECritDisk_iret2:
  9749                                  	;iret
  9750                                  
  9751                                  ECritDisk_3:
  9752 00001323 0E                      	push    cs ; *
  9753                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9754                                  	;call	ECritDisk_iret2 ; *
  9755                                  	;retn
  9756                                  	; 16/12/2022
  9757 00001324 E8FBFF                  	call	ECritDisk_iret
  9758 00001327 C3                      	retn
  9759                                  
  9760                                  ;EndProc ECritDisk
  9761                                  
  9762                                  ; ---------------------------
  9763                                  
  9764                                  ;Procedure   LCritDisk,NEAR
  9765                                  	;public  LCritMEM
  9766                                  	;public  LCritSFT
  9767                                  LCritMEM:
  9768                                  LCritSFT:
  9769                                  ;
  9770                                  LCritDisk:
  9771                                  
  9772                                  ;SR; Check if critical section is to be entered
  9773                                  
  9774 00001328 9C                      	pushf
  9775 00001329 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9776 0000132F 740C                    	jz	short LCritDisk_2
  9777                                  	;popff  ; * (macro)
  9778                                  ;	jmp	short LCritDisk_1 ; *
  9779                                  ;
  9780                                  ;LCritDisk_iret: ; *
  9781                                  ;	iret ; *
  9782                                  
  9783                                  	; 16/12/2022
  9784                                  	; 13/11/2022
  9785                                  	;jmp	short LCritDisk_1
  9786                                  ;LCritDisk_iret:
  9787                                  	;iret
  9788                                  
  9789                                  LCritDisk_1:
  9790 00001331 0E                      	push	cs ; *
  9791 00001332 E8EDFF                  	call	LCritDisk_iret ; *		
  9792                                  	
  9793                                  LCritDisk_0:
  9794 00001335 50                      	PUSH	AX
  9795                                  	;MOV	AX,8100h+critDisk
  9796                                  	;INT	int_IBM
  9797 00001336 B80181                  	mov	ax,8101h
  9798 00001339 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9799                                  			; AL = critical section number (00h-0Fh)
  9800 0000133B 58                      	POP	AX
  9801 0000133C C3                      	retn
  9802                                  
  9803                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9804                                  ;	iret
  9805                                  
  9806                                  LCritDisk_2:
  9807                                  	;;popff ; *
  9808                                  	;;retn
  9809                                  ;	jmp	short LCritDisk_3 ; *
  9810                                  ;LCritDisk_iret2: ; *
  9811                                  ;	iret
  9812                                  
  9813                                  	; 16/12/2022
  9814                                  	; 13/11/2022
  9815                                  	;jmp	short LCritDisk_3
  9816                                  ;LCritDisk_iret2:
  9817                                  	;iret
  9818                                  
  9819                                  LCritDisk_3:
  9820 0000133D 0E                      	push    cs ; *
  9821                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9822                                  	;call	LCritDisk_iret2 ; *
  9823                                  	;retn
  9824                                  	; 16/12/2022
  9825 0000133E E8E1FF                  	call	LCritDisk_iret
  9826 00001341 C3                      	retn
  9827                                  
  9828                                  ;EndProc LCritDisk
  9829                                  
  9830                                  ; ---------------------------
  9831                                  
  9832                                  ;Procedure   ECritDevice,NEAR
  9833                                  
  9834                                  ECritDevice:
  9835                                  
  9836                                  ;SR; Check if critical section is to be entered
  9837                                  
  9838 00001342 9C                      	pushf
  9839 00001343 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9840 00001349 740D                    	jz	short ECritDevice_2
  9841                                  	;popff  ; * (macro)
  9842                                  ;	jmp	short ECritDevice_1 ; *
  9843                                  ;
  9844                                  ;ECritDevice_iret: ; *
  9845                                  ;	iret ; *
  9846                                  
  9847                                  	; 16/12/2022	
  9848                                  	; 13/11/2022
  9849                                  	;jmp	short ECritDevice_1
  9850                                  ;ECritDevice_iret:
  9851                                  	;iret
  9852                                  
  9853                                  ECritDevice_1:
  9854 0000134B 0E                      	push	cs ; *
  9855 0000134C E80800                  	call	ECritDevice_iret ; *		
  9856                                  	
  9857                                  ECritDevice_0:
  9858 0000134F 50                      	PUSH	AX
  9859                                  	;MOV	AX,8000h+critDevice
  9860                                  	;INT	int_IBM
  9861 00001350 B80280                  	mov	ax,8002h
  9862 00001353 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9863                                  			; AL = critical section number (00h-0Fh)
  9864 00001355 58                      	POP     AX
  9865 00001356 C3                      	retn
  9866                                  
  9867                                  	; 16/12/2022
  9868                                  	; 06/12/2022
  9869                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9870                                  LCritDevice_iret: 
  9871 00001357 CF                      	iret
  9872                                  
  9873                                  ECritDevice_2:
  9874                                  	;;popff ; *
  9875                                  	;;retn
  9876                                  ;	jmp	short ECritDevice_3 ; *
  9877                                  ;ECritDevice_iret2: ; *
  9878                                  ;	iret
  9879                                  
  9880                                  	; 16/12/2022
  9881                                  	; 13/11/2022
  9882                                  	;jmp	short ECritDevice_3
  9883                                  ;ECritDevice_iret2:
  9884                                  	;iret
  9885                                  
  9886                                  ECritDevice_3:
  9887 00001358 0E                      	push    cs ; *
  9888                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9889                                  	;call	ECritDevice_iret2 ; *
  9890                                  	;retn
  9891                                  	; 16/12/2022
  9892 00001359 E8FBFF                  	call	ECritDevice_iret
  9893 0000135C C3                      	retn
  9894                                  
  9895                                  ;EndProc ECritDevice
  9896                                  
  9897                                  ; ---------------------------
  9898                                  
  9899                                  ;Procedure   LCritDevice,NEAR
  9900                                  
  9901                                  LCritDevice:
  9902                                  
  9903                                  ;SR; Check if critical section is to be entered
  9904                                  
  9905 0000135D 9C                      	pushf
  9906 0000135E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9907 00001364 740C                    	jz	short LCritDevice_2
  9908                                  	;popff  ; * (macro)
  9909                                  ;	jmp	short LCritDevice_1 ; *
  9910                                  ;
  9911                                  ;LCritDevice_iret: ; *
  9912                                  ;	iret ; *
  9913                                  
  9914                                  	; 16/12/2022
  9915                                  	; 13/11/2022
  9916                                  	;jmp	short LCritDevice_1
  9917                                  ;LCritDevice_iret:
  9918                                  	;iret
  9919                                  
  9920                                  LCritDevice_1:
  9921 00001366 0E                      	push	cs ; *
  9922 00001367 E8EDFF                  	call	LCritDevice_iret ; *		
  9923                                  	
  9924                                  LCritDevice_0:
  9925 0000136A 50                      	PUSH	AX
  9926                                  	;MOV	AX,8100h+critDevice
  9927                                  	;INT	int_IBM
  9928 0000136B B80281                  	mov	ax,8102h
  9929 0000136E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9930                                  			; AL = critical section number (00h-0Fh)
  9931 00001370 58                      	POP     AX
  9932 00001371 C3                      	retn
  9933                                  
  9934                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9935                                  ;	iret
  9936                                  
  9937                                  LCritDevice_2:
  9938                                  	;;popff ; *
  9939                                  	;;retn
  9940                                  ;	jmp	short LCritDevice_3 ; *
  9941                                  ;LCritDevice_iret2: ; *
  9942                                  ;	iret
  9943                                  
  9944                                  	; 16/12/2022
  9945                                  	; 13/11/2022
  9946                                  	;jmp	short LCritDevice_3
  9947                                  ;LCritDevice_iret2:
  9948                                  	;iret
  9949                                  
  9950                                  LCritDevice_3:
  9951 00001372 0E                      	push    cs ; *
  9952                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9953                                  	;call	LCritDevice_iret2 ; *
  9954                                  	;retn
  9955                                  	; 16/12/2022
  9956 00001373 E8E1FF                  	call	LCritDevice_iret
  9957 00001376 C3                      	retn
  9958                                  
  9959                                  ;EndProc LCritDevice
  9960                                  
  9961                                  ;============================================================================
  9962                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9963                                  ;============================================================================
  9964                                  ; 20/07/2018 - Retro DOS v3.0
  9965                                  
  9966                                  ;============================================================================
  9967                                  ; STDIO.ASM - (MSDOS 2.0)
  9968                                  ;============================================================================
  9969                                  
  9970                                  ;
  9971                                  ; Standard device IO for MSDOS (first 12 function calls)
  9972                                  ;
  9973                                  
  9974                                  ;.xlist
  9975                                  ;.xcref
  9976                                  ;INCLUDE STDSW.ASM
  9977                                  ;INCLUDE DOSSEG.ASM
  9978                                  ;.cref
  9979                                  ;.list
  9980                                  
  9981                                  ;TITLE   STDIO - device IO for MSDOS
  9982                                  ;NAME    STDIO
  9983                                  
  9984                                  ;INCLUDE IO.ASM
  9985                                  
  9986                                  ; ---------------------------------------------------------------------------
  9987                                  ;
  9988                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9989                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9990                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9991                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9992                                  ;			    to restore MSDOS 2.0 device IO source code 
  9993                                  ;
  9994                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9995                                  	
  9996                                  ;============================================================================
  9997                                  ; STDIO.ASM - (MSDOS 2.0)
  9998                                  ;============================================================================
  9999                                  
 10000                                  ;
 10001                                  ; Standard device IO for MSDOS (first 12 function calls)
 10002                                  ;
 10003                                  
 10004                                  ;.xlist
 10005                                  ;.xcref
 10006                                  ;INCLUDE STDSW.ASM
 10007                                  ;INCLUDE DOSSEG.ASM
 10008                                  ;.cref
 10009                                  ;.list
 10010                                  
 10011                                  ;TITLE   STDIO - device IO for MSDOS
 10012                                  ;NAME    STDIO
 10013                                  
 10014                                  ;INCLUDE IO.ASM
 10015                                  
 10016                                  ; ---------------------------------------------------------------------------
 10017                                  ;
 10018                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10019                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10020                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10021                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10022                                  ;			    to restore MSDOS 2.0 device IO source code 
 10023                                  ;
 10024                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10025                                  ;
 10026                                  ;============================================================================
 10027                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10028                                  ;============================================================================
 10029                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10030                                  
 10031                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10032                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10033                                  
 10034                                  ;============================================================================
 10035                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10036                                  ;============================================================================
 10037                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10038                                  
 10039                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10040                                  
 10041                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10042                                  ;
 10043                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10044                                  ;	NAME	IBMCPMIO
 10045                                  
 10046                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10047                                  ;
 10048                                  ;	$Std_Con_Input_No_Echo
 10049                                  ;	$Std_Con_String_Output
 10050                                  ;	$Std_Con_String_Input
 10051                                  ;	$RawConIO
 10052                                  ;	$RawConInput
 10053                                  ;	RAWOUT
 10054                                  ;	RAWOUT2
 10055                                  ;
 10056                                  
 10057                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10058                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10059                                  ; references to be SS or CS relative which is desired.
 10060                                  
 10061                                  ; ---------------------------------------------------------------------------
 10062                                  
 10063                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10064                                  ;	NAME	CPMIO2
 10065                                  
 10066                                  ;
 10067                                  ;	Microsoft Confidential
 10068                                  ;	Copyright (C) Microsoft Corporation 1991
 10069                                  ;	All Rights Reserved.
 10070                                  ;
 10071                                  
 10072                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10073                                  ;
 10074                                  ;	$Std_Con_Input
 10075                                  ;	$Std_Con_Output
 10076                                  ;	OUTT
 10077                                  ;	TAB
 10078                                  ;	BUFOUT
 10079                                  ;	$Std_Aux_Input
 10080                                  ;	$Std_Aux_Output
 10081                                  ;	$Std_Printer_Output
 10082                                  ;	$Std_Con_Input_Status
 10083                                  ;	$Std_Con_Input_Flush
 10084                                  ;
 10085                                  ;	Revision History:
 10086                                  ;
 10087                                  ;	  AN000	 version 4.00 - Jan. 1988
 10088                                  
 10089                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10090                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10091                                  ; references to be SS or CS relative which is desired.
 10092                                  
 10093                                  ;DOSCODE SEGMENT
 10094                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10095                                  
 10096                                  
 10097                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10098                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10099                                  ;hkn;	not valid. 
 10100                                  
 10101                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10102                                  ; 08/11/2022
 10103                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10104                                  
 10105                                  ;
 10106                                  ;----------------------------------------------------------------------------
 10107                                  ;
 10108                                  ; Procedure : $Std_Con_Input_No_Echo
 10109                                  ;
 10110                                  ;----------------------------------------------------------------------------
 10111                                  ;
 10112                                  
 10113                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10114                                  
 10115                                  ; Inputs:
 10116                                  ;	None
 10117                                  ; Function:
 10118                                  ;	Input character from console, no echo
 10119                                  ; Returns:
 10120                                  ;	AL = character
 10121                                  
 10122 00001377 1E                      	push	ds
 10123 00001378 56                      	push	si
 10124                                  INTEST:
 10125 00001379 E8673D                  	call	STATCHK
 10126 0000137C 753B                    	jnz	short GET ; 08/09/2018
 10127                                  ;*************************************************************************
 10128                                  ;hkn; SS override
 10129 0000137E 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10130 00001384 7505                    	jnz	short no_sys_wait
 10131 00001386 B405                    	mov	ah,5			; get input status with system wait
 10132 00001388 E88F30                  	call	IOFUNC
 10133                                  no_sys_wait:
 10134                                  ;**************************************************************************
 10135 0000138B B484                    	MOV	AH,84h
 10136 0000138D CD2A                    	INT	int_IBM	 ; int 2Ah
 10137                                  
 10138                                  ;;; 7/15/86  update the date in the idle loop
 10139                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10140                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10141                                  
 10142                                  ;hkn; SS override
 10143 0000138F 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10144 00001395 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10145                                  
 10146 00001397 50                      	PUSH	AX
 10147 00001398 53                      	PUSH	BX			; following is tricky,
 10148 00001399 51                      	PUSH	CX			; it may be called by critical handler
 10149 0000139A 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10150                                  					; other's READ or WRITE
 10151 0000139B 1E                      	PUSH	DS			; save DS = SFT's segment
 10152                                  
 10153                                  ;hkn; READTIME must use ds = DOSDATA
 10154                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10155                                  
 10156 0000139C 16                      	PUSH	SS ; 04/05/2019
 10157 0000139D 1F                      	POP	DS
 10158                                  
 10159 0000139E B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10160 000013A1 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10161                                  	;invoke	READTIME		; readtime
 10162 000013A4 E873F7                  	call	READTIME
 10163 000013A7 B80100                  	MOV	AX,1
 10164 000013AA E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10165                                  
 10166                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10167                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10168                                  ;	push	bx
 10169                                  ;	mov	bx,DATE_FLAG
 10170                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10171                                  ;	cmp	word [cs:bx],5872h
 10172                                  ;	jz	short FETCHI_TAG_chk_ok
 10173                                  ;	call	DOSINIT
 10174                                  ;FETCHI_TAG_chk_ok:
 10175                                  ;	pop	bx
 10176                                  
 10177 000013AD 1F                      	POP	DS			; restore DS
 10178 000013AE 5A                      	POP	DX
 10179 000013AF 59                      	POP	CX
 10180 000013B0 5B                      	POP	BX
 10181 000013B1 58                      	POP	AX
 10182                                  NoUpdate:
 10183                                  
 10184                                  ;hkn; SS override
 10185 000013B2 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10186                                  
 10187                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10188 000013B7 EBC0                    	JMP	short INTEST
 10189                                  GET:
 10190 000013B9 30E4                    	XOR	AH,AH
 10191 000013BB E85C30                  	call	IOFUNC
 10192 000013BE 5E                      	POP	SI
 10193 000013BF 1F                      	POP	DS
 10194                                  ;;; 7/15/86
 10195                                  
 10196                                  ;hkn; SS override
 10197                                  	; MSDOS 6.0
 10198 000013C0 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10199                                  	;
 10200 000013C6 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10201 000013C8 7505                    	JNZ	short noscan
 10202                                  
 10203                                  ;hkn; SS override
 10204                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10205                                  	; 20/06/2023
 10206 000013CA 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10207                                  noscan:
 10208 000013CF C3                      	retn
 10209                                  ;
 10210                                  ;----------------------------------------------------------------------------
 10211                                  ;
 10212                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10213                                  ;
 10214                                  ;
 10215                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10216                                  ;	EXIT	none
 10217                                  ;	USES	ALL
 10218                                  ;
 10219                                  ;----------------------------------------------------------------------------
 10220                                  ;
 10221                                  
 10222                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10223                                  
 10224 000013D0 89D6                    	mov	si,dx
 10225                                  STRING_OUT1:	
 10226 000013D2 AC                      	lodsb
 10227 000013D3 3C24                    	cmp	al,'$'
 10228 000013D5 74F8                    	je	short noscan
 10229                                  NEXT_STR1:
 10230 000013D7 E88702                  	call	OUTT
 10231 000013DA EBF6                    	jmp	short STRING_OUT1
 10232                                  
 10233                                  ;----------------------------------------------------------------------------
 10234                                  ;
 10235                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10236                                  ;
 10237                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10238                                  ;
 10239                                  ;	ENTRY	(ds:dx) = input buffer
 10240                                  ;	EXIT	none
 10241                                  ;	USES	ALL
 10242                                  ;
 10243                                  ;----------------------------------------------------------------------------
 10244                                  
 10245                                  	; 15/01/2024
 10246                                  
 10247                                  _$STD_CON_STRING_INPUT:		;System call 10
 10248                                  
 10249                                  	; 15/01/2024
 10250                                  	;mov	ax,ss
 10251                                  	;mov	es,ax
 10252 000013DC 16                      	push	ss
 10253 000013DD 07                      	pop	es
 10254                                  
 10255 000013DE 89D6                    	mov	si,dx
 10256 000013E0 30ED                    	xor	ch,ch
 10257 000013E2 AD                      	lodsw
 10258                                  
 10259                                  ;	(AL) = the buffer length
 10260                                  ;	(AH) = the template length
 10261                                  
 10262 000013E3 08C0                            or	al,al
 10263 000013E5 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10264 000013E7 88E3                    	mov	bl,ah		;Init template counter
 10265 000013E9 88EF                            mov	bh,ch		;Init template counter
 10266                                  
 10267                                  ;	(BL) = the number of bytes in the template
 10268                                  
 10269 000013EB 38D8                            cmp	al,bl
 10270 000013ED 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10271 000013EF 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10272 000013F2 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10273                                  
 10274                                  ; The number of chars in the template is >= the number of chars in buffer or
 10275                                  ; there is no CR at the end of the template. This is an inconsistant state
 10276                                  ; of affairs. Pretend that the template was empty:
 10277                                  ;
 10278                                  
 10279                                  NOEDIT:	
 10280 000013F4 88EB                    	mov	bl,ch		;Reset buffer
 10281                                  EDITON: 
 10282 000013F6 88C2                    	mov	dl,al
 10283 000013F8 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10284                                  
 10285                                  ;	Top level. We begin to read a line in.
 10286                                  
 10287                                  NEWLIN: 
 10288 000013F9 36A0[F901]              	mov	al,[SS:CARPOS]
 10289 000013FD 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10290                                  
 10291 00001401 56                      	push	si
 10292 00001402 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10293 00001405 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10294 0000140A 88EF                    	mov	bh,ch		;No chars from template yet
 10295 0000140C 88EE                    	mov	dh,ch		;No chars to new line yet
 10296 0000140E E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10297 00001411 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10298 00001413 7503                    	jnz	short GOTCH
 10299                                  
 10300                                  ;	This is the main loop of reading in a character and processing it.
 10301                                  ;
 10302                                  ;	(BH) = the index of the next byte in the template
 10303                                  ;	(BL) = the length of the template
 10304                                  ;	(DH) = the number of bytes in the buffer
 10305                                  ;	(DL) = the length of the buffer
 10306                                  
 10307                                  GETCH:
 10308 00001415 E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10309                                  GOTCH:
 10310                                  ;
 10311                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10312                                  ; input queue.
 10313                                  ;
 10314 00001418 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10315 0000141A 74F9                    	jz	short GETCH
 10316                                  
 10317                                  ;	If the leading char is the function-key lead byte
 10318                                  
 10319                                  	;cmp	al,[SS:ESCCHAR]
 10320                                  
 10321                                  	; 04/05/2019 - Retro DOS v4.0
 10322                                  
 10323                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10324                                  
 10325 0000141C 2E3A06[1A0A]            	CMP	AL,[cs:ESCCHAR]
 10326 00001421 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10327                                  
 10328                                  ;	Rubout and ^H are both destructive backspaces.
 10329                                  
 10330 00001423 3C7F                            cmp	al,c_DEL ; 7FH
 10331                                          ;jz	short BACKSPJ
 10332                                          ; 15/01/2024
 10333 00001425 7466                    	je	short BACKSP
 10334 00001427 3C08                    	cmp	al,c_BS  ; 8
 10335                                          ;jz	short BACKSPJ
 10336                                          ; 15/01/2024
 10337 00001429 7462                    	je	short BACKSP
 10338                                  
 10339                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10340                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10341                                  	;	   	after CMP and a CMP again!
 10342                                  	;		
 10343                                  	;		-It would be better if they use a 'JMP short' to 
 10344                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10345                                  	;		between them. Then, they would be able use a patch
 10346                                  	;		between 5271h and 5279h when if it will be required.
 10347                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10348                                  	;	
 10349                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10350                                  
 10351                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10352                                  	;
 10353                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10354                                  
 10355                                  ;DOSCODE:526D	cmp     al, 8
 10356                                  ;DOSCODE:526F	jz      short BACKSPJ
 10357                                  ;DOSCODE:5271	cmp     al, 17h
 10358                                  ;DOSCODE:5273	nop
 10359                                  ;DOSCODE:5274	nop
 10360                                  ;DOSCODE:5275	cmp     al, 15h
 10361                                  ;DOSCODE:5277	nop
 10362                                  ;DOSCODE:5278	nop
 10363                                  ;DOSCODE:5279	cmp     al, 0Dh
 10364                                  ;DOSCODE:527B	jz      short ENDLIN
 10365                                  ;DOSCODE:527D	cmp     al, 0Ah
 10366                                  ;DOSCODE:527F	jz      short PHYCRLF
 10367                                  	
 10368                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10369                                  	; DOSCODE:525Dh
 10370                                  
 10371                                  ; 16/12/2022
 10372                                  %if 0
 10373                                  	; MSDOS 6.0
 10374                                  ;	^W deletes backward once and then backs up until a letter is before the
 10375                                  ;	cursor
 10376                                  
 10377                                  	CMP     AL,"W"-"@" ; 17h
 10378                                  
 10379                                  ;	The removal of the comment characters before the jump statement will
 10380                                  ;	cause ^W to backup a word.
 10381                                  
 10382                                  ;***	JZ	short WordDel
 10383                                  	NOP
 10384                                  	NOP
 10385                                  
 10386                                  	CMP     AL,"U"-"@" ; 15h
 10387                                  
 10388                                  ;	The removal of the comment characters before the jump statement will
 10389                                  ;	cause ^U to clear a line.
 10390                                  
 10391                                  ;***	JZ	short LineDel
 10392                                  	NOP
 10393                                  	NOP
 10394                                  
 10395                                  %endif
 10396                                  
 10397                                  ;	CR terminates the line.
 10398                                  
 10399 0000142B 3C0D                            cmp	al,c_CR ; 0Dh
 10400 0000142D 7430                            jz	short ENDLIN
 10401                                  
 10402                                  ;	LF goes to a new line and keeps on reading.
 10403                                  
 10404 0000142F 3C0A                            cmp	al,c_LF ; 0Ah
 10405 00001431 7442                    	jz	short PHYCRLF
 10406                                  
 10407                                  ;	^X (or ESC) deletes the line and starts over
 10408                                  
 10409                                  	; MSDOS 3.3
 10410                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10411                                  	;jz	short KILNEW
 10412                                  
 10413                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10414                                  
 10415                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10416                                  
 10417 00001433 2E3A06[190A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10418 00001438 7440                    	jz	short KILNEW
 10419                                  	
 10420                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10421                                  	;jz	short KILNEW
 10422                                  
 10423                                  ; Otherwise, we save the input character.
 10424                                  
 10425                                  SAVCH:	
 10426 0000143A 38D6                    	cmp	dh,dl
 10427 0000143C 7317                    	jnb	short BUFFUL		; buffer is full.
 10428 0000143E AA                              stosb
 10429 0000143F FEC6                    	inc	dh                      ; increment count in buffer.
 10430 00001441 E8B102                  	call	BUFOUT			; Print control chars nicely
 10431                                  
 10432 00001444 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10433 0000144A 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10434 0000144C 38DF                            cmp	bh,bl
 10435 0000144E 73C5                            jnb	short GETCH		; no more characters in template
 10436 00001450 46                              inc	si                      ; Skip to next char in template
 10437 00001451 FEC7                            inc	bh                      ; remember position in template
 10438 00001453 EBC0                            jmp	short GETCH
 10439                                  
 10440                                  	; 15/01/2024
 10441                                  ;BACKSPJ: 
 10442                                  	;jmp	short BACKSP
 10443                                  
 10444                                  BUFFUL: 
 10445 00001455 B007                    	mov	al, 7			; Bell to signal full buffer
 10446 00001457 E80702                  	call	OUTT
 10447 0000145A EBB9                    	jmp	short GETCH
 10448                                  
 10449                                  ESCAPE: 
 10450                                  	;transfer OEMFunctionKey
 10451 0000145C E9E6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10452                                  
 10453                                  ENDLIN:
 10454 0000145F AA                              stosb				; Put the CR in the buffer
 10455 00001460 E8FE01                  	call	OUTT                    ; Echo it
 10456 00001463 5F                              pop	di                      ; Get start of user buffer
 10457 00001464 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10458 00001467 FEC6                            inc	dh			; DH is length including CR
 10459                                  
 10460                                  COPYNEW:
 10461                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10462                                  	;mov	bp, es
 10463                                  	;mov	bx, ds
 10464                                  	;mov	es, bx
 10465                                  	;mov	ds, bp
 10466                                  	;mov	si, INBUF
 10467                                  	;mov	cl, dh
 10468                                  	;rep	movsb
 10469                                  	;retn
 10470                                  
 10471                                  	; CPMIO.ASM (MSDOS 6.0)
 10472                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10473                                  	;SAVE	<DS,ES>
 10474 00001469 1E                      	PUSH	DS
 10475 0000146A 06                      	PUSH	ES
 10476                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10477 0000146B 1F                      	POP	DS
 10478 0000146C 07                      	POP	ES
 10479                                  
 10480                                  ;;hkn; INBUF is in DOSDATA
 10481 0000146D BE[FB01]                        MOV     SI,INBUF
 10482 00001470 88F1                            MOV     CL,DH                   ; set up count
 10483 00001472 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10484                                  OLDBAK_RETN:
 10485 00001474 C3                              RETN
 10486                                  
 10487                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10488                                  
 10489                                  PHYCRLF:
 10490 00001475 E81B01                  	CALL	CRLF
 10491 00001478 EB9B                            JMP	short GETCH
 10492                                  
 10493                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10494                                  
 10495                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10496                                  
 10497                                  	; Note: Following routines were not used in IBMDOS.COM
 10498                                  	;	-CRTL+W, CRTL+U is not activated-
 10499                                  	;	but they were in the kernel code!?)
 10500                                  
 10501                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10502                                  	; DOSCODE:52B6h
 10503                                  
 10504                                  ;;;;;;;;
 10505                                  
 10506                                  ; 16/12/2022
 10507                                  %if 0
 10508                                  ;
 10509                                  ; Delete the previous line
 10510                                  ;
 10511                                  LineDel:
 10512                                  	OR      DH,DH
 10513                                  	JZ	short GETCH	 ; 06/12/2022
 10514                                  	Call    BackSpace
 10515                                  	JMP	short LineDel
 10516                                  
 10517                                  %endif
 10518                                  
 10519                                  ;
 10520                                  ; delete the previous word.
 10521                                  ;
 10522                                  WordDel:
 10523                                  WordLoop:
 10524                                  ;	Call    BackSpace               ; backspace the one spot
 10525                                  ;	OR      DH,DH
 10526                                  ;	JZ	short GetChj
 10527                                  ;	MOV     AL,[ES:DI-1]
 10528                                  ;	cmp     al,'0'
 10529                                  ;	jb	short GetChj
 10530                                  ;	cmp     al,'9'
 10531                                  ;	jbe	short WordLoop
 10532                                  ;	OR      AL,20h
 10533                                  ;	CMP     AL,'a'
 10534                                  ;	JB	short GetChj
 10535                                  ;	CMP     AL,'z'
 10536                                  ;	JBE	short WordLoop
 10537                                  ;GetChj: 
 10538                                  ;	JMP	GETCH
 10539                                  
 10540                                  ; 16/12/2022
 10541                                  %if 0
 10542                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10543                                  	; (Worddel is not called or jumped from anywhere!)
 10544                                  WordDel:
 10545                                  WordLoop:
 10546                                  	Call    BackSpace               ; backspace the one spot
 10547                                  	OR      DH,DH
 10548                                  	JZ	short GetChj
 10549                                  	MOV     AL,[ES:DI-1]
 10550                                  	cmp     al,'0'
 10551                                  	jb	short GetChj
 10552                                  	cmp     al,'9'
 10553                                  	jbe	short WordLoop
 10554                                  	OR      AL,20h
 10555                                  	CMP     AL,'a'
 10556                                  	JB	short GetChj
 10557                                  	CMP     AL,'z'
 10558                                  	JBE	short WordLoop
 10559                                  GetChj: 
 10560                                  	JMP	GETCH
 10561                                  
 10562                                  %endif
 10563                                  
 10564                                  ;;;;;;;;
 10565                                  
 10566                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10567                                  
 10568                                  ; The user wants to throw away what he's typed in and wants to start over.
 10569                                  ; We print the backslash and then go to the next line and tab to the correct
 10570                                  ; spot to begin the buffered input.
 10571                                  
 10572                                  KILNEW:
 10573 0000147A B05C                            mov	al,'\'
 10574 0000147C E8E201                          call	OUTT            ;Print the CANCEL indicator
 10575 0000147F 5E                              pop	si		;Remember start of edit buffer
 10576                                  PUTNEW:
 10577 00001480 E81001                  	call	CRLF            ;Go to next line on screen
 10578 00001483 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10579 00001487 E84B02                  	call	TAB             ;Tab over
 10580 0000148A E96CFF                          JMP     NEWLIN		;Start over again
 10581                                  
 10582                                  ;	Destructively back up one character position
 10583                                  
 10584                                  BACKSP:
 10585                                  	; 09/09/2018
 10586 0000148D E80800                  	Call    BackSpace
 10587 00001490 EB83                    	JMP     short GETCH	; 15/01/2024
 10588                                  
 10589                                  	; 15/01/2024
 10590                                  ;User really wants an ESC character in his line
 10591                                  TWOESC:	
 10592 00001492 2EA0[1A0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10593 00001496 EBA2                    	jmp	short SAVCH
 10594                                  
 10595                                  BackSpace:
 10596 00001498 08F6                    	or	dh,dh
 10597 0000149A 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10598 0000149C E85800                  	call	BACKUP          ;Do the backup
 10599 0000149F 268A05                  	mov	al,[es:di]	;Get the deleted char
 10600 000014A2 3C20                            cmp	al,20h	; ' '
 10601 000014A4 730F                    	jnb	short OLDBAK	;Was a normal char
 10602 000014A6 3C09                            cmp	al,c_HT ; 9
 10603 000014A8 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10604                                  ;; 9/27/86 fix for ctrl-U backspace
 10605 000014AA 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10606 000014AC 7407                    	JZ	short OLDBAK
 10607 000014AE 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10608 000014B0 7403                    	JZ	short OLDBAK
 10609                                  ;; 9/27/86 fix for ctrl-U backspace
 10610 000014B2 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10611                                  OLDBAK:
 10612 000014B5 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10613 000014BB 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10614 000014BD 08FF                    	or	bh,bh
 10615 000014BF 74B3                            jz	short OLDBAK_RETN 
 10616                                  				;Not advanced in template, stay where we are
 10617 000014C1 FECF                    	dec	bh		;Go back in template
 10618 000014C3 4E                              dec	si
 10619 000014C4 C3                      	retn
 10620                                  BAKTAB:
 10621 000014C5 57                              push	di
 10622 000014C6 4F                              dec	di		;Back up one char
 10623 000014C7 FD                              std			;Go backward
 10624 000014C8 88F1                            mov	cl,dh		;Number of chars currently in line
 10625 000014CA B020                            mov	al,20h	; ' '
 10626 000014CC 53                              push	bx
 10627 000014CD B307                            mov	bl,7		;Max
 10628 000014CF E30E                            jcxz	FIGTAB		;At start, do nothing
 10629                                  FNDPOS:
 10630 000014D1 AE                              scasb			;Look back
 10631 000014D2 7609                    	jbe	short CHKCNT
 10632 000014D4 26807D0109              	cmp	byte [es:di+1],9
 10633 000014D9 7409                    	jz	short HAVTAB	;Found a tab
 10634 000014DB FECB                    	dec	bl		;Back one char if non tab control char
 10635                                  CHKCNT:
 10636 000014DD E2F2                            loop	FNDPOS
 10637                                  FIGTAB:		
 10638 000014DF 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10639                                  HAVTAB:
 10640 000014E4 28F3                    	sub	bl,dh
 10641 000014E6 00D9                    	add	cl,bl
 10642 000014E8 80E107                  	and	cl,7		;CX has correct number to erase
 10643 000014EB FC                      	cld			;Back to normal
 10644 000014EC 5B                      	pop	bx
 10645 000014ED 5F                      	pop	di
 10646 000014EE 74C5                    	jz	short OLDBAK	;Nothing to erase
 10647                                  TABBAK:
 10648 000014F0 E80700                  	call	BACKMES
 10649 000014F3 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10650 000014F5 EBBE                    	jmp	short OLDBAK
 10651                                  
 10652                                  BACKUP:
 10653 000014F7 FECE                            dec	dh		;Back up in line
 10654 000014F9 4F                              dec	di
 10655                                  BACKMES:
 10656 000014FA B008                            mov	al,c_BS ; 8	;Backspace
 10657 000014FC E86201                          call	OUTT
 10658 000014FF B020                            mov	al,20h ; ' '	;Erase
 10659 00001501 E85D01                          call	OUTT
 10660 00001504 B008                            mov	al,c_BS ; 8	;Backspace
 10661 00001506 E95801                  	jmp	OUTT		;Done
 10662                                  
 10663                                  	; 15/01/2024
 10664                                  ;User really wants an ESC character in his line
 10665                                  ;TWOESC:	
 10666                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10667                                  ;	jmp	SAVCH
 10668                                  
 10669                                  ;Copy the rest of the template
 10670                                  COPYLIN:
 10671 00001509 88D9                            mov	cl,bl		;Total size of template
 10672 0000150B 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10673 0000150D EB07                            jmp	short COPYEACH
 10674                                  
 10675                                  COPYSTR:
 10676 0000150F E83200                  	call	FINDOLD         ;Find the char
 10677 00001512 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10678                                  
 10679                                  ;Copy one char from template to line
 10680                                  COPYONE:
 10681 00001514 B101                            mov	cl,1
 10682                                  ;Copy CX chars from template to line
 10683                                  COPYEACH:
 10684 00001516 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10685 0000151C 38D6                    	cmp	dh,dl
 10686 0000151E 740F                            jz	short GETCH2		;At end of line, can't do anything
 10687 00001520 38DF                            cmp	bh,bl
 10688 00001522 740B                            jz	short GETCH2		;At end of template, can't do anything
 10689 00001524 AC                              lodsb
 10690 00001525 AA                              stosb
 10691 00001526 E8CC01                  	call	BUFOUT
 10692 00001529 FEC7                            inc	bh			;Ahead in template
 10693 0000152B FEC6                            inc	dh			;Ahead in line
 10694 0000152D E2E7                            loop	COPYEACH
 10695                                  GETCH2:
 10696 0000152F E9E3FE                          jmp	GETCH
 10697                                  
 10698                                  ;Skip one char in template
 10699                                  SKIPONE:
 10700 00001532 38DF                    	cmp	bh,bl
 10701 00001534 74F9                    	jz	short GETCH2		;At end of template
 10702 00001536 FEC7                    	inc	bh			;Ahead in template
 10703 00001538 46                      	inc	si
 10704                                          ;jmp	GETCH
 10705                                  	; 15/01/2024
 10706 00001539 EBF4                    	jmp	short GETCH2
 10707                                  
 10708                                  SKIPSTR:
 10709 0000153B E80600                  	call	FINDOLD                 ;Find out how far to go
 10710 0000153E 01CE                            add	si,cx			;Go there
 10711 00001540 00CF                            add	bh,cl
 10712                                          ;jmp	GETCH
 10713                                  	; 15/01/2024
 10714 00001542 EBEB                    	jmp	short GETCH2
 10715                                  
 10716                                  ;Get the next user char, and look ahead in template for a match
 10717                                  ;CX indicates how many chars to skip to get there on output
 10718                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10719                                  ;       address is popped off and a jump to GETCH is taken.
 10720                                  ;       Make sure nothing extra on stack when this routine
 10721                                  ;       is called!!! (no PUSHes before calling it).
 10722                                  
 10723                                  FINDOLD:
 10724 00001544 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10725                                  
 10726                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10727                                  
 10728                                  	;CMP	AL,[SS:ESCCHAR]	
 10729                                  	;JNZ	SHORT FINDSETUP
 10730                                  
 10731                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10732                                  
 10733                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10734                                  
 10735 00001547 2E3A06[1A0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10736 0000154C 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10737                                  
 10738 0000154E E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10739 00001551 EB1D                            JMP	SHORT NOTFND		; go try again
 10740                                  FINDSETUP:
 10741 00001553 88D9                    	mov	cl,bl
 10742 00001555 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10743 00001557 7417                    	jz	short NOTFND	;At end of template
 10744 00001559 49                              dec	cx		;Cannot point past end, limit search
 10745 0000155A 7414                            jz	short NOTFND	;If only one char in template, forget it
 10746 0000155C 06                      	push	es
 10747 0000155D 1E                      	push	ds
 10748 0000155E 07                      	pop	es
 10749 0000155F 57                      	push	di
 10750 00001560 89F7                    	mov	di,si		;Template to ES:DI
 10751 00001562 47                      	inc	di
 10752 00001563 F2AE                    	repne	scasb		;Look
 10753 00001565 5F                      	pop	di
 10754 00001566 07                      	pop	es
 10755 00001567 7507                    	jnz	short NOTFND	;Didn't find the char
 10756 00001569 F6D1                            not	cl		;Turn how far to go into how far we went
 10757 0000156B 00D9                            add	cl,bl		;Add size of template
 10758 0000156D 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10759                                  FINDOLD_RETN:
 10760 0000156F C3                      	retn
 10761                                  
 10762                                  NOTFND:
 10763 00001570 5D                      	pop	bp              ;Chuck return address
 10764                                  	;jmp	GETCH
 10765                                  	; 15/01/2024
 10766                                  GETCH2_j:
 10767 00001571 EBBC                    	jmp	short GETCH2
 10768                                  
 10769                                  REEDIT:
 10770 00001573 B040                    	mov	al,'@'		;Output re-edit character
 10771 00001575 E8E900                  	call	OUTT
 10772 00001578 5F                      	pop	di
 10773 00001579 57                      	push	di
 10774 0000157A 06                      	push	es
 10775 0000157B 1E                      	push	ds
 10776 0000157C E8EAFE                  	call	COPYNEW		;Copy current line into template
 10777 0000157F 1F                      	pop	ds
 10778 00001580 07                      	pop	es
 10779 00001581 5E                      	pop	si
 10780 00001582 88F3                    	mov	bl,dh		;Size of line is new size template
 10781 00001584 E9F9FE                  	jmp	PUTNEW		;Start over again
 10782                                  
 10783                                  EXITINS:
 10784                                  ENTERINS:
 10785 00001587 36F616[7905]            	not	byte [SS:INSMODE]
 10786                                  	;jmp	GETCH
 10787                                  	; 15/01/2024
 10788 0000158C EBE3                    	jmp	short GETCH2_j
 10789                                  
 10790                                  ;Put a real live ^Z in the buffer (embedded)
 10791                                  CTRLZ:
 10792 0000158E B01A                    	mov	al,"Z"-"@" ; 1Ah
 10793 00001590 E9A7FE                          jmp	SAVCH
 10794                                  
 10795                                  ;Output a CRLF
 10796                                  CRLF:
 10797 00001593 B00D                    	mov	al,c_CR ; 0Dh 
 10798 00001595 E8C900                  	call	OUTT
 10799 00001598 B00A                    	mov	al,c_LF ; 0Ah
 10800 0000159A E9C400                  	jmp	OUTT
 10801                                  
 10802                                  ;
 10803                                  ;----------------------------------------------------------------------------
 10804                                  ;
 10805                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10806                                  ;
 10807                                  ;	Input or output raw character from console, no echo
 10808                                  ;
 10809                                  ;	ENTRY	DL = -1 if input
 10810                                  ;		   =  output character if output
 10811                                  ;	EXIT	(AL) = input character if input
 10812                                  ;	USES	all
 10813                                  ;
 10814                                  ;----------------------------------------------------------------------------
 10815                                  ; 20/07/2018 - Retro DOS v3.0
 10816                                  
 10817                                  ; 04/05/2019 - Retro DOS v4.0
 10818                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10819                                  
 10820                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10821                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10822                                  
 10823                                  _$RAW_CON_IO:			; System call 6
 10824 0000159D 88D0                    	MOV	AL,DL
 10825 0000159F 3CFF                    	CMP	AL,-1
 10826 000015A1 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10827                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10828                                  	;jz	short rci1
 10829                                  	;jmp	short RAWOUT
 10830                                  	; 16/12/202
 10831                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10832                                  	;nop
 10833                                  rci1:
 10834                                  			; Get pointer to register save area
 10835 000015A3 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10836 000015A8 31DB                    	XOR	BX,BX
 10837                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10838 000015AA E82B20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10839                                          ;JC	SHORT RET17
 10840 000015AD 72C0                            jc	short FINDOLD_RETN
 10841 000015AF B401                    	MOV	AH,1
 10842 000015B1 E8662E                  	CALL	IOFUNC
 10843 000015B4 750B                    	JNZ	SHORT RESFLG
 10844 000015B6 E8FC3A                  	CALL	SPOOLINT
 10845                                  	;OR	BYTE [ES:DI+16H],40H
 10846 000015B9 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10847 000015BE 30C0                    	XOR	AL,AL
 10848                                  RET17:
 10849 000015C0 C3                      	RETN
 10850                                  
 10851                                  RESFLG:
 10852                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10853 000015C1 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10854                                  				; Reset user's zero flag
 10855                                  ;RILP:
 10856                                  rci0:
 10857 000015C6 E8EC3A                  	CALL	SPOOLINT
 10858                                  ;
 10859                                  ;----------------------------------------------------------------------------
 10860                                  ;
 10861                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10862                                  ;
 10863                                  ;	Input raw character from console, no echo
 10864                                  ;
 10865                                  ;	ENTRY	none
 10866                                  ;	EXIT	(al) = character
 10867                                  ;	USES	all
 10868                                  ;
 10869                                  ;----------------------------------------------------------------------------
 10870                                  ;
 10871                                  
 10872                                  ;rci0:	invoke	SPOOLINT
 10873                                  
 10874                                  	;entry	$RAW_CON_INPUT
 10875                                  
 10876                                  	; 04/05/2019 - Retro DOS v4.0
 10877                                  
 10878                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10879                                  
 10880                                  _$RAW_CON_INPUT:		; System call 7
 10881 000015C9 53                      	push	bx
 10882 000015CA 31DB                    	XOR	BX,BX
 10883                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10884 000015CC E80920                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10885 000015CF 5B                      	pop	bx
 10886 000015D0 72EE                    	JC	SHORT RET17
 10887 000015D2 B401                    	MOV	AH,1
 10888 000015D4 E8432E                  	CALL	IOFUNC
 10889                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10890                                  	;XOR	AH,AH
 10891                                          ;CALL	IOFUNC
 10892                                          ;RETN
 10893 000015D7 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10894 000015D9 B484                    	MOV	AH,84h
 10895 000015DB CD2A                    	INT	int_IBM  ; int 2Ah
 10896 000015DD EBE7                    	JMP	short rci0
 10897                                  rci5:	
 10898 000015DF 30E4                    	XOR	AH,AH
 10899                                  	;CALL	IOFUNC
 10900                                  	;RETN
 10901                                  	; 18/12/2022
 10902 000015E1 E9362E                  	jmp	IOFUNC
 10903                                  
 10904                                  ;       Output the character in AL to stdout
 10905                                  ;
 10906                                  	;entry	RAWOUT
 10907                                  RAWOUT:
 10908 000015E4 53                      	PUSH    BX
 10909 000015E5 BB0100                  	MOV     BX,1
 10910                                  
 10911                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10912 000015E8 E8ED1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10913 000015EB 721B                    	JC	SHORT RAWRET1
 10914                                  
 10915                                  	;
 10916                                  	; MSDOS 2.11
 10917                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10918                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10919                                          ;PUSH	DS
 10920                                          ;PUSH	SI
 10921                                          ;LDS	SI,[SI+19H]		; output to special?
 10922                                  	;TEST	BYTE [SI+4],ISSPEC
 10923                                  	;POP	SI
 10924                                  	;
 10925                                          
 10926                                  	; MSDOS 3.3 & MSDOS 6.0
 10927                                  	;mov	bx,[si+5]
 10928 000015ED 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10929                                   ;
 10930                                   ; If we are a network handle OR if we are not a local device then go do the
 10931                                   ; output the hard way.
 10932                                   ;	
 10933                                  	;and	bx,8080h
 10934 000015F0 81E38080                	AND	BX,sf_isnet+devid_device
 10935                                  	;cmp	bx,80h
 10936 000015F4 81FB8000                	CMP	BX,devid_device
 10937 000015F8 7510                    	jnz     short RAWNORM
 10938 000015FA 1E                      	push    ds
 10939                                  	;lds	bx,[si+7]
 10940 000015FB C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10941                                  	;test	byte [bx+4],10h
 10942 000015FE F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10943                                  	;
 10944                                  
 10945 00001602 1F                      	POP	DS
 10946 00001603 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10947                                  
 10948 00001605 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10949                                  
 10950                                  	;JMP	SHORT RAWRET
 10951                                  ;RAWNORM:
 10952                                  ;	CALL    RAWOUT3
 10953                                  RAWRET: 
 10954 00001607 F8                      	CLC
 10955                                  RAWRET1:
 10956 00001608 5B                      	POP     BX
 10957                                  RAWRET2:
 10958 00001609 C3                      	RETN
 10959                                  RAWNORM:
 10960 0000160A E80700                  	CALL    RAWOUT3
 10961 0000160D EBF8                    	jmp	short RAWRET
 10962                                  
 10963                                  ;	Output the character in AL to handle in BX
 10964                                  ;
 10965                                  ;	entry	RAWOUT2
 10966                                  
 10967                                  RAWOUT2:
 10968                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10969                                  	;JC	SHORT RET18
 10970 0000160F E8C61F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10971 00001612 72F5                    	JC	SHORT RAWRET2
 10972                                  RAWOUT3:
 10973 00001614 50                      	PUSH	AX
 10974 00001615 EB0C                    	JMP	SHORT RAWOSTRT
 10975                                  ROLP:
 10976 00001617 E89B3A                  	CALL	SPOOLINT
 10977                                  
 10978                                  	; 01/05/2019 - Retro DOS v4.0
 10979                                  
 10980                                  	; MSDOS 6.0
 10981                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10982                                  	; 17/12/2022
 10983 0000161A 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10984                                  	;or	word [ss:DOS34_FLAG],200h
 10985                                  				;AN002; set control break
 10986                                  	;invoke DSKSTATCHK
 10987 00001620 E80F3A                  	call	DSKSTATCHK	;AN002; check control break
 10988                                  RAWOSTRT:
 10989 00001623 B403                    	MOV	AH,3
 10990 00001625 E8F22D                  	CALL	IOFUNC
 10991 00001628 74ED                    	JZ	SHORT ROLP
 10992                                  
 10993                                  	; MSDOS 6.0
 10994                                  ;SR;
 10995                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10996                                  ;the user failed. We do not send a char if this happens. We however return
 10997                                  ;to the caller with carry clear because this DOS call does not return any
 10998                                  ;status. 
 10999                                  ;
 11000 0000162A 40                      	inc	ax		;fail on I24 if ax = -1
 11001 0000162B 58                      	POP	AX
 11002 0000162C 7405                    	jz	short nosend	;yes, do not send char
 11003 0000162E B402                    	MOV	AH,2
 11004 00001630 E8E72D                  	call	IOFUNC
 11005                                  nosend:
 11006 00001633 F8                      	CLC			; Clear carry indicating successful
 11007 00001634 C3                      	retn
 11008                                  
 11009                                  	; MSDOS 3.3 & MSDOS 2.11
 11010                                  	;POP	AX
 11011                                  	;MOV	AH,2
 11012                                          ;CALL	IOFUNC
 11013                                  	;CLC			; Clear carry indicating successful
 11014                                  ;RET18:    
 11015                                  	;RETN
 11016                                  
 11017                                  ;;10/08/2018
 11018                                  ; 20/07/2018 - Retro DOS v3.0
 11019                                  ; ---------------------------------------------------------------------------
 11020                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11021                                  ; ---------------------------------------------------------------------------
 11022                                  
 11023                                  ; This routine is called at DOS init
 11024                                  
 11025                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11026                                  ;;OUTMES:
 11027                                  ;;	;LODS	CS:BYTE PTR [SI]
 11028                                  ;;	CS	LODSB
 11029                                  ;;	CMP     AL,"$" ; 24h
 11030                                  ;;	JZ	SHORT RET18
 11031                                  ;;	CALL	OUTT
 11032                                  ;;	JMP     SHORT OUTMES
 11033                                  
 11034                                  ; ---------------------------------------------------------------------------
 11035                                  
 11036                                  ; 20/07/2018 - Retro DOS v3.0
 11037                                  
 11038                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11039                                  
 11040                                  ;
 11041                                  ;----------------------------------------------------------------------------
 11042                                  ;
 11043                                  ; Inputs:
 11044                                  ;	AX=0 save the DEVCALL request packet
 11045                                  ;	  =1 restore the DEVCALL request packet
 11046                                  ; Function:
 11047                                  ;	save or restore the DEVCALL packet
 11048                                  ; Returns:
 11049                                  ;	none
 11050                                  ;
 11051                                  ;----------------------------------------------------------------------------
 11052                                  ;
 11053                                  
 11054                                  ; 04/05/2019 - Retro DOS v4.0
 11055                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11056                                  
 11057                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11058                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11059                                  
 11060                                  ; 12/05/2019
 11061                                  
 11062                                  	; 15/01/2024
 11063                                  
 11064                                  Save_Restore_Packet:
 11065 00001635 1E                      	PUSH	DS
 11066 00001636 06                      	PUSH	ES
 11067 00001637 56                      	PUSH	SI
 11068 00001638 57                      	PUSH	DI
 11069                                  
 11070                                  	; 16/12/2022
 11071                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11072                                  	; 09/09/2018
 11073 00001639 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11074 0000163C BE[5A03]                	mov	si,DEVCALL
 11075 0000163F BE[5A03]                	mov	si,DEVCALL
 11076                                  	;
 11077                                  	; 21/09/2023
 11078 00001642 09C0                    	or	ax,ax 
 11079                                  	;CMP	AX,0		; save packet
 11080 00001644 7402                    	JZ	short save_packet ; 16/12/2022
 11081                                  	;je	short set_seg
 11082                                  
 11083                                  	; MSDOS 6.0
 11084                                  restore_packet:
 11085                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11086                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11087                                  	; MSDOS 3.3
 11088                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11089                                  	;mov	di,DEVCALL  ; 09/09/2018
 11090                                  	;
 11091                                  	;JMP	short set_seg
 11092                                  
 11093                                  	; 16/12/2022	
 11094                                  	; 09/09/2018
 11095 00001646 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11096                                  
 11097                                  ; 16/12/2022
 11098                                  %if 0
 11099                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11100                                  	cmp	ax,0		; save packet
 11101                                  	jz	short save_packet
 11102                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11103                                  	mov	di,DEVCALL 
 11104                                  	jmp	short set_seg
 11105                                  
 11106                                  	; MSDOS 6.0
 11107                                  save_packet:
 11108                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11109                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11110                                  	; 09/09/2018
 11111                                  	; MSDOS 3.3
 11112                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11113                                  	;mov	si,DEVCALL ; 09/09/2018
 11114                                  
 11115                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11116                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11117                                  	mov	si,DEVCALL
 11118                                  %endif
 11119                                  
 11120                                  ; 15/01/2024
 11121                                  ; 16/12/2022
 11122                                  save_packet:
 11123                                  ;set_seg:
 11124                                  	; MSDOS 3.3
 11125                                  	;mov	ax,cs
 11126                                  
 11127                                  	; MSDOS 6.0
 11128                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11129                                  	;MOV	DS,AX
 11130                                  	;MOV	ES,AX
 11131                                  	; 15/01/2024
 11132 00001648 16                      	push	ss
 11133 00001649 1F                      	pop	ds
 11134 0000164A 1E                      	push	ds
 11135 0000164B 07                      	pop	es
 11136                                  
 11137 0000164C B90B00                  	MOV	CX,11		; 11 words to move
 11138 0000164F F3A5                    	REP	MOVSW
 11139                                  
 11140 00001651 5F                      	POP	DI
 11141 00001652 5E                      	POP	SI
 11142 00001653 07                      	POP	ES
 11143 00001654 1F                      	POP	DS
 11144 00001655 C3                      	retn
 11145                                  
 11146                                  ;============================================================================
 11147                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11148                                  ;============================================================================
 11149                                  ; 20/07/2018 - Retro DOS v3.0
 11150                                  ; 01/05/2019 - Retro DOS v4.0
 11151                                  
 11152                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11153                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11154                                  ;hkn;	not valid. 
 11155                                  
 11156                                  ;
 11157                                  ;----------------------------------------------------------------------------
 11158                                  ;
 11159                                  ;**	$STD_CON_INPUT - System Call 1
 11160                                  ;
 11161                                  ;	Input character from console, echo
 11162                                  ;
 11163                                  ;	ENTRY	none
 11164                                  ;	EXIT	(al) = character
 11165                                  ;	USES	ALL
 11166                                  ;
 11167                                  ;----------------------------------------------------------------------------
 11168                                  ;
 11169                                  
 11170                                  _$STD_CON_INPUT:	;System call 1
 11171                                  	
 11172 00001656 E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11173 00001659 50                      	PUSH	AX
 11174 0000165A E80400                  	CALL	OUTT
 11175 0000165D 58                      	POP	AX
 11176                                  CON_INPUT_RETN:	
 11177 0000165E C3                      	RETN
 11178                                  
 11179                                  ;
 11180                                  ;----------------------------------------------------------------------------
 11181                                  ;
 11182                                  ;**	$STD_CON_OUTPUT - System Call 2
 11183                                  ;
 11184                                  ;	Output character to console
 11185                                  ;
 11186                                  ;	ENTRY	(dl) = character
 11187                                  ;	EXIT	none
 11188                                  ;	USES	all
 11189                                  ;
 11190                                  ;----------------------------------------------------------------------------
 11191                                  ;
 11192                                  
 11193                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11194                                  
 11195                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11196                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11197                                  
 11198                                  _$STD_CON_OUTPUT:	;System call 2
 11199                                  
 11200 0000165F 88D0                    	MOV	AL,DL
 11201                                  OUTT:
 11202 00001661 3C20                    	CMP	AL,20H ; " "
 11203 00001663 725C                    	JB	SHORT CTRLOUT
 11204 00001665 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11205 00001667 7405                    	JZ	SHORT OUTCH
 11206                                  OUTCHA:	
 11207                                  	;INC	BYTE PTR [CARPOS]
 11208 00001669 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11209                                  OUTCH:
 11210 0000166E 1E                      	PUSH	DS
 11211 0000166F 56                      	PUSH	SI
 11212                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11213                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11214 00001670 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11215                                  	;AND	BYTE [SS:CHARCO],00111111B
 11216                                  	; 01/05/2019 - Retro DOS v4.0
 11217 00001675 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11218 0000167B 7505                    	JNZ	SHORT OUTSKIP
 11219                                  
 11220 0000167D 50                      	PUSH	AX
 11221 0000167E E8623A                  	CALL	STATCHK
 11222 00001681 58                      	POP	AX
 11223                                  OUTSKIP:
 11224 00001682 E85FFF                  	CALL	RAWOUT				;output the character
 11225                                  
 11226 00001685 5E                      	POP	SI
 11227 00001686 1F                      	POP	DS
 11228                                  
 11229                                  	;TEST	BYTE PTR [PFLAG],-1
 11230                                  	;retz
 11231 00001687 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11232 0000168D 74CF                    	JZ	SHORT CON_INPUT_RETN
 11233                                  
 11234 0000168F 53                      	PUSH	BX
 11235 00001690 1E                      	PUSH	DS
 11236 00001691 56                      	PUSH	SI
 11237 00001692 BB0100                  	MOV	BX,1
 11238                                  	; 20/07/2018 - Retro DOS v3.0
 11239                                  	; MSDOS 3.3
 11240                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11241 00001695 E8401F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11242                                  					;hkn; to sft entry
 11243 00001698 7224                    	JC	SHORT TRIPOPJ
 11244                                  
 11245                                  	; 01/05/2019 - Retro DOS v4.0
 11246                                  
 11247                                  	;mov	bx,[si+5]
 11248 0000169A 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11249                                  	;test	bx,8000h
 11250                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11251 0000169D F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11252 000016A0 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11253                                  	;;test	bx,80h
 11254                                  	;TEST	BX,devid_device 		; output to file?
 11255 000016A2 F6C380                  	test	bl,devid_device ; 80h
 11256 000016A5 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11257                                  	; 14/03/2018
 11258                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11259                                  	;jc	short TRIPOPJ
 11260                                  	; MSDOS 2.11
 11261                                  	;test	byte [SI+18H], 80h
 11262                                  	;jz	short TRIPOPJ
 11263 000016A7 BB0400                  	MOV	BX,4
 11264 000016AA E82B1F                  	CALL	GET_IO_SFT
 11265 000016AD 720F                    	JC	SHORT TRIPOPJ
 11266                                  	;;test	word [si+5], 800h
 11267                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11268                                  	;test	byte [si+6],8 ; 08/11/2022
 11269 000016AF F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11270                                  						; StdPrn redirected?
 11271                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11272                                  	;jz	LISSTRT2 ; 10/08/2018 
 11273                                  	; 16/12/2022
 11274 000016B3 7503                    	jnz	short outch1
 11275 000016B5 E98700                  	jmp	LISSTRT2
 11276                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11277                                  	;jz	short LISSTRT2J
 11278                                  outch1:
 11279                                  	;MOV	BYTE [PFLAG],0
 11280 000016B8 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11281                                  	; MSDOS 2.11
 11282                                  	;mov	bx,4
 11283                                  	;jmp	short LISSTRT2
 11284                                  	
 11285                                  TRIPOPJ:
 11286                                  	; 20/07/2018
 11287 000016BE E98100                  	JMP	TRIPOP
 11288                                  
 11289                                  	; 16/12/2022
 11290                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11291                                  ;LISSTRT2J:
 11292                                  ;	JMP	LISSTRT2
 11293                                  
 11294                                  CTRLOUT:
 11295 000016C1 3C0D                    	CMP	AL,c_CR ; 0Dh
 11296 000016C3 7420                    	JZ	SHORT ZERPOS
 11297 000016C5 3C08                    	CMP	AL,c_BS ; 8
 11298 000016C7 7424                    	JZ	SHORT BACKPOS
 11299 000016C9 3C09                    	CMP	AL,c_HT ; 9
 11300 000016CB 75A1                    	JNZ	SHORT OUTCH
 11301                                  	;MOV	AL,[CARPOS]
 11302 000016CD 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11303 000016D1 0CF8                    	OR	AL,0F8H
 11304 000016D3 F6D8                    	NEG	AL
 11305                                  TAB:
 11306 000016D5 51                      	PUSH	CX
 11307 000016D6 88C1                    	MOV	CL,AL
 11308 000016D8 B500                    	MOV	CH,0
 11309 000016DA E307                    	JCXZ	POPTAB
 11310                                  TABLP:
 11311 000016DC B020                    	MOV	AL," "
 11312 000016DE E880FF                  	CALL	OUTT
 11313 000016E1 E2F9                    	LOOP	TABLP
 11314                                  POPTAB:
 11315 000016E3 59                      	POP	CX
 11316                                  
 11317 000016E4 C3                      	RETN
 11318                                  
 11319                                  ZERPOS:
 11320                                  	;MOV	BYTE PTR [CARPOS],0
 11321 000016E5 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11322                                  	; 10/08/2018
 11323 000016EB EB81                    	JMP	short OUTCH ; 04/05/2019
 11324                                  	
 11325                                  	; 18/12/2022
 11326                                  ;OUTJ:	
 11327                                  	;JMP	OUTT
 11328                                  
 11329                                  BACKPOS:
 11330                                  	;DEC	BYTE PTR [CARPOS]
 11331 000016ED 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11332 000016F2 E979FF                  	JMP	OUTCH
 11333                                  
 11334                                  BUFOUT:
 11335 000016F5 3C20                    	CMP	AL," "
 11336 000016F7 7315                    	JAE	SHORT OUTJ		;Normal char
 11337 000016F9 3C09                    	CMP	AL,9
 11338 000016FB 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11339                                  	;DOS 3.3  7/14/86
 11340 000016FD 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11341 000016FF 740D                    	JZ	short CTRLU
 11342 00001701 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11343 00001703 7409                    	JZ	short CTRLU
 11344                                  NOT_CTRLU:
 11345                                  	;DOS 3.3  7/14/86
 11346 00001705 50                      	PUSH	AX
 11347 00001706 B05E                    	MOV	AL,"^"
 11348 00001708 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11349 0000170B 58                      	POP	AX
 11350 0000170C 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11351                                  CTRLU:
 11352                                  	;CALL	OUTT
 11353                                  	; 18/12/2022
 11354                                  OUTJ:
 11355 0000170E E950FF                  	jmp	OUTT
 11356                                  ;BUFOUT_RETN:
 11357                                  	;RETN
 11358                                  
 11359                                  ;
 11360                                  ;----------------------------------------------------------------------------
 11361                                  ;
 11362                                  ;**	$STD_AUX_INPUT - System Call 3
 11363                                  ;
 11364                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11365                                  ;
 11366                                  ;	ENTRY	none
 11367                                  ;	EXIT	(al) = character
 11368                                  ;	USES	all
 11369                                  ;
 11370                                  ;----------------------------------------------------------------------------
 11371                                  ;
 11372                                  
 11373                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11374                                  
 11375                                  _$STD_AUX_INPUT:	;System call 3
 11376                                  
 11377 00001711 E8CF39                  	CALL	STATCHK
 11378 00001714 BB0300                  	MOV	BX,3
 11379 00001717 E8BE1E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11380                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11381                                  	;retc
 11382                                  	; 16/12/2022
 11383                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11384                                  	;JC	SHORT BUFOUT_RETN
 11385                                  	;JMP	SHORT TAISTRT
 11386                                  	; 07/12/2022
 11387 0000171A 7304                    	jnc	SHORT TAISTRT
 11388 0000171C C3                      	retn	
 11389                                  
 11390                                  AUXILP:
 11391 0000171D E89539                  	CALL	SPOOLINT
 11392                                  TAISTRT:
 11393 00001720 B401                    	MOV	AH,1
 11394 00001722 E8F52C                  	CALL	IOFUNC
 11395 00001725 74F6                    	JZ	SHORT AUXILP
 11396 00001727 30E4                    	XOR	AH,AH
 11397                                  	; 16/12/2022
 11398                                  	;CALL	IOFUNC
 11399                                  	;RETN
 11400                                  	; 07/12/2022
 11401 00001729 E9EE2C                  	jmp	IOFUNC
 11402                                  
 11403                                  ;
 11404                                  ;----------------------------------------------------------------------------
 11405                                  ;
 11406                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11407                                  ;
 11408                                  ;	ENTRY	(dl) = character
 11409                                  ;	EXIT	none
 11410                                  ;	USES	all
 11411                                  ;
 11412                                  ;----------------------------------------------------------------------------
 11413                                  ;
 11414                                  
 11415                                  _$STD_AUX_OUTPUT:	;System call 4
 11416                                  
 11417 0000172C 53                      	PUSH	BX
 11418 0000172D BB0300                  	MOV	BX,3
 11419 00001730 EB04                    	JMP	SHORT SENDOUT
 11420                                  
 11421                                  ;
 11422                                  ;----------------------------------------------------------------------------
 11423                                  ;
 11424                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11425                                  ;
 11426                                  ;	ENTRY	(dl) = character
 11427                                  ;	EXIT	none
 11428                                  ;	USES	all
 11429                                  ;
 11430                                  ;----------------------------------------------------------------------------
 11431                                  ;
 11432                                  
 11433                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11434                                  
 11435 00001732 53                      	PUSH	BX
 11436 00001733 BB0400                  	MOV	BX,4
 11437                                  
 11438                                  SENDOUT:
 11439 00001736 88D0                    	MOV	AL,DL
 11440 00001738 50                      	PUSH	AX
 11441 00001739 E8A739                  	CALL	STATCHK
 11442 0000173C 58                      	POP	AX
 11443 0000173D 1E                      	PUSH	DS
 11444 0000173E 56                      	PUSH	SI
 11445                                  LISSTRT2:
 11446 0000173F E8CDFE                  	CALL	RAWOUT2
 11447                                  TRIPOP:
 11448 00001742 5E                      	POP	SI
 11449 00001743 1F                      	POP	DS
 11450 00001744 5B                      	POP	BX
 11451                                  SCIS_RETN:	; 20/07/2018
 11452 00001745 C3                      	RETN
 11453                                  ;
 11454                                  ;----------------------------------------------------------------------------
 11455                                  ;
 11456                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11457                                  ;
 11458                                  ;	Check console input status
 11459                                  ;
 11460                                  ;	ENTRY	none
 11461                                  ;	EXIT	AL = -1 character available, = 0 no character
 11462                                  ;	USES	all
 11463                                  ;
 11464                                  ;----------------------------------------------------------------------------
 11465                                  ;
 11466                                  
 11467                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11468                                  
 11469 00001746 E89A39                  	CALL	STATCHK
 11470 00001749 B000                    	MOV	AL,0		; no xor!!
 11471                                  	;retz
 11472 0000174B 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11473 0000174D 0CFF                    	OR	AL,-1
 11474                                  ;SCIS_RETN:
 11475 0000174F C3                      	RETN
 11476                                  
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11481                                  ;
 11482                                  ;	Flush console input buffer and perform call in AL
 11483                                  ;
 11484                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11485                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11486                                  ;		return arguments for the fcn supplied in (AL)
 11487                                  ;	USES	all
 11488                                  ;
 11489                                  ;----------------------------------------------------------------------------
 11490                                  ;
 11491                                  
 11492                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11493                                  
 11494 00001750 50                      	PUSH	AX
 11495 00001751 52                      	PUSH	DX
 11496 00001752 31DB                    	XOR	BX,BX
 11497 00001754 E8811E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11498                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11499 00001757 7205                    	JC	SHORT BADJFNCON
 11500 00001759 B404                    	MOV	AH,4
 11501 0000175B E8BC2C                  	CALL	IOFUNC
 11502                                  
 11503                                  BADJFNCON:
 11504 0000175E 5A                      	POP	DX
 11505 0000175F 58                      	POP	AX
 11506 00001760 88C4                    	MOV	AH,AL
 11507 00001762 3C01                    	CMP	AL,1
 11508 00001764 7413                    	JZ	SHORT REDISPJ
 11509 00001766 3C06                    	CMP	AL,6
 11510 00001768 740F                    	JZ	SHORT REDISPJ
 11511 0000176A 3C07                    	CMP	AL,7
 11512 0000176C 740B                    	JZ	SHORT REDISPJ
 11513 0000176E 3C08                    	CMP	AL,8
 11514 00001770 7407                    	JZ	SHORT REDISPJ
 11515 00001772 3C0A                    	CMP	AL,10
 11516 00001774 7403                    	JZ	SHORT REDISPJ
 11517 00001776 B000                    	MOV	AL,0
 11518 00001778 C3                      	RETN
 11519                                  
 11520                                  REDISPJ:
 11521 00001779 FA                      	CLI
 11522                                  	;transfer REDISP
 11523 0000177A E90BEC                  	JMP	REDISP
 11524                                  
 11525                                  ;============================================================================
 11526                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11527                                  ;============================================================================
 11528                                  ; 20/07/2018 - Retro DOS v3.0
 11529                                  ; 17/05/2019 - Retro DOS v4.0
 11530                                  
 11531                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11532                                  ;
 11533                                  ;	$GET_FCB_POSITION
 11534                                  ;	$FCB_DELETE
 11535                                  ;	$GET_FCB_FILE_LENGTH
 11536                                  ;	$FCB_CLOSE
 11537                                  ;	$FCB_RENAME
 11538                                  ;	SaveFCBInfo
 11539                                  ;	ResetLRU
 11540                                  ;	SetOpenAge
 11541                                  ;	LRUFCB
 11542                                  ;	FCBRegen
 11543                                  ;	BlastSFT
 11544                                  ;	CheckFCB
 11545                                  ;	SFTFromFCB
 11546                                  ;	FCBHardErr
 11547                                  ;
 11548                                  ;	Revision history:
 11549                                  ;
 11550                                  ;		Created: ARR 4 April 1983"
 11551                                  ;			 MZ  6 June  1983 completion of functions
 11552                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11553                                  ;					  times.  Change so successive closes work by
 11554                                  ;					  always returning OK.	Also, detect I/O to
 11555                                  ;					  already closed FCB and return EOF.
 11556                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11557                                  ;					  out of sft into FCB for reconnection
 11558                                  ;
 11559                                  ;		A000	 version 4.00  Jan. 1988
 11560                                  
 11561                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11562                                  ;----------------------------------------------------------------------------
 11563                                  ;
 11564                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11565                                  ;	extent and next record field and set the random record field to point
 11566                                  ;	to that record
 11567                                  ;
 11568                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11569                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11570                                  ;   Registers modified: all
 11571                                  ;
 11572                                  ;----------------------------------------------------------------------------
 11573                                  ;
 11574                                  
 11575                                  _$GET_FCB_POSITION:
 11576 0000177D E8D404                  	call	GetExtended		; point to FCB
 11577 00001780 E8A504                  	call	GetExtent		; DX:AX is current record
 11578                                  	;mov	[si+21h],ax
 11579 00001783 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11580                                  	;mov	[si+23h],dl
 11581 00001786 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11582                                  	;cmp	word [si+0Eh],64
 11583 00001789 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11584 0000178D 7303                    	JAE	short GetFCBBye
 11585                                  	;mov	[si+24h],dh
 11586 0000178F 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11587                                  GoodPath:	; 16/12/2022
 11588                                  GetFCBBye:
 11589 00001792 E9BEEE                  	jmp	FCB_RET_OK
 11590                                  
 11591                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11592                                  ;----------------------------------------------------------------------------
 11593                                  ;
 11594                                  ;**	$FCB_Delete - Delete from FCB Template
 11595                                  ;
 11596                                  ;	given an FCB, remove all directory entries in the current
 11597                                  ;	directory that have names that match the FCB's ?  marks.
 11598                                  ;
 11599                                  ;	ENTRY	(DS:DX) = address of FCB
 11600                                  ;	EXIT	entries matching the FCB are deleted
 11601                                  ;		(al) = ff iff no entries were deleted
 11602                                  ;	USES	all
 11603                                  ;
 11604                                  ;----------------------------------------------------------------------------
 11605                                  ;
 11606                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11607                                  
 11608                                  _$FCB_DELETE:		; System call 19
 11609                                  					; OpenBuf is in DOSDATA
 11610 00001795 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11611                                  
 11612 00001798 E8EF52                  	call	TransFCB		; convert FCB to path
 11613 0000179B 7207                    	JC	short BadPath 		; signal no deletions
 11614                                  
 11615 0000179D 16                      	push	SS
 11616 0000179E 1F                      	pop	DS			; SS is DOSDATA
 11617                                  
 11618 0000179F E8370D                  	call	DOS_DELETE		; wham
 11619                                  	;JC	short BadPath
 11620                                  	; 16/12/2022
 11621 000017A2 73EE                    	jnc 	short GoodPath
 11622                                  ;GoodPath:
 11623                                  ;	;jmp	FCB_RET_OK		; do a good return
 11624                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11625                                  ;	jmp	short GetFCBBye
 11626                                  
 11627                                  BadPath:
 11628                                  	; Error code is in AX
 11629                                  
 11630 000017A4 E9AFEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11631                                  
 11632                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11633                                  ;----------------------------------------------------------------------------
 11634                                  ;
 11635                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11636                                  ;	file in records (rounded up if partial).
 11637                                  ;
 11638                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11639                                  ;   Outputs:	Random record field updated to reflect the number of records
 11640                                  ;   Registers modified: all
 11641                                  ;
 11642                                  ;----------------------------------------------------------------------------
 11643                                  ;
 11644                                  	; 15/01/2024
 11645                                  
 11646                                  _$GET_FCB_FILE_LENGTH:
 11647                                  
 11648 000017A7 E8AA04                  	call	GetExtended		; get real FCB pointer
 11649                                  					; DX points to Input FCB
 11650                                  
 11651                                  					; OpenBuf is in DOSDATA
 11652 000017AA BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11653                                  
 11654 000017AD 1E                      	push	ds			; save pointer to true FCB
 11655 000017AE 56                      	push	si
 11656 000017AF E8D852                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11657 000017B2 5E                      	pop	si
 11658 000017B3 1F                      	pop	ds
 11659 000017B4 72EE                    	JC	short BadPath
 11660 000017B6 1E                      	push	ds			; save pointer
 11661 000017B7 56                      	push	si
 11662 000017B8 16                      	push	ss		
 11663 000017B9 1F                      	pop	ds
 11664 000017BA E81A11                  	call	GET_FILE_INFO		; grab the info
 11665 000017BD 5E                      	pop	si			; get pointer back
 11666 000017BE 1F                      	pop	ds
 11667 000017BF 72E3                    	JC	short BadPath 		; invalid something
 11668                                  	; 15/01/2024
 11669                                  	;MOV	DX,BX (*)		; get high order size
 11670                                  	;MOV	AX,DI (**)		; get low order size
 11671 000017C1 89D8                    	mov	ax,bx ; hw of file size
 11672                                  	;
 11673                                  	;mov	bx,[si+0Eh]
 11674 000017C3 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11675 000017C6 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11676 000017C8 7502                    	JNZ	short GetSize 		; not empty
 11677                                  	;MOV	BX,128
 11678 000017CA B380                    	mov	bl,128	; 15/01/2024
 11679                                  GetSize:
 11680                                  	; 15/01/2024
 11681                                  	;MOV	DI,AX			; save low order word
 11682                                  	;MOV	AX,DX			; move high order for divide
 11683                                  	;xchg	ax,dx ; (*)
 11684                                  	; ax = hw of file size
 11685                                  
 11686 000017CC 31D2                    	XOR	DX,DX			; clear out high
 11687 000017CE F7F3                    	DIV	BX			; wham
 11688 000017D0 50                      	PUSH	AX			; save dividend
 11689 000017D1 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11690 000017D3 F7F3                    	DIV	BX			; wham
 11691 000017D5 89D1                    	MOV	CX,DX			; save remainder
 11692 000017D7 5A                      	POP	DX			; get high order dividend
 11693 000017D8 E306                    	JCXZ	LengthStore		; no roundup
 11694 000017DA 83C001                  	ADD	AX,1
 11695 000017DD 83D200                  	ADC	DX,0			; 32-bit increment
 11696                                  LengthStore:
 11697                                  	;mov	[si+21h],ax
 11698 000017E0 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11699                                  	;mov	[si+23h],dl
 11700 000017E3 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11701 000017E6 08F6                    	OR	DH,DH
 11702 000017E8 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11703                                  	;mov	[si+24h],dh
 11704 000017EA 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11705                                  	; 16/12/2022
 11706                                  GoodRet:
 11707                                  	;jmp	FCB_RET_OK
 11708 000017ED EBA3                    	jmp	short GoodPath
 11709                                  
 11710                                  ;Break <$FCB_Close - close a file>
 11711                                  ;----------------------------------------------------------------------------
 11712                                  ;
 11713                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11714                                  ;	as the FCB may be used for further I/O
 11715                                  ;
 11716                                  ;   Inputs:	DS:DX point to FCB
 11717                                  ;   Outputs:	AL = FF if file was not found on disk
 11718                                  ;   Registers modified: all
 11719                                  ;
 11720                                  ;----------------------------------------------------------------------------
 11721                                  ;
 11722                                  
 11723                                  	; 16/01/2024
 11724                                  
 11725                                  _$FCB_CLOSE:		; System call 16
 11726                                  
 11727 000017EF 30C0                    	XOR	AL,AL			; default search attributes
 11728 000017F1 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11729 000017F4 7403                    	JZ	short NoAttr		; not extended
 11730 000017F6 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11731                                  NoAttr:
 11732                                  					; SS override
 11733 000017F9 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11734 000017FD E8C303                  	call	SFTFromFCB
 11735 00001800 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11736                                  
 11737                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11738                                  	; there is no need to set the SFT's attribute.
 11739                                  
 11740                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11741                                  	;;; done
 11742                                  
 11743                                  	;mov	al,[es:di+4]
 11744 00001802 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11745 00001806 30E4                    	XOR	AH,AH
 11746 00001808 50                      	PUSH	AX
 11747                                  
 11748                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11749                                  	;;; done
 11750                                  
 11751 00001809 E8AA5A                  	call	CheckShare
 11752 0000180C 7508                    	JNZ	short NoStash
 11753 0000180E 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11754                                  	;mov	[es:di+4],al
 11755 00001812 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11756                                  NoStash:
 11757                                  
 11758                                  ; 16/01/2024
 11759                                  %if 0
 11760                                  	;mov	ax,[si+14h]
 11761                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11762                                  	;mov	[es:di+0Fh],ax
 11763                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11764                                  	;mov	ax,[si+16h]
 11765                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11766                                  	;mov	[es:di+0Dh],ax
 11767                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11768                                  	;mov	ax,[si+10h]
 11769                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11770                                  	;mov	[es:di+11h],ax
 11771                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11772                                  	;mov	ax,[si+12h]
 11773                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11774                                  	;mov	[es:di+13h],ax
 11775                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11776                                  	;or	word [es:di+5],4000h
 11777                                  	; 17/12/2022
 11778                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11779                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11780                                  %else
 11781                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11782 00001816 1E                      	push	ds
 11783                                  	;lds	ax,[si+14h]
 11784 00001817 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11785                                  	;mov	[es:di+0Fh],ax
 11786 0000181A 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11787                                  	;mov	[es:di+0Dh],ds		
 11788 0000181E 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11789 00001822 1F                      	pop	ds
 11790                                  	;lds	ax,[si+10h]
 11791 00001823 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11792                                  	;mov	[es:di+11h],ax
 11793 00001826 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11794                                  	;mov	[es:di+13h],ds
 11795 0000182A 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11796                                  	; 16/01/2024
 11797                                  	;;or	word [es:di+5], 4000h
 11798                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11799 0000182E 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11800                                  %endif
 11801                                  
 11802 00001833 16                      	push	ss
 11803 00001834 1F                      	pop	ds
 11804 00001835 E89016                  	call	DOS_CLOSE	; wham
 11805 00001838 C43E[9E05]              	LES	DI,[THISSFT]
 11806                                  
 11807                                  	;;; 9/8/86 F.C. restore SFT attribute
 11808 0000183C 59                      	POP	CX
 11809                                  	;mov	[es:di+4],cl
 11810 0000183D 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11811                                  	;;; 9/8/86 F.C. restore SFT attribute
 11812                                  
 11813 00001841 9C                      	PUSHF
 11814                                  	;test	word [es:di],0FFFFh
 11815                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11816                                  				; zero ref count gets blasted
 11817 00001842 26833D00                	cmp	word [ES:DI],0
 11818 00001846 7507                    	jnz     short CloseOK
 11819 00001848 50                      	PUSH	AX
 11820 00001849 B04D                    	MOV	AL,'M' ; 4Dh
 11821 0000184B E8F202                  	call	BlastSFT
 11822 0000184E 58                      	POP	AX
 11823                                  CloseOK:
 11824 0000184F 9D                      	POPF
 11825 00001850 739B                    	JNC	short GoodRet
 11826                                  	;cmp	al,6
 11827 00001852 3C06                    	CMP	AL,error_invalid_handle
 11828 00001854 7497                    	JZ	short GoodRet
 11829                                  	;mov	al,2
 11830 00001856 B002                    	MOV	AL,error_file_not_found
 11831                                  fren90:
 11832                                  	; 16/12/2022
 11833                                  fcb_close_err:
 11834 00001858 E9FBED                  	jmp	FCB_RET_ERR
 11835                                  
 11836                                  ;
 11837                                  ;----------------------------------------------------------------------------
 11838                                  ;
 11839                                  ;**	$FCB_Rename - Rename a File
 11840                                  ;
 11841                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11842                                  ;	multiple files copying from the meta characters.
 11843                                  ;
 11844                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11845                                  ;		    name of the files to be renamed. Starting at offset 11h
 11846                                  ;		    in the FCB is the destination name.
 11847                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11848                                  ;		AL = FF -> some files may have been renamed but:
 11849                                  ;			rename to existing file or source file not found
 11850                                  ;	USES	ALL
 11851                                  ;
 11852                                  ;----------------------------------------------------------------------------
 11853                                  ;
 11854                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11855                                  
 11856                                  _$FCB_RENAME:		; System call 23
 11857                                  
 11858 0000185B E8F603                  	call	GetExtended		; get pointer to real FCB
 11859 0000185E 52                      	push	dx
 11860 0000185F 8A04                    	MOV	AL,[SI] 		; get drive byte
 11861 00001861 83C610                  	ADD	SI,10h			; point to destination
 11862                                  
 11863                                  					; RenBuf is in DOSDATA
 11864 00001864 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11865 00001867 FF34                    	push	word [SI]
 11866 00001869 1E                      	push	ds
 11867                                  	;push	di			; save source pointer for TransFCB
 11868                                  	; 16/01/2024 - BugFix !
 11869 0000186A 56                      	push	si
 11870 0000186B 8804                    	MOV	[SI],AL			; drop in real drive
 11871 0000186D 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11872 0000186F E81852                  	call	TransFCB		; munch this pathname
 11873 00001872 5E                      	pop	si
 11874 00001873 1F                      	pop	ds	
 11875 00001874 8F04                    	pop	WORD [SI]		; get path back
 11876 00001876 5A                      	pop	dx			; Original FCB pointer
 11877 00001877 72DF                    	JC	short fren90		; bad path -> error
 11878                                  
 11879                                  					; SS override for WFP_Start & Ren_WFP
 11880 00001879 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11881 0000187E 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11882                                  
 11883                                  					; OpenBuf is in DOSDATA
 11884 00001883 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11885 00001886 E80152                  	call	TransFCB		; wham
 11886                                  					; NOTE that this call is pointing
 11887                                  					;  back to the ORIGINAL FCB so
 11888                                  					;  SATTRIB gets set correctly
 11889 00001889 72CD                    	JC	short fren90		; error
 11890 0000188B E81F0E                  	call	DOS_RENAME
 11891 0000188E 72C8                    	JC	short fren90
 11892                                  	; 16/12/2022
 11893 00001890 E9C0ED                  	jmp	FCB_RET_OK
 11894                                  	
 11895                                  ;	Error -
 11896                                  ;
 11897                                  ;	(al) = error code
 11898                                  
 11899                                  	; 16/12/2022
 11900                                  ;fren90:	
 11901                                  ;	;jmp	FCB_RET_ERR
 11902                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11903                                  ;	jmp	short fcb_close_err
 11904                                  
 11905                                  ;Break <Misbehavior fixers>
 11906                                  ;
 11907                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11908                                  ;   user's space so he may move them at will. Second, they have a small
 11909                                  ;   reserved area that may be used for system information. Third, there was
 11910                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11911                                  ;   usage.
 11912                                  ;
 11913                                  ;   This results in the following misbehavior:
 11914                                  ;
 11915                                  ;	infinite opens of the same file:
 11916                                  ;
 11917                                  ;	While (TRUE) {			While (TRUE) {
 11918                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11919                                  ;	    Read (FCB); 		    Write (FCB);
 11920                                  ;	    }				    }
 11921                                  ;
 11922                                  ;	infinite opens of different files:
 11923                                  ;
 11924                                  ;	While (TRUE) {			While (TRUE) {
 11925                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11926                                  ;	    Read (FCB); 		    Write (FCB);
 11927                                  ;	    }				    }
 11928                                  ;
 11929                                  ;	multiple closes of the same file:
 11930                                  ;
 11931                                  ;	FCBOpen (FCB);
 11932                                  ;	while (TRUE)
 11933                                  ;	    FCBClose (FCB);
 11934                                  ;
 11935                                  ;	I/O after closing file:
 11936                                  ;
 11937                                  ;	FCBOpen (FCB);
 11938                                  ;	while (TRUE) {
 11939                                  ;	    FCBWrite (FCB);
 11940                                  ;	    FCBClose (FCB);
 11941                                  ;	    }
 11942                                  ;
 11943                                  ;   The following is am implementation of a methodology for emulating the
 11944                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11945                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11946                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11947                                  ;   the local machine.
 11948                                  ;
 11949                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11950                                  ;   structures depending on the file itself and the state of operations of the
 11951                                  ;   OS. The information contained in this reserved field is enough to
 11952                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11953                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11954                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11955                                  ;
 11956                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11957                                  ;
 11958                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11959                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11960                                  ;   regenerated.
 11961                                  ;
 11962                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11963                                  ;   longer available. We can make up for this by using the following
 11964                                  ;   information:
 11965                                  ;
 11966                                  ;	The Drive number (from the DPB).
 11967                                  ;	The physical sector of the directory that contains the entry.
 11968                                  ;	The relative position of the entry in the sector.
 11969                                  ;	The first cluster field.
 11970                                  ;	The last used SFT.
 11971                                  ;      OR In the case of a device FCB
 11972                                  ;	The low 6 bits of sf_flags (indicating device type)
 11973                                  ;	The pointer to the device header
 11974                                  ;
 11975                                  ;   We read in the particular directory sector and examine the indicated
 11976                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11977                                  ;
 11978                                  ;   Some key items need to be remembered:
 11979                                  ;
 11980                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11981                                  ;	information. We enforce good behavior on the FCBs.
 11982                                  ;
 11983                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11984                                  ;	open VCs. The VCs may be closed only at process termination.
 11985                                  ;
 11986                                  ;	If this is not an installed version of the DOS, file sharing will
 11987                                  ;	always be present.
 11988                                  ;
 11989                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11990                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11991                                  ;
 11992                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11993                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11994                                  ;	proper OI record.
 11995                                  ;
 11996                                  ;   The test bits are:
 11997                                  ;
 11998                                  ;	00 -> local file
 11999                                  ;	40 -> sharing local
 12000                                  ;	80 -> network
 12001                                  ;	C0 -> local device
 12002                                  
 12003                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12004                                  ;----------------------------------------------------------------------------
 12005                                  ;
 12006                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12007                                  ;	pieces of information into the FCB to allow for subsequent
 12008                                  ;	regeneration. Poke LRU also.
 12009                                  ;
 12010                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12011                                  ;		DS:SI point to the FCB (not an extended one)
 12012                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12013                                  ;		DS:SI preserved
 12014                                  ;		ES:DI point to sft
 12015                                  ;   Registers modified: All
 12016                                  ;
 12017                                  ;
 12018                                  ;----------------------------------------------------------------------------
 12019                                  ;
 12020                                  
 12021                                  	; 20/01/2024
 12022                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12023                                  
 12024                                  SaveFCBInfo:
 12025                                  
 12026 00001893 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12027 00001898 E8C9F9                  	call	IsSFTNet
 12028 0000189B 740B                    	JZ	short SaveLocal		; if not network then save local info
 12029                                  ;
 12030                                  ;----- In net support -----
 12031                                  ;
 12032                                  	; 17/05/2019 - Retro DOS v4.0
 12033                                  
 12034                                  	; MSDOS 3.3
 12035                                  	;;mov	ax,[es:di+1Dh]
 12036                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12037                                  	;;mov	[si+1Ah],ax
 12038                                  	;mov	[si+fcb_net_handle],ax
 12039                                  	;push	es
 12040                                  	;push	di
 12041                                  	;;les	di,[es:di+19h]
 12042                                  	;LES	DI,[ES:DI+sf_netid]
 12043                                  	;;mov	[si+1Ch],di
 12044                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12045                                  	;;mov 	[si+1Eh],es
 12046                                  	;MOV	[SI+fcb_netID+2],ES
 12047                                  	;pop	di
 12048                                  	;pop	es
 12049                                  
 12050                                  	; MSDOS 6.0
 12051                                  	;mov	ax,[es:di+0Bh]
 12052 0000189D 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12053                                  	;mov	[si+1Ch],ax
 12054 000018A1 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12055                                  	
 12056                                  	;mov	bl,80h
 12057 000018A4 B380                    	MOV	BL,FCBNETWORK
 12058                                  ;
 12059                                  ;----- END In net support -----
 12060                                  ;
 12061 000018A6 EB63                    	jmp	SHORT SaveSFN
 12062                                  
 12063                                  SaveLocal:
 12064                                  	;IF	Installed
 12065 000018A8 E80B5A                  	call	CheckShare
 12066                                  	;JZ	short SaveNoShare	; no sharer
 12067                                  	;JMP	short SaveShare		; sharer present
 12068                                  	; 16/12/2022
 12069                                  	; 28/07/2019
 12070 000018AB 7559                    	jnz	short SaveShare
 12071                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12072                                  	;JZ	short SaveNoShare	; no sharer
 12073                                  	;JMP	short SaveShare		; sharer present
 12074                                  
 12075                                  SaveNoShare:
 12076                                  	;;test 	word [es:di+5],80h
 12077                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12078 000018AD 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12079 000018B2 7542                    	JNZ	short SaveNoShareDev	; Device
 12080                                  
 12081                                  	; Save no sharing local file information
 12082                                  
 12083                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12084                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12085 000018B4 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12086                                  	;mov	[si+1Dh],ax
 12087 000018B8 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12088                                  
 12089                                  	; MSDOS 6.0
 12090                                  
 12091                                  	;SR; Store high byte of directory sector
 12092                                  	;mov	ax,[es:di+1Dh]
 12093 000018BB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12094                                  	
 12095                                  	; SR;
 12096                                  	; We have to store the read-only and archive attributes of the file.
 12097                                  	; We extract it from the SFT and store it in the top two bits of the 
 12098                                  	; sector number ( sector number == 22 bits only )
 12099                                  
 12100                                  	;mov	bl,[es:di+4]
 12101 000018BF 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12102 000018C3 88DF                    	mov	bh,bl
 12103 000018C5 D0CB                    	ror	bl,1
 12104 000018C7 D0E7                    	shl	bh,1
 12105 000018C9 08FB                    	or	bl,bh
 12106 000018CB 80E3C0                  	and	bl,0C0h
 12107 000018CE 08D8                    	or	al,bl
 12108                                  	;mov	[si+18h],al ; 08/11/2022
 12109 000018D0 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12110                                  
 12111                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12112                                  	;mov	al,[es:di+1Fh]
 12113 000018D3 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12114                                  	;mov	[si+1Fh],al
 12115 000018D7 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12116                                  	;mov	ax,[es:di+0Bh]
 12117 000018DA 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12118                                  	;mov	[si+1Bh],ax
 12119 000018DE 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12120 000018E1 B300                    	MOV	BL,0
 12121                                  
 12122                                  	; Create the bits field from the dirty/device bits of the flags word 
 12123                                  	; and the mode byte
 12124                                  
 12125                                  SetFCBBits:
 12126                                  	;mov	ax,[es:di+5]
 12127 000018E3 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12128 000018E7 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12129                                  	;or	al,[es:di+2]
 12130 000018E9 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12131                                  	;mov	[si+1Ah], al
 12132 000018ED 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12133                                  
 12134                                  	; MSDOS 6.0
 12135                                  	
 12136                                  	; SR;
 12137                                  	; Check if we came here for local file or device. If for local file, 
 12138                                  	; skip setting of SFT index
 12139                                  	
 12140 000018F0 08DB                    	or	bl,bl
 12141 000018F2 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12142                                  
 12143 000018F4 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12144                                  
 12145                                  	; Save no sharing local device information
 12146                                  
 12147                                  SaveNoShareDev:
 12148                                  	; 20/01/2024
 12149                                  	;;mov	ax,[es:di+7]
 12150                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12151                                  	;;mov	[si+1Ah],ax
 12152                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12153                                  	;;mov	ax,[es:di+9]
 12154                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12155                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12156                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12157 000018F6 06                      	push	es
 12158 000018F7 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12159 000018FB 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12160 000018FE 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12161 00001901 07                      	pop	es
 12162                                  	
 12163                                  	;mov	bl,40h
 12164 00001902 B340                    	MOV	BL,FCBDEVICE
 12165                                  	; 28/12/2022
 12166 00001904 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12167                                  
 12168                                  SaveShare:
 12169                                  	;ENDIF
 12170                                  
 12171                                  ;----- In share support -----
 12172                                  
 12173                                  	;call	far [ss:ShSave]
 12174 00001906 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12175                                  
 12176                                  ;----- end in share support -----
 12177                                  
 12178                                  	; 17/05/2019
 12179                                  
 12180                                  SaveSFN:
 12181                                  	;lea	ax,[di-6]
 12182 0000190B 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12183                                  	
 12184                                  	; Adjust for offset to table.
 12185                                  	
 12186 0000190E 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12187                                  
 12188 00001913 53                      	push	bx			;bx = FCB type (net/Share or local)
 12189                                  	;;mov	bl,53 ; MSDOS 3.3
 12190                                  	;mov	bl,59 ; MSDOS 6.0
 12191 00001914 B33B                    	MOV	BL,SF_ENTRY.size
 12192 00001916 F6F3                    	DIV	BL
 12193                                  	;mov	[si+18h],al
 12194 00001918 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12195 0000191B 5B                      	pop	bx			;restore bx
 12196                                  
 12197                                  SaveNoSFN:
 12198                                  	;mov	ax,[es:di+5]
 12199 0000191C 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12200 00001920 243F                    	AND	AL,3Fh			; get real drive
 12201 00001922 08D8                    	OR	AL,BL
 12202                                  	;mov	[si+19h],al
 12203 00001924 884419                  	MOV	[SI+fcb_l_drive],AL
 12204                                  
 12205 00001927 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12206 0000192B 40                      	INC	AX
 12207                                  	;mov	[es:di+15h],ax
 12208 0000192C 26894515                	MOV	[ES:DI+sf_LRU],AX
 12209 00001930 7506                    	JNZ	short SimpleStuff
 12210                                  	
 12211                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12212                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12213                                  	
 12214                                  	;mov	bx,15h
 12215 00001932 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12216 00001935 E80500                  	call	ResetLRU
 12217                                  
 12218                                  	; Set new LRU to AX
 12219                                  SimpleStuff:
 12220 00001938 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12221 0000193C C3                      	retn
 12222                                  
 12223                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12224                                  ;----------------------------------------------------------------------------
 12225                                  ;
 12226                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12227                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12228                                  ;   at 0.
 12229                                  ;
 12230                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12231                                  ;		ES:DI point to SFT currently being updated
 12232                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12233                                  ;		AX has 8000h
 12234                                  ;   Registers modified: none
 12235                                  ;
 12236                                  ;----------------------------------------------------------------------------
 12237                                  ;
 12238                                  
 12239                                  	; 17/05/2019 - Retro DOS v4.0
 12240                                  ResetLRU:
 12241                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12242                                  	; DOSDATA
 12243                                  
 12244 0000193D B80080                  	MOV	AX,8000h
 12245 00001940 06                      	push	es
 12246 00001941 57                      	push	di
 12247                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12248 00001942 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12249                                  	;mov	cx,[es:di+4]
 12250 00001947 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12251                                  	;lea	di,[di+6]
 12252 0000194B 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12253                                  ovScan:
 12254 0000194E 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12255 00001951 7703                    	JA	short ovLoop
 12256 00001953 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12257                                  ovLoop:
 12258                                  	;;add	di,53	; MSDOS 3.3
 12259                                  	;add	di,59	; MSDOS 6.0	
 12260 00001956 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12261 00001959 E2F3                    	LOOP	ovScan
 12262 0000195B 5F                      	pop	di
 12263 0000195C 07                      	pop	es
 12264 0000195D 268901                  	MOV	[ES:DI+BX],AX
 12265 00001960 C3                      	retn
 12266                                  
 12267                                  ;IF  0  ; We dont need this routine any more.
 12268                                  ;
 12269                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12270                                  ;----------------------------------------------------------------------------
 12271                                  ;
 12272                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12273                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12274                                  ;   count here and fill in the appropriate field.
 12275                                  ;
 12276                                  ;   Inputs:	ES:DI point to SFT
 12277                                  ;   Outputs:	ES:DI has the open age field filled in.
 12278                                  ;		If open age has wraparound, we will have subtracted 8000h
 12279                                  ;		    from all open ages.
 12280                                  ;   Registers modified: AX
 12281                                  ;
 12282                                  ;----------------------------------------------------------------------------
 12283                                  ;
 12284                                  ;SetOpenAge:
 12285                                  ;	; 20/07/2018 - Retro DOS v3.0
 12286                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12287                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12288                                  ;
 12289                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12290                                  ;
 12291                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12292                                  ;	INC	AX
 12293                                  ;	;mov	[es:di+17h],ax
 12294                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12295                                  ;	JNZ	short SetDone
 12296                                  ;	;mov	bx,17h
 12297                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12298                                  ;	call	ResetLRU
 12299                                  ;SetDone:
 12300                                  ;	MOV	[CS:OpenLRU],AX
 12301                                  ;	retn
 12302                                  ;
 12303                                  ;ENDIF	; SetOpenAge no longer needed
 12304                                  
 12305                                  ; 21/07/2018 - Retro DOS v3.0
 12306                                  ; LRUFCB for MSDOS 6.0 !
 12307                                  
 12308                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12309                                  ;----------------------------------------------------------------------------
 12310                                  ;
 12311                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12312                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12313                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12314                                  ;
 12315                                  ;   Inputs:	none
 12316                                  ;   Outputs:	ES:DI point to SFT
 12317                                  ;		ThisSFT points to SFT
 12318                                  ;		SFT is zeroed
 12319                                  ;		Carry set of closes failed
 12320                                  ;   Registers modified: none
 12321                                  ;
 12322                                  ;----------------------------------------------------------------------------
 12323                                  ;
 12324                                  ; MSDOS 6.0
 12325                                  ;IF 0	; rewritten this routine
 12326                                  ;
 12327                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12328                                  ;	call	save_world
 12329                                  ;	
 12330                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12331                                  ; to find the lease recently used one that is younger than the open age.  We
 12332                                  ; operate be scanning the list n times finding the least age that is greater
 12333                                  ; or equal to the previous minimum age.
 12334                                  ;
 12335                                  ;   BP is the count of times we need to go through this loop.
 12336                                  ;   AX is the current acceptable minimum age to consider
 12337                                  ;
 12338                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12339                                  ;	XOR	AX,AX			; low = 0;
 12340                                  ;
 12341                                  ; If we've scanned the table n times, then we are done.
 12342                                  ;
 12343                                  ;lru1:
 12344                                  ;	CMP	bp,0			; while (k--) {
 12345                                  ;	JZ	short lru75
 12346                                  ;	DEC	bp
 12347                                  ;
 12348                                  ; Set up for scan.
 12349                                  ;
 12350                                  ;   AX is the minimum age for consideration
 12351                                  ;   BX is the minimum age found during the scan
 12352                                  ;   SI is the position of the entry that corresponds to BX
 12353                                  ;
 12354                                  ;	MOV	BX,-1			;     min = 0xffff;
 12355                                  ;	MOV	si,BX			;     pos = 0xffff;
 12356                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12357                                  ;	;mov	cx,[es:di+4]
 12358                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12359                                  ;	;lea	di,[di+6]
 12360                                  ;	LEA	DI,[DI+SFT.SFTable]
 12361                                  ;
 12362                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12363                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12364                                  ; are done.  In both cases, we use the found entry.
 12365                                  ;
 12366                                  ;lru2:
 12367                                  ;	cmp	word [es:di],0
 12368                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12369                                  ;	jz	short lru25
 12370                                  ;	;cmp	word [es:di],-1
 12371                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12372                                  ;	cmp	word [es:di],sf_busy
 12373                                  ;	jnz	short lru3
 12374                                  ;
 12375                                  ; The entry is usable without further scan.  Go and use it.
 12376                                  ;
 12377                                  ;lru25:
 12378                                  ;	MOV	si,DI			;	      pos = i;
 12379                                  ;	JMP	short lru11		;	      goto got;
 12380                                  ;
 12381                                  ; See if the entry is for the network or for the sharer.
 12382                                  ;
 12383                                  ;  If for the sharer or network then
 12384                                  ;	if the age < current minimum AND >= allowed minimum then
 12385                                  ;	    this entry becomes current minimum
 12386                                  ;
 12387                                  ;lru3:
 12388                                  ;	;test	word [es:di+5],8000h
 12389                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12390                                  ;					;	  if (!net[i]
 12391                                  ;	JNZ	short lru35
 12392                                  ;if installed
 12393                                  ;	call	CheckShare		;		&& !sharing)
 12394                                  ;	JZ	short lru5		;	  else
 12395                                  ;ENDIF
 12396                                  ;
 12397                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12398                                  ; current minimum.
 12399                                  ;
 12400                                  ;lru35:
 12401                                  ;	;mov	dx,[es:di+17h]
 12402                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12403                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12404                                  ;	JB	short lru5
 12405                                  ;	CMP	DX,BX
 12406                                  ;	JAE	short lru5		;	      age[i] < min) {
 12407                                  ;
 12408                                  ; entry is new minimum.  Remember his age.
 12409                                  ;
 12410                                  ;	mov	bx,DX			;	      min = age[i];
 12411                                  ;	mov	si,di			;	      pos = i;
 12412                                  ;
 12413                                  ; End of loop.	gp back for more
 12414                                  ;
 12415                                  ;lru5:
 12416                                  ;	;add	di,53
 12417                                  ;	add	di,SF_ENTRY.size
 12418                                  ;	loop	lru2			;	      }
 12419                                  ;
 12420                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12421                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12422                                  ; complete.  Go find LRU.
 12423                                  ;
 12424                                  ;lru6:	
 12425                                  ;	cmp	si,-1			; position not -1?
 12426                                  ;	jz	short lru75		; no, done with everything
 12427                                  ;	lea	ax,[bx+1]		; set new threshold age
 12428                                  ;	jmp	short lru1		; go and loop for more
 12429                                  ;lru65:	
 12430                                  ;	stc
 12431                                  ;	jmp	short LRUDead		;	  return -1;
 12432                                  ;
 12433                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12434                                  ; network entry. We now make a second pass through to find the LRU entry
 12435                                  ; that is local-no-share or has age >= AX
 12436                                  ;
 12437                                  ;lru75:
 12438                                  ;	mov	bx,-1			; min = 0xffff;
 12439                                  ;	mov	si,bx			; pos = 0xffff;
 12440                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12441                                  ;	;mov	cx,[es:di+4]
 12442                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12443                                  ;	;lea	di,[di+6]
 12444                                  ;	LEA	DI,[DI+SFT.SFTable]
 12445                                  ;
 12446                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12447                                  ; then check for lru.
 12448                                  ;
 12449                                  ;lru8:
 12450                                  ;	;test	word [es:di+5],8000h
 12451                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12452                                  ;	jnz	short lru85		; is for network, go check age
 12453                                  ;	call	CheckShare		; sharer here?
 12454                                  ;	jz	short lru86		; no, go check lru
 12455                                  ;
 12456                                  ; Network or sharer.  Check age
 12457                                  ;
 12458                                  ;lru85:
 12459                                  ;	;cmp	[es:di+17h],ax
 12460                                  ;	cmp	[es:di+sf_OpenAge],ax
 12461                                  ;	jb	short lru9		; age is before threshold, skip it
 12462                                  ;
 12463                                  ; Check LRU
 12464                                  ;
 12465                                  ;lru86:
 12466                                  ;	;cmp	[es:di+15h],bx
 12467                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12468                                  ;	jae	short lru9		; no, skip this
 12469                                  ;	mov	si,di			; remember position
 12470                                  ;	;mov	bx,[es:di+15h]
 12471                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12472                                  ;
 12473                                  ; Done with this entry, go back for more.
 12474                                  ;
 12475                                  ;lru9:
 12476                                  ;	;add	di, 53
 12477                                  ;	add	di,SF_ENTRY.size
 12478                                  ;	loop	lru8
 12479                                  ;
 12480                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12481                                  ; out. The conditions here are:
 12482                                  ;
 12483                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12484                                  ;
 12485                                  ;lru10:
 12486                                  ;	cmp	si,-1			; if no one f
 12487                                  ;	jz	short lru65		;     return -1;
 12488                                  ;lru11:
 12489                                  ;	mov	di,si
 12490                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12491                                  ;	MOV	[CS:THISSFT+2],ES
 12492                                  ;
 12493                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12494                                  ; is 0.
 12495                                  ;
 12496                                  ;	;test	word [es:di+5],8000h
 12497                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12498                                  ;	JNZ	short LRUClose
 12499                                  ;IF INSTALLED
 12500                                  ;	call	CheckShare
 12501                                  ;	JZ	short LRUDone
 12502                                  ;ENDIF
 12503                                  ;
 12504                                  ; Repeat close until ref count is 0
 12505                                  ;
 12506                                  ;LRUClose:
 12507                                  ;	push	ss
 12508                                  ;	pop	ds
 12509                                  ;	LES	DI,[THISSFT]
 12510                                  ;	cmp     word [es:di],0
 12511                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12512                                  ;	JZ	short LRUDone 		; nope, all done
 12513                                  ;	call	DOS_CLOSE
 12514                                  ;	jnc	short LRUClose		; no error => clean up
 12515                                  ;	;cmp	al,6
 12516                                  ;	cmp	al,error_invalid_handle
 12517                                  ;	jz	short LRUClose
 12518                                  ;	stc
 12519                                  ;	JMP	short LRUDead
 12520                                  ;LRUDone:
 12521                                  ;	XOR	AL,AL
 12522                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12523                                  ;
 12524                                  ;LRUDead:
 12525                                  ;	call	restore_world
 12526                                  ;	LES     DI,[CS:THISSFT]
 12527                                  ;	jnc	short LRUFCB_retn
 12528                                  ;LRUFCB_err:
 12529                                  ;	; mov	al, 23h	
 12530                                  ;	MOV	AL,error_FCB_unavailable
 12531                                  ;LRUFCB_retn:	
 12532                                  ;	retn:
 12533                                  ;
 12534                                  ;ENDIF	; LRUFCB has been rewritten below.
 12535                                  
 12536                                  ; 17/05/2019 - Retro DOS v4.0
 12537                                  ; LRUFCB for MSDOS 6.0 !
 12538                                  ;----------------------------------------------------------------------------
 12539                                  ;
 12540                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12541                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12542                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12543                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12544                                  ; optimize regeneration operations by keeping track of the current local
 12545                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12546                                  ; local SFT in the SFT Block.
 12547                                  ;
 12548                                  ; Inputs: al = 0 => Regenerate SFT operation
 12549                                  ;	    = 1 => Allocate new SFT for Open/Create
 12550                                  ;
 12551                                  ; Outputs: Carry clear
 12552                                  ;	 	es:di = Address of allocated SFT
 12553                                  ;	  	ThisSFT = Address of allocated SFT
 12554                                  ;
 12555                                  ;	  carry set if closes of net/Share files failed 
 12556                                  ;		al = error_FCB_unavailable
 12557                                  ;
 12558                                  ; Registers affected: None
 12559                                  ;
 12560                                  ;----------------------------------------------------------------------------
 12561                                  
 12562                                  ;LruFCB	PROC	NEAR
 12563                                  LRUFCB:
 12564                                  	; 17/05/2019 - Retro DOS v4.0
 12565                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12566                                  
 12567                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12568                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12569                                  
 12570                                  	; 20/01/2024
 12571                                  
 12572 00001961 06                      	push	es	; * (MSDOS 6.21)
 12573                                  	
 12574 00001962 E8FDEA                  	call	save_world
 12575                                  	
 12576                                  	;getdseg <ds>		;ds = DOSDATA
 12577 00001965 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12578                                  
 12579 0000196A 08C0                    	or	al,al		;Check if regenerate allocation
 12580 0000196C 7516                    	jnz	short lru1	;Try to find SFT to use
 12581                                  
 12582                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12583                                  	; local SFT, just return that SFT to reuse
 12584                                  
 12585                                  	; 20/01/2024
 12586                                  	;mov	di,[LocalSFT]
 12587                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12588                                  	;jz	short lru1	;invalid local SFT, find one
 12589                                  
 12590                                  	; We have found a valid local SFT. Recycle this SFT
 12591                                  
 12592 0000196E C43E[4410]              	les	di,[LocalSFT]
 12593                                  
 12594                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12595 00001972 8CC1                    	mov	cx,es
 12596 00001974 09F9                    	or	cx,di		; is address == 0?
 12597 00001976 740C                    	jz	short lru1	; invalid local SFT, find one
 12598                                  
 12599                                  gotlocalSFT:
 12600 00001978 893E[9E05]              	mov	[THISSFT],di
 12601 0000197C 8C06[A005]              	mov	[THISSFT+2],es
 12602 00001980 F8                      	clc
 12603 00001981 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12604                                  
 12605                                  lru1:
 12606 00001984 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12607                                  	;mov	cx,[es:di+4]
 12608 00001988 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12609                                  	;lea	di,[di+6]
 12610 0000198C 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12611                                  
 12612                                  	; We scan through all the SFTs scanning for a free one. It also 
 12613                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12614                                  	; bx = min. LRU for local SFTs
 12615                                  	; si = pos. of local SFT with min. LRU
 12616                                  	; dx = min. LRU for net/Share SFTs
 12617                                  	; bp = pos. of net/Share SFT with min. LRU
 12618                                  
 12619 0000198F BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12620 00001992 89DE                    	mov	si,bx
 12621 00001994 89DA                    	mov	dx,bx
 12622 00001996 89DD                    	mov	bp,bx
 12623                                  
 12624                                  findSFT:
 12625                                  	;See if this SFT is a free one. If so, return it
 12626 00001998 26830D00                	or	word [es:di],0
 12627                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12628 0000199C 744C                    	jz	short gotSFT	;yes, SFT is free
 12629                                  	;;cmp	word [es:di],-1
 12630                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12631 0000199E 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12632 000019A2 7446                    	jz	short gotSFT	;no, can use it
 12633                                  
 12634                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12635                                  	; used for a later regen.
 12636                                  
 12637                                  	; 16/12/2022
 12638                                  	; 08/11/2022
 12639                                  	;test	byte [es:di+6],80h
 12640 000019A4 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12641                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12642                                  	;;test	word [es:di+5],8000h
 12643                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12644 000019A9 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12645                                  
 12646                                  ;IF installed
 12647 000019AB E80859                  	call	CheckShare	;Share present?
 12648                                  ;ENDIF
 12649 000019AE 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12650                                  
 12651                                  	;Local SFT, register its address
 12652                                  
 12653                                  	; !!HACK!!!
 12654                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12655                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12656                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12657                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12658                                  	; out the code that previously existed at label 'gotSFT'
 12659                                  
 12660                                  hackpoint:
 12661 000019B0 893E[4410]              	mov	[LocalSFT],di
 12662 000019B4 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12663                                  
 12664 000019B8 08C0                    	or	al,al		;Is operation = REGEN?
 12665 000019BA 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12666                                  
 12667                                  	;Get LRU for local files
 12668                                  	
 12669                                  	;cmp	[es:di+15h],bx
 12670 000019BC 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12671 000019C0 7306                    	jae	short lru4	;no, skip 
 12672                                  
 12673                                  	;mov	bx,[es:di+15h]
 12674 000019C2 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12675 000019C6 89FE                    	mov	si,di		;store SFT position
 12676                                  lru4:
 12677                                  	;add	di,59
 12678 000019C8 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12679 000019CB E2CB                    	loop	findSFT
 12680                                  	
 12681                                  	; 20/01/2024
 12682 000019CD 49                      	dec	cx ; -1
 12683                                  
 12684                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12685                                  	; available, we will reuse it instead of net/Share LRU
 12686                                  
 12687 000019CE 89F7                    	mov	di,si
 12688                                  	;cmp	si,-1		;local SFT available?
 12689 000019D0 39CE                    	cmp	si,cx ; 20/01/2024
 12690 000019D2 7516                    	jnz	short gotSFT	;yes, return it
 12691                                  
 12692                                  	;No local SFT, see if we got a net/Share SFT
 12693                                  
 12694 000019D4 89EF                    	mov	di,bp
 12695                                  
 12696 000019D6 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12697                                  	;cmp	bp,-1		;net/Share SFT available?
 12698 000019D8 752D                    	jnz	short gotnetSFT	;yes, return it
 12699                                  noSFT:
 12700                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12701                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12702                                  	; count is not maintained properly.
 12703                                  
 12704 000019DA EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12705                                  
 12706                                  	; Handle the LRU for net/Share SFTs
 12707                                  lru5:
 12708                                  	;cmp	[es:di+15h],dx
 12709 000019DC 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12710 000019E0 73E6                    	jae	short lru4	;no, skip
 12711                                  
 12712                                  	;mov	dx,[es:di+15h]
 12713 000019E2 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12714                                  
 12715 000019E6 89FD                    	mov	bp,di		;store SFT position
 12716 000019E8 EBDE                    	jmp	short lru4	;continue with next SFT
 12717                                  
 12718                                  gotSFT:
 12719 000019EA 08C0                    	or	al,al
 12720 000019EC 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12721                                  
 12722                                  	; HACK!!!
 12723                                  	; The code here differs from the code at 'hackpoint' only in the
 12724                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12725                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12726                                  	; has been commented out below and replaced by the code just above.
 12727                                  
 12728                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12729                                  ;
 12730                                  ;	or	al,al		  ;Regen?
 12731                                  ;	jnz	short notlocaluse ;yes, register it and return
 12732                                  ;
 12733                                  ;Register this SFT as a local one
 12734                                  ;
 12735                                  ;	mov	[LocalSFT],di
 12736                                  ;	mov	[LocalSFT+2],es
 12737                                  ;	jmp	gotlocalSFT	;return to caller
 12738                                  ;
 12739                                  ;notlocaluse:
 12740                                  
 12741                                  	; The caller is probably going to use this SFT for a net/Share file.
 12742                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12743                                  	; does not really know whether it is a local file or not. We
 12744                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12745                                  	; registered as a local SFT that can be recycled.
 12746                                  
 12747 000019EE 8CC0                    	mov	ax,es
 12748 000019F0 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12749 000019F4 750E                    	jne	short notinvalid
 12750 000019F6 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12751                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12752                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12753 000019FA 7508                    	jne	short notinvalid
 12754                                  zerolocalSFT:	
 12755 000019FC 31C0                    	xor	ax,ax ; 0
 12756 000019FE A3[4410]                	mov	[LocalSFT],ax
 12757 00001A01 A3[4610]                	mov	[LocalSFT+2],ax
 12758                                  	
 12759                                  notinvalid:
 12760 00001A04 E971FF                  	jmp	gotlocalSFT
 12761                                  
 12762                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12763                                  	; Invalidate this variable i.e LocalSFT = NULL
 12764                                  
 12765                                  ;zerolocalSFT:
 12766                                  	;xor	ax,ax ; 0
 12767                                  	;mov	[LocalSFT],ax
 12768                                  	;mov	[LocalSFT+2],ax
 12769                                  	;
 12770                                  	;jmp	gotlocalSFT
 12771                                  
 12772                                  gotnetSFT:
 12773                                  	; We have an SFT that is currently net/Share. If it is going to be
 12774                                  	; used for a regen, we know it has to be a local SFT. Update the
 12775                                  	; LocalSFT variable
 12776                                  
 12777 00001A07 08C0                    	or	al,al
 12778 00001A09 7508                    	jnz	short closenet
 12779                                  
 12780 00001A0B 893E[4410]              	mov	[LocalSFT],di
 12781 00001A0F 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12782                                  closenet:
 12783 00001A13 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12784 00001A17 8C06[A005]              	mov	[THISSFT+2],es
 12785                                  
 12786                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12787                                  	; count is 0.
 12788                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12789                                  	; recycled -- no need to check for this.
 12790                                  
 12791                                  LRUClose:
 12792 00001A1B 26833D00                	cmp	word [es:di],0
 12793                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12794 00001A1F 740C                    	jz	short LRUDone	; nope, all done
 12795                                  
 12796 00001A21 E8A414                  	call	DOS_CLOSE
 12797 00001A24 73F5                    	jnc	short LRUClose	; no error => clean up
 12798                                  
 12799                                  	; Bugbug: I dont know why we are trying to close after we get an
 12800                                  	; error closing. Seems like we could have a potential infinite loop
 12801                                  	; here. This has to be verified.
 12802                                  
 12803 00001A26 3C06                    	cmp	al,error_invalid_handle ; 6
 12804 00001A28 74F1                    	je	short LRUClose
 12805                                  errorbadSFT:
 12806 00001A2A F9                      	stc
 12807 00001A2B EB05                    	JMP	short LRUDead
 12808                                  LRUDone:
 12809 00001A2D 30C0                    	XOR	AL,AL
 12810 00001A2F E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12811                                  
 12812                                  LRUDead:
 12813 00001A32 E816EA                  	call	restore_world		; use macro
 12814                                  	
 12815 00001A35 07                      	pop	es ; * (MSDOS 6.21)
 12816                                  
 12817                                  	;getdseg <es>
 12818 00001A36 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12819 00001A3B 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12820                                  
 12821                                  	;;retnc
 12822                                  	;jc	short LruFCB_err
 12823                                  	;retn
 12824                                  
 12825                                  	; 16/12/2022
 12826                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12827 00001A40 7302                    	jnc	short LruFCB_retn
 12828                                  	;jc	short LruFCB_err
 12829                                  	;retn
 12830                                  		
 12831                                  LruFCB_err:
 12832 00001A42 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12833                                  LruFCB_retn:
 12834 00001A44 C3                      	retn
 12835                                  	
 12836                                  ;LruFCB	ENDP
 12837                                  
 12838                                  ; 17/05/2019 - Retro DOS v4.0
 12839                                  
 12840                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12841                                  
 12842                                  ; --------------------------------------------------------------------------
 12843                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12844                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12845                                  ; to copy the name to different destinations
 12846                                  ;
 12847                                  ; Inputs: ds:si = source string
 12848                                  ;	 es:di = destination string
 12849                                  ;	 cx = length of string
 12850                                  ;
 12851                                  ; Outputs: String copied to destination
 12852                                  ;
 12853                                  ; Registers affected: cx,di,si
 12854                                  ; --------------------------------------------------------------------------
 12855                                  
 12856                                  RegenCopyName:
 12857                                  CopyName:
 12858 00001A45 AC                      	lodsb			;load character
 12859 00001A46 E87B35                  	call	UCase		; convert char to upper case
 12860                                  StuffChar2:
 12861 00001A49 AA                      	STOSB			;store converted character
 12862 00001A4A E2F9                    	LOOP	CopyName	;
 12863                                  DoneName:
 12864 00001A4C C3                      	retn
 12865                                  
 12866                                  ; --------------------------------------------------------------------------
 12867                                  
 12868                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12869                                  FCBRegen:
 12870                                  	; called from SFTFromFCB. SS already DOSDATA
 12871                                  
 12872                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12873                                  	; we do not fill, size we do no fill, position we do not fill,
 12874                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12875                                  
 12876                                  	;mov	al,[si+19h]
 12877 00001A4D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12878                                  
 12879                                  	; We discriminate based on the first two bits in the reserved field.
 12880                                  	
 12881                                  	;test	al,80h
 12882 00001A50 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12883 00001A52 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12884                                  
 12885                                  	; The FCB is for a network or a sharing based system. At this point 
 12886                                  	; we have already closed the SFT for this guy and reconnection is 
 12887                                  	; impossible.
 12888                                  	;
 12889                                  	; Remember that he may have given us a FCB with bogus information in
 12890                                  	; it. Check to see if sharing is present or if the redir is present.
 12891                                  	; If either is around, presume that we have cycled out the FCB and 
 12892                                  	; give the hard error. Otherwise, just return with carry set.
 12893                                  
 12894 00001A54 E85F58                  	call	CheckShare		; test for sharer
 12895 00001A57 7509                    	JNZ	short RegenFail		; yep, fail this.
 12896                                  	
 12897                                  	;mov	ax,1100h
 12898 00001A59 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12899 00001A5C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12900                                  			; Return: AL = 00h  not installed, OK to install
 12901                                  			; 01h  not installed, not OK to install
 12902                                  			; FFh  installed
 12903 00001A5E 08C0                    	OR	AL,AL			; is it there?
 12904 00001A60 740C                    	JZ	short RegenDead		; no, just fail the operation
 12905                                  RegenFail:
 12906                                  	; 17/05/2019 - Retro DOS v4.0
 12907                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12908 00001A62 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12909                                  
 12910                                  	;cmp	ah,10h
 12911 00001A66 80FC10                  	cmp	AH,FCB_CLOSE
 12912 00001A69 7403                    	jz	short RegenDead
 12913 00001A6B E88B01                  	call	FCBHardErr		; massive hard error.
 12914                                  RegenDead:
 12915 00001A6E F9                      	STC				; carry set
 12916                                  FCBRegen_retn:
 12917 00001A6F C3                      	retn
 12918                                  
 12919                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12920                                  	; so fail the operation.
 12921                                  
 12922                                  RegenNoSharing:
 12923 00001A70 E84358                  	call	CheckShare		; Sharing around?
 12924 00001A73 75ED                    	JNZ	short RegenFail
 12925                                  	
 12926                                  	; Find an SFT for this guy.
 12927                                  	
 12928                                  	; 17/05/2019 - Retro DOS v4.0
 12929                                  
 12930                                  	; MSDOS 3.3
 12931                                  	;call	LRUFCB
 12932                                  	;jc	short FCBRegen_retn
 12933                                  	
 12934                                  	; MSDOS 6.0
 12935 00001A75 50                      	push	ax
 12936 00001A76 B000                    	mov	al,0			;indicate it is a regen operation
 12937 00001A78 E8E6FE                  	call	LRUFCB
 12938 00001A7B 58                      	pop	ax
 12939 00001A7C 72F1                    	jc	short FCBRegen_retn
 12940                                  
 12941                                  	;mov	word [es:di+2],8002h
 12942 00001A7E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12943 00001A84 243F                    	AND	AL,3Fh			; get drive number for flags
 12944 00001A86 98                      	CBW
 12945                                  	;or	ax,4000h
 12946 00001A87 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12947                                  
 12948                                  	; The bits field consists of the upper two bits (dirty and device) 
 12949                                  	; from the SFT and the low 4 bits from the open mode.
 12950                                  
 12951                                  	;mov	cl,[si+1Ah]
 12952 00001A8A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12953 00001A8D 88CD                    	MOV	CH,CL
 12954 00001A8F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12955 00001A92 08E8                    	OR	AL,CH
 12956                                  	;and	cl,0Fh
 12957 00001A94 80E10F                  	AND	CL,access_mask		; get the mode bits
 12958                                  	;mov	[es:di+2],cl
 12959 00001A97 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12960                                  	;mov	[es:di+5],ax
 12961 00001A9B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12962                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12963 00001A9F 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12964                                  	;mov	[es:di+31h],ax
 12965 00001AA3 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12966 00001AA7 1E                      	push	ds
 12967 00001AA8 56                      	push	si
 12968 00001AA9 06                      	push	es
 12969 00001AAA 57                      	push	di
 12970 00001AAB 16                      	push	ss
 12971 00001AAC 07                      	pop	es
 12972 00001AAD BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12973                                  
 12974 00001AB0 B90800                  	MOV	CX,8
 12975 00001AB3 46                      	INC	SI			; Skip past drive byte to name in FCB
 12976                                  
 12977                                  	; MSDOS 3.3
 12978                                  ;RegenCopyName:
 12979                                  	;lodsb
 12980                                  	;call	UCase
 12981                                  	;stosb
 12982                                  	;loop	RegenCopyName
 12983                                  
 12984                                  	; MSDOS 6.0
 12985 00001AB4 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12986                                  
 12987 00001AB7 16                      	push	ss	; SS is DOSDATA
 12988 00001AB8 1F                      	pop	ds
 12989                                  
 12990                                  	;mov	byte [ATTRIB],16h
 12991 00001AB9 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12992                                  					; Must set this to something interesting
 12993                                  					; to call DEVNAME.
 12994 00001ABE E89126                  	call	DEVNAME 		; check for device
 12995 00001AC1 5E                      	pop	si
 12996 00001AC2 07                      	pop	es
 12997 00001AC3 5E                      	pop	si
 12998 00001AC4 1F                      	pop	ds
 12999 00001AC5 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13000                                  
 13001                                  	; Device found. We can ignore disk-specific info
 13002                                  
 13003                                  	;mov	[es:di+5],bh
 13004 00001AC7 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13005                                  	;mov	byte [es:di+4],0
 13006 00001ACB 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13007                                  					; SS override
 13008                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13009 00001AD0 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13010                                  	;mov	[es:di+7],si
 13011 00001AD5 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13012                                  	;mov	[es:di+9],ds
 13013 00001AD9 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13014 00001ADD C3                      	retn				; carry is clear
 13015                                  
 13016                                  RegenDeadJ:
 13017 00001ADE EB8E                    	JMP	short RegenDead
 13018                                  
 13019                                  	; File found. Just copy in the remaining pieces.
 13020                                  
 13021                                  RegenFileNoSharing:
 13022                                  	;mov	ax,[es:di+5]
 13023 00001AE0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13024 00001AE4 83E03F                  	AND	AX,03Fh
 13025 00001AE7 1E                      	push	ds
 13026 00001AE8 56                      	push	si
 13027 00001AE9 E8574E                  	call	FIND_DPB
 13028                                  	;mov	[es:di+7],si
 13029 00001AEC 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13030                                  	;mov	[es:di+9],ds
 13031 00001AF0 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13032 00001AF4 5E                      	pop	si
 13033 00001AF5 1F                      	pop	ds
 13034 00001AF6 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13035                                  					; indicator was bogus
 13036                                  	;mov	ax,[si+1Dh]
 13037 00001AF8 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13038                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13039                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13040 00001AFB 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13041                                  
 13042                                  	; MSDOS 6.0
 13043                                  
 13044                                  	; SR;
 13045                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13046                                  	; number
 13047                                  
 13048                                  	;mov	al,[si+18h]
 13049 00001AFF 8A4418                  	mov	al,[si+fcb_sfn]
 13050 00001B02 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13051 00001B04 88C4                    	mov	ah,al
 13052 00001B06 D0C4                    	rol	ah,1
 13053 00001B08 D0E8                    	shr	al,1
 13054 00001B0A 08E0                    	or	al,ah
 13055 00001B0C 243F                    	and	al,03Fh		;mask off unused bits
 13056                                  	;mov	[es:di+4],al
 13057 00001B0E 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13058                                  
 13059                                  	; SR;
 13060                                  	; Update the higher word of the directory sector from the FCB
 13061                                  
 13062                                  	;;mov	al,[si+18h]
 13063 00001B12 8A4418                  	mov	al,[si+fcb_sfn]
 13064 00001B15 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13065 00001B17 28E4                    	sub	ah,ah
 13066                                  	;mov	[es:di+1Dh],ax
 13067 00001B19 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13068                                  
 13069                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13070                                  	;mov	ax,[si+1Bh]
 13071 00001B1D 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13072                                  	;mov	[es:di+0Bh],ax
 13073 00001B20 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13074                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13075                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13076 00001B24 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13077                                  	;mov	al,[si+1Fh]
 13078 00001B28 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13079                                  	;mov  	[es:di+1Fh],al
 13080 00001B2B 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13081                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13082 00001B2F 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13083                                  					; Existing FCB entries would be
 13084                                  					; flushed unnecessarily because of
 13085                                  					; check in CheckFCB of the ref_count.
 13086                                  					; July 22/85 - BAS
 13087                                  	;lea	si,[si+1]
 13088 00001B32 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13089                                  	;lea	di,[di+20h]
 13090 00001B35 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13091                                  	;mov	cx,11
 13092 00001B38 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13093                                  	
 13094                                  	; MSDOS 6.0
 13095 00001B3B E807FF                  	call	RegenCopyName	;copy name to SFT 
 13096                                  	
 13097                                  	; MSDOS 3.3
 13098                                  ;RegenCopyName2:
 13099                                  	;lodsb
 13100                                  	;call    UCase
 13101                                  	;stosb
 13102                                  	;loop    RegenCopyName2
 13103                                  
 13104 00001B3E F8                      	clc
 13105 00001B3F C3                      	retn
 13106                                  
 13107                                  ; 17/05/2019 - Retro DOS v4.0
 13108                                  
 13109                                  ;**	BlastSFT - FIll SFT with Garbage
 13110                                  ; --------------------------------------------------------------------------
 13111                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13112                                  ;	various garbage values to put into the SFT.  I don't know why,
 13113                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13114                                  ;	necessary to show that the SFT is free after filling it.
 13115                                  ;
 13116                                  ;	ENTRY	(es:di) = address of SFT
 13117                                  ;		(al) = fill character
 13118                                  ;	EXIT	(ax) = -1
 13119                                  ;		'C' clear
 13120                                  ;	USES	AX, CX, Flags
 13121                                  
 13122                                  BlastSFT:
 13123 00001B40 57                      	push	di
 13124                                  	;mov	cx,53 ; MSDOS 3.3
 13125                                  	;mov	cx,59 ; MSDOS 6.0
 13126 00001B41 B93B00                  	mov	cx,SF_ENTRY.size
 13127 00001B44 F3AA                    	rep	stosb
 13128 00001B46 5F                      	pop	di
 13129 00001B47 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13130 00001B49 268905                  	mov	[es:di],ax
 13131                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13132                                  	;mov	[es:di+15h],ax
 13133 00001B4C 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13134 00001B50 48                      	dec	ax	; -1					    ;
 13135                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13136 00001B51 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13137                                  BlastSFT_retn:
 13138 00001B55 C3                      	retn				; return with 'C' clear     ;
 13139                                  
 13140                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13141                                  ; --------------------------------------------------------------------------
 13142                                  ;
 13143                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13144                                  ;   regenerated.
 13145                                  ;
 13146                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13147                                  ;		AL is SFT index
 13148                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13149                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13150                                  ;   Registers modified: AX and BX
 13151                                  ;
 13152                                  ; --------------------------------------------------------------------------
 13153                                  
 13154                                  	; 21/01/2024
 13155                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13156                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13157                                  CheckFCB:
 13158                                  		
 13159                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13160                                  
 13161                                  	; MSDOS 3.3
 13162                                  
 13163                                  	; LES	DI,[CS:SFTFCB]
 13164                                  
 13165                                  	; MSDOS 6.0
 13166                                  	
 13167                                  	; SR;
 13168                                  	; We check if the given FCB is for a local file. If so, we return a 
 13169                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13170                                  
 13171                                  	;test	byte [si+19h],0C0h
 13172 00001B56 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13173 00001B5A 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13174 00001B5C 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13175                                  
 13176                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13177                                  	;cmp	[es:di+4],al
 13178 00001B61 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13179 00001B65 723C                    	JC	short BadSFT
 13180                                  	;;mov	bl,53 ; MSDOS 3.3
 13181                                  	;mov	bl,59 ; MSDOS 6.0
 13182 00001B67 B33B                    	MOV	BL,SF_ENTRY.size
 13183 00001B69 F6E3                    	MUL	BL
 13184                                  	;lea	di,[di+6]
 13185 00001B6B 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13186 00001B6E 01C7                    	ADD	DI,AX
 13187                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13188 00001B70 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13189                                  	;cmp	[es:di+31h],ax
 13190 00001B74 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13191 00001B78 7529                    	JNZ	short BadSFT		; must match process
 13192 00001B7A 26833D00                	cmp	word [es:di],0
 13193                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13194 00001B7E 7423                    	JZ	short BadSFT		; must also be in use
 13195                                  	;mov	al,[si+19h]
 13196 00001B80 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13197                                  	;test	al,80h
 13198 00001B83 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13199 00001B85 7428                    	JZ	short CheckNoShare	; No. try local or device
 13200                                  
 13201                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13202                                  	; FCBSHARE is a superset of FCBNETWORK.
 13203                                  
 13204 00001B87 50                      	PUSH	AX
 13205                                  	;and	al,0C0h
 13206 00001B88 24C0                    	AND	AL,FCBMASK
 13207                                  	;cmp	al,0C0h
 13208 00001B8A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13209 00001B8C 58                      	POP	AX
 13210 00001B8D 7516                    	JNZ	short CheckNet		; yes
 13211                                  ;
 13212                                  ;----- In share support -----
 13213                                  ;
 13214                                  	;call	far [cs:JShare+(11*4)]
 13215 00001B8F 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13216 00001B94 720D                    	JC	short BadSFT
 13217                                  
 13218                                  ; 21/01/2024
 13219                                  %if 0
 13220                                  	JMP	SHORT CheckD
 13221                                  ;
 13222                                  ;----- End in share support -----
 13223                                  ;
 13224                                  	; 09/11/2022
 13225                                  	; (There is not any procedure/sub
 13226                                  	;  which calls or jumps to CheckFirClus here)
 13227                                  	;;;
 13228                                  CheckFirClus:
 13229                                  	;cmp     bx,[es:di+0Bh]
 13230                                  	; 07/12/2022
 13231                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13232                                  	JNZ	short BadSFT
 13233                                  	;;;
 13234                                  %endif
 13235                                  
 13236                                  CheckD: 
 13237 00001B96 243F                    	AND	AL,3Fh
 13238                                  	;mov	ah,[es:di+5]
 13239 00001B98 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13240 00001B9C 80E43F                  	AND	AH,3Fh
 13241 00001B9F 38C4                    	CMP	AH,AL
 13242                                  	; 16/12/2022
 13243 00001BA1 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13244                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13245                                  	;jnz	short BadSFT
 13246                                  ;CheckD_retn:
 13247                                  	;retn
 13248                                  BadSFT: 
 13249 00001BA3 F9                      	STC
 13250 00001BA4 C3                      	retn
 13251                                  				
 13252                                  CheckNet:
 13253                                  	; 17/05/2019 - Retro DOS v4.0
 13254                                  	
 13255                                  ;----- In net support -----
 13256                                  
 13257                                  	; MSDOS 3.3
 13258                                  	;;mov	ax,[si+1Ah]
 13259                                  	;mov	ax,[si+fcb_net_handle]
 13260                                  	;;cmp	ax,[es:di+1Dh]
 13261                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13262                                  	;jnz	short BadSFT
 13263                                  	;;cmp	ax,[es:di+19h]
 13264                                  	;cmp	ax,[ES:DI+sf_netid]
 13265                                  	;jnz     short BadSFT
 13266                                  	;;mov	ax,[si+1Eh]
 13267                                  	;mov	ax,[si+fcb_l_attr]
 13268                                  	;;cmp	ax,[es:di+1Bh]
 13269                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13270                                  	;jnz     short BadSFT
 13271                                  
 13272                                  	; MSDOS 6.0
 13273                                  	;mov	ax,[si+1Ch]
 13274 00001BA5 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13275                                  	; 09/11/2022
 13276                                  	;cmp	ax,[es:di+0Bh] 
 13277 00001BA8 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13278 00001BAC 75F5                    	JNZ	short BadSFT
 13279                                  
 13280                                  ;----- END In net support -----
 13281                                  
 13282                                  CheckNet_retn:
 13283 00001BAE C3                      	retn
 13284                                  
 13285                                  CheckNoShare:
 13286                                  
 13287                                  ; 16/12/2022
 13288                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13289                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13290                                  ;	;test	al,40h
 13291                                  ;	test	AL,FCBDEVICE		; Device?
 13292                                  ;	;jnz	short $+2 ; 09/11/2022
 13293                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13294                                  
 13295                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13296                                  	;;mov	bx,[si+1Dh]
 13297                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13298                                  	;;cmp	bx,[es:di+1Dh]
 13299                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13300                                  	;jnz	short BadSFT
 13301                                  	;;mov	bl,[si+1Fh]
 13302                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13303                                  	;;cmp	bl,[es:di+1Fh]
 13304                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13305                                  	;jnz	short BadSFT
 13306                                  	;;mov	bl,[si+1Ah]
 13307                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13308                                  	;;mov	bh,[es:di+5]
 13309                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13310                                  	;xor	bh,bl
 13311                                  	;and	bh,0C0h
 13312                                  	;jnz	short BadSFT
 13313                                  	;;xor	bl,[es:di+2]
 13314                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13315                                  	;and	bl,0Fh
 13316                                  	;jnz	short BadSFT
 13317                                  	;push	di
 13318                                  	;push	si
 13319                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13320                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13321                                  	;;lea	si,[si+1]
 13322                                  	;LEA	SI,[SI+SYS_FCB.name]
 13323                                  	;;mov	cx,11
 13324                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13325                                  	;repe	cmpsb
 13326                                  	;pop	si
 13327                                  	;pop	di
 13328                                  	;jnz	short BadSFT
 13329                                  	;;mov	bx,[si+1Bh]
 13330                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13331                                  	;jmp	short CheckFirClus
 13332                                  
 13333                                  	; MSDOS 6.0
 13334                                  
 13335                                  	; SR;
 13336                                  	; The code below to match a local FCB with its SFT can no longer be
 13337                                  	; used. We just return a no-match status. This check is done right
 13338                                  	; at the top.
 13339                                  
 13340                                  CheckNoShareDev:
 13341                                  	;mov	bx,[si+1Ah]
 13342 00001BAF 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13343                                  	;cmp	bx,[es:di+7]
 13344 00001BB2 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13345 00001BB6 75EB                    	JNZ	short BadSFT
 13346                                  	;mov	bx,[si+1Ch]
 13347 00001BB8 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13348                                  	;cmp	bx,[es:di+9]
 13349 00001BBB 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13350 00001BBF 75E2                    	JNZ	short BadSFT
 13351 00001BC1 EBD3                    	JMP	short CheckD
 13352                                  
 13353                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13354                                  ;----------------------------------------------------------------------------
 13355                                  ;
 13356                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13357                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13358                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13359                                  ;	with PID
 13360                                  ;
 13361                                  ;   Inputs:	DS:SI point to FCB
 13362                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13363                                  ;		Carry clear -> OK ES:DI -> SFT
 13364                                  ;		Carry set -> error in ax
 13365                                  ;   Registers modified: ES,DI, AX
 13366                                  ;
 13367                                  ;----------------------------------------------------------------------------
 13368                                  
 13369                                  SFTFromFCB:
 13370                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13371                                  
 13372                                  	; 17/05/2019 - Retro DOS v4.0
 13373                                  
 13374 00001BC3 50                      	push	ax
 13375 00001BC4 53                      	push	bx
 13376                                  	;mov	al,[si+18h]
 13377 00001BC5 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13378 00001BC8 E88BFF                  	call	CheckFCB
 13379 00001BCB 5B                      	pop	bx
 13380 00001BCC 58                      	pop	ax
 13381                                  	;MOV	[CS:THISSFT],DI		; SS override
 13382                                  	;MOV	[CS:THISSFT+2],ES
 13383 00001BCD 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13384 00001BD2 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13385 00001BD7 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13386                                  	
 13387                                  	; 09/11/2022 (MSDOS 5.0)
 13388                                  	; 31/05/2019
 13389 00001BD9 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13390 00001BDA E885E8                  	call	save_world
 13391 00001BDD E86DFE                  	call	FCBRegen
 13392 00001BE0 E868E8                  	call	restore_world		; use macro restore world
 13393 00001BE3 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13394                                  
 13395                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13396 00001BE4 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13397 00001BE8 72C4                    	jc	short CheckNet_retn
 13398                                  
 13399                                  Set_SFT: 
 13400                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13401 00001BEA 36C43E[9E05]            	les	di,[ss:THISSFT]
 13402                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13403 00001BEF 36FF36[3C03]            	push	word [ss:PROC_ID]
 13404                                  	;pop	word [es:di+31h]
 13405 00001BF4 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13406 00001BF8 C3                      	retn				; carry is clear
 13407                                  
 13408                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13409                                  ;----------------------------------------------------------------------------
 13410                                  ;
 13411                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13412                                  ;	unavailable FCB.
 13413                                  ;
 13414                                  ;   Inputs:	none.
 13415                                  ;   Outputs:	none.
 13416                                  ;   Registers modified: all
 13417                                  ;
 13418                                  ;----------------------------------------------------------------------------
 13419                                  
 13420                                  FCBHardErr:
 13421                                  	; 17/05/2019 - Retro DOS v4.0
 13422 00001BF9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13423                                  	;
 13424                                  	;mov	ax,23h
 13425 00001BFE B82300                  	MOV	AX,error_FCB_unavailable
 13426                                  	;;mov	byte [cs:ALLOWED],8
 13427                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13428 00001C01 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13429                                  	
 13430                                  	;LES	BP,[CS:THISDPB]
 13431 00001C07 26C42E[8A05]            	les	bp,[es:THISDPB]
 13432                                  	
 13433 00001C0C BF0100                  	MOV	DI,1			; Fake some registers
 13434 00001C0F 89F9                    	MOV	CX,DI
 13435                                  	;mov	dx,[es:bp+0Bh]
 13436 00001C11 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13437 00001C15 E86A36                  	call	HARDERR
 13438 00001C18 F9                      	STC
 13439 00001C19 C3                      	retn
 13440                                  
 13441                                  ;============================================================================
 13442                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13443                                  ;============================================================================
 13444                                  ; 21/07/2018 - Retro DOS v3.0
 13445                                  ; 17/05/2019 - Retro DOS v4.0
 13446                                  
 13447                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13448                                  ;
 13449                                  ;	GetRR
 13450                                  ;	GetExtent
 13451                                  ;	SetExtent
 13452                                  ;	GetExtended
 13453                                  ;	GetRecSize
 13454                                  ;	FCBIO
 13455                                  ;	$FCB_OPEN
 13456                                  ;	$FCB_CREATE
 13457                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13458                                  ;	$FCB_RANDOM_READ_BLOCK
 13459                                  ;	$FCB_SEQ_READ
 13460                                  ;	$FCB_SEQ_WRITE
 13461                                  ;	$FCB_RANDOM_READ
 13462                                  ;	$FCB_RANDOM_WRITE
 13463                                  ;
 13464                                  ;	Revision history:
 13465                                  ;
 13466                                  ;		Created: ARR 4 April 1983
 13467                                  ;			 MZ  6 June  1983 completion of functions
 13468                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13469                                  ;				  times.  Change so successive closes work by
 13470                                  ;				  always returning OK.	Also, detect I/O to
 13471                                  ;				  already closed FCB and return EOF.
 13472                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13473                                  ;				  out of sft into FCB for reconnection
 13474                                  ;
 13475                                  ;	    A000   version 4.00	Jan. 1988
 13476                                  
 13477                                  ; Defintions for FCBOp flags
 13478                                  
 13479                                  RANDOM	equ 2				; random operation
 13480                                  FCBREAD equ 4				; doing a read
 13481                                  BLOCK	equ 8				; doing a block I/O
 13482                                  
 13483                                  ;Break <GetRR - return the random record field in DX:AX>
 13484                                  ;---------------------------------------------------------------------------
 13485                                  ;
 13486                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13487                                  ;	from the FCB pointed to by DS:SI
 13488                                  ;
 13489                                  ;   Inputs:	DS:SI point to an FCB
 13490                                  ;		BX has record size
 13491                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13492                                  ;   Registers modified: none
 13493                                  ;---------------------------------------------------------------------------
 13494                                  
 13495                                  GetRR:
 13496                                  	;mov	ax,[si+21h]
 13497 00001C1A 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13498                                  	;mov	dx,[si+23h]
 13499 00001C1D 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13500 00001C20 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13501 00001C23 7202                    	JB	short GetRRBye
 13502                                  GetExtent_bye:	; 21/01/2024
 13503 00001C25 30F6                    	XOR	DH,DH
 13504                                  GetRRBye:
 13505 00001C27 C3                      	retn
 13506                                  
 13507                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13508                                  ;---------------------------------------------------------------------------
 13509                                  ;
 13510                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13511                                  ;	NR fields in the FCB.
 13512                                  ;
 13513                                  ;   Inputs:	DS:SI - point to FCB
 13514                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13515                                  ;   Registers modified: none
 13516                                  ;---------------------------------------------------------------------------
 13517                                  
 13518                                  GetExtent:
 13519                                  	;mov	al,[si+20h]
 13520 00001C28 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13521                                  	;mov	dx,[si+0Ch]
 13522 00001C2B 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13523 00001C2E D0E0                    	SHL	AL,1
 13524 00001C30 D1EA                    	SHR	DX,1
 13525 00001C32 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13526 00001C34 88D4                    	MOV	AH,DL
 13527 00001C36 88F2                    	MOV	DL,DH
 13528                                  	; 21/01/2024
 13529                                  	;XOR	DH,DH
 13530                                  	;retn
 13531 00001C38 EBEB                    	jmp	short GetExtent_bye
 13532                                  
 13533                                  ;Break <SetExtent - update the extent/NR field>
 13534                                  ;---------------------------------------------------------------------------
 13535                                  ;
 13536                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13537                                  ;	fields
 13538                                  ;
 13539                                  ;   Inputs:	DS:SI point to FCB
 13540                                  ;		DX:AX is a record location in file
 13541                                  ;   Outputs:	Extent/NR fields are filled in
 13542                                  ;   Registers modified: CX
 13543                                  ;---------------------------------------------------------------------------
 13544                                  
 13545                                  SetExtent:
 13546 00001C3A 50                      	push	ax
 13547 00001C3B 52                      	push	dx
 13548 00001C3C 89C1                    	MOV	CX,AX
 13549 00001C3E 247F                    	AND	AL,7FH			; next rec field
 13550                                  	;mov	[si+20h],al
 13551 00001C40 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13552 00001C43 80E180                  	AND	CL,80H			; save upper bit
 13553 00001C46 D1E1                    	SHL	CX,1
 13554 00001C48 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13555 00001C4A 88E8                    	MOV	AL,CH
 13556 00001C4C 88D4                    	MOV	AH,DL
 13557                                  	;mov	[si+0Ch], ax
 13558 00001C4E 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13559 00001C51 5A                      	pop	dx
 13560 00001C52 58                      	pop	ax
 13561 00001C53 C3                      	retn
 13562                                  
 13563                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13564                                  ;---------------------------------------------------------------------------
 13565                                  ;
 13566                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13567                                  ;
 13568                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13569                                  ;   Outputs:	DS:SI point to the FCB part
 13570                                  ;		zeroflag set if not extended fcb
 13571                                  ;   Registers modified: SI
 13572                                  ;---------------------------------------------------------------------------
 13573                                  
 13574                                  GetExtended:
 13575 00001C54 89D6                    	MOV	SI,DX			; point to Something
 13576 00001C56 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13577 00001C59 7503                    	JNZ	short GetBye		; not there
 13578 00001C5B 83C607                  	ADD	SI,7			; point to FCB
 13579                                  GetBye:
 13580 00001C5E 39D6                    	CMP	SI,DX			; set condition codes
 13581                                  getextd_retn:
 13582 00001C60 C3                      	retn
 13583                                  
 13584                                  ;Break <GetRecSize - return in BX the FCB record size>
 13585                                  ;---------------------------------------------------------------------------
 13586                                  ;
 13587                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13588                                  ;
 13589                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13590                                  ;   Outputs:	BX contains the record size
 13591                                  ;   Registers modified: None
 13592                                  ;---------------------------------------------------------------------------
 13593                                  
 13594                                  	; 22/01/2024
 13595                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13596                                  GetRecSize:
 13597                                  	;mov	bx,[si+0Eh]
 13598 00001C61 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13599 00001C64 09DB                    	OR	BX,BX			; is it nul?
 13600                                  	;jz	short getextd_retn
 13601                                  	; 22/01/2024 (BugFix)
 13602 00001C66 75F8                    	jnz	short getextd_retn
 13603                                  	;MOV	BX,128			; use default size
 13604 00001C68 B380                    	mov	bl,128
 13605                                  	;mov	[si+0Eh],bx
 13606 00001C6A 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13607 00001C6D C3                      	retn
 13608                                  ; 23/01/2024 - Retro DOS v5.0
 13609                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13610                                  ; 23/01/2024 - Retro DOS v4.2
 13611                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13612                                  ; 23/01/2024 - Retro DOS v4.1
 13613                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13614                                  
 13615                                  ; 22/07/2018 - Retro DOS v3.0
 13616                                  
 13617                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13618                                  ;----------------------------------------------------------------------------
 13619                                  ;
 13620                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13621                                  ;	and write a number of blocks from it.
 13622                                  ;
 13623                                  ;   Inputs:	DS:DX point to an FCB
 13624                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13625                                  ;		AL <> 0 Not enough room on disk for the output
 13626                                  ;
 13627                                  ;----------------------------------------------------------------------------
 13628                                  
 13629                                  _$FCB_RANDOM_WRITE_BLOCK:
 13630                                  	;mov	AL,0Ah
 13631 00001C6E B00A                    	MOV	AL,RANDOM+BLOCK
 13632 00001C70 EB12                    	JMP	short FCBIO	; 23/01/2024
 13633                                  
 13634                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13635                                  ;----------------------------------------------------------------------------
 13636                                  ;
 13637                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13638                                  ;	and read a number of blocks from it.
 13639                                  ;
 13640                                  ;   Inputs:	DS:DX point to an FCB
 13641                                  ;   Outputs:	AL = error codes defined above
 13642                                  ;
 13643                                  ;----------------------------------------------------------------------------
 13644                                  
 13645                                  _$FCB_RANDOM_READ_BLOCK:
 13646                                  	;mov	AL,0Eh
 13647 00001C72 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13648 00001C74 EB0E                    	JMP	short FCBIO	; 23/01/2024
 13649                                  
 13650                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13651                                  ;----------------------------------------------------------------------------
 13652                                  ;
 13653                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13654                                  ;	memory
 13655                                  ;
 13656                                  ;   Inputs:	DS:DX point to an FCB
 13657                                  ;   Outputs:	AL = error codes defined above
 13658                                  ;
 13659                                  ;----------------------------------------------------------------------------
 13660                                  
 13661                                  _$FCB_SEQ_READ:
 13662                                  	;mov	AL,4
 13663 00001C76 B004                    	MOV	AL,FCBREAD
 13664 00001C78 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13665                                  
 13666                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13667                                  ;----------------------------------------------------------------------------
 13668                                  ;
 13669                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13670                                  ;	file
 13671                                  ;
 13672                                  ;   Inputs:	DS:DX point to an FCB
 13673                                  ;   Outputs:	AL = error codes defined above
 13674                                  ;
 13675                                  ;----------------------------------------------------------------------------
 13676                                  
 13677                                  _$FCB_SEQ_WRITE:
 13678 00001C7A B000                    	MOV	AL,0
 13679 00001C7C EB06                    	JMP	short FCBIO	; 23/01/2024
 13680                                  
 13681                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13682                                  ;----------------------------------------------------------------------------
 13683                                  ;
 13684                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13685                                  ;	record from it.
 13686                                  ;
 13687                                  ;   Inputs:	DS:DX point to an FCB
 13688                                  ;   Outputs:	AL = error codes defined above
 13689                                  ;
 13690                                  ;----------------------------------------------------------------------------
 13691                                  
 13692                                  _$FCB_RANDOM_READ:
 13693                                  	;mov	AL,6
 13694 00001C7E B006                    	MOV	AL,RANDOM+FCBREAD
 13695                                  	; 23/01/2024
 13696                                  	;jmp	FCBIO 		; single block
 13697 00001C80 EB02                    	jmp	short FCBIO
 13698                                  
 13699                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13700                                  ;----------------------------------------------------------------------------
 13701                                  ;
 13702                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13703                                  ;	a record to it.
 13704                                  ;
 13705                                  ;   Inputs:	DS:DX point to an FCB
 13706                                  ;   Outputs:	AL = error codes defined above
 13707                                  ;
 13708                                  ;----------------------------------------------------------------------------
 13709                                  
 13710                                  _$FCB_RANDOM_WRITE:
 13711                                  	;mov	AL,2
 13712 00001C82 B002                    	MOV	AL,RANDOM
 13713                                  	; 23/01/2024
 13714                                  	;;jmp	FCBIO
 13715                                  	;jmp	short FCBIO
 13716                                  
 13717                                  ;BREAK <FCBIO - do internal FCB I/O>
 13718                                  ;---------------------------------------------------------------------------
 13719                                  ;
 13720                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13721                                  ;
 13722                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13723                                  ;		DS:DX point to FCB
 13724                                  ;		CX may have count of number of records to xfer
 13725                                  ;   Outputs:	AL has error code
 13726                                  ;   Registers modified: all
 13727                                  ;---------------------------------------------------------------------------
 13728                                  
 13729                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13730                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13731                                  
 13732                                  	; 23/01/2024
 13733                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13734                                  
 13735                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13736                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13737                                  
 13738                                  FCBIO:
 13739                                  
 13740                                  FEOF	EQU	1
 13741                                  FTRIM	EQU	2
 13742                                  
 13743                                  %define	FCBErr	byte [bp-1]  ; byte
 13744                                  %define	cRec	word [bp-3]  ; word
 13745                                  ;%define RecPos	word [bp-7]  ; dword
 13746                                  %define RecPosL	word [bp-7]  ; word
 13747                                  %define RecPosH	word [bp-5]  ; word
 13748                                  %define	RecSize	word [bp-9]  ; word
 13749                                  ;%define bPos	word [bp-13] ; dword
 13750                                  %define bPosL	word [bp-13] ; word
 13751                                  %define bPosH	word [bp-11] ; word
 13752                                  %define cByte	word [bp-15] ; word
 13753                                  %define cResult word [bp-17] ; word
 13754                                  %define	cRecRes	word [bp-19] ; word
 13755                                  %define	FCBOp	byte [bp-20] ; byte
 13756                                  ; 23/01/2024
 13757                                  %define bPos bp-13
 13758                                  
 13759                                  	;Enter
 13760                                  
 13761 00001C84 55                      	push	bp
 13762 00001C85 89E5                    	mov	bp,sp
 13763 00001C87 83EC14                  	sub	sp,20
 13764                                  	;mov	[bp-20],al
 13765 00001C8A 8846EC                  	MOV	FCBOp,AL
 13766                                  	;mov	byte [bp-1],0
 13767 00001C8D C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13768 00001C91 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13769                                  	;test	byte [bp-20],8
 13770 00001C94 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13771 00001C98 7503                    	JNZ	short GetPos
 13772 00001C9A B90100                  	MOV	CX,1			;	cRec = 1;
 13773                                  GetPos:
 13774                                  	;mov	[bp-3],cx
 13775 00001C9D 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13776 00001CA0 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13777 00001CA3 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13778                                  	;mov	[bp-9],bx
 13779 00001CA6 895EF7                  	MOV	RecSize,BX
 13780                                  	;test	byte [bp-20],2
 13781 00001CA9 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13782 00001CAD 7403                    	JZ	short GetRec
 13783 00001CAF E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13784                                  GetRec:
 13785                                  	;mov	[bp-7],ax
 13786 00001CB2 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13787                                  	;mov	[bp-5],dx
 13788 00001CB5 8956FB                  	MOV	RecPosH,DX
 13789 00001CB8 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13790                                  	;mov	ax,[bp-5]
 13791 00001CBB 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13792 00001CBE F7E3                    	MUL	BX
 13793 00001CC0 89C7                    	MOV	DI,AX
 13794                                  	;mov	ax,[bp-7]
 13795 00001CC2 8B46F9                  	MOV	AX,RecPosL
 13796 00001CC5 F7E3                    	MUL	BX
 13797 00001CC7 01FA                    	ADD	DX,DI
 13798                                  	;mov	[bp-13],ax
 13799 00001CC9 8946F3                  	MOV	bPosL,AX
 13800                                  	;mov	[bp-11],dx
 13801 00001CCC 8956F5                  	MOV	bPosH,DX
 13802                                  	;mov	ax,[bp-3]
 13803 00001CCF 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13804 00001CD2 F7E3                    	MUL	BX
 13805                                  	;mov	[bp-15],ax
 13806 00001CD4 8946F1                  	MOV	cByte,AX
 13807                                  
 13808                                  ;hkn; 	SS override
 13809 00001CD7 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13810 00001CDC 83D200                  	ADC	DX,0
 13811 00001CDF 7419                    	JZ	short DoOper
 13812                                  	;mov	byte [bp-1],2
 13813 00001CE1 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13814                                  
 13815                                  ;hkn; 	SS override
 13816 00001CE5 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13817 00001CE9 F7D8                    	NEG	AX
 13818 00001CEB 7501                    	JNZ	short DoDiv
 13819 00001CED 48                      	DEC	AX
 13820                                  DoDiv:
 13821 00001CEE 31D2                    	XOR	DX,DX
 13822 00001CF0 F7F3                    	DIV	BX
 13823                                  	;mov	[bp-3],ax
 13824 00001CF2 8946FD                  	MOV	cRec,AX
 13825 00001CF5 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13826                                  	;mov	[bp-15],ax
 13827 00001CF7 8946F1                  	MOV	cByte,AX		;	}
 13828                                  DoOper:
 13829 00001CFA 31DB                    	XOR	BX,BX
 13830                                  	;mov	[bp-17],bx
 13831 00001CFC 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13832                                  	;cmp	[bp-15],bx
 13833 00001CFF 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13834 00001D02 7506                    	JNZ	short DoGetExt
 13835                                  	;test	byte [bp-1],2
 13836 00001D04 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13837                                  	;JZ	short DoGetExt
 13838                                  	;JMP	short SkipOp
 13839                                  	; 16/12/2022
 13840 00001D08 7572                    	jnz	short SkipOp
 13841                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13842                                  	;JZ	short DoGetExt
 13843                                  	;JMP	short SkipOp
 13844                                  DoGetExt:
 13845 00001D0A E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13846 00001D0D 730F                    	JNC	short ContinueOp
 13847                                  FCBDeath:
 13848 00001D0F E844E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13849                                  	;mov	word [bp-19],0
 13850 00001D12 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13851                                  	;mov	byte [bp-1],1
 13852 00001D17 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13853 00001D1B E9EB00                  	JMP	FCBSave 		; bam!
 13854                                  ContinueOp:
 13855                                  	; 23/01/2024
 13856                                  	; (PCDOS 7.1 IBMDOS.COM)
 13857                                  	;
 13858                                  	;;mov	ax,[si+10h]
 13859                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13860                                  	;;mov	[es:di+11h],ax
 13861                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13862                                  	;;mov	ax,[si+12h]
 13863                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13864                                  	;;mov	[es:di+13h],ax
 13865                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13866                                  	;;;
 13867 00001D1E 1E                      	push	ds
 13868 00001D1F C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13869 00001D22 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13870 00001D26 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13871 00001D2A C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13872 00001D2D 8CDA                    	mov	dx,ds
 13873 00001D2F 1F                      	pop	ds
 13874                                  	;;;
 13875                                  	;;mov	ax,[bp-13]
 13876                                  	;MOV	AX,bPosL
 13877                                  	;;mov	dx,[bp-11]
 13878                                  	;MOV	DX,bPosH
 13879                                  
 13880                                  	;mov	[es:di+15h],ax
 13881 00001D30 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13882                                  	;xchg	dx,[es:di+17h]
 13883 00001D34 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13884 00001D38 52                      	PUSH	DX			; save away Open age.
 13885                                  	;mov	cx,[bp-15]
 13886 00001D39 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13887                                  
 13888                                  ;hkn; DOS_Read is in DOSCODE
 13889 00001D3C BF[5C32]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13890                                  	;test	byte [bp-20],4
 13891 00001D3F F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13892 00001D43 7503                    	JNZ	short DoContext
 13893                                  
 13894                                  ;hkn; DOS_Write is in DOSCODE
 13895 00001D45 BF[8534]                	MOV	DI,DOS_WRITE
 13896                                  DoContext:
 13897 00001D48 55                      	push	bp
 13898 00001D49 1E                      	push	ds
 13899 00001D4A 56                      	push	si
 13900                                  
 13901                                  ;hkn; SS is DOSDATA
 13902 00001D4B 16                      	push	ss
 13903 00001D4C 1F                      	pop	ds
 13904                                  
 13905                                  ;; Fix for disk full
 13906 00001D4D FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13907                                  	
 13908 00001D4F 5E                      	pop	si
 13909 00001D50 1F                      	pop	ds
 13910 00001D51 5D                      	pop	bp
 13911 00001D52 72BB                    	JC	short FCBDeath
 13912                                  	
 13913 00001D54 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13914 00001D5A 740A                    	JZ	short NODSKFULL
 13915 00001D5C 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13916                                  
 13917                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13918                                  	;mov	byte [bp-1],1 
 13919 00001D62 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13920                                  
 13921                                  	; 23/01/2024
 13922                                  	; (PCDOS 7.1 IBMDOS.COM)
 13923                                  	;;mov	byte [bp-1],1 
 13924                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13925                                  
 13926                                  NODSKFULL:
 13927                                  ;; Fix for disk full
 13928                                  	;mov	[bp-17],cx
 13929 00001D66 894EEF                  	MOV	cResult,CX
 13930 00001D69 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13931                                  	;pop	word [es:di+17h]	
 13932 00001D6C 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13933                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13934                                  
 13935                                  	; 23/01/2024
 13936                                  	; (PCDOS 7.1 IBMDOS.COM)
 13937                                  	;
 13938                                  	;;mov	ax,[es:di+11h]
 13939                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13940                                  	;;mov	[si+10h],ax
 13941                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13942                                  	;;mov	ax,[es:di+13h]
 13943                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13944                                  	;;mov	[si+12h],ax
 13945                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13946                                  	;;;
 13947 00001D70 06                      	push	es
 13948 00001D71 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13949 00001D75 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13950 00001D78 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13951 00001D7B 07                      	pop	es
 13952                                  	;;;
 13953                                  					;	}
 13954                                  SkipOp:
 13955                                  	;mov	ax,[bp-17]
 13956 00001D7C 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13957 00001D7F 31D2                    	XOR	DX,DX
 13958                                  	;div	word [bp-9]
 13959 00001D81 F776F7                  	DIV	RecSize
 13960                                  	;mov	[bp-19],ax
 13961 00001D84 8946ED                  	MOV	cRecRes,AX
 13962                                  	;add	[bp-7],ax
 13963 00001D87 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13964                                  	;adc	word [bp-5],0
 13965 00001D8A 8356FB00                	ADC	RecPosH,0
 13966                                  
 13967                                  ; If we have not gotten the expected number of records, we signal an EOF
 13968                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13969                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13970                                  ; do we.
 13971                                  
 13972                                  	;cmp	ax,[bp-3]
 13973 00001D8E 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13974 00001D91 7411                    	JZ	short TryBlank
 13975                                  	;test	byte [bp-20],4
 13976 00001D93 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13977 00001D97 7507                    	JNZ	short SetEOF
 13978                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13979                                  	; MSDOS 3.3
 13980                                  	;;test	word [es:di+5],80h
 13981                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13982                                  	;JNZ	short TryBlank
 13983                                  	; MSDOS 5.0 & MSDOS 6.0
 13984                                  	;test	byte [es:di+5],80h
 13985 00001D99 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13986 00001D9E 7504                    	jnz	short TryBlank
 13987                                  
 13988                                  SetEOF:
 13989                                  	;mov	byte [bp-1],1
 13990 00001DA0 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13991                                  TryBlank:				;
 13992 00001DA4 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13993 00001DA6 7426                    	JZ	short SetExt
 13994                                  	;add	word [bp-7],1
 13995 00001DA8 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13996                                  	;adc	word [bp-5],0
 13997 00001DAC 8356FB00                	ADC	RecPosH,0
 13998                                  	;test	byte [bp-20],4
 13999 00001DB0 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14000 00001DB4 7418                    	JZ	short SetExt
 14001                                  	;inc	word [bp-19]
 14002 00001DB6 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14003                                  	;mov	byte [bp-1],3
 14004 00001DB9 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14005                                  	;mov	cx,[bp-9]
 14006 00001DBD 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14007 00001DC0 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14008 00001DC2 30C0                    	XOR	AL,AL
 14009                                  ;hkn; 	SS override
 14010 00001DC4 36C43E[2C03]            	les     di,[ss:DMAADD]
 14011                                  	;add	di,[bp-17]
 14012 00001DC9 037EEF                  	ADD	DI,cResult
 14013 00001DCC F3AA                    	REP	STOSB			;   }	}
 14014                                  SetExt:
 14015                                  	;mov	dx,[bp-5]
 14016 00001DCE 8B56FB                  	MOV	DX,RecPosH
 14017                                  	;mov	ax,[bp-7]
 14018 00001DD1 8B46F9                  	MOV	AX,RecPosL
 14019                                  	;test	byte [bp-20],2
 14020 00001DD4 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14021 00001DD8 7406                    	JZ	short DoSetExt
 14022                                  	;test	byte [bp-20],8
 14023 00001DDA F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14024 00001DDE 7403                    	JZ	short TrySetRR
 14025                                  DoSetExt:
 14026 00001DE0 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14027                                  TrySetRR:
 14028                                  	;test	byte [bp-20],8
 14029 00001DE3 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14030 00001DE7 740F                    	JZ	short TryReturn
 14031                                  	;mov	[si+21h],ax
 14032 00001DE9 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14033                                  	;mov	[si+23h],dl
 14034 00001DEC 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14035                                  	;cmp	word [si+0Eh],64
 14036 00001DEF 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14037 00001DF3 7303                    	JAE	short TryReturn
 14038                                  	;mov	[si+24h],dh
 14039 00001DF5 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14040                                  TryReturn: 
 14041                                  	;test	byte [bp-20],4
 14042 00001DF8 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14043 00001DFC 750B                    	JNZ	short FCBSave
 14044 00001DFE 1E                      	push	ds			;	FCB->FDate = date;
 14045 00001DFF E8EEEC                  	call	DATE16			;	FCB->FTime = time;
 14046 00001E02 1F                      	pop	ds
 14047                                  	;mov	[si+14h],ax
 14048 00001E03 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14049                                  	;mov	[si+16h],dx
 14050 00001E06 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14051                                  FCBSave: 
 14052                                  	;test	byte [bp-20],8
 14053 00001E09 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14054 00001E0D 7409                    	jz	short DoReturn
 14055                                  	;mov	cx,[bp-19]
 14056 00001E0F 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14057 00001E12 E86CE6                  	call    Get_User_Stack
 14058                                  	;mov	[si+4],cx
 14059 00001E15 894C04                  	MOV	[SI+user_env.user_CX],CX
 14060                                  DoReturn:
 14061                                  	;mov	al,[bp-1]
 14062 00001E18 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14063                                  	;Leave	
 14064 00001E1B 89EC                    	mov     sp,bp
 14065 00001E1D 5D                      	pop     bp
 14066 00001E1E C3                      	retn
 14067                                  
 14068                                  ; 22/07/2018 - Retro DOS v3.0
 14069                                  
 14070                                  ;Break <$FCB_Open - open an old-style FCB>
 14071                                  ;---------------------------------------------------------------------------
 14072                                  ;
 14073                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14074                                  ;	for us and asked to have the rest filled in.
 14075                                  ;
 14076                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14077                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14078                                  ;		FCB has the following fields filled in:
 14079                                  ;		    Time/Date Extent/NR Size
 14080                                  ;---------------------------------------------------------------------------
 14081                                  
 14082                                  _$FCB_OPEN:			; System call 15
 14083                                  
 14084 00001E1F B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14085                                  
 14086                                  ;hkn; DOS_Open is in DOSCODE
 14087 00001E22 B9[122B]                	MOV	CX,DOS_OPEN
 14088                                  
 14089                                  ; The following is common code for Creation and openning of FCBs. AX is
 14090                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14091                                  ; the FCB
 14092                                  
 14093                                  DoAccess:
 14094 00001E25 1E                      	push	ds
 14095 00001E26 52                      	push	dx
 14096 00001E27 51                      	push	cx
 14097 00001E28 50                      	push	ax			; save FCB pointer away
 14098                                  
 14099                                  ;hkn; 	OpenBuf is in DOSDATA
 14100 00001E29 BF[BE03]                	MOV	DI,OPENBUF
 14101 00001E2C E85B4C                  	call	TransFCB		; crunch the fcb
 14102 00001E2F 58                      	pop	ax
 14103 00001E30 59                      	pop	cx
 14104 00001E31 5A                      	pop	dx
 14105 00001E32 1F                      	pop	ds			; get fcb
 14106 00001E33 7303                    	JNC	short FindFCB		; everything seems ok
 14107                                  FCBOpenErr:
 14108                                  	; AL has error code
 14109 00001E35 E91EE8                  	jmp	FCB_RET_ERR
 14110                                  FindFCB:
 14111 00001E38 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14112                                  
 14113                                  	; 17/05/2019 - Retro DOS v4.0
 14114                                  
 14115                                  	; MSDOS 3.3
 14116                                  	;call	LRUFCB
 14117                                  	;jc	short HardMessage
 14118                                  
 14119                                  	; MSDOS 6.0
 14120 00001E3B 50                      	push	ax
 14121 00001E3C B001                    	mov	al,1			;indicate Open/Create operation
 14122 00001E3E E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14123 00001E41 58                      	pop	ax
 14124 00001E42 722A                    	jc	short HardMessage
 14125                                  	
 14126                                  	;mov	word [es:di+2],8000h
 14127 00001E44 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14128 00001E4A 1E                      	push	ds
 14129 00001E4B 56                      	push	si	
 14130 00001E4C 53                      	push	bx			; save fcb pointer
 14131 00001E4D 89CE                    	MOV	SI,CX
 14132                                  
 14133                                  ;hkn; SS is DOSDATA
 14134 00001E4F 16                      	push	ss
 14135 00001E50 1F                      	pop	ds			    ; let DOS_Open see variables
 14136 00001E51 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14137 00001E53 5B                      	pop	bx
 14138 00001E54 5E                      	pop	si
 14139 00001E55 1F                      	pop	ds			; get fcb
 14140                                  
 14141                                  ;hkn; SS override
 14142 00001E56 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14143 00001E5B 7318                    	JNC	short FCBOK		; operation succeeded
 14144                                  failopen:
 14145 00001E5D 50                      	PUSH	AX
 14146 00001E5E B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14147 00001E60 E8DDFC                  	call	BlastSFT
 14148 00001E63 58                      	POP	AX
 14149                                  	;cmp	ax,4
 14150 00001E64 83F804                  	CMP	AX,error_too_many_open_files
 14151 00001E67 7405                    	JZ	short HardMessage
 14152                                  	;cmp	ax,24h
 14153 00001E69 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14154 00001E6C 7505                    	jnz	short DeadFCB
 14155                                  HardMessage:
 14156 00001E6E 50                      	PUSH	AX
 14157 00001E6F E887FD                  	call	FCBHardErr
 14158 00001E72 58                      	POP	AX
 14159                                  DeadFCB:
 14160                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14161                                  	;jmp	FCB_RET_ERR
 14162 00001E73 EBC0                    	jmp	short FCBOpenErr
 14163                                  FCBOK:
 14164                                  	; MSDOS 6.0
 14165 00001E75 E8ECF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14166 00001E78 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14167 00001E7A E83954                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14168 00001E7D 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14169                                  ;SR;
 14170                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14171                                  ; LocalSFT variable to reflect this.
 14172                                  
 14173 00001E7F 36893E[4410]            	mov	[ss:LocalSFT],di
 14174 00001E84 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14175                                  ;;SR;
 14176                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14177                                  ;;
 14178                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14179                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14180                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14181                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14182                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14183                                  
 14184                                  FCBOK2:
 14185                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14186 00001E89 26FF05                  	inc	word [es:di]
 14187                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14188 00001E8C E804FA                  	call	SaveFCBInfo
 14189                                  	; MSDOS 3.3
 14190                                  	;call	SetOpenAge
 14191                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14192                                  	;test	word [es:di+5],80h
 14193                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14194 00001E8F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14195 00001E94 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14196 00001E96 8A04                    	MOV	AL,[SI]			; get drive byte
 14197 00001E98 E87A4B                  	call	GETTHISDRV		; convert
 14198                                  	;INC	AL
 14199                                  	; 17/12/2022
 14200 00001E9B 40                      	inc	ax
 14201 00001E9C 8804                    	MOV	[SI],AL			; stash in good drive letter
 14202                                  
 14203                                  FCBNoDrive:
 14204                                  	;mov	word [si+0Eh],128
 14205 00001E9E C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14206                                  
 14207                                  	; 23/01/2024
 14208                                  	; (PCDOS 7.1 IBMDOS.COM)
 14209                                  	;;;
 14210                                  	;;mov	ax,[es:di+0Dh]
 14211                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14212                                  	;;mov	[si+16h],ax
 14213                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14214                                  	;;mov	ax,[es:di+0Fh]
 14215                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14216                                  	;;mov	[si+14h],ax
 14217                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14218                                  	;;mov	ax,[es:di+11h]
 14219                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14220                                  	;;mov	[si+10h],ax
 14221                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14222                                  	;;mov	ax,[es:di+13h]
 14223                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14224                                  	;;mov	[si+12h],ax
 14225                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14226                                  	;
 14227 00001EA3 06                      	push	es
 14228                                  	;les	ax,[es:di+0Dh]
 14229 00001EA4 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14230                                  	;mov	[si+16h],ax
 14231 00001EA8 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14232                                  	;mov	[si+14h],es
 14233 00001EAB 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14234 00001EAE 07                      	pop	es
 14235 00001EAF 06                      	push	es
 14236                                  	;les	ax,[es:di+11h]
 14237 00001EB0 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14238                                  	;mov	[si+10h],ax
 14239 00001EB4 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14240                                  	;mov	[si+12h],ax
 14241 00001EB7 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14242 00001EBA 07                      	pop	es
 14243                                  	;;;
 14244                                  	
 14245 00001EBB 31C0                    	XOR	AX,AX			; convenient zero
 14246                                  	;mov	[si+0Ch],ax
 14247 00001EBD 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14248                                  
 14249                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14250                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14251                                  
 14252                                  ;hkn; 	SS override
 14253 00001EC0 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14254                                  	;mov	ah,[es:di+4]
 14255 00001EC5 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14256                                  OpenScan:
 14257                                  	;cmp	al,[si+18h]
 14258 00001EC9 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14259 00001ECC 7407                    	JZ	short SkipCheck
 14260 00001ECE 50                      	push	ax			; preserve count
 14261 00001ECF E884FC                  	call	CheckFCB		; do they match
 14262 00001ED2 58                      	pop	ax			; get count back
 14263 00001ED3 7309                    	JNC	short OpenFound		; found a match!
 14264                                  SkipCheck:
 14265 00001ED5 FEC0                    	INC	AL			; advance to next FCB
 14266 00001ED7 38E0                    	CMP	AL,AH			; table full?
 14267 00001ED9 75EE                    	JNZ	short OpenScan		; no, go for more
 14268                                  OpenDone:
 14269 00001EDB 30C0                    	xor	al,al			; return success
 14270 00001EDD C3                      	retn
 14271                                  
 14272                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14273                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14274                                  ; Consider:
 14275                                  ;
 14276                                  ;   open (foo)	delete (foo) open (bar)
 14277                                  ;
 14278                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14279                                  ; foo even though foo is no longer needed; this is due to the server closing
 14280                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14281                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14282                                  ; bar and subsequent I/O would be lost to the redirector.
 14283                                  ;
 14284                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14285                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14286                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14287                                  ; around. This will allow us to access the same file through multiple network
 14288                                  ; connections and NOT prematurely terminate when the ref count on one
 14289                                  ; connection goes to zero.
 14290                                  
 14291                                  OpenFound:
 14292                                  	;mov	[si+18h],al
 14293 00001EDE 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14294 00001EE1 26FF05                  	inc	word [es:di]
 14295                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14296                                  					; remember this new invocation
 14297                                  	; 24/01/2024
 14298 00001EE4 16                      	push	ss
 14299 00001EE5 1F                      	pop	ds
 14300                                  	
 14301                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14302 00001EE6 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14303                                  	;mov	[es:di+15h],ax
 14304 00001EE9 26894515                	MOV	[ES:DI+sf_LRU],AX
 14305                                  ;
 14306                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14307                                  ; blast it to prevent other reuse.
 14308                                  ;
 14309                                  	;push	ss
 14310                                  	;pop	ds
 14311                                  
 14312 00001EED C43E[9E05]              	LES	DI,[THISSFT]
 14313 00001EF1 26FF0D                  	dec	word [es:di]
 14314                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14315                                  					; free the newly allocated SFT
 14316 00001EF4 E8F753                  	call	ShareEnd
 14317 00001EF7 B043                    	MOV	AL,'C'	 ; 43h
 14318 00001EF9 E844FC                  	call	BlastSFT
 14319 00001EFC EBDD                    	JMP	short OpenDone
 14320                                  
 14321                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14322                                  ;----------------------------------------------------------------------------
 14323                                  ;
 14324                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14325                                  ;	FCB for us and asked to have the rest filled in.
 14326                                  ;
 14327                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14328                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14329                                  ;		FCB has the following fields filled in:
 14330                                  ;		    Time/Date Extent/NR Size
 14331                                  ;----------------------------------------------------------------------------
 14332                                  
 14333                                  _$FCB_CREATE:		; System call 22
 14334                                  
 14335                                  ;hkn; DOS_Create is in DOSCODE
 14336 00001EFE B9[EC29]                	MOV	CX,DOS_CREATE		; routine to call
 14337 00001F01 31C0                    	XOR	AX,AX			; attributes to create
 14338 00001F03 E84EFD                  	call	GetExtended		; get extended FCB
 14339 00001F06 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14340 00001F08 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14341                                  DoAccessJ:
 14342 00001F0B E917FF                  	JMP	DoAccess		; do dirty work
 14343                                  
 14344                                  ;============================================================================
 14345                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14346                                  ;============================================================================
 14347                                  ; 22/07/2018 - Retro DOS v3.0
 14348                                  ; 17/05/2019 - Retro DOS v4.0
 14349                                  
 14350                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14351                                  
 14352                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14353                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14354                                  
 14355                                  ;**	Search.asm
 14356                                  ;----------------------------------------------------------------------------
 14357                                  ;	Directory search system calls.
 14358                                  ;	These will be passed direct text of the pathname from the user. 
 14359                                  ;	They will need to be passed through the macro expander prior to
 14360                                  ;	being sent through the low-level stuff. 
 14361                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14362                                  ;
 14363                                  ;	$Dir_Search_First	  written
 14364                                  ;	$Dir_Search_Next	  written
 14365                                  ;	$Find_First	  written
 14366                                  ;	$Find_Next		  written
 14367                                  ;	PackName		  written
 14368                                  ;
 14369                                  ;	Modification history:
 14370                                  ;
 14371                                  ;	  Created: ARR 4 April 1983
 14372                                  
 14373                                  ;----------------------------------------------------------------------------
 14374                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14375                                  ;
 14376                                  ; Inputs:
 14377                                  ;	DS:DX Points to unopenned FCB
 14378                                  ; Function:
 14379                                  ;	Directory is searched for first matching entry and the directory
 14380                                  ;	entry is loaded at the disk transfer address
 14381                                  ; Returns:
 14382                                  ;	AL = -1 if no entries matched, otherwise 0
 14383                                  ;----------------------------------------------------------------------------
 14384                                  
 14385                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14386                                  
 14387                                  	; 24/01/2024
 14388                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14389                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14390                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14391                                  
 14392                                  _$DIR_SEARCH_FIRST:
 14393 00001F0E 368916[A605]            	MOV	[SS:THISFCB],DX
 14394 00001F13 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14395 00001F18 89D6                    	MOV	SI,DX
 14396 00001F1A 803CFF                  	CMP	BYTE [SI],0FFH
 14397 00001F1D 7503                    	JNZ	short NORMFCB4
 14398 00001F1F 83C607                  	ADD	SI,7			; Point to drive select byte
 14399                                  NORMFCB4:
 14400 00001F22 FF34                    	push	word [SI]		; Save original drive byte for later
 14401                                  
 14402 00001F24 16                      	push	ss
 14403 00001F25 07                      	pop	es			; get es to address DOSGroup
 14404                                  
 14405 00001F26 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14406 00001F29 E85E4B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14407 00001F2C 7304                    	JNC	short SearchIt		; no error, go and look
 14408 00001F2E 5B                      	pop	bx			; Clean stack
 14409                                  
 14410                                  ; Error code is in AX
 14411                                  
 14412                                  	; 09/11/2022
 14413                                  dcf_errj:
 14414 00001F2F E924E7                  	jmp	FCB_RET_ERR		; error
 14415                                  
 14416                                  SearchIt:
 14417 00001F32 16                      	push	ss
 14418 00001F33 1F                      	pop	ds			; get ready for search
 14419                                  	;push	word [DMAADD]
 14420                                  	;push	word [DMAADD+2]
 14421                                  	; 24/01/2024
 14422 00001F34 C43E[2C03]              	les	di,[DMAADD]
 14423 00001F38 57                      	push	di
 14424 00001F39 06                      	push	es
 14425 00001F3A C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14426 00001F40 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14427                                  	; MSDOS 3.3
 14428                                  	;call	DOS_SEARCH_FIRST
 14429                                  	; MSDOS 6.0
 14430 00001F44 E8930D                  	call	GET_FAST_SEARCH		; search
 14431 00001F47 8F06[2E03]              	pop	word [DMAADD+2]
 14432 00001F4B 8F06[2C03]              	pop	word [DMAADD]
 14433 00001F4F 735C                    	JNC	short SearchSet		; no error, transfer info
 14434 00001F51 5B                      	pop	bx			; Clean stack
 14435                                  
 14436                                  ; Error code is in AX
 14437                                  
 14438                                  	; 09/11/2022
 14439                                  	;jmp	FCB_RET_ERR
 14440 00001F52 EBDB                    	jmp	short dcf_errj
 14441                                  
 14442                                  ;----------------------------------------------------------------------------
 14443                                  ;
 14444                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14445                                  ;
 14446                                  ; Inputs:
 14447                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14448                                  ; Function:
 14449                                  ;	Directory is searched for the next matching entry and the directory
 14450                                  ;	entry is loaded at the disk transfer address
 14451                                  ; Returns:
 14452                                  ;	AL = -1 if no entries matched, otherwise 0
 14453                                  ;----------------------------------------------------------------------------
 14454                                  
 14455                                  	; 24/01/2024
 14456                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14457                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14458                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14459                                  
 14460                                  _$DIR_SEARCH_NEXT:
 14461 00001F54 368916[A605]            	MOV	[SS:THISFCB],DX
 14462 00001F59 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14463 00001F5E 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14464 00001F64 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14465                                  
 14466 00001F6A 16                      	push	ss
 14467 00001F6B 07                      	pop	es
 14468                                  
 14469 00001F6C BF[BE04]                	MOV	DI,SEARCHBUF
 14470                                  
 14471 00001F6F 89D6                    	MOV	SI,DX
 14472 00001F71 803CFF                  	CMP	BYTE [SI],0FFh
 14473 00001F74 750D                    	JNZ	short NORMFCB6
 14474 00001F76 83C606                  	ADD	SI,6
 14475 00001F79 AC                      	LODSB
 14476                                  
 14477 00001F7A 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14478 00001F7E 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14479                                  NORMFCB6:
 14480 00001F83 AC                      	LODSB				; Get original user drive byte
 14481 00001F84 50                      	push	ax			; Put it on stack
 14482 00001F85 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14483 00001F88 AA                      	STOSB				; Put in correct place
 14484 00001F89 B90A00                  	MOV	CX,20/2
 14485 00001F8C F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14486                                  
 14487 00001F8E 16                      	push	ss
 14488 00001F8F 1F                      	pop	ds
 14489                                  
 14490                                  	;push	word [DMAADD]
 14491                                  	;push	word [DMAADD+2]
 14492                                  	; 24/01/2024
 14493 00001F90 C43E[2C03]              	les	di,[DMAADD]
 14494 00001F94 57                      	push	di
 14495 00001F95 06                      	push	es
 14496 00001F96 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14497 00001F9C 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14498 00001FA0 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14499 00001FA3 8F06[2E03]              	pop	word [DMAADD+2]
 14500 00001FA7 8F06[2C03]              	pop	word [DMAADD]
 14501 00001FAB 724A                    	JC	short SearchNoMore
 14502                                  	; 24/01/2024
 14503                                  	;JMP	SearchSet		; Ok set return
 14504                                  
 14505                                  ;;;	; 24/01/2024
 14506                                  
 14507                                  ; The search was successful (or the search-next). We store the information
 14508                                  ; into the user's FCB for continuation.
 14509                                  
 14510                                  SearchSet:
 14511 00001FAD BE[BE04]                	MOV	SI,SEARCHBUF
 14512 00001FB0 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14513 00001FB4 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14514 00001FB9 7403                    	JZ	short NORMFCB1
 14515 00001FBB 83C707                  	ADD	DI,7			; Point past the extension
 14516                                  NORMFCB1:
 14517 00001FBE 5B                      	pop	bx			; Get original drive byte
 14518 00001FBF 08DB                    	OR	BL,BL
 14519 00001FC1 7506                    	JNZ	short SearchDrv
 14520 00001FC3 8A1E[3603]              	MOV	BL,[CURDRV]
 14521 00001FC7 FEC3                    	INC	BL
 14522                                  SearchDrv:
 14523 00001FC9 AC                      	LODSB				; Get correct search contin drive byte
 14524 00001FCA 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14525 00001FCC 47                      	INC	DI
 14526                                  	;STOSB				; Store the correct "user" drive byte
 14527                                  					;  at the start of the search info
 14528 00001FCD B90A00                  	MOV	CX,20/2
 14529 00001FD0 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14530 00001FD2 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14531                                  					;   byte to AL
 14532 00001FD4 AA                      	STOSB				; Search contin drive byte at end of
 14533                                  					;   contin info
 14534 00001FD5 C43E[2C03]              	LES	DI,[DMAADD]
 14535 00001FD9 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14536 00001FDE 740D                    	JZ	short NORMFCB2
 14537 00001FE0 B0FF                    	MOV	AL,0FFh
 14538 00001FE2 AA                      	STOSB
 14539 00001FE3 FEC0                    	INC	AL
 14540                                  	;MOV	CX,5
 14541                                  	; 17/12/2022
 14542 00001FE5 B105                    	mov	cl,5
 14543 00001FE7 F3AA                    	REP	STOSB
 14544 00001FE9 A0[6D05]                	MOV	AL,[SATTRIB]
 14545 00001FEC AA                      	STOSB
 14546                                  NORMFCB2:
 14547 00001FED 88D8                    	MOV	AL,BL			; User Drive byte
 14548 00001FEF AA                      	STOSB
 14549                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14550                                  	; 17/12/2022
 14551 00001FF0 B110                    	mov	cl,16
 14552 00001FF2 F3A5                    	REP	MOVSW
 14553 00001FF4 E95CE6                  	jmp	FCB_RET_OK
 14554                                  ;;;
 14555                                  
 14556                                  SearchNoMore:
 14557 00001FF7 C43E[A605]              	LES	DI,[THISFCB]
 14558 00001FFB F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14559 00002000 7403                    	JZ	short NORMFCB8
 14560 00002002 83C707                  	ADD	DI,7			; Point past the extension
 14561                                  NORMFCB8:
 14562 00002005 5B                      	pop	bx			; Get original drive byte
 14563 00002006 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14564                                  					;  at the right spot
 14565                                  ; error code is in AX
 14566                                  
 14567 00002009 E94AE6                  	jmp	FCB_RET_ERR
 14568                                  
 14569                                  ; 17/05/2019 - Retro DOS v4.0
 14570                                  
 14571                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14572                                  
 14573                                  ;---------------------------------------------------------------------------
 14574                                  ;
 14575                                  ;   Procedure Name : $FIND_FIRST
 14576                                  ; 
 14577                                  ;   Assembler usage:
 14578                                  ;	    MOV AH, FindFirst
 14579                                  ;	    LDS DX, name
 14580                                  ;	    MOV CX, attr
 14581                                  ;	    INT 21h
 14582                                  ;	; DMA address has datablock
 14583                                  ;
 14584                                  ;   Error Returns:
 14585                                  ;	    AX = error_path_not_found
 14586                                  ;	       = error_no_more_files
 14587                                  ;---------------------------------------------------------------------------
 14588                                  
 14589                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14590                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14591                                  
 14592                                  	; 24/01/2024
 14593                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14594                                  
 14595                                  _$FIND_FIRST:
 14596 0000200C 89D6                    	MOV	SI,DX			; get name in appropriate place
 14597 0000200E 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14598                                  
 14599 00002013 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14600                                  
 14601 00002016 E8D74A                  	call	TransPathSet		; convert the path
 14602 00002019 7305                    	JNC	short Find_it 		; no error, go and look
 14603                                  FindError:
 14604                                  	;mov	al,3
 14605 0000201B B003                    	mov	al, error_path_not_found ; error and map into one.
 14606                                  	; 09/11/2022
 14607                                  FF_errj:
 14608 0000201D E920E6                  	jmp	SYS_RET_ERR
 14609                                  Find_it:
 14610 00002020 16                      	push	ss
 14611 00002021 1F                      	pop	ds
 14612                                  
 14613                                  	;push	word [DMAADD]
 14614                                  	;push	word [DMAADD+2]
 14615                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14616 00002022 C43E[2C03]              	les	di,[DMAADD]
 14617 00002026 57                      	push	di
 14618 00002027 06                      	push	es
 14619 00002028 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14620 0000202E 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14621                                  	; MSDOS 3.3
 14622                                  	;call	DOS_SEARCH_FIRST
 14623                                  	; MSDOS 6.0
 14624 00002032 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14625 00002035 8F06[2E03]              	pop	word [DMAADD+2]
 14626 00002039 8F06[2C03]              	pop	word [DMAADD]
 14627                                  	
 14628                                  	; 16/12/2022
 14629                                  	;JNC	short FindSet 		; no error, transfer info
 14630 0000203D 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14631                                  	;
 14632                                  	;jmp	SYS_RET_ERR
 14633                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14634                                  ;FFF_errj:
 14635                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14636                                  
 14637                                  FindSet:
 14638 0000203F BE[BE04]                	MOV	SI,SEARCHBUF
 14639 00002042 C43E[2C03]              	LES	DI,[DMAADD]
 14640 00002046 B91500                  	MOV	CX,21
 14641 00002049 F3A4                    	REP	MOVSB
 14642 0000204B 56                      	PUSH	SI			; Save pointer to start of entry
 14643                                  	;mov	al,[si+0Bh]
 14644 0000204C 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14645 0000204F AA                      	STOSB
 14646                                  	;add	si,16h ; 22
 14647 00002050 83C616                  	ADD	SI,dir_entry.dir_time
 14648 00002053 A5                      	MOVSW				; dir_time
 14649 00002054 A5                      	MOVSW				; dir_date
 14650 00002055 46                      	INC	SI
 14651 00002056 46                      	INC	SI			; Skip dir_first
 14652 00002057 A5                      	MOVSW				; dir_size (2 words)
 14653 00002058 A5                      	MOVSW
 14654 00002059 5E                      	POP	SI			; Point back to dir_name
 14655 0000205A E83300                   	CALL	PackName
 14656 0000205D E9D7E5                  	jmp	SYS_RET_OK		; bye with no errors
 14657                                  
 14658                                  ;---------------------------------------------------------------------------
 14659                                  ;
 14660                                  ;   Procedure Name : $FIND_NEXT
 14661                                  ;
 14662                                  ;   Assembler usage:
 14663                                  ;	; dma points at area returned by find_first
 14664                                  ;	    MOV AH, findnext
 14665                                  ;	    INT 21h
 14666                                  ;	; next entry is at dma
 14667                                  ;
 14668                                  ;   Error Returns:
 14669                                  ;	    AX = error_no_more_files
 14670                                  ;---------------------------------------------------------------------------
 14671                                  
 14672                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14673                                  
 14674                                  	; 24/01/2024
 14675                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14676                                  
 14677                                  _$FIND_NEXT:
 14678 00002060 16                      	push	ss
 14679 00002061 07                      	pop	es
 14680                                  
 14681 00002062 BF[BE04]                	MOV	DI,SEARCHBUF
 14682                                  
 14683 00002065 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14684                                  
 14685 0000206A B91500                  	MOV	CX,21
 14686 0000206D F3A4                    	REP	MOVSB			; Put the search continuation info
 14687                                  					;  in the right place
 14688 0000206F 16                      	push	ss
 14689 00002070 1F                      	pop	ds			; get ready for search
 14690                                  	
 14691                                  	;push	word [DMAADD]
 14692                                  	;push	word [DMAADD+2]
 14693                                  	; 24/01/2024
 14694 00002071 C43E[2C03]              	les	di,[DMAADD]
 14695 00002075 57                      	push	di
 14696 00002076 06                      	push	es
 14697 00002077 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14698 0000207D 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14699 00002081 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14700 00002084 8F06[2E03]              	pop	word [DMAADD+2]
 14701 00002088 8F06[2C03]              	pop	word [DMAADD]
 14702 0000208C 73B1                    	JNC	short FindSet 		; No error, set info
 14703                                  	;jmp	SYS_RET_ERR
 14704                                  	; 16/12/2022
 14705 0000208E EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14706                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14707                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14708                                  
 14709                                  ;---------------------------------------------------------------------------
 14710                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14711                                  ;
 14712                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14713                                  ;	the ASCIZ format.
 14714                                  ;
 14715                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14716                                  ;		(ES:DI) = destination area (13 bytes)
 14717                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14718                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14719                                  ;---------------------------------------------------------------------------
 14720                                  
 14721                                  	; 25/01/2024 - Retro DOS v4.2
 14722                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14723                                  
 14724                                  PackName:
 14725                                  ;	Move over 8 characters to cover the name component, then trim it's
 14726                                  ;	trailing blanks.
 14727                                  
 14728                                  	;MOV	CX,8			; Pack the name
 14729                                  	;REP	MOVSB			; Move all of it
 14730                                  	; 25/01/2024
 14731 00002090 B90400                  	mov	cx,4
 14732 00002093 F3A5                    	rep	movsw
 14733                                  main_kill_tail:
 14734 00002095 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14735 0000209A 7507                    	JNZ	short find_check_dot
 14736 0000209C 4F                      	DEC	DI			; Back up over trailing space
 14737 0000209D 41                      	INC	CX
 14738 0000209E 83F908                  	CMP	CX,8
 14739 000020A1 72F2                    	JB	short main_kill_tail
 14740                                  find_check_dot:
 14741                                  	;CMP	WORD [SI],(" " << 8) | " "
 14742 000020A3 813C2020                	cmp     word [si],2020h 
 14743 000020A7 7506                    	JNZ	short got_ext 		; Some chars in extension
 14744 000020A9 807C0220                	CMP	BYTE [SI+2]," "
 14745 000020AD 740F                    	JZ	short find_done		; No extension
 14746                                  got_ext:
 14747 000020AF B02E                    	MOV	AL,"."	; 2Eh
 14748 000020B1 AA                      	STOSB
 14749                                  	;MOV	CX,3
 14750                                  	;; 18/12/2022
 14751                                  	;;mov	cl,3
 14752                                  	;;REP	MOVSB
 14753                                  	;movsb
 14754                                  	;movsb
 14755                                  	;movsb
 14756                                  	; 25/01/2024
 14757 000020B2 A5                      	movsw
 14758 000020B3 A4                      	movsb
 14759                                  ext_kill_tail:
 14760 000020B4 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14761 000020B9 7503                    	JNZ	short find_done
 14762 000020BB 4F                      	DEC	DI			; Back up over trailing space
 14763 000020BC EBF6                    	JMP	short ext_kill_tail
 14764                                  find_done:
 14765 000020BE 31C0                    	XOR	AX,AX
 14766 000020C0 AA                      	STOSB				; NUL terminate
 14767 000020C1 C3                      	retn
 14768                                  
 14769                                  ;---------------------------------------------------------------------------
 14770                                  
 14771                                  ; 24/01/2024
 14772                                  %if 0
 14773                                  	; 17/05/2019 - Retro DOS v4.0
 14774                                  GET_FAST_SEARCH:
 14775                                  	; 22/07/2018
 14776                                  	; MSDOS 6.0
 14777                                  	; 17/12/2022
 14778                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14779                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14780                                  					;FO.trigger fastopen ;AN000;
 14781                                  	;call	DOS_SEARCH_FIRST
 14782                                  	;retn
 14783                                  	; 17/12/2022
 14784                                  	jmp	DOS_SEARCH_FIRST
 14785                                  %endif
 14786                                  
 14787                                  ;============================================================================
 14788                                  ; PATH.ASM, MSDOS 6.0, 1991
 14789                                  ;============================================================================
 14790                                  ; 06/08/2018 - Retro DOS v3.0
 14791                                  ; 17/05/2019 - Retro DOS v4.0
 14792                                  
 14793                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14794                                  
 14795                                  ;**	Directory related system calls. These will be passed direct text of the
 14796                                  ;	pathname from the user. They will need to be passed through the macro
 14797                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14798                                  ;	defined in DISPATCH. The system calls are:
 14799                                  ;
 14800                                  ;	$CURRENT_DIR  Written
 14801                                  ;	$RMDIR	  Written
 14802                                  ;	$CHDIR	  Written
 14803                                  ;	$MKDIR	  Written
 14804                                  ;
 14805                                  ;
 14806                                  ;	Modification history:
 14807                                  ;
 14808                                  ;	    Created: ARR 4 April 1983
 14809                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14810                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14811                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14812                                  ;				    current directory.
 14813                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14814                                  
 14815                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14816                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14817                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14818                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14819                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14820                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14821                                  ;	I_Need	cMeta,BYTE
 14822                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14823                                  
 14824                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14825                                  ;----------------------------------------------------------------------------
 14826                                  ;
 14827                                  ;   Procedure Name : $CURRENT_DIR
 14828                                  ;
 14829                                  ;   Assembler usage:
 14830                                  ;		LDS	SI,area
 14831                                  ;		MOV	DL,drive
 14832                                  ;		INT	21h
 14833                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14834                                  ;	    ; current directory.
 14835                                  ;   Error returns:
 14836                                  ;	    AX = error_invalid_drive
 14837                                  ;
 14838                                  ;----------------------------------------------------------------------------
 14839                                  
 14840                                  	; 06/08/2018 - Retro DOS v3.0
 14841                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14842                                  
 14843                                  	; 25/01/2024 - Retro DOS v4.2
 14844                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14845                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14846                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14847                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14848                                  
 14849                                  _$CURRENT_DIR:
 14850 000020C2 E848F2                  	call	ECritDisk
 14851 000020C5 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14852 000020C7 E82F49                  	call	GetVisDrv		; grab it
 14853 000020CA 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14854                                  CurdirErr:
 14855 000020CC E859F2                  	call	LCritDisk
 14856                                  
 14857                                  	; MSDOS 3.3
 14858                                  	;mov	al,0Fh
 14859                                  	
 14860                                  	; MSDOS 6.0
 14861 000020CF 1E                      	push	ds
 14862 000020D0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14863 000020D5 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14864 000020D8 1F                      	pop	ds
 14865                                  
 14866                                  curdir_errj:
 14867 000020D9 E964E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14868                                  
 14869                                  CurrentValidate:
 14870 000020DC 1E                      	push	ds			; save destination
 14871 000020DD 56                      	push	si
 14872                                  	
 14873                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14874                                  	
 14875                                  	; MSDOS 6.0
 14876 000020DE 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14877                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14878 000020E3 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14879                                  	
 14880                                  	; 25/01/2024
 14881                                  	;lds     si,[THISCDS]
 14882                                  
 14883                                  ; 16/12/2022
 14884                                  %if 0
 14885                                  	; 09/11/2022 (following test instruction is nonsense!)
 14886                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14887                                  
 14888                                  	;test	word [si+43h],8000h
 14889                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14890                                  	;jnz	short $+2  ; 09/11/2022	
 14891                                  	jnz	short DoCheck
 14892                                  %endif
 14893                                  
 14894                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14895                                  ; media check.
 14896                                  ;	CMP	word [SI+curdir.ID],0
 14897                                  ;	JZ	short GetDst
 14898                                  DoCheck:
 14899                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14900                                  
 14901                                  	; 25/01/2024
 14902                                  	; MSDOS 6.0
 14903                                  	;push	ds
 14904                                  	;mov	ds,[cs:DosDSeg]
 14905                                  	;mov	byte [NoSetDir],0 ; *
 14906                                  	;pop	ds
 14907                                  
 14908 000020E8 BF[BE03]                	MOV	DI,OPENBUF
 14909 000020EB E8F120                  	call	ValidateCDS		; output is ES:DI -> CDS
 14910                                  
 14911 000020EE 06                      	push	es	 		; swap source and destination
 14912 000020EF 57                      	push	di
 14913 000020F0 5E                      	pop	si
 14914 000020F1 1F                      	pop	ds
 14915                                  GetDst:
 14916 000020F2 5F                      	pop	di
 14917 000020F3 07                      	pop	es			; get real destination
 14918 000020F4 72D6                    	JC	short CurdirErr
 14919                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14920                                  	;
 14921                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14922                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14923                                  	; 16/12/2022
 14924                                  	;add	si,0  ; add si,curdir.text
 14925                                  	;
 14926                                  	;add	si,[si+4Fh] ; 17/05/2019
 14927 000020F6 03744F                  	ADD	SI,[SI+curdir.end]
 14928 000020F9 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14929 000020FC 7501                    	JNZ	short CurrentCopy
 14930 000020FE 46                      	INC	SI
 14931                                  CurrentCopy:
 14932                                  ;	call	FStrCpy
 14933                                  ;; 10/29/86 E5 char
 14934 000020FF 50                      	PUSH	AX
 14935 00002100 AC                      	LODSB				; get char
 14936 00002101 08C0                    	OR	AL,AL
 14937 00002103 7413                    	JZ	short FOK
 14938 00002105 3C05                    	CMP	AL,05H
 14939 00002107 740D                    	JZ	short FCHANGE
 14940 00002109 EB01                    	JMP	short FFF
 14941                                  FCPYNEXT:
 14942 0000210B AC                      	LODSB				; get char
 14943                                  FFF:
 14944 0000210C 3C5C                    	CMP	AL,'\'			; beginning of directory
 14945 0000210E 7508                    	JNZ	short FOK		; no
 14946 00002110 AA                      	STOSB				; put into user's buffer
 14947 00002111 AC                      	LODSB				; 1st char of dir is 05?
 14948 00002112 3C05                    	CMP	AL,05H
 14949 00002114 7502                    	JNZ	short FOK		; no
 14950                                  FCHANGE:
 14951 00002116 B0E5                    	MOV	AL,0E5H			; make it E5
 14952                                  FOK:
 14953 00002118 AA                      	STOSB				; put into user's buffer
 14954 00002119 08C0                    	OR	AL,AL			; final char
 14955 0000211B 75EE                    	JNZ	short FCPYNEXT		; no
 14956 0000211D 58                      	POP	AX
 14957                                  
 14958                                  ;; 10/29/86 E5 char
 14959 0000211E 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14960 00002120 E805F2                  	call	LCritDisk
 14961 00002123 E911E5                  	jmp	SYS_RET_OK		; no more, bye!
 14962                                  
 14963                                  ; 17/05/2019 - Retro DOS v4.0
 14964                                  
 14965                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14966                                  
 14967                                  ;BREAK <$RmDir -- Remove a directory>
 14968                                  ;----------------------------------------------------------------------------
 14969                                  ;
 14970                                  ; Procedure Name : $RmDir
 14971                                  ;
 14972                                  ; Inputs:
 14973                                  ;	DS:DX Points to asciz name
 14974                                  ; Function:
 14975                                  ;	Delete directory if empty
 14976                                  ; Returns:
 14977                                  ;	STD XENIX Return
 14978                                  ;	AX = error_path_not_found If path bad
 14979                                  ;	AX = error_access_denied If
 14980                                  ;		Directory not empty
 14981                                  ;		Path not directory
 14982                                  ;		Root directory specified
 14983                                  ;		Directory malformed (. and .. not first two entries)
 14984                                  ;		User tries to delete a current directory
 14985                                  ;	AX = error_current_directory
 14986                                  ;
 14987                                  ;----------------------------------------------------------------------------
 14988                                  
 14989                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14990                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14991                                  
 14992                                  _$RMDIR:
 14993 00002126 52                      	push	dx			; Save ptr to name
 14994 00002127 1E                      	push	ds
 14995 00002128 89D6                    	mov	si,dx			; Load ptr into si
 14996 0000212A BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14997 0000212D 57                      	push	di
 14998 0000212E E8C749                  	call	TransPathNoSet		; Translate the name
 14999 00002131 5F                      	pop	di			; di = ptr to buf for trans name
 15000 00002132 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15001 00002134 1F                      	pop	ds
 15002 00002135 5A                      	pop	dx			; Restore the name
 15003                                  	;mov	al,3
 15004 00002136 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15005                                  	; 16/12/2022
 15006                                  rmdir_errj: ; 10/08/2018
 15007                                  chdir_errj:
 15008 00002138 EB9F                    	jmp	short curdir_errj
 15009                                  	;jmp	SYS_RET_ERR
 15010                                  rmlset:
 15011 0000213A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15012 00002140 7512                    	Jnz	short rmerr		;	return (-1);
 15013 00002142 16                      	push	ss
 15014 00002143 07                      	pop	es
 15015 00002144 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15016                                  rmloop: 
 15017 00002146 E82149                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15018 00002149 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15019 0000214B E863F0                  	call	StrCmp			; Are the 2 paths the same?
 15020 0000214E 7404                    	jz	short rmerr		; Yes, report error.
 15021 00002150 FEC0                    	inc	al			; No, inc al to next drive number
 15022 00002152 EBF2                    	jmp	short rmloop		; Go check next drive.
 15023                                  rmerr:
 15024 00002154 1F                      	pop	ds
 15025 00002155 5A                      	pop	dx			; Restore the name
 15026                                  	;mov	al,10h
 15027 00002156 B010                    	mov	al,error_current_directory ; error
 15028                                  	; 16/12/2022
 15029                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15030                                  ;chdir_errj:
 15031 00002158 EBDE                    	jmp	short rmdir_errj
 15032                                  rmcont:
 15033 0000215A 1F                      	pop	ds
 15034 0000215B 5A                      	pop	dx			; Restore the name
 15035 0000215C BE[8531]                	MOV	SI,DOS_RMDIR
 15036 0000215F EB7C                    	JMP	DoDirCall
 15037                                  
 15038                                  ; 17/05/2019 - Retro DOS v4.0
 15039                                  
 15040                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15041                                  
 15042                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15043                                  ;----------------------------------------------------------------------------
 15044                                  ;
 15045                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15046                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15047                                  ; several cases to consider:
 15048                                  ;
 15049                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15050                                  ;	it into a WFP.	We verify the existance of this directory and then
 15051                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15052                                  ;	directory cluster.
 15053                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15054                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15055                                  ;	WFP back into the CDS.
 15056                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15057                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15058                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15059                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15060                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15061                                  ;	to process the path but to return the logical CDS and the logical
 15062                                  ;	path.  We then copy the logical path into the logical CDS.
 15063                                  ;
 15064                                  ; Inputs:
 15065                                  ;	DS:DX Points to asciz name
 15066                                  ; Returns:
 15067                                  ;	STD XENIX Return
 15068                                  ;	AX = chdir_path_not_found if error
 15069                                  ;
 15070                                  ;----------------------------------------------------------------------------
 15071                                  
 15072                                  _$CHDIR:
 15073 00002161 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15074 00002164 89D6                    	MOV	SI,DX			; get source
 15075 00002166 E88349                  	call	TransPath		; go munge the path and get real CDS
 15076 00002169 7304                    	JNC	short ChDirCrack	; no errors, try path
 15077                                  ChDirErrP:
 15078                                  	;mov	al,3
 15079 0000216B B003                    	MOV	AL,error_path_not_found
 15080                                  ChDirErr:
 15081                                  	;jmp	SYS_RET_ERR 	; oops!
 15082                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15083 0000216D EBC9                    	jmp	short chdir_errj
 15084                                  
 15085                                  ChDirCrack:
 15086 0000216F 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15087 00002174 75F5                    	JNZ	short ChDirErrP
 15088                                  
 15089                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15090                                  ; found.
 15091                                  
 15092 00002176 C43E[A205]              	LES	DI,[THISCDS]
 15093 0000217A 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15094 0000217D 74EC                    	JZ	short ChDirErrP		;	error ();
 15095                                  
 15096                                  ; Find out if the directory exists.
 15097                                  
 15098 0000217F E8C00F                  	call	DOS_CHDIR
 15099                                  	;Jc	short ChDirErr
 15100                                  	; 16/12/2022
 15101 00002182 72B4                    	jc	short chdir_errj
 15102                                  ;
 15103                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15104                                  ; not network). If one was seen, all we need to do is copy in the text
 15105                                  ;
 15106 00002184 C43E[A205]              	LES	DI,[THISCDS]
 15107                                  	;test	word [es:di+43h],2000h
 15108                                  	; 17/12/2022
 15109 00002188 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15110                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15111 0000218D 7425                    	JZ	short GotCDS
 15112                                  
 15113                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15114                                  
 15115 0000218F 06                      	push	es	
 15116 00002190 57                      	push	di
 15117 00002191 51                      	push	cx			; save CDS and cluster...
 15118 00002192 E8ECE2                  	call	Get_User_Stack		; get original text
 15119                                  	
 15120                                  	;mov	di,[si+6]
 15121 00002195 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15122                                  	;mov	ds,[si+0Eh]
 15123 00002198 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15124                                  	
 15125 0000219B BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15126 0000219E 87F7                    	XCHG	SI,DI
 15127 000021A0 30C0                    	XOR	AL,AL			; do no splicing
 15128 000021A2 57                      	push	di
 15129 000021A3 E85249                  	call	TransPathNoSet		; Munge path
 15130 000021A6 5E                      	pop	si
 15131                                  
 15132                                  ; There should NEVER be an error here.
 15133                                  
 15134                                  ;IF FALSE
 15135                                  ;	JNC SKipErr
 15136                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15137                                  ;SkipErr:
 15138                                  ;ENDIF
 15139 000021A7 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15140                                  	;mov	word [es:di+49h],-1
 15141 000021AB 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15142                                  					; no valid cluster here...
 15143 000021B1 59                      	pop	cx
 15144 000021B2 5F                      	pop	di
 15145 000021B3 07                      	pop	es
 15146                                  
 15147                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15148                                  
 15149                                  GotCDS:
 15150                                  
 15151                                  ; wfp_start points to the text. See if it is long enough
 15152                                  
 15153                                  	; MSDOS 3.3
 15154                                  	;push	ss
 15155                                  	;pop	ds
 15156                                  	;mov	si,[WFP_START]
 15157                                  	;push	cx
 15158                                  	;call	DStrLen
 15159                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15160                                  	;pop	cx
 15161                                  	;ja	short ChDirErrP
 15162                                  
 15163                                  	; MSDOS 6.0
 15164 000021B4 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15165 000021B7 77B2                    	JA	short ChDirErrP
 15166                                  	; MSDOS 3.3 & MSDOS 6.0
 15167                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15168                                  	; 17/12/2022
 15169 000021B9 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15170 000021BE 7512                    	JNZ	short SkipRecency
 15171                                  	; MSDOS 6.0
 15172                                  	;test	word [es:di+43h],2000h
 15173                                  	; 17/12/2022
 15174 000021C0 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15175                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15176                                  					;PTM. for Join and Subst ;AN000;
 15177 000021C5 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15178 000021C7 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15179                                  setdirclus:
 15180                                  	;mov	[es:di+49h],cx
 15181 000021CA 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15182 000021CE C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15183                                  SkipRecency:
 15184 000021D2 E80DF0                  	call	FStrCpy
 15185 000021D5 30C0                    	XOR	AL,AL
 15186                                  mkdir_ok:
 15187 000021D7 E95DE4                  	jmp	SYS_RET_OK
 15188                                  
 15189                                  ; 17/05/2019 - Retro DOS v4.0
 15190                                  
 15191                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15192                                  
 15193                                  ;BREAK <$MkDir - Make a directory entry>
 15194                                  ;---------------------------------------------------------------------------
 15195                                  ;
 15196                                  ; Procedure Name : $MkDir
 15197                                  ; Inputs:
 15198                                  ;	DS:DX Points to asciz name
 15199                                  ; Function:
 15200                                  ;	Make a new directory
 15201                                  ; Returns:
 15202                                  ;	STD XENIX Return
 15203                                  ;	AX = mkdir_path_not_found if path bad
 15204                                  ;	AX = mkdir_access_denied  If
 15205                                  ;		Directory cannot be created
 15206                                  ;		Node already exists
 15207                                  ;		Device name given
 15208                                  ;		Disk or directory(root) full
 15209                                  ;---------------------------------------------------------------------------
 15210                                  
 15211                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15212                                  
 15213                                  _$MKDIR:
 15214 000021DA BE[5530]                	MOV	SI,DOS_MKDIR
 15215                                  DoDirCall:
 15216 000021DD BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15217                                  
 15218 000021E0 56                      	push	si
 15219 000021E1 89D6                    	MOV	SI,DX			; get source
 15220 000021E3 E80649                  	call	TransPath		; go munge the path
 15221 000021E6 5E                      	pop	si
 15222 000021E7 7305                    	JNC	short MkDirCrack	; no errors, try path
 15223                                  MkErrP:
 15224 000021E9 B003                    	MOV	AL,error_path_not_found	; oops!
 15225                                  MkErr:
 15226 000021EB E952E4                  	jmp	SYS_RET_ERR
 15227                                  MkDirCrack:
 15228 000021EE 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15229 000021F4 75F3                    	JNZ	short MkErrP
 15230                                  
 15231                                  	; MSDOS 3.3
 15232                                  	;push	ss
 15233                                  	;pop	ds
 15234                                  	;call	si
 15235                                  	;jb	short MkErr
 15236                                  	;;jmp	short mkdir_ok
 15237                                  	;jmp	SYS_RET_OK
 15238                                  
 15239                                  	; MSDOS 6.0
 15240 000021F6 56                      	PUSH	SI			;PTM.			;AN000;
 15241 000021F7 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15242 000021FA 5E                      	POP	SI			;PTM.			;AN000;
 15243 000021FB 7604                    	JBE	short pathok		;PTM.			;AN000;
 15244                                  	;mov	al,5
 15245 000021FD B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15246                                  	;jmp	SYS_RET_ERR		;PTM.
 15247 000021FF EBEA                    	jmp	short MkErr
 15248                                  pathok:
 15249 00002201 FFD6                    	CALL	SI			; go get file
 15250 00002203 72E6                    	JC	short MkErr		; no errors
 15251                                  	; 16/12/2022
 15252                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15253 00002205 EBD0                    	jmp	short mkdir_ok
 15254                                  	;jmp	SYS_RET_OK
 15255                                  
 15256                                  ;----------------------------------------------------------------------------
 15257                                  ;
 15258                                  ; Procedure Name : Check_PathLen
 15259                                  ;
 15260                                  ; Inputs:
 15261                                  ;	nothing
 15262                                  ; Function:
 15263                                  ;	check if final path length greater than 67
 15264                                  ; Returns:
 15265                                  ;	Above flag set if > 67
 15266                                  ;
 15267                                  ;---------------------------------------------------------------------------
 15268                                  
 15269                                  Check_PathLen:
 15270                                  	; 09/09/2018
 15271                                  	;mov	SI,[WFP_START]
 15272 00002207 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15273                                  Check_PathLen2:
 15274 0000220C 16                      	push	ss
 15275 0000220D 1F                      	pop	ds
 15276                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15277 0000220E 51                      	push	CX	
 15278 0000220F E8E7EF                  	CALL	DStrLen
 15279 00002212 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15280 00002215 59                      	POP	CX
 15281 00002216 C3                      	retn
 15282                                  
 15283                                  ;============================================================================
 15284                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15285                                  ;============================================================================
 15286                                  ; 07/08/2018 - Retro DOS v3.0
 15287                                  ; 17/05/2019 - Retro DOS v4.0
 15288                                  
 15289                                  ;**	IOCTL system call.
 15290                                  ;----------------------------------------------------------------------------
 15291                                  ;	$IOCTL
 15292                                  ;
 15293                                  ;	  Revision history:
 15294                                  ;
 15295                                  ;		Created: ARR 4 April 1983
 15296                                  ;
 15297                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15298                                  ;
 15299                                  ;		A000	version 4.00	Jan. 1988
 15300                                  ;
 15301                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15302                                  ;
 15303                                  
 15304                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15305                                  ;---------------------------------------------------------------------------
 15306                                  ;
 15307                                  ;   Assembler usage:
 15308                                  ;	    MOV     BX, Handle
 15309                                  ;	    MOV     DX, Data
 15310                                  ;
 15311                                  ;	(or LDS     DX,BUF
 15312                                  ;	    MOV     CX,COUNT)
 15313                                  ;
 15314                                  ;	    MOV     AH, Ioctl
 15315                                  ;	    MOV     AL, Request
 15316                                  ;	    INT     21h
 15317                                  ;
 15318                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15319                                  ;	    attribute word in DX, handle in BX:
 15320                                  ;	    DH = high word of device driver attributes
 15321                                  ;	    DL = low byte of sf_flags
 15322                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15323                                  ;	    in BX.
 15324                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15325                                  ;	    into DS:DX.  Return number read in AX.
 15326                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15327                                  ;	    DS:DX.  Return bytes written in AX.
 15328                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15329                                  ;	    into DS:DX.  Return number read in AX.
 15330                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15331                                  ;	    DS:DX.  Return bytes written in AX.
 15332                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15333                                  ;	    device, AL = 0FFh, otherwise 0.
 15334                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15335                                  ;	    device, AL = 0FFh, otherwise 0.
 15336                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15337                                  ;	    removable media, 0 otherwise.
 15338                                  ;	 9  Return the contents of the device attribute word in DX for the
 15339                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15340                                  ;	    network. 8000h is the bit for local use.
 15341                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15342                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15343                                  ;	    the count and CX is the delay.
 15344                                  ;
 15345                                  ;   Error returns:
 15346                                  ;	    AX = error_invalid_handle
 15347                                  ;	       = error_invalid_function
 15348                                  ;	       = error_invalid_data
 15349                                  ;
 15350                                  ;-------------------------------------------------------------------------------
 15351                                  ;
 15352                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15353                                  ;   than the above
 15354                                  ;
 15355                                  ;	There are several basic forms of IOCTL calls:
 15356                                  ;
 15357                                  ;
 15358                                  ;	** Get/Set device information:	**
 15359                                  ;
 15360                                  ;	ENTRY	(AL) = function code
 15361                                  ;		  0 - Get device information
 15362                                  ;		  1 - Set device information
 15363                                  ;		(BX) = file handle
 15364                                  ;		(DX) = info for "Set Device Information"
 15365                                  ;	EXIT	'C' set if error
 15366                                  ;		  (AX) = error code
 15367                                  ;		'C' clear if OK
 15368                                  ;		  (DX) = info for "Get Device Information"
 15369                                  ;	USES	ALL
 15370                                  ;
 15371                                  ;
 15372                                  ;	**  Read/Write Control Data From/To Handle  **
 15373                                  ;
 15374                                  ;	ENTRY	(AL) = function code
 15375                                  ;		  2 - Read device control info
 15376                                  ;		  3 - Write device control info
 15377                                  ;		(BX) = file handle
 15378                                  ;		(CX) = transfer count
 15379                                  ;		(DS:DX) = address for data
 15380                                  ;	EXIT	'C' set if error
 15381                                  ;		  (AX) = error code
 15382                                  ;		'C' clear if OK
 15383                                  ;		  (AX) = count of bytes transfered
 15384                                  ;	USES	ALL
 15385                                  ;
 15386                                  ;
 15387                                  ;	**  Read/Write Control Data From/To Block Device  **
 15388                                  ;
 15389                                  ;	ENTRY	(AL) = function code
 15390                                  ;		  4 - Read device control info
 15391                                  ;		  5 - Write device control info
 15392                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15393                                  ;		(CX) = transfer count
 15394                                  ;		(DS:DX) = address for data
 15395                                  ;	EXIT	'C' set if error
 15396                                  ;		  (AX) = error code
 15397                                  ;		'C' clear if OK
 15398                                  ;		  (AX) = count of bytes transfered
 15399                                  ;	USES	ALL
 15400                                  ;
 15401                                  ;
 15402                                  ;	**  Get Input/Output Status  **
 15403                                  ;
 15404                                  ;	ENTRY	(AL) = function code
 15405                                  ;		  6 - Get Input status
 15406                                  ;		  7 - Get Output Status
 15407                                  ;		(BX) = file handle
 15408                                  ;	EXIT	'C' set if error
 15409                                  ;		  (AX) = error code
 15410                                  ;		'C' clear if OK
 15411                                  ;		  (AL) = 00 if not ready
 15412                                  ;		  (AL) = FF if ready
 15413                                  ;	USES	ALL
 15414                                  ;
 15415                                  ;
 15416                                  ;	**  Get Drive Information  **
 15417                                  ;
 15418                                  ;	ENTRY	(AL) = function code
 15419                                  ;		  8 - Check for removable media
 15420                                  ;		  9 - Get device attributes
 15421                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15422                                  ;	EXIT	'C' set if error
 15423                                  ;		  (AX) = error code
 15424                                  ;		'C' clear if OK
 15425                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15426                                  ;		  (DX) = device attribute word (func. 9)
 15427                                  ;	USES	ALL
 15428                                  ;
 15429                                  ;
 15430                                  ;	**  Get Redirected bit	**
 15431                                  ;
 15432                                  ;	ENTRY	(AL) = function code
 15433                                  ;		  0Ah - Network stuff
 15434                                  ;		(BX) = file handle
 15435                                  ;	EXIT	'C' set if error
 15436                                  ;		  (AX) = error code
 15437                                  ;		'C' clear if OK
 15438                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15439                                  ;	USES	ALL
 15440                                  ;
 15441                                  ;
 15442                                  ;	**  Change sharer retry parameters  **
 15443                                  ;
 15444                                  ;	ENTRY	(AL) = function code
 15445                                  ;		  0Bh - Set retry parameters
 15446                                  ;		(CX) = retry loop count
 15447                                  ;		(DX) = number of retries
 15448                                  ;	EXIT	'C' set if error
 15449                                  ;		  (AX) = error code
 15450                                  ;		'C' clear if OK
 15451                                  ;	USES	ALL
 15452                                  ;
 15453                                  ;
 15454                                  ;   =================================================================
 15455                                  ;
 15456                                  ;	**  New Standard Control  **
 15457                                  ;
 15458                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15459                                  ;	FORMS ARE OBSOLETE.
 15460                                  ;
 15461                                  ;   =================================================================
 15462                                  ;
 15463                                  ;	ENTRY	(AL) = function code
 15464                                  ;		  0Ch - Control Function subcode
 15465                                  ;		(BX) = File Handle
 15466                                  ;		(CH) = Category Indicator
 15467                                  ;		(CL) = Function within category
 15468                                  ;		(DS:DX) = address for data, if any
 15469                                  ;		(SI) = Passed to device as argument, use depends upon function
 15470                                  ;		(DI) = Passed to device as argument, use depends upon function
 15471                                  ;	EXIT	'C' set if error
 15472                                  ;		  (AX) = error code
 15473                                  ;		'C' clear if OK
 15474                                  ;		  (SI) = Return value, meaning is function dependent
 15475                                  ;		  (DI) = Return value, meaning is function dependent
 15476                                  ;		  (DS:DX) = Return address, use is function dependent
 15477                                  ;	USES	ALL
 15478                                  ;
 15479                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15480                                  ;     (See inc\ioctl.inc for more info)
 15481                                  ;
 15482                                  ;	ENTRY	(AL) = function code
 15483                                  ;		  0Dh - Control Function subcode
 15484                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15485                                  ;		(CH) = Category Indicator
 15486                                  ;		(CL) = Function within category
 15487                                  ;		(DS:DX) = address for data, if any
 15488                                  ;		(SI) = Passed to device as argument, use depends upon function
 15489                                  ;		(DI) = Passed to device as argument, use depends upon function
 15490                                  ;
 15491                                  ;	EXIT	'C' set if error
 15492                                  ;		  (AX) = error code
 15493                                  ;		'C' clear if OK
 15494                                  ;		  (DS:DX) = Return address, use is function dependent
 15495                                  ;	USES	ALL
 15496                                  ;
 15497                                  ;---------------------------------------------------------------------------
 15498                                  	
 15499                                  	; 17/05/2019 - Retro DOS v4.0
 15500                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15501                                  
 15502                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15503                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15504                                  
 15505                                  IOCTLJMPTABLE:	;label	word
 15506                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15507 00002217 [5322]                  	dw	ioctl_getset_data	; 0
 15508 00002219 [5322]                  	dw	ioctl_getset_data   	; 1
 15509 0000221B [A322]                  	dw	ioctl_control_string	; 2
 15510 0000221D [A322]                  	dw	ioctl_control_string	; 3
 15511 0000221F [F123]                  	dw	ioctl_get_dev		; 4
 15512 00002221 [F123]                  	dw	ioctl_get_dev		; 5
 15513 00002223 [BD22]                  	dw	ioctl_status		; 6
 15514 00002225 [BD22]                  	dw	ioctl_status		; 7
 15515 00002227 [5E23]                  	dw	ioctl_rem_media		; 8
 15516 00002229 [9923]                  	dw	ioctl_drive_attr	; 9
 15517 0000222B [E323]                  	dw	ioctl_handle_redir	; A
 15518 0000222D [D922]                  	dw	Set_Retry_Parameters	; B
 15519 0000222F [E722]                  	dw	GENERICIOCTLHANDLE	; C
 15520 00002231 [FE22]                  	dw	GENERICIOCTL		; D
 15521                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15522 00002233 [9424]                  	dw	ioctl_drive_owner	; E
 15523 00002235 [9424]                  	dw	ioctl_drive_owner	; F
 15524                                  	; MSDOS 6.0
 15525 00002237 [E722]                  	dw	query_handle_support	; 10h
 15526 00002239 [FE22]                  	dw	query_device_support	; 11h
 15527                                  
 15528                                  	; 11/11/2022
 15529                                  _$IOCTL:
 15530 0000223B 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15531 0000223D 16                      	push	ss
 15532 0000223E 1F                      	pop	ds			;hkn; SS is DOSDATA
 15533                                  
 15534                                  	; MSDOS 3.3
 15535                                  	;cmp	al,0Fh 
 15536                                  	; MSDOS 6.0
 15537 0000223F 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15538 00002241 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15539                                  
 15540                                  	; 14/01/2024
 15541                                  	; 28/05/2019
 15542                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15543 00002243 89C7                    	mov	di,ax			; di NOT a PARM
 15544 00002245 81E7FF00                	and	di,0FFh			; di = al
 15545 00002249 D1E7                    	shl	di,1			; di = index into jmp table
 15546                                  	;pop	AX			; Restore AL for generic IOCTL
 15547                                  
 15548 0000224B 2EFFA5[1722]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15549                                  
 15550                                  ioctl_bad_funj2:
 15551 00002250 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15552                                  
 15553                                  ;--------------------------------------------------------------------------
 15554                                  ;
 15555                                  ; IOCTL: AL = 0,1
 15556                                  ;
 15557                                  ; ENTRY: DS = DOSDATA
 15558                                  ;
 15559                                  ;--------------------------------------------------------------------------
 15560                                  
 15561                                  ioctl_getset_data:
 15562                                  	; MSDOS 6.0
 15563 00002253 E89B43                  	call	SFFromHandle		; ES:DI -> SFT
 15564 00002256 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15565                                  ioctl_bad_handle:
 15566                                  	;mov	al,6
 15567 00002258 B006                    	mov	al,error_invalid_handle
 15568                                  ioctl_error:
 15569 0000225A E9E3E3                  	jmp	SYS_RET_ERR
 15570                                  
 15571                                  ioctl_check_permissions:
 15572 0000225D 3C00                    	CMP	AL,0
 15573                                  	;mov	al,[es:di+5]
 15574 0000225F 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15575 00002263 741B                    	JZ	short ioctl_read	; read the byte
 15576                                  
 15577 00002265 08F6                    	or	dh,dh
 15578 00002267 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15579                                  	;mov	al,0Dh
 15580 00002269 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15581                                  	;jmp	SYS_RET_ERR
 15582 0000226B EBED                    	jmp	short ioctl_error
 15583                                  
 15584                                  ioctl_check_device:
 15585 0000226D A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15586 0000226F 74DF                    	jz	short ioctl_bad_funj2
 15587 00002271 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15588                                  					;   device bit!! He can muck with the
 15589                                  					;   others at will.
 15590 00002274 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15591 00002279 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15592                                  ioctl_ok:
 15593 0000227D E9B7E3                  	jmp	SYS_RET_OK
 15594                                  
 15595                                  ioctl_read:
 15596 00002280 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15597 00002285 30E4                    	XOR	AH,AH
 15598 00002287 A880                    	test	AL,devid_device 	; Should I set high byte
 15599 00002289 740D                    	JZ	short ioctl_no_high	; no
 15600 0000228B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15601                                  	;les	di,[es:di+7]
 15602 00002290 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15603                                  	;mov	ah,[es:di+5]
 15604 00002294 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15605                                  ioctl_no_high:
 15606 00002298 89C2                    	MOV	DX,AX
 15607                                  ioctl_set_dx:	; 16/12/2022
 15608 0000229A E8E4E1                  	call	Get_User_Stack
 15609                                  	;mov	[si+6],dx
 15610 0000229D 895406                  	MOV	[SI+user_env.user_DX],DX
 15611                                  	;;jmp	SYS_RET_OK
 15612                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15613                                  ioctl_ok_j:
 15614                                  	; 16/12/2022
 15615 000022A0 E997E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15616                                  	;jmp	short ioctl_ok
 15617                                  	; 26/07/2019
 15618                                  	;jmp	SYS_RET_OK_clc
 15619                                  
 15620                                  ;--------------------------------------------------------------------------
 15621                                  ;
 15622                                  ; IOCTL: AL = 2,3
 15623                                  ;
 15624                                  ; ENTRY: DS = DOSDATA
 15625                                  ;	 SI = user's DS
 15626                                  ;
 15627                                  ;--------------------------------------------------------------------------
 15628                                  
 15629                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15630                                  ioctl_control_string:
 15631 000022A3 E84B43                  	call	SFFromHandle		; ES:DI -> SFT
 15632 000022A6 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15633                                  	; 07/12/2022
 15634                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15635                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15636                                  	; MSDOS 5.0 & MSDOS 6.0
 15637 000022A8 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15638 000022AD 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15639 000022AF C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15640 000022B4 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15641 000022B8 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15642 000022BA E93C01                  	JMP	ioctl_do_string
 15643                                  
 15644                                  ;--------------------------------------------------------------------------
 15645                                  ;
 15646                                  ; IOCTL: AL = 6,7
 15647                                  ;
 15648                                  ; ENTRY: DS = DOSDATA
 15649                                  ;
 15650                                  ;--------------------------------------------------------------------------
 15651                                  
 15652                                  ioctl_status:
 15653 000022BD B401                    	MOV	AH,1
 15654 000022BF 2C06                    	SUB	AL,6			; 6=0,7=1
 15655 000022C1 7402                    	JZ	short ioctl_get_status
 15656 000022C3 B403                    	MOV	AH,3
 15657                                  ioctl_get_status:
 15658 000022C5 50                      	PUSH	AX
 15659 000022C6 E80F13                  	call	GET_IO_SFT
 15660 000022C9 58                      	POP	AX
 15661                                  	;JNC	short DO_IOFUNC
 15662                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15663                                  	; 16/12/2022
 15664 000022CA 728C                    	jc	short ioctl_bad_handle
 15665                                  DO_IOFUNC:
 15666 000022CC E84B21                  	call	IOFUNC
 15667 000022CF 88C4                    	MOV	AH,AL
 15668 000022D1 B0FF                    	MOV	AL,0FFH
 15669                                  	;JNZ	short ioctl_status_ret
 15670                                  	; 29/01/2024
 15671 000022D3 75A8                    	jnz	short ioctl_ok
 15672 000022D5 FEC0                    	INC	AL
 15673                                  ioctl_status_ret:
 15674                                  	;jmp	SYS_RET_OK
 15675                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15676                                  	;jmp	short ioctl_ok_j
 15677                                  	; 16/12/2022
 15678 000022D7 EBA4                    	jmp	short ioctl_ok
 15679                                  
 15680                                  ;--------------------------------------------------------------------------
 15681                                  ;
 15682                                  ; IOCTL: AL = B
 15683                                  ;
 15684                                  ; ENTRY: DS = DOSDATA
 15685                                  ;
 15686                                  ;--------------------------------------------------------------------------
 15687                                  
 15688                                  Set_Retry_Parameters:
 15689                                  	; 09/09/2018
 15690 000022D9 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15691 000022DD 09D2                    	OR	DX,DX			; zero retries not allowed
 15692 000022DF 7475                    	JZ	short ioctl_bad_fun
 15693 000022E1 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15694                                  doneok:
 15695                                  	;jmp	SYS_RET_OK		; Done
 15696                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15697                                  	;jmp	short ioctl_status_ret
 15698                                  	; 16/12/2022
 15699 000022E5 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15700                                  
 15701                                  ;--------------------------------------------------------------------------
 15702                                  ;
 15703                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15704                                  ;
 15705                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15706                                  ;	SI:DX -> Users Device Parameter Table
 15707                                  ;	IOCALL -> IOCTL_Req structure
 15708                                  ;
 15709                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15710                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15711                                  ;	call.
 15712                                  ;
 15713                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15714                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15715                                  ;         return address off the stack if the drive is invalid.
 15716                                  ;
 15717                                  ;--------------------------------------------------------------------------
 15718                                  
 15719                                  query_handle_support:	; Entry point for handles
 15720                                  GENERICIOCTLHANDLE:
 15721 000022E7 E80743                  	call	SFFromHandle		; Get SFT for device.
 15722 000022EA 726F                    	jc	short ioctl_bad_handlej
 15723                                  
 15724                                  	;test	word [es:di+5],8000h
 15725                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15726                                  	;test	byte [es:di+6],80h
 15727 000022EC 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15728 000022F1 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15729                                  
 15730 000022F3 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15731                                  	;les	di,[es:di+7]
 15732 000022F8 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15733 000022FC EB0F                    	jmp	short Do_GenIOCTL
 15734                                  
 15735                                  query_device_support:	; Entry point for devices:
 15736                                  GENERICIOCTL:
 15737 000022FE C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15738 00002303 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15739 00002306 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15740                                  
 15741 00002308 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15742 0000230B 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15743                                  
 15744                                  Do_GenIOCTL:
 15745                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15746                                  					; Can device handle Generic IOCTL funcs
 15747                                  	; 09/09/2018
 15748                                  	;test	byte [es:di+4],40h
 15749 0000230D 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15750 00002312 7442                    	jz	short ioctl_bad_fun
 15751                                  
 15752                                  	; 17/05/2019 - Retro DOS v4.0
 15753                                  
 15754                                  	; MSDOS 6.0
 15755                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15756 00002314 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15757                                  	;cmp	al,10h
 15758 00002319 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15759 0000231B 7C0C                    	jl	short SetIOCtlBlock
 15760                                  	
 15761                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15762                                  	;test	byte [es:di+4],80h 
 15763 0000231D 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15764 00002322 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15765                                  	;
 15766                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15767 00002324 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15768                                  
 15769                                  SetIOCtlBlock:
 15770 00002329 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15771 0000232A 57                      	PUSH	DI			; in DS:SI
 15772                                  					; Setup Generic IOCTL Request Block
 15773                                  	;mov	byte [IOCALL_REQLEN],23
 15774 0000232B C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15775                                  	; 07/09/2018 (MSDOS 3.3)
 15776                                  	;;mov	byte [IOCALL_REQFUNC],19
 15777                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15778                                  	;
 15779 00002330 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15780 00002334 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15781 00002338 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15782 0000233C 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15783 00002340 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15784 00002344 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15785 00002348 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15786                                  
 15787                                  ;hkn; IOCALL is in DOSDATA
 15788 0000234C BB[7C03]                	MOV	BX,IOCALL
 15789                                  
 15790 0000234F 16                      	PUSH	SS
 15791 00002350 07                      	POP	ES
 15792                                  					; DS:SI -> Device header.
 15793 00002351 5E                      	POP	SI
 15794 00002352 1F                      	POP	DS
 15795                                  	; 10/08/2018
 15796 00002353 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15797                                  
 15798                                  ioctl_bad_fun:
 15799 00002356 B001                    	mov	al, error_invalid_function  ; 1
 15800 00002358 E9E5E2                  	jmp	SYS_RET_ERR	
 15801                                  
 15802                                  ioctl_bad_handlej:
 15803 0000235B E9FAFE                  	jmp	ioctl_bad_handle
 15804                                  
 15805                                  ;---------------------------------------------------------------------------
 15806                                  ;
 15807                                  ; IOCTL: AL = 8
 15808                                  ;
 15809                                  ; ENTRY: DS = DOSDATA
 15810                                  ;
 15811                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15812                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15813                                  ;         return address off the stack if the drive is invalid.
 15814                                  ;
 15815                                  ;-------------------------------------------------------------------------
 15816                                  
 15817                                  	; 30/01/2024
 15818                                  ioctl_rem_media:
 15819                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15820 0000235E E82401                  	CALL	Check_If_Net
 15821 00002361 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15822                                  					;   certainly don't know how to do this
 15823                                  					;   call.
 15824                                  	;test	word [es:di+4],800h
 15825                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15826                                  	;test	byte [es:di+5],8
 15827 00002363 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15828 00002368 74EC                    	JZ	short ioctl_bad_fun		; NO
 15829                                  
 15830                                  ;hkn; SS override for IOCALL
 15831                                  	; 30/01/2024
 15832                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15833                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15834 0000236A C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15835 0000236F B00D                    	MOV	AL,REMHL  ; 13
 15836 00002371 88DC                    	MOV	AH,BL			; Unit number
 15837                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15838 00002373 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15839 00002376 31C0                    	XOR	AX,AX
 15840                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15841 00002378 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15842                                  	
 15843 0000237B 06                      	PUSH	ES
 15844 0000237C 1F                      	POP	DS
 15845 0000237D 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15846 0000237F 16                      	PUSH	SS
 15847 00002380 07                      	POP	ES
 15848                                  
 15849                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15850                                  	; 30/01/2024
 15851                                  	; (ds <> ss, ss = DOSDATA segment)
 15852 00002381 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15853 00002384 1E                      	push	ds
 15854 00002385 56                      	push	si
 15855 00002386 E86622                  	call	DEVIOCALL2
 15856 00002389 5E                      	pop	si
 15857 0000238A 1F                      	pop	ds
 15858                                  
 15859                                  ;hkn; SS override
 15860 0000238B 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15861                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15862                                  	; 29/01/2024
 15863 0000238F 80E402                  	and	ah,STBUI>>8
 15864 00002392 B109                    	MOV	CL,9
 15865 00002394 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15866                                  ioctl_da_ok_j:	; 11/11/2022
 15867 00002396 E99EE2                  	jmp	SYS_RET_OK
 15868                                  
 15869                                  ;-------------------------------------------------------------------------
 15870                                  ;
 15871                                  ; IOCTL: AL = 9
 15872                                  ;
 15873                                  ; ENTRY: DS = DOSDATA
 15874                                  ;
 15875                                  ;-------------------------------------------------------------------------
 15876                                  
 15877                                  ioctl_drive_attr:
 15878                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15879 00002399 88D8                    	mov	al,bl
 15880 0000239B E87746                  	call	GETTHISDRV
 15881 0000239E 723E                    	jc	short ioctl_drv_err
 15882 000023A0 E8B500                  	call	Get_Driver_BL
 15883                                  	; MSDOS 6.0
 15884 000023A3 7239                    	JC	short ioctl_drv_err	; drive not valid
 15885                                  
 15886                                  	;mov	dx,[es:di+4]
 15887 000023A5 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15888                                  					; get device attribute word
 15889 000023A9 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15890                                  
 15891                                  ;hkn; SS override
 15892                                  	;LES	DI,[SS:THISCDS]
 15893                                  	; 30/01/2024
 15894 000023AB C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15895                                  
 15896                                  	;test	word [es:di+43h],8000h
 15897                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15898                                  	;test	byte [es:di+44h],80h
 15899 000023AF 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15900 000023B4 7403                    	JZ	short IOCTLShare
 15901                                  
 15902                                  	;or	dx,1000h ; (MSDOS 3.3)
 15903                                  
 15904                                  ;	Net devices don't return a device attribute word.
 15905                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15906                                  
 15907 000023B6 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15908                                  
 15909                                  IOCTLShare:
 15910                                  	; 30/01/2024
 15911                                  	; ds = ss = DOSDATA segment
 15912                                  	;push	ss
 15913                                  	;pop	ds
 15914                                  
 15915 000023B9 BE[BE03]                	MOV	SI,OPENBUF
 15916 000023BC 80C341                  	ADD	BL,"A"	; 41h
 15917 000023BF 881C                    	MOV	[SI],BL
 15918 000023C1 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15919 000023C6 B80003                  	MOV	AX,0300h
 15920 000023C9 F8                      	CLC
 15921                                  	;INT	int_IBM
 15922 000023CA CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15923                                  			; DS:SI -> ASCIZ disk device name 
 15924                                  			; (may be full path or only drive
 15925                                  			; specifier--must include the colon)
 15926                                  			; Return: CF clear if absolute disk access allowed
 15927 000023CC 7303                    	JNC	short IOCTLLocal	; Not shared
 15928                                  	;OR	DX,0200H		; Shared, bit 9
 15929                                  	; 17/12/2022
 15930 000023CE 80CE02                  	or	dh,02h
 15931                                  IOCTLLocal:
 15932                                  	;test	word [es:di+43h],1000h
 15933                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15934                                  	;test	byte [es:di+44h],10h
 15935 000023D1 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15936                                  	;JZ	short ioctl_set_DX
 15937                                  	; 16/12/2022
 15938 000023D6 7403                    	jz	short _ioctl_set_DX
 15939                                  	;OR	DX,8000h
 15940                                  	; 17/12/2022
 15941 000023D8 80CE80                  	or	dh,80h
 15942                                  ;ioctl_set_DX:
 15943                                  _ioctl_set_DX:
 15944                                  	; 16/12/2022
 15945 000023DB E9BCFE                  	jmp	ioctl_set_dx
 15946                                  ; 16/12/2022
 15947                                  %if 0	
 15948                                  	call	Get_User_Stack
 15949                                  	MOV	[SI+user_env.user_DX],DX
 15950                                  	;;jmp	SYS_RET_OK
 15951                                  	;; 25/06/2019
 15952                                  	;jmp	SYS_RET_OK_clc
 15953                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15954                                  ioctl_gd_ok_j:
 15955                                  	jmp	short ioctl_da_ok_j
 15956                                  %endif
 15957                                  
 15958                                  ioctl_drv_err:
 15959 000023DE B00F                    	mov	al,error_invalid_drive ; 0Fh
 15960                                  ioctl_gd_err_j:	; 11/11/2022
 15961 000023E0 E95DE2                  	jmp	SYS_RET_ERR
 15962                                  
 15963                                  ;--------------------------------------------------------------------------
 15964                                  ;
 15965                                  ; IOCTL: AL = A
 15966                                  ;
 15967                                  ; ENTRY: DS = DOSDATA
 15968                                  ;
 15969                                  ;--------------------------------------------------------------------------
 15970                                  
 15971                                  ioctl_handle_redir:
 15972 000023E3 E80B42                  	call	SFFromHandle		; ES:DI -> SFT
 15973 000023E6 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15974 000023E8 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15975                                  
 15976                                  ioctl_got_sft:
 15977                                  	;mov	dx,[es:di+5]
 15978 000023EB 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15979                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15980                                  	; 16/12/2022
 15981 000023EF EBEA                    	jmp	short _ioctl_set_DX
 15982                                  
 15983                                  	; 16/12/2022
 15984                                  ;ioctl_bad_funj:
 15985                                  	;JMP	ioctl_bad_fun
 15986                                  
 15987                                  ;--------------------------------------------------------------------------
 15988                                  ;
 15989                                  ; IOCTL: AL= 4,5
 15990                                  ;
 15991                                  ; ENTRY: DS = DOSDATA
 15992                                  ;	 SI = user's DS
 15993                                  ;
 15994                                  ;
 15995                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15996                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15997                                  ;         return address off the stack if the drive is invalid.
 15998                                  ;
 15999                                  ;-------------------------------------------------------------------------
 16000                                  
 16001                                  ioctl_get_dev:
 16002 000023F1 E89100                  	CALL	Check_If_Net
 16003                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16004                                  					; certainly don't know how to do this
 16005                                  					; call.
 16006                                  	; 16/12/2022
 16007 000023F4 7403                    	jz	short ioctl_do_string
 16008                                  ioctl_bad_funj:
 16009 000023F6 E95DFF                  	JMP	ioctl_bad_fun
 16010                                  
 16011                                  ioctl_do_string:
 16012                                  	;test	word [es:di+4],4000h
 16013                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16014                                  	;test	byte [es:di+5],40h
 16015 000023F9 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16016 000023FE 74F6                    	JZ	short ioctl_bad_funj		; NO
 16017                                  					; assume IOCTL read
 16018 00002400 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16019                                  
 16020 00002405 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16021 00002407 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16022                                  
 16023                                  					; it is an IOCTL write
 16024 00002409 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16025                                  
 16026                                  ioctl_control_call:
 16027 0000240E B016                    	MOV	AL,DRDWRHL ; 22
 16028                                  ioctl_setup_pkt:
 16029 00002410 88DC                    	MOV	AH,BL			; Unit number
 16030 00002412 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16031 00002415 31C0                    	XOR	AX,AX
 16032 00002417 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16033 0000241A A2[8903]                	MOV	[IOMED],AL
 16034 0000241D 890E[8E03]              	MOV	[IOSCNT],CX
 16035 00002421 8916[8A03]              	MOV	[IOXAD],DX
 16036 00002425 8936[8C03]              	MOV	[IOXAD+2],SI
 16037 00002429 06                      	PUSH	ES
 16038 0000242A 1F                      	POP	DS
 16039 0000242B 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16040 0000242D 16                      	PUSH	SS
 16041 0000242E 07                      	POP	ES
 16042                                  
 16043 0000242F BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16044                                  ioctl_do_IO:
 16045 00002432 E8BA21                  	call	DEVIOCALL2
 16046                                  
 16047                                  ;hkn; SS override for IOCALL
 16048                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16049                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16050                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16051 00002435 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16052 0000243B 7507                    	JNZ	short ioctl_string_err
 16053                                  
 16054                                  ;hkn; SS override
 16055 0000243D 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16056                                  	; 16/12/2022
 16057 00002441 E9F3E1                  	jmp	SYS_RET_OK
 16058                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16059                                  	;jmp	short ioctl_gd_ok_j
 16060                                  
 16061                                  ioctl_string_err:
 16062 00002444 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16063                                  device_err:
 16064 00002449 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16065 0000244D 89F8                    	MOV	AX,DI
 16066 0000244F E82C30                  	call	SET_I24_EXTENDED_ERROR
 16067                                  
 16068                                  ;hkn; use SS override
 16069                                  ;hkn;	mov	ax,[CS:EXTERR]
 16070 00002452 36A1[2403]              	mov	ax,[SS:EXTERR]
 16071                                  	;jmp	SYS_RET_ERR
 16072                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16073 00002456 EB88                    	jmp	short ioctl_gd_err_j
 16074                                  
 16075                                  ; 17/05/2019 - Retro DOS v4.0
 16076                                  
 16077                                  ;--------------------------------------------------------------------------
 16078                                  ; Proc name : Get_Driver_BL
 16079                                  ;
 16080                                  ;	DS is DOSDATA
 16081                                  ;	BL is drive number (0=default)
 16082                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16083                                  ;	No regs modified
 16084                                  ;
 16085                                  ;---------------------------------------------------------------------------
 16086                                  
 16087                                  	; 30/01/2024
 16088                                  Get_Driver_BL:
 16089 00002458 50                      	PUSH	AX
 16090 00002459 88D8                    	MOV	AL,BL			; Drive
 16091 0000245B E8B745                  	call	GETTHISDRV
 16092 0000245E 7223                    	jc	short ioctl_bad_drv
 16093 00002460 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16094 00002462 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16095 00002467 C43E[A205]              	LES	DI,[THISCDS]
 16096                                  	;test	word [es:di+43h],8000h
 16097                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16098                                  	;test	byte [es:di+44h],80h
 16099 0000246B 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16100                                  	;les	di,[es:di+45h]
 16101 00002470 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16102 00002474 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16103 00002476 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16104                                  	;mov	bl,[es:di+1]
 16105 0000247B 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16106                                  	;les	di,[es:di+13h]
 16107 0000247F 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16108                                  got_dev_ptr:
 16109                                  	; 30/01/2024
 16110                                  	; cf=0
 16111                                  	;CLC
 16112                                  ioctl_bad_drv:
 16113 00002483 58                      	POP	AX
 16114 00002484 C3                      	retn
 16115                                  
 16116                                  ;-------------------------------------------------------------------------
 16117                                  ; Proc Name : Check_If_Net:
 16118                                  ;
 16119                                  ;
 16120                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16121                                  ; If no device is found, the return address is popped off the stack, and a
 16122                                  ; jump is made to ioctl_drv_err.
 16123                                  ;
 16124                                  ; On Entry:
 16125                                  ; Registers same as those for Get_Driver_BL
 16126                                  ;
 16127                                  ; On Exit:
 16128                                  ; ZERO flag	- set if not a net device
 16129                                  ;		- reset if net device
 16130                                  ; ES:DI -> the device
 16131                                  ;
 16132                                  ;
 16133                                  ; BUGBUG: This function assumes the following stack setup on entry
 16134                                  ;
 16135                                  ;	  SP+2 -> Error return address
 16136                                  ;	  SP   -> Normal return address
 16137                                  ;
 16138                                  ;-------------------------------------------------------------------------
 16139                                  
 16140                                  	; 30/01/2024 - Retro DOS v5.0
 16141                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16142                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16143                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16144                                  
 16145                                  Check_If_Net:
 16146                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16147 00002485 E8D0FF                  	CALL	Get_Driver_BL
 16148 00002488 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16149                                  
 16150                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16151                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16152                                  %if 0
 16153                                  	;;;
 16154                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16155                                  	PUSH	ES
 16156                                  	PUSH	DI
 16157                                  	LES	DI,[THISCDS]
 16158                                  	;test	word [es:di+43h],8000h
 16159                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16160                                  	;test	byte [es:di+44h],80h
 16161                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16162                                  	POP	DI
 16163                                  	POP	ES
 16164                                  	;;;
 16165                                  %endif
 16166 0000248A C3                      	retn
 16167                                  
 16168                                  ioctl_drv_err_pop:
 16169 0000248B 58                      	pop	ax			; pop off return address
 16170 0000248C E94FFF                  	jmp	ioctl_drv_err
 16171                                  
 16172                                  ioctl_bad_funj3:
 16173 0000248F E9C4FE                  	jmp	ioctl_bad_fun
 16174                                  
 16175                                  ioctl_string_errj:
 16176 00002492 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16177                                  
 16178                                  ;--------------------------------------------------------------------------
 16179                                  ;
 16180                                  ; IOCTL: AL = E, F
 16181                                  ;
 16182                                  ; ENTRY: DS = DOSDATA
 16183                                  ;
 16184                                  ;
 16185                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16186                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16187                                  ;         return address off the stack if the drive is invalid.
 16188                                  ;
 16189                                  ;--------------------------------------------------------------------------
 16190                                  
 16191                                  ioctl_drive_owner:
 16192                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16193 00002494 E8EEFF                  	Call	Check_If_Net
 16194 00002497 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16195                                  					;   certainly don't know how to do this
 16196                                  					;   call.
 16197                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16198                                  	; 09/09/2018
 16199                                  	;test	byte [es:di+4],40h
 16200 00002499 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16201 0000249E 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16202                                  	;mov	byte [IOCALL_REQFUNC],23
 16203 000024A0 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16204 000024A5 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16205 000024A7 7405                    	jz	short GetOwner
 16206                                  SetOwner:
 16207 000024A9 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16208                                  GetOwner:
 16209 000024AE B00D                    	MOV	AL,OWNHL ; 13
 16210 000024B0 88DC                    	MOV	AH,BL			; Unit number
 16211 000024B2 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16212 000024B5 31C0                    	XOR	AX,AX
 16213 000024B7 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16214 000024BA 06                      	PUSH	ES
 16215 000024BB 1F                      	POP	DS
 16216 000024BC 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16217 000024BE 16                      	PUSH	SS
 16218 000024BF 07                      	POP	ES
 16219 000024C0 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16220 000024C3 1E                      	push	ds
 16221 000024C4 56                      	push	si
 16222 000024C5 E82721                  	call	DEVIOCALL2
 16223 000024C8 5E                      	pop	si
 16224 000024C9 1F                      	pop	ds
 16225                                  ;hkn; SS override
 16226                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16227                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16228 000024CA 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16229 000024D0 75C0                    	jnz	short ioctl_string_errj
 16230 000024D2 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16231                                  					; owner returned is 1-based.
 16232 000024D6 E95EE1                  	jmp	SYS_RET_OK
 16233                                  
 16234                                  ;============================================================================
 16235                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16236                                  ;============================================================================
 16237                                  ; 07/08/2018 - Retro DOS v3.0
 16238                                  ; 17/05/2019 - Retro DOS v4.0
 16239                                  
 16240                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16241                                  ;	NAME	DOS_DELETE
 16242                                  
 16243                                  ;
 16244                                  ;	Microsoft Confidential
 16245                                  ;	Copyright (C) Microsoft Corporation 1991
 16246                                  ;	All Rights Reserved.
 16247                                  ;
 16248                                  
 16249                                  ;**	DELETE.ASM - Low level routine for deleting files
 16250                                  ;----------------------------------------------------------------------------
 16251                                  ;		DOS_DELETE
 16252                                  ;		REN_DEL_Check
 16253                                  ;		FastOpen_Delete	       ; DOS 3.3
 16254                                  ;		FastOpen_Update	       ; DOS 3.3
 16255                                  
 16256                                  ;   Revision history:
 16257                                  ;
 16258                                  ;   A000  version 4.00	Jan. 1988
 16259                                  ;   A001  Fastopen Rename fix	April 1989
 16260                                  
 16261                                  ;Installed = TRUE
 16262                                  
 16263                                  ;	i_need	NoSetDir,BYTE
 16264                                  ;	i_need	Creating,BYTE
 16265                                  ;	i_need	DELALL,BYTE
 16266                                  ;	i_need	THISDPB,DWORD
 16267                                  ;	i_need	THISSFT,DWORD
 16268                                  ;	i_need	THISCDS,DWORD
 16269                                  ;	i_need	CURBUF,DWORD
 16270                                  ;	i_need	ATTRIB,BYTE
 16271                                  ;	i_need	SATTRIB,BYTE
 16272                                  ;	i_need	WFP_START,WORD
 16273                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16274                                  ;	i_need	NAME1,BYTE			 ;BN001
 16275                                  ;	i_need	FoundDel,BYTE
 16276                                  ;	i_need	AUXSTACK,BYTE
 16277                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16278                                  ;	i_need	JShare,DWORD
 16279                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16280                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16281                                  ;
 16282                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16283                                  ;
 16284                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16285                                  ;	i_need	DMAADD,DWORD
 16286                                  ;	i_need	RENAMEDMA,BYTE
 16287                                  
 16288                                  ;----------------------------------------------------------------------------
 16289                                  ;
 16290                                  ; Procedure Name : DOS_DELETE
 16291                                  ;
 16292                                  ; Inputs:
 16293                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16294                                  ;		terminated)
 16295                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16296                                  ;		( = -1 if current dir not involved, else
 16297                                  ;		 Points to first char after last "/" of current dir part)
 16298                                  ;	[THISCDS] Points to CDS being used
 16299                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16300                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16301                                  ; Function:
 16302                                  ;	Delete the specified file(s)
 16303                                  ; Outputs:
 16304                                  ;	CARRY CLEAR
 16305                                  ;		OK
 16306                                  ;	CARRY SET
 16307                                  ;	    AX is error code
 16308                                  ;		error_file_not_found
 16309                                  ;			Last element of path not found
 16310                                  ;		error_path_not_found
 16311                                  ;			Bad path (not in curr dir part if present)
 16312                                  ;		error_bad_curr_dir
 16313                                  ;			Bad path in current directory part of path
 16314                                  ;		error_access_denied
 16315                                  ;			Attempt to delete device or directory
 16316                                  ;		***error_sharing_violation***
 16317                                  ;			Deny both access required, generates an INT 24.
 16318                                  ;			This error is NOT returned. The INT 24H is generated,
 16319                                  ;			  and the file is ignored (not deleted). Delete will
 16320                                  ;			  simply continue on looking for more files.
 16321                                  ;			  Carry will NOT be set in this case.
 16322                                  ; DS preserved, others destroyed
 16323                                  ;
 16324                                  ;----------------------------------------------------------------------------
 16325                                  
 16326                                  FILEFOUND   equ 01h
 16327                                  FILEDELETED equ 10h
 16328                                  
 16329                                  
 16330                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16331                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16332                                  
 16333                                  	; 30/01/2024
 16334                                  
 16335                                  DOS_DELETE:
 16336                                  
 16337                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16338                                  ;hkn; appropriately at this point.
 16339                                  
 16340 000024D9 E86FED                  	call	TestNet
 16341 000024DC 7306                    	JNC	short LOCAL_DELETE
 16342                                  
 16343                                  ;IF NOT Installed
 16344                                  ;	transfer NET_DELETE
 16345                                  ;ELSE
 16346                                  	;MOV	AX,(MultNET SHL 8) | 19
 16347                                  	;INT	2FH
 16348                                  	;return
 16349                                  
 16350 000024DE B81311                  	mov	ax,1113h
 16351 000024E1 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16352                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16353                                  			;		fully-qualified filename in DOS CS
 16354                                  			; SDA CDS pointer -> current directory structure for drive with file
 16355                                  			; Return: CF set on error
 16356 000024E3 C3                      	retn
 16357                                  ;ENDIF
 16358                                  
 16359                                  LOCAL_DELETE:
 16360 000024E4 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16361 000024E9 E821EE                  	call	ECritDisk
 16362                                  	;mov	word [CREATING],0E500h
 16363 000024EC C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16364 000024F2 8B36[B205]              	MOV	SI,[WFP_START]
 16365                                  SKPNUL:
 16366 000024F6 AC                      	LODSB
 16367 000024F7 08C0                    	OR	AL,AL
 16368 000024F9 75FB                    	JNZ	short SKPNUL		; go to end
 16369 000024FB 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16370 000024FE 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16371 00002502 7506                    	JNZ	short TEST_QUEST
 16372 00002504 807C022A                	CMP	BYTE [SI+2],"*"
 16373 00002508 741F                    	JZ	short CHECK_ATTS
 16374                                  TEST_QUEST:
 16375 0000250A 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16376 0000250D 87FE                    	XCHG	DI,SI
 16377                                  
 16378 0000250F 16                      	push	ss
 16379                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16380 00002510 07                      	pop	es ; 17/05/2019
 16381                                  
 16382 00002511 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16383 00002514 B90400                  	MOV	CX,4		; four sets of "??"
 16384 00002517 F3AF                    	REPE	SCASW
 16385 00002519 751C                    	JNZ	short NOT_ALL
 16386 0000251B 87FE                    	XCHG	DI,SI
 16387 0000251D AD                      	LODSW
 16388 0000251E 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16389 00002521 7514                    	JNZ	short NOT_ALL
 16390 00002523 AD                      	LODSW
 16391 00002524 3D3F3F                  	CMP	AX,"??"
 16392 00002527 750E                    	JNZ	short NOT_ALL
 16393                                  CHECK_ATTS:
 16394 00002529 A0[6D05]                	MOV	AL,[SATTRIB]
 16395                                  	;and	al,1Fh
 16396 0000252C 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16397                                  					; Look only at hidden bits
 16398                                  	;cmp	al,1Fh
 16399 0000252E 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16400                                  					; All must be set
 16401 00002530 7505                    	JNZ	short NOT_ALL
 16402                                  
 16403                                  ; NOTE WARNING DANGER-----
 16404                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16405                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16406                                  
 16407 00002532 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16408                                  NOT_ALL:
 16409 00002537 C606[4C03]01            	MOV	byte [NoSetDir],1
 16410 0000253C E86519                  	call	GetPathNoSet
 16411 0000253F 7312                    	JNC	short Del_found
 16412 00002541 750B                    	JNZ	short _bad_path
 16413 00002543 08C9                    	OR	CL,CL
 16414 00002545 7407                    	JZ	short _bad_path
 16415                                  No_file:
 16416 00002547 B80200                  	MOV	AX,error_file_not_found
 16417                                  ErrorReturn:
 16418 0000254A F9                      	STC
 16419                                  	;call	LCritDisk
 16420                                  	;retn
 16421                                  	; 18/12/2022
 16422 0000254B E9DAED                  	jmp	LCritDisk
 16423                                  
 16424                                  _bad_path:
 16425 0000254E B80300                  	MOV	AX,error_path_not_found
 16426 00002551 EBF7                    	JMP	short ErrorReturn
 16427                                  
 16428                                  Del_found:
 16429 00002553 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16430 00002555 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16431 0000255A 7405                    	JZ	short NOT_DIR
 16432                                  Del_access_err:
 16433 0000255C B80500                  	MOV	AX,error_access_denied
 16434 0000255F EBE9                    	JMP	short ErrorReturn
 16435                                  
 16436                                  NOT_DIR:
 16437 00002561 08E4                    	OR	AH,AH			; Check if device name
 16438 00002563 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16439                                  
 16440                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16441                                  
 16442                                  DELFILE:
 16443 00002565 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16444                                  
 16445                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16446                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16447                                  
 16448 0000256A 1E                      	PUSH	DS
 16449 0000256B 8A26[7F05]              	MOV	AH,[DELALL]
 16450 0000256F C53E[E205]              	LDS	DI,[CURBUF]
 16451                                  	
 16452                                  ;hkn; SS override
 16453 00002573 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16454 00002579 7509                    	JNZ	short DoDelete		; yes
 16455                                  
 16456 0000257B F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16457 0000257F 7403                    	JZ	short DoDelete		; not read only
 16458                                  
 16459                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16460                                  Skip_it:
 16461 00002581 1F                      	POP	DS
 16462 00002582 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16463                                  
 16464                                  DoDelete:
 16465 00002584 E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16466                                  	;JNC	short DEL_SHARE_OK
 16467                                  	;POP	DS
 16468                                  	;JMP	SHORT DELNXT		; Skip it
 16469                                  	; 30/01/2024
 16470 00002587 72F8                    	jc	short Skip_it
 16471                                  
 16472                                  DEL_SHARE_OK:
 16473                                  	; 17/05/2019 - Retro DOS v4.0
 16474                                  	; MSDOS 6.0
 16475                                  	;test	byte [di+5],40h
 16476 00002589 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16477                                  					;LB. if already dirty		  ;AN000;
 16478 0000258D 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16479 0000258F E83E35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16480                                  	;or	byte [di+5],40h
 16481 00002592 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16482                                  yesdirty:
 16483 00002596 8827                    	mov	[bx],ah 
 16484                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16485 00002598 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16486 0000259A 1F                      	POP	DS
 16487 0000259B 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16488                                  
 16489 000025A0 83FB02                  	CMP	BX,2
 16490 000025A3 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16491                                  	;cmp	bx,[es:bp+0Dh]
 16492 000025A5 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16493 000025A9 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16494                                  
 16495 000025AB E89028                  	call	RELEASE 		; Free file data
 16496 000025AE 7252                    	JC	short No_fileJ
 16497                                  
 16498                                  ; DOS 3.3  FastOpen
 16499                                  
 16500 000025B0 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16501                                  
 16502                                  ; DOS 3.3  FastOpen
 16503                                  
 16504                                  DELNXT:
 16505 000025B3 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16506 000025B7 E85518                  	call	GETENTRY		; Registers need to be reset
 16507 000025BA 7246                    	JC	short No_fileJ
 16508 000025BC E88E17                  	call	NEXTENT
 16509 000025BF 73A4                    	JNC	short DELFILE
 16510 000025C1 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16511                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16512                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16513                                  	;;mov	al,[es:bp+0]
 16514                                  	; 15/12/2022
 16515 000025C5 268A4600                	MOV	AL,[ES:BP]
 16516 000025C9 E8FF33                  	call	FLUSHBUF
 16517 000025CC 7234                    	JC	short No_fileJ
 16518                                  ;
 16519                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16520                                  ;
 16521                                  ;   not found not deleted		file not found
 16522                                  ;   not found	  deleted		*** impossible ***
 16523                                  ;	found not deleted		access denied (read-only)
 16524                                  ;	found	  deleted		no error
 16525                                  ;
 16526 000025CE F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16527 000025D3 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16528                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16529                                  ; and to force the DOS to issue a media check.
 16530 000025D5 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16531 000025DA 741C                    	jz	short No_Set_Flag
 16532 000025DC 50                      	PUSH	AX
 16533 000025DD 06                      	PUSH	ES
 16534 000025DE 57                      	PUSH	DI
 16535 000025DF C43E[A205]              	LES	DI,[THISCDS]
 16536 000025E3 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16537 000025E6 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16538 000025E9 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16539                                  	
 16540                                  	; MSDOS 6.0
 16541 000025ED 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16542 000025EF E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16543                                  	 
 16544 000025F2 E85D30                  	call	FATREAD_CDS		; force media check
 16545 000025F5 5F                      	POP	DI
 16546 000025F6 07                      	POP	ES
 16547 000025F7 58                      	POP	AX
 16548                                  No_Set_Flag:
 16549                                  	;call	LCritDisk		; carry is clear
 16550                                  	;retn
 16551                                  	; 18/12/2022
 16552 000025F8 E92DED                  	jmp	LCritDisk
 16553                                  DelError:
 16554 000025FB F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16555 00002600 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16556                                  No_fileJ:
 16557 00002602 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16558                                  Del_access_errJ:
 16559 00002605 E954FF                  	JMP	Del_access_err ; 10/08/2018
 16560                                  
 16561                                  ; 08/08/2018 - Retro DOS v3.0
 16562                                  
 16563                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16564                                  ;---------------------------------------------------------------------------
 16565                                  ; Procedure Name : REN_DEL_Check
 16566                                  ;
 16567                                  ; Inputs:
 16568                                  ;	[THISDPB] set
 16569                                  ;	[CURBUF+2]:BX points to entry
 16570                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16571                                  ;	[WFP_Start] points to name
 16572                                  ; Function:
 16573                                  ;	Check for Exclusive access on given file.
 16574                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16575                                  ; Outputs:
 16576                                  ;	ES:BP = [THISDPB]
 16577                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16578                                  ;		last element will be loaded from the directory entry.  This is
 16579                                  ;		so the name given to the sharer doesn't have any meta chars in
 16580                                  ;		it.
 16581                                  ;	Carry set if sharing violation, INT 24H generated
 16582                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16583                                  ;		This is because input AX is preserved.
 16584                                  ;		Caller must set the error if needed.
 16585                                  ;	Carry clear
 16586                                  ;		OK
 16587                                  ; AX,DS,BX,SI,DI preserved
 16588                                  ;---------------------------------------------------------------------------
 16589                                  
 16590                                  REN_DEL_Check:
 16591                                  
 16592 00002608 1E                      	PUSH	DS
 16593 00002609 57                      	PUSH	DI
 16594 0000260A 50                      	PUSH	AX
 16595 0000260B 53                      	PUSH	BX
 16596 0000260C 56                      	PUSH	SI		; Save CURBUF pointers
 16597                                  	
 16598 0000260D 16                      	push	ss
 16599 0000260E 07                      	pop	es
 16600                                  
 16601                                  ;hkn; context ES will assume ES to DOSDATA
 16602                                  ;hkn; ASSUME	ES:DOSGROUP
 16603                                  
 16604                                  ;hkn; SS override
 16605 0000260F 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16606 00002614 89DE                    	MOV	SI,BX
 16607                                  
 16608                                  ;hkn; SS override
 16609 00002616 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16610 0000261B 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16611                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16612                                  	; 31/01/2024
 16613 0000261D 43                      	inc	bx
 16614 0000261E 43                      	inc	bx
 16615 0000261F E8C9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16616 00002622 49                      	DEC	CX		; Don't include nul in count
 16617 00002623 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16618 00002625 E8A746                  	call	SkipBack	; Back up one element
 16619 00002628 47                      	INC	DI		; Point to start of last element
 16620                                  
 16621                                  	; 17/05/2019 - Retro DOS v4.0
 16622                                  ;hkn; SS override
 16623                                  	; MSDOS 6.0
 16624 00002629 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16625                                  	;
 16626 0000262E E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16627 00002631 5E                      	POP	SI		; Get back entry pointers
 16628 00002632 5B                      	POP	BX
 16629 00002633 53                      	PUSH	BX
 16630 00002634 56                      	PUSH	SI		; Back on stack
 16631                                  	
 16632 00002635 16                      	push	ss
 16633 00002636 1F                      	pop	ds
 16634                                  
 16635                                  ;hkn; context DS will assume ES to DOSDATA
 16636                                  ;hkn; ASSUME	DS:DOSGROUP
 16637                                  
 16638                                  ; Close the file if possible by us.
 16639                                  ;
 16640                                  ;if installed
 16641 00002637 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16642                                  ;else
 16643                                  ;	Call	ShCloseFile
 16644                                  ;endif
 16645 0000263B 8C1E[A005]              	MOV	[THISSFT+2],DS
 16646                                  
 16647                                  ;hkn; AUXSTACK is in DOSDATA
 16648 0000263F C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16649                                  				; Scratch space
 16650 00002645 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16651 00002647 E87E24                  	call	DOOPEN		; Fill in SFT for share check
 16652 0000264A C43E[9E05]              	LES	DI,[THISSFT]
 16653                                  	;mov	word [es:di+2],10h
 16654 0000264E 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16655                                  				; requires exclusive access
 16656                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16657 00002654 26C7050100              	mov	word [ES:DI],1
 16658 00002659 E8974C                  	call	ShareEnter
 16659 0000265C 720D                    	jc	short CheckDone
 16660 0000265E C43E[9E05]              	LES	DI,[THISSFT]
 16661                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16662 00002662 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16663                                  	
 16664 00002667 E8844C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16665 0000266A F8                      	CLC
 16666                                  CheckDone:
 16667 0000266B C42E[8A05]              	LES	BP,[THISDPB]
 16668 0000266F 5E                      	POP	SI
 16669 00002670 5B                      	POP	BX
 16670 00002671 58                      	POP	AX
 16671 00002672 5F                      	POP	DI
 16672 00002673 1F                      	POP	DS
 16673 00002674 C3                      	retn
 16674                                  
 16675                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16676                                  ;---------------------------------------------------------------------------
 16677                                  ; Procedure Name : FastOpen_Delete
 16678                                  ; Inputs:
 16679                                  ;	None
 16680                                  ; Function:
 16681                                  ;	Call FastOpen to delete the dir info.
 16682                                  ; Outputs:
 16683                                  ;	None
 16684                                  ;---------------------------------------------------------------------------
 16685                                  
 16686                                  	; 31/01/2024
 16687                                  
 16688                                  FastOpen_Delete:
 16689 00002675 9C                      	PUSHF			; save flag
 16690 00002676 56                      	PUSH	SI		; save registers
 16691 00002677 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16692 00002678 53                      	PUSH	BX
 16693 00002679 50                      	PUSH	AX
 16694                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16695                                  ;hkn; SS override
 16696                                  	; 17/05/2019 - Retro DOS v4.0
 16697                                  	; MSDOS 6.0
 16698 0000267A 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16699                                  	
 16700 0000267F B003                    	MOV	AL,FONC_delete	; al = 3
 16701                                  
 16702                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16703                                  %if 0 
 16704                                  fastinvoke:
 16705                                  ;hkn; FastTable is in DOSDATA
 16706                                  	MOV	BX,FastTable+2
 16707                                  	CALL	far [BX]	; call fastopen
 16708                                  	POP	AX		; restore registers
 16709                                  	POP	BX
 16710                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16711                                  	POP	SI
 16712                                  	POPF			; restore flag
 16713                                  	retn
 16714                                  %else
 16715 00002681 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16716                                  %endif
 16717                                  
 16718                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16719                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16720                                  
 16721                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16722                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16723                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16724                                  
 16725                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16726                                  ;---------------------------------------------------------------------------
 16727                                  ; PROCEDURE Name : FastOpen_Rename
 16728                                  ;
 16729                                  ; Inputs:
 16730                                  ;	 REN_WFP   = Path Name
 16731                                  ;	 NAME1	   = New Name
 16732                                  ; Function:
 16733                                  ;	Call FastOpen to rename the dir entry in the cache
 16734                                  ; Outputs:
 16735                                  ;	None
 16736                                  ;---------------------------------------------------------------------------
 16737                                  
 16738                                  FastOpen_Rename:
 16739                                  	; 17/05/2019 - Retro DOS v4.0
 16740                                  	; 08/08/2018 - Retro DOS v3.0
 16741                                  	; MSDOS 6.0
 16742 00002683 9C                      	PUSHF			;AN001 save flag
 16743 00002684 56                      	PUSH	SI		;AN001 save registers
 16744 00002685 57                      	PUSH	DI		;AN001
 16745 00002686 53                      	PUSH	BX		;AN001
 16746 00002687 50                      	PUSH	AX		;AN001
 16747                                  	;
 16748                                  ;hkn; SS override
 16749 00002688 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16750                                  
 16751                                  ;hkn; NAME1 is in DOSDATA
 16752 0000268D BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16753                                  	;mov	al,6
 16754 00002690 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16755                                  
 16756                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16757                                  	
 16758                                  ;hkn; FastTable is in DOSDATA
 16759 00002692 BB[320D]                	MOV	BX,FastTable+2
 16760 00002695 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16761                                  	
 16762 00002697 58                      	POP	AX		; restore registers  ;AN001
 16763 00002698 5B                      	POP	BX				     ;AN001
 16764 00002699 5F                      	POP	DI				     ;AN001
 16765 0000269A 5E                      	POP	SI				     ;AN001
 16766 0000269B 9D                      	POPF			; restore flag	     ;AN001
 16767 0000269C C3                      	retn					     ;AN001
 16768                                  
 16769                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16770                                  ;---------------------------------------------------------------------------
 16771                                  ; Procedure Name : FastOpen_Update
 16772                                  ;
 16773                                  ; Inputs:
 16774                                  ;	DL     drive number (A=0,B=1,,,)
 16775                                  ;	CX     first cluster #
 16776                                  ;	AH     0 updates dir entry
 16777                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16778                                  ;	ES:DI  directory entry
 16779                                  ; Function:
 16780                                  ;	Call FastOpen to update the dir info.
 16781                                  ; Outputs:
 16782                                  ;	None
 16783                                  ;---------------------------------------------------------------------------
 16784                                  
 16785                                  FastOpen_Update:
 16786 0000269D 9C                      	PUSHF			; save flag
 16787 0000269E 56                      	PUSH	SI
 16788 0000269F 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16789 000026A0 53                      	PUSH	BX		; save regs
 16790 000026A1 50                      	PUSH	AX
 16791 000026A2 B004                    	MOV	AL,FONC_update	; al = 4
 16792 000026A4 EBEC                    	JMP	short fastinvoke
 16793                                  
 16794                                  	; 17/05/2019
 16795                                  
 16796                                  	; MSDOS 6.0
 16797                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16798                                  ;---------------------------------------------------------------------------
 16799                                  Fast_Dispatch:
 16800                                  ;hkn; FastTable is in DOSDATA
 16801 000026A6 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16802                                  ;hkn; use SS override
 16803 000026A9 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16804 000026AC C3                      	retn
 16805                                  
 16806                                  ;============================================================================
 16807                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16808                                  ;============================================================================
 16809                                  ; 08/08/2018 - Retro DOS v3.0
 16810                                  ; 17/05/2019 - Retro DOS v4.0
 16811                                  
 16812                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16813                                  ;	NAME	DOS_RENAME
 16814                                  
 16815                                  ;**	Low level routine for renaming files
 16816                                  ;----------------------------------------------------------------------------
 16817                                  ;	DOS_RENAME
 16818                                  ;
 16819                                  ;	Modification history:
 16820                                  ;
 16821                                  ;	    Created: ARR 30 March 1983
 16822                                  
 16823                                  ;----------------------------------------------------------------------------
 16824                                  ;
 16825                                  ; Procedure Name : DOS_RENAME
 16826                                  ;
 16827                                  ; Inputs:
 16828                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16829                                  ;		chars, NUL terminated)
 16830                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16831                                  ;		( = -1 if current dir not involved, else
 16832                                  ;		 Points to first char after last "/" of current dir part)
 16833                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16834                                  ;		chars, NUL terminated)
 16835                                  ;	[THISCDS] Points to CDS being used
 16836                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16837                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16838                                  ; Function:
 16839                                  ;	Rename the specified file(s)
 16840                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16841                                  ; Outputs:
 16842                                  ;	CARRY CLEAR
 16843                                  ;	    OK
 16844                                  ;	CARRY SET
 16845                                  ;	    AX is error code
 16846                                  ;		error_file_not_found
 16847                                  ;			No match for source, or dest path invalid
 16848                                  ;		error_not_same_device
 16849                                  ;			Source and dest are on different devices
 16850                                  ;		error_access_denied
 16851                                  ;			Directory specified (not simple rename),
 16852                                  ;			Device name given, Destination exists.
 16853                                  ;			NOTE: In third case some renames may have
 16854                                  ;			 been done if metas.
 16855                                  ;		error_path_not_found
 16856                                  ;			Bad path (not in curr dir part if present)
 16857                                  ;			SOURCE ONLY
 16858                                  ;		error_bad_curr_dir
 16859                                  ;			Bad path in current directory part of path
 16860                                  ;			SOURCE ONLY
 16861                                  ;		error_sharing_violation
 16862                                  ;			Deny both access required, generates an INT 24.
 16863                                  ; DS preserved, others destroyed
 16864                                  ;
 16865                                  ;----------------------------------------------------------------------------
 16866                                  
 16867                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16868                                  
 16869                                  	; 31/01/2024
 16870                                  
 16871                                  DOS_RENAME:
 16872                                  
 16873                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16874                                  ;hkn; at this point to DOSDATA.
 16875                                  
 16876 000026AD E89BEB                  	call	TestNet
 16877 000026B0 7306                    	JNC	short LOCAL_RENAME
 16878                                  
 16879                                  ;IF NOT Installed
 16880                                  ;	transfer NET_RENAME
 16881                                  ;ELSE
 16882                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16883                                  	;INT	2FH
 16884                                  	;return
 16885                                  
 16886 000026B2 B81111                  	mov     ax, 1111h
 16887 000026B5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16888                                  			; SS = DS = DOS CS, 
 16889                                  			; SDA first filename pointer = offset of fully-qualified old name
 16890                                  			; SDA CDS pointer -> current directory
 16891                                  			; Return: CF set on error
 16892 000026B7 C3                      	retn
 16893                                  ;ENDIF
 16894                                  
 16895                                  LOCAL_RENAME:
 16896 000026B8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16897 000026BD 8B36[B205]              	MOV	SI,[WFP_START]
 16898 000026C1 8B3E[B405]              	MOV	DI,[REN_WFP]
 16899 000026C5 8A04                    	MOV	AL,[SI]
 16900 000026C7 8A25                    	MOV	AH,[DI]
 16901 000026C9 0D2020                  	OR	AX,2020H		; Lower case
 16902 000026CC 38E0                    	CMP	AL,AH
 16903 000026CE 7405                    	JZ	short SAMEDRV
 16904 000026D0 B81100                  	MOV	AX,error_not_same_device ; 11h
 16905 000026D3 F9                      	STC
 16906 000026D4 C3                      	retn
 16907                                  
 16908                                  SAMEDRV:
 16909 000026D5 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16910 000026D9 FF36[2C03]              	PUSH	WORD [DMAADD]
 16911 000026DD 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16912                                  
 16913                                  ;hkn; RENAMEDMA is in DOSDATA
 16914 000026E1 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16915 000026E7 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16916 000026EC E81EEC                  	call	ECritDisk
 16917 000026EF E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16918                                  					;    points to entry
 16919 000026F2 7314                    	JNC	short Check_Dev
 16920 000026F4 83F812                  	CMP	AX,error_no_more_files ; 12h
 16921 000026F7 7503                    	JNZ	short GOTERR
 16922 000026F9 B80200                  	MOV	AX,error_file_not_found ; 2
 16923                                  GOTERR:
 16924 000026FC F9                      	STC
 16925                                  RENAME_POP:
 16926 000026FD 8F06[2C03]              	POP	WORD [DMAADD]
 16927 00002701 8F06[2E03]              	POP	WORD [DMAADD+2]
 16928                                  	;call	LCritDisk
 16929                                  	;retn
 16930                                  	; 16/12/2022
 16931 00002705 E920EC                  	jmp	LCritDisk
 16932                                  
 16933                                  Check_Dev:
 16934                                  	; 17/05/2019 - Retro DOS v4.0
 16935                                  	;mov	ax,5
 16936 00002708 B80500                  	MOV	AX,error_access_denied	; Assume error
 16937                                  	
 16938                                  	; MSDOS 6.0
 16939 0000270B 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16940 0000270C C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16941                                  	;add	si,21
 16942 00002710 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16943                                  	;test	byte [si+11],10h
 16944 00002713 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16945 00002717 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16946 00002719 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16947 0000271D E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16948                                  notdir:
 16949 00002720 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16950 00002721 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16951                                  
 16952                                  	; MSDOS 3.3 & MSDOS 6.0
 16953 00002723 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16954 00002728 75D2                    	JNZ	short GOTERR
 16955                                  
 16956                                  ; At this point a source has been found. There is search continuation info (a
 16957                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16958                                  ; directory entry found.
 16959                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16960                                  ; throughout the RENAME since it is known at this point that the source and
 16961                                  ; destination are both on the same device.
 16962                                  ; [SATTRIB] is also set.
 16963                                  
 16964 0000272A 89DE                    	MOV	SI,BX
 16965                                  	;add	si,26
 16966 0000272C 83C61A                  	ADD	SI,dir_entry.dir_first
 16967 0000272F E8D6FE                  	call	REN_DEL_Check
 16968 00002732 7305                    	JNC	short REN_OK1
 16969 00002734 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16970 00002737 EBC4                    	JMP	short RENAME_POP
 16971                                  
 16972                                  ;------------------------------------------------------------------------------
 16973                                  ; Check if the source is a file or directory. If file, delete the entry
 16974                                  ; from the Fastopen cache. If directory, rename it later
 16975                                  ;------------------------------------------------------------------------------
 16976                                  
 16977                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16978                                  	; MSDOS 6.0
 16979                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16980                                  	;PUSH	SI
 16981 00002739 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16982                                  	;add	si,21
 16983 0000273D 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16984                                  	;test	byte [si+11],10h
 16985 00002740 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16986                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16987 00002744 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16988                                  	;POP	SI			;BN00X
 16989                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16990                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16991                                  	;POP	SI
 16992                                  
 16993                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16994 00002746 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16995                                  SWAP_SOURCE:
 16996                                  	; MSDOS 3.3
 16997                                  	;MOV	SI,[REN_WFP]
 16998                                  	;MOV	[WFP_START],SI
 16999                                  	; MSDOS 6.0
 17000 00002749 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17001 0000274C 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17002 00002750 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17003 00002754 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17004                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17005 00002757 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17006                                  	;mov	word [CREATING],0E5FFh
 17007 0000275D C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17008                                  					; A rename is like a CREATE_NEW as far
 17009                                  					; as the destination is concerned.
 17010 00002763 E83E17                  	call	GetPathNoSet
 17011                                  
 17012                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17013                                  ;   since no files match the destination name. If it fails for any other
 17014                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17015                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17016                                  ;   if the rename should fail because we haven't built an explicit name by
 17017                                  ;   substituting for the meta chars in it. In this case the destination file
 17018                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17019                                  ;   in the directory entry part.
 17020                                  	
 17021 00002766 7223                    	JC	short NODEST
 17022                                  	
 17023                                  	; MSDOS 6.0
 17024                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17025                                  	; !! MSDOS 3.3 !!
 17026                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17027                                  
 17028 00002768 08E4                    	OR	AH,AH			; Device?
 17029 0000276A 792C                    	JNS	short SAVEDEST		; No, continue
 17030                                  BAD_ACC:
 17031 0000276C B80500                  	MOV	AX,error_access_denied
 17032 0000276F F9                      	STC
 17033                                  RENAME_CLEAN:
 17034 00002770 9C                      	PUSHF				; Save carry state
 17035 00002771 50                      	PUSH	AX			; and error code (if carry set)
 17036 00002772 A0[7605]                	MOV	AL,[THISDRV]
 17037 00002775 E85332                  	call	FLUSHBUF
 17038 00002778 58                      	POP	AX
 17039 00002779 803E[4A03]00            	CMP	byte [FAILERR],0
 17040 0000277E 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17041 00002780 9D                      	POPF
 17042 00002781 E979FF                  	JMP	RENAME_POP
 17043                                  
 17044                                  BAD_ERR:
 17045 00002784 58                      	POP	AX			; Saved flags
 17046                                  	; 16/12/202
 17047                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17048                                  BAD_PATH: ; *
 17049 00002785 B80300                  	MOV	AX,error_path_not_found
 17050 00002788 E971FF                  	JMP	GOTERR
 17051                                  
 17052                                  NODEST:
 17053 0000278B 75F8                    	JNZ	short BAD_PATH
 17054 0000278D 803E[4A03]00            	CMP	byte [FAILERR],0
 17055 00002792 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17056                                  					; because user FAILed on I 24
 17057                                  	; 14/11/2022
 17058 00002794 08C9                    	OR	CL,CL
 17059                                  	;JNZ	short SAVEDEST
 17060                                  	; 17/05/2019
 17061 00002796 74ED                    	jz	short BAD_PATH ; *
 17062                                  ;BAD_PATH: ; *
 17063                                  ;	MOV	AX,error_path_not_found
 17064                                  ;	;STC
 17065                                  ;	;JMP	RENAME_POP
 17066                                  ;	; 17/05/2019
 17067                                  ;	jmp	GOTERR 
 17068                                  
 17069                                  ; 16/12/2022
 17070                                  %if 0
 17071                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17072                                  	or	cl,cl
 17073                                  	jnz	short SAVEDEST
 17074                                  	;jz	short BAD_PATH ; *
 17075                                  BAD_PATH: ; *
 17076                                  	;mov	ax,3
 17077                                  	mov	ax,error_path_not_found
 17078                                  	stc
 17079                                  	jmp	RENAME_POP
 17080                                  %endif
 17081                                  
 17082                                  SAVEDEST:
 17083 00002798 16                      	push	ss
 17084 00002799 07                      	pop	es
 17085                                  
 17086                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17087 0000279A BF[5705]                	MOV	DI,NAME2
 17088 0000279D BE[4B05]                	MOV	SI,NAME1
 17089                                  
 17090 000027A0 B90B00                  	MOV	CX,11
 17091 000027A3 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17092 000027A5 A1[C205]                	MOV	AX,[DIRSTART]
 17093 000027A8 A3[6405]                	MOV	[DESTSTART],AX
 17094                                  BUILDDEST:
 17095                                  	; 31/01/2024
 17096                                  	;push	ss
 17097                                  	;pop	es			; needed due to JMP BUILDDEST below
 17098                                  
 17099                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17100 000027AB BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17101 000027AE BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17102 000027B1 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17103                                  
 17104 000027B4 B90B00                  	MOV	CX,11
 17105                                  
 17106                                  	; 17/05/2019 - Retro DOS v4.0
 17107                                  	
 17108                                  	; MSDOS 6.0
 17109 000027B7 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17110                                  
 17111                                  	; MSDOS 3.3
 17112                                  
 17113                                  ; 08/08/2018 - Retro DOS v3.0
 17114                                  ; MSDOS 6.0 
 17115                                  ;---------------------------------------------------------------------------
 17116                                  ;Procedure: NEW_RENAME
 17117                                  ;
 17118                                  ;Input: DS:SI -> raw string with ?
 17119                                  ;	ES:DI -> destination string
 17120                                  ;	DS:BX -> source string
 17121                                  ;Function: replace ? chars of raw string with chars in source string and
 17122                                  ;	   put in destination string
 17123                                  ;Output: ES:DI-> new string
 17124                                  ;---------------------------------------------------------------------------
 17125                                  ;
 17126                                  ;NEW_RENAME:
 17127                                  ;NEWNAM:
 17128                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17129                                  ;	LODSB
 17130                                  ;	CMP	AL,"?"
 17131                                  ;	JNZ	short NOCHG
 17132                                  ;	MOV	AL,[BX] 		; Get replace char
 17133                                  ;NOCHG:
 17134                                  ;	STOSB
 17135                                  ;	INC	BX			; Next replace char
 17136                                  ;	LOOP	NEWNAM
 17137                                  ;	; MSDOS 6.0
 17138                                  ;	;retn
 17139                                  
 17140                                  	; MSDOS 3.3 & MSDOS 6.0
 17141                                  	;mov	byte [ATTRIB],16h
 17142 000027BA C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17143 000027BF C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17144 000027C4 E88B19                  	call	DEVNAME 		; Check if we built a device name
 17145 000027C7 73A3                    	JNC	short BAD_ACC
 17146 000027C9 8B1E[6405]              	MOV	BX,[DESTSTART]
 17147 000027CD C42E[8A05]              	LES	BP,[THISDPB]
 17148 000027D1 E86D16                  	call	SETDIRSRCH		; Reset search to start of dir
 17149 000027D4 7296                    	JC	short BAD_ACC 		; Screw up
 17150 000027D6 E82A15                  	call	FINDENTRY		; See if new name already exists
 17151 000027D9 7391                    	JNC	short BAD_ACC 		; Error if found
 17152 000027DB 803E[4A03]00            	CMP	byte [FAILERR],0
 17153 000027E0 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17154 000027E2 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17155 000027E5 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17156 000027E9 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17157                                  
 17158                                  	;mov	al,[RENAMEDMA+32]
 17159 000027EB A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17160 000027EE A810                    	TEST	AL,attr_directory ; 10h
 17161 000027F0 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17162                                  					; otherwise the . and .. entries get
 17163                                  					; wiped.
 17164 000027F2 A2[6B05]                	MOV	[ATTRIB],AL
 17165 000027F5 8C1E[A005]              	MOV	[THISSFT+2],DS
 17166                                  
 17167                                  ;hkn; AUXSTACK is in DOSDATA
 17168                                  	;mov	si,RENAMEDMA+145h
 17169 000027F9 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17170 000027FC 8936[9E05]              	MOV	[THISSFT],SI
 17171                                  	;mov	word [SI+2],2
 17172 00002800 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17173 00002805 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17174 00002807 E82621                  	call	RENAME_MAKE		; This is in mknode
 17175 0000280A 7303                    	JNC	short GOT_DEST
 17176                                  BAD_ACCJ:
 17177 0000280C E95DFF                  	JMP	BAD_ACC
 17178                                  
 17179                                  GOT_DEST:
 17180 0000280F 53                      	push	bx
 17181 00002810 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17182 00002814 E8D74A                  	call	ShareEnd		; we need to remove it.
 17183 00002817 5B                      	pop	bx
 17184                                  
 17185                                  ; A zero length entry with the correct new name has now been made at
 17186                                  ;   [CURBUF+2]:BX.
 17187                                  
 17188 00002818 C43E[E205]              	LES	DI,[CURBUF]
 17189                                  
 17190                                  	; MSDOS 6.0
 17191                                  	;test	byte [es:di+5],40h
 17192 0000281C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17193                                  					;LB. if already dirty		  ;AN000;
 17194 00002821 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17195 00002823 E8AA32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17196                                  	;or	byte [es:di+5],40h
 17197 00002826 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17198                                  yesdirty1:
 17199 0000282B 89DF                    	MOV	DI,BX
 17200                                  	;add	di,11
 17201 0000282D 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17202                                  
 17203                                  ;hkn; RENAMEDMA is in DOSDATA
 17204                                  	;mov	si,[RENAMEDMA+32]
 17205 00002830 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17206                                  	;mov	cx,21
 17207 00002833 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17208 00002836 F3A4                    	REP	MOVSB
 17209 00002838 E87A00                  	CALL	GET_SOURCE
 17210 0000283B 7275                    	JC	short RENAME_OVER
 17211 0000283D 89DF                    	MOV	DI,BX
 17212 0000283F 8E06[E405]              	MOV	ES,[CURBUF+2]
 17213 00002843 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17214 00002845 AA                      	STOSB				; "free" the source
 17215 00002846 EB13                    	JMP	SHORT DIRTY_IT
 17216                                  
 17217                                  SIMPLE_RENAME:
 17218 00002848 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17219 0000284B 7265                    	JC	short RENAME_OVER
 17220 0000284D 89DF                    	MOV	DI,BX
 17221 0000284F 8E06[E405]              	MOV	ES,[CURBUF+2]
 17222                                  
 17223                                  ;hkn; NAME1 is in DOSDATA
 17224 00002853 BE[4B05]                	MOV	SI,NAME1		; New Name
 17225 00002856 B90B00                  	MOV	CX,11
 17226 00002859 F3A4                    	REP	MOVSB
 17227                                  DIRTY_IT:
 17228 0000285B 8B3E[E205]              	MOV	DI,[CURBUF]
 17229                                  
 17230                                  	; MSDOS 6.0
 17231 0000285F 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17232                                  					;LB. if already dirty		  ;AN000;
 17233 00002864 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17234 00002866 E86732                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17235                                  	
 17236 00002869 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17237                                  
 17238                                  ;------------------------------------------------------------------------------
 17239                                  ; Check if the source is a directory of file. If directory rename it to the
 17240                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17241                                  ; previously deleted.
 17242                                  ;------------------------------------------------------------------------------
 17243                                  
 17244                                  yesdirty2:
 17245                                  	; MSDOS 6.0
 17246 0000286E 56                      	PUSH	SI
 17247 0000286F C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17248 00002873 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17249 00002876 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17250 0000287A 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17251 0000287C E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17252                                  	; 31/01/2024
 17253                                  	;POP	SI
 17254                                  	;JMP	SHORT NOT_DIRTY1
 17255                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17256 0000287F 5E                      	POP	SI
 17257                                  NOT_DIRTY1:				;;BN00X
 17258                                  NEXT_SOURCE:
 17259                                  ;hkn; RENAMEDMA is in DOSDATA
 17260 00002880 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17261                                  
 17262                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17263                                  ; to enter it before going to RENAME_Next.
 17264                                  
 17265 00002883 E887EA                  	call	ECritDisk
 17266 00002886 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17267                                  				  ;  to FF when we made the prev new file).
 17268 0000288B E89405                  	call	RENAME_NEXT
 17269                                  
 17270                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17271                                  ; we were before.
 17272                                  
 17273 0000288E 7222                    	JC	short RENAME_OVER
 17274                                  
 17275                                  	;lea	si,[bx+26]
 17276 00002890 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17277 00002893 E872FD                  	call	REN_DEL_Check
 17278 00002896 7306                    	JNC	short REN_OK2
 17279 00002898 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17280                                  jmp_to_rename_clean: ; 28/12/2022
 17281 0000289B E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17282                                  
 17283                                  ;------------------------------------------------------------------------------
 17284                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17285                                  ; if directory, rename directory name in the Fastopen cache.
 17286                                  ;-----------------------------------------------------------------------------
 17287                                  
 17288                                  REN_OK2:
 17289                                  	; MSDOS 6.0
 17290                                  	;mov	al,[RERNAMEDMA+32]
 17291 0000289E A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17292                                  	;test	al,10h
 17293 000028A1 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17294 000028A3 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17295                                  	
 17296                                  	; MSDOS 3.3 & MSDOS 6.0
 17297 000028A5 E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17298                                  jmp_to_builddest: ; 28/12/2022
 17299                                  	; 31/01/2024
 17300 000028A8 16                      	push	ss
 17301 000028A9 07                      	pop	es
 17302 000028AA E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17303                                  
 17304                                  	; MSDOS 6.0
 17305                                  Ren_Directory:
 17306 000028AD E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17307                                  	;JMP	BUILDDEST
 17308                                  	; 28/12/2022
 17309 000028B0 EBF6                    	jmp	short jmp_to_builddest
 17310                                  
 17311                                  RENAME_OVER:
 17312 000028B2 F8                      	CLC
 17313                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17314                                  	; 28/12/2022
 17315 000028B3 EBE6                    	jmp	short jmp_to_rename_clean
 17316                                  
 17317                                  ;----------------------------------------------------------------------------
 17318                                  ; Procedure: GET_SOURCE
 17319                                  ;
 17320                                  ; Inputs:
 17321                                  ;	RENAMEDMA has source info
 17322                                  ; Function:
 17323                                  ;	Re-find the source
 17324                                  ; Output:
 17325                                  ;	[CURBUF] set
 17326                                  ;	[CURBUF+2]:BX points to entry
 17327                                  ;	Carry set if error (currently user FAILed to I 24)
 17328                                  ; DS preserved, others destroyed
 17329                                  ;----------------------------------------------------------------------------
 17330                                  
 17331                                  GET_SOURCE:
 17332 000028B5 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17333 000028B9 C42E[8A05]              	LES	BP,[THISDPB]
 17334 000028BD E88115                  	call	SETDIRSRCH
 17335 000028C0 7214                    	JC	short gs_ret_label	; retc
 17336 000028C2 E86C18                  	call	STARTSRCH
 17337 000028C5 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17338                                  	;call	GETENT
 17339                                  	; 18/12/2022
 17340 000028C8 E94715                  	jmp	GETENT
 17341                                  ;gs_ret_label:
 17342                                  	;retn
 17343                                  
 17344                                  ; MSDOS 6.0 
 17345                                  ;---------------------------------------------------------------------------
 17346                                  ;Procedure: NEW_RENAME
 17347                                  ;
 17348                                  ;Input: DS:SI -> raw string with ?
 17349                                  ;	ES:DI -> destination string
 17350                                  ;	DS:BX -> source string
 17351                                  ;Function: replace ? chars of raw string with chars in source string and
 17352                                  ;	   put in destination string
 17353                                  ;Output: ES:DI-> new string
 17354                                  ;---------------------------------------------------------------------------
 17355                                  
 17356                                  NEW_RENAME:
 17357                                  	; 17/05/2019 - Retro DOS v4.0
 17358                                  NEWNAM:
 17359                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17360 000028CB AC                      	LODSB
 17361 000028CC 3C3F                    	CMP	AL,"?" ; 3Fh
 17362 000028CE 7502                    	JNZ	short NOCHG
 17363 000028D0 8A07                    	MOV	AL,[BX] 		; Get replace char
 17364                                  NOCHG:
 17365 000028D2 AA                      	STOSB
 17366 000028D3 43                      	INC	BX			; Next replace char
 17367 000028D4 E2F5                    	LOOP	NEWNAM
 17368                                  	; MSDOS 6.0
 17369                                  gs_ret_label:	; 18/12/2022
 17370 000028D6 C3                      	retn
 17371                                  
 17372                                  ;============================================================================
 17373                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17374                                  ;============================================================================
 17375                                  ; 08/08/2018 - Retro DOS v3.0
 17376                                  ; 17/05/2019 - Retro DOS v4.0
 17377                                  
 17378                                  ;**	Low level routines for returning file information and setting file
 17379                                  ;	attributes
 17380                                  ;
 17381                                  ;	GET_FILE_INFO
 17382                                  ;	SET_FILE_ATTRIBUTE
 17383                                  ;
 17384                                  ;	Modification history:
 17385                                  ;
 17386                                  ;	    Created: ARR 30 March 1983
 17387                                  ;
 17388                                  ;	M025: Return access_denied if attempting to set
 17389                                  ;	      attribute of root directory.
 17390                                  ;
 17391                                  
 17392                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17393                                  
 17394                                  ;---------------------------------------------------------------------------
 17395                                  ; Procedure Name : GET_FILE_INFO
 17396                                  ;
 17397                                  ; Inputs:
 17398                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17399                                  ;		terminated)
 17400                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17401                                  ;		( = -1 if current dir not involved, else
 17402                                  ;		 Points to first char after last "/" of current dir part)
 17403                                  ;	[THISCDS] Points to CDS being used
 17404                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17405                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17406                                  ; Function:
 17407                                  ;	Get Information about a file
 17408                                  ; Returns:
 17409                                  ;	CARRY CLEAR
 17410                                  ;	    AX = Attribute of file
 17411                                  ;	    CX = Time stamp of file
 17412                                  ;	    DX = Date stamp of file
 17413                                  ;	    BX:DI = Size of file (32 bit)
 17414                                  ;	CARRY SET
 17415                                  ;	    AX is error code
 17416                                  ;		error_file_not_found
 17417                                  ;			Last element of path not found
 17418                                  ;		error_path_not_found
 17419                                  ;			Bad path (not in curr dir part if present)
 17420                                  ;		error_bad_curr_dir
 17421                                  ;			Bad path in current directory part of path
 17422                                  ; DS preserved, others destroyed
 17423                                  ;---------------------------------------------------------------------------
 17424                                  
 17425                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17426                                  
 17427                                  GET_FILE_INFO:
 17428                                  
 17429                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17430                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17431                                  
 17432 000028D7 E871E9                  	call	TestNet
 17433 000028DA 7306                    	JNC	short LOCAL_INFO
 17434                                  
 17435                                  ;IF NOT Installed
 17436                                  ;	transfer NET_GET_FILE_INFO
 17437                                  ;ELSE
 17438                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17439                                  ;	INT	2FH
 17440                                  ;	return
 17441                                  
 17442 000028DC B80F11                  	mov     ax, 110Fh
 17443 000028DF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17444                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17445                                  			; SDA CDS pointer -> current directory
 17446                                  			; Return: CF set on error, AX = file attributes
 17447 000028E1 C3                      	retn
 17448                                  ;ENDIF
 17449                                  
 17450                                  LOCAL_INFO:
 17451 000028E2 E828EA                  	call	ECritDisk
 17452 000028E5 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17453                                  	; MSDOS 3.3
 17454                                  	;call	GETPATH
 17455                                  	; MSDOS 6.0
 17456 000028EA E8D700                  	call	GET_FAST_PATH
 17457                                  	; MSDOS 3.3 & MSDOS 6.0
 17458 000028ED 7312                    	JNC	short info_check_dev
 17459                                  NO_PATH:
 17460 000028EF 750B                    	JNZ	short bad_path1
 17461 000028F1 08C9                    	OR	CL,CL
 17462 000028F3 7407                    	JZ	short bad_path1
 17463                                  info_no_file:
 17464 000028F5 B80200                  	MOV	AX,error_file_not_found
 17465                                  BadRet:
 17466 000028F8 F9                      	STC
 17467                                  JustRet:
 17468                                  	;call	LCritDisk
 17469                                  	;retn
 17470                                  	; 18/12/2022
 17471 000028F9 E92CEA                  	jmp	LCritDisk
 17472                                  
 17473                                  bad_path1:
 17474 000028FC B80300                  	MOV	AX,error_path_not_found
 17475 000028FF EBF7                    	jmp	short BadRet
 17476                                  
 17477                                  info_check_dev:
 17478 00002901 08E4                    	OR	AH,AH
 17479 00002903 78F0                    	JS	short info_no_file	; device
 17480                                  
 17481                                  	; MSDOS 6.0
 17482                                  ;SR;
 17483                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17484                                  ;for a root dir
 17485                                  
 17486 00002905 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17487 0000290A 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17488                                  
 17489 0000290C 30E4                    	xor	ah,ah
 17490 0000290E B010                    	mov	al,attr_directory ; 10h
 17491                                  	;clc
 17492                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17493                                  	; (DOSCODE:683Eh)
 17494                                  	; 16/12/2022
 17495                                  	;clc
 17496 00002910 EBE7                    	jmp	short JustRet
 17497                                  
 17498                                  not_root:
 17499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17500 00002912 1E                      	PUSH	DS
 17501 00002913 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17502 00002917 89DE                    	MOV	SI,BX
 17503 00002919 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17504 0000291B 89DF                    	MOV	DI,BX
 17505                                  	;mov	cx,[si+16h]
 17506 0000291D 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17507                                  	;mov	dx,[si+18h]
 17508 00002920 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17509 00002923 30E4                    	XOR	AH,AH
 17510                                  	;mov	al,[si+0Bh]
 17511 00002925 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17512                                  	;test	al,10h
 17513 00002928 A810                    	TEST	AL,attr_directory
 17514 0000292A 7506                    	JNZ	short NO_SIZE
 17515                                  	;mov	di,[si+1Ch]
 17516 0000292C 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17517                                  	;mov	bx,[si+1Eh]
 17518 0000292F 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17519                                  NO_SIZE:
 17520 00002932 1F                      	POP	DS
 17521                                  	;CLC
 17522                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17523                                  	; (DOSCODE:6864h)
 17524                                  	; 16/12/2022
 17525                                  	;clc
 17526 00002933 EBC4                    	jmp	short JustRet
 17527                                  
 17528                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17529                                  ;-------------------------------------------------------------------------------
 17530                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17531                                  ; Inputs:
 17532                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17533                                  ;		terminated)
 17534                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17535                                  ;		( = -1 if current dir not involved, else
 17536                                  ;		 Points to first char after last "/" of current dir part)
 17537                                  ;	[THISCDS] Points to CDS being used
 17538                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17539                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17540                                  ;	AX is new attributes to give to file
 17541                                  ; Function:
 17542                                  ;	Set File Attributes
 17543                                  ; Returns:
 17544                                  ;	CARRY CLEAR
 17545                                  ;	    No error
 17546                                  ;	CARRY SET
 17547                                  ;	    AX is error code
 17548                                  ;		error_file_not_found
 17549                                  ;			Last element of path not found
 17550                                  ;		error_path_not_found
 17551                                  ;			Bad path (not in curr dir part if present)
 17552                                  ;		error_bad_curr_dir
 17553                                  ;			Bad path in current directory part of path
 17554                                  ;		error_access_denied
 17555                                  ;			Attempt to set an attribute which cannot be set
 17556                                  ;			(attr_directory, attr_volume_ID)
 17557                                  ;		error_sharing_violation
 17558                                  ;			Sharing mode of file did not allow the change
 17559                                  ;			(this request requires exclusive write/read access)
 17560                                  ;			(INT 24H generated)
 17561                                  ; DS preserved, others destroyed
 17562                                  ;----------------------------------------------------------------------------
 17563                                  
 17564                                  SET_FILE_ATTRIBUTE:
 17565                                  
 17566                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17567                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17568                                  
 17569 00002935 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17570 00002938 7414                    	JZ	short set_look
 17571                                  _BAD_ACC:
 17572 0000293A C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17573 0000293F C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17574 00002944 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17575 00002949 B80500                  	MOV	AX,error_access_denied ; 5
 17576 0000294C F9                      	STC
 17577 0000294D C3                      	retn
 17578                                  
 17579                                  set_look:
 17580 0000294E E8FAE8                  	call	TestNet
 17581 00002951 7308                    	JNC	short LOCAL_SET
 17582                                  
 17583                                  ;IF NOT Installed
 17584                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17585                                  ;ELSE
 17586 00002953 50                      	PUSH	AX
 17587                                  	
 17588                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17589                                  	;INT	2FH
 17590                                  
 17591 00002954 B80E11                  	mov     ax, 110Eh
 17592 00002957 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17593                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17594                                  			; SDA CDS pointer -> current directory
 17595                                  			; STACK: WORD new file attributes
 17596                                  			; Return: CF set on error
 17597                                  
 17598 00002959 5B                      	POP	BX			; clean stack
 17599 0000295A C3                      	retn
 17600                                  ;ENDIF
 17601                                  
 17602                                  LOCAL_SET:
 17603 0000295B E8AFE9                  	call	ECritDisk
 17604 0000295E 50                      	PUSH	AX			; Save new attributes
 17605 0000295F C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17606 00002964 E83715                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17607 00002967 7308                    	JNC	short set_check_device
 17608 00002969 5B                      	POP	BX			; Clean stack (don't zap AX)
 17609 0000296A EB83                    	JMP	short NO_PATH
 17610                                  
 17611                                  	; MSDOS 6.0
 17612                                  cannot_set_root:			; M025:
 17613 0000296C B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17614                                  	;stc				; M025: to set attr. of root
 17615                                  	;jmp	short OK_BYE		; M025:
 17616                                  	; 01/02/2024
 17617 0000296F EB87                    	jmp	short BadRet
 17618                                  
 17619                                  set_check_device:
 17620 00002971 08E4                    	OR	AH,AH
 17621 00002973 7906                    	JNS	short set_check_share
 17622 00002975 58                      	POP	AX
 17623 00002976 E8AFE9                  	call	LCritDisk
 17624 00002979 EBBF                    	JMP	short _BAD_ACC 		; device
 17625                                  
 17626                                  set_check_share:
 17627 0000297B 58                      	POP	AX			; Get new attributes
 17628                                  
 17629                                  	; MSDOS 6.0
 17630 0000297C 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17631 00002981 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17632                                  
 17633                                  	; MSDOS 3.3 & MSDOS 6.0
 17634 00002983 E882FC                  	call	REN_DEL_Check
 17635 00002986 7305                    	JNC	short set_do
 17636 00002988 B82000                  	MOV	AX,error_sharing_violation ; 32
 17637 0000298B EB34                    	jmp	short OK_BYE
 17638                                  
 17639                                  set_do:
 17640                                  	; MSDOS 3.3 & MSDOS 6.0
 17641 0000298D C43E[E205]              	LES	DI,[CURBUF]
 17642 00002991 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17643 00002996 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17644                                  
 17645                                  	; MSDOS 6.0
 17646 0000299A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17647                                  					;LB. if already dirty		  ;AN000;
 17648 0000299F 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17649 000029A1 E82C31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17650                                  	
 17651 000029A4 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17652                                  yesdirty3:
 17653 000029A9 A0[7605]                	MOV	AL,[THISDRV]
 17654                                  ;;;; 10/1/86 F.C update fastopen cache
 17655 000029AC 52                      	PUSH	DX
 17656 000029AD 57                      	PUSH	DI
 17657 000029AE B400                    	MOV	AH,0		  ; dir entry update
 17658 000029B0 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17659 000029B2 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17660 000029B4 E8E6FC                  	call	FastOpen_Update
 17661 000029B7 5F                      	POP	DI
 17662 000029B8 5A                      	POP	DX
 17663                                  ;;;; 9/11/86 F.C update fastopen cache
 17664 000029B9 E80F30                  	call	FLUSHBUF
 17665 000029BC 7303                    	JNC	short OK_BYE
 17666 000029BE B80200                  	MOV	AX,error_file_not_found
 17667                                  OK_BYE:
 17668                                  	;call	LCritDisk
 17669                                  	;retn
 17670                                  	; 16/12/2022
 17671 000029C1 E964E9                  	jmp	LCritDisk
 17672                                  
 17673                                  	; 17/05/2019 - Retro DOS v4.0
 17674                                  
 17675                                  	; MSDOS 6.0
 17676                                  GET_FAST_PATH:
 17677                                  ;hkn; use SS override for FastOpenFlg
 17678 000029C4 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17679                                  					;FO. trigger fastopen	;AN000;
 17680 000029CA E8D114                  	call	GETPATH
 17681 000029CD 9C                      	PUSHF			 	;FO.			;AN000;
 17682 000029CE 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17683                                  					;FO. clear all fastopen flags ;AN000;
 17684 000029D4 9D                      	POPF				;FO.			;AN000;
 17685 000029D5 C3                      	retn
 17686                                  
 17687                                  ;============================================================================
 17688                                  ; DUP.ASM, MSDOS 6.0, 1991
 17689                                  ;============================================================================
 17690                                  ; 08/08/2018 - Retro DOS v3.0
 17691                                  ; 17/05/2019 - Retro DOS v4.0
 17692                                  
 17693                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17694                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17695                                  ;
 17696                                  ;	DOS_DUP
 17697                                  ;
 17698                                  ;	Modification history:
 17699                                  ;
 17700                                  ;	  Created: ARR 30 March 1983
 17701                                  
 17702                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17703                                  ;---------------------------------------------------------------------------
 17704                                  ; Procedure Name : DOS_DUP
 17705                                  ;
 17706                                  ; Inputs:
 17707                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17708                                  ;		(a non net SFT is OK, in this case the ref
 17709                                  ;		 count is simply incremented)
 17710                                  ; Function:
 17711                                  ;	Signal to the devices that a logical open is occurring
 17712                                  ; Returns:
 17713                                  ;	ES:DI point to SFT
 17714                                  ;    Carry clear
 17715                                  ;	SFT ref_count is incremented
 17716                                  ; Registers modified: None.
 17717                                  ; NOTE:
 17718                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17719                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17720                                  ;	that time.
 17721                                  ;---------------------------------------------------------------------------
 17722                                  
 17723                                  DOS_DUP:
 17724                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17725                                  
 17726                                  	; MSDOS 6.0
 17727 000029D6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17728 000029DB 26C43E[9E05]            	les	di,[es:THISSFT]
 17729                                  
 17730                                  	;Entry	Dos_Dup_Direct
 17731                                  DOS_Dup_Direct:
 17732 000029E0 E881E8                  	call	IsSFTNet
 17733 000029E3 7503                    	JNZ	short DO_INC
 17734 000029E5 E8831B                  	call	DEV_OPEN_SFT
 17735                                  DO_INC:
 17736                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17737 000029E8 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17738                                  					;   we're in big trouble anyway)
 17739 000029EB C3                      	retn
 17740                                  
 17741                                  ;============================================================================
 17742                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17743                                  ;============================================================================
 17744                                  ; 08/08/2018 - Retro DOS v3.0
 17745                                  ; 18/05/2019 - Retro DOS v4.0
 17746                                  
 17747                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17748                                  ;NAME	DOS_CREATE
 17749                                  ;----------------------------------------------------------------------------
 17750                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17751                                  ;
 17752                                  ;	DOS_CREATE
 17753                                  ;	DOS_CREATE_NEW
 17754                                  ;	SET_MKND_ERR
 17755                                  ;	SET_Media_ID
 17756                                  ;	SET_EXT_Mode
 17757                                  ;
 17758                                  ;	Revision history:
 17759                                  ;
 17760                                  ;	    A000 version 4.00	  Jan. 1988
 17761                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17762                                  
 17763                                  ;Installed = TRUE
 17764                                  
 17765                                  ;	i_need	THISSFT,DWORD
 17766                                  ;	i_need	THISCDS,DWORD
 17767                                  ;	I_need	EXTERR,WORD
 17768                                  ;	I_Need	ExtErr_locus,BYTE
 17769                                  ;	I_need	JShare,DWORD
 17770                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17771                                  ;	I_need	SATTRIB,BYTE
 17772                                  ;	I_need	CALLVIDM,DWORD
 17773                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17774                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17775                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17776                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17777                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17778                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17779                                  
 17780                                  ;***	DOS_CREATE - Create a File
 17781                                  ;----------------------------------------------------------------------------
 17782                                  ;	DOS_Create is called to create the specified file, truncating
 17783                                  ;	the old one if it exists.
 17784                                  ;
 17785                                  ;	ENTRY	AX is Attribute to create
 17786                                  ;		(ds) = DOSDATA
 17787                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17788                                  ;			terminated)
 17789                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17790                                  ;			( = -1 if current dir not involved, else
 17791                                  ;			 Points to first char after last "/" of current dir part)
 17792                                  ;		[THISCDS] Points to CDS being used
 17793                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17794                                  ;		[THISSFT] Points to SFT to fill in if file created
 17795                                  ;			(sf_mode field set so that FCB may be detected)
 17796                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17797                                  ;
 17798                                  ;	EXIT	sf_ref_count is NOT altered
 17799                                  ;		CARRY CLEAR
 17800                                  ;		    THISSFT filled in.
 17801                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17802                                  ;		CARRY SET
 17803                                  ;		    AX is error code
 17804                                  ;			error_path_not_found
 17805                                  ;				Bad path (not in curr dir part if present)
 17806                                  ;			error_bad_curr_dir
 17807                                  ;				Bad path in current directory part of path
 17808                                  ;			error_access_denied
 17809                                  ;				Attempt to re-create read only file , or
 17810                                  ;				create a second volume id or create a dir
 17811                                  ;			error_sharing_violation
 17812                                  ;				The sharing mode was correct but not allowed
 17813                                  ;				generates an INT 24
 17814                                  ;	USES	all but DS
 17815                                  ;----------------------------------------------------------------------------
 17816                                  
 17817                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17818                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17819                                  
 17820                                  DOS_CREATE:
 17821                                  	; 18/05/2019 - Retro DOS v4.0
 17822                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17823                                  
 17824                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17825                                  ;hkn; this point.
 17826                                  
 17827 000029EC 30E4                    	XOR	AH,AH		; Truncate is OK
 17828                                  
 17829                                  ;	Enter here from Dos_Create_New
 17830                                  ;
 17831                                  ;	(ah) = 0 iff truncate OK
 17832                                  
 17833                                  Create_inter:
 17834 000029EE A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17835                                  				; Mask out any meaningless bits
 17836 000029F0 7511                    	JNZ	short AttErr
 17837 000029F2 A808                    	TEST	AL,attr_volume_id
 17838 000029F4 7407                    	JZ	short NoReset
 17839                                  	
 17840                                  	; MSDOS 6.0
 17841                                  	; 16/12/2022
 17842 000029F6 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17843                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17844                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17845                                  	
 17846 000029FB B008                    	MOV	AL,attr_volume_id ; 8
 17847                                  NoReset:
 17848 000029FD 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17849 000029FF A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17850 00002A01 740A                    	JZ	short ATT_OK
 17851                                  AttErr:
 17852 00002A03 B80500                  	MOV	AX,5		; Attribute problem
 17853 00002A06 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17854 00002A0B EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17855                                  				   ;	attr_device to be set.
 17856                                  ATT_OK:
 17857 00002A0D C43E[9E05]              	LES	DI,[THISSFT]
 17858 00002A11 06                      	PUSH	ES
 17859 00002A12 C436[A205]              	LES	SI,[THISCDS]
 17860 00002A16 83FEFF                  	CMP	SI,-1
 17861 00002A19 751B                    	JNE	short TEST_RE_NET
 17862                                  
 17863                                  ;	No CDS, it must be redirected.
 17864                                  
 17865 00002A1B 07                      	POP	ES
 17866                                  
 17867                                  	; MSDOS 6.0
 17868                                  ;Extended open hooks
 17869                                  	;test	byte [EXTOPEN_ON],1
 17870 00002A1C F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17871 00002A21 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17872                                  IFS_extopen:				    ;AN000;EO.
 17873 00002A23 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17874                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17875 00002A24 B82E11                  	mov	ax,112Eh
 17876                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17877 00002A27 CD2F                    	INT	2FH			    ;AN000;EO.
 17878 00002A29 5B                      	POP	BX			    ;AN000;EO. trash bx
 17879 00002A2A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17880 00002A2F C3                      	retn				    ;AN000;EO.
 17881                                  NOEXTOP:				    ;AN000;
 17882                                  ;Extended open hooks
 17883                                  
 17884                                  ;IF NOT Installed
 17885                                  ;	transfer NET_SEQ_CREATE
 17886                                  ;ELSE
 17887 00002A30 50                      	PUSH	AX
 17888                                  
 17889                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17890                                  	;INT	2FH
 17891                                  
 17892 00002A31 B81811                  	mov	ax,1118h
 17893                                  	; 01/02/2024
 17894                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17895                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17896                                  			; SDA first filename pointer -> fully-qualified name of file
 17897                                  			; STACK: WORD file creation mode???
 17898                                  
 17899                                  	;POP	BX			; BX is trashed anyway
 17900                                  	;retn
 17901 00002A34 EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17902                                  ;ENDIF
 17903                                  
 17904                                  ;	We have a CDS. See if it's network
 17905                                  
 17906                                  TEST_RE_NET:
 17907                                  	;;test	word [es:si+43h],8000h
 17908                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17909                                  	; 07/12/2022
 17910                                  	;test	byte [es:si+44h],80h
 17911                                  	; 17/12/2022
 17912 00002A36 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17913 00002A3B 07                      	POP	ES
 17914 00002A3C 7417                    	JZ	short LOCAL_CREATE
 17915                                  
 17916                                  	; MSDOS 6.0
 17917 00002A3E E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17918 00002A41 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17919                                  	;;or	word [es:di+2],2
 17920                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17921                                  	; 17/12/2022
 17922 00002A43 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17923                                  
 17924                                  ;Extended open hooks
 17925                                  dochk:
 17926 00002A48 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17927 00002A4D 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17928                                  ;Extended open hooks
 17929                                  
 17930                                  ;IF NOT Installed
 17931                                  ;	transfer NET_CREATE
 17932                                  ;ELSE
 17933 00002A4F 50                      	PUSH	AX
 17934                                  	
 17935                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17936                                  	;INT	2FH
 17937                                  	
 17938 00002A50 B81711                  	mov	ax,1117h
 17939                                  	
 17940                                  	; 01/02/2024
 17941                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17942                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17943                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17944                                  			; SDA CDS pointer -> current directory
 17945                                  			; Return: CF set on error
 17946                                  
 17947                                  	;POP	BX			; BX is trashed anyway
 17948                                  ;nomore:
 17949                                  	;retn
 17950 00002A53 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17951                                  ;ENDIF
 17952                                  
 17953                                  ;**	It's a local create. We have a local CDS for it.
 17954                                  
 17955                                  LOCAL_CREATE:
 17956                                  	; MSDOS 6.0
 17957 00002A55 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17958 00002A58 7205                    	JC	short setdone	;AN000;EO.
 17959                                  	
 17960                                  	; MSDOS 3.3 & MSDOS 6.0
 17961                                  	; 17/12/2022
 17962                                  	;;or	word [es:di+2],2
 17963                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17964                                  	;or	byte [es:di+2],2
 17965 00002A5A 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17966                                  setdone:
 17967 00002A5F E8ABE8                  	call	ECritDisk
 17968 00002A62 E8A51E                  	call	MakeNode
 17969 00002A65 7317                    	JNC	short Create_ok
 17970 00002A67 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17971 00002A6C E8B9E8                  	call	LCritDisk
 17972                                  
 17973                                  	;entry	SET_MKND_ERR
 17974                                  SET_MKND_ERR:
 17975                                  
 17976                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17977                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17978                                  
 17979                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17980 00002A6F BB[762A]                	MOV     BX,CRTERRTAB
 17981                                  	;XLAT  ; MSDOS 3.3
 17982                                  	; 18/05/2019 - Retro DOS v4.0
 17983 00002A72 2E                      	CS
 17984 00002A73 D7                      	XLAT
 17985                                  CreatBadRet:
 17986 00002A74 F9                      	STC
 17987 00002A75 C3                      	retn
 17988                                  
 17989                                  ; 13/05/2019 - Retro DOS v4.0
 17990                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17991                                  ; ---------------------------------------------------------------------------
 17992                                  
 17993                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17994                                  
 17995                                  ; 17/07/2018 - Retro DOS v3.0
 17996                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17997                                  
 17998                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17999                                  ;	db	0,5,52h,50h,3,5,20h
 18000                                  
 18001                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18002                                  ;	db	0,5,52h,50h,3,5,20h,2
 18003                                  
 18004                                  ; 08/08/2018
 18005                                  
 18006                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18007 00002A76 00                      	DB	0			; none
 18008 00002A77 05                      	DB	error_access_denied	; MakeNode error 1
 18009 00002A78 52                      	DB	error_cannot_make	; MakeNode error 2
 18010 00002A79 50                      	DB	error_file_exists	; MakeNode error 3
 18011 00002A7A 03                      	DB	error_path_not_found	; MakeNode error 4
 18012 00002A7B 05                      	DB	error_access_denied	; MakeNode error 5
 18013 00002A7C 20                      	DB	error_sharing_violation ; MakeNode error 6
 18014                                  	; MSDOS 6.0
 18015 00002A7D 02                      	DB	error_file_not_found	; MakeNode error 7
 18016                                  
 18017                                  ; ---------------------------------------------------------------------------
 18018                                  
 18019                                  ; We have just created a new file. This results in the truncation of old
 18020                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18021                                  ; file to the current size.
 18022                                  
 18023                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18024                                  ; drive number to force a Build BPB after Media Check.
 18025                                  
 18026                                  ;;; FASTOPEN 8/29/86
 18027                                  Create_ok:
 18028 00002A7E E8F4FB                  	call	FastOpen_Delete
 18029                                  ;;; FASTOPEN 8/29/86
 18030 00002A81 A0[6D05]                	mov	al,[SATTRIB]
 18031 00002A84 A808                    	test	al,attr_volume_id
 18032 00002A86 741C                    	jz	short NoVolLabel
 18033 00002A88 C43E[A205]              	LES	DI,[THISCDS]
 18034                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18035 00002A8C 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18036 00002A8F 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18037 00002A92 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18038                                  	
 18039                                  	; 18/05/2019 - Retro DOS v4.0
 18040                                  
 18041                                  	; MSDOS 6.0
 18042 00002A96 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18043 00002A98 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18044                                  	
 18045 00002A9B E86FE8                  	call	ECritDisk
 18046 00002A9E E8B12B                  	call	FATREAD_CDS		; force a media check
 18047 00002AA1 E884E8                  	call	LCritDisk
 18048                                  
 18049                                  NoVolLabel:
 18050 00002AA4 B80200                  	MOV	ax,2
 18051 00002AA7 C43E[9E05]              	LES	DI,[THISSFT]
 18052                                  ;if installed
 18053                                  	;call	JShare + 14 * 4
 18054 00002AAB FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18055                                  ;else
 18056                                  ;	Call	ShSU
 18057                                  ;endif
 18058 00002AAF E876E8                  	call	LCritDisk
 18059 00002AB2 E94901                  	jmp	SET_SFT_MODE
 18060                                  
 18061                                  ;---------------------------------------------------------------------------
 18062                                  ; Procedure Name : Dos_Create_New
 18063                                  ;
 18064                                  ; Inputs:
 18065                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18066                                  ;		terminated)
 18067                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18068                                  ;		( = -1 if current dir not involved, else
 18069                                  ;		 Points to first char after last "/" of current dir part)
 18070                                  ;	[THISCDS] Points to CDS being used
 18071                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18072                                  ;	[THISSFT] Points to SFT to fill in if file created
 18073                                  ;		(sf_mode field set so that FCB may be detected)
 18074                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18075                                  ;	AX is Attribute to create
 18076                                  ; Function:
 18077                                  ;	Try to create the specified file truncating an old one that exists
 18078                                  ; Outputs:
 18079                                  ;	sf_ref_count is NOT altered
 18080                                  ;	CARRY CLEAR
 18081                                  ;	    THISSFT filled in.
 18082                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18083                                  ;	CARRY SET
 18084                                  ;	    AX is error code
 18085                                  ;		error_path_not_found
 18086                                  ;			Bad path (not in curr dir part if present)
 18087                                  ;		error_bad_curr_dir
 18088                                  ;			Bad path in current directory part of path
 18089                                  ;		error_access_denied
 18090                                  ;			Create a second volume id or create a dir
 18091                                  ;		error_file_exists
 18092                                  ;			Already a file by this name
 18093                                  ; DS preserved, others destroyed
 18094                                  ;---------------------------------------------------------------------------
 18095                                  
 18096                                  DOS_Create_New:
 18097 00002AB5 B401                    	MOV	AH,1		; Truncate is NOT OK
 18098 00002AB7 E934FF                  	JMP	Create_inter
 18099                                  
 18100                                  ; MSDOS 6.0
 18101                                  ;---------------------------------------------------------------------------
 18102                                  ; Procedure Name : Set_Media_ID
 18103                                  ;
 18104                                  ; Inputs:
 18105                                  ;	NAME1= Volume ID
 18106                                  ;	BH= 0, delete volume id
 18107                                  ;	    1, set new volume id
 18108                                  ;	DS= DOSGROUP
 18109                                  ; Function:
 18110                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18111                                  ; Outputs:
 18112                                  ;	CARRY CLEAR
 18113                                  ;	    volume id set
 18114                                  ;	CARRY SET
 18115                                  ;	    AX is error code
 18116                                  ;---------------------------------------------------------------------------
 18117                                  
 18118                                  	; 18/05/2019 - Retro DOS v4.0
 18119                                  Set_Media_ID:
 18120 00002ABA 50                      	PUSH	AX		;AN000;;>32mb
 18121 00002ABB 06                      	PUSH	ES		;AN000;;>32mb
 18122 00002ABC 57                      	PUSH	DI		;AN000;;>32mb
 18123                                  
 18124 00002ABD FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18125 00002ABF 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18126 00002AC1 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18127 00002AC3 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18128                                  
 18129                                  ;hkn; PACKET_TEMP is in DOSDATA
 18130 00002AC6 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18131                                  
 18132 00002AC9 53                      	PUSH	BX		;AN000;;>32mb
 18133 00002ACA 52                      	PUSH	DX		;AN000;;>32mb
 18134 00002ACB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18135                                  
 18136                                  	;invoke	$IOCTL		;AN000;;>32mb
 18137 00002ACD E86BF7                  	call	_$IOCTL	
 18138                                  
 18139 00002AD0 5A                      	POP	DX		;AN000;;>32mb
 18140 00002AD1 5B                      	POP	BX		;AN000;;>32mb
 18141 00002AD2 7224                    	JC	short geterr	;AN000;;>32mb
 18142                                  
 18143 00002AD4 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18144 00002AD6 7405                    	JZ	short NoName	;AN000;>32mb yes
 18145                                  
 18146                                  ;hkn; NAME1 is in DOSDATA
 18147 00002AD8 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18148                                  
 18149 00002ADB EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18150                                  NoName: 			;AN000;
 18151                                  
 18152                                  ;hkn; NO_NAME_ID is in DOSDATA
 18153 00002ADD BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18154                                  
 18155                                  doset:				;AN000;
 18156 00002AE0 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18157                                  	;add	di,6
 18158 00002AE2 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18159                                  
 18160                                  ;hkn; ES & DS must point to SS
 18161                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18162 00002AE5 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18163                                  
 18164 00002AE6 1F                      	POP	DS		;AN000;;>32mb
 18165                                  
 18166                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18167 00002AE7 16                      	PUSH	SS		;AN000;;>32mb
 18168                                  
 18169 00002AE8 07                      	POP	ES		;AN000;;>32mb
 18170 00002AE9 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18171 00002AEC F3A4                    	REP	MOVSB		;AN000;;>32mb
 18172 00002AEE B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18173 00002AF1 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18174 00002AF3 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18175                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18176 00002AF5 E843F7                  	call	_$IOCTL	
 18177                                  geterr: 			;AN000;
 18178                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18179 00002AF8 16                      	PUSH	SS		;AN000;>32mb
 18180                                  
 18181 00002AF9 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18182                                  
 18183 00002AFA 5F                      	POP	DI		;AN000;;>32mb
 18184 00002AFB 07                      	POP	ES		;AN000;;>32mb
 18185 00002AFC 58                      	POP	AX		;AN000;;>32mb
 18186 00002AFD C3                      	retn			;AN000;>32mb
 18187                                  
 18188                                  ; MSDOS 6.0
 18189                                  ;---------------------------------------------------------------------------
 18190                                  ; Procedure Name : Set_EXT_mode
 18191                                  ;
 18192                                  ; Inputs:
 18193                                  ;	[EXTOPEN_ON]= flag for extended open
 18194                                  ;	SAVE_BX= mode specified in Extended Open
 18195                                  ; Function:
 18196                                  ;	Set mode in ThisSFT
 18197                                  ; Outputs:
 18198                                  ;	carry set,mode is set if from Extended Open
 18199                                  ;	carry clear, mode not set yet
 18200                                  ;---------------------------------------------------------------------------
 18201                                  
 18202                                  ; 13/05/2019 - Retro DOS v4.0
 18203                                  
 18204                                  Set_EXT_mode:
 18205                                  
 18206                                  ;hkn; SS override
 18207 00002AFE 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18208 00002B04 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18209 00002B06 50                      	PUSH	AX			    ;AN000;EO.
 18210                                  
 18211                                  ;hkn; SS override
 18212 00002B07 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18213                                  	;or	[es:di+2],ax
 18214 00002B0B 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18215 00002B0F 58                      	POP	AX			    ;AN000;EO.
 18216 00002B10 F9                      	STC				    ;AN000;EO.
 18217                                  NOTEX:					    ;AN000;
 18218 00002B11 C3                      	retn				    ;AN000;EO.
 18219                                  
 18220                                  ;============================================================================
 18221                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18222                                  ;============================================================================
 18223                                  ; 08/08/2018 - Retro DOS v3.0
 18224                                  ; 18/05/2019 - Retro DOS v4.0
 18225                                  
 18226                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18227                                  ;	NAME	DOS_OPEN
 18228                                  
 18229                                  ;**	OPEN.ASM - File Open
 18230                                  ;----------------------------------------------------------------------------
 18231                                  ;	Low level routines for openning a file from a file spec.
 18232                                  ;	Also misc routines for sharing errors
 18233                                  ;
 18234                                  ;	DOS_Open
 18235                                  ;	Check_Access_AX
 18236                                  ;	SHARE_ERROR
 18237                                  ;	SET_SFT_MODE
 18238                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18239                                  ;
 18240                                  ;	Revision history:
 18241                                  ;
 18242                                  ;	    Created: ARR 30 March 1983
 18243                                  ;	    A000	version 4.00   Jan. 1988
 18244                                  ;
 18245                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18246                                  ; 	       remote extended opens and not save_cx.
 18247                                  ;
 18248                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18249                                  ;	       on the stack before calling off to the redir.
 18250                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18251                                  ;	       to handle open from exec. In this case set the appropriate bit
 18252                                  ;	       else do not.
 18253                                  ;----------------------------------------------------------------------------	
 18254                                  
 18255                                  ;Installed = TRUE
 18256                                  
 18257                                  ;	i_need	NoSetDir,BYTE
 18258                                  ;	i_need	THISSFT,DWORD
 18259                                  ;	i_need	THISCDS,DWORD
 18260                                  ;	i_need	CURBUF,DWORD
 18261                                  ;	i_need	CurrentPDB,WORD
 18262                                  ;	i_need	CURR_DIR_END,WORD
 18263                                  ;	I_need	RetryCount,WORD
 18264                                  ;	I_need	Open_Access,BYTE
 18265                                  ;	I_need	fSharing,BYTE
 18266                                  ;	i_need	JShare,DWORD
 18267                                  ;	I_need	FastOpenFlg,byte
 18268                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18269                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18270                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18271                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18272                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18273                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18274                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18275                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18276                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18277                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18278                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18279                                  ;
 18280                                  ;	I_need	DOS_FLAG,BYTE
 18281                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18282                                  
 18283                                  ;Break	<DOS_Open - internal file access>
 18284                                  ;---------------------------------------------------------------------------
 18285                                  ; Procedure Name : DOS_Open
 18286                                  ;
 18287                                  ; Inputs:
 18288                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18289                                  ;		terminated)
 18290                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18291                                  ;		( = -1 if current dir not involved, else
 18292                                  ;		 Points to first char after last "/" of current dir part)
 18293                                  ;	[THISCDS] Points to CDS being used
 18294                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18295                                  ;	[THISSFT] Points to SFT to fill in if file found
 18296                                  ;		(sf_mode field set so that FCB may be detected)
 18297                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18298                                  ;	AX is Access and Sharing mode
 18299                                  ;	  High NIBBLE of AL (Sharing Mode)
 18300                                  ;		sharing_compat	   file is opened in compatibility mode
 18301                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18302                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18303                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18304                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18305                                  ;	  Low NIBBLE of AL (Access Mode)
 18306                                  ;		open_for_read	file is opened for reading
 18307                                  ;		open_for_write	file is opened for writing
 18308                                  ;		open_for_both	file is opened for both reading and writing.
 18309                                  ;
 18310                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18311                                  ;		(not checked)
 18312                                  ; Function:
 18313                                  ;	Try to open the specified file
 18314                                  ; Outputs:
 18315                                  ;	sf_ref_count is NOT altered
 18316                                  ;	CARRY CLEAR
 18317                                  ;	    THISSFT filled in.
 18318                                  ;	CARRY SET
 18319                                  ;	    AX is error code
 18320                                  ;		error_file_not_found
 18321                                  ;			Last element of path not found
 18322                                  ;		error_path_not_found
 18323                                  ;			Bad path (not in curr dir part if present)
 18324                                  ;		error_bad_curr_dir
 18325                                  ;			Bad path in current directory part of path
 18326                                  ;		error_invalid_access
 18327                                  ;			Bad sharing mode or bad access mode or bad combination
 18328                                  ;		error_access_denied
 18329                                  ;			Attempt to open read only file for writting, or
 18330                                  ;			open a directory
 18331                                  ;		error_sharing_violation
 18332                                  ;			The sharing mode was correct but not allowed
 18333                                  ;			generates an INT 24 on compatibility mode SFTs
 18334                                  ; DS preserved, others destroyed
 18335                                  ;----------------------------------------------------------------------------
 18336                                  
 18337                                  ; 18/05/2019 - Retro DOS v4.0
 18338                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18339                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18340                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18341                                  
 18342                                  DOS_OPEN:
 18343                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18344                                  
 18345 00002B12 C606[4C03]00            	MOV	byte [NoSetDir],0
 18346 00002B17 E83301                  	CALL	Check_Access_AX
 18347 00002B1A 722B                    	JC	short do_ret_label	    ; retc
 18348                                  
 18349 00002B1C C43E[9E05]              	LES	DI,[THISSFT]
 18350 00002B20 30E4                    	XOR	AH,AH
 18351                                  
 18352                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18353                                  
 18354 00002B22 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18355 00002B26 06                      	PUSH	ES
 18356 00002B27 C436[A205]              	LES	SI,[THISCDS]
 18357                                  	; 18/08/2018
 18358 00002B2B 83FEFF                  	CMP	SI,-1
 18359 00002B2E 7530                    	JNZ	short TEST_RE_NET1
 18360 00002B30 07                      	POP	ES
 18361                                  
 18362                                  	; MSDOS 6.0
 18363                                  ;Extended open hooks
 18364 00002B31 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18365 00002B36 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18366                                  _IFS_extopen:									;AN000;
 18367 00002B38 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18368                                  					    ; with which call was made. This
 18369                                  					    ; has the open access bits. 
 18370                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18371                                  	
 18372 00002B3B 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18373                                  	;mov	ax,112Eh
 18374                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18375 00002B3C B82E11                  	mov	ax,(MultNET*256)+46 
 18376 00002B3F CD2F                    	INT	2FH			    ;FT.				;AN000;
 18377 00002B41 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18378 00002B42 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18379                                  
 18380                                  do_ret_label:
 18381 00002B47 C3                      	retn				    ;FT.				;AN000;
 18382                                  _NOEXTOP:
 18383                                  ;Extended open hooks
 18384                                  	;
 18385                                  ;IF NOT Installed
 18386                                  	;transfer NET_SEQ_OPEN
 18387                                  ;ELSE
 18388                                  	
 18389                                  do_net_int2f:
 18390 00002B48 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18391 00002B4D 7409                    	jz	short not_exec_open	; N: just do net open
 18392                                  					; Y: check to see if redir is aware
 18393                                  					;    of this 
 18394                                  	
 18395                                  					; M042 - start
 18396                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18397 00002B4F F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18398                                  					; Q: does this redir know how to 
 18399                                  					;    this
 18400 00002B54 7402                    	jz	short not_exec_open	; N: just do net open
 18401                                  					; Y: set bit 3 of access byte and 
 18402                                  					;    set sharing mode to DENY_WRITE
 18403                                  					; M042 - end
 18404                                  	
 18405                                  	; NOTE: This specific mode has not been set for the code assembled
 18406                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18407                                  	; always one.
 18408                                  					; M035 - set the bits on the stack
 18409                                  	;mov	al,23h
 18410 00002B56 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18411                                  	
 18412                                  not_exec_open:
 18413                                  	; MSDOS 3.3 & MSDOS 6.0
 18414 00002B58 50                      	PUSH	AX
 18415                                  
 18416                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18417                                  	;INT	2FH
 18418                                  
 18419 00002B59 B81611                  	mov     ax,1116h
 18420 00002B5C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18421                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18422                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18423                                  			; STACK: WORD file open mode
 18424                                  			; Return: CF set on error
 18425                                  
 18426 00002B5E 5B                      	POP	BX			; clean stack
 18427                                  ;do_ret_label: ; 09/08/2018
 18428 00002B5F C3                      	retn
 18429                                  ;ENDIF
 18430                                  
 18431                                  TEST_RE_NET1:
 18432                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18433                                  	; 17/12/2022
 18434 00002B60 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18435 00002B65 07                      	POP	ES
 18436                                  	; 18/05/2019
 18437 00002B66 7409                    	JZ	short LOCAL_OPEN
 18438                                  
 18439                                  ;Extended open hooks
 18440                                  	; MSDOS 6.0
 18441 00002B68 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18442 00002B6D 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18443                                  ;Extended open hooks
 18444                                  
 18445                                  ;IF NOT Installed
 18446                                  ;	transfer NET_OPEN
 18447                                  ;ELSE
 18448 00002B6F EBD7                    	jmp	short do_net_int2f
 18449                                  ;ENDIF
 18450                                  
 18451                                  LOCAL_OPEN:
 18452                                  	; MSDOS 3.3 & MSDOS 6.0
 18453 00002B71 E899E7                  	call	ECritDisk
 18454                                  
 18455                                  ; DOS 3.3 FastOPen 6/16/86
 18456                                  
 18457                                  	;or	byte [FastOpenFlg],5
 18458 00002B74 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18459                                  
 18460 00002B79 E82213                  	call	GETPATH
 18461                                  
 18462                                  ; DOS 3.3 FastOPen 6/16/86
 18463                                  
 18464 00002B7C 731D                    	JNC	short Open_found
 18465 00002B7E 7511                    	JNZ	short bad_path2
 18466 00002B80 08C9                    	OR	CL,CL
 18467 00002B82 740D                    	JZ	short bad_path2
 18468                                  OpenFNF:
 18469 00002B84 B80200                  	MOV	AX,error_file_not_found	; 2
 18470                                  OpenBadRet:
 18471                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18472                                  	; 12/08/2018
 18473                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18474                                  	; MSDOS 6.0
 18475 00002B87 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18476 00002B8D F9                      	STC
 18477                                  	;call	LCritDisk
 18478                                  	; 16/12/2022
 18479 00002B8E E997E7                  	jmp	LCritDisk
 18480                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18481                                  	;retn 	; 08/09/2018
 18482                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18483                                  	;jmp	Clear_FastOpen
 18484                                  
 18485                                  bad_path2:
 18486 00002B91 B80300                  	MOV	AX,error_path_not_found	; 3
 18487 00002B94 EBF1                    	JMP	short OpenBadRet
 18488                                  
 18489                                  Open_Bad_Access:
 18490 00002B96 B80500                  	MOV	AX,error_access_denied	; 5
 18491 00002B99 EBEC                    	JMP	short OpenBadRet
 18492                                  
 18493                                  Open_found:
 18494 00002B9B 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18495 00002B9D 08E4                    	OR	AH,AH
 18496 00002B9F 783E                    	JS	short open_ok		; Devices don't have attributes
 18497 00002BA1 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18498                                  	;mov	al,[es:bx+0Bh]
 18499 00002BA5 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18500 00002BA9 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18501 00002BAB 75E9                    	JNZ	short Open_Bad_Access
 18502 00002BAD A801                    	TEST	AL,attr_read_only	; check write on read only
 18503 00002BAF 742E                    	JZ	short open_ok
 18504                                  
 18505                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18506                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18507                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18508                                  ; processing until the actual write operation:
 18509                                  ;
 18510                                  ; If FCB, then we change the mode to be read_only.
 18511                                  ; If net_FCB, then we change the mode to be read_only.
 18512                                  ; If not open for read then error.
 18513                                  
 18514 00002BB1 1E                      	push	ds
 18515 00002BB2 56                      	push	si
 18516 00002BB3 C536[9E05]              	LDS	SI,[THISSFT]
 18517                                  	;mov	cx,[si+2]
 18518 00002BB7 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18519                                  	; 17/12/2022
 18520                                  	;test	ch,80h
 18521 00002BBA F6C580                  	test	ch,sf_isFCB>>8
 18522                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18523 00002BBD 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18524 00002BBF 88CA                    	MOV	DL,CL
 18525 00002BC1 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18526 00002BC4 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18527 00002BC7 7508                    	JNZ	short NormalOpen	; no
 18528                                  ResetAccess:
 18529                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18530                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18531                                  	; 16/12/2022
 18532 00002BC9 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18533                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18534 00002BCC 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18535 00002BCF EB0C                    	JMP	SHORT FillSFT
 18536                                  
 18537                                  ; The SFT is normal. See if the requested access is open_for_read
 18538                                  
 18539                                  NormalOpen:
 18540 00002BD1 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18541 00002BD4 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18542 00002BD7 7404                    	JZ	short FillSFT
 18543 00002BD9 5E                      	pop	si
 18544 00002BDA 1F                      	pop	ds
 18545 00002BDB EBB9                    	JMP	short Open_Bad_Access
 18546                                  ;
 18547                                  ; All done, restore registers and fill the SFT.
 18548                                  ;
 18549                                  FillSFT:
 18550 00002BDD 5E                      	pop	si
 18551 00002BDE 1F                      	pop	ds
 18552                                  open_ok:
 18553 00002BDF E8E61E                  	call	DOOPEN			; Fill in SFT
 18554                                  
 18555                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18556                                  	; 18/05/2019
 18557                                  	;and	byte [ss:FastOpenFlag],80h
 18558 00002BE2 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18559                                  	; 12/08/2018
 18560                                  	;and	byte [FastOpenFlg],Fast_yes	
 18561                                  
 18562                                  	; MSDOS 6.0
 18563 00002BE8 E84300                  	CALL	DO_SHARE_CHECK
 18564 00002BEB 7303                    	JNC	short SHARE_OK
 18565                                  	;call	LCritDisk
 18566                                  	; 16/12/2022
 18567 00002BED E938E7                  	jmp	LCritDisk
 18568                                  	;;JMP	short Clear_FastOpen
 18569                                  	;retn	; 18/05/2019
 18570                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18571                                  	;jmp	short Clear_FastOpen	
 18572                                  
 18573                                  	; MSDOS 3.3
 18574                                  ;DO_SHARE_CHECK:
 18575                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18576                                  ;OpenShareRetry:
 18577                                  ;	push	cx			; Save number left to do
 18578                                  ;	call	SHARE_CHECK		; Final Check
 18579                                  ;	pop	cx			; CX = # left
 18580                                  ;	JNC	short SHARE_OK		; No problem with access
 18581                                  ;	call	Idle
 18582                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18583                                  ;OpenShareFail:
 18584                                  ;	LES	DI,[THISSFT]
 18585                                  ;	call	SHARE_ERROR
 18586                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18587                                  	
 18588                                  	;12/08/2018
 18589                                  	;mov	byte [ss:FastOpenFlg],0
 18590                                  	;08/09/2018
 18591                                  	;mov	byte [FastOpenFlg],0
 18592                                  	;call	LCritDisk
 18593                                  	;JMP	short Clear_FastOpen
 18594                                  	;retn
 18595                                  
 18596                                  SHARE_OK:
 18597                                  	; MSDOS 3.3 & MSDOS 6.0
 18598 00002BF0 B80300                  	MOV	AX,3
 18599 00002BF3 C43E[9E05]              	LES	DI,[THISSFT]
 18600                                  ;if installed
 18601                                  	;call	JShare + 14 * 4
 18602 00002BF7 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18603                                  ;else
 18604                                  ;	Call	ShSU
 18605                                  ;endif
 18606 00002BFB E82AE7                  	call	LCritDisk
 18607                                  	
 18608                                  	;FallThru Set_SFT_Mode
 18609                                  
 18610                                  ;----------------------------------------------------------------------------
 18611                                  ; Procedure Name : SET_SFT_MODE
 18612                                  ;
 18613                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18614                                  ;
 18615                                  ;   Inputs:
 18616                                  ;	ThisSFT points to SFT
 18617                                  ;
 18618                                  ;   Outputs:
 18619                                  ;	Carry clear
 18620                                  ;   Registers modified: AX.
 18621                                  ;---------------------------------------------------------------------------
 18622                                  
 18623                                  ;hkn; called from create. DS already set up to DOSDATA.
 18624                                  
 18625                                  SET_SFT_MODE:
 18626 00002BFE C43E[9E05]              	LES	DI,[THISSFT]
 18627 00002C02 E86619                  	call	DEV_OPEN_SFT
 18628                                  	;test	word [es:di+2],8000h
 18629                                  	; 17/12/2022
 18630                                  	;test	byte [es:di+3],80h
 18631 00002C05 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18632                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18633 00002C0A 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18634 00002C0C A1[3003]                	MOV	AX,[CurrentPDB]
 18635                                  	;mov	[es:di+31h],ax
 18636 00002C0F 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18637                                  
 18638                                  Clear_FastOpen:
 18639 00002C13 C3                      	retn			       ;;;;; DOS 3.3
 18640                                  
 18641                                  ;----------------------------------------------------------------------------
 18642                                  ; Procedure Name : SHARE_ERROR
 18643                                  ;
 18644                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18645                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18646                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18647                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18648                                  ;---------------------------------------------------------------------------
 18649                                  
 18650                                  SHARE_ERROR:
 18651                                  	; 17/12/2022
 18652                                  	;test	byte [es:di+3],80h
 18653 00002C14 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18654                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18655 00002C19 7509                    	JNZ	short _HARD_ERR
 18656 00002C1B 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18657 00002C1F 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18658                                  	;CMP	CL,SHARING_COMPAT ; 0
 18659                                  	;JNE	short _NO_HARD_ERR
 18660                                  	; 21/09/2023
 18661 00002C22 7505                    	jnz	short _NO_HARD_ERR
 18662                                  _HARD_ERR:
 18663 00002C24 E8A146                  	call	SHARE_VIOLATION
 18664                                  	;retnc				; User wants retry
 18665 00002C27 73EA                    	jnc	short Clear_FastOpen
 18666                                  _NO_HARD_ERR:
 18667 00002C29 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18668 00002C2C F9                      	STC
 18669 00002C2D C3                      	retn
 18670                                  
 18671                                  ; MSDOS 6.0
 18672                                  ;----------------------------------------------------------------------------
 18673                                  ; Procedure Name : DO_SHARE_CHECK
 18674                                  ;
 18675                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18676                                  ; Functions: check file sharing mode is valid
 18677                                  ; Output: carry set, error
 18678                                  ;	  carry clear, share ok
 18679                                  ;----------------------------------------------------------------------------
 18680                                  
 18681                                  	; 18/05/2019 - Retro DOS v4.0
 18682                                  DO_SHARE_CHECK:
 18683 00002C2E E8DCE6                  	call	ECritDisk		; enter critical section
 18684                                  OPN_RETRY:
 18685 00002C31 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18686                                  OpenShareRetry:
 18687 00002C35 51                      	push	cx			; Save number left to do
 18688 00002C36 E88A46                  	call	SHARE_CHECK		; Final Check
 18689 00002C39 59                      	pop	cx			; CX = # left
 18690 00002C3A 730E                    	JNC	short Share_Ok2		; No problem with access
 18691 00002C3C E8C7E5                  	call	Idle
 18692 00002C3F E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18693                                  OpenShareFail:
 18694 00002C41 C43E[9E05]              	LES	DI,[THISSFT]
 18695 00002C45 E8CCFF                  	call	SHARE_ERROR
 18696 00002C48 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18697                                  Share_Ok2:
 18698                                  	;call	LCritDisk		; leave critical section
 18699                                  	;retn
 18700                                  	; 18/12/2022
 18701 00002C4A E9DBE6                  	jmp	LCritDisk
 18702                                  
 18703                                  ;-----------------------------------------------------------------------------
 18704                                  ; Procedure Name : Check_Access
 18705                                  ;
 18706                                  ; Inputs:
 18707                                  ;	AX is mode
 18708                                  ;	  High NIBBLE of AL (Sharing Mode)
 18709                                  ;		sharing_compat	   file is opened in compatibility mode
 18710                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18711                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18712                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18713                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18714                                  ;	  Low NIBBLE of AL (Access Mode)
 18715                                  ;		open_for_read	file is opened for reading
 18716                                  ;		open_for_write	file is opened for writing
 18717                                  ;		open_for_both	file is opened for both reading and writing.
 18718                                  ; Function:
 18719                                  ;	Check this access mode for correctness
 18720                                  ; Outputs:
 18721                                  ;	[open_access] = AL input
 18722                                  ;	Carry Clear
 18723                                  ;		Mode is correct
 18724                                  ;		AX unchanged
 18725                                  ;	Carry Set
 18726                                  ;		Mode is bad
 18727                                  ;		AX = error_invalid_access
 18728                                  ; No other registers effected
 18729                                  ;----------------------------------------------------------------------------
 18730                                  
 18731                                  Check_Access_AX:
 18732 00002C4D A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18733 00002C50 53                      	PUSH	BX
 18734                                  
 18735                                  ;	If sharing, then test for special sharing mode for FCBs
 18736                                  
 18737 00002C51 88C3                    	MOV	BL,AL
 18738 00002C53 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18739 00002C56 803E[7205]FF            	CMP	byte [FSHARING],-1
 18740 00002C5B 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18741 00002C5D 80FB70                  	CMP	BL,SHARING_NET_FCB
 18742 00002C60 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18743                                  CheckShareMode:
 18744 00002C62 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18745 00002C65 770D                    	JA	short Make_Bad_Access
 18746                                  CheckAccessMode:
 18747 00002C67 88C3                    	MOV	BL,AL
 18748 00002C69 80E30F                  	AND	BL,access_mask
 18749 00002C6C 80FB02                  	CMP	BL,2
 18750 00002C6F 7703                    	JA	short Make_Bad_Access
 18751 00002C71 5B                      	POP	BX
 18752 00002C72 F8                      	CLC
 18753 00002C73 C3                      	retn
 18754                                  
 18755                                  Make_Bad_Access:
 18756 00002C74 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18757 00002C77 5B                      	POP	BX
 18758 00002C78 F9                      	STC
 18759 00002C79 C3                      	retn
 18760                                  
 18761                                  ;============================================================================
 18762                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18763                                  ;============================================================================
 18764                                  ; 08/08/2018 - Retro DOS v3.0
 18765                                  ; 18/05/2019 - Retro DOS v4.0
 18766                                  
 18767                                  ;**	Low level routine for returning disk drive information from a local
 18768                                  ;	  or NET device
 18769                                  ;
 18770                                  ;	DISK_INFO
 18771                                  ;
 18772                                  ;	  Modification history:
 18773                                  ;
 18774                                  ;		Created: ARR 30 March 1983
 18775                                  
 18776                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18777                                  ;---------------------------------------------------------------------------
 18778                                  ; Procedure Name : DISK_INFO
 18779                                  ;
 18780                                  ; Inputs:
 18781                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18782                                  ;		(It MAY NOT be NUL, error not detected)
 18783                                  ; Function:
 18784                                  ;	Get Interesting Drive Information
 18785                                  ; Returns:
 18786                                  ;	DX = Number of free allocation units
 18787                                  ;	BX = Total Number of allocation units on disk
 18788                                  ;	CX = Sector size
 18789                                  ;	AL = Sectors per allocation unit
 18790                                  ;	AH = FAT ID BYTE
 18791                                  ;	Carry set if error (currently user FAILed to I 24)
 18792                                  ; Segs except ES preserved, others destroyed
 18793                                  ;----------------------------------------------------------------------------
 18794                                  
 18795                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18796                                  ;hkn; DOSDATA. 
 18797                                  
 18798                                  DISK_INFO:
 18799                                  	; 08/08/2018 - Retro DOS v3.0
 18800                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18801                                  
 18802 00002C7A E8CEE5                  	call	TestNet
 18803 00002C7D 7306                    	JNC	short LOCAL_DSK_INFO
 18804                                  
 18805                                  ;IF NOT Installed
 18806                                  ;	transfer NET_DISK_INFO
 18807                                  ;ELSE
 18808                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18809                                  	;INT	2FH
 18810                                  	;return
 18811                                  
 18812 00002C7F B80C11                  	mov     ax,110Ch
 18813 00002C82 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18814                                  			; ES:DI -> current directory
 18815                                  			; Return: AL = sectors per cluster, BX = total clusters
 18816                                  			; CX = bytes per sector, DX = number of available clusters
 18817 00002C84 C3                      	retn
 18818                                  ;ENDIF
 18819                                  
 18820                                  LOCAL_DSK_INFO:
 18821 00002C85 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18822 00002C8A E880E6                  	call	ECritDisk
 18823 00002C8D E8C229                  	call	FATREAD_CDS		; perform media check.
 18824 00002C90 7241                    	JC	short CRIT_LEAVE
 18825 00002C92 BB0200                  	MOV	BX,2
 18826 00002C95 E82428                  	call	UNPACK			; Get first FAT sector into CURBUF
 18827 00002C98 7239                    	JC	short CRIT_LEAVE
 18828 00002C9A C536[E205]              	LDS	SI,[CURBUF]
 18829                                  	;mov	ah,[si+20]
 18830 00002C9E 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18831                                  
 18832                                  ;hkn; SS is DOSDATA
 18833 00002CA1 16                      	push	ss
 18834 00002CA2 1F                      	pop	ds
 18835                                  	;mov	cx,[es:bp+0Dh]
 18836 00002CA3 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18837                                  
 18838                                  ; Examine the current free count. If it indicates that we have an invalid
 18839                                  ; count, do the expensive calculation.
 18840                                  
 18841                                  	;mov	dx,[es:bp+1Fh]
 18842 00002CA7 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18843 00002CAB 83FAFF                  	CMP	DX,-1			; is it valid?
 18844 00002CAE 7404                    	JZ	short DoScan
 18845                                  
 18846                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18847                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18848                                  ; the count.
 18849                                  
 18850 00002CB0 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18851 00002CB2 7222                    	JB	short GotVal		; yes, trust it.
 18852                                  DoScan:
 18853 00002CB4 31D2                    	XOR	DX,DX
 18854 00002CB6 49                      	DEC	CX
 18855                                  SCANFREE:
 18856 00002CB7 E80228                  	call	UNPACK
 18857 00002CBA 7217                    	JC	short CRIT_LEAVE
 18858 00002CBC 7501                    	JNZ	short NOTFREECLUS
 18859 00002CBE 42                      	INC	DX			; A free one
 18860                                  NOTFREECLUS:
 18861 00002CBF 43                      	INC	BX			; Next cluster
 18862 00002CC0 E2F5                    	LOOP	SCANFREE
 18863 00002CC2 4B                      	DEC	BX			; BX was next cluster. Convert to
 18864                                  ReturnVals:
 18865 00002CC3 4B                      	DEC	BX			; count
 18866                                  	;mov	al,[es:bp+4]
 18867 00002CC4 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18868 00002CC8 FEC0                    	INC	AL			; Sectors/cluster
 18869                                  	;mov	cx,[es:bp+2]
 18870 00002CCA 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18871                                  	;mov	[es:bp+1Fh],dx
 18872 00002CCE 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18873 00002CD2 F8                      	CLC
 18874                                  CRIT_LEAVE:
 18875                                  	;call	LCritDisk
 18876                                  	;retn
 18877                                  	; 17/12/2022
 18878 00002CD3 E952E6                  	jmp	LCritDisk
 18879                                  
 18880                                  ; We have correctly computed everything previously. Load up registers for
 18881                                  ; return.
 18882                                  
 18883                                  GotVal: 
 18884 00002CD6 89CB                    	MOV	BX,CX			; get cluster count
 18885 00002CD8 EBE9                    	JMP	short ReturnVals
 18886                                  
 18887                                  ;============================================================================
 18888                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18889                                  ;============================================================================
 18890                                  ; 22/07/2018 - Retro DOS v3.0
 18891                                  
 18892                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18893                                  ;	NAME	DOS_SEARCH
 18894                                  
 18895                                  ;**	Low level routines for doing local and NET directory searches
 18896                                  ;
 18897                                  ;	DOS_SEARCH_FIRST
 18898                                  ;	DOS_SEARCH_NEXT
 18899                                  ;	RENAME_NEXT
 18900                                  ;
 18901                                  ;	Revision history:
 18902                                  ;
 18903                                  ;	    Created: ARR 30 March 1983
 18904                                  ;	    A000	version 4.00  Jan. 1988
 18905                                  ;	    A001	PTM 3564 -- search for fastopen
 18906                                  
 18907                                  ;Installed = TRUE
 18908                                  
 18909                                  ;--------------------------------------------------------------------------
 18910                                  ;
 18911                                  ; Procedure Name : DOS_SEARCH_FIRST
 18912                                  ;
 18913                                  ; Inputs:
 18914                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18915                                  ;		terminated)
 18916                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18917                                  ;		( = -1 if current dir not involved, else
 18918                                  ;		 Points to first char after last "/" of current dir part)
 18919                                  ;	[THISCDS] Points to CDS being used
 18920                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18921                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18922                                  ;	[DMAADD] Points to 53 byte buffer
 18923                                  ; Function:
 18924                                  ;	Initiate a search for the given file spec
 18925                                  ; Outputs:
 18926                                  ;	CARRY CLEAR
 18927                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18928                                  ;
 18929                                  ;	LOCAL
 18930                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18931                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18932                                  ;	    11 byte search name with Meta chars in it
 18933                                  ;	    Search Attribute Byte, attribute of search
 18934                                  ;	    WORD LastEnt value
 18935                                  ;	    WORD DirStart
 18936                                  ;	    4 byte pad
 18937                                  ;	    32 bytes of the directory entry found
 18938                                  ;	NET
 18939                                  ;	    21 bytes First byte has high bit set
 18940                                  ;	    32 bytes of the directory entry found
 18941                                  ;
 18942                                  ;	CARRY SET
 18943                                  ;	    AX = error code
 18944                                  ;		error_no_more_files
 18945                                  ;			No match for this file
 18946                                  ;		error_path_not_found
 18947                                  ;			Bad path (not in curr dir part if present)
 18948                                  ;		error_bad_curr_dir
 18949                                  ;			Bad path in current directory part of path
 18950                                  ; DS preserved, others destroyed
 18951                                  ;---------------------------------------------------------------------------
 18952                                  
 18953                                  ; 24/01/2024
 18954                                  %if 1
 18955                                  	; 17/05/2019 - Retro DOS v4.0
 18956                                  GET_FAST_SEARCH:
 18957                                  	; 22/07/2018
 18958                                  	; MSDOS 6.0
 18959                                  	; 17/12/2022
 18960 00002CDA 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18961                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18962                                  					;FO.trigger fastopen ;AN000;
 18963                                  	;call	DOS_SEARCH_FIRST
 18964                                  	;retn
 18965                                  	; 24/01/2024
 18966                                  	; 17/12/2022
 18967                                  	;jmp	DOS_SEARCH_FIRST
 18968                                  %endif
 18969                                  
 18970                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18971                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18972                                  
 18973                                  DOS_SEARCH_FIRST:
 18974                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18975                                  
 18976 00002CE0 C43E[A205]              	LES	DI,[THISCDS]
 18977 00002CE4 83FFFF                  	CMP	DI,-1
 18978 00002CE7 7506                    	JNZ	short TEST_RE_NET2
 18979                                  
 18980                                  ;IF NOT Installed
 18981                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18982                                  ;ELSE
 18983                                  	;mov	ax,1119h
 18984 00002CE9 B81911                  	MOV	AX,(MultNET<<8)|25
 18985 00002CEC CD2F                    	INT	2Fh
 18986 00002CEE C3                      	retn
 18987                                  ;ENDIF
 18988                                  
 18989                                  TEST_RE_NET2:
 18990                                  	;test	word [es:di+43h],8000h
 18991                                  	; 17/12/2022
 18992                                  	;test	byte [es:di+44h],80h
 18993                                  	; 28/12/2022
 18994 00002CEF 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 18995                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18996 00002CF4 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18997                                  
 18998                                  ;IF NOT Installed
 18999                                  ;	transfer NET_SEARCH_FIRST
 19000                                  ;ELSE
 19001                                  	;mov	ax,111Bh
 19002 00002CF6 B81B11                  	MOV	AX,(MultNET<<8)|27
 19003 00002CF9 CD2F                    	INT	2FH
 19004 00002CFB C3                      	retn
 19005                                  ;ENDIF
 19006                                  	; 18/05/2019 - Retro DOS v4.0
 19007                                  LOCAL_SEARCH_FIRST:
 19008 00002CFC E80EE6                  	call	ECritDisk
 19009                                  	; MSDOS 6.0
 19010                                  	;;test	word [DOS34_FLAG],400h
 19011                                  	; 17/12/2022
 19012                                  	;test	byte [DOS34_FLAG+1],04h
 19013 00002CFF F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19014                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19015 00002D04 7405                    	JZ	short NOFN			;AN000;
 19016                                  	;or	byte [FastOpenFlg],1
 19017 00002D06 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19018                                  NOFN:						;AN000;
 19019 00002D0B C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19020                                  
 19021                                  ; 03/02/2024
 19022                                  %if 0
 19023                                  	; MSDOS 6.0
 19024                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19025                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19026                                  %else
 19027                                  	; 03/02/2024
 19028 00002D10 16                      	push	ss
 19029 00002D11 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19030 00002D12 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19031                                  getnext:				;AN000;
 19032 00002D16 AC                      	lodsb				;AN000;;FO. get char
 19033 00002D17 08C0                    	or	al,al			;AN000;;FO. is it null
 19034 00002D19 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19035 00002D1B 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19036 00002D1D 75F7                    	jne	short getnext 		;AN000;;FO. no
 19037                                  %endif
 19038                                  	;and	byte [FastOpenFlg],80h
 19039 00002D1F 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19040                                  NO_Question:	; 03/02/2024
 19041                                  norm_GETPATH:
 19042 00002D24 E87711                  	call	GETPATH
 19043                                  	; BX = offset NAME1
 19044                                  ;_getdone:
 19045 00002D27 7318                    	JNC	short find_check_dev
 19046 00002D29 7511                    	JNZ	short bad_path3
 19047 00002D2B 08C9                    	OR	CL,CL
 19048 00002D2D 740D                    	JZ	short bad_path3
 19049                                  find_no_more:
 19050                                  	;mov	ax,12h
 19051 00002D2F B81200                  	MOV	AX,error_no_more_files
 19052                                  BadBye:
 19053                                  	; MSDOS 6.0
 19054 00002D32 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19055                                  
 19056 00002D38 F9                      	STC
 19057                                  	;call	LCritDisk
 19058                                  	;retn
 19059                                  	; 18/12/2022
 19060 00002D39 E9ECE5                  	jmp	LCritDisk
 19061                                  
 19062                                  bad_path3:
 19063                                  	;mov	ax,3
 19064 00002D3C B80300                  	MOV	AX,error_path_not_found
 19065 00002D3F EBF1                    	JMP	short BadBye
 19066                                  
 19067                                  find_check_dev:
 19068 00002D41 08E4                    	OR	AH,AH
 19069 00002D43 790A                    	JNS	short found_entry
 19070 00002D45 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19071 00002D4B FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19072                                  found_entry:
 19073                                  
 19074                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19075                                  ; a search-next may not have wfp_start set correctly
 19076                                  
 19077 00002D4F C43E[2C03]              	LES	DI,[DMAADD]
 19078 00002D53 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19079 00002D57 AC                      	LODSB
 19080 00002D58 2C40                    	SUB	AL,'A'-1                ; logical drive
 19081 00002D5A AA                      	STOSB				; High bit not set (local)
 19082                                  found_it:
 19083 00002D5B C43E[2C03]              	LES	DI,[DMAADD]
 19084 00002D5F 47                      	INC	DI
 19085                                  
 19086                                  	; MSDOS 6.0
 19087 00002D60 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19088                                  	;test	byte [FastOpenFlg],10h
 19089 00002D61 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19090 00002D66 7408                    	JZ	short notfast			  ;FO.;AN001;
 19091 00002D68 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19092 00002D6A 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19093 00002D6E EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19094                                  
 19095                                  notfast:
 19096 00002D70 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19097                                  movmov:
 19098                                  ; Special E5 code
 19099 00002D73 A4                      	MOVSB
 19100 00002D74 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19101 00002D79 7505                    	JNZ	short NOTKANJB
 19102 00002D7B 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19103                                  NOTKANJB:
 19104                                  	;MOV	CX,10
 19105                                  	;REP	MOVSB
 19106                                  	; 03/02/2024
 19107 00002D80 B90500                  	mov	cx,5
 19108 00002D83 F3A5                    	rep	movsw
 19109                                  
 19110                                  	; 08/09/2018
 19111 00002D85 1F                      	POP	DS			;FO.;AN001; restore ds
 19112                                  
 19113 00002D86 A0[6B05]                	MOV	AL,[ATTRIB]
 19114 00002D89 AA                      	STOSB
 19115 00002D8A 50                      	PUSH	AX			; Save AH device info
 19116 00002D8B A1[4803]                	MOV	AX,[LASTENT]
 19117 00002D8E AB                      	STOSW
 19118 00002D8F A1[C205]                	MOV	AX,[DIRSTART]
 19119 00002D92 AB                      	STOSW
 19120                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19121 00002D93 83C704                  	ADD	DI,4
 19122 00002D96 58                      	POP	AX			; Recover AH device info
 19123 00002D97 08E4                    	OR	AH,AH
 19124 00002D99 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19125 00002D9B 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19126 00002DA0 7510                    	JNZ	short OKSTORE
 19127                                  
 19128                                  	; MSDOS 6.0
 19129 00002DA2 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19130                                  					;AN000;;FO. from fastopen and is good
 19131 00002DA7 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19132                                  
 19133                                  	; The user has specified the root directory itself, rather than some
 19134                                  	; contents of it. We can't "find" that.
 19135                                  
 19136 00002DA9 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19137                                  					;   stuffing a -1 at Lastent
 19138 00002DAF E97DFF                  	JMP	find_no_more
 19139                                  
 19140                                  OKSTORE:
 19141 00002DB2 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19142                                  DOSREL:
 19143                                  	; BX = offset NAME1 (from GETPATH)
 19144 00002DB6 89DE                    	MOV	SI,BX			; SI-> start of entry
 19145                                  
 19146                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19147                                  
 19148                                  	;;mov	cx,32
 19149                                  	;MOV	CX,dir_entry.size
 19150                                  	; 03/02/2024
 19151 00002DB8 B91000                  	mov	cx,dir_entry.size>>1
 19152                                  ;;;;; 7/29/86
 19153 00002DBB 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19154                                  	;REP	MOVSB
 19155 00002DBD F3A5                    	rep	movsw
 19156                                  	;
 19157 00002DBF 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19158 00002DC1 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19159 00002DC5 7504                    	JNZ	short NO05
 19160 00002DC7 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19161                                  NO05:
 19162                                  
 19163                                  ;;;;; 7/29/86
 19164                                  
 19165                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19166                                  	; 16/12/2022
 19167                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19168                                  	; MSDOS 6.0
 19169                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19170                                  	; 18/05/2019 - Retro DOS v4.0
 19171 00002DCB 16                      	push	ss
 19172 00002DCC 1F                      	pop	ds
 19173                                  	; 16/12/2022
 19174 00002DCD 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19175                                  
 19176                                  ;hkn; SS is DOSDATA
 19177                                  	;push	ss
 19178                                  	;pop	ds
 19179 00002DD2 F8                      	CLC
 19180                                  	;call	LCritDisk
 19181                                  	;retn
 19182                                  	; 16/12/2022
 19183 00002DD3 E952E5                  	jmp	LCritDisk
 19184                                  
 19185                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19186                                  ;----------------------------------------------------------------------------
 19187                                  ;
 19188                                  ; Procedure Name : DOS_SEARCH_NEXT
 19189                                  ;
 19190                                  ; Inputs:
 19191                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19192                                  ;	    (only first 21 bytes must have valid information)
 19193                                  ; Function:
 19194                                  ;	Look for subsequent matches
 19195                                  ; Outputs:
 19196                                  ;	CARRY CLEAR
 19197                                  ;	    The 53 bytes at DMAADD are updated for next call
 19198                                  ;		(see DOS_SEARCH_FIRST)
 19199                                  ;	CARRY SET
 19200                                  ;	    AX = error code
 19201                                  ;		error_no_more_files
 19202                                  ;			No more files to find
 19203                                  ; DS preserved, others destroyed
 19204                                  ;---------------------------------------------------------------------------
 19205                                  
 19206                                  ;hkn; called from search.asm. DS already set up at this point.
 19207                                  
 19208                                  DOS_SEARCH_NEXT:
 19209 00002DD6 C43E[2C03]              	LES	DI,[DMAADD]
 19210 00002DDA 268A05                  	MOV	AL,[ES:DI]
 19211 00002DDD A880                    	TEST	AL,80H			; Test for NET
 19212 00002DDF 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19213                                  ;IF NOT Installed
 19214                                  ;	transfer NET_SEARCH_NEXT
 19215                                  ;ELSE
 19216                                  	;mov	ax,111Ch
 19217 00002DE1 B81C11                  	MOV	AX,(MultNET<<8)|28
 19218 00002DE4 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19219                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19220                                  		     ; Return: CF set on error, AX = DOS error code
 19221                                  		     ; CF clear if successful
 19222 00002DE6 C3                      	retn
 19223                                  ;ENDIF
 19224                                  
 19225                                  LOCAL_SEARCH_NEXT:
 19226                                  	;AL is drive A=1
 19227                                  	;mov	byte [EXTERR_LOCUS],2
 19228 00002DE7 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19229 00002DEC E81EE5                  	call	ECritDisk
 19230                                  
 19231                                  ;hkn; DummyCDS is in DOSDATA
 19232 00002DEF C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19233                                  ;hkn; Segment address is DOSDATA - use ds
 19234                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19235 00002DF5 8C1E[A405]              	mov	[THISCDS+2],DS
 19236                                  
 19237 00002DF9 0440                    	ADD	AL,'A'-1
 19238 00002DFB E85A3B                  	call	InitCDS
 19239                                  
 19240                                  ;	call	GETTHISDRV		; Set CDS pointer
 19241                                  
 19242 00002DFE 7246                    	JC	short No_files		; Bogus drive letter
 19243 00002E00 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19244                                  	;les	bp,[es:di+45h]
 19245 00002E04 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19246 00002E08 E823D8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19247                                  
 19248                                  	; 16/12/2022
 19249 00002E0B 268A4600                	mov	al,[ES:BP]
 19250                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19251                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19252 00002E0F A2[7605]                	mov	[THISDRV],AL
 19253                                  	;mov	word [CREATING],0E500h
 19254 00002E12 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19255 00002E18 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19256 00002E1D C536[2C03]              	LDS	SI,[DMAADD]
 19257 00002E21 AC                      	LODSB				; Drive Byte
 19258                                  
 19259                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19260                                  RENAME_NEXT:
 19261                                  	;context ES
 19262 00002E22 16                      	push	ss
 19263 00002E23 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19264                                  
 19265                                  ;hkn; NAME1 is in DOSDATA
 19266 00002E24 BF[4B05]                	MOV	DI,NAME1
 19267                                  
 19268 00002E27 B90B00                  	MOV	CX,11
 19269 00002E2A F3A4                    	REP	MOVSB			; Search name
 19270 00002E2C AC                      	LODSB				; Attribute
 19271                                  
 19272                                  ;hkn; SS override
 19273 00002E2D 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19274 00002E31 AD                      	LODSW				; LastEnt
 19275 00002E32 09C0                    	OR	AX,AX
 19276                                  	; 03/02/2024
 19277                                  	;JNS	short cont_load
 19278 00002E34 7810                    	js	short No_files
 19279                                  ;No_files:
 19280                                  	;JMP	find_no_more
 19281                                  
 19282                                  cont_load:
 19283 00002E36 50                      	PUSH	AX			; Save LastEnt
 19284 00002E37 AD                      	LODSW				; DirStart
 19285 00002E38 89C3                    	MOV	BX,AX
 19286                                  
 19287                                  ;hkn; SS is DOSDATA
 19288                                  	;context DS
 19289 00002E3A 16                      	push	ss
 19290 00002E3B 1F                      	pop	ds
 19291 00002E3C C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19292                                  	;invoke	SetDirSrch
 19293 00002E40 E8FE0F                  	call	SETDIRSRCH
 19294 00002E43 7304                    	JNC	short SEARCH_GOON
 19295 00002E45 58                      	POP	AX			; Clean stack
 19296                                  	;JMP	short No_files
 19297                                  	; 03/02/2024
 19298                                  No_files:
 19299 00002E46 E9E6FE                  	JMP	find_no_more
 19300                                  
 19301                                  SEARCH_GOON:
 19302 00002E49 E8E512                  	call	STARTSRCH
 19303 00002E4C 58                      	POP	AX
 19304 00002E4D E8C20F                  	call	GETENT
 19305 00002E50 72F4                    	JC	short No_files
 19306 00002E52 E8F80E                  	call	NEXTENT
 19307 00002E55 72EF                    	JC	short No_files
 19308 00002E57 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19309 00002E59 E9FFFE                  	JMP	found_it ; 10/08/2018
 19310                                  
 19311                                  ; MSDOS 6.0
 19312                                  ;---------------------------------------------------------------------------
 19313                                  ;
 19314                                  ; Procedure Name : CHECK_QUESTION
 19315                                  ;
 19316                                  ; Input: [WFP_START]= pointer to final path
 19317                                  ; Function: check '?' char
 19318                                  ; Output: carry clear, if no '?'
 19319                                  ;	 carry set, if '?' exists
 19320                                  ;---------------------------------------------------------------------------
 19321                                  
 19322                                  ; 03/02/2024
 19323                                  %if 0
 19324                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19325                                  CHECK_QUESTION:
 19326                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19327                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19328                                  	push	ss
 19329                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19330                                  	; 16/12/2022
 19331                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19332                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19333                                  	;mov	si,[ss:WFP_START]
 19334                                  getnext:				;AN000;
 19335                                  	LODSB				;AN000;;FO. get char
 19336                                  	OR	AL,AL			;AN000;;FO. is it null
 19337                                  	JZ	short NO_Question	;AN000;;FO. yes
 19338                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19339                                  	JNZ	short getnext 		;AN000;;FO. no
 19340                                  	STC				;AN000;;FO.
 19341                                  NO_Question:				;AN000;
 19342                                  	retn				;AN000;;FO.
 19343                                  %endif
 19344                                  
 19345                                  ;============================================================================
 19346                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19347                                  ;============================================================================
 19348                                  ; 23/07/2018 - Retro DOS v3.0
 19349                                  ; 18/05/2019 - Retro DOS v4.0
 19350                                  
 19351                                  ;**
 19352                                  ;
 19353                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19354                                  ;  If process has NET resources a close all is sent out over the net.
 19355                                  ;
 19356                                  ;   DOS_ABORT
 19357                                  ;
 19358                                  ;   Modification history:
 19359                                  ;
 19360                                  ;       Created: ARR 30 March 1983
 19361                                  ;
 19362                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19363                                  ;				being terminated only if it is busy.
 19364                                  ;
 19365                                  
 19366                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19367                                  ;--------------------------------------------------------------------------
 19368                                  ;
 19369                                  ; Procedure Name : DOS_ABORT
 19370                                  ;
 19371                                  ; Inputs:
 19372                                  ;       [CurrentPDB] set to PID of process aborting
 19373                                  ; Function:
 19374                                  ;       Close all files and free all SFTs for this PID
 19375                                  ; Returns:
 19376                                  ;       None
 19377                                  ; All destroyed except stack
 19378                                  ;---------------------------------------------------------------------------
 19379                                  
 19380                                  DOS_ABORT:
 19381 00002E5C 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19382 00002E61 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19383                                  reset_free_jfn:
 19384 00002E66 89CB                    	MOV     BX,CX
 19385 00002E68 51                      	PUSH    CX
 19386 00002E69 4B                      	DEC     BX                      ; get jfn (start with last one)
 19387                                  
 19388 00002E6A E81F38                  	CALL	_$CLOSE
 19389 00002E6D 59                      	POP     CX
 19390 00002E6E E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19391                                  
 19392                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19393                                  ; are running in the no-sharing no-network environment, we are simulating the
 19394                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19395                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19396                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19397                                  ;
 19398                                  ; If sharing is loaded, then the following call to close process will
 19399                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19400                                  ;
 19401                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19402                                  ; known network resources. These resources are then responsible for cleaning
 19403                                  ; up after this process.
 19404                                  ;
 19405                                  ; Sleazy, eh?
 19406                                  
 19407                                  	;context DS			; SS is DOSDATA
 19408 00002E70 16                      	push	ss
 19409 00002E71 1F                      	pop	ds  ; 09/09/2018
 19410                                  
 19411                                  	;CallInstall Net_Abort, MultNET, 29
 19412 00002E72 B81D11                  	mov	ax,111Dh
 19413 00002E75 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19414                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19415                                  			; DS???, SS = DOS CS
 19416                                  ;if installed
 19417 00002E77 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19418                                  ;else
 19419                                  ;	call 	MFTCloseP
 19420                                  ;endif
 19421                                  
 19422                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19423                                  ; counts.
 19424                                  					; SS override
 19425 00002E7B 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19426                                  	;mov	cx,[es:di+4]
 19427 00002E80 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19428 00002E84 E317                    	jcxz    FCBScanDone
 19429                                  	;lea	di,[di+6]
 19430 00002E86 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19431 00002E89 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19432                                  FCBTest:
 19433                                  	;cmp	[es:di+31h],ax
 19434 00002E8D 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19435 00002E91 7505                    	jnz	short FCBNext		; no, skip it
 19436 00002E93 26C7050000              	mov	word [es:di],0
 19437                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19438                                  FCBNext:
 19439 00002E98 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19440 00002E9B E2F0                    	loop    FCBTest
 19441                                  FCBScanDone:
 19442                                  
 19443                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19444                                  
 19445 00002E9D 31DB                    	XOR     BX,BX
 19446                                  Scan:
 19447 00002E9F 53                      	push    bx
 19448 00002EA0 E86437                  	call	SFFromSFN
 19449 00002EA3 5B                      	pop     bx
 19450                                  	;jnc	short Scan1
 19451                                  	;retn
 19452                                  
 19453                                  	; 18/12/2022
 19454                                  	;jc	short NO_Question ; retn
 19455                                  	; 03/02/2024
 19456 00002EA4 7234                    	jc	short RET2
 19457                                  
 19458                                  ;M038
 19459                                  ; Do what the comment above says, check for busy state
 19460                                  
 19461                                  Scan1:
 19462                                  	;cmp	word [es:di],0
 19463                                  	;jz	short scan_next  ; MSDOS 3.3
 19464                                  	; MSDOS 6.0
 19465 00002EA6 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19466                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19467                                  				; Is Sft busy? ;M038
 19468 00002EAA 7519                    	jnz	short scan_next
 19469                                  ;
 19470                                  ; we have a SFT that is busy. See if it is for the current process
 19471                                  ;
 19472 00002EAC 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19473                                  	;cmp	[es:di+31h],ax
 19474 00002EB0 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19475 00002EB4 750F                    	jnz	short scan_next
 19476 00002EB6 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19477                                  	;cmp	[es:di+2Fh],ax
 19478 00002EBA 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19479 00002EBE 7505                    	jnz	short scan_next
 19480                                  
 19481                                  ; This SFT is labelled as ours.
 19482                                  
 19483 00002EC0 26C7050000              	mov	word [es:di],0
 19484                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19485                                  scan_next:
 19486 00002EC5 43                      	inc     bx
 19487 00002EC6 EBD7                    	jmp     short Scan
 19488                                  
 19489                                  ;============================================================================
 19490                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19491                                  ;============================================================================
 19492                                  ; 23/07/2018 - Retro DOS v3.0
 19493                                  ; 18/05/2019 - Retro DOS v4.0
 19494                                  
 19495                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19496                                  ;
 19497                                  ;	DOS_CLOSE
 19498                                  ;	DOS_COMMIT
 19499                                  ;	FREE_SFT
 19500                                  ;	SetSFTTimes
 19501                                  ;
 19502                                  ;	Revision history:
 19503                                  ;
 19504                                  ;	   AN000  version 4.00	Jan. 1988
 19505                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19506                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19507                                  
 19508                                  ;Installed = TRUE
 19509                                  
 19510                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19511                                  ;---------------------------------------------------------------------------
 19512                                  ;
 19513                                  ; Procedure Name : DOS_CLOSE
 19514                                  ;
 19515                                  ; Inputs:
 19516                                  ;	[THISSFT] set to the SFT for the file being used
 19517                                  ; Function:
 19518                                  ;	Close the indicated file via the SFT
 19519                                  ; Returns:
 19520                                  ;	sf_ref_count decremented otherwise
 19521                                  ;	ES:DI point to SFT
 19522                                  ;	Carry set if error
 19523                                  ;	    AX has error code
 19524                                  ; DS preserved, others destroyed
 19525                                  ;---------------------------------------------------------------------------
 19526                                  
 19527                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19528                                  
 19529                                  ; 18/05/2019 - Retro DOS v4.0
 19530                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19531                                  
 19532                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19533                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19534                                  
 19535                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19536                                  
 19537                                  DOS_CLOSE:
 19538 00002EC8 C43E[9E05]              	LES	DI,[THISSFT]
 19539                                  	;mov	bx,[ES:DI+5]
 19540 00002ECC 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19541                                  
 19542                                  ; Network closes are handled entirely by the net code.
 19543                                  
 19544                                  	;;test	bx,8000h
 19545                                  	;TEST	BX,sf_isnet
 19546                                  	; 17/12/2022
 19547                                  	;test	bh,80h
 19548 00002ED0 F6C780                  	test	bh,(sf_isnet>>8)
 19549 00002ED3 7406                    	JZ	short LocalClose
 19550                                  
 19551                                  	;CallInstall Net_Close,MultNET,6
 19552 00002ED5 B80611                  	mov     ax,1106h
 19553 00002ED8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19554                                  			; ES:DI -> SFT
 19555                                  			; SFT DPB field -> DPB of drive containing file
 19556                                  			; Return: CF set on error, AX = DOS error code
 19557                                  			; CF clear if successful
 19558                                  RET2:		; 03/02/2024
 19559 00002EDA C3                      	retn
 19560                                  
 19561                                  ; All closes release the sharing information.
 19562                                  ; No commit releases sharing information
 19563                                  ;
 19564                                  ; All closes decrement the ref count.
 19565                                  ; No commit decrements the ref count.
 19566                                  
 19567                                  LocalClose:
 19568 00002EDB E82FE4                  	call	ECritDisk
 19569 00002EDE E85801                  	CALL	SetSFTTimes
 19570 00002EE1 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19571                                  
 19572                                  ;hkn; SS is DOSDATA
 19573                                  	;Context DS
 19574 00002EE4 16                      	push	ss
 19575 00002EE5 1F                      	pop	ds
 19576                                  
 19577 00002EE6 50                      	push	ax
 19578 00002EE7 53                      	push	bx
 19579 00002EE8 E80344                  	call	ShareEnd
 19580 00002EEB 5B                      	pop	bx
 19581 00002EEC 58                      	pop	ax
 19582                                  
 19583                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19584                                  
 19585                                  CloseEntry:
 19586 00002EED 50                      	PUSH	AX
 19587                                  
 19588                                  ; File clean or device does not get stamped nor disk looked at.
 19589                                  
 19590                                  	;test	bx,0C0h
 19591                                  	; 17/12/2022
 19592 00002EEE F6C3C0                  	test	bl,devid_file_clean+devid_device
 19593                                  	;TEST	BX,devid_file_clean+devid_device
 19594 00002EF1 7403                    	JZ	short rdir
 19595                                  	; 14/11/2022
 19596 00002EF3 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19597                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19598                                  
 19599                                  ; Retrieve the directory entry for the file
 19600                                  
 19601                                  rdir:
 19602 00002EF6 E8D100                  	CALL	DirFromSFT
 19603                                  	;mov	al,5
 19604 00002EF9 B005                    	MOV	AL,error_access_denied
 19605 00002EFB 7303                    	JNC	short clook
 19606                                  	; 14/11/2022
 19607 00002EFD E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19608                                  	;jc	short CloseFinish ; 24/07/2019
 19609                                  clook:
 19610                                  
 19611                                  ; ES:DI points to entry
 19612                                  ; DS:SI points to SFT
 19613                                  ; ES:BX points to buffer header
 19614                                  
 19615 00002F00 57                      	push	di
 19616 00002F01 56                      	push	si
 19617                                  	;lea	si,[si+20h]
 19618 00002F02 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19619                                  
 19620                                  ; ES:DI point to directory entry
 19621                                  ; DS:SI point to unpacked name
 19622                                  
 19623 00002F05 E8F7E2                  	call	XCHGP
 19624                                  
 19625                                  ; ES:DI point to unpacked name
 19626                                  ; DS:SI point to directory entry
 19627                                  
 19628 00002F08 E8A00E                  	call	MetaCompare
 19629 00002F0B E8F1E2                  	call	XCHGP
 19630 00002F0E 5E                      	pop	si
 19631 00002F0F 5F                      	pop	di
 19632 00002F10 740C                    	JZ	short CLOSE_GO		; Name OK
 19633                                  Bye:	
 19634 00002F12 89F7                    	MOV	DI,SI
 19635 00002F14 1E                      	PUSH	DS
 19636 00002F15 07                      	POP	ES			; ES:DI points to SFT
 19637 00002F16 16                      	PUSH	SS
 19638 00002F17 1F                      	POP	DS
 19639 00002F18 F9                      	STC
 19640                                  	;mov	al,2
 19641 00002F19 B002                    	MOV	AL,error_file_not_found
 19642 00002F1B E98E00                  	JMP	CloseFinish ; 24/07/2019
 19643                                  
 19644                                  	; 18/05/2019 - Retro DOS v4.0
 19645                                  CLOSE_GO:
 19646                                  	; 03/02/2024
 19647                                  	;mov	al,[si+4]
 19648 00002F1E 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19649                                  	
 19650                                  	; MSDOS 6.0
 19651                                  	;test	word [si+2],8000h
 19652                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19653                                  	; 17/12/2022
 19654                                  	;test	byte [si+3],80h
 19655 00002F21 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19656 00002F25 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19657                                  	; MSDOS 3.3 & MSDOS 6.0
 19658                                  	;mov	ch,[es:di+0Bh]
 19659 00002F27 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19660                                  
 19661                                  	; 03/02/2024
 19662                                  	;;mov	al,[si+4]
 19663                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19664                                  
 19665                                  ;hkn; SS override
 19666 00002F2B 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19667                                  	; MSDOS 3.3
 19668                                  	;;call	MatchAttributes
 19669                                  	;;JNZ	short Bye		; attributes do not match
 19670                                  	; 18/05/2019
 19671 00002F2F EB04                    	JMP	SHORT setattr		;FT.
 19672                                  nofcb:
 19673                                  	; 03/02/2024
 19674                                  	; MSDOS 6.0
 19675                                  	;;mov	al,[si+4]
 19676                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19677                                  
 19678 00002F31 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19679                                  setattr:
 19680                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19681                                  	;or	byte [es:di+0Bh],20h
 19682 00002F35 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19683                                  	; MSDOS 6.0
 19684                                  	;mov	ax,[es:di+1Ah]
 19685 00002F3A 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19686                                  					;F.O. save old first cluster
 19687                                  ;hkn; SS override
 19688 00002F3E 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19689                                  
 19690                                  ; 03/02/2024
 19691                                  %if 0
 19692                                  	;mov	ax,[si+0Bh]
 19693                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19694                                  	;mov	[es:di+1Ah],ax
 19695                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19696                                  	;mov	ax,[si+11h]
 19697                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19698                                  	;mov	[es:di+1Ch],ax
 19699                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19700                                  	;mov	ax,[si+13h]
 19701                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19702                                  	;mov	[es:di+1Eh],ax
 19703                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19704                                  	;mov	ax,[si+0Fh]
 19705                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19706                                  	;mov	[es:di+18h],ax
 19707                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19708                                  	;mov	ax,[si+0Dh]
 19709                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19710                                  	;mov	[es:di+16h],ax
 19711                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19712                                  %else
 19713                                  	; 03/02/2024 - Retro DOS v4.2
 19714 00002F42 56                      	push	si
 19715 00002F43 83C60B                  	add	si,0Bh
 19716 00002F46 AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19717                                  	;mov	[es:di+1Ah],ax
 19718 00002F47 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19719 00002F4B AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19720 00002F4C 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19721 00002F50 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19722 00002F51 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19723 00002F55 AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19724 00002F56 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19725 00002F5A AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19726 00002F5B 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19727 00002F5F 5E                      	pop	si
 19728                                  %endif
 19729                                  
 19730                                  	; MSDOS 6.0
 19731                                  ;; File Tagging
 19732 00002F60 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19733                                  				  ;LB. if already dirty		    ;AN000;
 19734 00002F65 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19735                                  	; 02/06/2019
 19736 00002F67 E8662B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19737                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19738                                  	;or	byte [es:bx+5],40h
 19739 00002F6A 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19740                                  yesdirty4:
 19741 00002F6F 1E                      	push	ds
 19742 00002F70 56                      	push	si
 19743                                  	; MSDOS 6.0
 19744                                  	;mov	cx,[si+0Bh]
 19745                                  	; 07/12/2022
 19746 00002F71 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19747                                  ;hkn; SS override
 19748 00002F74 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19749                                  	; MSDOS 3.3 
 19750                                  	;push	ss
 19751                                  	;pop	ds
 19752                                  	;MOV	AL,[THISDRV]
 19753                                  ;;; 10/1/86  update fastopen cache
 19754                                  	; MSDOS 3.3 & MSDOS 6.0
 19755 00002F78 52                      	PUSH	DX
 19756 00002F79 B400                    	MOV	AH,0			; dir entry update
 19757 00002F7B 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19758                                  	; MSDOS 6.0
 19759 00002F7D 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19760 00002F7F 750D                    	JNZ	short do_update2	;AN005; no, do update
 19761 00002F81 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19762                                  	;mov	di,[si+1Bh]
 19763 00002F83 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19764                                  	;mov	cx,[si+1Dh]
 19765 00002F86 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19766                                  	;mov	dh,[si+1Fh]
 19767 00002F89 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19768 00002F8C EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19769                                  do_update2:				;AN011;F.O.
 19770                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19771                                  	; 
 19772 00002F8E 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19773 00002F93 7407                    	JZ	short do_update		;AN011;F.O. yes
 19774 00002F95 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19775 00002F97 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19776                                  do_update:				;AN005;
 19777                                  ;hkn; SS is DOSDATA
 19778                                  	;Context DS
 19779 00002F9C 16                      	push	ss
 19780 00002F9D 1F                      	pop	ds
 19781                                  	; MSDOS 3.3 & MSDOS 6.0
 19782 00002F9E E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19783 00002FA1 5A                      	POP	DX
 19784                                  
 19785                                  ;;; 10/1/86  update fastopen cache
 19786 00002FA2 E8262A                  	call	FLUSHBUF		; flush all relevant buffers
 19787 00002FA5 5F                      	pop	di
 19788 00002FA6 07                      	pop	es
 19789                                  	;mov	al,5
 19790 00002FA7 B005                    	MOV	AL,error_access_denied
 19791 00002FA9 7201                    	JC	short CloseFinish
 19792                                  FREE_SFT_OK:
 19793 00002FAB F8                      	CLC				; signal no error.
 19794                                  CloseFinish:
 19795                                  
 19796                                  ; Indicate to the device that the SFT is being closed.
 19797                                  
 19798                                  ;;;; 7/21/86
 19799 00002FAC 9C                      	PUSHF				; save flag from DirFromSFT
 19800 00002FAD E8C315                  	call	DEV_CLOSE_SFT
 19801 00002FB0 9D                      	POPF
 19802                                  ;;;; 7/21/86
 19803                                  ;
 19804                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19805                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19806                                  ; going to be moving from busy to free.
 19807                                  ;
 19808 00002FB1 59                      	POP	CX			; get old ref count
 19809 00002FB2 9C                      	PUSHF
 19810                                  	; 03/02/2024
 19811                                  	;DEC	CX			; if cx != 1
 19812                                  	;JNZ	short NoFree		; then do NOT free SFT
 19813 00002FB3 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19814                                  
 19815 00002FB5 26890D                  	mov	[es:di],cx ; 0
 19816                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19817                                  NoFree:
 19818 00002FB8 E86DE3                  	call	LCritDisk
 19819 00002FBB 9D                      	POPF
 19820 00002FBC C3                      	retn
 19821                                  
 19822                                  ;---------------------------------------------------------------------------
 19823                                  ;
 19824                                  ; Procedure Name : FREE_SFT
 19825                                  ;
 19826                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19827                                  ; Flags preserved. Return old ref count in AX
 19828                                  ;
 19829                                  ; Note that busy is indicated by the SFT ref count being -1.
 19830                                  ;
 19831                                  ;---------------------------------------------------------------------------
 19832                                  
 19833                                  FREE_SFT:
 19834 00002FBD 9C                      	PUSHF		; Save carry state
 19835 00002FBE 268B05                  	mov	ax,[es:di]
 19836                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19837 00002FC1 48                      	DEC	AX
 19838 00002FC2 7501                    	JNZ	short SetCount
 19839 00002FC4 48                      	DEC	AX
 19840                                  SetCount:
 19841 00002FC5 268705                  	xchg	ax,[es:di]
 19842                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19843 00002FC8 9D                      	POPF
 19844 00002FC9 C3                      	retn
 19845                                  
 19846                                  	; 18/05/2019 - Retro DOS v4.0
 19847                                  
 19848                                  ;----------------------------------------------------------------------------
 19849                                  ;
 19850                                  ; Procedure Name : DirFromSFT
 19851                                  ;
 19852                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19853                                  ;
 19854                                  ;   Inputs:	ES:DI point to SFT
 19855                                  ;		DS = DOSDATA
 19856                                  ;   Outputs:
 19857                                  ;		EXTERR_LOCUS = errLOC_Disk
 19858                                  ;		CurBuf points to buffer
 19859                                  ;		Carry Clear -> operation OK
 19860                                  ;		    ES:DI point to entry
 19861                                  ;		    ES:BX point to buffer
 19862                                  ;		    DS:SI point to SFT
 19863                                  ;		Carry SET   -> operation failed
 19864                                  ;		    registers trashified
 19865                                  ;   Registers modified: ALL
 19866                                  ;----------------------------------------------------------------------------
 19867                                  
 19868                                  DirFromSFT:
 19869                                  	;mov	byte [EXTERR_LOCUS],2
 19870 00002FCA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19871 00002FCF 06                      	push	es
 19872 00002FD0 57                      	push	di
 19873                                  	; MSDOS 3.3
 19874                                  	;;mov	dx,[es:di+1Dh]
 19875                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19876                                  	; MSDOS 6.0
 19877                                  	;mov	dx,[es:[di+1Dh]
 19878 00002FD1 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19879 00002FD5 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19880                                  	; 04/02/2024
 19881 00002FD9 52                      	push	dx
 19882                                  	;mov	dx,[es:di+1Bh]
 19883 00002FDA 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19884                                  	; 04/02/2024
 19885                                  	; 19/05/2019
 19886                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19887                                  	; MSDOS 3.3 & MSDOS 6.0
 19888 00002FDE 52                      	PUSH	DX
 19889 00002FDF E86026                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19890                                  					; [THISDPB] set
 19891 00002FE2 5A                      	POP	DX
 19892 00002FE3 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19893 00002FE7 721E                    	JC	short PopDone
 19894                                  	; 22/09/2023
 19895                                  	;XOR	AL,AL	; *		; Pre read
 19896                                  	;;mov	byte [ALLOWED],18h
 19897                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19898                                  	;call	GETBUFFR
 19899                                  	; 22/09/2023
 19900 00002FE9 E8DB28                  	call	GETBUFFER ; * 		; Pre read
 19901 00002FEC 7219                    	JC	short PopDone
 19902 00002FEE 5E                      	pop	si
 19903 00002FEF 1F                      	pop	ds			; Get back SFT pointer
 19904                                  
 19905                                  ;hkn; SS override
 19906 00002FF0 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19907                                  	;or	byte [es:di+5],4
 19908 00002FF5 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19909 00002FFA 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19910                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19911                                  	;lea	di,[di+20] ; MSDOS 6.0
 19912 00002FFC 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19913                                  	;mov	al,32
 19914 00002FFF B020                    	MOV	AL,dir_entry.size
 19915                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19916 00003001 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19917 00003004 01C7                    	ADD	DI,AX			; Point at the entry
 19918 00003006 C3                      	retn				; carry is clear
 19919                                  PopDone:
 19920 00003007 5F                      	pop	di
 19921 00003008 07                      	pop	es
 19922                                  PopDone_retn:
 19923 00003009 C3                      	retn
 19924                                  
 19925                                  ;----------------------------------------------------------------------------
 19926                                  ;
 19927                                  ;**	DOS_Commit - UPdate Directory Entries
 19928                                  ;
 19929                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19930                                  ;		(DS) = DOSGROUP
 19931                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19932                                  ;	USES	all but DS
 19933                                  ;
 19934                                  ;----------------------------------------------------------------------------
 19935                                  
 19936                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19937                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19938                                  
 19939                                  DOS_COMMIT:
 19940                                  	;hkn; called from srvcall. DS already set up.
 19941 0000300A C43E[9E05]              	LES	DI,[THISSFT]
 19942                                  	;mov	bx,[es:di+5]
 19943 0000300E 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19944                                  	;test	bx,0C0h
 19945                                  	; 17/12/2022
 19946 00003012 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19947                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19948 00003015 75F2                    	jnz	short PopDone_retn
 19949                                  	;test	bx,8000h
 19950                                  	; 17/12/2022
 19951                                  	;test	bh,80h
 19952 00003017 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19953                                  	;TEST	BX,sf_isnet ; 8000h
 19954 0000301A 7406                    	JZ	short LOCAL_COMMIT
 19955                                  
 19956                                  ;IF NOT Installed
 19957                                  ;	transfer NET_COMMIT
 19958                                  ;ELSE
 19959                                  	;mov	ax,1107h
 19960 0000301C B80711                  	MOV	AX,(MultNET<<8)|7
 19961 0000301F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19962                                  			; ES:DI -> SFT
 19963                                  			; SFT DPB field -> DPB of drive containing file
 19964                                  			; Return: CF set on error, AX = DOS error code
 19965                                  			; CF clear if successful
 19966                                  localcommit_retn: ; 18/12/2022	
 19967 00003021 C3                      	retn
 19968                                  ;ENDIF
 19969                                  
 19970                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19971                                  ; There are three ways we can do this. One is to enter a critical section to
 19972                                  ; protect a potential free. The second is to increment the ref count to mask
 19973                                  ; the close decrementing.
 19974                                  ;
 19975                                  ; The proper way is to let the caller's of close decide if a decrement should
 19976                                  ; be done. We do this by providing another entry into close after the
 19977                                  ; decrement and after the share information release.
 19978                                  
 19979                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19980                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19981                                  
 19982                                  LOCAL_COMMIT:
 19983 00003022 E8E8E2                  	call	ECritDisk
 19984                                  	; MSDOS 6.0
 19985 00003025 E8E5E2                  	call	ECritDisk	;PTM.
 19986 00003028 E80E00                  	call	SetSFTTimes
 19987 0000302B B8FFFF                  	MOV	AX,-1
 19988 0000302E E8BCFE                  	call	CloseEntry
 19989                                  	; MSDOS 6.0
 19990 00003031 9C                      	PUSHF			;PTM.				;AN000;
 19991 00003032 E83615                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19992 00003035 9D                      	POPF			;PTM.				;AN000;
 19993                                  	;call	LCritDisk	;PTM.				;AN000;
 19994                                  	; 18/12/2022
 19995 00003036 E9EFE2                  	jmp	LCritDisk
 19996                                  ;localcommit_retn:
 19997                                  ;	retn
 19998                                  
 19999                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20000                                  ;----------------------------------------------------------------------------
 20001                                  ;
 20002                                  ; Procedure Name : SetSFTTimes
 20003                                  ;
 20004                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20005                                  ;   Reflect these times in other SFT's for the same file.
 20006                                  ;
 20007                                  ;   Inputs:	ES:DI point to SFT
 20008                                  ;		BX = sf_flags set apprpriately
 20009                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20010                                  ;   Registers modified: All except ES:DI, BX, AX
 20011                                  ;
 20012                                  ;----------------------------------------------------------------------------
 20013                                  
 20014                                  	; 04/02/2024 - Retro DOS v4.2
 20015                                  
 20016                                  SetSFTTimes:
 20017                                  
 20018                                  ; 04/02/2024
 20019                                  %if 0
 20020                                  ;	File clean or device does not get stamped nor disk looked at.
 20021                                  	
 20022                                  	;test	bx,0C0h
 20023                                  	; 17/12/2022
 20024                                  	test	bl,devid_file_clean+devid_device
 20025                                  	;TEST	BX,devid_file_clean+devid_device
 20026                                  	;retnz				; clean or device => no timestamp
 20027                                  	jnz	short localcommit_retn
 20028                                  
 20029                                  ;	file and dirty. See if date is good
 20030                                  
 20031                                  	;test	bx,4000h
 20032                                  	; 17/12/2022
 20033                                  	;test	bh,40h
 20034                                  	test	bh,(sf_close_nodate>>8)
 20035                                  	;TEST	BX,sf_close_nodate
 20036                                  	;retnz				; nodate => no timestamp
 20037                                  	jnz	short localcommit_retn
 20038                                  %else
 20039                                  	; 04/02/2024
 20040                                  	; (PCDOS 7.1 IBMDOS.COM)
 20041                                  	;test	bx,40C0h
 20042 00003039 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20043 0000303D 75E2                    	jnz	short localcommit_retn
 20044                                  %endif
 20045                                  
 20046 0000303F 50                      	push	ax
 20047 00003040 53                      	push	bx
 20048 00003041 E8ACDA                  	call	DATE16			; Date/Time to AX/DX
 20049                                  	;mov	[es:di+0Fh],ax
 20050 00003044 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20051                                  	;mov	[es:di+0Dh],dx
 20052 00003048 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20053 0000304C 31C0                    	XOR	AX,AX
 20054                                  ;if installed
 20055                                  	;call	JShare + 14 * 4
 20056 0000304E FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20057                                  ;else
 20058                                  ;	call	ShSU
 20059                                  ;endif
 20060 00003052 5B                      	pop	bx
 20061 00003053 58                      	pop	ax
 20062 00003054 C3                      	retn
 20063                                  
 20064                                  ;============================================================================
 20065                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20066                                  ;============================================================================
 20067                                  ; 23/07/2018 - Retro DOS v3.0
 20068                                  ; 18/05/2019 - Retro DOS v4.0
 20069                                  
 20070                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20071                                  
 20072                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20073                                  ;NAME  DIRCALL
 20074                                  
 20075                                  ;**	Low level directory manipulation routines for making removing and
 20076                                  ;	  verifying local or NET directories
 20077                                  ;
 20078                                  ;	DOS_MKDIR
 20079                                  ;	DOS_CHDIR
 20080                                  ;	DOS_RMDIR
 20081                                  ;
 20082                                  ;	Modification history:
 20083                                  ;
 20084                                  ;		Created: ARR 30 March 1983
 20085                                  
 20086                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20087                                  ;---------------------------------------------------------------------------
 20088                                  ;
 20089                                  ; Procedure Name : DOS_MkDir
 20090                                  ;
 20091                                  ; Inputs:
 20092                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20093                                  ;		terminated)
 20094                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20095                                  ;		( = -1 if current dir not involved, else
 20096                                  ;		 Points to first char after last "/" of current dir part)
 20097                                  ;	[THISCDS] Points to CDS being used
 20098                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20099                                  ; Function:
 20100                                  ;	Make a new directory
 20101                                  ; Returns:
 20102                                  ;	Carry Clear
 20103                                  ;		No error
 20104                                  ;	Carry Set
 20105                                  ;	    AX is error code
 20106                                  ;		error_path_not_found
 20107                                  ;			Bad path (not in curr dir part if present)
 20108                                  ;		error_bad_curr_dir
 20109                                  ;			Bad path in current directory part of path
 20110                                  ;		error_access_denied
 20111                                  ;			Already exists, device name
 20112                                  ; DS preserved, Others destroyed
 20113                                  ;---------------------------------------------------------------------------
 20114                                  
 20115                                  ;hkn; called from path.asm. DS already set up.
 20116                                  
 20117                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20118                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20119                                  
 20120                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20121                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20122                                  
 20123                                  DOS_MKDIR:
 20124 00003055 E8F3E1                  	call	TestNet
 20125 00003058 7313                    	JNC	short LOCAL_MKDIR
 20126                                  
 20127                                  ;IF NOT Installed
 20128                                  ;	transfer NET_MKDIR
 20129                                  ;ELSE
 20130                                  	;mov	ax,1103h
 20131 0000305A B80311                  	MOV	AX,(MultNET<<8)|3
 20132 0000305D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20133                                  			; SS = DOS CS
 20134                                  			; SDA first filename pointer -> fully-qualified directory name
 20135                                  			; SDA CDS pointer -> current directory
 20136                                  			; Return: CF set on error, AX = DOS error code
 20137                                  			; CF clear if successful
 20138 0000305F C3                      	retn
 20139                                  ;ENDIF
 20140                                  
 20141                                  NODEACCERRJ:
 20142                                  	;mov	ax,5
 20143 00003060 B80500                  	MOV	AX,error_access_denied
 20144                                  _BadRet:
 20145 00003063 F9                      	STC
 20146                                  	;call	LCritDisk
 20147                                  	;retn
 20148                                  	; 18/12/2022
 20149 00003064 E9C1E2                  	jmp	LCritDisk
 20150                                  
 20151                                  PATHNFJ:
 20152 00003067 E8BEE2                  	call	LCritDisk
 20153 0000306A E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20154                                  
 20155                                  LOCAL_MKDIR:
 20156 0000306D E89DE2                  	call	ECritDisk
 20157                                  
 20158                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20159                                  
 20160 00003070 8C16[A005]              	MOV	[THISSFT+2],SS
 20161                                  
 20162                                  ;hkn; DOSDATA
 20163 00003074 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20164                                  
 20165                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20166                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20167                                  
 20168                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20169 0000307A C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20170                                  				; make sure SHARER won't complain.
 20171                                  	;mov	al,10h
 20172 00003080 B010                    	MOV	AL,attr_directory
 20173 00003082 E88518                  	call	MakeNode
 20174 00003085 72E0                    	JC	short PATHNFJ
 20175 00003087 83F803                  	CMP	AX,3
 20176 0000308A 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20177 0000308C C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20178 00003090 C53E[E205]              	LDS	DI,[CURBUF]
 20179 00003094 29FE                    	SUB	SI,DI
 20180 00003096 56                      	PUSH	SI		; Pointer to dir_first
 20181                                  
 20182                                  ; 04/02/2024
 20183                                  %if 0
 20184                                  	; MSDOS 6.0
 20185                                  	;push	word [DI+8]
 20186                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20187                                  	; MSDOS 3.3 & MSDOS 6.0
 20188                                  	;push	word [di+6]
 20189                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20190                                  %else
 20191                                  	; 04/02/2024
 20192                                  	; (PCDOS 7.1 IBMDOS.COM)
 20193 00003097 C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20194 0000309A 1E                      	push	ds
 20195 0000309B 50                      	push	ax
 20196                                  %endif
 20197                                  
 20198 0000309C 16                      	push	ss
 20199 0000309D 1F                      	pop	ds
 20200                                  
 20201                                  	; 04/02/2024
 20202                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20203 0000309E 31C0                    	XOR	AX,AX
 20204                                  	;MOV	[DIRSTART],AX	; Null directory
 20205 000030A0 8706[C205]              	xchg	ax,[DIRSTART]
 20206 000030A4 50                      	push	ax
 20207                                  
 20208 000030A5 E89E17                  	call	NEWDIR
 20209 000030A8 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20210 000030AA E8650D                  	call	GETENT		; First entry
 20211 000030AD 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20212 000030AF C43E[E205]              	LES	DI,[CURBUF]
 20213                                  
 20214                                  	; MSDOS 6.0
 20215 000030B3 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20216                                  				 ;LB. if already dirty		    ;AN000;
 20217 000030B8 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20218 000030BA E8132A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20219                                  	
 20220                                  	; MSDOS 3.3 & MSDOS 6.0
 20221                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20222 000030BD 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20223                                  yesdirty5:
 20224                                  	;;add	di,16 ; MSDOS 3.3
 20225                                  	;add	di,20 ; MSDOS 6.0
 20226 000030C2 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20227 000030C5 B82E20                  	MOV	AX,202EH	; ". "
 20228 000030C8 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20229 000030CC E81718                  	call	SETDOTENT
 20230 000030CF B82E2E                  	MOV	AX,2E2EH	; ".."
 20231 000030D2 5A                      	POP	DX		; Parent
 20232 000030D3 E81018                  	call	SETDOTENT
 20233 000030D6 C42E[8A05]              	LES	BP,[THISDPB]
 20234                                  	; 22/09/2023
 20235                                  	;;mov	byte [ALLOWED],18h
 20236                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20237 000030DA 5A                      	POP	DX		; Entry sector
 20238                                  	; MSDOS 6.0
 20239 000030DB 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20240                                  
 20241                                  	;XOR	AL,AL ; *	; Pre read
 20242                                  	;call	GETBUFFR
 20243                                  	; 22/09/2023
 20244 000030DF E8E527                  	call	GETBUFFER ; *	; Pre read
 20245 000030E2 725B                    	JC	short NODEEXISTSP
 20246 000030E4 8B16[C205]              	MOV	DX,[DIRSTART]
 20247 000030E8 C53E[E205]              	LDS	DI,[CURBUF]
 20248                                  	;or	byte [di+5],4
 20249 000030EC 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20250 000030F0 5E                      	POP	SI		; dir_first pointer
 20251 000030F1 01FE                    	ADD	SI,DI
 20252 000030F3 8914                    	MOV	[SI],DX
 20253 000030F5 31D2                    	XOR	DX,DX
 20254 000030F7 895402                  	MOV	[SI+2],DX	; Zero size
 20255 000030FA 895404                  	MOV	[SI+4],DX
 20256                                  DIRUP:
 20257                                  	; MSDOS 6.0
 20258 000030FD F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20259                                  	;			 ;LB. if already dirty 		   ;AN000;
 20260 00003101 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20261 00003103 E8CA29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20262                                  	
 20263                                  	; MSDOS 3.3 & MSDOS 6.0
 20264                                  	;or	byte [di+5],40h
 20265 00003106 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20266                                  yesdirty6:
 20267 0000310A 16                      	push	ss
 20268 0000310B 1F                      	pop	ds
 20269 0000310C 268A4600                	mov	al,[es:bp]
 20270                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20271 00003110 E8B828                  	call	FLUSHBUF
 20272                                  	;mov	ax,5
 20273 00003113 B80500                  	MOV	AX,error_access_denied
 20274                                  	;call	LCritDisk
 20275                                  	;retn
 20276                                  	; 18/12/2022
 20277 00003116 E90FE2                  	jmp	LCritDisk
 20278                                  
 20279                                  NODEEXISTSPOPDEL:
 20280 00003119 5A                      	POP	DX		; Parent
 20281 0000311A 5A                      	POP	DX		; Entry sector
 20282                                  	; MSDOS 6.0 
 20283 0000311B 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20284 0000311F C42E[8A05]              	LES	BP,[THISDPB]
 20285                                  	; 22/09/2023
 20286                                  	;;mov	byte [ALLOWED],18h
 20287                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20288                                  	;XOR	AL,AL ; *	; Pre read
 20289                                  	;call	GETBUFFR
 20290                                  	; 22/09/2023
 20291 00003123 E8A127                  	call	GETBUFFER ; *	; Pre read
 20292 00003126 7217                    	JC	short NODEEXISTSP
 20293 00003128 C53E[E205]              	LDS	DI,[CURBUF]
 20294                                  	;or	byte [di+5],4
 20295 0000312C 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20296 00003130 5E                      	POP	SI		; dir_first pointer
 20297 00003131 01FE                    	ADD	SI,DI
 20298                                  	;sub	si,1Ah ; 26
 20299 00003133 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20300 00003136 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20301 00003139 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20302                                  NODEEXISTS:
 20303 0000313C E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20304                                  
 20305                                  NODEEXISTSP:
 20306 0000313F 5E                      	POP	SI		; Clean stack
 20307 00003140 EBFA                    	JMP	short NODEEXISTS
 20308                                  
 20309                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20310                                  
 20311                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20312                                  ;----------------------------------------------------------------------------
 20313                                  ;
 20314                                  ; Procedure Name : DOS_ChDir
 20315                                  ;
 20316                                  ; Inputs:
 20317                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20318                                  ;		terminated)
 20319                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20320                                  ;		( = -1 if current dir not involved, else
 20321                                  ;		 Points to first char after last "/" of current dir part)
 20322                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20323                                  ; Function:
 20324                                  ;	Validate the path for potential new current directory
 20325                                  ; Returns:
 20326                                  ;	NOTE:
 20327                                  ;	    [SATTRIB] is modified by this call
 20328                                  ;	Carry Clear
 20329                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20330                                  ;		Caller must NOT set ID fields on a NET CDS.
 20331                                  ;	Carry Set
 20332                                  ;	    AX is error code
 20333                                  ;		error_path_not_found
 20334                                  ;			Bad path
 20335                                  ;		error_access_denied
 20336                                  ;			device or file name
 20337                                  ; DS preserved, Others destroyed
 20338                                  ;----------------------------------------------------------------------------
 20339                                  
 20340                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20341                                  
 20342                                  ; 18/05/2019 - Retro DOS v4.0
 20343                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20344                                  
 20345                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20346                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20347                                  
 20348                                  DOS_CHDIR:
 20349 00003142 E806E1                  	call	TestNet
 20350 00003145 7306                    	JNC	short LOCAL_CHDIR
 20351                                  
 20352                                  ;IF NOT Installed
 20353                                  ;	transfer NET_CHDIR
 20354                                  ;ELSE
 20355                                  	;mov	ax,1105h
 20356 00003147 B80511                  	MOV	AX,(MultNET<<8)|5
 20357 0000314A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20358                                  			; SS = DOS CS
 20359                                  			; SDA first filename pointer -> fully-qualified directory name
 20360                                  			; SDA CDS pointer -> current directory
 20361                                  			; Return: CF set on error, AX = DOS error code
 20362                                  			; CF clear if successful
 20363 0000314C C3                      	retn
 20364                                  ;ENDIF
 20365                                  
 20366                                  LOCAL_CHDIR:
 20367 0000314D E8BDE1                  	call	ECritDisk
 20368                                  	; MSDOS 6.0
 20369                                  	;;test	word [es:di+43h],2000h
 20370                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20371                                  	; 17/12/2022
 20372                                  	;test	byte [es:di+44h],20h
 20373 00003150 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20374 00003155 7406                    	JZ	short nojoin		   ;PTM.
 20375                                  	;mov	word [es:di+49h], 0FFFFh
 20376 00003157 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20377                                  nojoin:
 20378                                  	; MSDOS 3.3 & MSDOS 6.0
 20379 0000315D C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20380                                  	;mov	byte [SATTRIB],16h
 20381 00003162 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20382                                  				; Dir calls can find these
 20383                                  ; DOS 3.3  6/24/86 FastOpen
 20384 00003167 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20385 0000316C E82F0D                  	call	GETPATH
 20386 0000316F 9C                      	PUSHF						;AN000;
 20387 00003170 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20388 00003175 9D                      	POPF						;AN000;
 20389                                  ; DOS 3.3  6/24/86 FastOpen
 20390                                  
 20391                                  	; MSDOS 3.3
 20392                                  	;mov	byte [FastOpenFlg],0
 20393                                  	
 20394                                  	;mov	ax,3
 20395 00003176 B80300                  	MOV	AX,error_path_not_found
 20396 00003179 7207                    	JC	short ChDirDone
 20397 0000317B 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20398 0000317D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20399 00003181 F8                      	CLC
 20400                                  ChDirDone:
 20401                                  	;call	LCritDisk
 20402                                  	;retn
 20403                                  	; 18/12/2022
 20404 00003182 E9A3E1                  	jmp	LCritDisk
 20405                                  
 20406                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20407                                  ;----------------------------------------------------------------------------
 20408                                  ;
 20409                                  ; Procedure Name : DOS_RmDir
 20410                                  ;
 20411                                  ; Inputs:
 20412                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20413                                  ;		terminated)
 20414                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20415                                  ;		( = -1 if current dir not involved, else
 20416                                  ;		 Points to first char after last "/" of current dir part)
 20417                                  ;	[THISCDS] Points to CDS being used
 20418                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20419                                  ; Function:
 20420                                  ;	Remove a directory
 20421                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20422                                  ; Returns:
 20423                                  ;	NOTE:
 20424                                  ;	    [SATTRIB] is modified by this call
 20425                                  ;	Carry Clear
 20426                                  ;		No error
 20427                                  ;	Carry Set
 20428                                  ;	    AX is error code
 20429                                  ;		error_path_not_found
 20430                                  ;			Bad path (not in curr dir part if present)
 20431                                  ;		error_bad_curr_dir
 20432                                  ;			Bad path in current directory part of path
 20433                                  ;		error_access_denied
 20434                                  ;			device or file name, root directory
 20435                                  ;			Bad directory ('.' '..' messed up)
 20436                                  ; DS preserved, Others destroyed
 20437                                  ;----------------------------------------------------------------------------
 20438                                  
 20439                                  ;hkn; called from path.asm. DS already set up.
 20440                                  
 20441                                  ; 18/05/2019 - Retro DOS v4.0
 20442                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20443                                  
 20444                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20445                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20446                                  
 20447                                  DOS_RMDIR:
 20448 00003185 E8C3E0                  	call	TestNet
 20449 00003188 7306                    	JNC	short LOCAL_RMDIR
 20450                                  
 20451                                  ;IF NOT Installed
 20452                                  ;	transfer NET_RMDIR
 20453                                  ;ELSE
 20454                                  	;mov	ax,1101h
 20455 0000318A B80111                  	MOV	AX,(MultNET<<8)|1
 20456 0000318D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20457                                  			; SS = DOS CS
 20458                                  			; SDA first filename pointer -> fully-qualified directory name
 20459                                  			; SDA CDS pointer -> current directory
 20460                                  			; Return: CF set on error, AX = DOS error code
 20461                                  			; CF clear if successful
 20462 0000318F C3                      	retn
 20463                                  ;ENDIF
 20464                                  
 20465                                  LOCAL_RMDIR:
 20466 00003190 E87AE1                  	call	ECritDisk
 20467 00003193 C606[4C03]00            	MOV	byte [NoSetDir],0
 20468                                  	;mov	byte [SATTRIB],16h
 20469 00003198 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20470                                  					; Dir calls can find these
 20471 0000319D E8FE0C                  	call	GETPATH
 20472 000031A0 720C                    	JC	short NOPATH		; Path not found
 20473 000031A2 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20474 000031A4 8B3E[C205]              	MOV	DI,[DIRSTART]
 20475 000031A8 09FF                    	OR	DI,DI			; Root ?
 20476 000031AA 750E                    	JNZ	short rmdir_get_buf	; No
 20477 000031AC EB09                    	JMP	SHORT NOTDIRPATH
 20478                                  
 20479                                  NOPATH:
 20480                                  	;mov	ax,3
 20481 000031AE B80300                  	MOV	AX,error_path_not_found
 20482 000031B1 E9AFFE                  	JMP	_BadRet
 20483                                  
 20484                                  NOTDIRPATHPOP:
 20485 000031B4 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20486 000031B5 58                      	POP	AX
 20487                                  NOTDIRPATHPOP2:
 20488 000031B6 58                      	POP	AX
 20489                                  NOTDIRPATH:
 20490 000031B7 E9A6FE                  	JMP	NODEACCERRJ
 20491                                  
 20492                                  rmdir_get_buf:
 20493 000031BA C53E[E205]              	LDS	DI,[CURBUF]
 20494 000031BE 29FB                    	SUB	BX,DI		; Compute true offset
 20495 000031C0 53                      	PUSH	BX		; Save entry pointer
 20496                                  	
 20497                                  	; MSDOS 6.0
 20498                                  	;push	word [di+8]
 20499 000031C1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20500                                  	
 20501                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20502                                  	;push	word [di+6]
 20503 000031C4 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20504                                  
 20505                                  ;hkn; SS is DOSDATA
 20506                                  	;context DS
 20507 000031C7 16                      	push	ss
 20508 000031C8 1F                      	pop	ds
 20509                                  	;context ES
 20510 000031C9 16                      	push	ss
 20511 000031CA 07                      	pop	es
 20512                                  
 20513                                  ;hkn; NAME1 is in DOSDATA
 20514 000031CB BF[4B05]                	MOV	DI,NAME1
 20515 000031CE B03F                    	MOV	AL,'?'
 20516 000031D0 B90B00                  	MOV	CX,11
 20517 000031D3 F3AA                    	REP	STOSB
 20518 000031D5 30C0                    	XOR	AL,AL
 20519 000031D7 AA                      	STOSB				; Nul terminate it
 20520 000031D8 E8560F                  	call	STARTSRCH		; Set search
 20521 000031DB E8310C                  	call	GETENTRY		; Get start of directory
 20522 000031DE 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20523 000031E0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20524 000031E4 89DE                    	MOV	SI,BX
 20525 000031E6 AD                      	LODSW
 20526                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20527 000031E7 3D2E20                  	cmp	ax,202Eh ; ". "
 20528 000031EA 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20529                                  	;add	si,30
 20530 000031EC 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20531 000031EF AD                      	LODSW
 20532                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20533                                  	;cmp	ax, '..'
 20534 000031F0 3D2E2E                  	cmp	ax,2E2Eh
 20535 000031F3 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20536                                  
 20537                                  ;hkn; SS is DOSDATA
 20538                                  	;context DS
 20539 000031F5 16                      	push	ss
 20540 000031F6 1F                      	pop	ds
 20541 000031F7 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20542 000031FD E80F0C                  	call	GETENTRY		; Get next entry
 20543 00003200 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20544                                  	;mov	byte [ATTRIB],16h
 20545 00003202 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20546 00003207 E80D0B                  	call	SRCH			; Do a search
 20547 0000320A 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20548 0000320C 803E[4A03]00            	CMP	byte [FAILERR],0
 20549 00003211 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20550 00003213 C42E[8A05]              	LES	BP,[THISDPB]
 20551 00003217 8B1E[C205]              	MOV	BX,[DIRSTART]
 20552 0000321B E8201C                  	call	RELEASE 		; Release data in sub dir
 20553 0000321E 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20554 00003220 5A                      	POP	DX			; Sector # of entry
 20555 00003221 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20556                                  	; 22/09/2023
 20557                                  	;;mov	byte [ALLOWED],18h
 20558                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20559                                  	;XOR	AL,AL ; *		; Pre read
 20560                                  	;call	GETBUFFR		; Get sector back
 20561 00003225 E89F26                  	call	GETBUFFER ; *		; Pre Read
 20562 00003228 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20563 0000322A C53E[E205]              	LDS	DI,[CURBUF]
 20564                                  	;or	byte [di+5],4
 20565 0000322E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20566 00003232 5B                      	POP	BX			; Pointer to start of entry
 20567 00003233 01FB                    	ADD	BX,DI			; Corrected
 20568 00003235 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20569                                  
 20570                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20571 00003238 1E                      	PUSH	DS
 20572                                  
 20573                                  ;hkn; SS is DOSDATA
 20574                                  	;context DS
 20575 00003239 16                      	push	ss
 20576 0000323A 1F                      	pop	ds
 20577                                  
 20578                                  	; MSDOS 6.0
 20579 0000323B E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20580                                  
 20581                                  ;	; MSDOS 3.3
 20582                                  ;_FastOpen_Delete:
 20583                                  ;	push	ax
 20584                                  ;	mov	si,[WFP_START]
 20585                                  ;	mov	bx,FastTable
 20586                                  ;	;mov	al,3  ; FONC_delete
 20587                                  ;	mov	al,FONC_delete
 20588                                  ;	call	far [BX+2]  ; FastTable+2
 20589                                  ;	pop	ax
 20590                                  
 20591 0000323E 1F                      	POP	DS
 20592                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20593                                  
 20594 0000323F E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20595                                  
 20596                                  ;============================================================================
 20597                                  ; DISK.ASM, MSDOS 6.0, 1991
 20598                                  ;============================================================================
 20599                                  ; 23/07/2018 - Retro DOS v3.0 
 20600                                  ; 04/05/2019 - Retro DOS v4.0
 20601                                  
 20602                                  ;	TITLE	DISK - Disk utility routines
 20603                                  ;	NAME	Disk
 20604                                  
 20605                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20606                                  ;
 20607                                  ;	SWAPCON
 20608                                  ;	SWAPBACK
 20609                                  ;	DOS_READ
 20610                                  ;	DOS_WRITE
 20611                                  ;	get_io_sft
 20612                                  ;	DirRead
 20613                                  ;	FIRSTCLUSTER
 20614                                  ;	SET_BUF_AS_DIR
 20615                                  ;	FATSecRd
 20616                                  ;	DREAD
 20617                                  ;	CHECK_WRITE_LOCK
 20618                                  ;	CHECK_READ_LOCK
 20619                                  ;
 20620                                  ;	Revision history:
 20621                                  ;
 20622                                  ;		A000   version 4.00  Jan. 1988
 20623                                  ;
 20624                                  ;----------------------------------------------------------------------------
 20625                                  ;
 20626                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20627                                  ;		error happens, DOS retries the entire block assuming that
 20628                                  ;		zero characters were transferred. Modified the code to take
 20629                                  ;		into account the number of characters transfered before
 20630                                  ;		retrying the operation.
 20631                                  ;
 20632                                  ;----------------------------------------------------------------------------
 20633                                  ;
 20634                                  
 20635                                  ;Installed = TRUE
 20636                                  
 20637                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20638                                  
 20639                                  ; **** Drivers for file input from devices ****
 20640                                  ;----------------------------------------------------------------------------
 20641                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20642                                  ;   of handles 0 and 1
 20643                                  ;
 20644                                  ;   Inputs:	DS is DOSDATA
 20645                                  ;   Outputs:	CONSWAP is set to false.
 20646                                  ;   Registers modified: none
 20647                                  ;----------------------------------------------------------------------------
 20648                                  
 20649                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20650                                  
 20651                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20652                                  ; 04/05/2019 - Retro DOS v4.0
 20653                                  
 20654                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20655                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20656                                  
 20657                                  SWAPBACK:
 20658 00003242 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20659 00003247 C3                      	retn
 20660                                  
 20661                                  ;----------------------------------------------------------------------------
 20662                                  ;
 20663                                  ; Procedure Name : SWAPCON
 20664                                  ;
 20665                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20666                                  ;
 20667                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20668                                  ;		DS is DOSDATA
 20669                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20670                                  ;   Registers modified: none
 20671                                  ;--------------------------------------------------------------------------
 20672                                  
 20673                                  SWAPCON:
 20674                                  	; MSDOS 3.3
 20675                                  	;push	es
 20676                                  	;push	di
 20677                                  	;mov	byte [CONSWAP],1
 20678                                  	;les	di,[THISSFT]
 20679                                  	;mov	word [CONSFT],di
 20680                                  	;mov	word [CONSFT+2],es
 20681                                  	;pop	di
 20682                                  	;pop	es
 20683                                  	;retn
 20684                                  
 20685                                  	; MSDOS 6.0
 20686 00003248 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20687 0000324D 50                      	push	ax
 20688 0000324E A1[9E05]                	mov	ax,[THISSFT]
 20689 00003251 A3[E605]                	mov	[CONSFT],ax
 20690 00003254 A1[A005]                	mov	ax,[THISSFT+2]
 20691 00003257 A3[E805]                	mov	[CONSFT+2],ax
 20692 0000325A 58                      	pop	ax
 20693 0000325B C3                      	retn
 20694                                  
 20695                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20696                                  ; 04/05/2019 - Retro DOS v4.0
 20697                                  
 20698                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20699                                  ;-----------------------------------------------------------------------------
 20700                                  ;
 20701                                  ; Inputs:
 20702                                  ;	ThisSFT set to the SFT for the file being used
 20703                                  ;	[DMAADD] contains transfer address
 20704                                  ;	CX = No. of bytes to read
 20705                                  ;	DS = DOSDATA
 20706                                  ; Function:
 20707                                  ;	Perform read operation
 20708                                  ; Outputs:
 20709                                  ;    Carry clear
 20710                                  ;	SFT Position and cluster pointers updated
 20711                                  ;	CX = No. of bytes read
 20712                                  ;	ES:DI point to SFT
 20713                                  ;    Carry set
 20714                                  ;	AX is error code
 20715                                  ;	CX = 0
 20716                                  ;	ES:DI point to SFT
 20717                                  ; DS preserved, all other registers destroyed
 20718                                  ;
 20719                                  ;-----------------------------------------------------------------------------
 20720                                  
 20721                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20722                                  
 20723                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20724                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20725                                  
 20726                                  DOS_READ:
 20727 0000325C C43E[9E05]              	LES	DI,[THISSFT]
 20728                                  
 20729                                  ; Verify that the sft has been opened in a mode that allows reading.
 20730                                  
 20731                                  	;mov	al,[es:di+2]
 20732 00003260 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20733                                  	;and	al,0Fh
 20734 00003264 240F                    	AND	AL,access_mask
 20735                                  	;cmp	al,1
 20736 00003266 3C01                    	CMP	AL,open_for_write
 20737 00003268 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20738 0000326A E90306                  	jmp	SET_ACC_ERR
 20739                                  
 20740                                  READ_NO_MODE:
 20741 0000326D E8E104                  	call	SETUP
 20742 00003270 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20743 00003272 E8EFDF                  	call	IsSFTNet
 20744 00003275 7408                    	JZ	short LOCAL_READ
 20745                                  
 20746                                  ;IF NOT Installed
 20747                                  ;	transfer NET_READ
 20748                                  ;ELSE
 20749                                  	;mov	ax,1108h
 20750 00003277 B80811                  	MOV	AX,(MultNET<<8)|8
 20751 0000327A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20752                                  			; ES:DI -> SFT
 20753                                  			; SFT DPB field -> DPB of drive containing file
 20754                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20755                                  			; Return: CF set on error, CX = bytes read
 20756 0000327C C3                      	retn
 20757                                  ;ENDIF
 20758                                  
 20759                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20760                                  ; except return immediately.
 20761                                  
 20762                                  NoIORet:
 20763 0000327D F8                      	CLC
 20764 0000327E C3                      	retn
 20765                                  
 20766                                  LOCAL_READ:
 20767                                  	;test	word [es:di+5],80h
 20768                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20769 0000327F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20770 00003284 750E                    	JNZ	short READDEV
 20771                                  
 20772                                  	;mov	byte [EXTERR_LOCUS],2
 20773 00003286 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20774 0000328B E87FE0                  	call	ECritDisk
 20775 0000328E E89B05                  	call	DISKREAD
 20776                                  
 20777                                  critexit:
 20778                                  	;call	LCritDisk
 20779                                  	;retn
 20780                                  	; 16/12/2022
 20781 00003291 E994E0                  	jmp	LCritDisk
 20782                                  
 20783                                  ; We are reading from a device. Examine the status of the device to see if we
 20784                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20785                                  ; null device, we can safely indicate no transfer.
 20786                                  
 20787                                  READDEV:
 20788                                  	;mov	byte [EXTERR_LOCUS],4
 20789 00003294 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20790                                  	;mov	bl,[es:di+5]
 20791 00003299 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20792 0000329D C43E[2C03]              	LES	DI,[DMAADD]
 20793                                  	;test	bl,40h
 20794 000032A1 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20795 000032A4 7407                    	JZ	short ENDRDDEVJ3
 20796                                  	;test	bl,4
 20797 000032A6 F6C304                  	test	BL,devid_device_null	; NUL device?
 20798 000032A9 7405                    	JZ	short TESTRAW 		; NO
 20799 000032AB 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20800                                  ENDRDDEVJ3:
 20801                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20802                                  	;JMP	short ENDRDDEVJ2
 20803                                  	; 16/12/2022
 20804 000032AD E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20805                                  
 20806                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20807                                  ; bizarre std_con_string_input.
 20808                                  
 20809                                  TESTRAW:
 20810                                  	;test	bl,20h
 20811 000032B0 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20812 000032B3 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20813                                  	;test	bl,1
 20814 000032B5 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20815 000032B8 7461                    	JZ	short NOTRDCON
 20816 000032BA E98F01                  	JMP	READCON
 20817                                  
 20818                                  DVRDRAW:
 20819 000032BD 06                      	PUSH	ES
 20820 000032BE 1F                      	POP	DS			; Xaddr to DS:DI
 20821                                  
 20822                                  	; 04/05/2019 - Retro DOS v4.0
 20823                                  
 20824                                  	; MSDOS 6.0
 20825                                  ;SR;
 20826                                  ;Check for win386 presence -- if present, do polled read of characters
 20827                                  
 20828 000032BF 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20829 000032C5 7408                    	jz	short ReadRawRetry	;not present
 20830 000032C7 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20831 000032CA 7403                    	jz	short ReadRawRetry	;no, do normal read
 20832 000032CC E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20833                                  
 20834                                  ReadRawRetry:
 20835 000032CF 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20836 000032D1 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20837 000032D3 89C2                    	MOV	DX,AX			; Start at 0
 20838 000032D5 E88D13                  	call	SETREAD
 20839 000032D8 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20840                                  
 20841                                  ;hkn; SS override
 20842 000032D9 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20843 000032DE E80B13                  	call	DEVIOCALL
 20844 000032E1 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20845 000032E3 B486                    	MOV	AH,86H			; Read error
 20846                                  
 20847                                  ;hkn; SS override
 20848 000032E5 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20849                                  	; MSDOS 3.3
 20850                                  	;test	di,8000h
 20851                                  	;jz	short CRDROK
 20852                                  	; MSDOS 6.0
 20853 000032EA 09FF                    	or	di,di
 20854 000032EC 7923                    	jns	short CRDROK		; no errors
 20855                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20856 000032EE E8601F                  	call	CHARHARD
 20857 000032F1 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20858                                  
 20859                                  	; 04/05/2019
 20860                                  
 20861                                  	; MSDOS 6.0
 20862 000032F3 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20863 000032F8 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20864                                  
 20865                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20866 000032FD 08C0                    	OR	AL,AL
 20867 000032FF 7410                    	JZ	short CRDROK		; Ignore
 20868 00003301 3C03                    	CMP	AL,3
 20869 00003303 7403                    	JZ	short CRDFERR 		; fail.
 20870 00003305 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20871 00003306 EBC7                    	JMP	short ReadRawRetry	; Retry
 20872                                  
 20873                                  ; We have encountered a device-driver error. We have informed the user of it
 20874                                  ; and he has said for us to fail the system call.
 20875                                  
 20876                                  CRDFERR:
 20877 00003308 5F                      	POP	DI			; Clean stack
 20878                                  DEVIOFERR:
 20879                                  
 20880                                  ;hkn; SS override
 20881 00003309 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20882 0000330E E95D05                  	jmp	SET_ACC_ERR_DS
 20883                                  
 20884                                  CRDROK:
 20885 00003311 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20886 00003312 89D7                    	MOV	DI,DX
 20887                                  
 20888                                  ;hkn; SS override
 20889 00003314 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20890                                  	;JMP	SHORT ENDRDDEVJ3
 20891                                  	; 16/12/2022
 20892 00003319 EB6B                    	jmp	short ENDRDDEVJ2
 20893                                  
 20894                                  ; We are going to do a cooked read on some character device. There is a
 20895                                  ; problem here, what does the data look like? Is it a terminal device, line
 20896                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20897                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20898                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20899                                  ; included in data). this "simulates" the way con works in cooked mode
 20900                                  ; reading one line at a time. With file data, however, the lines will look
 20901                                  ; like, LF line CR. This is a little weird.
 20902                                  
 20903                                  NOTRDCON:
 20904 0000331B 8CC0                    	MOV	AX,ES
 20905 0000331D 8ED8                    	MOV	DS,AX
 20906 0000331F 89FB                    	MOV	BX,DI
 20907 00003321 31D2                    	XOR	DX,DX
 20908 00003323 89D0                    	MOV	AX,DX
 20909 00003325 51                      	PUSH	CX
 20910 00003326 B90100                  	MOV	CX,1
 20911 00003329 E83913                  	call	SETREAD
 20912 0000332C 59                      	POP	CX
 20913                                  
 20914                                  ;hkn; SS override
 20915 0000332D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20916                                  	;lds	si,[si+7]
 20917 00003332 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20918                                  DVRDLP:
 20919 00003335 E8FA1C                  	call	DSKSTATCHK
 20920 00003338 E8B412                  	call	DEVIOCALL2
 20921 0000333B 57                      	PUSH	DI		; Save "count" done
 20922 0000333C B486                    	MOV	AH,86H
 20923                                  
 20924                                  ;hkn; SS override
 20925 0000333E 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20926                                  	
 20927                                  	; MSDOS 3.3
 20928                                  	;test	di,8000h
 20929                                  	;jz	short CRDOK
 20930                                  	; MSDOS 6.0
 20931 00003343 09FF                    	or	di,di
 20932 00003345 7917                    	jns	short CRDOK
 20933                                  	
 20934 00003347 E8071F                  	call	CHARHARD
 20935 0000334A 5F                      	POP	DI
 20936                                  
 20937                                  ;hkn; SS override
 20938 0000334B 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20939 00003352 3C01                    	CMP	AL,1
 20940 00003354 74DF                    	JZ	short DVRDLP		;Retry
 20941 00003356 3C03                    	CMP	AL,3
 20942 00003358 74AF                    	JZ	short DEVIOFERR		; FAIL
 20943 0000335A 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20944 0000335C EB12                    	JMP	SHORT DVRDIGN
 20945                                  
 20946                                  CRDOK:
 20947 0000335E 5F                      	POP	DI
 20948                                  
 20949                                  ;hkn; SS override
 20950 0000335F 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20951                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20952 00003365 751F                    	JNZ	short ENDRDDEVJ2
 20953                                  	; 16/12/2022
 20954                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20955                                  
 20956 00003367 1E                      	PUSH	DS
 20957                                  
 20958                                  ;hkn; SS override
 20959 00003368 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20960 0000336D 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20961 0000336F 1F                      	POP	DS
 20962                                  DVRDIGN:
 20963                                  
 20964                                  ;hkn; SS override
 20965 00003370 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20966 00003375 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20967 0000337C 47                      	INC	DI			; Next character
 20968 0000337D 3C1A                    	CMP	AL,1Ah			; ^Z?
 20969                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20970 0000337F 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20971                                  	; 16/12/2022
 20972                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20973 00003381 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20974 00003383 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20975 00003385 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20976                                  					;  AX=FFFF which is not likely
 20977                                  ENDRDDEVJ2:
 20978                                  	; 16/12/2022
 20979                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20980                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20981 00003386 E98E00                  	jmp	ENDRDDEV
 20982                                  
 20983                                  	; 04/05/2019
 20984                                  
 20985                                  	; MSDOS 6.0
 20986                                  ;SR;
 20987                                  ;Polling code for raw read on CON when WIN386 is present
 20988                                  ;
 20989                                  ;At this point -- ds:di is transfer address
 20990                                  ;		  cx is count
 20991                                  
 20992                                  do_polling:
 20993 00003389 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20994 0000338B 31C0                    	xor	ax,ax
 20995 0000338D 89C2                    	mov	dx,ax
 20996 0000338F E8D312                  	call	SETREAD			;prepare device packet
 20997                                  
 20998                                  do_io:
 20999                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21000                                  
 21001 00003392 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21002 00003397 1E                      	push	ds
 21003 00003398 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21004 0000339D E84C12                  	call	DEVIOCALL		;call device driver
 21005 000033A0 1F                      	pop	ds
 21006                                  	
 21007                                  	;test	word [es:bx+3],8000h
 21008                                  	; 16/12/2022
 21009                                  	;test	byte [es:bx+4],80h
 21010 000033A1 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21011                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21012 000033A6 7413                    	jz	short check_busy	;no
 21013                                  
 21014 000033A8 1E                      	push	ds
 21015 000033A9 89FA                    	mov	dx,di
 21016                                  	;invoke charhard		;invoke int 24h handler
 21017 000033AB E8A31E                  	call	CHARHARD
 21018 000033AE 89D7                    	mov	di,dx
 21019 000033B0 08C0                    	or	al,al
 21020 000033B2 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 21021 000033B4 3C03                    	cmp	al,3
 21022 000033B6 7448                    	jz	short devrderr		;user asked to fail
 21023 000033B8 1F                      	pop	ds
 21024 000033B9 EBD7                    	jmp	short do_io		;user asked to retry
 21025                                  
 21026                                  check_busy:
 21027                                  	;test	word [es:bx+3],200h
 21028                                  	; 16/12/2022
 21029 000033BB 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21030                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21031 000033C0 7547                    	jnz	short no_char		;yes, no character available
 21032                                  
 21033                                  ;Character is available. Read in 1 character at a time until all characters
 21034                                  ;are read in or no character is available
 21035                                  
 21036 000033C2 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21037 000033C7 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21038 000033CD 1E                      	push	ds
 21039 000033CE 36C536[9E05]            	lds	si,[ss:THISSFT]
 21040 000033D3 E81612                  	call	DEVIOCALL
 21041                                  
 21042 000033D6 89FA                    	mov	dx,di
 21043 000033D8 B486                    	mov	ah,86h
 21044                                  	;mov	di,[es:bx+3]
 21045 000033DA 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21046 000033DE F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21047 000033E2 7410                    	jz	short next_char		;no,read next character
 21048                                  
 21049                                  	;invoke	charhard		;invoke int 24h handler
 21050 000033E4 E86A1E                  	call	CHARHARD
 21051 000033E7 89D7                    	mov	di,dx			;restore di
 21052 000033E9 08C0                    	or	al,al			;
 21053 000033EB 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 21054 000033ED 3C03                    	cmp	al,3
 21055 000033EF 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 21056 000033F1 1F                      	pop	ds
 21057 000033F2 EB9E                    	jmp	short do_io		;user issued a retry
 21058                                  
 21059                                  next_char:
 21060 000033F4 1F                      	pop	ds
 21061 000033F5 89D7                    	mov	di,dx
 21062 000033F7 49                      	dec	cx			;decrement count
 21063 000033F8 E318                    	jcxz	done_read		;all characters read in
 21064 000033FA 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21065 000033FE EB92                    	jmp	short do_io			;read next character in
 21066                                  
 21067                                  devrderr:
 21068 00003400 5F                      	pop	di			;discard segment address
 21069 00003401 36C43E[9E05]            	les	di,[ss:THISSFT]
 21070                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21071 00003406 E96504                  	jmp     SET_ACC_ERR_DS
 21072                                  
 21073                                  no_char:
 21074                                  ;Since no character is available, we let win386 switch the VM out
 21075                                  
 21076 00003409 50                      	push	ax
 21077 0000340A B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21078 0000340C CD2A                    	int	2Ah			;indicate idle to WIN386
 21079                                  
 21080                                  ;When control returns from WIN386, we continue the raw read
 21081                                  
 21082 0000340E 58                      	pop	ax
 21083 0000340F EB81                    	jmp	do_io
 21084                                  
 21085                                  pop_done_read:
 21086 00003411 1F                      	pop	ds
 21087                                  done_read:
 21088 00003412 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21089                                  
 21090                                  	; 16/12/2022
 21091                                  
 21092                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21093                                  	;jmp	ENDRDDEV ; 04/05/2019
 21094                                  
 21095                                  	; 04/05/2019 - Retro DOS v4.0
 21096                                  ENDRDDEV:
 21097 00003417 16                      	push	ss
 21098 00003418 1F                      	pop	ds
 21099 00003419 EB1F                    	jmp	short endrddev1
 21100                                  
 21101                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21102                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21103                                  
 21104                                  TRANBUF:
 21105 0000341B AC                      	LODSB
 21106 0000341C AA                      	STOSB
 21107 0000341D 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21108 0000341F 7503                    	JNZ	short NORMCH
 21109 00003421 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21110                                  NORMCH:
 21111 00003424 3C0A                    	CMP	AL,c_LF ; 0Ah
 21112 00003426 E0F3                    	LOOPNZ	TRANBUF
 21113 00003428 7507                    	JNZ	short ENDRDCON
 21114 0000342A 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21115 0000342C E832E2                  	call	OUTT		; Transmit linefeed
 21116 0000342F 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21117                                  ENDRDCON:
 21118                                  ;hkn; SS is DOSDATA
 21119 00003431 16                      	push	ss
 21120 00003432 1F                      	pop	ds
 21121 00003433 E80CFE                  	CALL	SWAPBACK
 21122 00003436 8936[2200]              	MOV	[CONTPOS],SI
 21123                                  
 21124                                  	; 16/12/2022
 21125                                  ;ENDRDDEV:
 21126                                  ;;hkn; SS is DOSDATA
 21127                                  ;	push	ss
 21128                                  ;	pop	ds
 21129                                  endrddev1:	; 04/05/2019
 21130 0000343A 893E[B805]              	MOV	[NEXTADD],DI
 21131 0000343E 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21132 00003440 C43E[9E05]              	LES	DI,[THISSFT]
 21133                                  	;and	byte [es:di+5],0BFh
 21134 00003444 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21135                                  				; Mark as no more data available
 21136                                  SETSFTC:
 21137                                  	; 31/07/2019
 21138                                  	;call	SETSFT
 21139                                  	;retn
 21140 00003449 E9B604                  	jmp	SETSFT
 21141                                  
 21142                                  ; 16/12/2022
 21143                                  %if 0
 21144                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21145                                  ENDRDDEV:
 21146                                  ;hkn; SS is DOSDATA
 21147                                  	push	ss
 21148                                  	pop	ds
 21149                                  	MOV	[NEXTADD],DI
 21150                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21151                                  	LES	DI,[THISSFT]
 21152                                  	;and	byte [es:di+5],0BFh
 21153                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21154                                  				; Mark as no more data available
 21155                                  SETSFTC:
 21156                                  	;call	SETSFT
 21157                                  	;retn
 21158                                  	jmp	SETSFT	
 21159                                  %endif
 21160                                  
 21161                                  READCON:
 21162 0000344C E8F9FD                  	CALL	SWAPCON
 21163 0000344F 8B36[2200]              	MOV	SI,[CONTPOS]
 21164 00003453 09F6                    	OR	SI,SI
 21165 00003455 75C4                    	JNZ	short TRANBUF
 21166 00003457 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21167 0000345C 7406                    	JZ	short GETBUF
 21168 0000345E C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21169                                  GETBUF:
 21170 00003464 51                      	PUSH	CX
 21171 00003465 06                      	PUSH	ES
 21172 00003466 57                      	PUSH	DI
 21173                                  
 21174                                  ;hkn; CONBUF is in DOSDATA
 21175 00003467 BA[7B02]                	MOV	DX,CONBUF
 21176                                  
 21177 0000346A E86FDF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21178 0000346D 5F                      	POP	DI
 21179 0000346E 07                      	POP	ES
 21180 0000346F 59                      	POP	CX
 21181                                  
 21182                                  ;hkn; CONBUF is in DOSDATA
 21183 00003470 BE[7D02]                	MOV	SI,CONBUF+2
 21184                                  
 21185 00003473 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21186 00003476 75A3                    	JNZ	short TRANBUF
 21187 00003478 B01A                    	MOV	AL,1AH
 21188 0000347A AA                      	STOSB
 21189 0000347B 4F                      	DEC	DI
 21190 0000347C B00A                    	MOV	AL,c_LF
 21191 0000347E E8E0E1                  	call	OUTT		; Send linefeed
 21192 00003481 31F6                    	XOR	SI,SI
 21193 00003483 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21194                                  
 21195                                  ; 24/07/2018 - Retro DOS v3.0
 21196                                  
 21197                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21198                                  ;---------------------------------------------------------------------------
 21199                                  ;
 21200                                  ; Procedure Name : DOS_WRITE
 21201                                  ;
 21202                                  ; Inputs:
 21203                                  ;	ThisSFT set to the SFT for the file being used
 21204                                  ;	[DMAADD] contains transfer address
 21205                                  ;	CX = No. of bytes to write
 21206                                  ; Function:
 21207                                  ;	Perform write operation
 21208                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21209                                  ;		to current sf_position
 21210                                  ; Outputs:
 21211                                  ;    Carry clear
 21212                                  ;	SFT Position and cluster pointers updated
 21213                                  ;	CX = No. of bytes written
 21214                                  ;	ES:DI point to SFT
 21215                                  ;    Carry set
 21216                                  ;	AX is error code
 21217                                  ;	CX = 0
 21218                                  ;	ES:DI point to SFT
 21219                                  ; DS preserved, all other registers destroyed
 21220                                  ;---------------------------------------------------------------------------
 21221                                  
 21222                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21223                                  ;hkn; point to DOSDATA.
 21224                                  
 21225                                  ; 04/05/2019 - Retro DOS v4.0
 21226                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21227                                  
 21228                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21229                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21230                                  
 21231                                  DOS_WRITE:
 21232 00003485 C43E[9E05]              	LES	DI,[THISSFT]
 21233                                  	;mov	al,[ES:DI+2]
 21234 00003489 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21235                                  	;and	al,0Fh
 21236 0000348D 240F                    	AND	AL,access_mask
 21237                                  	;cmp	al,0
 21238 0000348F 3C00                    	CMP	AL,open_for_read
 21239 00003491 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21240                                  BadMode:
 21241 00003493 E9DA03                  	jmp	SET_ACC_ERR
 21242                                  
 21243                                  ; NOTE: The following check for writting to a Read Only File is performed
 21244                                  ;	    ONLY on FCBs!!!!
 21245                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21246                                  ;	    of a read only file which can then be written to.
 21247                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21248                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21249                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21250                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21251                                  ;	    to a read-only file.
 21252                                  
 21253                                  Check_FCB_RO:
 21254                                  	;;test	word [es:di+2],8000h
 21255                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21256                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21257                                  	
 21258                                  	;test	byte [es:di+3],80h
 21259 00003496 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21260 0000349B 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21261                                  
 21262                                  	;test	byte [es:di+4],1
 21263 0000349D 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21264 000034A2 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21265                                  WRITE_NO_MODE:
 21266 000034A4 E8AA02                  	call	SETUP
 21267 000034A7 E8BADD                  	call	IsSFTNet
 21268 000034AA 7406                    	JZ	short LOCAL_WRITE
 21269                                  
 21270                                  ;IF NOT Installed
 21271                                  ;	transfer NET_WRITE
 21272                                  ;ELSE
 21273                                  	;mov	ax,1109h
 21274 000034AC B80911                  	MOV	AX,(MultNET<<8)|9
 21275 000034AF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21276                                  			; ES:DI -> SFT
 21277                                  			; SFT DPB field -> DPB of drive containing file
 21278                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21279                                  			; Return: CF set on error, CX = bytes written
 21280 000034B1 C3                      	retn
 21281                                  ;ENDIF
 21282                                  
 21283                                  LOCAL_WRITE:
 21284                                  	;;test	word [es:di+5],80h
 21285                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21286                                  	;jnz	short WRTDEV
 21287                                  
 21288                                  	;test	byte [es:di+5],80h
 21289 000034B2 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21290 000034B7 756E                    	jnz	short WRTDEV
 21291                                  
 21292                                  	;mov	byte [EXTERR_LOCUS],2
 21293 000034B9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21294 000034BE E84CDE                  	call	ECritDisk
 21295                                  
 21296 000034C1 E8F404                  	call	DISKWRITE
 21297                                  
 21298                                  	; 04/05/2019 - Retro DOS v4.0
 21299                                  
 21300                                  	; MSDOS 6.0
 21301                                  ; Extended Open
 21302 000034C4 7210                    	JC	short nocommit
 21303                                  	
 21304 000034C6 C43E[9E05]              	LES	DI,[THISSFT]
 21305                                  	
 21306                                  	;;test	word [ES:DI+2],4000h
 21307                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21308                                  	;JZ	short nocommit
 21309                                  	
 21310                                  	;test	byte [ES:DI+3],40h
 21311 000034CA 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21312 000034CF 7405                    	JZ	short nocommit
 21313                                  	
 21314 000034D1 51                      	PUSH	CX
 21315 000034D2 E835FB                  	call	DOS_COMMIT
 21316 000034D5 59                      	POP	CX
 21317                                  nocommit:
 21318                                  ; Extended Open
 21319                                  	;call	LCritDisk
 21320                                  	;retn
 21321                                  	; 18/12/2022
 21322 000034D6 E94FDE                  	jmp	LCritDisk
 21323                                  
 21324                                  DVWRTRAW:
 21325 000034D9 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21326 000034DB E8BA11                  	call	SETWRITE
 21327 000034DE 1E                      	PUSH	DS			; Save seg of transfer
 21328                                  
 21329                                  ;hkn; SS override
 21330 000034DF 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21331 000034E4 E80511                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21332                                  
 21333 000034E7 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21334 000034E9 B487                    	MOV	AH,87H
 21335                                  
 21336                                  ;hkn; SS override
 21337 000034EB 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21338                                  
 21339                                  	; MSDOS 3.3
 21340                                  	;test	di,8000h
 21341                                  	;jz	short CWRTROK
 21342                                  
 21343                                  	; MSDOS 6.0
 21344 000034F0 09FF                    	or	di,di
 21345 000034F2 7920                    	jns	short CWRTROK
 21346                                  	
 21347                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21348 000034F4 E85A1D                  	call	CHARHARD
 21349                                  
 21350                                  	; 04/05/2019  - Retro DOS v4.0
 21351                                  
 21352                                  	; MSDOS 6.0
 21353 000034F7 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21354 000034FC 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21355 000034FE 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 21356 00003503 89DF                    	mov	di,bx			;				M065
 21357                                  	
 21358                                  	; MSDOS 3.3
 21359                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21360                                  
 21361                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21362 00003505 08C0                    	OR	AL,AL
 21363 00003507 740B                    	JZ	short CWRTROK 		; Ignore
 21364 00003509 3C03                    	CMP	AL,3
 21365 0000350B 7403                    	JZ	short CWRFERR
 21366 0000350D 1F                      	POP	DS			; Recover saved seg of transfer
 21367 0000350E EBC9                    	JMP	short DVWRTRAW		; Try again
 21368                                  CWRFERR:
 21369 00003510 58                      	POP	AX			; Chuck saved seg of transfer
 21370 00003511 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 21371                                  CWRTROK:
 21372 00003514 58                      	POP	AX			; Chuck saved seg of transfer
 21373 00003515 1F                      	POP	DS
 21374 00003516 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21375                                  ENDWRDEV:
 21376 00003519 C43E[9E05]              	LES	DI,[THISSFT]
 21377 0000351D 89C1                    	MOV	CX,AX
 21378                                  	;call	ADDREC
 21379                                  	;retn
 21380                                  	; 16/12/2022
 21381                                  	; 10/06/2019
 21382 0000351F E90104                  	jmp	ADDREC
 21383                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21384                                  	;call	ADDREC
 21385                                  	;retn
 21386                                  	
 21387                                  WRTNUL:
 21388 00003522 89CA                    	MOV	DX,CX			; Entire transfer done
 21389                                  WRTCOOKJ:
 21390 00003524 E98D00                  	JMP	WRTCOOKDONE
 21391                                  WRTDEV:
 21392                                  	;mov	byte [EXTERR_LOCUS],4
 21393 00003527 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21394                                  	;or	byte [es:di+5],40h
 21395 0000352C 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21396                                  					; Reset EOF for input
 21397                                  	;mov	bl,[es:di+5]
 21398 00003531 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21399 00003535 31C0                    	XOR	AX,AX
 21400 00003537 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21401 00003539 1E                      	PUSH	DS
 21402 0000353A 88D8                    	MOV	AL,BL
 21403 0000353C C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21404 00003540 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21405 00003542 31D2                    	XOR	DX,DX			; Set starting point
 21406                                  	;test	al,20h
 21407 00003544 A820                    	test	AL,devid_device_raw	; Raw?
 21408                                  	;JZ	short TEST_DEV_CON
 21409                                  	;JMP	DVWRTRAW
 21410                                  	; 16/12/2022
 21411 00003546 7591                    	jnz	short DVWRTRAW
 21412                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21413                                  	;JZ	short TEST_DEV_CON
 21414                                  	;JMP	short DVWRTRAW
 21415                                  
 21416                                  TEST_DEV_CON:
 21417                                  	;test	al,2
 21418 00003548 A802                    	test	AL,devid_device_con_out ; Console output device?
 21419 0000354A 756E                    	jnz	short WRITECON
 21420                                  	;test	al,4
 21421 0000354C A804                    	test	AL,devid_device_null
 21422 0000354E 75D2                    	JNZ	short WRTNUL
 21423 00003550 89D0                    	MOV	AX,DX
 21424 00003552 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21425 00003555 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21426 00003557 51                      	PUSH	CX
 21427 00003558 B90100                  	MOV	CX,1
 21428 0000355B E83A11                  	call	SETWRITE
 21429 0000355E 59                      	POP	CX
 21430                                  
 21431                                  ;hkn; SS override
 21432 0000355F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21433                                  ;
 21434                                  ;SR; Removed X25 support from here
 21435                                  ;
 21436                                  	;lds	si,[si+7]
 21437 00003564 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21438                                  DVWRTLP:
 21439 00003567 E8C81A                  	call	DSKSTATCHK
 21440 0000356A E88210                  	call	DEVIOCALL2
 21441 0000356D 57                      	PUSH	DI
 21442 0000356E B487                    	MOV	AH,87H
 21443                                  
 21444                                  ;hkn; SS override
 21445 00003570 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21446                                  	
 21447                                  	; MSDOS 3.3
 21448                                  	;test	di,8000h
 21449                                  	;jz	short CWROK
 21450                                  
 21451                                  	; MSDOS 6.0
 21452 00003575 09FF                    	or	di,di
 21453 00003577 7916                    	jns	short CWROK
 21454                                  	
 21455                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21456 00003579 E8D51C                  	call	CHARHARD
 21457 0000357C 5F                      	POP	DI
 21458                                  
 21459                                  ;hkn; SS override
 21460 0000357D 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21461 00003584 3C01                    	CMP	AL,1
 21462 00003586 74DF                    	JZ	short DVWRTLP 	; Retry
 21463 00003588 08C0                    	OR	AL,AL
 21464 0000358A 740C                    	JZ	short DVWRTIGN	; Ignore
 21465                                  	; 10/08/2018
 21466 0000358C E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21467                                  CWROK:
 21468 0000358F 5F                      	POP	DI
 21469                                  
 21470                                  ;hkn; SS override
 21471 00003590 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21472 00003596 741C                    	JZ	short WRTCOOKDONE
 21473                                  DVWRTIGN:
 21474 00003598 42                      	INC	DX
 21475                                  
 21476                                  ;hkn; SS override for CALLXAD
 21477 00003599 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21478 0000359E 47                      	INC	DI
 21479 0000359F 1E                      	PUSH	DS
 21480 000035A0 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21481 000035A5 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21482 000035A8 1F                      	POP	DS
 21483 000035A9 7409                    	JZ	short WRTCOOKDONE
 21484                                  
 21485                                  ;hkn; SS override
 21486 000035AB 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21487 000035B2 E2B3                    	LOOP	DVWRTLP
 21488                                  WRTCOOKDONE:
 21489 000035B4 89D0                    	MOV	AX,DX
 21490 000035B6 1F                      	POP	DS
 21491 000035B7 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21492                                  
 21493                                  WRITECON:
 21494 000035BA 1E                      	PUSH	DS
 21495                                  
 21496                                  ;hkn; SS is DOSDATA
 21497 000035BB 16                      	push	ss
 21498 000035BC 1F                      	pop	ds
 21499 000035BD E888FC                  	CALL	SWAPCON
 21500 000035C0 1F                      	POP	DS
 21501 000035C1 89DE                    	MOV	SI,BX
 21502 000035C3 51                      	PUSH	CX
 21503                                  WRCONLP:
 21504 000035C4 AC                      	LODSB
 21505 000035C5 3C1A                    	CMP	AL,1Ah		; ^Z?
 21506 000035C7 7405                    	JZ	short CONEOF
 21507 000035C9 E895E0                  	call	OUTT
 21508 000035CC E2F6                    	LOOP	WRCONLP
 21509                                  CONEOF:
 21510 000035CE 58                      	POP	AX			; Count
 21511 000035CF 29C8                    	SUB	AX,CX			; Amount actually written
 21512 000035D1 1F                      	POP	DS
 21513 000035D2 E86DFC                  	CALL	SWAPBACK
 21514 000035D5 E941FF                  	JMP	ENDWRDEV
 21515                                  
 21516                                  ;---------------------------------------------------------------------------
 21517                                  ;
 21518                                  ; Procedure Name : get_io_sft
 21519                                  ;
 21520                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21521                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21522                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21523                                  ;
 21524                                  ;---------------------------------------------------------------------------
 21525                                  
 21526                                  ; 04/05/2019 - Retro DOS v4.0
 21527                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21528                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21529                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21530                                  
 21531                                  GET_IO_SFT:
 21532                                  	;test	byte [SS:CONSWAP],0FFh
 21533 000035D8 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21534 000035DE 7512                    	JNZ	short GetRedir
 21535                                  GetNormal:
 21536 000035E0 16                      	push	ss
 21537 000035E1 1F                      	pop	ds
 21538 000035E2 06                      	PUSH	ES
 21539 000035E3 57                      	PUSH	DI
 21540 000035E4 E80A30                  	call	SFFromHandle
 21541 000035E7 7206                    	JC	short RET44P
 21542 000035E9 8CC6                    	MOV	SI,ES
 21543 000035EB 8EDE                    	MOV	DS,SI
 21544 000035ED 89FE                    	MOV	SI,DI
 21545                                  RET44P:
 21546 000035EF 5F                      	POP	DI
 21547 000035F0 07                      	POP	ES
 21548 000035F1 C3                      	retn
 21549                                  GetRedir:
 21550 000035F2 83FB01                  	CMP	BX,1
 21551 000035F5 77E9                    	JA	short GetNormal
 21552 000035F7 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21553 000035FC F8                      	CLC
 21554                                  get_io_sft_retn:
 21555 000035FD C3                      	retn
 21556                                  
 21557                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21558                                  ;---------------------------------------------------------------------------
 21559                                  ;
 21560                                  ; Procedure Name : DIRREAD
 21561                                  ;
 21562                                  ; Inputs:
 21563                                  ;	AX = Directory block number (relative to first block of directory)
 21564                                  ;	ES:BP = Base of drive parameters
 21565                                  ;	[DIRSEC] = First sector of first cluster of directory
 21566                                  ;	[CLUSNUM] = Next cluster
 21567                                  ;	[CLUSFAC] = Sectors/Cluster
 21568                                  ; Function:
 21569                                  ;	Read the directory block into [CURBUF].
 21570                                  ; Outputs:
 21571                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21572                                  ;	[SECCLUSPOS] Set
 21573                                  ;	ES:BP unchanged
 21574                                  ;	[CURBUF] Points to Buffer with dir sector
 21575                                  ;	Carry set if error (user said FAIL to I 24)
 21576                                  ; DS preserved, all other registers destroyed.
 21577                                  ;---------------------------------------------------------------------------
 21578                                  
 21579                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21580                                  
 21581                                  DIRREAD:
 21582                                  
 21583                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21584                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21585                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21586                                  ; by DIRStart = 0.
 21587                                  
 21588 000035FE 31D2                    	XOR	DX,DX
 21589                                  	;CMP	word [DIRSTART],0
 21590                                  	; 21/09/2023
 21591 00003600 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21592 00003604 7503                    	jnz	short SubDir
 21593 00003606 92                      	XCHG	AX,DX
 21594 00003607 EB0C                    	JMP	short DoRead
 21595                                  
 21596                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21597                                  
 21598                                  SubDir:
 21599 00003609 88C2                    	MOV	DL,AL
 21600                                  	;and	dl,[es:bp+4]
 21601 0000360B 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21602                                  
 21603                                  ;	(DX) = sector-in-cluster
 21604                                  
 21605                                  	;mov	cl,[es:bp+5]
 21606 0000360F 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21607 00003613 D3E8                    	SHR	AX,CL
 21608                                  
 21609                                  ;	(DX) = position in cluster
 21610                                  ;	(AX) = number of clusters to skip
 21611                                  
 21612                                  DoRead:
 21613 00003615 8816[7305]              	MOV	[SECCLUSPOS],DL
 21614 00003619 89C1                    	MOV	CX,AX
 21615 0000361B 88D4                    	MOV	AH,DL
 21616                                  
 21617                                  ;	(CX) = number of clusters to skip.
 21618                                  ;	(AH) = remainder
 21619                                  
 21620                                  	; 04/05/2019 - Retro DOS v4.0
 21621                                  	 
 21622                                  	; MSDOS 6.0
 21623                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21624                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21625                                  	;MOV	DX,[DIRSEC]
 21626                                  	;ADD	DL,AH
 21627                                  	;ADC	DH,0
 21628                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21629                                  	; 21/09/2023
 21630 0000361D 31DB                    	xor	bx,bx ; 0
 21631 0000361F 8B16[BE05]              	mov	dx,[DIRSEC]
 21632 00003623 00E2                    	add	dl,ah
 21633 00003625 10DE                    	adc	dh,bl ; 0
 21634 00003627 131E[C005]              	adc	bx,[DIRSEC+2]
 21635 0000362B 891E[0706]              	mov	[HIGH_SECTOR],bx
 21636                                  
 21637 0000362F 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21638 00003633 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21639 00003637 E319                    	JCXZ	FIRSTCLUSTER
 21640                                  SKPCLLP:
 21641 00003639 E8801E                  	call	UNPACK
 21642 0000363C 72BF                    	jc	short get_io_sft_retn
 21643 0000363E 87DF                    	XCHG	BX,DI
 21644 00003640 E8621E                  	call	IsEOF			; test for eof based on fat size
 21645 00003643 7302                    	JAE	short HAVESKIPPED
 21646 00003645 E2F2                    	LOOP	SKPCLLP
 21647                                  HAVESKIPPED:
 21648 00003647 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21649 0000364B 89FA                    	MOV	DX,DI
 21650 0000364D 88E3                    	MOV	BL,AH
 21651 0000364F E81317                  	call	FIGREC
 21652                                  
 21653                                  	;entry	FIRSTCLUSTER
 21654                                  
 21655                                  FIRSTCLUSTER:
 21656                                  	; 22/09/2023
 21657                                  	;;mov	byte [ALLOWED],18h
 21658                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21659                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21660                                  	;call	GETBUFFR
 21661 00003652 E87222                  	call	GETBUFFER ; *	; pre-read
 21662 00003655 72A6                    	jc	short get_io_sft_retn
 21663                                  
 21664                                  	;entry	SET_BUF_AS_DIR
 21665                                  
 21666                                  SET_BUF_AS_DIR:
 21667                                  
 21668                                  ;	Set the type of CURBUF to be a directory sector.
 21669                                  ;	Only flags are modified.
 21670                                  
 21671 00003657 1E                      	PUSH	DS
 21672 00003658 56                      	PUSH	SI
 21673 00003659 C536[E205]              	LDS	SI,[CURBUF]
 21674                                  	;or	byte [si+5],4
 21675 0000365D 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21676 00003661 5E                      	POP	SI
 21677 00003662 1F                      	POP	DS
 21678                                  dirread_retn:
 21679 00003663 C3                      	retn
 21680                                  
 21681                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21682                                  ;----------------------------------------------------------------------------
 21683                                  ;
 21684                                  ; Procedure Name : FATSECRD
 21685                                  ; Inputs:
 21686                                  ;	Same as DREAD
 21687                                  ;	DS:BX = Transfer address
 21688                                  ;	CX = Number of sectors
 21689                                  ;	DX = Absolute record number
 21690                                  ;	ES:BP = Base of drive parameters
 21691                                  ; Function:
 21692                                  ;	Calls BIOS to perform FAT read.
 21693                                  ; Outputs:
 21694                                  ;	Same as DREAD
 21695                                  ;---------------------------------------------------------------------------
 21696                                  
 21697                                  	; 04/05/2019 - Retro DOS v4.0
 21698                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21699                                  
 21700                                  FATSECRD:
 21701                                  ;hkn; SS override
 21702                                  	;mov	byte [ss:ALLOWED],18h
 21703 00003664 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21704 0000366A 89CF                    	MOV	DI,CX
 21705                                  	;mov	cl,[es:bp+8]
 21706 0000366C 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21707                                  	; MSDOS 3.3
 21708                                  	;;mov	al,[es:bp+0Fh]
 21709                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21710                                  	;XOR	AH,AH
 21711                                  	; MSDOS 6.0
 21712                                  	;mov	ax,[es:bp+0Fh]
 21713 00003670 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21714 00003674 30ED                    	XOR	CH,CH	
 21715 00003676 52                      	PUSH	DX
 21716                                  NXTFAT:
 21717                                  	; MSDOS 6.0
 21718                                  ;hkn; SS override
 21719 00003677 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21720 0000367E 51                      	PUSH	CX			;32mb
 21721 0000367F 50                      	PUSH	AX
 21722 00003680 89F9                    	MOV	CX,DI
 21723 00003682 E85B00                  	call	DSKREAD
 21724 00003685 58                      	POP	AX
 21725 00003686 59                      	POP	CX
 21726 00003687 7420                    	JZ	short RET41P		; Carry clear
 21727 00003689 01C2                    	ADD	DX,AX
 21728 0000368B E2EA                    	LOOP	NXTFAT
 21729 0000368D 5A                      	POP	DX
 21730 0000368E 89F9                    	MOV	CX,DI
 21731                                  
 21732                                  ; NOTE FALL THROUGH
 21733                                  
 21734                                  ;Break	<DREAD -- DO A DISK READ>
 21735                                  ;---------------------------------------------------------------------------
 21736                                  ;
 21737                                  ; Procedure Name : DREAD
 21738                                  ;
 21739                                  ; Inputs:
 21740                                  ;	DS:BX = Transfer address
 21741                                  ;	CX = Number of sectors
 21742                                  ;	DX = Absolute record number	      (LOW)
 21743                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21744                                  ;	ES:BP = Base of drive parameters
 21745                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21746                                  ; Function:
 21747                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21748                                  ;	errors, will call HARDERRRW for further action.
 21749                                  ; Outputs:
 21750                                  ;	Carry set if error (currently user FAILED to INT 24)
 21751                                  ; DS,ES:BP preserved. All other registers destroyed.
 21752                                  ;---------------------------------------------------------------------------
 21753                                  
 21754                                  	;entry	DREAD
 21755                                  DREAD:
 21756 00003690 E84D00                  	call	DSKREAD
 21757 00003693 74CE                    	jz	short dirread_retn	; Carry clear
 21758                                  ;hkn; SS override
 21759 00003695 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21760 0000369B E89A00                  	call	HARDERRRW
 21761 0000369E 3C01                    	CMP	AL,1			; Check for retry
 21762 000036A0 74EE                    	JZ	short DREAD
 21763 000036A2 3C03                    	CMP	AL,3			; Check for FAIL
 21764 000036A4 F8                      	CLC
 21765 000036A5 7501                    	JNZ	short NO_CAR		; Ignore
 21766 000036A7 F9                      	STC
 21767                                  NO_CAR:
 21768 000036A8 C3                      	retn
 21769                                  RET41P: 
 21770 000036A9 5A                      	POP	DX
 21771 000036AA C3                      	retn
 21772                                  
 21773                                  ; 24/07/2018 - Retro DOS v3.0
 21774                                  
 21775                                  ;Break	<CHECK_WRITE_LOCK>
 21776                                  ;---------------------------------------------------------------------------
 21777                                  ;
 21778                                  ; Procedure Name : CHECK_WRITE_LOCK
 21779                                  ;
 21780                                  ; Inputs:
 21781                                  ;	output of SETUP
 21782                                  ;	ES:DI -> SFT
 21783                                  ; Function:
 21784                                  ;	check write lock
 21785                                  ; Outputs:
 21786                                  ;	Carry set if error
 21787                                  ;	Carry clear if ok
 21788                                  ;
 21789                                  ;----------------------------------------------------------------------------
 21790                                  
 21791                                  	; 04/05/2019 - Retro DOS v4.0
 21792                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21793                                  
 21794                                  CHECK_WRITE_LOCK:
 21795                                  	; MSDOS 6.0
 21796                                  	;test	byte [es:di+4],8
 21797 000036AB 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21798                                  	;JZ	short write_cont			     ;no
 21799                                  	;;call	SET_ACC_ERR_DS
 21800                                  	;;retn
 21801                                  	;;jnz	SET_ACC_ERR_DS
 21802                                  	; 19/08/2018
 21803                                  	;jz	short write_cont
 21804                                  	;jmp	SET_ACC_ERR_DS
 21805                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21806 000036B0 7403                    	JZ	short write_cont
 21807                                  	;call	SET_ACC_ERR_DS
 21808                                  	;retn
 21809                                  	; 16/12/2022
 21810 000036B2 E9B901                  	jmp	SET_ACC_ERR_DS
 21811                                  
 21812                                  write_cont:				;
 21813 000036B5 51                      	PUSH	CX			;save reg
 21814 000036B6 09C9                    	OR	CX,CX			;
 21815 000036B8 7501                    	JNZ	short Not_Truncate	;
 21816 000036BA 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21817                                  Not_Truncate:				;
 21818 000036BB B080                    	MOV	AL,80H			;check write access
 21819 000036BD E8BA3B                  	call	LOCK_CHECK		;check lock
 21820 000036C0 59                      	POP	CX			;restore reg
 21821 000036C1 7305                    	JNC	short WRITE_OK		;lock ok
 21822 000036C3 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21823 000036C6 73ED                    	JNC	short write_cont	;retry
 21824                                  WRITE_OK:				;
 21825 000036C8 C3                      	retn				;
 21826                                  
 21827                                  ;Break	<CHECK_READ_LOCK>
 21828                                  ;---------------------------------------------------------------------------
 21829                                  ;
 21830                                  ; Procedure Name : CHECK_READ_LOC
 21831                                  ;
 21832                                  ; Inputs:
 21833                                  ;	ES:DI -> SFT
 21834                                  ;	output of SETUP
 21835                                  ; Function:
 21836                                  ;	check read lock
 21837                                  ; Outputs:
 21838                                  ;	Carry set if error
 21839                                  ;	Carry clear if ok
 21840                                  ;----------------------------------------------------------------------------
 21841                                  
 21842                                  CHECK_READ_LOCK:
 21843                                  	; MSDOS 6.0
 21844                                  	;test	byte [es:di+4],8
 21845 000036C9 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21846                                  	;JZ	short do_retry			   	     ; no
 21847                                  	;;call	SET_ACC_ERR
 21848                                  	;;retn
 21849                                  	;;jnz	SET_ACC_ERR
 21850                                  	; 16/12/2022
 21851                                  	; 28/07/2019
 21852 000036CE 7403                    	jz	short do_retry
 21853 000036D0 E99D01                  	jmp	SET_ACC_ERR
 21854                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21855                                  	;JZ	short do_retry
 21856                                  	;call	SET_ACC_ERR
 21857                                  	;retn
 21858                                  do_retry:				;
 21859 000036D3 30C0                    	xor	al,al			;check read access
 21860 000036D5 E8A23B                  	call	LOCK_CHECK		;check lock
 21861 000036D8 7305                    	JNC	short READLOCK_OK 	;lock ok
 21862 000036DA E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21863 000036DD 73F4                    	JNC	short do_retry		;retry
 21864                                  READLOCK_OK:				;
 21865 000036DF C3                      	retn				;
 21866                                  
 21867                                  ;============================================================================
 21868                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21869                                  ;============================================================================
 21870                                  ; 24/07/2018 - Retro DOS v3.0
 21871                                  ; 04/05/2019 - Retro DOS v4.0
 21872                                  
 21873                                  ;	TITLE	DISK2 - Disk utility routines
 21874                                  ;	NAME	Disk2
 21875                                  
 21876                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21877                                  ;
 21878                                  ;	DskRead
 21879                                  ;	DWRITE
 21880                                  ;	DSKWRITE
 21881                                  ;	HarderrRW
 21882                                  ;	SETUP
 21883                                  ;	BREAKDOWN
 21884                                  ;	READ_LOCK_VIOLATION
 21885                                  ;	WRITE_LOCK_VIOLATION
 21886                                  ;	DISKREAD
 21887                                  ;	SET_ACC_ERR_DS
 21888                                  ;	SET_ACC_ERR
 21889                                  ;	SETSFT
 21890                                  ;	SETCLUS
 21891                                  ;	AddRec
 21892                                  ;
 21893                                  ;	Revision history:
 21894                                  ;
 21895                                  ;		AN000 version 4.00 Jan. 1988
 21896                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21897                                  
 21898                                  ; 04/05/2019 - Retro DOS v4.0
 21899                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21900                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21901                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21902                                  
 21903                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21904                                  ;---------------------------------------------------------------------------
 21905                                  ;
 21906                                  ; Procedure Name : DSKREAD
 21907                                  ;
 21908                                  ; Inputs:
 21909                                  ;	DS:BX = Transfer addr
 21910                                  ;	CX = Number of sectors
 21911                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21912                                  ;	DX = Absolute record number	       (LOW)
 21913                                  ;	ES:BP = Base of drive parameters
 21914                                  ; Function:
 21915                                  ;	Call BIOS to perform disk read
 21916                                  ; Outputs:
 21917                                  ;	DI = CX on entry
 21918                                  ;	CX = Number of sectors unsuccessfully transfered
 21919                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21920                                  ;	Zero set if OK (from BIOS) (carry clear)
 21921                                  ;	Zero clear if error (carry clear)
 21922                                  ; SI Destroyed, others preserved
 21923                                  ;---------------------------------------------------------------------------
 21924                                  
 21925                                  DSKREAD:
 21926 000036E0 51                      	PUSH	CX
 21927                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21928 000036E1 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21929                                  	;mov	al,[es:bp+1]
 21930 000036E5 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21931 000036E9 53                      	PUSH	BX
 21932 000036EA 06                      	PUSH	ES
 21933 000036EB E8770F                  	call	SETREAD
 21934 000036EE EB27                    	JMP	short DODSKOP
 21935                                  
 21936                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21937                                  ;--------------------------------------------------------------------------
 21938                                  ;
 21939                                  ; Procedure Name : DWRITE
 21940                                  ;
 21941                                  ; Inputs:
 21942                                  ;	DS:BX = Transfer address
 21943                                  ;	CX = Number of sectors
 21944                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21945                                  ;	DX = Absolute record number	       (LOW)
 21946                                  ;	ES:BP = Base of drive parameters
 21947                                  ;	[ALLOWED] must be set in case HARDERR called
 21948                                  ; Function:
 21949                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21950                                  ;	errors, will call HARDERRRW for further action.
 21951                                  ; Output:
 21952                                  ;	Carry set if error (currently, user FAILed to I 24)
 21953                                  ; BP preserved. All other registers destroyed.
 21954                                  ;----------------------------------------------------------------------------
 21955                                  
 21956                                  	;entry	DWRITE
 21957                                  DWRITE:
 21958 000036F0 E81600                  	CALL	DSKWRITE
 21959 000036F3 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21960                                  
 21961                                  ;hkn; SS override
 21962 000036F5 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21963 000036FB E83A00                  	call	HARDERRRW
 21964 000036FE 3C01                    	CMP	AL,1		; Check for retry
 21965 00003700 74EE                    	JZ	short DWRITE
 21966 00003702 3C03                    	CMP	AL,3		; Check for FAIL
 21967 00003704 F8                      	CLC
 21968 00003705 7501                    	JNZ	short NO_CAR2 	; Ignore
 21969 00003707 F9                      	STC
 21970                                  NO_CAR2:
 21971                                  dw_ret_label:
 21972 00003708 C3                      	retn
 21973                                  
 21974                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21975                                  ;---------------------------------------------------------------------------
 21976                                  ;
 21977                                  ; Procedure Name : DSKWRITE
 21978                                  ;
 21979                                  ; Inputs:
 21980                                  ;	DS:BX = Transfer addr
 21981                                  ;	CX = Number of sectors
 21982                                  ;	DX = Absolute record number	       (LOW)
 21983                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21984                                  ;	ES:BP = Base of drive parameters
 21985                                  ; Function:
 21986                                  ;	Call BIOS to perform disk read
 21987                                  ; Outputs:
 21988                                  ;	DI = CX on entry
 21989                                  ;	CX = Number of sectors unsuccessfully transfered
 21990                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21991                                  ;	Zero set if OK (from BIOS) (carry clear)
 21992                                  ;	Zero clear if error (carry clear)
 21993                                  ; SI Destroyed, others preserved
 21994                                  ;
 21995                                  ;----------------------------------------------------------------------------
 21996                                  
 21997                                  	;entry	DSKWRITE
 21998                                  DSKWRITE:
 21999 00003709 51                      	PUSH	CX
 22000                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22001 0000370A 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22002                                  	;mov	al,[es:bp+1]
 22003 0000370E 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22004 00003712 53                      	PUSH	BX
 22005 00003713 06                      	PUSH	ES
 22006 00003714 E8810F                  	call	SETWRITE
 22007                                  DODSKOP:
 22008 00003717 8CD9                    	MOV	CX,DS		; Save DS
 22009 00003719 1F                      	POP	DS		; DS:BP points to DPB
 22010 0000371A 1E                      	PUSH	DS
 22011                                  
 22012                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22013 0000371B 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22014 0000371F E8CD0E                  	call	DEVIOCALL2
 22015                                  
 22016 00003722 8ED9                    	MOV	DS,CX		; Restore DS
 22017 00003724 07                      	POP	ES		; Restore ES
 22018 00003725 5B                      	POP	BX
 22019                                  
 22020                                  ;hkn; SS override
 22021 00003726 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22022 0000372B 5F                      	POP	DI
 22023 0000372C 29F9                    	SUB	CX,DI
 22024 0000372E F7D9                    	NEG	CX		; Number of sectors not transferred
 22025                                  
 22026                                  ;hkn; SS override
 22027 00003730 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22028                                  	;test	ax,8000h
 22029                                  	; 17/12/2022
 22030                                  	;test	ah,80h
 22031 00003734 F6C480                  	test	ah,(STERR>>8)
 22032                                  	;test	AX,STERR
 22033 00003737 C3                      	retn
 22034                                  
 22035                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22036                                  ;---------------------------------------------------------------------------
 22037                                  ;
 22038                                  ; Procedure Name : HardErrRW
 22039                                  ;
 22040                                  ; Inputs:
 22041                                  ;	AX is error code from read or write
 22042                                  ;	Other registers set as per HARDERR
 22043                                  ; Function:
 22044                                  ;	Checks the error code for special extended
 22045                                  ;	errors and maps them if needed. Then invokes
 22046                                  ;	Harderr
 22047                                  ; Outputs:
 22048                                  ;	Of HARDERR
 22049                                  ; AX may be modified prior to call to HARDERR.
 22050                                  ; No other registers altered.
 22051                                  ;
 22052                                  ;---------------------------------------------------------------------------
 22053                                  
 22054                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22055                                  HARDERRRW:
 22056                                  	;cmp	al,0Fh
 22057 00003738 3C0F                    	CMP	AL,error_I24_wrong_disk
 22058 0000373A 7512                    	JNZ	short DO_ERR				; Nothing to do
 22059                                  
 22060                                  	; MSDOS 3.3
 22061                                  	;push	ds
 22062                                  	;push	si
 22063                                  	;lds	si,[ss:CALLVIDRW]
 22064                                  	;mov	[ss:EXTERRPT+2], ds
 22065                                  	;mov	[ss:EXTERRPT], si
 22066                                  	;pop	si
 22067                                  	;pop	ds
 22068                                  
 22069                                  	; MSDOS 6.0
 22070 0000373C 50                      	push	ax
 22071 0000373D 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22072 00003741 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22073 00003745 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22074 00003749 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22075 0000374D 58                      	pop	ax
 22076                                  DO_ERR:
 22077                                  	;;call	HARDERR
 22078                                  	;;retn
 22079                                  	; 16/12/2022
 22080                                  	; 10/06/2019
 22081 0000374E E9311B                  	jmp	HARDERR	
 22082                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22083                                  	;call	HARDERR
 22084                                  	;retn
 22085                                  
 22086                                  ; 24/07/2018 - Retro DOS v3.0
 22087                                  
 22088                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22089                                  ;----------------------------------------------------------------------------
 22090                                  ;
 22091                                  ; Procedure Name : SETUP
 22092                                  ;
 22093                                  ; Inputs:
 22094                                  ;	ES:DI point to SFT (value also in THISSFT)
 22095                                  ;	DMAAdd contains transfer address
 22096                                  ;	CX = Byte count
 22097                                  ;	DS = DOSDATA
 22098                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22099                                  ;		2nd of caller of caller.
 22100                                  ; Outputs:
 22101                                  ;	    CX = byte count
 22102                                  ;	    [THISDPB] = Base of drive parameters if file
 22103                                  ;		      = Pointer to device header if device or NET
 22104                                  ;	    ES:DI Points to SFT
 22105                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22106                                  ;	    [TRANS] = 0 (No transfers yet)
 22107                                  ;	    BytPos = Byte position in file
 22108                                  ;
 22109                                  ;	The following fields are relevant to local files (not devices) only:
 22110                                  ;
 22111                                  ;	    SecPos = Position of first sector (local files only)
 22112                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22113                                  ;	    [CLUSNUM] = First cluster (local files only)
 22114                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22115                                  ;	    [THISDRV] = Physical unit number (local files only)
 22116                                  ;
 22117                                  ;      RETURNS ONE LEVEL UP WITH:
 22118                                  ;	   CX = 0
 22119                                  ;	   CARRY = Clear
 22120                                  ;	IF AN ERROR IS DETECTED
 22121                                  ; All other registers destroyed
 22122                                  ;----------------------------------------------------------------------------
 22123                                  
 22124                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22125                                  
 22126                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22127                                  
 22128                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22129                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22130                                  
 22131                                  SETUP:
 22132                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22133                                  
 22134                                  	;lds 	si,[es:di+7]
 22135 00003751 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22136                                  
 22137                                  ;hkn; SS override
 22138 00003755 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22139                                  
 22140                                  ;hkn; SS is DOSDATA
 22141 0000375A 16                      	push	ss
 22142 0000375B 1F                      	pop	ds
 22143                                  
 22144 0000375C 8936[8A05]              	MOV	[THISDPB],SI
 22145                                  
 22146 00003760 8B1E[2C03]              	MOV	BX,[DMAADD]
 22147 00003764 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22148 00003768 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22149                                  	;mov	ax,[es:di+15h]
 22150 0000376D 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22151                                  	;mov	dx,[es:di+17h]
 22152 00003771 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22153 00003775 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22154 00003779 A3[CE05]                	MOV	[BYTPOS],AX
 22155                                  	;test	word [es:di+5],8080h
 22156 0000377C 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22157 00003782 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22158 00003784 06                      	PUSH	ES
 22159 00003785 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22160                                  
 22161                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22162                                  	;;mov	bl,[es:bp+0]
 22163                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22164                                  	; 05/12/2022
 22165 00003789 268A5E00                	mov	bl,[es:bp]
 22166                                  	
 22167 0000378D 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22168                                  	;mov	bx,[es:bp+2]
 22169 00003791 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22170                                  
 22171                                  	;; MSDOS 3.3
 22172                                  	;cmp	dx,bx
 22173                                  	;jnb	short EOFERR
 22174                                  	;div	bx
 22175                                  	;mov	[SECPOS],ax
 22176                                  	;mov	[BYTSECPOS],dx
 22177                                  	;mov	dx,ax
 22178                                  	;;and	al,[es:bp+4]
 22179                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22180                                  	;mov	[SECCLUSPOS],al
 22181                                  	;mov	ax,cx
 22182                                  	;;mov	cl,[es:bp+5]
 22183                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22184                                  	;shr	dx,cl
 22185                                  	;mov	[CLUSNUM],dx
 22186                                  	;pop	es
 22187                                  	;mov	cx,ax
 22188                                  
 22189                                  	; 04/05/2019 - Retro DOS v4.0
 22190                                  
 22191                                  	; MSDOS 6.0
 22192                                  ;M039: Optimized this section.
 22193 00003795 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22194 00003796 E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22195 00003799 8916[CC05]              	MOV	[BYTSECPOS],DX
 22196 0000379D A3[C405]                	MOV	[SECPOS],AX
 22197 000037A0 890E[C605]              	MOV	[SECPOS+2],CX
 22198 000037A4 89CA                    	MOV	DX,CX
 22199                                  
 22200 000037A6 89C3                    	MOV	BX,AX
 22201                                  	;and	bl,[es:bp+4]
 22202 000037A8 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22203 000037AC 881E[7305]              	MOV	[SECCLUSPOS],BL
 22204                                  
 22205 000037B0 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22206 000037B3 59                      	POP	CX			;CX = byte count.
 22207 000037B4 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22208                                  	;cmp	ax,[es:bp+0Dh]
 22209 000037B6 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22210 000037BA 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22211                                  
 22212 000037BC A3[BC05]                	MOV	[CLUSNUM],AX
 22213 000037BF 07                      	POP	ES			; ES:DI point to SFT
 22214                                  ;M039
 22215                                  
 22216                                  NOSETSTUFF:
 22217 000037C0 89C8                    	MOV	AX,CX		; AX = Byte count.
 22218 000037C2 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22219 000037C6 730C                    	JNC	short setup_OK	; Must be less than 64
 22220 000037C8 A1[2C03]                	MOV	AX,[DMAADD]
 22221 000037CB F7D8                    	NEG	AX		; Amount of room left in segment (know
 22222                                  				;    less than 64K since max value of CX
 22223                                  				;    is FFFF).
 22224 000037CD 7501                    	JNZ	short NoDec
 22225 000037CF 48                      	DEC	AX
 22226                                  NoDec:
 22227 000037D0 89C1                    	MOV	CX,AX		; Can do this much
 22228 000037D2 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22229                                  setup_OK:
 22230 000037D4 C3                      	retn
 22231                                  
 22232                                  EOFERR:
 22233 000037D5 07                      	POP	ES		; ES:DI point to SFT
 22234 000037D6 31C9                    	XOR	CX,CX		; No bytes read
 22235                                  ;;;;;;;;;;; 7/18/86
 22236                                  	; MSDOS 3.3
 22237                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22238                                  ;;;;;;;;;;;
 22239                                  NOROOM:
 22240 000037D8 5B                      	POP	BX		; Kill return address
 22241 000037D9 F8                      	CLC
 22242 000037DA C3                      	retn			; RETURN TO CALLER OF CALLER
 22243                                  
 22244                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22245                                  ;---------------------------------------------------------------------------
 22246                                  ;
 22247                                  ; Procedure Name : BREAKDOWN
 22248                                  ;
 22249                                  ; Inputs:
 22250                                  ;	CX = Length of disk transfer in bytes
 22251                                  ;	ES:BP = Base of drive parameters
 22252                                  ;	[BYTSECPOS] = Byte position within first sector
 22253                                  ;	DS = DOSDATA
 22254                                  ; Outputs:
 22255                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22256                                  ;	[SECCNT] = No. of whole sectors to transfer
 22257                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22258                                  ; AX, BX, DX destroyed. No other registers affected.
 22259                                  ;---------------------------------------------------------------------------
 22260                                  
 22261                                  BREAKDOWN:
 22262 000037DB A1[CC05]                	MOV	AX,[BYTSECPOS]
 22263 000037DE 89CB                    	MOV	BX,CX
 22264 000037E0 09C0                    	OR	AX,AX
 22265 000037E2 740E                    	JZ	short SAVFIR	; Partial first sector?
 22266                                  	;sub	ax,[es:bp+2]
 22267 000037E4 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22268 000037E8 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22269 000037EA 29C3                    	SUB	BX,AX		; Subtract from total length
 22270 000037EC 7304                    	JAE	short SAVFIR
 22271 000037EE 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22272 000037F0 31DB                    	XOR	BX,BX		; And no bytes are left
 22273                                  SAVFIR:
 22274 000037F2 A3[D205]                	MOV	[BYTCNT1],AX
 22275 000037F5 89D8                    	MOV	AX,BX
 22276 000037F7 31D2                    	XOR	DX,DX
 22277                                  	;div	word [ES:BP+2]
 22278 000037F9 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22279 000037FD A3[D605]                	MOV	[SECCNT],AX
 22280 00003800 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22281                                  	; MSDOS 3.3
 22282                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22283                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22284                                  	;CMP	AX,1
 22285                                  	;retnz
 22286                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22287                                  	;MOV	[BYTCNT2],AX
 22288                                  	;MOV	[SECCNT],DX	; DX = 0
 22289                                  _RET45:
 22290 00003804 C3                      	retn
 22291                                  
 22292                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22293                                  
 22294                                  ;----------------------------------------------------------------------------
 22295                                  ;
 22296                                  ; Procedure Name : READ_LOCK_VIOLATION
 22297                                  ;
 22298                                  ; ES:DI points to SFT. This entry used by NET_READ
 22299                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22300                                  ; Else do retrys.
 22301                                  ; ES:DI,DS,CX preserved
 22302                                  ;
 22303                                  ;----------------------------------------------------------------------------
 22304                                  
 22305                                  READ_LOCK_VIOLATION:
 22306 00003805 C606[7505]00            	MOV	byte [READOP],0
 22307                                  ERR_ON_CHECK:
 22308                                  	;;test	word [es:di+2],8000h
 22309                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22310                                  	;JNZ	short HARD_ERR
 22311                                  
 22312                                  	; 04/05/2019
 22313                                  	;test	byte [es:di+3],80h
 22314 0000380A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22315 0000380F 7508                    	JNZ	short HARD_ERR
 22316                                  
 22317                                  	;PUSH	CX
 22318                                  	;;mov	cl,[es:di+2]
 22319                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22320                                  	;;and	cl,0F0h
 22321                                  	;AND	CL,SHARING_MASK
 22322                                  	;;cmp	cl,0
 22323                                  	;CMP	CL,SHARING_COMPAT
 22324                                  	;POP	CX
 22325                                  	;JNE	short NO_HARD_ERR
 22326                                  	; 21/09/2023
 22327 00003811 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22328 00003815 24F0                    	and	al,SHARING_MASK
 22329                                  	;cmp	al,SHARING_COMPAT
 22330                                  	;jne	short NO_HARD_ERR
 22331 00003817 7505                    	jnz	short NO_HARD_ERR
 22332                                  HARD_ERR:
 22333 00003819 E8743A                  	call	LOCK_VIOLATION
 22334 0000381C 73E6                    	jnc	short _RET45		; User wants Retrys
 22335                                  NO_HARD_ERR:
 22336 0000381E 31C9                    	XOR	CX,CX			;No bytes transferred
 22337                                  	;mov	ax,21h
 22338 00003820 B82100                  	MOV	AX,error_lock_violation
 22339 00003823 F9                      	STC
 22340 00003824 C3                      	retn
 22341                                  
 22342                                  ;----------------------------------------------------------------------------
 22343                                  ;
 22344                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22345                                  ;
 22346                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22347                                  ; This entry used by NET_WRITE
 22348                                  ;
 22349                                  ;----------------------------------------------------------------------------
 22350                                  
 22351                                  WRITE_LOCK_VIOLATION:
 22352 00003825 C606[7505]01            	MOV	byte [READOP],1
 22353 0000382A EBDE                    	JMP	short ERR_ON_CHECK
 22354                                  
 22355                                  ; 04/05/2019 - Retro DOS v4.0
 22356                                  
 22357                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22358                                  
 22359                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22360                                  ;----------------------------------------------------------------------------
 22361                                  ;
 22362                                  ; Procedure Name : DISKREAD
 22363                                  ;
 22364                                  ; Inputs:
 22365                                  ;	Outputs of SETUP
 22366                                  ; Function:
 22367                                  ;	Perform disk read
 22368                                  ; Outputs:
 22369                                  ;    Carry clear
 22370                                  ;	CX = No. of bytes read
 22371                                  ;	ES:DI point to SFT
 22372                                  ;	SFT offset and cluster pointers updated
 22373                                  ;    Carry set
 22374                                  ;	CX = 0
 22375                                  ;	ES:DI point to SFT
 22376                                  ;	AX has error code
 22377                                  ;----------------------------------------------------------------------------
 22378                                  
 22379                                  ;hkn; called from disk.asm. DS already set up.
 22380                                  
 22381                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22382                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22383                                  
 22384                                  DISKREAD:
 22385                                  	;mov	ax,[es:di+11h]
 22386 0000382C 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22387                                  	;mov	bx,[es:di+13h]
 22388 00003830 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22389 00003834 2B06[CE05]              	SUB	AX,[BYTPOS]
 22390 00003838 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22391 0000383C 7226                    	JB	short RDERR		;Read starts past EOF
 22392 0000383E 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22393 00003840 09C0                    	OR	AX,AX
 22394 00003842 7420                    	JZ	short RDERR		;Read starts at EOF
 22395 00003844 39C8                    	CMP	AX,CX
 22396 00003846 7302                    	JAE	short ENUF		;I/O fits
 22397 00003848 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22398                                  ENUF:
 22399                                  	; MSDOS 3.3
 22400                                  	;test	byte [es:di+4],8
 22401                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22402                                  	;jnz	short SET_ACC_ERR
 22403                                  	;call	LOCK_CHECK
 22404                                  	;jnb	short _READ_OK
 22405                                  	;call	READ_LOCK_VIOLATION
 22406                                  	;jnb	short ENUF
 22407                                  	;retn
 22408                                  
 22409                                  	; MSDOS 6.0
 22410 0000384A E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22411 0000384D 7301                    	JNC	short _READ_OK 		; There are no locks
 22412 0000384F C3                      	retn
 22413                                  
 22414                                  _READ_OK:
 22415 00003850 C42E[8A05]              	LES	BP,[THISDPB]
 22416 00003854 E884FF                  	CALL	BREAKDOWN
 22417 00003857 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 22418                                  
 22419 0000385B E86D13                  	call	FNDCLUS
 22420                                       	; MSDOS 6.0			;M022 conditional removed here
 22421 0000385E 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22422                                  					; migrated from 330a - HKN
 22423 00003860 09C9                    	OR	CX,CX
 22424 00003862 7413                    	JZ	short SKIPERR
 22425                                  RDERR:
 22426 00003864 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22427 00003866 E92102                  	jmp	WRTERR22
 22428                                  
 22429                                  ;RDLASTJ: 
 22430                                  	;JMP	RDLAST                  ;M039
 22431                                  
 22432                                  SETSFTJ2: 
 22433 00003869 E99600                  	JMP	SETSFT
 22434                                  
 22435                                  CANOT_READ:
 22436                                  	; MSDOS 3.3
 22437                                  	;POP	CX		;M039.
 22438                                  	; MSDOS 3.3 & MSDOS 6.0
 22439 0000386C 59                      	POP	CX              ;Clean stack.
 22440 0000386D 5B                      	POP	BX
 22441                                  
 22442                                  	;entry	SET_ACC_ERR_DS
 22443                                  SET_ACC_ERR_DS:
 22444                                  
 22445                                  ;hkn; SS is DOSDATA
 22446                                  	;Context DS
 22447 0000386E 16                      	push	ss
 22448 0000386F 1F                      	pop	ds
 22449                                  
 22450                                  	;entry	SET_ACC_ERR
 22451                                  SET_ACC_ERR:
 22452 00003870 31C9                    	XOR	CX,CX
 22453                                  	;mov	ax,5
 22454 00003872 B80500                  	MOV	AX,error_access_denied
 22455 00003875 F9                      	STC
 22456 00003876 C3                      	retn
 22457                                  
 22458                                  SKIPERR:
 22459 00003877 8916[BA05]              	MOV	[LASTPOS],DX
 22460 0000387B 891E[BC05]              	MOV	[CLUSNUM],BX
 22461 0000387F 833E[D205]00            	CMP	word [BYTCNT1],0
 22462 00003884 7405                    	JZ	short RDMID
 22463                                  
 22464 00003886 E8B813                  	call	BUFRD
 22465 00003889 72E3                    	JC	short SET_ACC_ERR_DS
 22466                                  
 22467                                  RDMID:
 22468 0000388B 833E[D605]00            	CMP	word [SECCNT],0
 22469                                  	;JZ	RDLAST ; 10/08/2018
 22470 00003890 7453                    	jz	short RDLAST
 22471                                  
 22472 00003892 E84114                  	call	NEXTSEC
 22473 00003895 72D2                    	JC	short SETSFTJ2
 22474                                  
 22475 00003897 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22476                                  ONSEC:
 22477 0000389C 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22478 000038A0 8B0E[D605]              	MOV	CX,[SECCNT]
 22479 000038A4 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22480                                  RDLP:
 22481 000038A8 E85C14                  	call	OPTIMIZE
 22482 000038AB 72C1                    	JC	short SET_ACC_ERR_DS
 22483                                  
 22484 000038AD 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22485 000038AE 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22486 000038AF 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22487                                  	;mov	byte [ALLOWED],38h
 22488 000038B0 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22489 000038B5 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22490                                  
 22491 000038B9 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22492 000038BA 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22493                                  
 22494                                  	; 04/05/2019 - Retro DOS v4.0
 22495                                  
 22496                                  	; MSDOS 6.0
 22497 000038BB E8FF21                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22498                                  
 22499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22500 000038BE E8CFFD                  	call	DREAD
 22501                                  
 22502                                  	; MSDOS 3.3 
 22503                                  	;pop	bx
 22504                                  	;pop	dx
 22505                                  	;jc	short CANOT_READ
 22506                                  	;add	bx,dx	; (bx = Extent end)
 22507                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22508                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22509                                  	;call	SETVISIT
 22510                                  	; ->***
 22511                                  ;M039
 22512                                  	; MSDOS 6.0 
 22513 000038C1 59                      	pop	cx
 22514 000038C2 5A                      	pop	dx
 22515 000038C3 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22516 000038C8 72A2                    	jc	short CANOT_READ
 22517                                  
 22518 000038CA 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22519                                  
 22520                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22521                                  ;            sectors, also termed an "Extent".)
 22522                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22523                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22524                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22525                                  ;
 22526                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22527                                  ;	buffers must be "read" into the transfer memory block, so that the
 22528                                  ;       transfer memory reflects the most recent data.
 22529                                  
 22530 000038CF E85E00                  	call	DskRdBufScan
 22531                                  
 22532                                  	;Context DS
 22533 000038D2 16                      	push	ss
 22534 000038D3 1F                      	pop	ds
 22535                                          
 22536 000038D4 59                      	pop	cx
 22537 000038D5 5B                              pop	bx
 22538                                  
 22539                                  ;       CX = # of sector remaining.
 22540                                  ;       BX = Next physical cluster.
 22541                                  
 22542                                  ;M039
 22543                                  
 22544                                  ;;;;;;;;
 22545                                  ;	; 25/07/2018 - Retro DOS v3.0
 22546                                  ;	; ***->
 22547                                  ;	; MSDOS 3.3
 22548                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22549                                  ;bufq:
 22550                                  ;;	DX = Extent start.
 22551                                  ;;	BX = Extent end.
 22552                                  ;;	 AL = Drive #.
 22553                                  ;;     DS:DI-> 1st buffer in queue.
 22554                                  ;
 22555                                  ;	;or	byte [di+5],20h
 22556                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22557                                  ;	;cmp	al,[di+4]	
 22558                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22559                                  ;	jnz	short bufq3
 22560                                  ;	;cmp	[di+6],dx
 22561                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22562                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22563                                  ;	;cmp	[di+6],bx
 22564                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22565                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22566                                  ;	
 22567                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22568                                  ;
 22569                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22570                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22571                                  ;;      as MRU (Most Recently Used).
 22572                                  ;
 22573                                  ;	;test	byte [di+5],40h
 22574                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22575                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22576                                  ;	pop	ax ; transfer address
 22577                                  ;	push	ax
 22578                                  ;	push	di
 22579                                  ;	push	dx
 22580                                  ;	;sub	dx,[di+6]
 22581                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22582                                  ;	neg	dx
 22583                                  ;
 22584                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22585                                  ;;           block.
 22586                                  ;
 22587                                  ;	mov	si,di
 22588                                  ;	mov	di,ax
 22589                                  ;	mov	ax,dx
 22590                                  ;	;mov	cx,[es:bp+6]	
 22591                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22592                                  ;	mul	cx
 22593                                  ;	add	di,ax
 22594                                  ;
 22595                                  ;	lea	si,[si+16]
 22596                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22597                                  ;	shr	cx,1
 22598                                  ;	push	es
 22599                                  ;	mov	es,[SS:DMAADD+2]
 22600                                  ;
 22601                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22602                                  ;;      DS:SI-> Buffer sector data.
 22603                                  ;;      ES:DI-> Destination within Transfer memory block.
 22604                                  ;
 22605                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22606                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22607                                  ;	;rep	movsb                   ;Copy last byte.
 22608                                  ;	jnc	short bufq1
 22609                                  ;	movsb
 22610                                  ;bufq1:
 22611                                  ;	pop	es
 22612                                  ;	pop	dx
 22613                                  ;	pop	di
 22614                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22615                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22616                                  ;bufq2:
 22617                                  ;	call	SCANPLACE
 22618                                  ;bufq3:
 22619                                  ;	call	SKIPVISIT
 22620                                  ;	jnz	short bufq
 22621                                  ;	
 22622                                  ;	push	ss
 22623                                  ;	pop	ds
 22624                                  ;	pop	cx
 22625                                  ;	pop	cx
 22626                                  ;	pop	bx	
 22627                                  ;bufq4:
 22628                                  ;;;;;;;
 22629 000038D6 E30D                    	JCXZ	RDLAST
 22630                                  
 22631 000038D8 E8CA1B                  	call	IsEOF			; test for eof on fat size
 22632 000038DB 7325                    	JAE	short SETSFT
 22633                                  
 22634 000038DD B200                    	MOV	DL,0
 22635 000038DF FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22636 000038E3 EBC3                    	JMP	short RDLP ; 19/05/2019
 22637                                  
 22638                                  RDLAST:
 22639 000038E5 A1[D405]                	MOV	AX,[BYTCNT2]
 22640 000038E8 09C0                    	OR	AX,AX
 22641 000038EA 7416                    	JZ	short SETSFT
 22642 000038EC A3[D205]                	MOV	[BYTCNT1],AX
 22643                                  
 22644 000038EF E8E413                  	call	NEXTSEC
 22645 000038F2 720E                    	JC	short SETSFT
 22646                                  
 22647 000038F4 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22648 000038FA E84413                  	call	BUFRD
 22649                                  	; 10/08/2018
 22650                                  
 22651 000038FD 7303                    	JNC	short SETSFT
 22652 000038FF E96CFF                  	JMP	SET_ACC_ERR_DS
 22653                                  
 22654                                  ;------------------------------------------------------------------------------
 22655                                  ;
 22656                                  ; Procedure Name : SETSFT
 22657                                  ; Inputs:
 22658                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22659                                  ;		and set cluster fields
 22660                                  ; Function:
 22661                                  ;	Update [THISSFT] based on the transfer
 22662                                  ; Outputs:
 22663                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22664                                  ;	ES:DI points to [THISSFT]
 22665                                  ;	CX No. of bytes transferred
 22666                                  ;	Carry clear
 22667                                  ;
 22668                                  ;----------------------------------------------------------------------------
 22669                                  
 22670                                  	;entry	SETSFT
 22671                                  
 22672                                  ; 26/07/2018 - Retro DOS v3.0
 22673                                  SETSFT:
 22674 00003902 C43E[9E05]              	LES	DI,[THISSFT]
 22675                                  
 22676                                  ; Same as SETSFT except ES:DI already points to SFT
 22677                                  	;entry	SETCLUS
 22678                                  SETCLUS:	
 22679 00003906 8B0E[B805]              	MOV	CX,[NEXTADD]
 22680 0000390A 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22681                                  	;;test	word [es:di+5],80h
 22682                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22683                                  	;JNZ	short ADDREC		; don't set clusters if device
 22684                                  
 22685                                  	; 04/05/2019 - Retro DOS v4.0
 22686                                  	;test	byte [es:di+5],80h
 22687 0000390E 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22688 00003913 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22689                                  
 22690 00003915 A1[BC05]                	MOV	AX,[CLUSNUM]
 22691                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22692                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22693 00003918 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22694 0000391C A1[BA05]                	MOV	AX,[LASTPOS]
 22695                                  	;mov	[es:di+19h],ax
 22696 0000391F 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22697                                  
 22698                                  ;----------------------------------------------------------------------------
 22699                                  ;
 22700                                  ; Procedure : AddRec
 22701                                  ; Inputs:
 22702                                  ;	ES:DI points to SFT
 22703                                  ;	CX is No. Bytes transferred
 22704                                  ; Function:
 22705                                  ;	Update the SFT offset based on the transfer
 22706                                  ; Outputs:
 22707                                  ;	sf_position updated to point to first byte after transfer
 22708                                  ;	ES:DI points to SFT
 22709                                  ;	CX No. of bytes transferred
 22710                                  ;	Carry clear
 22711                                  ;----------------------------------------------------------------------------
 22712                                  
 22713                                  	;entry	AddRec
 22714                                  ADDREC:
 22715 00003923 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22716                                  	;add	[es:di+15h],cx
 22717 00003925 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22718                                  	;adc	word [es:di+17h], 0
 22719 00003929 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22720                                  RET28:	
 22721 0000392E F8                      	CLC
 22722 0000392F C3                      	retn
 22723                                  
 22724                                  ; 25/07/2018
 22725                                  ; MSDOS 6.0
 22726                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22727                                  ;----------------------------------------------------------------------------
 22728                                  ;
 22729                                  ; Procedure Name : DskRdBufScan
 22730                                  ;
 22731                                  ; Inputs:
 22732                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22733                                  ;            sectors, also termed an "Extent".)
 22734                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22735                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22736                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22737                                  ;
 22738                                  ; Function:
 22739                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22740                                  ;	"read" into the transfer memory block, so that the transfer memory
 22741                                  ;	reflects the most recent data.
 22742                                  ;
 22743                                  ; Outputs:
 22744                                  ;       Transfer memory updated as required.
 22745                                  ;
 22746                                  ; Uses:
 22747                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22748                                  ;       SS override for all global variables.
 22749                                  ;
 22750                                  ; Notes:
 22751                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22752                                  ;	than the FIRST.
 22753                                  ;----------------------------------------------------------------------------
 22754                                  ;M039: Created
 22755                                  
 22756                                  ; 04/05/2019 - Retro DOS v4.0
 22757                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22758                                  
 22759                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22760                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22761                                  
 22762                                  ;procedure DskRdBufScan,NEAR
 22763                                  ;
 22764                                  ;ASSUME  DS:NOTHING
 22765                                  
 22766                                  DskRdBufScan:
 22767 00003930 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22768 00003936 743C                    	je	short bufx		     ; -no, skip all work.
 22769                                  
 22770 00003938 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22771 0000393D 89DE                    	mov     si,bx
 22772 0000393F 01D1                    	add     cx,dx
 22773 00003941 83D600                  	adc     si,0
 22774                                  
 22775 00003944 E80E1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22776                                  	;mov	ax,[di+2]
 22777 00003947 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22778 0000394A 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22779                                  		
 22780                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22781                                  	;;mov	al,[es:bp+0]
 22782                                  	;mov	al,[es:bp+DPB.DRIVE]
 22783                                  	; 15/12/2022
 22784 0000394E 268A4600                	mov	al,[es:bp]
 22785                                  
 22786                                  ;       BX:DX = Extent start.
 22787                                  ;       SI:CX = Extent end + 1.
 22788                                  ;          AL = Drive #.
 22789                                  ;       DS:DI-> 1st buffer in queue.
 22790                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22791                                  
 22792                                  bufq:	
 22793                                  	;cmp	al,[di+4]
 22794 00003952 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22795 00003955 7514                    	jne	short bufq1        	;  -no, jump.
 22796                                  
 22797                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22798                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22799                                  
 22800                                  	;cmp	bx,[di+8]
 22801 00003957 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22802 0000395A 7503                    	jne	short bufq01
 22803                                  	;cmp	dx,[di+6]
 22804 0000395C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22805                                  bufq01:
 22806 0000395F 770A                    	ja	short bufq1
 22807                                  
 22808                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22809                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22810                                  
 22811                                  	;cmp	si,[di+8]
 22812 00003961 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22813 00003964 7503                    	jne	short bufq02
 22814                                  	;cmp	cx,[di+6]
 22815 00003966 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22816                                  bufq02:
 22817 00003969 770A                    	ja	short bufq2
 22818                                  bufq1:	
 22819 0000396B 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22820 00003970 8B3D                    	mov	di,[di]
 22821                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22822 00003972 75DE                    	jne	short bufq		; -no, do next buffer
 22823                                  bufx:
 22824 00003974 C3                      	retn				;Exit.
 22825                                  
 22826                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22827                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22828                                  ;       as MRU (Most Recently Used).
 22829                                  
 22830                                  bufq2:	
 22831 00003975 50                      	push	ax
 22832                                  	;test	byte [di+5],40h
 22833 00003976 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22834 0000397A 742D                    	jz	short bufq3                    ; -no, jump.
 22835                                  
 22836                                  ;       SaveReg <cx,dx,si,di,es>
 22837 0000397C 51                      	push	cx
 22838 0000397D 52                      	push	dx
 22839 0000397E 56                      	push	si
 22840 0000397F 57                      	push	di
 22841 00003980 06                      	push	es
 22842                                  
 22843 00003981 89D0                    	mov     ax,dx
 22844                                  	;sub	ax,[di+6]
 22845 00003983 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22846 00003986 F7D8                    	neg	ax
 22847                                  
 22848                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22849                                  ;            block. (Note: the upper word of the sector # may be ignored
 22850                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22851                                  ;            is imposed by the input parameters of the disk read operation.)
 22852                                  
 22853                                  	;lea	si,[di+20]
 22854 00003988 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22855                                  	;mov	cx,[es:bp+2]
 22856 0000398B 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22857 0000398F F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22858 00003991 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22859 00003996 01C7                    	add	di,ax
 22860 00003998 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22861 0000399D D1E9                    	shr	cx,1
 22862                                  
 22863                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22864                                  ;       DS:SI-> Buffer sector data.
 22865                                  ;       ES:DI-> Destination within Transfer memory block.
 22866                                  
 22867 0000399F F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22868                                  	;; 04/05/2019
 22869                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22870                                  	;;rep	movsb                   ;Copy last byte.
 22871                                  	;jnc	short bufq03	
 22872                                  	;movsb
 22873                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22874                                  	;adc	cx,0
 22875                                  	;rep	movsb
 22876                                  	; 22/09/2023
 22877 000039A1 7301                    	jnc	short bufq03
 22878 000039A3 A4                      	movsb
 22879                                  bufq03:
 22880                                  	;RestoreReg <es,di,si,dx,cx>
 22881 000039A4 07                      	pop	es
 22882 000039A5 5F                      	pop	di
 22883 000039A6 5E                      	pop	si
 22884 000039A7 5A                      	pop	dx
 22885 000039A8 59                      	pop	cx
 22886                                  
 22887                                  ;       DS:DI -> current buffer.
 22888                                  bufq3:	
 22889 000039A9 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22890                                          ;invoke SCANPLACE
 22891 000039AB E8B91E                  	call	SCANPLACE
 22892 000039AE 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22893 000039B3 58                      	pop	ax
 22894                                  	;jne	short bufq		; -no, jump.
 22895                                  	;;jmp	short bufx		; -yes, exit.
 22896                                  	;; 12/06/2019
 22897                                  	;retn
 22898                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22899 000039B4 759C                    	jne	short bufq
 22900 000039B6 EBBC                    	jmp	short bufx
 22901                                  
 22902                                  ;EndProc DskRdBufScan
 22903                                  
 22904                                  ;============================================================================
 22905                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22906                                  ;============================================================================
 22907                                  ; 04/05/2019 - Retro DOS v4.0
 22908                                  ; 24/07/2018 - Retro DOS v3.0
 22909                                  
 22910                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22911                                  ;----------------------------------------------------------------------------
 22912                                  ;
 22913                                  ; Procedure Name : DISKWRITE
 22914                                  ;
 22915                                  ; Inputs:
 22916                                  ;       Outputs of SETUP
 22917                                  ; Function:
 22918                                  ;       Perform disk write
 22919                                  ; Outputs:
 22920                                  ;    Carry clear
 22921                                  ;       CX = No. of bytes written
 22922                                  ;       ES:DI point to SFT
 22923                                  ;       SFT offset and cluster pointers updated
 22924                                  ;    Carry set
 22925                                  ;       CX = 0
 22926                                  ;       ES:DI point to SFT
 22927                                  ;       AX has error code
 22928                                  ;----------------------------------------------------------------------------
 22929                                  
 22930                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22931                                  
 22932                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22933                                  
 22934                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22935                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22936                                  
 22937                                  DISKWRITE:
 22938                                  	; MSDOS 3.3
 22939                                  	; IBMDOS.COM - Offset 436Dh
 22940                                  	;;test	byte [es:di+4],8
 22941                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22942                                  	;jz	short write_cont
 22943                                  	;jmp	SET_ACC_ERR_DS
 22944                                  ;write_cont:
 22945                                  	;push	cx
 22946                                  	;or	cx,cx
 22947                                  	;jnz	short Not_Truncate
 22948                                  	;;mov	cx,-1
 22949                                  	;dec	cx
 22950                                  ;Not_Truncate:
 22951                                  	;call	LOCK_CHECK
 22952                                  	;pop	cx
 22953                                  	;jnb	short _WRITE_OK
 22954                                  	;call	WRITE_LOCK_VIOLATION
 22955                                  	;jnb	short DISKWRITE
 22956                                  	;retn
 22957                                  
 22958                                  	; MSDOS 6.0
 22959 000039B8 E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22960                                  	; 19/08/2018
 22961 000039BB 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22962 000039BD C3                      	retn
 22963                                  
 22964                                  WRTEOFJ:
 22965 000039BE E9DC01                  	JMP     WRTEOF
 22966                                  
 22967                                  _WRITE_OK:
 22968                                   	; 27/07/2018
 22969                                  	; IBMDOS.COM - Offset 438Eh
 22970                                  	
 22971                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22972                                  	;and	word [es:di+5],0BFBFh
 22973 000039C1 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22974                                  				; Mark file as dirty, clear no date on close
 22975                                  
 22976                                  	; 04/05/2019 - Retro DOS v4.0	
 22977                                  
 22978                                  	; MSDOS 6.0
 22979                                  	; mov 	ax,[es:di+11h]
 22980 000039C7 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22981 000039CB A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22982                                  	;mov	ax,[es:di+13h]
 22983 000039CE 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22984 000039D2 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22985                                  
 22986                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22987                                  
 22988                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22989 000039D5 C42E[8A05]              	LES     BP,[THISDPB]
 22990                                  
 22991 000039D9 E8FFFD                  	call	BREAKDOWN
 22992                                  
 22993 000039DC A1[CE05]                	MOV     AX,[BYTPOS]
 22994 000039DF 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22995 000039E3 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22996 000039E5 01C8                    	ADD     AX,CX
 22997 000039E7 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22998                                  
 22999                                  	;mov	bx,[es:bp+2]
 23000 000039EA 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23001                                  
 23002                                  	; MSDOS 3.3
 23003                                  	;cmp	dx,bx
 23004                                  	;jnb	short WRTERR33
 23005                                  	;div	bx
 23006                                  	;mov	bx,ax
 23007                                  	;OR	DX,DX
 23008                                  	;JNZ	short CALCLUS
 23009                                  	;dec	ax
 23010                                  ;CALCLUS:
 23011                                  	; MSDOS 3.3
 23012                                  	;mov	cl,[es:bp+5]
 23013                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23014                                  	;shr	ax,cl
 23015                                  	;push	ax
 23016                                  	;push	dx
 23017                                  	;push	es
 23018                                  	;les	di,[THISSFT]
 23019                                  	;;mov	ax,[es:di+11h]
 23020                                  	;;mov	dx,[es:di+13h]
 23021                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23022                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23023                                  	;pop	es
 23024                                  	;;DX:AX = current file size (in bytes).
 23025                                  	;;div	word [es:bp+2]
 23026                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23027                                  	;mov	cx,ax
 23028                                  	;or	dx,dx
 23029                                  	;jz	short NORND
 23030                                  	;inc	ax
 23031                                  ;NORND:
 23032                                  	; MSDOS 6.0
 23033 000039EE E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23034 000039F1 89C6                    	MOV	SI,AX
 23035 000039F3 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23036                                  
 23037                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23038                                  
 23039 000039F7 09D2                    	OR	DX,DX
 23040 000039F9 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23041 000039FA 89CA                    	MOV	DX,CX			;M039
 23042 000039FC 7506                    	JNZ	short CALCLUS
 23043 000039FE 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23044 00003A01 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23045                                  
 23046                                  CALCLUS:
 23047                                  	; MSDOS 6.0
 23048 00003A04 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23049 00003A07 5A                      	POP	DX
 23050                                  
 23051                                  ;       AX = Last cluster to write.
 23052                                  ;       DX = # of bytes in last sector to write (the "tail").
 23053                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23054                                  
 23055 00003A08 50                      	PUSH	AX
 23056 00003A09 52                      	PUSH	DX
 23057                                  ;M039
 23058 00003A0A 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23059 00003A0E A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23060 00003A11 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23061 00003A14 890E[0E06]              	mov	[TEMP_VAR2],cx
 23062 00003A18 890E[CA05]              	mov	[VALSEC+2],cx
 23063 00003A1C 89C1                    	mov	cx,ax
 23064 00003A1E 89F3                    	mov	bx,si
 23065                                  
 23066                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23067                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23068                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23069                                  ;                     DX = # of bytes in last sector of current file.
 23070                                  ;M039
 23071 00003A20 09D2                    	OR	DX,DX
 23072 00003A22 7407                    	JZ	short NORND
 23073                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23074                                  	;ADC	word [VALSEC+2],0
 23075                                  	; 22/09/2023
 23076 00003A24 40                      	inc	ax  ; 0FFFFh -> 0
 23077 00003A25 7504                    	jnz	short NORND
 23078 00003A27 FF06[CA05]              	inc	word [VALSEC+2]
 23079                                  NORND:	
 23080                                  	; MSDOS 3.3 & MSDOS 6.0
 23081 00003A2B A3[C805]                	MOV     [VALSEC],AX
 23082                                  
 23083                                  ;       [VALSEC] = Last sector of current file.
 23084                                  
 23085 00003A2E 31C0                    	XOR     AX,AX
 23086 00003A30 A3[DE05]                	MOV     [GROWCNT],AX
 23087 00003A33 A3[E005]                	MOV     [GROWCNT+2],AX
 23088 00003A36 58                      	POP     AX
 23089                                  
 23090                                  	; MSDOS 6.0
 23091 00003A37 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23092 00003A3B 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23093 00003A3F 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23094 00003A41 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23095 00003A43 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23096 00003A45 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23097 00003A49 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23098                                  lowsec:
 23099                                  	;MOV	DI,0			;F.C. >32mb
 23100                                  	; 22/09/2023
 23101 00003A4B 31FF                    	xor	di,di
 23102                                  	; MSDOS 3.3 & MSDOS 6.0
 23103 00003A4D 29CB                    	SUB	BX,CX			; Number of full sectors
 23104 00003A4F 7253                    	JB	short NOGROW
 23105 00003A51 7444                    	JZ	short TESTTAIL
 23106                                  yesgrow:
 23107                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23108 00003A53 89D1                    	MOV     CX,DX
 23109 00003A55 93                      	XCHG    AX,BX
 23110                                  	;mul	word [es:bp+2]
 23111 00003A56 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23112                                  	
 23113                                  	; MSDOS 6.0
 23114 00003A5A 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 23115 00003A5E A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 23116 00003A61 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 23117                                  	;mul	word [es:bp+2]
 23118 00003A63 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23119                                  	
 23120 00003A67 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 23121 00003A6B 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 23122 00003A6D A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 23123                                  
 23124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23125 00003A70 29C8                    	SUB     AX,CX			; Take off current "tail"
 23126 00003A72 83DA00                  	SBB     DX,0			; 32-bit extension
 23127 00003A75 01D8                    	ADD     AX,BX			; Add on new "tail"
 23128 00003A77 83D200                  	ADC     DX,0			; ripple tim's head off
 23129 00003A7A EB21                    	JMP     SHORT SETGRW
 23130                                  
 23131                                  HAVSTART:
 23132                                  	;int 3
 23133 00003A7C 89C1                    	MOV     CX,AX
 23134 00003A7E E86A11                  	call	SKPCLP
 23135                                  	;JCXZ	DOWRTJ
 23136                                  	; 16/12/2022
 23137 00003A81 E357                    	jcxz	DOWRT
 23138                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23139                                  	;jcxz	DOWRTJ
 23140                                  
 23141 00003A83 E80C13                  	call	ALLOCATE
 23142                                  	;JNC	short DOWRTJ
 23143                                  	; 16/12/2022
 23144 00003A86 7352                    	jnc	short DOWRT
 23145                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23146                                  	;jnc	short DOWRTJ
 23147                                  
 23148                                  	;entry   WRTERR
 23149                                  WRTERR:
 23150 00003A88 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 23151                                  
 23152                                  	;entry WRTERR22
 23153                                  WRTERR22:
 23154 00003A8A A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 23155                                  
 23156                                  	; 27/07/2018
 23157                                  WRTERR33:
 23158                                  	;MOV	CX,0			;No bytes transferred
 23159 00003A8D 31C9                    	XOR     CX,CX
 23160                                  					
 23161 00003A8F C43E[9E05]              	LES     DI,[THISSFT]
 23162                                  	;CLC ; 19/05/2019
 23163                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23164                                  	; 16/12/2022
 23165                                  	;clc
 23166 00003A93 C3                      	retn
 23167                                  
 23168                                  	; 16/12/2022
 23169                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23170                                  ;DOWRTJ:
 23171                                  	;JMP	short DOWRT
 23172                                  
 23173                                  ACC_ERRWJ:
 23174                                  	; 10/08/2018
 23175                                  	;JMP	SET_ACC_ERRW
 23176                                  	; 16/12/2022
 23177 00003A94 E9D7FD                  	jmp	SET_ACC_ERR_DS
 23178                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23179                                  	;jmp	SET_ACC_ERRW	
 23180                                  
 23181                                  TESTTAIL:
 23182 00003A97 29D0                    	SUB     AX,DX
 23183 00003A99 7609                    	JBE	short NOGROW
 23184 00003A9B 31D2                    	XOR     DX,DX
 23185                                  SETGRW:
 23186 00003A9D A3[DE05]                	MOV	[GROWCNT],AX
 23187 00003AA0 8916[E005]              	MOV	[GROWCNT+2],DX
 23188                                  NOGROW:
 23189 00003AA4 58                      	POP     AX
 23190 00003AA5 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 23191 00003AA9 E81F11                  	call	FNDCLUS
 23192 00003AAC 72E6                    	JC	short ACC_ERRWJ
 23193 00003AAE 891E[BC05]              	MOV     [CLUSNUM],BX
 23194 00003AB2 8916[BA05]              	MOV     [LASTPOS],DX
 23195                                  
 23196 00003AB6 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23197 00003AB8 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23198 00003ABA E3C0                    	JCXZ    HAVSTART        ; See if no more data
 23199 00003ABC 51                      	PUSH    CX              ; No. of clusters short of first
 23200 00003ABD 89C1                    	MOV     CX,AX
 23201 00003ABF E8D012                  	call	ALLOCATE
 23202 00003AC2 59                      	POP     CX
 23203 00003AC3 72C3                    	JC	short WRTERR
 23204 00003AC5 8B16[BA05]              	MOV     DX,[LASTPOS]
 23205 00003AC9 42                      	INC     DX
 23206 00003ACA 49                      	DEC     CX
 23207 00003ACB 7405                    	JZ	short NOSKIP
 23208 00003ACD E81B11                  	call	SKPCLP
 23209 00003AD0 72C2                    	JC	short ACC_ERRWJ
 23210                                  NOSKIP:
 23211 00003AD2 891E[BC05]              	MOV     [CLUSNUM],BX
 23212 00003AD6 8916[BA05]              	MOV     [LASTPOS],DX
 23213                                  DOWRT:
 23214 00003ADA 833E[D205]00            	CMP     word [BYTCNT1],0
 23215 00003ADF 7409                    	JZ	short WRTMID
 23216 00003AE1 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23217 00003AE5 E89211                  	call	BUFWRT
 23218 00003AE8 72AA                    	JC	short ACC_ERRWJ
 23219                                  WRTMID:
 23220 00003AEA A1[D605]                	MOV     AX,[SECCNT]
 23221 00003AED 09C0                    	OR      AX,AX
 23222                                  	; 20/11/2022
 23223 00003AEF 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23224 00003AF1 0106[C405]              	ADD     [SECPOS],AX
 23225                                  	; 19/05/2019
 23226                                  	; MSDOS 6.0
 23227 00003AF5 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23228 00003AFA E8D911                  	call	NEXTSEC
 23229                                  	; 16/12/2022
 23230 00003AFD 7295                    	JC	short ACC_ERRWJ
 23231                                  	;JC	short SET_ACC_ERRW	;M039
 23232 00003AFF C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23233 00003B04 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23234 00003B08 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23235 00003B0C 8B0E[D605]              	MOV     CX,[SECCNT]
 23236                                  WRTLP:
 23237 00003B10 E8F411                  	call	OPTIMIZE
 23238 00003B13 7248                    	JC	short SET_ACC_ERRW
 23239                                  	; 16/12/2022
 23240                                  	;JC	short ACC_ERRWJ
 23241                                  
 23242                                  ;M039
 23243                                  ;       DI = Next physical cluster.
 23244                                  ;       AX = # sectors remaining.
 23245                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23246                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23247                                  ;	     sectors, also termed an "Extent".)
 23248                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23249                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23250                                  ;
 23251                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23252                                  ;	are in Extent; they are being over-written.
 23253                                  
 23254 00003B15 57                      	push    di
 23255 00003B16 50                      	push    ax
 23256                                  
 23257                                  	; MSDOS 3.3
 23258                                  	; IBMDOS.COM (1987) - Offset 4497h
 23259                                  	;push	dx
 23260                                  	;push	bx
 23261                                  	;mov	al,[es:bp]
 23262                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23263                                  	;mov	bx,cx
 23264                                  	;add	bx,dx	; (bx = Extent end)
 23265                                  
 23266                                  ;	DX = Extent start.
 23267                                  ;	BX = Extent end.
 23268                                  ;	AL = Drive #.
 23269                                  
 23270                                  	;call	SETVISIT
 23271                                  
 23272                                  ;wbufq1:
 23273                                  	;;or	byte [di+5],20h
 23274                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23275                                  	;;cmp	al,[di+4]	
 23276                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23277                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23278                                  	;;cmp	[di+6],dx
 23279                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23280                                  	;jb	short wbufq2
 23281                                  	;;cmp	[di+6],bx
 23282                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23283                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23284                                  
 23285                                  	;; Buffer sector is in the Extent
 23286                                  
 23287                                  	;;mov	word [di+4],20FFh
 23288                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23289                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23290                                  	;				; .buf_flags, AH = 0, reset/clear
 23291                                  	;call	SCANPLACE
 23292                                  ;wbufq2:
 23293                                  	;call	SKIPVISIT
 23294                                  	;jnz	short wbufq1
 23295                                  	;pop	bx
 23296                                  	;pop	dx
 23297                                  
 23298                                          ; MSDOS 6.0
 23299 00003B17 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 23300                                  
 23301                                  ;ASSUME DS:NOTHING
 23302                                  ;M039
 23303                                  	; MSDOS 3.3 & MSDOS 6.0
 23304                                  ;hkn; SS override for DMAADD and ALLOWED
 23305 00003B1A 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23306                                  	;mov	byte [ss:ALLOWED],38h
 23307 00003B1F 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23308                                  
 23309                                  ;	put logic from DWRITE in-line here so we can modify it
 23310                                  ;	for DISK FULL conditions.
 23311                                  
 23312                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23313                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23314                                  
 23315                                  	; 16/12/2022
 23316                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23317                                  	;call	DWRITE
 23318                                  
 23319                                  ;DWRITE_OKAY:
 23320                                  
 23321                                  	; 16/12/2022
 23322                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23323                                  	;pop     cx
 23324                                  	;pop     bx
 23325                                  	;push    ss
 23326                                  	;pop     ds
 23327                                  	;jc      short SET_ACC_ERRW
 23328                                  	;jcxz    WRTLAST
 23329                                  	;mov     dl, 0
 23330                                  	;inc     word [LASTPOS]
 23331                                  	;jmp     short WRTLP
 23332                                  
 23333                                  	; 16/12/2022
 23334                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23335                                  DWRITE_LUP:
 23336                                  	; 23/07/2019 - Retro DOS v3.2
 23337                                  
 23338                                  	; MSDOS 6.0
 23339 00003B25 E8E1FB                  	call	DSKWRITE
 23340 00003B28 7417                    	jz	short DWRITE_OKAY
 23341                                  
 23342                                  ;;	int	3
 23343                                  
 23344 00003B2A 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23345 00003B2C 7423                    	jz	short DWRITE_DISK_FULL
 23346                                  
 23347                                  	; 16/12/2022
 23348                                  
 23349                                  ;;hkn; SS override
 23350 00003B2E 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23351 00003B34 E801FC                  	call	HARDERRRW
 23352 00003B37 3C01                    	CMP	AL,1		; Check for retry
 23353 00003B39 74EA                    	JZ	short DWRITE_LUP
 23354                                  
 23355                                  	; 16/12/2022
 23356                                  	; 23/07/2019
 23357                                  	;POP	CX ; *4*
 23358                                  	;POP	BX ; *5*
 23359                                  	;
 23360                                  	;push	ss
 23361                                  	;pop	ds
 23362                                  	;
 23363                                  
 23364                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23365                                  
 23366                                  	; 16/12/2022
 23367 00003B3B 3C03                    	CMP	AL,3		; Check for FAIL
 23368 00003B3D F8                      	CLC
 23369 00003B3E 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23370 00003B40 F9                      	STC
 23371                                  
 23372                                  DWRITE_OKAY:
 23373                                  	; 16/12/2022
 23374                                  	; 23/07/2019
 23375                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23376 00003B41 59                      	POP	CX ; *4*
 23377 00003B42 5B                      	POP	BX ; *5*
 23378                                  
 23379                                  ;       CX = # sectors remaining.
 23380                                  ;       BX = Next physical cluster.
 23381                                  
 23382                                  ;hkn; SS override
 23383                                          ;Context DS
 23384                                  	; 16/12/2022
 23385                                  	;push	ss
 23386                                  	;pop	ds
 23387                                  
 23388                                  	; 16/12/2022
 23389 00003B43 7218                    	jc	short SET_ACC_ERRW
 23390                                  
 23391                                  	; 16/12/2022
 23392 00003B45 16                      	push	ss
 23393 00003B46 1F                      	pop	ds
 23394                                  
 23395 00003B47 E317                    	JCXZ    WRTLAST
 23396                                  
 23397                                  	;MOV	DL,0
 23398 00003B49 30D2                    	xor	dl,dl ; 23/07/2019
 23399 00003B4B FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23400 00003B4F EBBF                    	JMP     short WRTLP
 23401                                  
 23402                                  	; 23/07/2019 - Retro DOS v3.2
 23403                                  	; 09/08/2018
 23404                                  	; MSDOS 6.0
 23405                                  DWRITE_DISK_FULL:
 23406                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23407                                  	; 16/12/2022
 23408 00003B51 16                      	push	ss
 23409 00003B52 1F                      	pop	ds
 23410 00003B53 59                      	pop	cx		; unjunk stack
 23411 00003B54 5B                      	pop	bx
 23412 00003B55 C606[0B06]01            	mov	byte [DISK_FULL],1
 23413                                  	;stc
 23414 00003B5A E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23415                                  
 23416                                  	; 16/12/2022
 23417                                  SET_ACC_ERRW:
 23418 00003B5D E90EFD                  	jmp	SET_ACC_ERR_DS
 23419                                  
 23420                                  WRTLAST:
 23421 00003B60 A1[D405]                	MOV     AX,[BYTCNT2]
 23422 00003B63 09C0                    	OR      AX,AX
 23423 00003B65 7413                    	JZ	short FINWRT
 23424 00003B67 A3[D205]                	MOV     [BYTCNT1],AX
 23425 00003B6A E86911                  	call	NEXTSEC
 23426 00003B6D 72EE                    	JC	short SET_ACC_ERRW
 23427 00003B6F C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23428 00003B75 E80211                  	call	BUFWRT
 23429 00003B78 72E3                    	JC	short SET_ACC_ERRW
 23430                                  FINWRT:
 23431 00003B7A C43E[9E05]              	LES     DI,[THISSFT]
 23432 00003B7E A1[DE05]                	MOV     AX,[GROWCNT]
 23433 00003B81 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23434 00003B85 09C0                    	OR      AX,AX
 23435 00003B87 7502                    	JNZ	short UPDATE_size
 23436 00003B89 E30F                    	JCXZ    SAMSIZ
 23437                                  UPDATE_size:
 23438                                  	;add	[es:di+11h],ax
 23439 00003B8B 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23440                                  	;adc	[es:di+13h],cx
 23441 00003B8F 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23442                                  
 23443                                  ; Make sure that all other SFT's see this growth also.
 23444                                  
 23445 00003B93 B80100                  	MOV     AX,1
 23446                                  ;if installed
 23447                                  	;Call	JShare + 14 * 4
 23448 00003B96 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23449                                  ;else
 23450                                  ;	Call    ShSU
 23451                                  ;endif
 23452                                  
 23453                                  SAMSIZ:
 23454 00003B9A E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23455                                  
 23456                                  	; 16/12/2022
 23457                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23458                                  ;SET_ACC_ERRW:
 23459                                  	;jmp	SET_ACC_ERR_DS
 23460                                  
 23461                                  WRTEOF:
 23462 00003B9D 89C1                    	MOV     CX,AX
 23463 00003B9F 09D1                    	OR      CX,DX
 23464 00003BA1 746C                    	JZ	short KILLFIL
 23465 00003BA3 83E801                  	SUB     AX,1
 23466 00003BA6 83DA00                  	SBB     DX,0
 23467                                  
 23468                                  	; MSDOS 3.3
 23469                                  	;;div	word [es:bp+2]
 23470                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23471                                  	;;mov	cl,[es:bp+5]
 23472                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23473                                  	;shr	ax,cl
 23474                                  
 23475                                  	; MSDOS 6.0
 23476 00003BA9 53                      	PUSH	BX
 23477                                  	;mov	bx,[es:bp+2]
 23478 00003BAA 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23479 00003BAE E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23480 00003BB1 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23481 00003BB2 89CA                    	MOV	DX,CX			      ;M039
 23482 00003BB4 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23483 00003BB8 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23484                                  
 23485 00003BBB 89C1                    	MOV     CX,AX
 23486 00003BBD E80B10                  	call	FNDCLUS
 23487                                  SET_ACC_ERRWJ2:
 23488 00003BC0 729B                    	JC	short SET_ACC_ERRW
 23489                                  
 23490 00003BC2 E326                    	JCXZ    RELFILE
 23491 00003BC4 E8CB11                  	call	ALLOCATE
 23492                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23493                                  	; 16/12/2022
 23494 00003BC7 7303                    	jnc	short UPDATE
 23495 00003BC9 E9BCFE                  	JMP	WRTERR
 23496                                  UPDATE:
 23497 00003BCC C43E[9E05]              	LES	DI,[THISSFT]
 23498 00003BD0 A1[CE05]                	MOV	AX,[BYTPOS]
 23499                                  	;mov	[es:di+11h],ax
 23500 00003BD3 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23501 00003BD7 A1[D005]                	MOV	AX,[BYTPOS+2]
 23502                                  	;mov	[es:di+13h],ax
 23503 00003BDA 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23504                                  ;
 23505                                  ; Make sure that all other SFT's see this growth also.
 23506                                  ;
 23507 00003BDE B80200                  	MOV     AX,2
 23508                                  ;if installed
 23509                                  	;Call	JShare + 14 * 4
 23510 00003BE1 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23511                                  ;else
 23512                                  ;	Call    ShSU
 23513                                  ;endif
 23514 00003BE5 31C9                    	XOR     CX,CX
 23515 00003BE7 E939FD                  	jmp	ADDREC
 23516                                  
 23517                                  	; 16/12/2022
 23518                                  ;WRTERRJ: 
 23519                                  	;JMP	WRTERR
 23520                                  
 23521                                  ;;;;;;;;;;;;;;;; 7/18/86
 23522                                  ;;;;;;;;;;;;;;;;
 23523                                  
 23524                                  RELFILE:
 23525                                  	; MSDOS 6.0
 23526 00003BEA 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23527 00003BEB C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23528                                  	;cmp	dx,[es:di+19h]
 23529 00003BEF 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23530 00003BF3 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23531                                  	;mov	[es:di+19h],0
 23532 00003BF5 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23533                                  	;mov	dx,[es:di+0Bh]
 23534 00003BFB 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23535                                  	;mov	[es:di+35h],dx
 23536 00003BFF 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23537                                  SKIPRESET:                            		;AN002; BL
 23538 00003C03 07                      	POP     ES                    		;AN002; BL
 23539                                  ;
 23540 00003C04 BAFFFF                  	MOV     DX,0FFFFH
 23541 00003C07 E83612                  	call	RELBLKS
 23542                                  	; 16/12/2022
 23543                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23544 00003C0A 73C0                    	jnc	short UPDATE
 23545                                  SET_ACC_ERRWJ:
 23546                                  	;JC	short SET_ACC_ERRWJ2
 23547                                  	;JMP	SHORT UPDATE
 23548                                  	; 16/12/2022
 23549 00003C0C E95FFC                  	jmp	SET_ACC_ERR_DS
 23550                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23551                                  	;JC	short SET_ACC_ERRWJ2
 23552                                  	;JMP	SHORT UPDATE
 23553                                  
 23554                                  KILLFIL:
 23555 00003C0F 31DB                    	XOR     BX,BX
 23556 00003C11 06                      	PUSH    ES
 23557 00003C12 C43E[9E05]              	LES     DI,[THISSFT]
 23558                                  	;mov	[es:di+19h],bx
 23559 00003C16 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23560                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23561 00003C1A 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23562                                  	;xchg	bx,[es:di+0Bh]
 23563 00003C1E 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23564 00003C22 07                      	POP	ES
 23565                                  
 23566 00003C23 09DB                    	OR	BX,BX
 23567                                  	;JZ	short UPDATEJ
 23568                                  	; 16/12/2022
 23569 00003C25 74A5                    	jz	short UPDATE
 23570                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23571                                  	;jz	short UPDATEJ
 23572                                  
 23573                                  ;; 10/23/86 FastOpen update
 23574 00003C27 06                      	PUSH	ES              ; since first cluster # is 0
 23575 00003C28 55                      	PUSH	BP              ; we must delete the old cache entry
 23576 00003C29 50                      	PUSH	AX
 23577 00003C2A 51                      	PUSH	CX
 23578 00003C2B 52                      	PUSH	DX
 23579 00003C2C C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23580                                  	; 15/12/2022
 23581 00003C30 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23582                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23583                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23584 00003C34 89D9                    	MOV	CX,BX                    ; first cluster #
 23585 00003C36 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23586 00003C38 E862EA                  	call	FastOpen_Update          ; call fastopen
 23587 00003C3B 5A                      	POP	DX
 23588 00003C3C 59                      	POP	CX
 23589 00003C3D 58                      	POP	AX
 23590 00003C3E 5D                      	POP	BP
 23591 00003C3F 07                      	POP	ES
 23592                                  ;; 10/23/86 FastOpen update
 23593                                  
 23594 00003C40 E8FB11                  	call	RELEASE
 23595 00003C43 72C7                    	JC	short SET_ACC_ERRWJ
 23596                                  UPDATEJ:
 23597                                  	; 20/11/2022
 23598 00003C45 EB85                    	JMP	short UPDATE ; 10/08/2018
 23599                                  
 23600                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23601                                  ;----------------------------------------------------------------------------
 23602                                  ;
 23603                                  ; Procedure Name : DskWrtBufPurge
 23604                                  ;
 23605                                  ; Inputs:
 23606                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23607                                  ;	     sectors, also termed an "Extent".)
 23608                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23609                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23610                                  ;
 23611                                  ; Function:
 23612                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23613                                  ;	are in Extent; they are being over-written.
 23614                                  ;
 23615                                  ; Outputs:
 23616                                  ;       (Same as Input.)
 23617                                  ; Uses:
 23618                                  ;       All registers except DS,AX,SI,DI preserved.
 23619                                  ;       SS override for all global variables.
 23620                                  ;----------------------------------------------------------------------------
 23621                                  ;M039: Created
 23622                                  
 23623                                  ;procedure   DskWrtBufPurge,NEAR
 23624                                  ;
 23625                                  ;ASSUME  DS:NOTHING
 23626                                  
 23627                                  ; 04/05/2019 - Retro DOS v4.0
 23628                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23629                                  
 23630                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23631                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23632                                  
 23633                                  DskWrtBufPurge:
 23634                                  	;SaveReg <bx,cx>
 23635 00003C47 53                      	push	bx
 23636 00003C48 51                      	push	cx
 23637                                  
 23638 00003C49 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23639 00003C4E 89DE                    	mov	si,bx
 23640 00003C50 01D1                    	add	cx,dx
 23641 00003C52 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23642                                  
 23643                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23644                                  	;;mov	al,[es:bp+0]
 23645                                  	;mov	al,[es:bp+DPB.DRIVE]
 23646                                  	; 15/12/2022
 23647 00003C55 268A4600                	mov	al,[es:bp]
 23648                                  
 23649                                  ;	BX:DX = Extent start.
 23650                                  ;	SI:CX = Extent end + 1.
 23651                                  ;	AL = Drive #
 23652                                  
 23653 00003C59 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23654 00003C5F 7431                    	je	short nosc		; -no, jump.
 23655                                  
 23656                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23657                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23658                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23659                                  
 23660 00003C61 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23661 00003C66 752A                    	jne	short nosc		; -no, jump.
 23662                                  
 23663 00003C68 50                      	push    ax
 23664 00003C69 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23665 00003C6D 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23666                                  
 23667                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23668                                  	;jbe	short sc5		; -yes, jump.
 23669                                  
 23670 00003C72 39FE                    	cmp	si,di
 23671 00003C74 7502                    	jne	short sc01
 23672 00003C76 39C1                    	cmp	cx,ax
 23673                                  sc01: 
 23674 00003C78 7617                    	jbe	short sc5	
 23675                                  
 23676 00003C7A 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23677 00003C7F 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23678                                  	
 23679                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23680                                  	;jae	short sc5		; -yes, jump.
 23681                                  
 23682 00003C82 39FB                    	cmp	bx,di
 23683 00003C84 7502                    	jne	short sc02
 23684 00003C86 39C2                    	cmp	dx,ax
 23685                                  sc02:
 23686 00003C88 7307                    	jnb	short sc5
 23687                                  
 23688 00003C8A 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23689                                  sc5:	
 23690 00003C91 58                      	pop     ax
 23691                                  
 23692                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23693                                  ;	written.
 23694                                  
 23695                                  nosc:	
 23696 00003C92 E8C01B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23697                                  
 23698                                  _bufq:	
 23699                                  	;cmpo	al,[di+4]
 23700 00003C95 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23701 00003C98 7527                    	jne	short bufq5		; -no, jump.
 23702                                  
 23703                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23704                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23705                                  
 23706                                  	;cmp	bx,[di+8]
 23707 00003C9A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23708 00003C9D 7503                    	jne	short bufq04
 23709                                  	;cmp	dx,[di+6]
 23710 00003C9F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23711                                  bufq04:
 23712 00003CA2 771D                    	ja	short bufq5
 23713                                  
 23714                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23715                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23716                                  
 23717                                  	;cmp	si,[di+8]
 23718 00003CA4 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23719 00003CA7 7503                    	jne	short bufq05
 23720                                  	;cmp	cx,[di+6]
 23721 00003CA9 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23722                                  bufq05:
 23723 00003CAC 7613                    	jbe	short bufq5
 23724                                  
 23725                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23726                                  
 23727                                  	;test	byte [di+5],40h
 23728 00003CAE F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23729 00003CB2 7403                    	jz	short bufq4		; -no, jump.
 23730 00003CB4 E81F1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23731                                  bufq4:
 23732                                  	;mov	word [di+4],20FFh
 23733 00003CB7 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23734                                  
 23735 00003CBC E8A81B                  	call	SCANPLACE
 23736 00003CBF EB02                    	jmp     short bufq6
 23737                                  bufq5: 
 23738 00003CC1 8B3D                    	mov     di,[di]
 23739                                  	;mov	di,[di+BUFFINFO.buf_next]
 23740                                  bufq6: 
 23741 00003CC3 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23742 00003CC8 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23743                                  	
 23744                                  	;RestoreReg <cx,bx>
 23745 00003CCA 59                      	pop	cx
 23746 00003CCB 5B                      	pop	bx
 23747 00003CCC C3                      	retn
 23748                                  
 23749                                  ;EndProc DskWrtBufPurge
 23750                                  
 23751                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23752                                  ;----------------------------------------------------------------------------
 23753                                  ;
 23754                                  ; Procedure Name : DIV32
 23755                                  ;
 23756                                  ; Inputs:
 23757                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23758                                  ; Function:
 23759                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23760                                  ; Outputs:
 23761                                  ;       CX:AX = quotient , DX= remainder
 23762                                  ; Uses:
 23763                                  ;       All registers except AX,CX,DX preserved.
 23764                                  ;----------------------------------------------------------------------------
 23765                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23766                                  
 23767                                  ; 04/05/2019 - Retro DOS v4.0
 23768                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23769                                  
 23770                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23771                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23772                                  
 23773                                  DIV32:
 23774 00003CCD 81FB0002                	cmp	bx,512
 23775 00003CD1 7515                    	jne	short div5
 23776                                  
 23777 00003CD3 89D1                    	mov	cx,dx
 23778 00003CD5 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23779 00003CD7 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23780 00003CDB 88E0                    	mov	al,ah
 23781 00003CDD 88CC                    	mov	ah,cl
 23782 00003CDF 88E9                    	mov	cl,ch
 23783 00003CE1 30ED                    	xor	ch,ch
 23784 00003CE3 D1E9                    	shr	cx,1
 23785 00003CE5 D1D8                    	rcr	ax,1
 23786 00003CE7 C3                      	retn
 23787                                  div5:	
 23788 00003CE8 89C1                    	mov	cx,ax
 23789 00003CEA 89D0                    	mov	ax,dx
 23790 00003CEC 31D2                    	xor	dx,dx
 23791 00003CEE F7F3                    	div	bx              ; 0:AX/BX
 23792 00003CF0 91                      	xchg	cx,ax
 23793 00003CF1 F7F3                    	div	bx              ; DX:AX/BX
 23794 00003CF3 C3                      	retn
 23795                                  
 23796                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23797                                  ;----------------------------------------------------------------------------
 23798                                  ;
 23799                                  ; Procedure Name : SHR32
 23800                                  ;
 23801                                  ; Inputs:
 23802                                  ;	DX:AX = 32 bit sector number
 23803                                  ; Function:
 23804                                  ;       Perform 32 bit shift right
 23805                                  ; Outputs:
 23806                                  ;	AX = cluster number
 23807                                  ;	ZF = 1 if no error
 23808                                  ;	   = 0 if error (cluster number > 64k)
 23809                                  ; Uses:
 23810                                  ;       DX,CX
 23811                                  ;---------------------------------------------------------------------------
 23812                                  ; M017	- SHR32 rewritten for better performance
 23813                                  ; M039	- Additional optimization
 23814                                  
 23815                                  ; 04/05/2019 - Retro DOS v4.0
 23816                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23817                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23818                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23819                                  
 23820                                  SHR32:
 23821                                  	;mov	cl,[es:bp+5]
 23822 00003CF4 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23823 00003CF8 30ED                    	xor	ch,ch	    ;ZF=1
 23824 00003CFA E306                    	jcxz	norota
 23825                                  
 23826                                  rotashft2:
 23827 00003CFC D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23828 00003CFE D1D8                    	rcr	ax,1	    ;ZF not affected.
 23829 00003D00 E2FA                    	loop	rotashft2
 23830                                  norota:
 23831 00003D02 C3                      	retn
 23832                                  
 23833                                  ;============================================================================
 23834                                  ; DIR.ASM, MSDOS 6.0, 1991
 23835                                  ;============================================================================
 23836                                  ; 27/07/2018 - Retro DOS v3.0
 23837                                  ; 19/05/2019 - Retro DOS v4.0 
 23838                                  
 23839                                  ;	TITLE	DIR - Directory and path cracking
 23840                                  ;	NAME	Dir
 23841                                  
 23842                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23843                                  ;---------------------------------------------------------------------------
 23844                                  ;
 23845                                  ; Procedure Name : FINDENTRY,SEARCH
 23846                                  ;
 23847                                  ; Inputs:
 23848                                  ;	[THISDPB] set
 23849                                  ;	[SECCLUSPOS] = 0
 23850                                  ;	[DIRSEC] = Starting directory sector number
 23851                                  ;	[CLUSNUM] = Next cluster of directory
 23852                                  ;	[CLUSFAC] = Sectors/Cluster
 23853                                  ;	[NAME1] = Name to look for
 23854                                  ; Function:
 23855                                  ;	Find file name in disk directory.
 23856                                  ;	"?" matches any character.
 23857                                  ; Outputs:
 23858                                  ;	Carry set if name not found
 23859                                  ;	ELSE
 23860                                  ;	Zero set if attributes match (always except when creating)
 23861                                  ;	AH = Device ID (bit 7 set if not disk)
 23862                                  ;	[THISDPB] = Base of drive parameters
 23863                                  ;	DS = DOSGROUP
 23864                                  ;	ES = DOSGROUP
 23865                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23866                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23867                                  ;	[CURBUF] has directory record with match
 23868                                  ;	[NAME1] has file name
 23869                                  ;	[LASTENT] is entry number of the entry
 23870                                  ; All other registers destroyed.
 23871                                  ;----------------------------------------------------------------------------
 23872                                  
 23873                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23874                                  ;hkn; this point.
 23875                                  
 23876                                  SEARCH:
 23877                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23878                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23879                                  
 23880                                  	; 19/05/2019 - Retro DOS v4.0
 23881                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23882                                  
 23883                                  	; 27/07/2018 - Retro DOS v3.0
 23884                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23885                                  	; 15/03/2018 - Retro DOS v2.0
 23886                                  
 23887                                  	; 24/01/2024
 23888                                  
 23889                                  	;entry	FindEntry
 23890                                  FINDENTRY:
 23891 00003D03 E82B04                  	call	STARTSRCH
 23892 00003D06 A0[6B05]                	MOV	AL,[ATTRIB]
 23893                                  	;and	al,9Eh
 23894 00003D09 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23895                                  	;cmp	al,8
 23896 00003D0B 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23897 00003D0D 7503                    	JNZ	short NOTVOLSRCH	; No
 23898 00003D0F E86A01                  	CALL	SETROOTSRCH		; Yes force search of root
 23899                                  NOTVOLSRCH:
 23900 00003D12 E8FA00                  	CALL	GETENTRY
 23901                                  	;JNC	short SRCH
 23902                                  	;JMP	SETESRET
 23903                                  	; 24/01/2024
 23904 00003D15 723F                    	jc	short SETESRET
 23905                                  
 23906                                  	;entry	Srch
 23907                                  SRCH:
 23908 00003D17 1E                      	PUSH	DS
 23909 00003D18 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23910                                  
 23911                                  ;	(DS:BX) = directory entry address
 23912                                  
 23913 00003D1C 8A27                    	mov	ah,[BX]
 23914                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23915 00003D1E 08E4                    	OR	AH,AH			; End of directory?
 23916 00003D20 7437                    	JZ	short FREE
 23917                                  
 23918                                  ;hkn; SS override
 23919 00003D22 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23920 00003D27 7430                    	JZ	short FREE
 23921                                  	;test	byte [bx+0Bh],8
 23922 00003D29 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23923                                  					; Volume ID file?
 23924 00003D2D 7405                    	JZ	short CHKFNAM 		; NO
 23925                                  
 23926                                  ;hkn; SS override
 23927 00003D2F 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23928                                  CHKFNAM:
 23929                                  ;	Context ES
 23930 00003D34 8CD6                    	MOV	SI,SS
 23931 00003D36 8EC6                    	MOV	ES,SI
 23932 00003D38 89DE                    	MOV	SI,BX
 23933                                  
 23934                                  ;hkn; NAME1 is in DOSDATA
 23935 00003D3A BF[4B05]                	MOV	DI,NAME1
 23936                                  ;;;;; 7/29/86
 23937                                  
 23938                                  ;hkn; SS override for NAME1
 23939                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23940                                  	;JNZ	short NO_E5
 23941                                  	;MOV	BYTE [SS:NAME1],05H
 23942                                  	; 22/09/2023
 23943 00003D3D 26803DE5                	cmp	byte [es:di],0E5h
 23944 00003D41 7504                    	jnz	short NO_E5
 23945 00003D43 26C60505                	mov	byte [es:di],05h
 23946                                  NO_E5:
 23947                                  ;;;;; 7/29/86
 23948 00003D47 E86100                  	CALL	MetaCompare
 23949 00003D4A 7429                    	JZ	short FOUND
 23950 00003D4C 1F                      	POP	DS
 23951                                  
 23952                                  	;entry	NEXTENT
 23953                                  NEXTENT:
 23954 00003D4D C42E[8A05]              	LES	BP,[THISDPB]
 23955 00003D51 E86600                  	CALL	NEXTENTRY
 23956 00003D54 73C1                    	JNC	short SRCH
 23957                                  	;JMP	SHORT SETESRET
 23958                                  	; 24/01/2024
 23959                                  SETESRET:
 23960 00003D56 16                      	PUSH	SS
 23961 00003D57 07                      	POP	ES
 23962 00003D58 C3                      	retn
 23963                                  FREE:
 23964 00003D59 1F                      	POP	DS
 23965 00003D5A 8B0E[4803]              	MOV	CX,[LASTENT]
 23966 00003D5E 3B0E[D805]              	CMP	CX,[ENTFREE]
 23967 00003D62 7304                    	JAE	short TSTALL
 23968 00003D64 890E[D805]              	MOV	[ENTFREE],CX
 23969                                  TSTALL:
 23970 00003D68 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23971                                  NEXTENTJ:
 23972 00003D6C 74DF                    	je	short NEXTENT 		; No - continue search
 23973 00003D6E 890E[DA05]              	MOV	[ENTLAST],CX
 23974 00003D72 F9                      	STC
 23975 00003D73 EBE1                    	JMP	SHORT SETESRET
 23976                                  
 23977                                  FOUND:
 23978                                  ; We have a file with a matching name. We must now consider the attributes:
 23979                                  ; ATTRIB	Action
 23980                                  ; ------	------
 23981                                  ; Volume_ID	Is Volume_ID in test?
 23982                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23983                                  ;		If create then Is ATTRIB equal to test?
 23984                                  
 23985 00003D75 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23986 00003D77 1F                      	POP	DS
 23987 00003D78 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23988                                  	;and	ah,9Eh
 23989 00003D7C 80E4DE                  	AND	AH,~attr_ignore
 23990                                  	;lea	si,[si+15]
 23991 00003D7F 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23992                                  					; point to first cluster field
 23993                                  	;test	ch,8
 23994 00003D82 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23995 00003D85 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23996                                  	;test	ah,8
 23997 00003D87 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23998                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23999                                  	; 16/12/2022
 24000 00003D8A 74C1                    	jz	short NEXTENT ; 19/05/2019
 24001                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24002                                  	;JZ	short NEXTENTJ
 24003 00003D8C 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24004 00003D8E EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24005                                  check_one_volume_id:
 24006                                  	;CMP	ah,8
 24007 00003D90 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24008                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24009                                  	; 16/12/2022
 24010 00003D93 74B8                    	je	short NEXTENT ; 19/05/2019
 24011                                  	;JZ	short NEXTENTJ
 24012 00003D95 E8AD03                  	CALL	MatchAttributes
 24013 00003D98 7407                    	JZ	SHORT RETFF
 24014 00003D9A F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24015                                  	; 16/12/2022
 24016                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24017 00003D9F 74AC                    	jz	short NEXTENT ; 19/05/2019
 24018                                  RETFF:
 24019 00003DA1 C42E[8A05]              	LES	BP,[THISDPB]
 24020                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24021                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24022                                  	; 15/12/2022
 24023 00003DA5 268A6600                	MOV	AH,[ES:BP]
 24024                                  ;SETESRET:
 24025                                  	;PUSH	SS
 24026                                  	;POP	ES
 24027                                  	;retn
 24028                                  	; 24/01/2024
 24029 00003DA9 EBAB                    	jmp	short SETESRET
 24030                                  
 24031                                  ;----------------------------------------------------------------------------
 24032                                  ;
 24033                                  ; Procedure Name : MetaCompare
 24034                                  ;
 24035                                  ; Inputs:
 24036                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24037                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24038                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24039                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24040                                  ; Function:
 24041                                  ;	Compare FCB style names allowing for ? match to any char
 24042                                  ; Outputs:
 24043                                  ;	Zero if match else NZ
 24044                                  ; Destroys CX,SI,DI all others preserved
 24045                                  ;----------------------------------------------------------------------------
 24046                                  
 24047                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24048                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24049                                  
 24050                                  MetaCompare:
 24051 00003DAB B90B00                  	MOV	CX,11
 24052                                  WILDCRD:
 24053 00003DAE F3A6                    	REPE	CMPSB
 24054 00003DB0 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24055                                  CHECK_META:
 24056 00003DB2 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24057 00003DB7 74F5                    	JZ	short WILDCRD
 24058                                  MetaRet:
 24059 00003DB9 C3                       	retn				; Zero set, Match
 24060                                  
 24061                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24062                                  ;----------------------------------------------------------------------------
 24063                                  ;
 24064                                  ; Procedure Name : NEXTENTRY
 24065                                  ;
 24066                                  ; Inputs:
 24067                                  ;	Same as outputs of GETENTRY, above
 24068                                  ; Function:
 24069                                  ;	Update BX, and [LASTENT] for next directory entry.
 24070                                  ;	Carry set if no more.
 24071                                  ;----------------------------------------------------------------------------
 24072                                  
 24073                                  NEXTENTRY:
 24074                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24075                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24076                                  
 24077                                  	; 19/05/2019 - Retro DOS v4.0
 24078                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24079                                  
 24080                                  	; 27/07/2018 - Retro DOS v3.0
 24081                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24082                                  	; 15/03/2018 - Retro DOS v2.0
 24083                                  
 24084 00003DBA A1[4803]                	MOV	AX,[LASTENT]
 24085 00003DBD 3B06[DA05]              	CMP	AX,[ENTLAST]
 24086 00003DC1 7422                    	JZ	short NONE
 24087 00003DC3 40                      	INC	AX
 24088                                  	;ADD	BX,32
 24089 00003DC4 8D5F20                  	LEA	BX,[BX+32]
 24090 00003DC7 39D3                    	CMP	BX,DX
 24091                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24092                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24093                                  	; 16/12/2022
 24094 00003DC9 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24095 00003DCB 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24096 00003DCF FEC3                    	INC	BL
 24097 00003DD1 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24098 00003DD5 7215                    	JB	short SAMECLUS
 24099 00003DD7 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24100 00003DDB E8C716                  	call	IsEOF
 24101 00003DDE 7305                    	JAE	short NONE
 24102                                  	; 23/07/2019
 24103 00003DE0 83FB02                  	CMP	BX,2
 24104                                  	;JB	short NONE
 24105                                  	;JMP	short GETENT
 24106                                  	; 16/12/2022
 24107 00003DE3 732D                    	jnb	short GETENT
 24108                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24109                                  	;JB	short NONE
 24110                                  	;JMP	short GETENT
 24111                                  NONE:
 24112 00003DE5 F9                      	STC
 24113 00003DE6 C3                      	retn
 24114                                  HAVIT:
 24115 00003DE7 A3[4803]                	MOV	[LASTENT],AX
 24116 00003DEA F8                      	CLC
 24117                                  nextentry_retn:
 24118 00003DEB C3                      	retn
 24119                                  SAMECLUS:
 24120 00003DEC 881E[7305]              	MOV	[SECCLUSPOS],BL
 24121 00003DF0 A3[4803]                	MOV	[LASTENT],AX
 24122 00003DF3 1E                      	PUSH	DS
 24123 00003DF4 C53E[E205]              	LDS	DI,[CURBUF]
 24124                                  	; 19/05/2019
 24125                                  	; MSDOS 6.0
 24126                                  	;;mov	dx,[di+8]
 24127                                  	; 23/09/2023
 24128                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24129                                  ;hkn; SS override
 24130                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24131                                  	; 23/09/2023
 24132 00003DF8 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 24133                                  	
 24134                                  	;mov	dx,[di+6]
 24135 00003DFB 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24136                                  	;inc	dx ; MSDOS 3.3
 24137                                  	; MSDOS 6.0
 24138                                  	;ADD	DX,1				;AN000; >32mb
 24139                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24140                                  	; 23/09/2023
 24141 00003DFE 42                      	inc	dx
 24142 00003DFF 7501                    	jnz	short nextexntry_fc
 24143 00003E01 46                      	inc	si
 24144                                  	;inc	word [SS:HIGH_SECTOR]
 24145                                  nextexntry_fc:
 24146                                  	; 23/09/2023
 24147 00003E02 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 24148                                  	; MSDOS 3.3 & MSDOS 6.0
 24149 00003E07 1F                      	POP	DS
 24150 00003E08 E847F8                  	call	FIRSTCLUSTER
 24151 00003E0B 31DB                    	XOR	BX,BX
 24152 00003E0D EB23                    	JMP	short SETENTRY
 24153                                  
 24154                                  ;----------------------------------------------------------------------------
 24155                                  ;
 24156                                  ; Procedure Name : GETENTRY
 24157                                  ;
 24158                                  ; Inputs:
 24159                                  ;	[LASTENT] has directory entry
 24160                                  ;	ES:BP points to drive parameters
 24161                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24162                                  ; Function:
 24163                                  ;	Locates directory entry in preparation for search
 24164                                  ;	GETENT provides entry for passing desired entry in AX
 24165                                  ; Outputs:
 24166                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24167                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24168                                  ;	[LASTENT] = New directory entry number
 24169                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24170                                  ;	Carry set if error (currently user FAILed to I 24)
 24171                                  ;----------------------------------------------------------------------------
 24172                                  
 24173                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24174                                  GETENTRY:
 24175                                  	; 27/07/2018 - Retro DOS v3.0
 24176 00003E0F A1[4803]                	MOV	AX,[LASTENT]
 24177                                  
 24178                                  	;entry	GETENT
 24179                                  GETENT:
 24180 00003E12 A3[4803]                	MOV	[LASTENT],AX
 24181                                  ;
 24182                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24183                                  ; directory.
 24184                                  ;
 24185 00003E15 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24186 00003E17 D3C0                    	rol	ax,cl			; keep hight order bits
 24187 00003E19 89C2                    	mov	dx,ax
 24188                                  	; 19/05/2019 - Retro DOS v4.0
 24189                                  	;and	ax,0FFE0h
 24190                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24191                                  	;and	ax,~(32-1)		; mask off high order bits
 24192                                  	; 16/12/2022
 24193 00003E1B 24E0                    	and	al,0E0h ; ~31
 24194 00003E1D 83E21F                  	and	dx,1Fh
 24195                                  	;and	dx,32-1			; mask off low order bits
 24196                                  ;
 24197                                  ; DX:AX contain the byte offset of the required directory entry from the
 24198                                  ; beginning of the directory. Convert this to a sector number. Round the
 24199                                  ; sector size down to a multiple of 32.
 24200                                  ;
 24201                                  	;mov	bx,[es:bp+2]
 24202 00003E20 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24203 00003E24 80E3E0                  	and	bl,0E0h
 24204                                  	;AND	BL,255-31		; Must be multiple of 32
 24205 00003E27 F7F3                    	DIV	BX
 24206 00003E29 89D3                    	MOV	BX,DX			; Position within sector
 24207 00003E2B 53                      	PUSH	BX
 24208 00003E2C E8CFF7                  	call	DIRREAD
 24209 00003E2F 5B                      	POP	BX
 24210                                  	;retc
 24211 00003E30 72B9                    	jc	short nextentry_retn	
 24212                                  SETENTRY:
 24213 00003E32 8B16[E205]              	MOV	DX,[CURBUF]
 24214                                  	;add	dx,16 ; MSDOS 3.3
 24215                                  	;add	dx,20 ; MSDOS 6.0 
 24216 00003E36 83C214                  	ADD	DX,BUFINSIZ
 24217 00003E39 01D3                    	ADD	BX,DX
 24218                                  	;add	dx,[es:bp+2]
 24219 00003E3B 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24220                                  	; 29/12/2022
 24221                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24222 00003E3F F8                      	clc
 24223 00003E40 C3                      	retn
 24224                                  
 24225                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24226                                  ;----------------------------------------------------------------------------
 24227                                  ;
 24228                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24229                                  ;
 24230                                  ; Inputs:
 24231                                  ;	BX cluster number of start of directory
 24232                                  ;	ES:BP Points to DPB
 24233                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24234                                  ; Function:
 24235                                  ;	Set up a directory search
 24236                                  ; Outputs:
 24237                                  ;	[DIRSTART] = BX
 24238                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24239                                  ;	Carry set if error (currently user FAILed to I 24)
 24240                                  ; destroys AX,DX,BX
 24241                                  ;----------------------------------------------------------------------------
 24242                                  
 24243                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24244                                  SETDIRSRCH:
 24245 00003E41 09DB                    	OR	BX,BX
 24246 00003E43 7437                    	JZ	short SETROOTSRCH
 24247 00003E45 891E[C205]              	MOV	[DIRSTART],BX
 24248                                  	;mov	al,[es:bp+4]
 24249 00003E49 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24250 00003E4D FEC0                    	INC	AL
 24251 00003E4F A2[7705]                	MOV	[CLUSFAC],AL
 24252                                  
 24253                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24254                                  	;SAVE	<SI>
 24255 00003E52 56                      	push	si
 24256                                  	;test	byte [FastOpenFlg],2
 24257 00003E53 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24258 00003E58 7507                    	JNZ	short UNP_OK
 24259                                  
 24260                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24261                                  	;invoke	UNPACK
 24262 00003E5A E85F16                  	call	UNPACK
 24263 00003E5D 7302                    	JNC	short UNP_OK
 24264                                  	;RESTORE <SI>
 24265 00003E5F 5E                      	pop	si
 24266                                  	;return
 24267 00003E60 C3                      	retn
 24268                                  
 24269                                  UNP_OK:
 24270 00003E61 893E[BC05]              	MOV	[CLUSNUM],DI
 24271 00003E65 89DA                    	MOV	DX,BX
 24272 00003E67 30DB                    	XOR	BL,BL
 24273 00003E69 881E[7305]              	MOV	[SECCLUSPOS],BL
 24274                                  	;invoke	FIGREC
 24275 00003E6D E8F50E                  	call	FIGREC
 24276                                  	;RESTORE <SI>
 24277 00003E70 5E                      	pop	si
 24278                                  	
 24279                                  	; 19/05/2019 - Retro DOS v4.0
 24280                                  
 24281                                  	; MSDOS 6.0
 24282                                  	;PUSH	DX			   ;AN000; >32mb
 24283                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24284                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24285                                  	;POP	DX			   ;AN000; >32mb
 24286                                  
 24287                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24288                                  	;push	dx
 24289                                  	;mov	dx,[HIGH_SECTOR]
 24290                                  	;mov	[DIRSEC+2],dx
 24291                                  	;pop	dx
 24292                                  	;MOV	[DIRSEC],dx
 24293                                  	; 16/12/2022
 24294 00003E71 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24295 00003E74 A3[C005]                	mov	[DIRSEC+2],AX
 24296 00003E77 8916[BE05]              	MOV	[DIRSEC],DX
 24297                                  
 24298                                  	; 16/12/2022
 24299                                  	; cf=0 (at the return of FIGREC)
 24300                                  	;CLC
 24301 00003E7B C3                      	retn
 24302                                  
 24303                                  	;entry	SETROOTSRCH
 24304                                  SETROOTSRCH:
 24305 00003E7C 31C0                    	XOR	AX,AX
 24306 00003E7E A3[C205]                	MOV	[DIRSTART],AX
 24307                                  	; 22/09/2023
 24308 00003E81 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24309 00003E84 A2[7305]                	MOV	[SECCLUSPOS],AL
 24310 00003E87 48                      	DEC	AX
 24311 00003E88 A3[BC05]                	MOV	[CLUSNUM],AX
 24312                                  	;mov	ax,[es:bp+0Bh]
 24313 00003E8B 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24314                                  	; 19/05/2019
 24315                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24316                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24317 00003E8F 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24318 00003E93 29D0                    	SUB	AX,DX
 24319 00003E95 A2[7705]                	MOV	[CLUSFAC],AL
 24320 00003E98 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24321                                  	; 22/09/2023
 24322                                  	; MSDOS 6.0
 24323                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24324 00003E9C F8                      	CLC
 24325 00003E9D C3                      	retn
 24326                                  
 24327                                  ;============================================================================
 24328                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24329                                  ;============================================================================
 24330                                  ; 27/07/2018 - Retro DOS v3.0
 24331                                  ; 19/05/2019 - Retro DOS v4.0 
 24332                                  
 24333                                  ;	TITLE	DIR2 - Directory and path cracking
 24334                                  ;	NAME	Dir2
 24335                                  
 24336                                  ;Break	<GETPATH -- PARSE A WFP>
 24337                                  ;----------------------------------------------------------------------------
 24338                                  ;
 24339                                  ; Procedure Name : GETPATH
 24340                                  ;
 24341                                  ; Inputs:
 24342                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24343                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24344                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24345                                  ;		( = -1 if current dir not involved, else
 24346                                  ;		 Points to first char after last "/" of current dir part)
 24347                                  ;	[THISCDS] Points to CDS being used
 24348                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24349                                  ;	[NoSetDir] set
 24350                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24351                                  ; Function:
 24352                                  ;	Crack the path
 24353                                  ; Outputs:
 24354                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24355                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24356                                  ;	ID1 field of [THISCDS] updated appropriately
 24357                                  ;	[ATTRIB] = [SATTRIB]
 24358                                  ;	ES:BP Points to DPB
 24359                                  ;	Carry set if bad path
 24360                                  ;	   SI Points to path element causing failure
 24361                                  ;	   Zero set
 24362                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24363                                  ;	      start a search on the last directory
 24364                                  ;	      CL is zero if there is a bad name in the path
 24365                                  ;	      CL is non-zero if the name was simply not found
 24366                                  ;		 [ENTFREE] may have free spot in directory
 24367                                  ;		 [NAME1] is the name.
 24368                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24369                                  ;	   Zero reset
 24370                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24371                                  ;		or path too long or malformed path
 24372                                  ;	ELSE
 24373                                  ;	   [CurBuf] = -1 if root directory
 24374                                  ;	   [CURBUF] contains directory record with match
 24375                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24376                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24377                                  ;	   AH = device ID
 24378                                  ;	      bit 7 of AH set if device SI and BX
 24379                                  ;	      will point DOSGROUP relative The firclus
 24380                                  ;	      field of the device entry contains the device pointer
 24381                                  ;	   [NAME1] Has name looked for
 24382                                  ;	   If last element is a directory zero is set and:
 24383                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24384                                  ;	      are set up to start a search on it.
 24385                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24386                                  ;	      like that for a file (except for zero flag)
 24387                                  ;	   If last element is a file zero is reset
 24388                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24389                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24390                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24391                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24392                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24393                                  ; DS preserved, Others destroyed
 24394                                  ;---------------------------------------------------------------------------
 24395                                  
 24396                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24397                                  ;hkn; DS already set up at this point.
 24398                                  
 24399                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24400                                  GETPATH:
 24401                                  	;mov	word [CREATING],0E500h
 24402 00003E9E C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24403                                  
 24404                                  ; Same as GetPath only CREATING and DELALL already set
 24405                                  
 24406                                  	;entry	GetPathNoSet
 24407                                  GetPathNoSet:
 24408                                  	;mov	byte [EXTERR_LOCUS],2	
 24409 00003EA4 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24410 00003EA9 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24411                                  
 24412                                  ; See if the input indicates a device that has already been detected. If so,
 24413                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24414                                  
 24415 00003EAF 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24416                                  	;cmp	word [DI+1],5C3Ah
 24417                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24418 00003EB3 817D013A5C              	cmp	word [DI+1],':\'
 24419 00003EB8 7438                    	JZ	short CrackIt
 24420                                  
 24421                                  ; Let ChkDev find it in the device list
 24422                                  
 24423 00003EBA 83C703                  	ADD	DI,3
 24424                                  	; 18/08/2018
 24425                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24426                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24427                                  	; 16/12/2022
 24428                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24429 00003EBD E8AB00                  	CALL	CHKDEV
 24430 00003EC0 722E                    	JC	short InternalError
 24431                                  
 24432                                  Build_devJ:
 24433 00003EC2 A0[6D05]                	MOV	AL,[SATTRIB]
 24434 00003EC5 A2[6B05]                	MOV	[ATTRIB],AL
 24435                                  	;mov	byte [EXTERR_LOCUS],1
 24436 00003EC8 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24437                                  					; "finding" a char device
 24438                                  					; set LOCUS to Unknown. This makes
 24439                                  					; certain idiotic problems reported
 24440                                  					; by a certain 3 letter OEM go away.
 24441                                  
 24442                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24443                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24444                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24445                                  ; wfp into the share set.
 24446                                  ;
 24447                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24448                                  ; non-space seen +1.  This position is kept in DX.
 24449                                  
 24450                                  ;hkn; SS is DOSDATA
 24451 00003ECD 16                      	push	ss
 24452 00003ECE 07                      	pop	es
 24453                                  
 24454                                  ;hkn; NAME1 is in DOSDATA
 24455 00003ECF BE[4B05]                	mov	si,NAME1
 24456 00003ED2 8B3E[B205]              	mov	di,[WFP_START]
 24457 00003ED6 89FA                    	mov	dx,di
 24458 00003ED8 B90800                  	mov	cx,8			; 8 chars in device name
 24459                                  MoveLoop:
 24460 00003EDB AC                      	lodsb
 24461 00003EDC AA                      	stosb
 24462 00003EDD 3C20                    	cmp	al," "
 24463 00003EDF 7402                    	jz	short NoSave
 24464                                  
 24465 00003EE1 89FA                    	mov	dx,di
 24466                                  NoSave:
 24467 00003EE3 E2F6                    	loop	MoveLoop
 24468                                  
 24469                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24470                                  ; at this point.
 24471                                  
 24472 00003EE5 89D7                    	mov	di,dx
 24473 00003EE7 C60500                  	mov	byte [di],0		; end of string
 24474 00003EEA E8C402                  	call	Build_device_ent	; Clears carry sets zero
 24475 00003EED FEC0                    	INC	AL			; reset zero
 24476 00003EEF C3                      	retn
 24477                                  
 24478                                  InternalError:
 24479                                  InternalError_loop:
 24480 00003EF0 EBFE                    	JMP	short InternalError_loop	; freeze
 24481                                  
 24482                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24483                                  
 24484                                  CrackIt:
 24485 00003EF2 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24486 00003EF6 83FEFF                  	CMP	SI,-1			; valid?
 24487 00003EF9 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24488 00003EFB 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24489                                  LOOK_SING:
 24490                                  	;mov	byte [ATTRIB],16h
 24491 00003EFE C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24492                                  					; Attributes to search through Dirs
 24493 00003F03 C43E[A205]              	LES	DI,[THISCDS]
 24494 00003F07 B8FFFF                  	MOV	AX,-1
 24495                                  	;mov	bx,[es:di+73]
 24496 00003F0A 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24497 00003F0E 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24498                                  
 24499                                  ; AX = -1
 24500                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24501                                  ;      has been uncertainly changed.
 24502                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24503                                  ;      may be -1 if no current directory part has been used.
 24504                                  
 24505 00003F12 39C6                    	CMP	SI,AX			; if Current directory is not part
 24506 00003F14 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24507 00003F16 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24508                                  
 24509                                  ; DOS 3.3  6/25/86
 24510 00003F18 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24511                                  	;test	byte [FastOpenFlg],1
 24512 00003F1A F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24513 00003F1F 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24514 00003F21 06                      	PUSH	ES			; save registers
 24515 00003F22 57                      	PUSH	DI
 24516 00003F23 51                      	PUSH	CX
 24517 00003F24 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24518 00003F27 56                      	PUSH	SI
 24519 00003F28 53                      	PUSH	BX
 24520                                  
 24521 00003F29 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24522 00003F2D 8B36[B205]              	MOV	SI,[WFP_START]
 24523                                  
 24524                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24525 00003F31 BB[300D]                	MOV	BX,FastOpenTable
 24526 00003F34 BF[460D]                	MOV	DI,Dir_Info_Buff
 24527 00003F37 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24528                                  	;mov	al,1
 24529 00003F3A B001                    	MOV	AL,FONC_Look_up
 24530 00003F3C 1E                      	PUSH	DS
 24531 00003F3D 07                      	POP	ES
 24532                                  	;call	far [BX+2]
 24533 00003F3E FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24534 00003F41 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24535                                  					; Go to Got_Srch_cluster
 24536                                  	; 29/12/2022
 24537                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24538                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24539                                  	;stc
 24540                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24541                                  
 24542 00003F43 803C01                  	cmp	byte [si],1
 24543                                  GO_Chk_end1:	; 29/12/2022
 24544 00003F46 F5                      	cmc 
 24545                                  	; [si] = 0 -> cf = 0
 24546                                  	; [si] > 0 -> cf = 1
 24547                                  
 24548                                  ;GO_Chk_end1:
 24549                                  	; 29/12/2022
 24550                                  	;clc
 24551                                  
 24552                                  GO_Chk_end:				; restore registers
 24553 00003F47 5B                      	POP	BX
 24554 00003F48 5E                      	POP	SI
 24555 00003F49 8F44FF                  	POP	word [SI-1]
 24556 00003F4C 59                      	POP	CX
 24557 00003F4D 5F                      	POP	DI
 24558 00003F4E 07                      	POP	ES
 24559 00003F4F 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24560                                  
 24561                                  ; DOS 3.3  6/25/86
 24562                                  ;
 24563                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24564                                  ; of path and go crack from root.
 24565                                  
 24566                                  NO_CURR_D:
 24567 00003F51 8B36[B205]              	MOV	SI,[WFP_START]
 24568 00003F55 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24569 00003F58 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24570 00003F5C EB3B                    	JMP	short ROOTPATH
 24571                                  
 24572                                  ; We are able to crack from the current directory part. Go set up for search
 24573                                  ; of specified cluster.
 24574                                  
 24575                                  GOT_SEARCH_CLUSTER:
 24576 00003F5E C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24577 00003F62 E8DCFE                  	call	SETDIRSRCH
 24578                                  	;JC	short SETFERR
 24579                                  	;JMP	short FINDPATH
 24580                                  	; 16/12/2022
 24581 00003F65 7342                    	jnc	short FINDPATH ; 17/08/2018
 24582                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24583                                  	;JC	short SETFERR
 24584                                  	;JMP	short FINDPATH
 24585                                  SETFERR:
 24586 00003F67 30C9                    	XOR	CL,CL			; set zero
 24587 00003F69 F9                      	STC
 24588 00003F6A C3                      	retn
 24589                                  
 24590                                  ;---------------------------------------------------------------------------
 24591                                  ;
 24592                                  ; Procedure Name : ChkDev
 24593                                  ;
 24594                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24595                                  ;   device.
 24596                                  ; Blasts CX,SI,DI,AX,BX
 24597                                  ;---------------------------------------------------------------------------
 24598                                  
 24599                                  CHKDEV:
 24600 00003F6B 89FE                    	MOV	SI,DI
 24601 00003F6D 8CD7                    	MOV	DI,SS
 24602 00003F6F 8EC7                    	MOV	ES,DI
 24603                                  
 24604 00003F71 BF[4B05]                	MOV	DI,NAME1
 24605 00003F74 B90900                  	MOV	CX,9
 24606                                  TESTLOOP:
 24607 00003F77 E84910                  	call	GETLET
 24608                                  
 24609 00003F7A 3C2E                    	CMP	AL,'.'
 24610 00003F7C 740E                    	JZ	short TESTDEVICE
 24611 00003F7E E89810                  	call	PATHCHRCMP
 24612 00003F81 7407                    	JZ	short NOTDEV
 24613 00003F83 08C0                    	OR	AL,AL
 24614 00003F85 7405                    	JZ	short TESTDEVICE
 24615                                  
 24616 00003F87 AA                      	STOSB
 24617 00003F88 E2ED                    	LOOP	TESTLOOP
 24618                                  NOTDEV:
 24619 00003F8A F9                      	STC
 24620 00003F8B C3                      	retn
 24621                                  
 24622                                  TESTDEVICE:
 24623                                  	;ADD	CX,2
 24624                                  	; 24/09/2023
 24625 00003F8C 41                      	inc	cx
 24626 00003F8D 41                      	inc	cx
 24627 00003F8E B020                    	MOV	AL,' '
 24628 00003F90 F3AA                    	REP	STOSB
 24629 00003F92 8CD0                    	MOV	AX,SS
 24630 00003F94 8ED8                    	MOV	DS,AX
 24631                                  	;call	DEVNAME
 24632                                  	;retn
 24633                                  	; 18/12/2022
 24634 00003F96 E9B901                  	jmp	DEVNAME
 24635                                  
 24636                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24637                                  ;----------------------------------------------------------------------------
 24638                                  ;
 24639                                  ; Procedure Name : ROOTPATH,FINDPATH
 24640                                  ;
 24641                                  ; Inputs:
 24642                                  ;	Same as FINDPATH but,
 24643                                  ;	SI Points to asciz string of path which is assumed to start at
 24644                                  ;		the root (no leading '/').
 24645                                  ; Function:
 24646                                  ;	Search from root for path
 24647                                  ; Outputs:
 24648                                  ;	Same as FINDPATH but:
 24649                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24650                                  ;	[NoSetDir] is ignored.
 24651                                  ;----------------------------------------------------------------------------
 24652                                  
 24653                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24654                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24655                                  
 24656                                  ROOTPATH:
 24657 00003F99 E8E0FE                  	call	SETROOTSRCH
 24658                                  	; 24/09/2023
 24659 00003F9C 30E4                    	xor	ah,ah
 24660                                  	;CMP	BYTE [SI],0
 24661 00003F9E 3824                    	cmp	[si],ah ; 0
 24662 00003FA0 7507                    	JNZ	short FINDPATH
 24663                                  
 24664                                  ; Root dir specified
 24665 00003FA2 A0[6D05]                	MOV	AL,[SATTRIB]
 24666 00003FA5 A2[6B05]                	MOV	[ATTRIB],AL
 24667                                  	; 24/09/2023
 24668                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24669                                  					; (dir), clears carry.
 24670 00003FA8 C3                      	retn
 24671                                  
 24672                                  ; Inputs:
 24673                                  ;	[ATTRIB] Set to get through directories
 24674                                  ;	[SATTRIB] Set to find last element
 24675                                  ;	ES:BP Points to DPB
 24676                                  ;	SI Points to asciz string of path (no leading '/').
 24677                                  ;	[SECCLUSPOS] = 0
 24678                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24679                                  ;	[CLUSNUM] = Cluster # of next cluster
 24680                                  ;	[CLUSFAC] = Sectors per cluster
 24681                                  ;	[NoSetDir] set
 24682                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24683                                  ;		( = -1 if current dir not involved, else
 24684                                  ;		 Points to first char after last "/" of current dir part)
 24685                                  ;	[THISCDS] Points to CDS being used
 24686                                  ;	[CREATING] and [DELALL] set
 24687                                  ; Function:
 24688                                  ;	Parse path name
 24689                                  ; Outputs:
 24690                                  ;	ID1 field of [THISCDS] updated appropriately
 24691                                  ;	[ATTRIB] = [SATTRIB]
 24692                                  ;	ES:BP Points to DPB
 24693                                  ;	[THISDPB] = ES:BP
 24694                                  ;	Carry set if bad path
 24695                                  ;	   SI Points to path element causing failure
 24696                                  ;	   Zero set
 24697                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24698                                  ;	      start a search on the last directory
 24699                                  ;	      CL is zero if there is a bad name in the path
 24700                                  ;	      CL is non-zero if the name was simply not found
 24701                                  ;		 [ENTFREE] may have free spot in directory
 24702                                  ;		 [NAME1] is the name.
 24703                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24704                                  ;	   Zero reset
 24705                                  ;	      File in middle of path or bad name in path
 24706                                  ;		or path too long or malformed path
 24707                                  ;	ELSE
 24708                                  ;	   [CURBUF] contains directory record with match
 24709                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24710                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24711                                  ;	   [NAME1] Has name looked for
 24712                                  ;	   AH = device ID
 24713                                  ;	      bit 7 of AH set if device SI and BX
 24714                                  ;	      will point DOSGROUP relative The firclus
 24715                                  ;	      field of the device entry contains the device pointer
 24716                                  ;	   If last element is a directory zero is set and:
 24717                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24718                                  ;	      are set up to start a search on it,
 24719                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24720                                  ;	      like that for a file (except for zero flag)
 24721                                  ;	   If last element is a file zero is reset
 24722                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24723                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24724                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24725                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24726                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24727                                  ; Destroys all other registers
 24728                                  
 24729                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24730                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24731                                  
 24732                                      	;entry	FINDPATH
 24733                                  FINDPATH:
 24734 00003FA9 06                      	PUSH	ES			; Save ES:BP
 24735 00003FAA 56                      	PUSH	SI
 24736 00003FAB 89F7                    	MOV	DI,SI
 24737 00003FAD 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24738 00003FB1 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24739 00003FB6 740E                    	JZ	short NOIDS		; No current dir part
 24740 00003FB8 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24741 00003FBC 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24742 00003FBE C43E[A205]              	LES	DI,[THISCDS]
 24743                                  	;mov	[es:di+73],cx
 24744 00003FC2 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24745                                  NOIDS:
 24746                                  
 24747                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24748                                  ; character in the string. CX,DI may be destroyed.
 24749                                  ;
 24750                                  ;	invoke	NAMETRANS
 24751                                  ;	MOV	CL,AL
 24752                                  ;
 24753                                  ; The above is the slow method. The name has *already* been munged by
 24754                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24755                                  ; the name until ., \ or 0 is hit.
 24756                                  
 24757 00003FC6 8CD0                    	MOV	AX,SS
 24758 00003FC8 8EC0                    	MOV	ES,AX
 24759                                  
 24760                                  ;hkn; Name1 is in DOSDATA
 24761 00003FCA BF[4B05]                	MOV	DI,NAME1
 24762 00003FCD B82020                  	MOV	AX,'  ' ; 2020h
 24763 00003FD0 AA                      	STOSB
 24764 00003FD1 AB                      	STOSW
 24765 00003FD2 AB                      	STOSW
 24766 00003FD3 AB                      	STOSW
 24767 00003FD4 AB                      	STOSW
 24768 00003FD5 AB                      	STOSW
 24769                                  
 24770                                  ;hkn; Name1 is in DOSDATA
 24771 00003FD6 BF[4B05]                	MOV	DI,NAME1
 24772 00003FD9 30E4                    	XOR	AH,AH			; bits for CL
 24773                                  GetNam:
 24774                                  	; 19/05/2019 - Retro DOS v4.0
 24775                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24776                                  
 24777                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24778                                  	; 16/12/2022
 24779                                  	;inc	cl ; not required !	
 24780                                  	
 24781 00003FDB AC                      	LODSB
 24782 00003FDC 3C2E                    	CMP	AL,'.'	; 2Eh
 24783 00003FDE 7412                    	JZ	short _SetExt
 24784 00003FE0 08C0                    	OR	AL,AL
 24785 00003FE2 7424                    	JZ	short _GetDone
 24786 00003FE4 3C5C                    	CMP	AL,'\'	; 5Ch
 24787 00003FE6 7420                    	JZ	short _GetDone
 24788 00003FE8 3C3F                    	CMP	AL,'?'	; 3Fh
 24789 00003FEA 7503                    	JNZ	short StoNam
 24790 00003FEC 80CC01                  	OR	AH,1
 24791                                  StoNam: 
 24792 00003FEF AA                      	STOSB
 24793 00003FF0 EBE9                    	JMP	short GetNam
 24794                                  _SetExt:
 24795 00003FF2 BF[5305]                	MOV	DI,NAME1+8
 24796                                  GetExt:
 24797 00003FF5 AC                      	LODSB
 24798 00003FF6 08C0                    	OR	AL,AL
 24799 00003FF8 740E                    	JZ	short _GetDone
 24800 00003FFA 3C5C                    	CMP	AL,'\'
 24801 00003FFC 740A                    	JZ	short _GetDone
 24802 00003FFE 3C3F                    	CMP	AL,'?'
 24803 00004000 7503                    	JNZ	short StoExt
 24804 00004002 80CC01                  	OR	AH,1
 24805                                  StoExt: 
 24806 00004005 AA                      	STOSB
 24807 00004006 EBED                    	JMP	short GetExt
 24808                                  _GetDone:
 24809 00004008 4E                      	DEC	SI
 24810 00004009 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24811 0000400B 80C980                  	OR	CL,80H
 24812 0000400E 5F                      	POP	DI			; Start of this element
 24813 0000400F 07                      	POP	ES			; Restore ES:BP
 24814 00004010 39FE                    	CMP	SI,DI
 24815 00004012 7503                    	JNZ	short check_device
 24816 00004014 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24817                                  check_device:
 24818 00004017 56                      	PUSH	SI			; Start of next element
 24819                                  	;MOV	AL,[SI]
 24820                                  	;OR	AL,AL
 24821                                  	; 23/09/2023
 24822 00004018 803C00                  	cmp	byte [si],0
 24823 0000401B 7508                    	JNZ	short NOT_LAST
 24824                                  
 24825                                  ; for last element of the path switch to the correct search attributes
 24826                                  
 24827 0000401D 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24828 00004021 883E[6B05]              	MOV	[ATTRIB],BH
 24829                                  
 24830                                  NOT_LAST:
 24831                                  
 24832                                  ; check name1 to see if we have a device...
 24833                                  
 24834 00004025 06                      	PUSH	ES			; Save ES:BP
 24835                                  
 24836                                  ;hkn; SS is DOSDATA
 24837                                  	;context ES
 24838 00004026 16                      	push	ss
 24839 00004027 07                      	pop	es
 24840 00004028 E82701                  	call	DEVNAME 		; blast BX
 24841 0000402B 07                      	POP	ES			; Restore ES:BP
 24842 0000402C 720B                    	JC	short FindFile		; Not a device
 24843 0000402E 08C0                    	OR	AL,AL			; Test next char again
 24844 00004030 7403                    	JZ	short GO_BDEV
 24845 00004032 E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24846                                  
 24847                                  GO_BDEV:
 24848 00004035 5E                      	POP	SI			; Points to NUL at end of path
 24849 00004036 E989FE                  	JMP	Build_devJ
 24850                                  
 24851                                  FindFile:
 24852                                  ;;;; 7/28/86
 24853 00004039 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24854 0000403E 7505                    	JNZ	short NOE5		; no
 24855 00004040 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24856                                  NOE5:
 24857                                  ;;;; 7/28/86
 24858 00004045 57                      	PUSH	DI			; Start of this element
 24859 00004046 06                      	PUSH	ES			; Save ES:BP
 24860 00004047 51                      	PUSH	CX			; CL return from NameTrans
 24861                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24862                                  
 24863 00004048 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24864 0000404B 7303                    	JNC	short DIR_FOUND		; found dir entry
 24865                                  
 24866                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24867 0000404D E8B3FC                  	call	FINDENTRY
 24868                                  DIR_FOUND:
 24869 00004050 59                      	POP	CX
 24870 00004051 07                      	POP	ES
 24871 00004052 5F                      	POP	DI
 24872 00004053 7303                    	JNC	short LOAD_BUF
 24873 00004055 E9CA00                  	JMP	BADPATHPOP
 24874                                  
 24875                                  LOAD_BUF:
 24876 00004058 C53E[E205]              	LDS	DI,[CURBUF]
 24877                                  	;test	byte [bx+0Bh],10h
 24878 0000405C F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24879 00004060 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24880 00004062 E99800                  	JMP	FILEINPATH		; Error or end of path
 24881                                  
 24882                                  ; if we are not setting the directory, then check for end of string
 24883                                  
 24884                                  GO_NEXT:
 24885                                  ;hkn; SS override
 24886 00004065 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24887 0000406B 7423                    	JZ	short SetDir
 24888 0000406D 89FA                    	MOV	DX,DI			; Save pointer to entry
 24889 0000406F 8CD9                    	MOV	CX,DS
 24890                                  
 24891                                  ;hkn; SS is DOSDATA
 24892                                  	;context DS
 24893 00004071 16                      	push	ss
 24894 00004072 1F                      	pop	ds
 24895 00004073 5F                      	POP	DI			; Start of next element
 24896                                  	; 19/05/2019 - Retro DOS v4.0
 24897                                  	; MSDOS 6.0
 24898 00004074 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24899 00004079 740B                    	JZ	short _nofast			; the FastOpen
 24900 0000407B F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24901 00004080 7404                    	JZ	short _nofast			; no
 24902 00004082 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24903                                  _nofast:
 24904 00004086 803D00                  	CMP	BYTE [DI],0
 24905                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24906                                  	;;JMP	_SETRET  ; retn		; Got it
 24907                                  	;retn	; 05/09/2018
 24908                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24909                                  	;jmp	_SETRET
 24910                                  	; 16/12/2022
 24911 00004089 7421                    	jz	short _SETRET
 24912                                  
 24913                                  NEXT_ONE:
 24914 0000408B 57                      	PUSH	DI			; Put start of next element back on stack
 24915 0000408C 89D7                    	MOV	DI,DX
 24916 0000408E 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24917                                  SetDir:
 24918 00004090 8B14                    	MOV	DX,[SI] 		; Dir_first
 24919                                  
 24920                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24921 00004092 1E                      	PUSH	DS		      ; save [curbuf+2]
 24922                                  ;hkn; SS is DOSDATA
 24923 00004093 16                      	push	ss
 24924 00004094 1F                      	pop	ds		      ; set DS Dosgroup
 24925                                  	;test	byte [FastOpenFlg],2
 24926 00004095 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24927 0000409A 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24928 0000409C 89D3                    	MOV	BX,DX		      ; not found
 24929 0000409E 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24930 000040A2 50                      	PUSH	AX		      ; save device id (AH)
 24931 000040A3 E89BFD                  	call	SETDIRSRCH
 24932 000040A6 58                      	POP	AX		      ; restore device id (AH)
 24933 000040A7 83C402                  	ADD	SP,2		      ; pop ds in stack
 24934 000040AA EB37                    	JMP	short FAST_OPEN_SKIP
 24935                                  
 24936                                  	; 16/12/2022
 24937                                  _SETRET:
 24938 000040AC C3                      	retn
 24939                                  
 24940                                  DO_NORMAL:
 24941 000040AD 1F                      	POP	DS			; DS = [curbuf + 2]
 24942                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24943                                  
 24944 000040AE 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24945 000040B0 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24946 000040B2 53                      	PUSH	BX
 24947 000040B3 50                      	PUSH	AX
 24948 000040B4 56                      	PUSH	SI
 24949 000040B5 51                      	PUSH	CX
 24950                                  	;push	word [di+6]
 24951 000040B6 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24952                                  	; 19/05/2019
 24953                                  	; MSDOS 6.0
 24954                                  	;push	word [di+8]
 24955 000040B9 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24956 000040BC 89D3                    	MOV	BX,DX
 24957                                  
 24958                                  ;hkn; SS is DOSDATA
 24959                                  	;context DS
 24960 000040BE 16                      	push	ss
 24961 000040BF 1F                      	pop	ds
 24962                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24963 000040C0 E87EFD                  	call	SETDIRSRCH		; the entry sector buffer
 24964                                  	; 19/05/2019
 24965                                  	; MSDOS 6.0
 24966 000040C3 8F06[0706]              	POP	word [HIGH_SECTOR]
 24967 000040C7 5A                      	POP	DX
 24968 000040C8 7203                    	JC	short SKIP_GETB
 24969                                  	; 22/09/2023
 24970                                  	;;mov	byte [ALLOWED],18h
 24971                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24972                                  	;XOR	AL,AL ; *
 24973                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24974                                  	;call	GETBUFFR
 24975 000040CA E8FA17                  	call	GETBUFFER ; * ; pre-read
 24976                                  SKIP_GETB:
 24977 000040CD 59                      	POP	CX
 24978 000040CE 5E                      	POP	SI
 24979 000040CF 58                      	POP	AX
 24980 000040D0 5B                      	POP	BX
 24981 000040D1 7305                    	JNC	short SET_THE_BUF
 24982 000040D3 5F                      	POP	DI			; Start of next element
 24983 000040D4 89FE                    	MOV	SI,DI			; Point with SI
 24984 000040D6 EB21                    	JMP	SHORT _BADPATH
 24985                                  
 24986                                  SET_THE_BUF:
 24987 000040D8 E87CF5                  	call	SET_BUF_AS_DIR
 24988 000040DB 8B3E[E205]              	MOV	DI,[CURBUF]
 24989 000040DF 01FE                    	ADD	SI,DI			; Get the offsets back
 24990 000040E1 01FB                    	ADD	BX,DI
 24991                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24992                                  FAST_OPEN_SKIP:
 24993 000040E3 5F                      	POP	DI			; Start of next element
 24994 000040E4 E89D02                  	CALL	InsertPath		; insert dir entry info
 24995                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24996 000040E7 8A05                    	MOV	AL,[DI]
 24997 000040E9 08C0                    	OR	AL,AL
 24998 000040EB 74BF                    	JZ	short _SETRET		; At end
 24999 000040ED 47                      	INC	DI			; Skip over "/"
 25000 000040EE 89FE                    	MOV	SI,DI			; Point with SI
 25001 000040F0 E8260F                  	call	PATHCHRCMP
 25002 000040F3 7503                    	JNZ	short find_bad_name	; oops
 25003 000040F5 E9B1FE                  	JMP	FINDPATH		; Next element
 25004                                  
 25005                                  find_bad_name:
 25006 000040F8 4E                      	DEC	SI			; Undo above INC to get failure point
 25007                                  _BADPATH:
 25008 000040F9 30C9                    	XOR	CL,CL			; Set zero
 25009 000040FB EB2C                    	JMP	SHORT BADPRET
 25010                                  
 25011                                  FILEINPATH:
 25012 000040FD 5F                      	POP	DI			; Start of next element
 25013                                  
 25014                                  ;hkn; SS is DOSDATA
 25015                                  	;context DS			; Got to from one place with DS gone
 25016 000040FE 16                      	push	ss
 25017 000040FF 1F                      	pop	ds
 25018                                  
 25019                                  ; DOS 3.3 FastOpen
 25020                                  	;test	byte [FastOpenFlg],1
 25021 00004100 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25022 00004105 740B                    	JZ	short NO_FAST		; device info to fastopen
 25023                                  	;test	byte [FastOpenFlg],2
 25024 00004107 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25025 0000410C 7404                    	JZ	short NO_FAST
 25026 0000410E 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25027                                  					 ; success
 25028                                  NO_FAST:
 25029                                  ; DOS 3.3 FastOpen
 25030 00004112 8A05                    	MOV	AL,[DI]
 25031 00004114 08C0                    	OR	AL,AL
 25032 00004116 7404                    	JZ	short INCRET
 25033 00004118 89FE                    	MOV	SI,DI			; Path too long
 25034 0000411A EB0D                    	JMP	SHORT BADPRET
 25035                                  
 25036                                  INCRET:
 25037                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25038                                  
 25039 0000411C E86502                  	CALL   InsertPath		; insert dir entry info
 25040                                  
 25041                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25042 0000411F FEC0                    	INC	AL			; Reset zero
 25043                                  	; 16/12/2022	
 25044                                  ;_SETRET:
 25045 00004121 C3                      	retn
 25046                                  
 25047                                  BADPATHPOP:
 25048 00004122 5E                      	POP	SI			; Start of next element
 25049 00004123 8A04                    	MOV	AL,[SI]
 25050 00004125 89FE                    	MOV	SI,DI			; Start of bad element
 25051 00004127 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25052                                  BADPRET:
 25053 00004129 A0[6D05]                	MOV	AL,[SATTRIB]
 25054 0000412C A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25055 0000412F F9                      	STC
 25056 00004130 C3                      	retn
 25057                                  
 25058                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25059                                  ;---------------------------------------------------------------------------
 25060                                  ;
 25061                                  ; Procedure Name : STARTSRCH
 25062                                  ;
 25063                                  ; Inputs:
 25064                                  ;	[THISDPB] Set
 25065                                  ; Function:
 25066                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25067                                  ; Outputs:
 25068                                  ;	ES:BP = Drive parameters
 25069                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25070                                  ; Destroys ES,BP,AX
 25071                                  ;--------------------------------------------------------------------------
 25072                                  
 25073                                  STARTSRCH:
 25074 00004131 C42E[8A05]              	LES	BP,[THISDPB]
 25075 00004135 31C0                    	XOR	AX,AX
 25076 00004137 A3[4803]                	MOV	[LASTENT],AX
 25077 0000413A A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25078 0000413D 48                      	DEC	AX
 25079 0000413E A3[D805]                	MOV	[ENTFREE],AX
 25080 00004141 A3[DA05]                	MOV	[ENTLAST],AX
 25081 00004144 C3                      	retn
 25082                                  
 25083                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25084                                  ;----------------------------------------------------------------------------
 25085                                  ; Procedure Name : MatchAttributes
 25086                                  ;
 25087                                  ; Input:    [Attrib] = attribute to search for
 25088                                  ;	    CH = found attribute
 25089                                  ; Output:   JZ <match>
 25090                                  ;	    JNZ <nomatch>
 25091                                  ; Registers modified: noneski
 25092                                  ;----------------------------------------------------------------------------
 25093                                  
 25094                                  MatchAttributes:
 25095 00004145 50                      	PUSH	AX
 25096                                  
 25097                                  ;hkn; SS override
 25098 00004146 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25099 0000414A F6D0                    	NOT	AL			; AL <- SearchSet'
 25100 0000414C 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25101                                  	;and	al,16h
 25102 0000414E 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25103                                  ;
 25104                                  ; the result is non-zero if an attribute is not in the search set
 25105                                  ; and in the found set and in the important set. This means that we do not
 25106                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25107                                  ;
 25108 00004150 58                      	POP	AX
 25109 00004151 C3                      	retn
 25110                                  
 25111                                  ; 19/05/2019 - Retro DOS v4.0
 25112                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25113                                  
 25114                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25115                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25116                                  
 25117                                  ;Break <DevName - Look for name of device>
 25118                                  ;---------------------------------------------------------------------------
 25119                                  ;
 25120                                  ; Procedure Name : DevName
 25121                                  ;
 25122                                  ; Inputs:
 25123                                  ;	DS,ES:DOSDATA
 25124                                  ;	Filename in NAME1
 25125                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25126                                  ; Function:
 25127                                  ;	Determine if file is in list of I/O drivers
 25128                                  ; Outputs:
 25129                                  ;	Carry set if not a device
 25130                                  ;	ELSE
 25131                                  ;	Zero flag set
 25132                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25133                                  ;	     bits 0-4 set from low byte of attribute word
 25134                                  ;	DEVPT = DWORD pointer to Device header of device
 25135                                  ; BX destroyed, others preserved
 25136                                  ;---------------------------------------------------------------------------
 25137                                  
 25138                                  DEVNAME:
 25139                                  	; 28/07/2018 - Retro DOS v3.0
 25140                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25141                                  
 25142 00004152 56                      	PUSH	SI
 25143 00004153 57                      	PUSH	DI
 25144 00004154 51                      	PUSH	CX
 25145 00004155 50                      	PUSH	AX
 25146                                  
 25147                                  ; E5 special code
 25148 00004156 FF36[4B05]              	PUSH	WORD [NAME1]
 25149 0000415A 803E[4B05]05            	CMP	byte [NAME1],5
 25150 0000415F 7505                    	JNZ	short NOKTR
 25151 00004161 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25152                                  NOKTR:
 25153                                  	;test	byte [ATTRIB],8
 25154 00004166 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25155                                  					; If looking for VOL id don't find devs
 25156 0000416B 7521                    	JNZ	short RET31
 25157                                  
 25158                                  ;hkn; NULDEV is in DOSDATA
 25159 0000416D BE[4800]                	MOV	SI,NULDEV
 25160                                  LOOKIO:
 25161                                  	; 21/11/2022
 25162                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25163                                  	; 17/12/2022
 25164                                  	;test	byte [si+5],80h
 25165 00004170 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25166                                  	;;test	word [si+4],8000h
 25167                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25168 00004174 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25169 00004176 89F0                    	MOV	AX,SI
 25170                                  	;add	si,10
 25171 00004178 83C60A                  	ADD	SI,SYSDEV.NAME
 25172                                  
 25173                                  ;hkn; NAME1 is in DOSDATA
 25174 0000417B BF[4B05]                	MOV	DI,NAME1
 25175 0000417E B90400                  	MOV	CX,4			; All devices are 8 letters
 25176 00004181 F3A7                    	REPE	CMPSW			; Check for name in list
 25177 00004183 89C6                    	MOV	SI,AX
 25178 00004185 7415                    	JZ	short IOCHK		; Found it?
 25179                                  SKIPDEV:
 25180 00004187 C534                    	LDS	SI,[SI]			; Get address of next device
 25181 00004189 83FEFF                  	CMP	SI,-1			; At end of list?
 25182 0000418C 75E2                    	JNZ	short LOOKIO
 25183                                  RET31:	
 25184 0000418E F9                      	STC				; Not found
 25185                                  RETNV:	
 25186 0000418F 8CD1                    	MOV	CX,SS
 25187 00004191 8ED9                    	MOV	DS,CX
 25188                                  
 25189 00004193 8F06[4B05]              	POP	WORD [NAME1]
 25190 00004197 58                      	POP	AX
 25191 00004198 59                      	POP	CX
 25192 00004199 5F                      	POP	DI
 25193 0000419A 5E                      	POP	SI
 25194 0000419B C3                      	RETN
 25195                                  
 25196                                  IOCHK:
 25197                                  ;hkn; SS override for DEVPT
 25198 0000419C 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25199                                  	;mov	bh,[si+4]
 25200 000041A1 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25201 000041A4 80CFC0                  	OR	BH,0C0h
 25202 000041A7 80E7DF                  	and	bh,0DFh
 25203                                  	;AND	BH,~(020h)		; Clears Carry
 25204 000041AA 368936[9A05]            	MOV	[SS:DEVPT],SI
 25205 000041AF EBDE                    	JMP	short RETNV
 25206                                  
 25207                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25208                                  ;---------------------------------------------------------------------------
 25209                                  ; Procedure Name : Build_device_ent
 25210                                  ;
 25211                                  ; Inputs:
 25212                                  ;	[NAME1] has name
 25213                                  ;	BH is attribute field (supplied by DEVNAME)
 25214                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25215                                  ; Function:
 25216                                  ;	Build a directory entry for a device at DEVFCB
 25217                                  ; Outputs:
 25218                                  ;	BX points to DEVFCB
 25219                                  ;	SI points to dir_first field
 25220                                  ;	AH = input BH
 25221                                  ;	AL = 0
 25222                                  ;	dir_first = DEVPT
 25223                                  ;	Zero Set, Carry Clear
 25224                                  ; DS,ES,BP preserved, others destroyed
 25225                                  ;--------------------------------------------------------------------------
 25226                                  
 25227                                  Build_device_ent:
 25228 000041B1 B82020                  	MOV	AX,"  " ; 2020h
 25229                                  
 25230                                  ;hkn; DEVFCB is in DOSDATA
 25231 000041B4 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25232                                  
 25233                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25234                                  
 25235 000041B7 AB                      	STOSW
 25236 000041B8 AA                      	STOSB				; Blank out extent field
 25237                                  	;mov	al,40h
 25238 000041B9 B040                    	MOV	AL,attr_device
 25239                                  
 25240                                  ;	Fill Dir_attr
 25241                                  
 25242 000041BB AA                      	STOSB				; Set attribute field
 25243 000041BC 31C0                    	XOR	AX,AX
 25244 000041BE B90A00                  	MOV	CX,10
 25245                                  
 25246                                  ; Fill dir_pad
 25247                                  
 25248 000041C1 F3AB                    	REP	STOSW			; Fill rest with zeros
 25249 000041C3 E82AC9                  	call	DATE16
 25250                                  
 25251                                  ;hkn; DEVFCB is in DOSDATA
 25252 000041C6 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25253 000041C9 92                      	XCHG	AX,DX
 25254                                  
 25255                                  ; Fill dir_time
 25256                                  
 25257 000041CA AB                      	STOSW
 25258 000041CB 92                      	XCHG	AX,DX
 25259                                  
 25260                                  ; Fill dir_date
 25261                                  
 25262 000041CC AB                      	STOSW
 25263 000041CD 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25264 000041CF A1[9A05]                	MOV	AX,[DEVPT]
 25265                                  
 25266                                  ; Fill dir_first
 25267                                  
 25268 000041D2 AB                      	STOSW				; Dir_first points to device
 25269 000041D3 A1[9C05]                	MOV	AX,[DEVPT+2]
 25270                                  ;
 25271                                  ; Fill dir_size_l
 25272                                  ;
 25273 000041D6 AB                      	STOSW
 25274 000041D7 88FC                    	MOV	AH,BH			; Put device atts in AH
 25275                                  
 25276                                  ;hkn; DEVFCB is in DOSDATA
 25277 000041D9 BB[4B05]                	MOV	BX,DEVFCB
 25278 000041DC 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25279 000041DE C3                      	retn
 25280                                  
 25281                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25282                                  ;----------------------------------------------------------------------------
 25283                                  ;
 25284                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25285                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25286                                  ;   If invalid, reset original CDS to root.
 25287                                  ;
 25288                                  ;   Inputs:	ThisCDS points to CDS of interest
 25289                                  ;		SS:DI points to temp buffer
 25290                                  ;   Outputs:	The current directory string is validated on the appropriate
 25291                                  ;		    drive
 25292                                  ;		ThisDPB changed
 25293                                  ;		ES:DI point to CDS
 25294                                  ;		Carry set if error (currently user FAILed to I 24)
 25295                                  ;   Registers modified: all
 25296                                  ;----------------------------------------------------------------------------
 25297                                  
 25298                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25299                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25300                                  
 25301                                  ValidateCDS:
 25302                                  	; 19/05/2019 - Retro DOS v4.0
 25303                                  	; 28/07/2018 - Retro DOS v3.0
 25304                                  
 25305                                     %define  Temp	[bp-2]	; word
 25306                                     %define  SaveCDS	[bp-6]	; dword
 25307                                     %define  SaveCDSL	[bp-6]	; word
 25308                                     %define  SaveCDSH	[bp-4]	; word
 25309                                  
 25310                                  	;Enter
 25311 000041DF 55                      	push	bp
 25312 000041E0 89E5                    	mov	bp,sp
 25313 000041E2 83EC06                  	sub	sp,6
 25314                                  
 25315 000041E5 897EFE                  	MOV	Temp,DI
 25316                                  
 25317                                  ;hkn; SS override
 25318 000041E8 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25319 000041ED 8976FA                  	MOV	SaveCDSL,SI
 25320 000041F0 8C5EFC                  	MOV	SaveCDSH,DS
 25321                                  	;EnterCrit critDisk
 25322 000041F3 E817D1                  	call	ECritDisk
 25323                                  	; 21/11/2022
 25324                                  	;test	byte [SI+curdir.flags+1],80h
 25325                                  	;test	word [si+67],8000h
 25326                                  	; 17/12/2022
 25327                                  	;test	byte [SI+68],80h
 25328 000041F6 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25329                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25330 000041FA 7403                    	JZ	short _DoSplice
 25331 000041FC E99200                  	JMP	FatFail
 25332                                  _DoSplice:
 25333 000041FF 30D2                    	XOR	DL,DL
 25334 00004201 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25335                                  
 25336                                  ;hkn; SS is DOSDATA
 25337                                  	;Context ES
 25338 00004206 16                      	push	ss
 25339 00004207 07                      	pop	es
 25340                                  	;Invoke	FStrcpy
 25341 00004208 E8D7CF                  	call	FStrCpy
 25342 0000420B 8B76FE                  	MOV	SI,Temp
 25343                                  
 25344                                  ;hkn; SS is DOSDATA
 25345                                  	;Context DS
 25346 0000420E 16                      	push	ss
 25347 0000420F 1F                      	pop	ds	
 25348                                  	;Invoke	Splice
 25349 00004210 E85D2B                  	call	Splice
 25350                                  
 25351                                   ;hkn; SS is DOSDATA
 25352                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25353 00004213 16                      	push	ss
 25354 00004214 1F                      	pop	ds
 25355 00004215 8816[4C03]              	MOV	[NoSetDir],DL
 25356 00004219 C43E[A205]              	LES	DI,[THISCDS]
 25357                                  	;SAVE	<BP>
 25358 0000421D 55                      	push	bp
 25359                                  	;Invoke	FATREAD_CDS
 25360 0000421E E83114                  	call	FATREAD_CDS	
 25361                                  	;RESTORE <BP>
 25362 00004221 5D                      	pop	bp
 25363 00004222 726D                    	JC	short FatFail
 25364                                  
 25365 00004224 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25366                                  	;cmp	word [si+73],-1
 25367 00004228 837C49FF                	CMP	word [SI+curdir.ID],-1
 25368 0000422C 7555                    	JNZ	short RestoreCDS
 25369                                  
 25370                                  ;hkn; SS is DOSDATA
 25371                                  	;Context ES
 25372 0000422E 16                      	push	ss
 25373 0000422F 07                      	pop	es
 25374                                  
 25375                                  ;hkn; SS override
 25376                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25377 00004230 36FF36[B205]            	push	word [SS:WFP_START]
 25378                                  	;cmp	si,[bp-6]
 25379 00004235 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25380 00004238 750B                    	JNZ	short DoChdir
 25381                                  	;mov	di,[bp-2]
 25382 0000423A 8B7EFE                  	MOV	DI,Temp
 25383                                  
 25384                                  ;hkn; SS override
 25385 0000423D 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25386                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25387 00004242 E89DCF                  	call	FStrCpy
 25388                                  DoChdir:
 25389                                  ;hkn; SS is DOSDATA
 25390                                  	;Context DS
 25391 00004245 16                      	push	ss
 25392 00004246 1F                      	pop	ds
 25393                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25394 00004247 FF36[6D05]              	push	word [SATTRIB]
 25395 0000424B 55                      	push	bp
 25396                                  	;Invoke	DOS_ChDir
 25397 0000424C E8F3EE                  	call	DOS_CHDIR
 25398                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25399 0000424F 5D                      	pop	bp
 25400 00004250 5B                      	pop	bx
 25401 00004251 8F06[B205]              	pop	word [WFP_START]
 25402 00004255 881E[6D05]              	MOV	[SATTRIB],BL
 25403 00004259 C576FA                  	LDS	SI,SaveCDS
 25404 0000425C 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25405                                  
 25406                                  ;hkn; SS override for THISCDS
 25407 0000425E 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25408 00004263 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25409 00004268 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25410 0000426A 884C03                  	MOV	[SI+3],CL		;	    }
 25411                                  SetCluster:
 25412                                  	;mov	word [si+73],0FFFFh
 25413 0000426D C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25414 00004272 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25415                                  	; 21/11/2022
 25416                                  	;test	byte [si+curdir.flags+1],20h
 25417                                  	; 19/05/2019
 25418                                  	; MSDOS 6.0
 25419                                  	; 17/12/2022
 25420                                  	;test	byte [si+68],20h
 25421 00004277 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25422                                  	;;test	word [si+67],2000h
 25423                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25424 0000427B 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25425 0000427D B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25426                                  _setdirclus:
 25427                                  	;mov	[si+73],cx
 25428 00004280 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25429                                  RestoreCDS:
 25430 00004283 C47EFA                  	LES	DI,SaveCDS
 25431 00004286 36893E[A205]            	MOV	[SS:THISCDS],DI
 25432 0000428B 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25433 00004290 F8                      	CLC
 25434                                  FatFail:
 25435                                  	;LeaveCrit critDisk
 25436 00004291 E894D0                  	call	LCritDisk
 25437                                  
 25438                                  	;les	di,[bp-6]
 25439 00004294 C47EFA                  	LES	DI,SaveCDS
 25440                                  	;Leave
 25441 00004297 89EC                    	mov	sp,bp
 25442 00004299 5D                      	pop	bp
 25443 0000429A C3                      	retn
 25444                                  
 25445                                  ; 28/07/2018 - Retro DOS v3.0
 25446                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25447                                  
 25448                                  ;Break	<CheckThisDevice - Check for being a device>
 25449                                  ;---------------------------------------------------------------------------
 25450                                  ;
 25451                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25452                                  ;   device specified. We will return carry if there is a device present. 
 25453                                  ;   The forms of devices we will recognize are:
 25454                                  ;
 25455                                  ;	[path]device
 25456                                  ;
 25457                                  ;   Note that the drive letter has *already* been removed. All other forms
 25458                                  ;   are not considered to be devices. If such a device is found we change
 25459                                  ;   the source pointer to point to the device component.
 25460                                  ;
 25461                                  ;   Inputs:	ES is DOSDATA
 25462                                  ;		DS:SI contains name
 25463                                  ;   Outputs:	ES is DOSDATA
 25464                                  ;		DS:SI point to name or device
 25465                                  ;		Carry flag set if device was found
 25466                                  ;		Carry flag reset otherwise
 25467                                  ;   Registers Modified: all except ES:DI, DS
 25468                                  ;----------------------------------------------------------------------------
 25469                                  
 25470                                  CheckThisDevice:
 25471 0000429B 57                      	push	di
 25472 0000429C 56                      	push	si
 25473 0000429D 89F7                    	MOV	DI,SI
 25474                                  
 25475                                  ; Check for presence of \dev\ (Dam multiplan!)
 25476                                  
 25477 0000429F 8A04                    	MOV	AL,[SI]
 25478 000042A1 E8750D                  	call	PATHCHRCMP		; is it a path char?
 25479 000042A4 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25480 000042A6 46                      	INC	SI			; simulate LODSB
 25481                                  
 25482                                  ; We have the leading path separator. Look for DEV part.
 25483                                  
 25484 000042A7 AD                      	LODSW
 25485 000042A8 0D2020                  	OR	AX,2020h
 25486 000042AB 3D6465                  	cmp	ax,"de"
 25487                                  	;CMP	AX,"e"<< 8 + "d"
 25488 000042AE 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25489 000042B0 AC                      	LODSB
 25490 000042B1 0C20                    	OR	AL,20h
 25491 000042B3 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25492 000042B5 7526                    	JNZ	short NotDevice
 25493 000042B7 AC                      	LODSB
 25494 000042B8 E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25495 000042BB 7520                    	JNZ	short NotDevice		; no. go for it.
 25496                                  
 25497                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25498                                  ; SI and DevName may destroy DS.
 25499                                  
 25500                                  ParseDev:
 25501 000042BD 1E                      	push	ds
 25502 000042BE 56                      	push	si			; preserve the source pointer
 25503 000042BF E8950C                  	call	NameTrans		; advance DS:SI
 25504 000042C2 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25505 000042C5 F9                      	STC				; simulate a Carry return from DevName
 25506 000042C6 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25507                                  
 25508                                  ;hkn; SS is DOSDATA
 25509 000042C8 16                      	push	ss
 25510 000042C9 1F                      	pop	ds
 25511                                  
 25512                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25513                                  ;
 25514                                  ; SR;
 25515                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25516                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25517                                  ; old call set the volume attribute bit.
 25518                                  
 25519 000042CA A0[6D05]                	mov	al,[SATTRIB]
 25520 000042CD A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25521                                  
 25522                                  ; M026 - end
 25523                                  
 25524 000042D0 E87FFE                  	call	DEVNAME
 25525                                  
 25526                                  SkipSearch:
 25527 000042D3 5E                      	pop	si
 25528 000042D4 1F                      	pop	ds
 25529                                  
 25530                                  ; SI points to the beginning of the potential device. If we have a device
 25531                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25532                                  ; original value. At this point Carry set indicates FILE.
 25533                                  
 25534                                  CheckReturn:
 25535 000042D5 5F                      	pop	di			; get original SI
 25536 000042D6 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25537 000042D8 89FE                    	MOV	SI,DI
 25538                                  Check_Done:
 25539 000042DA 5F                      	pop	di
 25540 000042DB F5                      	CMC				; invert carry. Carry => device
 25541 000042DC C3                      	retn
 25542                                  NotDevice:
 25543 000042DD F9                      	STC
 25544 000042DE EBF5                    	JMP	short CheckReturn
 25545                                  
 25546                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25547                                  ;-----------------------------------------------------------------------------
 25548                                  ;
 25549                                  ; Procedure Name : LookupPath
 25550                                  ;
 25551                                  ; Output  DS:SI -> path name,
 25552                                  ;	  ES:DI -> dir entry info buffer
 25553                                  ;	  ES:CX -> extended dir info buffer
 25554                                  ;
 25555                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25556                                  ;			     FastOpen, DS:SI points to char just one after
 25557                                  ;			     the last char of path name which is fully or
 25558                                  ;			     partially found in FastOPen
 25559                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25560                                  ;
 25561                                  ;----------------------------------------------------------------------------
 25562                                  
 25563                                  LookupPath:
 25564                                  ;	PUSH	AX
 25565                                  
 25566                                  ;hkn; SS override
 25567                                  	;test	byte [ss:FastOpenFlg],1
 25568 000042E0 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25569 000042E6 7503                    	JNZ	short FASTINST			    ; and this routine is
 25570                                  NOLOOK:
 25571 000042E8 E99700                  	JMP	NOLOOKUP			    ; executed once
 25572                                  
 25573                                  FASTINST:
 25574                                  ;hkn; SS override
 25575                                  	;test	byte [ss:FastOpenFlg],8
 25576 000042EB 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25577 000042F1 75F5                    	JNZ	short NOLOOK			    ; yes
 25578                                  
 25579 000042F3 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25580                                  
 25581                                  ;hkn; SS override
 25582 000042F6 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25583 000042FB BF[460D]                	MOV	DI,Dir_Info_Buff
 25584 000042FE B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25585 00004301 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25586 00004303 1E                      	PUSH	DS
 25587 00004304 07                      	POP	ES
 25588                                  
 25589                                  ;hkn; SS override
 25590                                  	;call	far [bx+2]
 25591 00004305 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25592 00004308 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25593                                  
 25594 0000430A 8D5CFE                  	LEA	BX,[SI-2]
 25595                                  
 25596                                  ;hkn; SS override
 25597 0000430D 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25598 00004312 745D                    	JZ	short NOTFOUND			    ; no
 25599                                  
 25600                                  	; 19/05/2019 - Retro DOS v4.0
 25601                                  
 25602                                  	; MSDOS 6.0				    ; fully or partially found
 25603 00004314 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25604 00004317 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25605 00004319 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25606                                  
 25607                                  ;hkn; SS override for attrib/sattrib
 25608 0000431A 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25609 0000431F 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25610 00004324 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25611                                  	;mov	ch,[es:di+0Bh]
 25612 00004329 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25613 0000432D E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25614                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25615 00004330 59                      	POP	CX				    ;AN000;FO.;
 25616 00004331 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25617                                  parfnd:
 25618                                  
 25619                                  ;hkn; SS override
 25620 00004333 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25621 00004338 89CB                    	MOV	BX,CX
 25622                                  	; MSDOS 6.0
 25623                                  	;mov	ax,[bx+7]
 25624 0000433A 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25625                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25626 0000433D 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25627 00004341 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25628 00004344 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25629                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25630                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25631                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25632 00004348 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25633 0000434B 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25634                                  
 25635 0000434F 06                      	PUSH	ES				    ; save ES
 25636                                  ;hkn; SS override
 25637 00004350 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25638 00004355 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25639                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25640 00004358 07                      	POP	ES				    ; pop ES
 25641                                  ;SR;
 25642                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25643                                  ;indicate it is not a root dir
 25644                                  
 25645 00004359 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25646 00004360 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25647 00004365 89FB                    	MOV	BX,DI				    ; start of entry
 25648                                  	;lea	si,[di+1Ah]
 25649 00004367 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25650                                  						    ; dir_first field in the
 25651                                  						    ; dir entry
 25652                                  ;hkn; SS override for FastOpenFlg
 25653                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25654 0000436A 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25655                                  ;	POP	AX
 25656 00004370 C3                      	RETN
 25657                                  NOTFOUND:
 25658 00004371 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25659 00004374 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25660 00004376 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25661                                  Partial_Success:
 25662                                  	;and	byte [SS:FastOpenFlg],0FBh
 25663 0000437C 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25664                                  NOLOOKUP:
 25665                                  ;	POP	AX
 25666 00004382 F9                      	STC
 25667 00004383 C3                      	RETN
 25668                                  
 25669                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25670                                  ;-----------------------------------------------------------------------------
 25671                                  ;
 25672                                  ; Procedure Name : InsertPath
 25673                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25674                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25675                                  ;	  DS = DOSDATA
 25676                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25677                                  ;
 25678                                  ;-----------------------------------------------------------------------------
 25679                                  
 25680                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25681                                  
 25682                                  InsertPath:
 25683 00004384 9C                      	PUSHF
 25684                                  ;hkn; SS override for FastOpenFlag
 25685                                  	;test	byte [SS:FastOpenFlg], 1
 25686 00004385 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25687 0000438B 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25688                                  	;test	byte [ss:FastOpenFlg],2
 25689 0000438D 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25690 00004393 740D                    	JZ	short INSERT_DIR_INFO		; no
 25691                                  	;and	byte [ss:FastOpenFlg],0FDh
 25692 00004395 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25693 0000439B 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25694 000043A0 EB5E                    	JMP	short GET_NEXT2
 25695                                  INSERT_DIR_INFO:				; save registers
 25696 000043A2 1E                      	PUSH	DS
 25697 000043A3 06                      	PUSH	ES
 25698 000043A4 53                      	PUSH	BX
 25699 000043A5 56                      	PUSH	SI
 25700 000043A6 57                      	PUSH	DI
 25701 000043A7 51                      	PUSH	CX
 25702 000043A8 50                      	PUSH	AX
 25703                                  
 25704                                  ;hkn; SS override
 25705 000043A9 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25706 000043AE BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25707                                  	;mov	ax,[di+6]
 25708 000043B1 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25709                                  	; MSDOS 6.0
 25710                                  	;mov	[ss:si+1],ax
 25711 000043B4 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25712                                  	; 19/05/2019 - Retro DOS v4.0
 25713 000043B8 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25714                                  
 25715                                  ;hkn; SS is DOSDATA
 25716 000043BB 16                      	push	ss
 25717 000043BC 1F                      	pop	ds
 25718                                  	; MSDOS 3.3	
 25719                                  	;;mov	[si+1],ax	
 25720                                  	;MOV	[SI+FEI.dirsec],AX
 25721                                  	; MSDOS 6.0
 25722                                  	;mov	[si+3],ax
 25723 000043BD 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25724                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25725 000043C0 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25726                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25727                                  	;mov	[si+3],ax ; MSDOS 3.3
 25728 000043C3 894405                  	MOV	[SI+FEI.clusnum],AX
 25729                                  	; MSDOS 6.0
 25730 000043C6 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25731                                  	;mov	[si+7],ax
 25732 000043C9 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25733 000043CC A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25734                                  	;mov	[si+9],ax
 25735 000043CF 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25736                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25737 000043D2 89D8                    	MOV	AX,BX
 25738                                  	;;add	di,16  ; MSDOS 3.3
 25739                                  	;add	di,20  ; MSDOS 6.0
 25740 000043D4 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25741 000043D7 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25742                                  	;mov	cl,32
 25743 000043D9 B120                    	MOV	CL,dir_entry.size
 25744 000043DB F6F1                    	DIV	CL
 25745                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25746 000043DD 8804                    	mov	[si],al
 25747                                  
 25748 000043DF 1E                      	PUSH	DS
 25749 000043E0 07                      	POP	ES
 25750                                  
 25751 000043E1 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25752 000043E5 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25753                                  	;cmp	word [di+1Ah],0
 25754 000043E7 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25755                                  					; never insert info when file is empty
 25756 000043EB 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25757                                  
 25758 000043ED 56                      	PUSH	SI			; ES:BX -> extended info
 25759 000043EE 5B                      	POP	BX
 25760                                  
 25761                                  	;mov	al,2
 25762 000043EF B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25763 000043F1 BE[300D]                	MOV	SI,FastOpenTable
 25764                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25765                                  	; 07/12/2022
 25766 000043F4 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25767                                  
 25768 000043F8 F8                      	CLC
 25769                                  SKIP_INSERT:
 25770 000043F9 58                      	POP	AX
 25771 000043FA 59                      	POP	CX			; restore registers
 25772 000043FB 5F                      	POP	DI
 25773 000043FC 5E                      	POP	SI
 25774 000043FD 5B                      	POP	BX
 25775 000043FE 07                      	POP	ES
 25776 000043FF 1F                      	POP	DS
 25777                                  GET_NEXT2:
 25778                                  	;or	[ss:FastOpenFlg],8
 25779 00004400 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25780                                  					; we got dir info from fastopen so
 25781                                  GET_NEXT_ELEMENT:
 25782 00004406 9D                      	POPF
 25783 00004407 C3                      	RETN
 25784                                  
 25785                                  ;============================================================================
 25786                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25787                                  ;============================================================================
 25788                                  ; 17/07/2018 - Retro DOS v3.0
 25789                                  ; 30/04/2019 - Retro DOS v4.0
 25790                                  
 25791                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25792                                  
 25793                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25794                                  
 25795                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25796                                  
 25797                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25798                                  ;DEV001s:
 25799                                  ;		length of packets
 25800 00004408 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25801                                  ;LenTab: db	22,14,22,13,15,14
 25802                                  
 25803                                  ;	Error Function
 25804                                  
 25805                                  CmdTab:
 25806 0000440E 8604                    	DB	86h, DEVRD	; 0 input
 25807 00004410 8605                    	DB	86h, DEVRDND	; 1 input status
 25808 00004412 8708                    	DB	87h, DEVWRT	; 2 output
 25809 00004414 870A                    	DB	87h, DEVOST	; 3 output status
 25810 00004416 8607                    	DB	86h, DEVIFL	; 4 input flush
 25811 00004418 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25812                                  
 25813                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25814                                  
 25815                                  ;CmdTab:
 25816                                  ;	db	86h, 4
 25817                                  ;	db	86h, 5
 25818                                  ;	db	87h, 8
 25819                                  ;	db	87h, 10
 25820                                  ;	db	86h, 7
 25821                                  ;	db	86h, 5
 25822                                  
 25823                                  ;DEV001E:
 25824                                  
 25825                                  ; 30/04/2019 - Retro DOS v4.0
 25826                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25827                                  
 25828                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25829                                  ;----------------------------------------------------------------------------
 25830                                  ;
 25831                                  ; Procedure Name : IOFUNC
 25832                                  ;
 25833                                  ; Inputs:
 25834                                  ;	DS:SI Points to SFT
 25835                                  ;	AH is function code
 25836                                  ;		= 0 Input
 25837                                  ;		= 1 Input Status
 25838                                  ;		= 2 Output
 25839                                  ;		= 3 Output Status
 25840                                  ;		= 4 Flush
 25841                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25842                                  ;				   present.
 25843                                  ;	AL = character if output
 25844                                  ; Function:
 25845                                  ;	Perform indicated I/O to device or file
 25846                                  ; Outputs:
 25847                                  ;	AL is character if input
 25848                                  ;	If a status call
 25849                                  ;		zero set if not ready
 25850                                  ;		zero reset if ready (character in AL for input status)
 25851                                  ; For regular files:
 25852                                  ;	Input Status
 25853                                  ;		Gets character but restores position
 25854                                  ;		Zero set on EOF
 25855                                  ;	Input
 25856                                  ;		Gets character advances position
 25857                                  ;		Returns ^Z on EOF
 25858                                  ;	Output Status
 25859                                  ;		Always ready
 25860                                  ; AX altered, all other registers preserved
 25861                                  ;----------------------------------------------------------------------------
 25862                                  
 25863                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25864                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25865                                  
 25866                                  IOFUNC:
 25867 0000441A 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25868                                  					; DEVIOBUF
 25869 0000441F 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25870 00004426 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25871 0000442D 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25872                                  	;test	byte [si+6],80h
 25873                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25874 00004431 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25875 00004435 7403                    	JZ	short IOTO22		;AN000;
 25876 00004437 E9A500                  	JMP	IOTOFILE		;AN000;
 25877                                  IOTO22:
 25878                                  	;test	word [si+5],80h
 25879                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25880 0000443A F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25881 0000443E 7503                    	JNZ	short IOTO33		;AN000;
 25882 00004440 E99C00                  	JMP	IOTOFILE		;AN000;
 25883                                  IOTO33:
 25884 00004443 06                      	push	es ; * (MSDOS 6.21)
 25885 00004444 E81BC0                  	call	save_world
 25886 00004447 8CDA                    	MOV	DX,DS
 25887 00004449 8CD3                    	MOV	BX,SS
 25888 0000444B 8EDB                    	MOV	DS,BX
 25889 0000444D 8EC3                    	MOV	ES,BX
 25890 0000444F 31DB                    	XOR	BX,BX
 25891 00004451 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25892 00004454 7503                    	jnz	short _no_sys_wait
 25893                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25894                                  	; 16/12/2022
 25895 00004456 80CF04                  	or	bh,04h
 25896                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25897                                  				    ; It is up to device driver to carry out
 25898                                  				    ; appropriate action.
 25899                                  _no_sys_wait:
 25900 00004459 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25901 0000445D 31DB                    	XOR	BX,BX
 25902 0000445F 881E[8903]              	MOV	[IOMED],BL
 25903                                  
 25904 00004463 88E3                    	MOV	BL,AH		 	; get function
 25905 00004465 2E8AA7[0844]            	MOV	AH,[cs:BX+LenTab]
 25906 0000446A D1E3                    	SHL	BX,1
 25907 0000446C 2E8B8F[0E44]            	MOV	CX,[cs:BX+CmdTab]
 25908 00004471 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25909 00004474 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25910 00004478 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25911                                  
 25912 0000447C 8EDA                    	MOV	DS,DX
 25913 0000447E E86B01                  	CALL	DEVIOCALL
 25914 00004481 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25915 00004486 21FF                    	and	di,di
 25916 00004488 7834                    	js	short DevErr
 25917                                  OKDevIO:
 25918 0000448A 8CD0                    	MOV	AX,SS
 25919 0000448C 8ED8                    	MOV	DS,AX
 25920                                  
 25921                                  	;cmp	ch,5
 25922 0000448E 80FD05                  	CMP	CH,DEVRDND
 25923 00004491 7506                    	JNZ	short DNODRD
 25924 00004493 A0[8903]                	MOV	AL,[IORCHR]
 25925 00004496 A2[BC03]                	MOV	[DEVIOBUF],AL
 25926                                  
 25927                                  DNODRD: 
 25928 00004499 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25929 0000449D F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25930                                  	;and	ah,2
 25931 0000449F 80E402                  	AND	AH,STBUI>>8
 25932                                  
 25933                                  QuickReturn:				;AN000; 2/13/KK
 25934 000044A2 E8A6BF                  	call	restore_world
 25935 000044A5 07                      	pop	es ; * (MSDOS 6.21)
 25936                                  
 25937                                  	; SR;
 25938                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25939                                  	; IoStatFail = -1 (set after return from the I24)
 25940                                  
 25941                                  	; MSDOS 6.0
 25942 000044A6 9C                      	pushf
 25943 000044A7 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25944 000044AB 98                      	cbw				;sign extend to word
 25945 000044AC 83F8FF                  	cmp	ax,-1
 25946 000044AF 7507                    	jne	short not_fail_ret
 25947 000044B1 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25948 000044B6 9D                      	popf
 25949 000044B7 C3                      	retn
 25950                                  
 25951                                  not_fail_ret:
 25952 000044B8 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25953 000044BC 9D                      	popf
 25954 000044BD C3                      	retn
 25955                                  
 25956                                  DevErr:
 25957 000044BE 88CC                    	MOV	AH,CL
 25958 000044C0 E88E0D                  	call	CHARHARD
 25959 000044C3 3C01                    	CMP	AL,1
 25960 000044C5 7507                    	JNZ	short NO_RETRY
 25961 000044C7 E881BF                  	call	restore_world
 25962                                  	; 12/05/2019
 25963 000044CA 07                      	pop	es ; * (MSDOS 6.21)		
 25964 000044CB E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25965                                  
 25966                                  NO_RETRY:
 25967                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25968                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25969                                  	; simply wants to ignore the error.
 25970                                  	;
 25971                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25972                                  	; should be checked by the caller on return
 25973                                  
 25974                                  					; SS override
 25975 000044CE 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25976                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25977                                  
 25978                                  	; SR;
 25979                                  	; Check if user failed
 25980                                  
 25981                                  	; MSDOS 6.0
 25982 000044D4 3C03                    	cmp	al,3
 25983 000044D6 7505                    	jnz	short not_fail
 25984 000044D8 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25985                                  not_fail:
 25986 000044DD EBAB                    	JMP	short OKDevIO
 25987                                  
 25988                                  IOTOFILE:
 25989 000044DF 08E4                    	OR	AH,AH
 25990 000044E1 7421                    	JZ	short IOIN
 25991 000044E3 FECC                    	DEC	AH
 25992 000044E5 7405                    	JZ	short IOIST
 25993 000044E7 FECC                    	DEC	AH
 25994 000044E9 7411                    	JZ	short IOUT
 25995                                  IOUT_retn:	; 18/12/2022
 25996 000044EB C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25997                                  IOIST:
 25998                                  	;push	word [si+15h]
 25999 000044EC FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26000                                  	;push	word [si+17h]
 26001 000044EF FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26002 000044F2 E80F00                  	CALL	IOIN
 26003                                  	;pop	word [si+17h]
 26004 000044F5 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26005                                  	;pop	word [si+15h]
 26006 000044F8 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26007 000044FB C3                      	retn
 26008                                  IOUT:
 26009 000044FC E82500                  	CALL	SETXADDR
 26010 000044FF E883EF                  	call	DOS_WRITE
 26011                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26012                                  	; 18/12/2022
 26013 00004502 EB52                    	jmp	RESTXADDR
 26014                                  ;IOUT_retn:
 26015                                  	;retn			; come crying to me when things don't
 26016                                  				; work ARR
 26017                                  IOIN:
 26018 00004504 E81D00                  	CALL	SETXADDR
 26019                                  					; SS override for DOS34_FLAG
 26020                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26021                                  	;or	word [ss:DOS34_FLAG],40h
 26022                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26023                                  	; 16/12/2022
 26024 00004507 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26025 0000450D E84CED                  	CALL	DOS_READ
 26026                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26027                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26028                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26029                                  	; 16/12/2022
 26030 00004510 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26031 00004516 09C9                    	OR	CX,CX			; Check EOF
 26032 00004518 E83B00                  	CALL	RESTXADDR
 26033                                  					; SS override
 26034 0000451B 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26035 0000451F 75CA                    	jnz	short IOUT_retn	
 26036 00004521 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26037 00004523 C3                      	retn
 26038                                  
 26039                                  SETXADDR:
 26040                                  					; SS override
 26041 00004524 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26042                                  
 26043 00004529 06                      	push	es ; * (MSDOS 6.21)
 26044                                  
 26045 0000452A E835BF                  	call	save_world
 26046                                  					; SS override for DMAADD and THISSFT
 26047                                  	; 24/09/2023
 26048                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26049                                  	;PUSH	WORD [SS:DMAADD+2]
 26050 0000452D 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26051                                  
 26052 00004532 16                      	push	ss
 26053 00004533 1F                      	pop	ds
 26054                                  
 26055                                  	; 24/09/2023
 26056 00004534 FF36[2C03]              	push	word [DMAADD]
 26057 00004538 FF36[2E03]              	push	word [DMAADD+2]
 26058                                  
 26059 0000453C 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26060 00004540 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 26061 00004544 890E[2E03]              	MOV	[DMAADD+2],CX
 26062 00004548 8B0E[8A03]              	MOV	CX,[IOXAD]
 26063 0000454C 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 26064 00004550 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26065 00004554 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26066                                  
 26067                                  RESTXADDR:
 26068 00004556 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26069 0000455A 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26070 0000455E 8F06[2C03]              	POP	WORD [DMAADD]
 26071                                  
 26072 00004562 E8E6BE                  	call	restore_world
 26073                                  
 26074 00004565 07                      	pop	es ; * (MSDOS 6.21)
 26075                                  					; SS override
 26076                                  RESTRET:
 26077 00004566 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26078                                  
 26079                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26080                                  ; 21/11/2022
 26081                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26082                                  
 26083                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26084                                  
 26085                                  ;----------------------------------------------------------------------------
 26086                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26087                                  ;
 26088                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26089                                  ;	the SFT.
 26090                                  ;
 26091                                  ;	ENTRY	(ES:DI) = SFT
 26092                                  ;	EXIT	none
 26093                                  ;	USES	all
 26094                                  ;----------------------------------------------------------------------------
 26095                                  
 26096                                  DEV_OPEN_SFT:
 26097 0000456B 06                      	push	es ; * (MSDOS 6.21)
 26098 0000456C E8F3BE                  	call	save_world
 26099                                  	;mov	al,0Dh	
 26100 0000456F B00D                    	MOV	AL,DEVOPN
 26101 00004571 EB06                    	JMP	SHORT DO_OPCLS
 26102                                  
 26103                                  ;----------------------------------------------------------------------------
 26104                                  ; Procedure Name : DEV_CLOSE_SFT
 26105                                  ;
 26106                                  ; Inputs:
 26107                                  ;	ES:DI Points to SFT
 26108                                  ; Function:
 26109                                  ;	Issue a CLOSE call to the correct device
 26110                                  ; Outputs:
 26111                                  ;	None
 26112                                  ; ALL preserved
 26113                                  ;----------------------------------------------------------------------------
 26114                                  
 26115                                  DEV_CLOSE_SFT:
 26116 00004573 06                      	push	es ; * (MSDOS 6.21)
 26117 00004574 E8EBBE                  	call	save_world
 26118                                  	;mov	al,0Eh	
 26119 00004577 B00E                    	MOV	AL,DEVCLS
 26120                                  
 26121                                  	; Main entry for device open and close. AL contains the function 
 26122                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26123                                  	; open/close to block devices. This allows networks to function but 
 26124                                  	; does NOT hang up with bogus change-line code.
 26125                                  
 26126                                  	;entry	DO_OPCLS
 26127                                  DO_OPCLS:
 26128                                  	; Is the SFT for the net? If so, no action necessary.
 26129                                  
 26130                                  	; MSDOS 6.0
 26131                                  	;test	word [es:di+5],8000h
 26132                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26133 00004579 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26134 0000457E 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26135 00004580 30E4                    	XOR	AH,AH			; Unit
 26136                                  	;test	byte [es:di+5],80h
 26137 00004582 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26138                                  	;les	di,[es:di+7]
 26139 00004587 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26140 0000458B 7513                    	JNZ	short GOT_DEV_ADDR
 26141                                  
 26142                                  	; We are about to call device open/close on a block driver. If no 
 26143                                  	; sharing then just short circuit to done.
 26144                                  	
 26145                                  	; MSDOS 6.0
 26146                                  					; SS override
 26147 0000458D 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26148 00004593 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 26149                                  
 26150                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26151                                  	;mov	ah,[es:di+1]
 26152 00004595 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26153 00004599 268A0D                  	mov	cl,[es:di]
 26154                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26155                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26156                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26157 0000459C 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26158                                  GOT_DEV_ADDR:				; ES:DI -> device
 26159                                  	;test	word [es:di+4],800h
 26160                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26161 000045A0 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26162 000045A5 7440                    	JZ	short OPCLS_DONE	; Device can't
 26163 000045A7 06                      	PUSH	ES
 26164 000045A8 1F                      	POP	DS
 26165 000045A9 89FE                    	MOV	SI,DI			; DS:SI -> device
 26166                                  
 26167                                  OPCLS_RETRY:
 26168                                  	;Context ES
 26169 000045AB 16                      	push	ss
 26170 000045AC 07                      	pop	es
 26171                                  					; DEVCALL is in DOSDATA
 26172 000045AD BF[5A03]                	MOV	DI,DEVCALL
 26173                                  
 26174 000045B0 89FB                    	MOV	BX,DI
 26175 000045B2 50                      	PUSH	AX
 26176                                  	;mov	al,13
 26177 000045B3 B00D                    	MOV	AL,DOPCLHL
 26178 000045B5 AA                      	STOSB				; Length
 26179 000045B6 58                      	POP	AX
 26180 000045B7 86E0                    	XCHG	AH,AL
 26181 000045B9 AA                      	STOSB				; Unit
 26182 000045BA 86E0                    	XCHG	AH,AL
 26183 000045BC AA                      	STOSB				; Command
 26184 000045BD 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26185 000045C2 50                      	PUSH	AX			; Save Unit,Command
 26186                                  	;invoke	DEVIOCALL2
 26187 000045C3 E82900                  	call	DEVIOCALL2
 26188                                  
 26189                                  	;mov	di,[es:bx+3]
 26190 000045C6 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26191                                  	;test	di,8000h
 26192                                  	;jz	short OPCLS_DONEP	
 26193 000045CA 21FF                    	and	di,di
 26194 000045CC 7918                    	jns	short OPCLS_DONEP	; No error
 26195                                  	; 21/11/2022
 26196                                  	;test	word [si+4],8000h
 26197                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26198                                  	;test	word [si+5],80h
 26199 000045CE F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26200 000045D2 7404                    	JZ	short BLKDEV
 26201 000045D4 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26202 000045D6 EB04                    	JMP	SHORT HRDERR
 26203                                  BLKDEV:
 26204 000045D8 88C8                    	MOV	AL,CL			; Drive # in AL
 26205 000045DA B406                    	MOV	AH,6			; Read error in data, Blk dev
 26206                                  HRDERR:
 26207                                  	;invoke	CHARHARD
 26208 000045DC E8720C                  	call	CHARHARD
 26209 000045DF 3C01                    	cmp	al,1
 26210 000045E1 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26211                                  					;  Note that FAIL is essentually IGNORED
 26212 000045E3 58                      	POP	AX			; Get back Unit, Command
 26213 000045E4 EBC5                    	JMP	short OPCLS_RETRY
 26214                                  OPCLS_DONEP:
 26215 000045E6 58                      	POP	AX			; Clean stack
 26216                                  OPCLS_DONE:
 26217 000045E7 E861BE                  	call	restore_world
 26218 000045EA 07                      	pop	es ; * (MSDOS 6.21)
 26219 000045EB C3                      	retn
 26220                                  
 26221                                  ; 30/04/2019 - Retro DOS v4.0
 26222                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26223                                  
 26224                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26225                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26226                                  
 26227                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26228                                  ;----------------------------------------------------------------------------
 26229                                  ;**	DevIoCall  - Call Device
 26230                                  ;
 26231                                  ;	ENTRY	DS:SI Points to device SFT
 26232                                  ;		ES:BX Points to request data
 26233                                  ;	EXIT	DS:SI -> Device driver
 26234                                  ;	USES	DS:SI,AX
 26235                                  ;----------------------------------------------------------------------------
 26236                                  ;**	DevIoCall2 - Call Device
 26237                                  ;
 26238                                  ;	ENTRY	DS:SI Points to DPB
 26239                                  ;		ES:BX Points to request data
 26240                                  ;	EXIT	DS:SI -> Device driver
 26241                                  ;	USES	DS:SI,AX
 26242                                  ;----------------------------------------------------------------------------
 26243                                  
 26244                                  DEVIOCALL:
 26245                                  					; SS override for CALLSSEC, 
 26246                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26247 000045EC C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26248                                  
 26249                                  	;entry	DEVIOCALL2
 26250                                  DEVIOCALL2:
 26251                                  	;EnterCrit critDevice
 26252 000045EF E850CD                  	call	ECritDevice
 26253                                  
 26254                                  	; MSDOS 6.0
 26255                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26256                                  	;test	byte [si+5],80h
 26257 000045F2 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26258 000045F6 7548                    	jnz	short chardev2		;AN000; >32mb no
 26259                                  
 26260                                  	; 16/12/2022
 26261                                  	; 22/11/2022
 26262 000045F8 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26263 000045FC 3C04                    	cmp	al,DEVRD	; 4
 26264 000045FE 7408                    	je	short chkext	
 26265 00004600 3C08                    	cmp	al,DEVWRT	; 8
 26266 00004602 7404                    	je	short chkext
 26267 00004604 3C09                    	cmp	al,DEVWRTV	; 9
 26268 00004606 7538                    	jne	short chardev2
 26269                                  
 26270                                  	; 16/12/2022
 26271                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26272                                  	;;cmp	byte [es:bx+2],4
 26273                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26274                                  	;JZ	short chkext		;AN000; >32mb   yes
 26275                                  	;;cmp	byte [es:bx+2],8
 26276                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26277                                  	;JZ	short chkext		;AN000; >32mb   yes
 26278                                  	;;cmp	byte [es:bx+2],9
 26279                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26280                                  	;				;AN000; >32mb write/verify ?
 26281                                  	;JNZ	short chardev2		;AN000; >32mb no
 26282                                  chkext:
 26283 00004608 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26284 0000460B 7255                    	JC	short dev_exit		;AN000;LB. done
 26285                                  
 26286                                  	;test	byte [si+4],2
 26287 0000460D F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26288 00004611 741D                    	JZ	short chksector		;AN000;>32mb   no
 26289 00004613 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26290 00004617 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26291 0000461B 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26292 00004622 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26293 00004626 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26294 0000462A 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26295 0000462E EB10                    	JMP	short chardev2		;AN000; >32mb
 26296                                  chksector:				;AN000; >32mb
 26297 00004630 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26298 00004636 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26299                                  	;mov	word [es:bx+3],8107h
 26300 00004638 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26301                                  					;AN000; >32mb
 26302 0000463E EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26303                                  
 26304                                  chardev2:				;AN000;
 26305                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26306                                  	; preserved
 26307                                  
 26308                                  	;mov	ax,[si+6]
 26309 00004640 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26310 00004643 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26311 00004647 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26312 0000464C 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26313                                  
 26314                                  	;mov	ax,[si+8]
 26315 00004651 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26316 00004654 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26317 00004658 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26318                                  
 26319                                  	; MSDOS 6.0
 26320 0000465D E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26321 00004660 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26322                                  
 26323                                  dev_exit:
 26324                                  	;LeaveCrit critDevice
 26325                                  	;call	LCritDevice
 26326                                  	;retn
 26327                                  	; 18/12/2022
 26328 00004662 E9F8CC                  	jmp	LCritDevice
 26329                                  
 26330                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26331                                  ; 22/11/2022
 26332                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26333                                  
 26334                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26335                                  ;---------------------------------------------------------------------------
 26336                                  ;
 26337                                  ; Procedure Name : SETREAD, SETWRITE
 26338                                  ;
 26339                                  ; Inputs:
 26340                                  ;	DS:BX = Transfer Address
 26341                                  ;	CX = Record Count
 26342                                  ;	DX = Starting Record
 26343                                  ;	AH = Media Byte
 26344                                  ;	AL = Unit Code
 26345                                  ; Function:
 26346                                  ;	Set up the device call header at DEVCALL
 26347                                  ; Output:
 26348                                  ;	ES:BX Points to DEVCALL
 26349                                  ; No other registers effected
 26350                                  ;
 26351                                  ;---------------------------------------------------------------------------
 26352                                  
 26353                                  SETREAD:
 26354 00004665 57                      	PUSH	DI
 26355 00004666 51                      	PUSH	CX
 26356 00004667 50                      	PUSH	AX
 26357 00004668 B104                    	MOV	CL,DEVRD ; mov cl,4
 26358                                  SETCALLHEAD:
 26359 0000466A B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26360 0000466C 16                      	PUSH	SS
 26361 0000466D 07                      	POP	ES
 26362                                  					; DEVCALL is in DOSDATA
 26363 0000466E BF[5A03]                	MOV	DI,DEVCALL
 26364                                  
 26365 00004671 AA                      	STOSB				; length
 26366 00004672 58                      	POP	AX			; 
 26367 00004673 AA                      	STOSB				; Unit
 26368 00004674 50                      	PUSH	AX
 26369 00004675 88C8                    	MOV	AL,CL
 26370 00004677 AA                      	STOSB				; Command code
 26371 00004678 31C0                    	XOR	AX,AX
 26372 0000467A AB                      	STOSW				; Status
 26373 0000467B 83C708                  	ADD	DI,8			; Skip link fields
 26374 0000467E 58                      	POP	AX
 26375 0000467F 86E0                    	XCHG	AH,AL
 26376 00004681 AA                      	STOSB				; Media byte
 26377 00004682 86C4                    	XCHG	AL,AH
 26378 00004684 50                      	PUSH	AX
 26379 00004685 89D8                    	MOV	AX,BX
 26380 00004687 AB                      	STOSW
 26381                                  
 26382 00004688 8CD8                    	MOV	AX,DS
 26383 0000468A AB                      	STOSW				; Transfer addr
 26384                                  
 26385 0000468B 59                      	POP	CX			; Real AX
 26386 0000468C 58                      	POP	AX			; Real CX
 26387 0000468D AB                      	STOSW				; Count
 26388                                  
 26389 0000468E 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26390 0000468F AB                      	STOSW				; Start
 26391 00004690 91                      	XCHG	AX,CX
 26392 00004691 87D1                    	XCHG	DX,CX
 26393 00004693 5F                      	POP	DI
 26394                                  					; DEVCALL is in DOSDATA
 26395 00004694 BB[5A03]                	MOV	BX,DEVCALL
 26396 00004697 C3                      	retn
 26397                                  
 26398                                  	;entry	SETWRITE
 26399                                  SETWRITE:
 26400                                  
 26401                                  ; Inputs:
 26402                                  ;	DS:BX = Transfer Address
 26403                                  ;	CX = Record Count
 26404                                  ;	DX = Starting Record
 26405                                  ;	AH = Media Byte
 26406                                  ;	AL = Unit Code
 26407                                  ; Function:
 26408                                  ;	Set up the device call header at DEVCALL
 26409                                  ; Output:
 26410                                  ;	ES:BX Points to DEVCALL
 26411                                  ; No other registers effected
 26412                                  
 26413 00004698 57                      	PUSH	DI
 26414 00004699 51                      	PUSH	CX
 26415 0000469A 50                      	PUSH	AX
 26416 0000469B B108                    	MOV	CL,DEVWRT ; mov cl,8
 26417 0000469D 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26418 000046A2 EBC6                    	JMP	SHORT SETCALLHEAD
 26419                                  
 26420                                  ; 30/04/2019 - Retro DOS v4.0
 26421                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26422                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26423                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26424                                  
 26425                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26426                                  ;---------------------------------------------------------------------------
 26427                                  ;
 26428                                  ; Procedure Name : RW_SC
 26429                                  ;
 26430                                  ; Inputs:
 26431                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26432                                  ;	 [SC_STATUS]= SC validity status
 26433                                  ;	 [SEQ_SECTOR]= last sector read
 26434                                  ; Function:
 26435                                  ;	Read from or write through secondary cache
 26436                                  ; Output:
 26437                                  ;	ES:BX Points to DEVCALL
 26438                                  ;	carry clear, I/O is not done
 26439                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26440                                  ;	carry set, I/O is done
 26441                                  ;
 26442                                  ;----------------------------------------------------------------------------
 26443                                  
 26444                                  RW_SC:
 26445                                  	; SS override for all variables used.
 26446                                  	
 26447 000046A4 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26448 000046AA 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26449 000046AC 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26450 000046B2 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26451 000046B4 51                      	PUSH	CX			    ;AN000;LB.
 26452 000046B5 52                      	PUSH	DX			    ;AN000;LB. yes
 26453 000046B6 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26454 000046B7 56                      	PUSH	SI			    ;AN000;LB.
 26455 000046B8 06                      	PUSH	ES			    ;AN000;LB.
 26456 000046B9 57                      	PUSH	DI			    ;AN000;LB.
 26457                                  
 26458 000046BA 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26459 000046BF 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26460 000046C5 7408                    	JZ	short doread		    ;AN000;LB. yes
 26461 000046C7 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26462 000046CA E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26463                                  scexit4:				    ;AN000;
 26464 000046CD F8                      	CLC				    ;AN000;LB. I/O not done yet
 26465 000046CE C3                      	retn				    ;AN000;LB.
 26466                                  doread: 				    ;AN000;
 26467 000046CF E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26468 000046D2 720A                    	JC	short readSC		    ;AN000;LB.
 26469 000046D4 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26470 000046DB F9                      	STC				    ;AN000;LB. set carry
 26471 000046DC EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26472                                  readSC: 				    ;AN000;
 26473 000046DE 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26474 000046E2 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26475 000046E7 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26476 000046EC 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26477                                  	; 24/09/2023
 26478                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26479 000046F1 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26480                                  chklow: 						
 26481 000046F3 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26482 000046F6 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26483 000046F8 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26484 000046FF 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26485 00004703 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26486                                  readsr:
 26487 00004707 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26488 0000470B 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26489 0000470F 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26490 00004713 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26491                                  
 26492 00004717 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26493 0000471B 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26494 0000471F 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26495 00004723 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26496 00004727 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26497 0000472D 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26498 00004731 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26499 00004735 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26500 00004739 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26501 0000473D 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26502 00004741 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26503                                  saveseq2:				    ;AN000;
 26504 00004745 F8                      	CLC				    ;AN000;LB. clear carry
 26505                                  saveseq:				    ;AN000;	
 26506 00004746 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26507 0000474A 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26508 0000474E 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26509 00004752 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26510 00004756 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26511                                  scexit2:				    ;AN000;LB.
 26512 00004758 F8                      	CLC				    ;AN000;LB.	clear carry
 26513                                  scexit: 				    ;AN000;		
 26514 00004759 5F                      	POP	DI			    ;AN000;LB.
 26515 0000475A 07                      	POP	ES			    ;AN000;LB. restore registers
 26516 0000475B 5E                      	POP	SI			    ;AN000;LB.
 26517 0000475C 1F                      	POP	DS			    ;AN000;LB.
 26518 0000475D 5A                      	POP	DX			    ;AN000;LB.
 26519 0000475E 59                      	POP	CX			    ;AN000;LB.
 26520 0000475F C3                      	retn				    ;AN000;LB.
 26521                                  
 26522                                  ;Break	<IN_SC -- check if in secondary cache>
 26523                                  ;--------------------------------------------------------------------------
 26524                                  ;
 26525                                  ; Procedure Name : IN_SC
 26526                                  ;
 26527                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26528                                  ;	   [CURSC_DRIVE]= current SC drive
 26529                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26530                                  ;	   [SC_CACHE_COUNT]= SC count
 26531                                  ;	   [HIGH_SECTOR]:DX= sector number
 26532                                  ; Function:
 26533                                  ;	Check if the sector is in secondary cache
 26534                                  ; Output:
 26535                                  ;	carry clear, in SC
 26536                                  ;	   CX= the index in the secondary cache
 26537                                  ;	carry set, not in SC
 26538                                  ;
 26539                                  ;---------------------------------------------------------------------------
 26540                                  
 26541                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26542                                  IN_SC:
 26543                                  	; SS override for all variables used
 26544 00004760 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26545 00004764 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26546 00004769 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26547 0000476B 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26548 0000476F 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26549 00004771 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26550 00004776 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26551                                  	; 24/09/2023
 26552                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26553 0000477B 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26554 0000477D 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26555 00004782 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26556 00004784 F8                      	CLC				    ;AN000;;LB. clear carry
 26557                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26558                                  	; 16/12/2022
 26559 00004785 C3                      	retn	; 30/04/2019
 26560                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26561                                  	;jmp	short inexit
 26562                                  
 26563                                  outrange2:				    ;AN000;;LB. set carry
 26564 00004786 F9                      	STC				    ;AN000;;LB.
 26565                                  inexit: 				    ;AN000;;LB.
 26566 00004787 C3                      	retn				    ;AN000;;LB.
 26567                                  
 26568                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26569                                  ;---------------------------------------------------------------------------
 26570                                  ;
 26571                                  ; Procedure Name : Invalidate_Sc
 26572                                  ;
 26573                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26574                                  ;	   [CURSC_DRIVE]= current SC drive
 26575                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26576                                  ;	   [SC_CACHE_COUNT]= SC count
 26577                                  ;	   [SC_STATUS]= SC status word
 26578                                  ;	   [HIGH_SECTOR]:DX= sector number
 26579                                  ;
 26580                                  ; Function:
 26581                                  ;	invalidate secondary cache if in there
 26582                                  ; Output:
 26583                                  ;	[SC_STATUS] is updated
 26584                                  ;---------------------------------------------------------------------------
 26585                                  
 26586                                  INVALIDATE_SC:
 26587                                  	; SS override for all variables used
 26588                                  
 26589 00004788 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26590 0000478B 720C                    	JC	short outrange		    ;AN000;;LB. no
 26591 0000478D B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26592 00004790 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26593 00004792 F7D0                    	NOT	AX			    ;AN000;;LB.
 26594 00004794 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26595                                  outrange:				    ;AN000;;LB.
 26596 00004799 C3                      	retn				    ;AN000;;LB.
 26597                                  
 26598                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26599                                  ; 22/11/2022
 26600                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26601                                  
 26602                                  ;Break	<VIRREAD- virtually read data into buffer>
 26603                                  ;--------------------------------------------------------------------------
 26604                                  ;
 26605                                  ; Procedure Name : SC_FLAG
 26606                                  ;
 26607                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26608                                  ;		     1, continuous sectors were read into SC
 26609                                  ; Function:
 26610                                  ;	   Move data from SC to buffer
 26611                                  ; Output:
 26612                                  ;	 carry clear, data is moved to buffer
 26613                                  ;	 carry set, bad sector or exceeds maximum sector
 26614                                  ;	   SC_FLAG =0
 26615                                  ;	   CALLSCNT=1
 26616                                  ;	   SC_STATUS= -1 if succeeded
 26617                                  ;     
 26618                                  ;		       0 if failed
 26619                                  ;--------------------------------------------------------------------------
 26620                                  
 26621                                  VIRREAD:
 26622                                  	; SS override for all variables used
 26623                                  
 26624 0000479A 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26625 000047A0 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26626 000047A2 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26627 000047A6 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26628 000047AA 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26629 000047AE 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26630 000047B2 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26631 000047B8 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26632                                  
 26633                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26634 000047BF 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26635 000047C5 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26636 000047C7 1E                      	PUSH	DS			    ;AN000;;LB.
 26637 000047C8 56                      	PUSH	SI			    ;AN000;;LB.
 26638 000047C9 06                      	PUSH	ES			    ;AN000;;LB.
 26639 000047CA 57                      	PUSH	DI			    ;AN000;;LB.
 26640 000047CB 52                      	PUSH	DX			    ;AN000;;LB.
 26641 000047CC 51                      	PUSH	CX			    ;AN000;;LB.
 26642 000047CD 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26643 000047CF E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26644 000047D2 59                      	POP	CX
 26645 000047D3 5A                      	POP	DX			    ;AN000;;LB.
 26646 000047D4 5F                      	POP	DI			    ;AN000;;LB.
 26647 000047D5 07                      	POP	ES			    ;AN000;;LB.
 26648 000047D6 5E                      	POP	SI			    ;AN000;;LB.
 26649 000047D7 1F                      	POP	DS			    ;AN000;;LB.
 26650 000047D8 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26651                                  scerror:				    ;AN000;
 26652 000047DA 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26653 000047E1 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26654 000047E8 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26655 000047EE F9                      	STC				    ;AN000;;LB. carry set
 26656 000047EF C3                      	retn				    ;AN000;;LB.
 26657                                  sc2end: 				    ;AN000;
 26658 000047F0 F8                      	CLC				    ;AN000;;LB. carry clear
 26659 000047F1 C3                      	retn				    ;AN000;;LB.
 26660                                  
 26661                                  ; 30/04/2019 - Retro  DOS v4.0
 26662                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26663                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26664                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26665                                  
 26666                                  ;Break	<SC2BUF- move data from SC to buffer>
 26667                                  ;----------------------------------------------------------------------------
 26668                                  ;
 26669                                  ; Procedure Name : SC2BUF
 26670                                  ;
 26671                                  ; Inputs:  [SC_STATUS] = SC validity status
 26672                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26673                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26674                                  ; Function:
 26675                                  ;	   Move data from SC to buffer
 26676                                  ; Output:
 26677                                  ;	   carry clear, in SC  and data is moved
 26678                                  ;	   carry set, not in SC and data is not moved
 26679                                  ;---------------------------------------------------------------------------
 26680                                  
 26681                                  SC2BUF:
 26682                                  	; SS override for all variables used
 26683 000047F2 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26684                                  	;JC	short noSC		    ;AN000;LB. no
 26685                                  	; 24/09/2023
 26686 000047F5 723D                    	jc	short sexit
 26687 000047F7 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26688 000047FA D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26689 000047FC 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26690 00004801 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26691                                  ;entry SC2BUF2
 26692                                  SC2BUF2:				    ;AN000;
 26693                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26694                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26695                                  	; 24/09/2023
 26696 00004803 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26697 00004807 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26698 00004808 F7E1                    	mul	cx
 26699 0000480A 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26700 0000480F 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26701 00004814 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26702 00004816 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26703 00004818 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26704 0000481D 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26705                                  	; 24/09/2023
 26706                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26707 00004822 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26708                                  ;entry MOVWORDS
 26709                                  MOVWORDS:				    ;AN000;
 26710 00004824 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26711 0000482A 7403                    	JZ	short nodd		    ;AN000;LB. no
 26712 0000482C D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26713 0000482E 66                      	DB	66H			    ;AN000;LB. use double word move
 26714                                  nodd:
 26715 0000482F F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26716 00004831 F8                      	CLC				    ;AN000;LB. clear carry
 26717 00004832 C3                      	retn				    ;AN000;LB. exit
 26718                                  noSC:					    ;AN000;
 26719 00004833 F9                      	STC				    ;AN000;LB. set carry
 26720                                  sexit:					    ;AN000;
 26721 00004834 C3                      	retn				    ;AN000;LB.
 26722                                  
 26723                                  ;============================================================================
 26724                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26725                                  ;============================================================================
 26726                                  ; 29/07/2018 - Retro DOS v3.0
 26727                                  ; 19/05/2019 - Retro DOS v4.0
 26728                                  
 26729                                  ;	TITLE	MKNODE - Node maker
 26730                                  ;	NAME	MKNODE
 26731                                  
 26732                                  ;**	MKNODE.ASM
 26733                                  ;----------------------------------------------------------------------------
 26734                                  ;	Low level routines for making a new local file system node
 26735                                  ;	and filling in an SFT from a directory entry
 26736                                  ;
 26737                                  ;	BUILDDIR
 26738                                  ;	SETDOTENT
 26739                                  ;	MakeNode
 26740                                  ;	NEWENTRY
 26741                                  ;	FREEENT
 26742                                  ;	NEWDIR
 26743                                  ;	DOOPEN
 26744                                  ;	RENAME_MAKE
 26745                                  ;	CHECK_VIRT_OPEN
 26746                                  ;
 26747                                  ;	Revision history:
 26748                                  ;
 26749                                  ;	 AN000	version 4.0  Jan. 1988
 26750                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26751                                  
 26752                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26753                                  ;----------------------------------------------------------------------------
 26754                                  ;
 26755                                  ; Procedure Name : BUILDDIR,NEWDIR
 26756                                  ;
 26757                                  ; Inputs:
 26758                                  ;       ES:BP Points to DPB
 26759                                  ;       [THISSFT] Set if using NEWDIR entry point
 26760                                  ;               (used by ALLOCATE)
 26761                                  ;       [LASTENT] current last valid entry number in directory if no free
 26762                                  ;               entries
 26763                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26764                                  ; Function:
 26765                                  ;       Grow directory if no free entries and not root
 26766                                  ; Outputs:
 26767                                  ;       CARRY SET IF FAILURE
 26768                                  ;       ELSE
 26769                                  ;          AX entry number of new entry
 26770                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26771                                  ;               AX = first entry of new dir
 26772                                  ;       GETENT should be called to set [LASTENT]
 26773                                  ;
 26774                                  ;----------------------------------------------------------------------------
 26775                                  
 26776                                  ; 19/05/2019 - Retro DOS v4.0
 26777                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26778                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26779                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26780                                  
 26781                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 26782                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 26783                                  
 26784                                  BUILDDIR:
 26785                                  	; 29/07/2018 - Retro DOS v3.0
 26786                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26787                                  
 26788 00004835 A1[D805]                        MOV     AX,[ENTFREE]
 26789 00004838 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26790                                  	;JZ	short CHECK_IF_ROOT
 26791                                          ;CLC
 26792                                          ;retn
 26793                                  	; 24/09/2023
 26794 0000483B 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26795                                  
 26796                                  CHECK_IF_ROOT:
 26797 0000483D 833E[C205]00                    CMP     word [DIRSTART],0
 26798 00004842 7502                            JNZ	short NEWDIR
 26799                                          ;STC
 26800                                  	; 24/09/2023
 26801                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26802                                  builddir_cmc_retn:
 26803                                  	; 24/09/2023
 26804 00004844 F5                      	cmc	; cf=1 <-> cf=0
 26805                                  builddir_retn:
 26806 00004845 C3                              retn				; Can't grow root
 26807                                  
 26808                                  	;entry   NEWDIR
 26809                                  NEWDIR: 
 26810 00004846 8B1E[C205]              	MOV     BX,[DIRSTART]
 26811 0000484A 09DB                            OR      BX,BX
 26812 0000484C 7405                            JZ	short NULLDIR
 26813 0000484E E82806                  	call	GETEOF
 26814 00004851 72F2                            jc	short builddir_retn	; Screw up
 26815                                  NULLDIR:
 26816 00004853 B90100                          MOV     CX,1
 26817 00004856 E83905                  	call	ALLOCATE
 26818 00004859 72EA                            jc	short  builddir_retn
 26819 0000485B 8B16[C205]                      MOV     DX,[DIRSTART]
 26820 0000485F 09D2                            OR      DX,DX
 26821 00004861 750D                            JNZ	short ADDINGDIR
 26822 00004863 E8DBF5                  	call	SETDIRSRCH
 26823 00004866 72DD                            jc	short  builddir_retn
 26824 00004868 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26825 0000486E EB29                            JMP     SHORT GOTDIRREC
 26826                                  ADDINGDIR:
 26827 00004870 53                              PUSH    BX
 26828 00004871 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26829 00004875 E82D0C                          call	IsEOF
 26830 00004878 5B                              POP     BX
 26831 00004879 7217                            JB	short NOTFIRSTGROW
 26832                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26833 0000487B 891E[BC05]                      MOV     [CLUSNUM],BX
 26834                                  	; 24/09/2023
 26835                                  	;PUSH	CX ; (not necessary)
 26836 0000487F 50                      	PUSH	AX
 26837 00004880 55                      	PUSH	BP
 26838 00004881 B401                            MOV     AH,1			; CLUSNUM update
 26839                                  	; 15/12/2022
 26840 00004883 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26841                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26842                                  	;;mov	dl,[es:bp+0]
 26843                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26844 00004887 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26845 0000488B 89DD                            MOV     BP,BX 			; CLUSNUM
 26846 0000488D E80DDE                  	call	FastOpen_Update
 26847 00004890 5D                              POP     BP
 26848 00004891 58                              POP     AX
 26849                                  	; 24/09/2023
 26850                                          ;POP	CX
 26851                                  
 26852                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26853                                  NOTFIRSTGROW:
 26854 00004892 89DA                            MOV     DX,BX
 26855 00004894 30DB                            XOR     BL,BL
 26856 00004896 E8CC04                  	call	FIGREC
 26857                                  GOTDIRREC:
 26858                                  	;mov	cl,[es:bp+4]
 26859 00004899 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26860 0000489D FEC1                            INC     CL
 26861 0000489F 30ED                            XOR     CH,CH
 26862                                  ZERODIR:
 26863 000048A1 51                              PUSH    CX
 26864                                  	; 22/09/2023
 26865                                  	;;mov	byte [ALLOWED],18h
 26866                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26867 000048A2 B0FF                            MOV     AL,0FFH
 26868                                          ;call	GETBUFFR
 26869 000048A4 E82210                          call	GETBUFFRD ; *
 26870 000048A7 7302                    	JNC	short GET_SSIZE
 26871 000048A9 59                              POP     CX
 26872 000048AA C3                              retn
 26873                                  
 26874                                  GET_SSIZE:
 26875                                  	;mov	cx,[es:bp+2]
 26876 000048AB 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26877 000048AF 06                              PUSH    ES
 26878 000048B0 C43E[E205]                      LES     DI,[CURBUF]
 26879                                  	;or	byte [es:di+5],4
 26880 000048B4 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26881 000048B9 57                              PUSH    DI
 26882                                  	;;add	di,16	; MSDOS 3.3
 26883                                  	;add	di,20	; MSDOS 6.0	
 26884 000048BA 83C714                          ADD     DI,BUFINSIZ
 26885 000048BD 31C0                            XOR     AX,AX
 26886 000048BF D1E9                            SHR     CX,1
 26887 000048C1 F3AB                            REP     STOSW
 26888 000048C3 7301                            JNC	short EVENZ
 26889 000048C5 AA                              STOSB
 26890                                  EVENZ:
 26891 000048C6 5F                              POP     DI
 26892                                  
 26893                                  	; MSDOS 6.0
 26894 000048C7 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26895                                  					;LB. if already dirty		  ;AN000;
 26896 000048CC 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26897 000048CE E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26898                                          
 26899                                  	;or	byte [es:di+5],40h
 26900 000048D1 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26901                                  yesdirty7:
 26902 000048D6 07                              POP	ES
 26903 000048D7 59                              POP	CX
 26904                                  
 26905                                  	; 19/05/2019 - Retro DOS v4.0
 26906                                  
 26907                                  	; MSDOS 3.3
 26908                                  	;INC	DX
 26909                                  
 26910                                  	; MSDOS 6.0
 26911                                  	; 24/09/2023
 26912                                  	;add	dx,1
 26913                                  	;;adc	word [HIGH_SECTOR],0
 26914                                  	;; 24/09/2023
 26915                                  	;; ax=0
 26916                                  	;adc	[HIGH_SECTOR],ax ; 0
 26917                                  	; 24/09/2023
 26918 000048D8 42                      	inc	dx
 26919 000048D9 7504                    	jnz	short loop_zerodir
 26920 000048DB FF06[0706]              	inc	word [HIGH_SECTOR]
 26921                                  loop_zerodir:
 26922 000048DF E2C0                            LOOP    ZERODIR
 26923                                  
 26924 000048E1 A1[4803]                        MOV     AX,[LASTENT]
 26925 000048E4 40                              INC     AX
 26926                                  	; 24/09/2023
 26927                                  	; cf=0
 26928                                  	;CLC
 26929 000048E5 C3                              retn
 26930                                  
 26931                                  ;--------------------------------------------------------------------------
 26932                                  ;
 26933                                  ; Procedure Name : SETDOTENT
 26934                                  ;
 26935                                  ; set up a . or .. directory entry for a directory.
 26936                                  ;
 26937                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26938                                  ;               AX contains ". " or ".."
 26939                                  ;               DX contains first cluster of entry
 26940                                  ;
 26941                                  ;----------------------------------------------------------------------------
 26942                                  
 26943                                  SETDOTENT:
 26944                                  ;	Fill in name field
 26945 000048E6 AB                              STOSW
 26946 000048E7 B90400                          MOV     CX,4
 26947 000048EA B82020                          MOV     AX,"  " ; 2020h
 26948 000048ED F3AB                            REP     STOSW
 26949 000048EF AA                              STOSB
 26950                                  
 26951                                  ;	Set up attribute
 26952                                  	;mov	al, 10h
 26953 000048F0 B010                            MOV     AL,attr_directory
 26954 000048F2 AA                              STOSB
 26955                                  
 26956                                  ;	Initialize time and date of creation
 26957 000048F3 83C70A                          ADD     DI,10
 26958 000048F6 8B36[9E05]                      MOV     SI,[THISSFT]
 26959                                  	;mov	ax,[si+0Dh]
 26960 000048FA 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26961 000048FD AB                              STOSW
 26962                                  	;mov	ax,[si+0Fh]
 26963 000048FE 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26964 00004901 AB                      	STOSW
 26965                                  
 26966                                  ;	Set up first cluster field
 26967 00004902 89D0                            MOV     AX,DX
 26968 00004904 AB                              STOSW
 26969                                  
 26970                                  ;	0 file size
 26971 00004905 31C0                            XOR     AX,AX
 26972 00004907 AB                              STOSW
 26973 00004908 AB                              STOSW
 26974 00004909 C3                              retn
 26975                                  
 26976                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26977                                  ;---------------------------------------------------------------------------
 26978                                  ;
 26979                                  ; Procedure Name : MakeNode
 26980                                  ;
 26981                                  ; Inputs:
 26982                                  ;       AL - attribute to create
 26983                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26984                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26985                                  ;               (AH ignored on dirs and devices)
 26986                                  ;
 26987                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26988                                  ;               a name already existant is ALWAYS an error in these cases.
 26989                                  ;
 26990                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26991                                  ;               terminated)
 26992                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26993                                  ;               ( = -1 if current dir not involved, else
 26994                                  ;                Points to first char after last "/" of current dir part)
 26995                                  ;       [THISCDS] Points to CDS being used
 26996                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26997                                  ; Function:
 26998                                  ;       Make a new node
 26999                                  ; Outputs:
 27000                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27001                                  ;       CARRY SET IF ERROR
 27002                                  ;          AX = 1 A node by this name exists and is a directory
 27003                                  ;          AX = 2 A new node could not be created
 27004                                  ;          AX = 3 A node by this name exists and is a disk file
 27005                                  ;               (AH was NZ on input)
 27006                                  ;          AX = 4 Bad Path
 27007                                  ;               SI return from GetPath maintained
 27008                                  ;          AX = 5 Attribute mismatch
 27009                                  ;          AX = 6 Sharing Violation
 27010                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27011                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27012                                  ;       ELSE
 27013                                  ;          AX = 0 Disk Node
 27014                                  ;          AX = 3 Device Node (error in some cases)
 27015                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27016                                  ;               containing new node.
 27017                                  ;          [CURBUF+2]:BX Points to entry
 27018                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27019                                  ;          [THISSFT] is filled in
 27020                                  ;               sf_mode = unchanged.
 27021                                  ;          Attribute byte in entry is input AL
 27022                                  ; DS preserved, others destroyed
 27023                                  ;
 27024                                  ;-------------------------------------------------------------------------
 27025                                  
 27026                                  ; 19/05/2019 - Retro DOS v4.0
 27027                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27028                                  
 27029                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27030                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27031                                  
 27032                                  MakeNode:
 27033                                  	;mov	word [CREATING],0E5FFh
 27034 0000490A C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27035 00004910 50                              PUSH    AX              ; Save AH value
 27036 00004911 C606[4C03]00            	MOV	byte [NoSetDir],0
 27037 00004916 A2[6D05]                	MOV	[SATTRIB],AL
 27038 00004919 E888F5                  	call	GetPathNoSet
 27039 0000491C 88CA                            MOV     DL,CL           ; Save CL info
 27040 0000491E 89C1                            MOV     CX,AX           ; Device ID to CH
 27041 00004920 58                              POP     AX              ; Get back AH
 27042 00004921 732E                            JNC	short make_exists ; File existed
 27043 00004923 7505                            JNZ	short make_err_4 ; Path bad
 27044 00004925 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 27045 00004928 7406                            JZ	short make_type	; Name simply not found, and no metas
 27046                                  make_err_4:
 27047 0000492A B004                            MOV     AL,4            ; case 1 bad path
 27048                                  make_err_ret:
 27049 0000492C 30E4                            XOR     AH,AH
 27050 0000492E F9                              STC
 27051                                  ;make_retn:	; 22/11/2022
 27052 0000492F C3                              retn
 27053                                  
 27054                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 27055                                  RENAME_MAKE:
 27056                                  make_type:
 27057                                  ;Extended Open hooks
 27058                                  	; MSDOS 6.0
 27059                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27060 00004930 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27061 00004935 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27062 00004937 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27063                                  					;FT. set for extended open ;AN000;
 27064                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27065 0000493C F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27066 00004941 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27067 00004943 F9                      	STC				;FT. set carry			;AN000;
 27068 00004944 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27069                                  	; 22/11/2022
 27070                                  make_retn:
 27071                                  	;return
 27072 00004947 C3                      	retn				;FT.				;AN000;
 27073                                  
 27074                                  ;	Extended Open hooks
 27075                                  
 27076                                  make_type2:
 27077 00004948 C43E[9E05]                      LES     DI,[THISSFT]
 27078 0000494C 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 27079 0000494E F9                              STC                     ; Not found
 27080 0000494F EB5A                            JMP     short make_new
 27081                                  
 27082                                  ; The node exists. It may be either a device, directory or file:
 27083                                  ;   Zero set => directory
 27084                                  ;   High bit of CH on => device
 27085                                  ;   else => file
 27086                                  
 27087                                  make_exists:
 27088 00004951 7448                            JZ	short make_exists_dir
 27089 00004953 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 27090                                  	;test	byte [ATTRIB],18h
 27091 00004955 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27092 0000495A 753B                            JNZ	short make_err_ret_5
 27093                                  				; Cannot already exist as Disk or Device Node
 27094                                                                  ;       if making DIR or Volume ID
 27095 0000495C 08ED                            OR      CH,CH
 27096 0000495E 781A                            JS	short make_share ; No further checks on attributes if device
 27097 00004960 08E4                            OR      AH,AH
 27098 00004962 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27099 00004964 51                              PUSH    CX              ; Save device ID
 27100 00004965 8E06[E405]                      MOV     ES,[CURBUF+2]
 27101                                  	;mov	ch,[es:bx+0Bh]
 27102 00004969 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27103                                  	;test	ch,1
 27104 0000496D F6C501                  	test	CH,attr_read_only
 27105 00004970 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 27106 00004972 E8D0F7                  	call	MatchAttributes
 27107 00004975 59                              POP     CX              ; Devid back in CH
 27108 00004976 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 27109 00004978 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 27110                                  make_share:
 27111 0000497A 30E4                            XOR     AH,AH
 27112 0000497C 50                              PUSH    AX              ; Save Disk or Device node
 27113 0000497D 51                              PUSH    CX              ; Save Device ID
 27114 0000497E 88EC                            MOV     AH,CH           ; Device ID to AH
 27115 00004980 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 27116 00004983 C43E[9E05]                      LES     DI,[THISSFT]
 27117 00004987 56                      	push	si
 27118 00004988 53                      	push	bx		; Save CURBUF pointers
 27119 00004989 E86729                  	call	ShareEnter
 27120 0000498C 735A                            jnc	short MakeEndShare
 27121                                  
 27122                                  ; User failed request.
 27123 0000498E 5B                      	pop	bx
 27124 0000498F 5E                      	pop	si
 27125 00004990 59                      	pop	cx
 27126 00004991 58                      	pop	ax
 27127                                  
 27128                                  Make_Share_ret:
 27129 00004992 B006                            MOV     AL,6
 27130 00004994 EB96                            JMP	short make_err_ret
 27131                                  
 27132                                  make_err_ret_5P:
 27133 00004996 59                              POP     CX              ; Get back device ID
 27134                                  make_err_ret_5:
 27135 00004997 B005                            MOV     AL,5            ; Attribute mismatch
 27136                                          ; 22/11/2022
 27137 00004999 EB91                    	JMP     short make_err_ret
 27138                                  
 27139                                  make_exists_dir:
 27140 0000499B B001                            MOV     AL,1            ; exists as directory, always an error
 27141                                  	; 22/11/2022
 27142 0000499D EB8D                    	JMP     short make_err_ret
 27143                                  
 27144                                  make_save:
 27145 0000499F 50                              PUSH    AX              ; Save whether Disk or File
 27146 000049A0 89C8                            MOV     AX,CX           ; Device ID to AH
 27147 000049A2 E87400                          CALL    NEWENTRY
 27148 000049A5 58                              POP     AX              ; 0 if Disk, 3 if File
 27149 000049A6 739F                            jnc	short make_retn
 27150 000049A8 B002                            MOV     AL,2            ; create failed case 2
 27151                                  make_save_retn:
 27152 000049AA C3                              retn
 27153                                  
 27154                                  make_new:
 27155 000049AB E8F1FF                          call    make_save
 27156 000049AE 72FA                            jc	short make_save_retn	; case 2 fail
 27157                                  	;test	byte [ATTRIB],10h
 27158 000049B0 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27159 000049B5 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 27160                                  					; so don't tell the sharer about them
 27161 000049B7 50                      	push	ax
 27162 000049B8 53                      	push	bx
 27163 000049B9 56                      	push	si		
 27164 000049BA E83629                          call	ShareEnter
 27165 000049BD 5E                      	pop	si
 27166 000049BE 5B                      	pop	bx
 27167 000049BF 58                      	pop	ax
 27168 000049C0 73E8                    	jnc	short make_save_retn
 27169                                  
 27170                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27171                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27172                                  ; possible: delete the newly created directory entry and return share_error.
 27173                                  
 27174 000049C2 50                              PUSH    AX
 27175 000049C3 C43E[E205]                      LES     DI,[CURBUF]
 27176                                  	;mov	byte [es:bx],0E5h
 27177 000049C7 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27178                                  	
 27179                                  	; MSDOS 6.0
 27180                                  	;test	byte [es:di+5],40h
 27181 000049CB 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27182                                  					;LB. if already dirty		  ;AN000;
 27183 000049D0 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27184                                  	; 22/11/2022
 27185 000049D2 E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27186                                  	;or	byte [es:di+5],40h
 27187 000049D5 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27188                                  yesdirty8:
 27189 000049DA C42E[8A05]                      LES     BP,[THISDPB]
 27190                                  	; 15/12/2022
 27191 000049DE 268A4600                        mov	al,[ES:BP]
 27192                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27193                                  	;;mov	al,[es:bp+0]
 27194                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27195 000049E2 E8E60F                          call	FLUSHBUF		; write out buffer.
 27196 000049E5 58                              POP     AX
 27197 000049E6 EBAA                            jmp	short Make_Share_ret
 27198                                  
 27199                                  ; We have found an existing file. We have also entered it into the share set.
 27200                                  ; At this point we need to call newentry to correctly address the problem of
 27201                                  ; getting rid of old data (create an existing file) or creating a new
 27202                                  ; directory entry (create a new file). Unfortunately, this operation may
 27203                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27204                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27205                                  ; the share set now, do the operation and then reassert the share access.
 27206                                  ;
 27207                                  ; We are allowed to do this! There is no window! After all, we are in
 27208                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27209                                  
 27210                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27211                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27212                                  
 27213                                  MakeEndShare:
 27214 000049E8 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 27215 000049EC 31C0                            XOR     AX,AX
 27216 000049EE E81CC9                  	call	ECritSFT
 27217 000049F1 268705                  	xchg	AX,[ES:DI]
 27218                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27219 000049F4 50                      	push	ax
 27220 000049F5 57                      	push	di
 27221 000049F6 06                      	push	es
 27222 000049F7 9C                              PUSHF
 27223 000049F8 E8F328                          call	ShareEnd                ; remove sharing
 27224 000049FB 9D                              POPF
 27225 000049FC 07                      	pop	es
 27226 000049FD 5F                      	pop	di
 27227 000049FE 268F05                          pop	word [ES:DI]	
 27228                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27229 00004A01 E824C9                  	call	LCritSFT
 27230                                  	; 22/11/2022
 27231                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27232 00004A04 5B                      	pop	bx
 27233 00004A05 5E                      	pop	si
 27234 00004A06 59                      	pop	cx
 27235 00004A07 58                      	pop	ax
 27236 00004A08 E894FF                          CALL    make_save
 27237                                  
 27238                                  ; If the user failed, we do not reenter into the sharing set.
 27239                                  
 27240 00004A0B 729D                            jc	short make_save_retn	; bye if error
 27241 00004A0D 50                      	push	ax
 27242 00004A0E 53                      	push	bx
 27243 00004A0F 56                      	push	si
 27244 00004A10 9C                              PUSHF
 27245 00004A11 E8DF28                          call	ShareEnter
 27246 00004A14 9D                              POPF
 27247 00004A15 5E                      	pop	si
 27248 00004A16 5B                      	pop	bx
 27249 00004A17 58                      	pop	ax
 27250                                  
 27251                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27252                                  
 27253                                  makeendshare_retn:
 27254 00004A18 C3                              retn
 27255                                  
 27256                                  ;---------------------------------------------------------------------------
 27257                                  ;
 27258                                  ; Procedure Name : NEWENTRY
 27259                                  ;
 27260                                  ; Inputs:
 27261                                  ;       [THISSFT] set
 27262                                  ;       [THISDPB] set
 27263                                  ;       [LASTENT] current last valid entry number in directory if no free
 27264                                  ;               entries
 27265                                  ;       [VOLID] set if a volume ID was found during search
 27266                                  ;	Attrib Contains attributes for new file
 27267                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27268                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27269                                  ;               NC means file existed (device)
 27270                                  ;               C  means file did not exist
 27271                                  ;       AH = Device ID byte
 27272                                  ;       If FILE
 27273                                  ;           [CURBUF+2]:BX points to start of directory entry
 27274                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27275                                  ;       If device
 27276                                  ;           DS:BX points to start of "fake" directory entry
 27277                                  ;           DS:SI points to dir_first of "fake" directory entry
 27278                                  ;               (has DWORD pointer to device header)
 27279                                  ; Function:
 27280                                  ;       Make a new directory entry
 27281                                  ;       If an old one existed it is truncated first
 27282                                  ; Outputs:
 27283                                  ;       Carry set if error
 27284                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 27285                                  ;               vol ID, user FAILed to I 24
 27286                                  ;       else
 27287                                  ;               outputs of DOOPEN
 27288                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27289                                  ;
 27290                                  ;----------------------------------------------------------------------------
 27291                                  
 27292                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27293                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27294                                  
 27295                                  NEWENTRY:
 27296 00004A19 C42E[8A05]                      LES     BP,[THISDPB]
 27297 00004A1D 7315                            JNC	short EXISTENT	
 27298 00004A1F 803E[4A03]00                    CMP     byte [FAILERR],0
 27299                                  	;STC
 27300                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 27301                                          ; 24/09/2023
 27302 00004A24 750C                    	jnz	short ERRRET3
 27303 00004A26 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 27304 00004A29 72ED                            jc	short makeendshare_retn	; Failed
 27305 00004A2B E8E4F3                          call	GETENT          ; Point at that free entry
 27306 00004A2E 72E8                            jc	short makeendshare_retn	; Failed
 27307 00004A30 EB0E                            JMP     SHORT FREESPOT
 27308                                  
 27309                                  ERRRET3:
 27310 00004A32 F9                              STC
 27311                                  newentry_retn:
 27312 00004A33 C3                              retn
 27313                                  
 27314                                  EXISTENT:
 27315 00004A34 08E4                            OR      AH,AH           ; Check if file is I/O device
 27316 00004A36 7903                            JNS	short NOT_DEV1
 27317 00004A38 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 27318                                  
 27319                                  NOT_DEV1:
 27320 00004A3B E82901                          call	FREEENT		; Free cluster chain
 27321 00004A3E 72F3                            jc	short newentry_retn ; Failed
 27322                                  FREESPOT:
 27323                                  	;test	byte [ATTRIB],8
 27324 00004A40 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27325 00004A45 7407                            JZ	short NOTVOLID
 27326 00004A47 803E[7B05]00                    CMP     BYTE [VOLID],0
 27327 00004A4C 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 27328                                  NOTVOLID:
 27329 00004A4E 8E06[E405]                      MOV     ES,[CURBUF+2]
 27330 00004A52 89DF                            MOV     DI,BX
 27331                                  
 27332 00004A54 BE[4B05]                        MOV     SI,NAME1
 27333                                  
 27334 00004A57 B90500                          MOV     CX,5
 27335 00004A5A F3A5                            REP     MOVSW
 27336 00004A5C A4                              MOVSB                   ; Move name into dir entry
 27337 00004A5D A0[6B05]                	MOV	AL,[ATTRIB]
 27338 00004A60 AA                      	STOSB                   ; Attributes
 27339                                  
 27340                                  ;; File Tagging for Create DOS 4.00
 27341 00004A61 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 27342                                  ;; File Tagging for Create DOS 4.00
 27343                                  
 27344 00004A63 31C0                            XOR     AX,AX
 27345 00004A65 F3AB                            REP     STOSW           ; Zero pad
 27346 00004A67 E886C0                          call	DATE16
 27347 00004A6A 92                              XCHG    AX,DX
 27348 00004A6B AB                              STOSW                   ; dir_time
 27349 00004A6C 92                              XCHG    AX,DX
 27350 00004A6D AB                              STOSW                   ; dir_date
 27351 00004A6E 31C0                            XOR     AX,AX
 27352 00004A70 57                              PUSH    DI              ; Correct SI input value
 27353                                  				; 	(recomputed for new buffer)
 27354 00004A71 AB                              STOSW                   ; Zero dir_first and size
 27355 00004A72 AB                              STOSW
 27356 00004A73 AB                              STOSW
 27357                                  updnxt:
 27358 00004A74 8B36[E205]              	MOV	SI,[CURBUF]
 27359                                  
 27360                                  	; 19/05/2019 - Retro DOS v4.0
 27361                                  
 27362                                  	; MSDOS 6.0
 27363 00004A78 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27364                                  				;LB. if already dirty		  ;AN000;
 27365 00004A7D 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27366 00004A7F E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27367                                          
 27368                                  	;or	byte [es:si+5],40h
 27369 00004A82 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27370                                  yesdirty9:
 27371 00004A87 C42E[8A05]                      LES     BP,[THISDPB]
 27372                                  	; 15/12/2022
 27373 00004A8B 268A4600                	MOV	AL,[ES:BP]
 27374                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27375                                  	;;mov	al,[es:bp+0]
 27376                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27377 00004A8F 50                              PUSH    AX
 27378 00004A90 53                              PUSH    BX
 27379                                  
 27380                                  ; If we have a file, we need to increment the open ref. count so that
 27381                                  ; we have some protection against invalid media changes if an Int 24
 27382                                  ; error occurs.
 27383                                  ; Do nothing for a device.
 27384                                  
 27385 00004A91 06                      	push	es
 27386 00004A92 57                      	push	di
 27387 00004A93 C43E[9E05]                      LES     DI,[THISSFT]
 27388                                  	;test	word [es:di+5],80h
 27389                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27390 00004A97 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27391 00004A9C 751A                            jnz	short GotADevice
 27392 00004A9E 1E                      	push	ds
 27393 00004A9F 53                      	push	bx
 27394 00004AA0 C51E[8A05]                      LDS     BX,[THISDPB]
 27395                                  	;mov	[es:di+7],bx
 27396 00004AA4 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27397 00004AA8 8CDB                            MOV     BX,DS
 27398                                  	;mov	[es:di+9],bx
 27399 00004AAA 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27400 00004AAE 5B                      	pop	bx
 27401 00004AAF 1F                      	pop	ds ; need to use DS for segment later on
 27402 00004AB0 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27403 00004AB3 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27404                                  GotADevice:
 27405 00004AB8 5F                      	pop	di
 27406 00004AB9 07                      	pop	es
 27407                                  
 27408 00004ABA E80E0F                          call	FLUSHBUF
 27409 00004ABD E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27410 00004AC0 5B                              POP     BX
 27411 00004AC1 58                              POP     AX
 27412 00004AC2 5E                              POP     SI              ; Get SI input back
 27413 00004AC3 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27414 00004AC5 7301                    	jnc	short DOOPEN    ; Failed
 27415 00004AC7 C3                      	retn
 27416                                  	
 27417                                  ;NOTE FALL THROUGH
 27418                                  
 27419                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27420                                  
 27421                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27422                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27423                                  
 27424                                  ; DOOPEN
 27425                                  ;----------------------------------------------------------------------------
 27426                                  ;
 27427                                  ; Inputs:
 27428                                  ;       [THISDPB] points to DPB if file
 27429                                  ;       [THISSFT] points to SFT being used
 27430                                  ;       AH = Device ID byte
 27431                                  ;       If FILE
 27432                                  ;           [CURBUF+2]:BX points to start of directory entry
 27433                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27434                                  ;       If device
 27435                                  ;           DS:BX points to start of "fake" directory entry
 27436                                  ;           DS:SI points to dir_first of "fake" directory entry
 27437                                  ;               (has DWORD pointer to device header)
 27438                                  ; Function:
 27439                                  ;       Fill in SFT from dir entry
 27440                                  ; Outputs:
 27441                                  ;       CARRY CLEAR
 27442                                  ;       sf_ref_count and sf_mode fields not altered
 27443                                  ;       sf_flags high byte = 0
 27444                                  ;       sf_flags low byte = AH except
 27445                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27446                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27447                                  ;       sf_position = 0
 27448                                  ;       If device
 27449                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27450                                  ;           sf_size = 0
 27451                                  ;       If file
 27452                                  ;           sf_firclus sf_size set from entry
 27453                                  ;           sf_devptr = [THISDPB]
 27454                                  ;           sf_cluspos = 0
 27455                                  ;           sf_lstclus = sf_firclus
 27456                                  ;           sf_dirsec sf_dirpos set
 27457                                  ; DS,SI,BX preserved, others destroyed
 27458                                  ;
 27459                                  ;----------------------------------------------------------------------------
 27460                                  
 27461                                  	;entry	DOOPEN
 27462                                  DOOPEN:
 27463                                  ;	Generate and store attribute
 27464                                  
 27465 00004AC8 88E6                            MOV     DH,AH           ; AH to different place
 27466 00004ACA C43E[9E05]                      LES     DI,[THISSFT]
 27467                                  	;add	di,4
 27468 00004ACE 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27469                                  	; 24/09/2023
 27470 00004AD1 31C0                    	xor	ax,ax
 27471                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27472                                  				;   attribute of 0 (for R/O testing etc).
 27473 00004AD3 08F6                            OR      DH,DH           ; See if our assumption good.
 27474 00004AD5 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27475 00004AD7 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27476                                  	;mov	al,[BX+0Bh]
 27477 00004ADB 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27478                                  				; If file, get attrib from dir entry
 27479                                  DEV_SFT1:
 27480 00004ADE AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27481                                  
 27482                                  ;	Generate and store flags word
 27483                                  
 27484                                  	; 24/09/2023
 27485                                  	;XOR	AX,AX
 27486                                          ; ah=0
 27487 00004ADF 88F0                    	MOV     AL,DH
 27488                                  	;or	al,40h
 27489 00004AE1 0C40                            OR      AL,devid_file_clean
 27490 00004AE3 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27491                                  
 27492                                  ;	Generate and store device pointer
 27493                                  
 27494 00004AE4 1E                              PUSH    DS
 27495                                  	;lds	ax,[bx+1Ah]
 27496 00004AE5 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27497 00004AE8 08F6                            OR      DH,DH
 27498 00004AEA 7805                            JS	short DEV_SFT2
 27499                                  
 27500                                  ;hkn; SS override
 27501 00004AEC 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27502                                  DEV_SFT2:
 27503 00004AF1 AB                              STOSW 			; store offset
 27504 00004AF2 8CD8                            MOV     AX,DS
 27505 00004AF4 1F                              POP     DS
 27506 00004AF5 AB                      	STOSW			; store segment
 27507                                  				; ES:DI -> sf_firclus
 27508                                  
 27509                                  ;	Generate pointer to, generate and store first cluster 
 27510                                  ;	(irrelevant for devices)
 27511                                  
 27512 00004AF6 56                              PUSH    SI              ; Save pointer to dir_first
 27513 00004AF7 A5                              MOVSW                   ; dir_first -> sf_firclus
 27514                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27515                                  
 27516                                  ;	Copy time/date of last modification
 27517                                  
 27518                                  	;sub	si,6
 27519 00004AF8 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27520                                  				; DS:SI->dir_time
 27521 00004AFB A5                              MOVSW                   ; dir_time -> sf_time
 27522                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27523 00004AFC A5                              MOVSW                   ; dir_date -> sf_date
 27524                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27525                                  
 27526                                  ;	Generate and store file size (0 for devices)
 27527                                  
 27528 00004AFD AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27529 00004AFE AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27530 00004AFF 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27531 00004B01 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27532 00004B02 08F6                            OR      DH,DH
 27533 00004B04 7904                            JNS	short FILE_SFT1
 27534 00004B06 31C0                            XOR     AX,AX
 27535 00004B08 89C1                            MOV     CX,AX           ; Devices are open ended
 27536                                  FILE_SFT1:
 27537 00004B0A 91                              XCHG    AX,CX
 27538 00004B0B AB                              STOSW                   ; Low word of sf_size
 27539 00004B0C 91                              XCHG    AX,CX
 27540 00004B0D AB                              STOSW                   ; High word of sf_size
 27541                                                                  ; ES:DI -> sf_position
 27542                                  ; Initialize position to 0
 27543                                  
 27544 00004B0E 31C0                            XOR     AX,AX
 27545 00004B10 AB                              STOSW
 27546 00004B11 AB                              STOSW                   ; sf_position
 27547                                                                  ; ES:DI -> sf_cluspos
 27548                                  
 27549                                  ; Generate cluster optimizations for files
 27550                                  
 27551 00004B12 08F6                            OR      DH,DH
 27552 00004B14 7843                            JS	short DEV_SFT3
 27553 00004B16 AB                              STOSW                   ; sf_cluspos ; 19h
 27554                                  	;mov	ax,[bx+1Ah]
 27555 00004B17 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27556                                  	; 19/05/2019
 27557                                  	; MSDOS 3.3
 27558                                  	;STOSW 			; sf_lstclus ; 1Bh
 27559                                  	; MSDOS 6.0
 27560 00004B1A 57                              PUSH	DI              ;AN004; save dirsec offset
 27561                                  	;sub	di,1Bh
 27562 00004B1B 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27563                                  	;mov	[es:di+35h],ax
 27564 00004B1E 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27565 00004B22 5F                              POP	DI              ;AN004; restore dirsec offset
 27566                                  
 27567                                  ; DOS 3.3  FastOpen  6/13/86
 27568                                  
 27569 00004B23 1E                      	PUSH	DS
 27570                                  
 27571                                  ;hkn; SS is DOSDATA
 27572 00004B24 16                      	push	ss
 27573 00004B25 1F                      	pop	ds
 27574                                  	;test	byte [FastOpenFlg],4
 27575 00004B26 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27576 00004B2B 7411                    	JZ	short Not_FastOpen
 27577                                  
 27578                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27579 00004B2D BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27580                                  
 27581                                  	;mov	ax,[si+1]
 27582 00004B30 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27583 00004B33 AB                              STOSW                   ; sf_dirsec
 27584                                  	; MSDOS 6.0
 27585                                  	;mov	ax,[si+3]
 27586 00004B34 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27587                                  				;;; changed for >32mb
 27588 00004B37 AB                              STOSW                   ; sf_dirsec
 27589                                  	; 19/08//2018
 27590 00004B38 8A04                    	mov	al,[SI]
 27591                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27592 00004B3A AA                              STOSB                   ; sf_dirpos
 27593 00004B3B 1F                              POP	DS
 27594                                          ;JMP	short Next_Name
 27595                                  	; 24/09/2023
 27596 00004B3C EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27597                                  
 27598                                  ; DOS 3.3  FastOpen  6/13/86
 27599                                  
 27600                                  Not_FastOpen:
 27601                                          ;POP     DS		; normal path
 27602                                  
 27603                                  ;hkn; SS override
 27604                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27605                                  	; 16/12/2022
 27606                                  	; 28/07/2019
 27607 00004B3E 8B36[E205]              	mov	si,[CURBUF]
 27608 00004B42 1F                      	pop	ds
 27609                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27610                                  	;pop	ds
 27611                                  	;mov	si,[ss:CURBUF]
 27612                                  	
 27613                                  	;mov	ax,[si+6]
 27614 00004B43 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27615 00004B46 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27616                                  	; 19/05/2019        
 27617                                  	; MSDOS 6.0
 27618                                  	;mov	ax,[si+8]
 27619 00004B47 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27620 00004B4A AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27621                                          
 27622 00004B4B 89D8                    	MOV     AX,BX
 27623                                  	;;add	si,16	; MSDOS 3.3	
 27624                                  	;add	si,20	; MSDOS 6.0
 27625 00004B4D 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27626 00004B50 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27627                                          ;mov	cl,32
 27628 00004B52 B120                    	MOV     CL,dir_entry.size
 27629 00004B54 F6F1                            DIV     CL
 27630 00004B56 AA                              STOSB                   ; sf_dirpos
 27631                                  Next_Name:
 27632 00004B57 EB03                            JMP     SHORT FILE_SFT2
 27633                                  
 27634                                  	; 24/09/2023
 27635                                  	; cf=0 (after 'or' instruction)
 27636                                  DEV_SFT3:
 27637                                  	;add	di,7
 27638 00004B59 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27639                                  FILE_SFT2:
 27640                                  
 27641                                  ; Copy in the object's name
 27642                                  
 27643 00004B5C 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27644 00004B5E B90B00                          MOV     CX,11
 27645 00004B61 F3A4                            REP     MOVSB           ; sf_name
 27646 00004B63 5E                              POP     SI              ; recover DS:SI -> dir_first
 27647                                  
 27648                                  ;hkn; SS is DOSDATA
 27649 00004B64 16                              push	ss
 27650 00004B65 1F                      	pop	ds
 27651                                  	; 24/09/2023
 27652                                  	; cf=0
 27653                                          ;CLC
 27654 00004B66 C3                              retn
 27655                                  
 27656                                  ;---------------------------------------------------------------------------
 27657                                  ;
 27658                                  ; Procedure Name : FREEENT
 27659                                  ;
 27660                                  ; Inputs:
 27661                                  ;       ES:BP -> DPB
 27662                                  ;       [CURBUF] Set
 27663                                  ;       [CURBUF+2]:BX points to directory entry
 27664                                  ;       [CURBUF+2]:SI points to above dir_first
 27665                                  ; Function:
 27666                                  ;       Free the cluster chain for the entry if present
 27667                                  ; Outputs:
 27668                                  ;       Carry set if error (currently user FAILed to I 24)
 27669                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27670                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27671                                  ;---------------------------------------------------------------------------
 27672                                  
 27673                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27674                                  FREEENT:
 27675 00004B67 1E                              PUSH    DS
 27676 00004B68 C53E[E205]                      LDS     DI,[CURBUF]
 27677 00004B6C 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27678                                  	; 19/05/2019 - Retro DOS v4.0
 27679                                  	; MSDOS 6.0
 27680 00004B6E 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27681                                  ;hkn; SS override
 27682 00004B71 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27683 00004B76 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27684 00004B79 1F                              POP     DS
 27685 00004B7A 83F902                  	CMP	CX,2
 27686 00004B7D 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27687                                  	;cmp	cx,[es:bp+0Dh]
 27688 00004B7F 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27689 00004B83 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27690 00004B85 29FB                            SUB     BX,DI
 27691 00004B87 53                              PUSH    BX              ; Save offset
 27692 00004B88 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27693 00004B8C 52                              PUSH    DX              ; Save sector number
 27694 00004B8D 89CB                            MOV     BX,CX
 27695 00004B8F E8AC02                          call	RELEASE         ; Free any data allocated
 27696 00004B92 5A                              POP     DX
 27697 00004B93 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27698 00004B97 7302                            JNC	short GET_BUF_BACK
 27699 00004B99 5B                              POP     BX
 27700                                  freeent_retn:
 27701 00004B9A C3                              retn			; Screw up
 27702                                  
 27703                                  GET_BUF_BACK:
 27704                                  	; 22/09/2023
 27705                                  	;;mov	byte [ALLOWED],18h
 27706                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27707                                          ;XOR	AL,AL ; *
 27708                                  	;call	GETBUFFR        ; Get sector back
 27709 00004B9B E8290D                  	call	GETBUFFER ; * ; pre read      
 27710                                  
 27711 00004B9E 5B                      	POP     BX              ; Get offset back
 27712 00004B9F 72F9                            jc	short freeent_retn
 27713 00004BA1 E8B3EA                  	call	SET_BUF_AS_DIR
 27714 00004BA4 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27715 00004BA8 89DE                            MOV     SI,BX
 27716                                  	;add	si,1Ah
 27717 00004BAA 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27718                                  RET1:
 27719 00004BAD F8                              CLC
 27720 00004BAE C3                              retn
 27721                                  
 27722                                  ;---------------------------------------------------------------------------
 27723                                  ;
 27724                                  ; Procedure Name : CHECK_VIRT_OPEN
 27725                                  ;
 27726                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27727                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27728                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27729                                  ; flag [VIRTUAL_OPEN].
 27730                                  ; No registers affected (including flags).
 27731                                  ; On input, [THISSFT] points to current SFT.
 27732                                  ;
 27733                                  ;---------------------------------------------------------------------------
 27734                                  
 27735                                  CHECK_VIRT_OPEN:
 27736 00004BAF 50                      	PUSH    AX
 27737 00004BB0 9F                              lahf                    ; preserve flags
 27738 00004BB1 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27739 00004BB6 7410                            JZ	short ALL_CLOSED
 27740 00004BB8 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27741 00004BBD 06                      	push	es
 27742 00004BBE 57                      	push	di
 27743 00004BBF C43E[9E05]                      LES     DI,[THISSFT]
 27744 00004BC3 E8ADF9                          call	DEV_CLOSE_SFT
 27745 00004BC6 5F                      	pop	di
 27746 00004BC7 07                      	pop	es
 27747                                  
 27748                                  ALL_CLOSED:
 27749 00004BC8 9E                              sahf                    ; restore flags
 27750 00004BC9 58                              POP     AX
 27751 00004BCA C3                              retn
 27752                                  
 27753                                  ;============================================================================
 27754                                  ; ROM.ASM, MSDOS 6.0, 1991
 27755                                  ;============================================================================
 27756                                  ; 29/07/2018 - Retro DOS v3.0
 27757                                  ; 20/05/2019 - Retro DOS v4.0
 27758                                  
 27759                                  ;	TITLE	ROM - Miscellaneous routines
 27760                                  ;	NAME	ROM
 27761                                  
 27762                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27763                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27764                                  ;
 27765                                  ;	SKPCLP
 27766                                  ;	FNDCLUS
 27767                                  ;	BUFSEC
 27768                                  ;	BUFRD
 27769                                  ;	BUFWRT
 27770                                  ;	NEXTSEC
 27771                                  ;	OPTIMIZE
 27772                                  ;	FIGREC
 27773                                  ;	ALLOCATE
 27774                                  ;	RESTFATBYT
 27775                                  ;	RELEASE
 27776                                  ;	RELBLKS
 27777                                  ;	GETEOF
 27778                                  ;
 27779                                  ;	Modification history:
 27780                                  ;
 27781                                  ;		Created: ARR 30 March 1983
 27782                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27783                                  
 27784                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27785                                  ;--------------------------------------------------------------------------
 27786                                  ;
 27787                                  ; Procedure Name : FNDCLUS
 27788                                  ;
 27789                                  ; Inputs:
 27790                                  ;       CX = No. of clusters to skip
 27791                                  ;       ES:BP = Base of drive parameters
 27792                                  ;       [THISSFT] point to SFT
 27793                                  ; Outputs:
 27794                                  ;       BX = Last cluster skipped to
 27795                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27796                                  ;       DX = Position of last cluster
 27797                                  ;       Carry set if error (currently user FAILed to I 24)
 27798                                  ; DI destroyed. No other registers affected.
 27799                                  ;--------------------------------------------------------------------------
 27800                                  
 27801                                  ; 20/05/2019 - Retro DOS v4.0
 27802                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27803                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27804                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27805                                  
 27806                                  FNDCLUS:
 27807 00004BCB 06                      	PUSH	ES
 27808 00004BCC C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27809                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27810                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27811 00004BD0 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27812                                  	;mov	dx,[es:di+19h]
 27813 00004BD4 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27814 00004BD8 09DB                    	OR	BX,BX
 27815 00004BDA 7424                    	JZ	short NOCLUS
 27816                                  
 27817 00004BDC 29D1                            SUB     CX,DX
 27818 00004BDE 7308                            JNB	short FINDIT
 27819                                  
 27820 00004BE0 01D1                            ADD     CX,DX
 27821 00004BE2 31D2                            XOR     DX,DX
 27822                                  	;mov	bx,[es:di+0Bh]
 27823 00004BE4 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27824                                  FINDIT:
 27825 00004BE8 07                              POP	ES
 27826 00004BE9 E313                    	JCXZ	RET9
 27827                                  
 27828                                  	;entry	SKPCLP
 27829                                  SKPCLP:
 27830 00004BEB E8CE08                  	call	UNPACK
 27831 00004BEE 7214                            jc	short fndclus_retn	; retc
 27832                                  
 27833                                  	; 09/09/2018
 27834                                  
 27835                                  	; MSDOS 3.3
 27836                                  	;push	bx
 27837                                  	;mov	bx,di
 27838                                  	;call	IsEOF
 27839                                  	;pop	bx	
 27840                                  	;jae	short RET9
 27841                                  
 27842                                  	; 20/05/2019 - Retro DOS v4.0
 27843                                  
 27844                                  	; MSDOS 6.0
 27845 00004BF0 87DF                    	xchg	bx,di
 27846 00004BF2 E8B008                  	call	IsEOF
 27847 00004BF5 87DF                    	xchg	bx,di
 27848 00004BF7 7305                    	jae	short RET9
 27849                                  
 27850 00004BF9 87DF                            XCHG    BX,DI
 27851 00004BFB 42                              INC     DX
 27852                                  
 27853 00004BFC E2ED                    	LOOP	SKPCLP			; RMFS
 27854                                  RET9:	
 27855 00004BFE F8                      	CLC
 27856 00004BFF C3                              retn
 27857                                  NOCLUS:
 27858 00004C00 07                              POP	ES
 27859 00004C01 41                              INC	CX
 27860 00004C02 4A                              DEC	DX
 27861 00004C03 F8                              CLC
 27862                                  
 27863                                  fndclus_retn:
 27864 00004C04 C3                              retn
 27865                                  
 27866                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27867                                  ;--------------------------------------------------------------------------
 27868                                  ;
 27869                                  ; Procedure Name : BUFSEC
 27870                                  ;
 27871                                  ; Inputs:
 27872                                  ;       AH = priority of buffer
 27873                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27874                                  ;       ES:BP = Base of drive parameters
 27875                                  ;       [CLUSNUM] = Physical cluster number
 27876                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27877                                  ;       [BYTCNT1] = Size of transfer
 27878                                  ; Function:
 27879                                  ;       Insure specified sector is in buffer, flushing buffer before
 27880                                  ;       read if necessary.
 27881                                  ; Outputs:
 27882                                  ;       ES:DI = Pointer to buffer
 27883                                  ;       SI = Pointer to transfer address
 27884                                  ;       CX = Number of bytes
 27885                                  ;       [NEXTADD] updated
 27886                                  ;       [TRANS] set to indicate a transfer will occur
 27887                                  ;       Carry set if error (user FAILed to I 24)
 27888                                  ;--------------------------------------------------------------------------
 27889                                  
 27890                                  BUFSEC:
 27891 00004C05 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27892 00004C09 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27893                                  	;mov	byte [ALLOWED],38h
 27894 00004C0D C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27895 00004C12 E85001                          CALL    FIGREC
 27896 00004C15 E8B60C                  	call	GETBUFFR
 27897 00004C18 72EA                            jc	short fndclus_retn
 27898                                  
 27899 00004C1A C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27900 00004C1F 8B36[B805]                      MOV     SI,[NEXTADD]
 27901 00004C23 89F7                            MOV     DI,SI
 27902 00004C25 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27903 00004C29 01CF                            ADD     DI,CX
 27904 00004C2B 893E[B805]                      MOV     [NEXTADD],DI
 27905 00004C2F C43E[E205]                      LES     DI,[CURBUF]
 27906                                  	;or	byte [es:di+5],8
 27907 00004C33 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27908                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27909                                  	;lea	di,[di+20] ; MSDOS 6.0
 27910 00004C38 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27911 00004C3B 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27912 00004C3F F8                              CLC
 27913 00004C40 C3                              retn
 27914                                  
 27915                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27916                                  
 27917                                  ;---------------------------------------------------------------------------
 27918                                  ;
 27919                                  ; Procedure Name : BUFRD
 27920                                  ;
 27921                                  ; Do a partial sector read via one of the system buffers
 27922                                  ; ES:BP Points to DPB
 27923                                  ; Carry set if error (currently user FAILed to I 24)
 27924                                  ;
 27925                                  ; DS - set to DOSDATA
 27926                                  ;
 27927                                  ;----------------------------------------------------------------------------
 27928                                  
 27929                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27930                                  	; 20/05/2019 - Retro DOS v4.0
 27931                                  BUFRD:
 27932 00004C41 06                              PUSH	ES
 27933 00004C42 31C0                            xor	ax, ax			; pre-read sector
 27934 00004C44 E8BEFF                          CALL    BUFSEC
 27935 00004C47 7303                            JNC	short BUF_OK
 27936                                  
 27937                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27938 00004C49 07                              POP	ES
 27939 00004C4A EB2B                            JMP     SHORT RBUFPLACED
 27940                                  
 27941                                  BUF_OK:
 27942 00004C4C 8CC3                            MOV     BX,ES
 27943 00004C4E 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27944 00004C52 8EDB                            MOV     DS,BX
 27945 00004C54 87FE                    	XCHG    DI,SI
 27946 00004C56 D1E9                            SHR     CX,1
 27947                                  ;M039
 27948                                  	; MSDOS 3.3
 27949                                  	;JNC	short EVENRD
 27950                                  	;MOVSB
 27951                                  ;EVENRD:
 27952                                  	;REP     MOVSW
 27953                                  
 27954                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27955                                  ;       DS:SI-> Source within Buffer.
 27956                                  ;       ES:DI-> Destination within Transfer memory block.
 27957                                  
 27958                                  	; MSDOS 6.0
 27959 00004C58 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27960                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27961                                  	;rep	movsb                   ;Copy last byte.
 27962                                  	; 16/12/2022
 27963 00004C5A 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27964 00004C5C A4                      	movsb ; ****
 27965                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27966                                  	;adc	cx,0
 27967                                  	;rep	movsb
 27968                                  ;M039
 27969                                  EVENRD: ; ****
 27970 00004C5D 07                              POP	ES
 27971                                  ;hkn; SS override
 27972 00004C5E 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27973                                  	;;lea	bx,[di+16]
 27974                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27975 00004C63 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27976 00004C66 29DE                            SUB     SI,BX                   ; Position in buffer
 27977 00004C68 E8030C                          call	PLACEBUF
 27978                                  	;cmp	si,[es:bp+2]
 27979 00004C6B 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27980 00004C6F 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27981                                  ;M039
 27982                                  	; MSDOS 3.3
 27983                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27984                                                                          ;  even though it is MRU.
 27985                                          ; MSDOS 6.0
 27986 00004C71 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27987                                  ;M039					; chucking even though it is MRU.
 27988                                  
 27989                                  RBUFPLACEDC:
 27990 00004C76 F8                              CLC
 27991                                  RBUFPLACED:
 27992 00004C77 16                      	push	ss
 27993 00004C78 1F                      	pop	ds
 27994 00004C79 C3                              retn
 27995                                  
 27996                                  ;----------------------------------------------------------------------------
 27997                                  ;
 27998                                  ; Procedure : BUFWRT
 27999                                  ;
 28000                                  ; Do a partial sector write via one of the system buffers
 28001                                  ; ES:BP Points to DPB
 28002                                  ; Carry set if error (currently user FAILed to I 24)
 28003                                  ;
 28004                                  ; DS - set to DOSDATA
 28005                                  ;
 28006                                  ;----------------------------------------------------------------------------
 28007                                  
 28008                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28009                                  	; 20/05/2019 - Retro DOS v4.0
 28010                                  BUFWRT:
 28011                                          ;MOV     AX,[SECPOS]
 28012                                          ; MSDOS 6.0
 28013                                  	;ADD	AX,1            	; Set for next sector
 28014                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28015                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28016                                          ; 24/09/2023
 28017 00004C7A FF06[C405]              	inc	word [SECPOS]
 28018 00004C7E 7504                    	jnz	short bufw_secpos
 28019 00004C80 FF06[C605]              	inc	word [SECPOS+2]
 28020                                  bufw_secpos:
 28021 00004C84 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28022 00004C87 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28023 00004C8B B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 28024 00004C8D 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 28025 00004C8F 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 28026 00004C91 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28027                                  
 28028                                  	; MSDOS 3.3
 28029                                  	;INC	AX
 28030                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28031                                  
 28032                                  	; 20/05/2019
 28033                                  	; MSDOS 3.3 & MSDOS 6.0
 28034 00004C94 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 28035 00004C98 B001                            MOV     AL,1
 28036 00004C9A 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28037                                  _doread:
 28038 00004C9C 30C0                            XOR     AL,AL
 28039                                  NOREAD:
 28040 00004C9E 06                              PUSH	ES
 28041 00004C9F E863FF                          CALL    BUFSEC
 28042 00004CA2 72A5                    	JC	short BUF_IO_FAIL
 28043 00004CA4 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 28044 00004CA8 D1E9                            SHR     CX,1
 28045                                  ;M039
 28046                                  	; MSDOS 3.3
 28047                                  	;JNC	short EVENWRT ; 09/09/2018
 28048                                  	;MOVSB
 28049                                  ;EVENWRT:
 28050                                  	;REP	MOVSW
 28051                                  
 28052                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28053                                  ;       DS:SI-> Source within Transfer memory block.
 28054                                  ;       ES:DI-> Destination within Buffer.
 28055                                  
 28056                                  	; MSDOS 6.0
 28057 00004CAA F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28058                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28059                                  	;rep	movsb                   ;Copy last byte.
 28060                                  	; 16/12/2022
 28061 00004CAC 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28062 00004CAE A4                      	movsb ; ****
 28063                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28064                                  	;adc	cx,0
 28065                                  	;rep	movsb
 28066                                  ;M039
 28067                                  EVENWRT: ; ****
 28068 00004CAF 07                              POP	ES
 28069                                  
 28070                                  ;hkn; SS override
 28071 00004CB0 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 28072                                  
 28073                                  	; MSDOS 6.0
 28074 00004CB5 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28075                                  					;LB. if already dirty		  ;AN000;
 28076 00004CB9 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 28077 00004CBB E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28078                                  	
 28079                                  	;or	byte [bx+5],40h
 28080 00004CBE 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28081                                  yesdirty10:
 28082                                  	;;lea	si,[bx+16]
 28083                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28084 00004CC2 8D7714                          LEA     SI,[BX+BUFINSIZ]
 28085 00004CC5 29F7                            SUB     DI,SI                   ; Position in buffer
 28086                                  ;M039
 28087                                  	; MSDOS 3.3
 28088                                  	;MOV	SI,DI
 28089                                  	;MOV	DI,BX
 28090                                  	;call	PLACEBUF
 28091                                  	;;cmp	si,[es:bp+2]
 28092                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28093                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28094                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28095                                                                          ;  even though it is MRU.
 28096                                  	; MSDOS 6.0
 28097                                  	;cmp	di,[es:bp+2]
 28098 00004CC7 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28099 00004CCB 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 28100 00004CCD 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28101                                  					; chucking even though it is MRU.
 28102                                  ;M039
 28103                                  
 28104                                  WBUFPLACED:
 28105 00004CD2 F8                              CLC
 28106 00004CD3 16                      	push	ss
 28107 00004CD4 1F                      	pop	ds
 28108 00004CD5 C3                              retn
 28109                                  
 28110                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28111                                  ;---------------------------------------------------------------------------
 28112                                  ;
 28113                                  ; Procedure Name : NEXTSEC
 28114                                  ;
 28115                                  ; Compute the next sector to read or write
 28116                                  ; ES:BP Points to DPB
 28117                                  ;
 28118                                  ;---------------------------------------------------------------------------
 28119                                  
 28120                                  NEXTSEC:
 28121 00004CD6 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28122 00004CDB 7426                            JZ	short CLRET
 28123                                  
 28124 00004CDD A0[7305]                        MOV     AL,[SECCLUSPOS]
 28125 00004CE0 FEC0                            INC     AL
 28126                                  	;cmp	al,[es:bp+4]
 28127 00004CE2 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 28128 00004CE6 7618                            JBE	short SAVPOS
 28129                                  
 28130 00004CE8 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 28131 00004CEC E8B607                          call	IsEOF
 28132 00004CEF 7314                            JAE	short NONEXT
 28133                                  
 28134 00004CF1 E8C807                          call	UNPACK
 28135 00004CF4 720F                            JC	short NONEXT
 28136                                  clusgot:
 28137 00004CF6 893E[BC05]                      MOV     [CLUSNUM],DI
 28138 00004CFA FF06[BA05]                      INC     word [LASTPOS]
 28139 00004CFE B000                            MOV     AL,0
 28140                                  SAVPOS:
 28141 00004D00 A2[7305]                        MOV     [SECCLUSPOS],AL
 28142                                  CLRET:
 28143 00004D03 F8                              CLC
 28144 00004D04 C3                              retn
 28145                                  NONEXT:
 28146 00004D05 F9                              STC
 28147 00004D06 C3                              retn
 28148                                  
 28149                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28150                                  ;----------------------------------------------------------------------------
 28151                                  ;
 28152                                  ; Procedure Name : OPTIMIZE
 28153                                  ;
 28154                                  ; Inputs:
 28155                                  ;       BX = Physical cluster
 28156                                  ;       CX = No. of records
 28157                                  ;       DL = sector within cluster
 28158                                  ;       ES:BP = Base of drive parameters
 28159                                  ;       [NEXTADD] = transfer address
 28160                                  ; Outputs:
 28161                                  ;       AX = No. of records remaining
 28162                                  ;       BX = Transfer address
 28163                                  ;       CX = No. or records to be transferred
 28164                                  ;       DX = Physical sector address            (LOW)
 28165                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 28166                                  ;       DI = Next cluster
 28167                                  ;       [CLUSNUM] = Last cluster accessed
 28168                                  ;       [NEXTADD] updated
 28169                                  ;       Carry set if error (currently user FAILed to I 24)
 28170                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28171                                  ;
 28172                                  ;---------------------------------------------------------------------------
 28173                                  
 28174                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28175                                  OPTIMIZE:
 28176 00004D07 52                      	PUSH    DX
 28177 00004D08 53                              PUSH    BX
 28178                                  	;mov	al,[es:bp+4]
 28179 00004D09 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 28180 00004D0D FEC0                            INC     AL              ; Number of sectors per cluster
 28181 00004D0F 88C4                            MOV     AH,AL
 28182 00004D11 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 28183 00004D13 89CA                            MOV     DX,CX
 28184                                  	;MOV	CX,0
 28185                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28186                                  	; 16/12/2022
 28187 00004D15 31C9                    	xor	cx,cx	; sub cx,cx
 28188                                  OPTCLUS:
 28189                                  ; AL has number of sectors available in current cluster
 28190                                  ; AH has number of sectors available in next cluster
 28191                                  ; BX has current physical cluster
 28192                                  ; CX has number of sequential sectors found so far
 28193                                  ; DX has number of sectors left to transfer
 28194                                  ; ES:BP Points to DPB
 28195                                  ; ES:SI has FAT pointer
 28196                                  
 28197                                  do_norm3:
 28198 00004D17 E8A207                          call	UNPACK
 28199 00004D1A 7236                            JC	short OP_ERR
 28200                                  clusgot2:
 28201 00004D1C 00C1                    	ADD	CL,AL
 28202 00004D1E 80D500                          ADC     CH,0
 28203 00004D21 39D1                            CMP     CX,DX
 28204 00004D23 7332                            JAE	short BLKDON
 28205 00004D25 88E0                            MOV     AL,AH
 28206 00004D27 43                              INC     BX
 28207 00004D28 39DF                            CMP     DI,BX
 28208 00004D2A 74EB                            JZ	short OPTCLUS
 28209 00004D2C 4B                              DEC     BX
 28210                                  FINCLUS:
 28211 00004D2D 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 28212 00004D31 29CA                            SUB     DX,CX           ; Number of sectors still needed
 28213 00004D33 52                              PUSH    DX
 28214 00004D34 89C8                            MOV     AX,CX
 28215                                  	;mul	word[ES:BP+2]
 28216 00004D36 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28217                                  				; Number of sectors times sector size
 28218 00004D3A 8B36[B805]                      MOV     SI,[NEXTADD]
 28219 00004D3E 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 28220 00004D40 A3[B805]                        MOV     [NEXTADD],AX
 28221 00004D43 58                              POP     AX              ; Number of sectors still needed
 28222 00004D44 5A                              POP     DX              ; Starting cluster
 28223 00004D45 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 28224 00004D47 011E[BA05]                      ADD     [LASTPOS],BX
 28225 00004D4B 5B                              POP     BX              ; BL = sector position within cluster
 28226 00004D4C E81600                  	call	FIGREC
 28227 00004D4F 89F3                            MOV     BX,SI
 28228                                  	; 24/09/2023
 28229                                  	; cf=0 (at the return of FIGREC)
 28230                                  	;CLC
 28231 00004D51 C3                              retn
 28232                                  OP_ERR:
 28233 00004D52 83C404                          ADD     SP,4
 28234 00004D55 F9                      	STC
 28235 00004D56 C3                              retn
 28236                                  BLKDON:
 28237 00004D57 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 28238 00004D59 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 28239 00004D5B FECC                            DEC     AH              ; Adjust to mean position within cluster
 28240 00004D5D 8826[7305]                      MOV     [SECCLUSPOS],AH
 28241 00004D61 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 28242 00004D63 EBC8                            JMP     SHORT FINCLUS
 28243                                  
 28244                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28245                                  ;---------------------------------------------------------------------------
 28246                                  ;
 28247                                  ; Procedure Name : FIGREC
 28248                                  ;
 28249                                  ; Inputs:
 28250                                  ;       DX = Physical cluster number
 28251                                  ;       BL = Sector position within cluster
 28252                                  ;       ES:BP = Base of drive parameters
 28253                                  ; Outputs:
 28254                                  ;       DX = physical sector number           (LOW)
 28255                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 28256                                  ; No other registers affected.
 28257                                  ;
 28258                                  ;---------------------------------------------------------------------------
 28259                                  
 28260                                  	; 10/06/2019
 28261                                  	; 20/05/2019 - Retro DOS v4.0
 28262                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28263                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28264                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 28265                                  FIGREC:
 28266 00004D65 51                              PUSH    CX
 28267                                  	;mov	cl,[es:bp+5]
 28268 00004D66 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28269 00004D6A 4A                              DEC     DX
 28270 00004D6B 4A                              DEC     DX
 28271                                  
 28272                                  	; MSDOS 3.3
 28273                                  	;SHL	DX,CL
 28274                                  
 28275                                  ;hkn; SS override HIGH_SECTOR
 28276                                  	; MSDOS 6.0
 28277 00004D6C 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28278                                  	; 24/09/2023
 28279 00004D73 30ED                    	xor	ch,ch				;F.C. >32mb
 28280 00004D75 08C9                    	OR	CL,CL				;F.C. >32mb
 28281 00004D77 740C                    	JZ	short noshift			;F.C. >32mb
 28282 00004D79 30ED                    	XOR	CH,CH				;F.C. >32mb
 28283                                  rotleft:					;F.C. >32mb
 28284 00004D7B F8                      	CLC					;F.C. >32mb
 28285 00004D7C D1D2                    	RCL	DX,1				;F.C. >32mb
 28286                                  	; 10/06/2019
 28287 00004D7E 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28288 00004D83 E2F6                    	LOOP	rotleft				;F.C. >32mb
 28289                                  noshift:
 28290                                  	; MSDOS 3.3 & MSDOS 6.0
 28291 00004D85 08DA                            OR      DL,BL
 28292                                  	;add	dx,[es:bp+0Bh]
 28293 00004D87 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 28294                                  	; MSDOS 6.0
 28295                                  	; 10/06/2019
 28296                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28297                                  	; 24/09/2023
 28298                                  	; cx=0
 28299 00004D8B 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 28300                                  
 28301                                  	; MSDOS 3.3 & MSDOS 6.0
 28302 00004D90 59                      	POP     CX
 28303                                  figrec_retn:
 28304 00004D91 C3                              retn
 28305                                  
 28306                                  ; 20/05/2019 - Retro DOS v4.0
 28307                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28308                                  
 28309                                  ; 30/07/2018 - Retro DOS v3.0
 28310                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28311                                  
 28312                                  ;Break   <ALLOCATE -- Assign disk space>
 28313                                  ;---------------------------------------------------------------------------
 28314                                  ;
 28315                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28316                                  ;
 28317                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28318                                  ;   FAT-chained onto the end of the existing file.
 28319                                  ;
 28320                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28321                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28322                                  ;   numbered clusters, looking for the necessary free blocks.
 28323                                  ;
 28324                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28325                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28326                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28327                                  ;
 28328                                  ;       If we get to the end of the disk without satisfaction:
 28329                                  ;
 28330                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28331                                  ;               return (insufficient_disk_space)
 28332                                  ;           ELSE
 28333                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28334                                  ;
 28335                                  ;   Note that there is no multitasking interlock. There is no race when
 28336                                  ;   examining the entrys in an in-core FAT block since there will be no
 28337                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28338                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28339                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28340                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28341                                  ;   satisfied. We can't allow another activation to think this cluster is
 28342                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28343                                  ;   allocated.
 28344                                  ;
 28345                                  ;   Note that when we run out of space this algorithem will scan from
 28346                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28347                                  ;   redundantly scanning the later part of the disk. This only happens when
 28348                                  ;   we run out of space, so sue me.
 28349                                  ;
 28350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28351                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28352                                  ;                                                                          ;
 28353                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28354                                  ;   explanation:
 28355                                  ;
 28356                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28357                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28358                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28359                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28360                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28361                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28362                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28363                                  ;   the
 28364                                  ;           LOOP   findfre         ; alloc more if needed
 28365                                  ;   instruction when the first cluster is allocated to the nul file. The
 28366                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28367                                  ;
 28368                                  ;   This method is obviously useless (because it is non-reentrant) for
 28369                                  ;   multitasking, and will have to be changed. Storing the required value on
 28370                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28371                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28372                                  ;   problems with INT 24 well.
 28373                                  ;
 28374                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28376                                  ;                                                                          ;
 28377                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28378                                  ;               CX = No. of clusters to allocate
 28379                                  ;               ES:BP = Base of drive parameters
 28380                                  ;               [THISSFT] = Points to SFT
 28381                                  ;
 28382                                  ;       EXIT    'C' set if insufficient space
 28383                                  ;                 [FAILERR] can be tested to see the reason for failure
 28384                                  ;                 CX = max. no. of clusters that could be added to file
 28385                                  ;               'C' clear if space allocated
 28386                                  ;                 BX = First cluster allocated
 28387                                  ;                 FAT is fully updated
 28388                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28389                                  ;
 28390                                  ;       USES    ALL but SI, BP
 28391                                  
 28392                                  ;callmagic  proc near
 28393                                  ;       push    ds                             ;push segment of routine 
 28394                                  ;       push    Offset MagicPatch              ;push offset for routine
 28395                                  ;       retf                                   ;simulate jmp far
 28396                                  ;                                              ;far return address is on
 28397                                  ;                                              ;stack, so far return from
 28398                                  ;                                              ;call will return this routine
 28399                                  ;callmagic  endp
 28400                                  
 28401                                  
 28402                                  ; 25/09/2023
 28403                                  %if 0
 28404                                  callmagic:
 28405                                  	push	ds
 28406                                  	push	MagicPatch
 28407                                  	retf	
 28408                                  %endif
 28409                                  
 28410                                  ALLOCATE:
 28411                                  	; 10/09/2018
 28412                                  ;BEGIN MAGICDRV MODIFICATIONS
 28413                                  ;
 28414                                  ;7/5/92 scottq
 28415                                  ;
 28416                                  ;This is the disk compression patch location which allows
 28417                                  ;the disk compression software to fail allocations if the
 28418                                  ;FAT would allows allocation, but the free space for compressed
 28419                                  ;data would not.
 28420                                  ;        
 28421                                  ;;;	call    far ptr MAGICPATCH
 28422                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28423                                  ;;; but we do know the segment and offset of the routine
 28424                                  ;;; so simulate a far call to dosdata:magicpatch
 28425                                  ;;; note dosassume above, so DS -> dosdata
 28426                                  
 28427                                  	; MSDOS 6.0
 28428                                          ;clc				;clear carry so we fall through
 28429                                  	;				;if no patch is present
 28430                                  	;push	cs			;push segment for far return
 28431                                          ;call	callmagic		;this is a near call
 28432                                          ;jnc	short Regular_Allocate_Path
 28433                                  	;jmp	Disk_Full_Return
 28434                                  
 28435                                  ; 25/09/2023
 28436                                  %if 0
 28437                                  	clc
 28438                                  	push	cs
 28439                                  	call	callmagic
 28440                                  	jnc	short Regular_Allocate_Path
 28441                                  	jmp	Disk_Full_Return
 28442                                  Regular_Allocate_Path:
 28443                                  %endif
 28444                                  
 28445                                  	; 20/05/2019 - Retro DOS v4.0
 28446                                  ;END MAGICDRV MODIFICATIONS
 28447                                  
 28448                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28449                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28450                                  
 28451 00004D92 53                              PUSH    BX                      ; save (bx)
 28452 00004D93 31DB                            XOR     BX,BX
 28453 00004D95 E82407                  	call	UNPACK
 28454 00004D98 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28455 00004D9C 5B                              POP     BX
 28456 00004D9D 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28457                                  
 28458 00004D9F 51                              PUSH    CX
 28459 00004DA0 53                              PUSH    BX
 28460                                  
 28461 00004DA1 89DA                            MOV     DX,BX
 28462                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28463                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28464 00004DA3 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28465 00004DA7 83FB02                          cmp     bx,2
 28466 00004DAA 7709                            ja	short FINDFRE
 28467                                  
 28468                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28469                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28470                                  
 28471                                  ads1:
 28472                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28473                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28474 00004DAC 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28475 00004DB2 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28476                                                                          ;       cluster examined is 2
 28477                                  
 28478                                  ;   Scanning both forwards and backwards for a free cluster
 28479                                  ;
 28480                                  ;       (BX) = forwards scan pointer
 28481                                  ;       (CX) = clusters remaining to be allocated
 28482                                  ;       (DX) = current last cluster in file
 28483                                  ;       (TOS) = last cluster of file
 28484                                  
 28485                                  FINDFRE:
 28486 00004DB5 43                              INC     BX
 28487                                  	;cmp	bx,[es:bp+0Dh]
 28488 00004DB6 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28489 00004DBA 7757                    	ja	short ads7	; at end of disk
 28490 00004DBC E8FD06                          call	UNPACK          ; check out this cluster
 28491 00004DBF 722F                            jc	short ads4	; FAT error             [INTERR?]
 28492 00004DC1 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28493                                  
 28494                                  ;   Have found a free cluster. Chain it to the file
 28495                                  ;
 28496                                  ;       (BX) = found free cluster #
 28497                                  ;       (DX) = current last cluster in file
 28498                                  
 28499                                  	;;mov	[es:bp+1Ch],bx
 28500                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28501 00004DC3 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28502 00004DC7 92                              xchg    ax,dx           ; save (dx) in ax
 28503 00004DC8 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28504 00004DCB E84207                  	call	PACK            ; set special "temporary" mark
 28505 00004DCE 7220                            jc	short ads4	; FAT error             [INTERR?]
 28506                                  	;;cmp	word [es:bp+1Eh],-1
 28507                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28508 00004DD0 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28509 00004DD5 7404                            JZ	short NO_ALLOC	; No
 28510                                  	;;dec	word [es:bp+1Eh]
 28511                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28512 00004DD7 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28513                                  NO_ALLOC:
 28514 00004DDB 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28515 00004DDC 87DA                            XCHG    BX,DX
 28516 00004DDE 89D0                            MOV     AX,DX
 28517 00004DE0 E82D07                  	call	PACK            ; link free cluster onto file
 28518                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28519                                                                  ;    cluster 0 with FIRCLUS value.
 28520 00004DE3 720B                            jc	short ads4	; FAT error [INTERR?]
 28521 00004DE5 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28522 00004DE6 89DA                            mov     dx,bx           ; (dx) = current end of file
 28523 00004DE8 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28524                                  
 28525                                  ;   We've successfully extended the file. Clean up and exit
 28526                                  ;
 28527                                  ;       (BX) = last cluster in file
 28528                                  
 28529 00004DEA BAFFFF                          MOV     DX,0FFFFH
 28530 00004DED E82007                  	call	PACK            ; mark last cluster EOF
 28531                                  
 28532                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28533                                  ;   2 whole bytes. Hope its worth it...
 28534                                  ;
 28535                                  ;       'C' set if error
 28536                                  ;       calling (BX) and (CX) pushed on stack
 28537                                  
 28538                                  ads4:   
 28539 00004DF0 5B                      	POP     BX
 28540 00004DF1 59                              POP     CX              ; Don't need this stuff since we're successful
 28541 00004DF2 729D                            jc	short figrec_retn
 28542 00004DF4 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28543                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28544 00004DF7 7298                            jc	short figrec_retn
 28545 00004DF9 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28546 00004DFC 7293                            jc	short figrec_retn
 28547 00004DFE 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28548 00004E00 09FF                            OR      DI,DI           ; clear 'C'
 28549 00004E02 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28550                                  
 28551                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28552                                  ;   info
 28553                                  dofastk:
 28554                                  	; 20/05/2019
 28555                                  	; MSDOS 6.0
 28556                                  	;push	dx ; * MSDOS 6.0
 28557                                  	;;mov	dl,[es:bp+0]
 28558                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28559                                  	;mov	dl,[es:bp]
 28560                                  
 28561                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28562                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28563                                  	
 28564                                  	; 16/12/2022
 28565                                  	;push	dx ; *
 28566                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28567                                  	; 15/12/2022
 28568                                  	;mov	dl,[es:bp]
 28569                                  	
 28570                                  	; MSDOS 3.3 & MSDOS 6.0
 28571 00004E04 06                      	PUSH	ES
 28572 00004E05 C43E[9E05]              	LES     DI,[THISSFT]
 28573                                  	;mov	[es:di+0Bh],bx
 28574 00004E09 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28575                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28576                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28577 00004E0D 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28578 00004E11 07                      	POP	ES
 28579                                  	;retn
 28580                                  
 28581                                  	;pop	dx ; * MSDOS 6.0
 28582                                  
 28583                                  	; 16/12/2022
 28584                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28585                                  	;pop	dx ; *
 28586                                  
 28587 00004E12 C3                      	retn	
 28588                                  
 28589                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28590                                  ;   of the disk...
 28591                                  
 28592                                  ads7:   
 28593 00004E13 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28594 00004E18 7592                    	jnz	short ads1	; start scan from front of disk
 28595                                  
 28596                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28597                                  ;   the space back to the free list and tell the caller how much he could have
 28598                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28599                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28600                                  ;
 28601                                  ;       (CX) = clusters remaining to be allocated
 28602                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28603                                  ;       (TOS+1) = # of clusters wanted to allocate
 28604                                  
 28605 00004E1A 5B                              POP     BX              ; (BX) = last cluster of file
 28606 00004E1B BAFFFF                          MOV     DX,0FFFFH
 28607 00004E1E E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28608 00004E21 58                              POP     AX              ; No. of clusters requested
 28609                                                                  ; Don't "retc". We are setting Carry anyway,
 28610                                                                  ;   Alloc failed, so proceed with return CX
 28611                                                                  ;   setup.
 28612 00004E22 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28613 00004E24 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28614                                                                  ;   Alloc failed.
 28615                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28616                                          ; MSDOS 6.0
 28617 00004E27 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28618 00004E2C F9                              STC
 28619 00004E2D C3                              retn
 28620                                  
 28621                                  ;-----------------------------------------------------------------------
 28622                                  ;
 28623                                  ; Procedure Name : RESTFATBYT
 28624                                  ;
 28625                                  ; SEE ALLOCATE CAVEAT
 28626                                  ;       Carry set if error (currently user FAILed to I 24)
 28627                                  ;-----------------------------------------------------------------------
 28628                                  
 28629                                  RESTFATBYT:
 28630 00004E2E 53                              PUSH    BX
 28631 00004E2F 52                              PUSH    DX
 28632 00004E30 57                              PUSH    DI
 28633 00004E31 31DB                            XOR     BX,BX
 28634 00004E33 8B16[9605]                      MOV     DX,[FATBYT]
 28635 00004E37 E8D606                  	call	PACK
 28636 00004E3A 5F                              POP     DI
 28637 00004E3B 5A                              POP     DX
 28638 00004E3C 5B                              POP     BX
 28639                                  ; 16/12/2022
 28640                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28641                                  ;RELEASE_flush:
 28642 00004E3D C3                      	retn
 28643                                  
 28644                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28645                                  ;---------------------------------------------------------------------------
 28646                                  ;
 28647                                  ; Procedure Name : RELEASE
 28648                                  ;
 28649                                  ; Inputs:
 28650                                  ;       BX = Cluster in file
 28651                                  ;       ES:BP = Base of drive parameters
 28652                                  ; Function:
 28653                                  ;       Frees cluster chain starting with [BX]
 28654                                  ;       Carry set if error (currently user FAILed to I 24)
 28655                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28656                                  ;
 28657                                  ;-----------------------------------------------------------------------------
 28658                                  
 28659                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28660                                  	; 20/05/2019 - Retro DOS v4.0
 28661                                  RELEASE:
 28662 00004E3E 31D2                            XOR     DX,DX
 28663                                  
 28664                                  	;entry	RELBLKS
 28665                                  RELBLKS:
 28666                                  
 28667                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28668                                  ;   and free the rest in the chain.
 28669                                  
 28670 00004E40 E87906                  	call	UNPACK
 28671 00004E43 7224                    	jc	short RELEASE_flush
 28672 00004E45 7422                    	jz	short RELEASE_flush
 28673 00004E47 89F8                            MOV     AX,DI
 28674 00004E49 52                              PUSH    DX
 28675 00004E4A E8C306                  	call	PACK
 28676 00004E4D 5A                              POP     DX
 28677 00004E4E 7219                    	jc	short RELEASE_flush
 28678 00004E50 09D2                            OR      DX,DX
 28679 00004E52 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28680                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28681                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28682 00004E54 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28683 00004E59 7404                            JZ	short NO_DEALLOC	; No
 28684 00004E5B 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28685                                  NO_DEALLOC:
 28686 00004E5F 89C3                            MOV     BX,AX
 28687 00004E61 48                              dec     ax              ; check for "1"
 28688 00004E62 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28689 00004E64 E83E06                  	call	IsEOF
 28690 00004E67 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28691                                  
 28692                                  	; 16/12/2022
 28693                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28694                                  ;%if 0
 28695                                  RELEASE_flush:
 28696                                  	; MSDOS 6.0
 28697 00004E69 268A4600                	mov	al,[es:bp]
 28698                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28699 00004E6D 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28700 00004E6E 51                      	push	cx		;  them to be preserved.
 28701 00004E6F 06                      	push	es
 28702 00004E70 55                      	push	bp
 28703 00004E71 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28704 00004E74 5D                      	pop	bp
 28705 00004E75 07                      	pop	es
 28706 00004E76 59                      	pop	cx
 28707 00004E77 5E                      	pop	si
 28708                                  ;%endif
 28709                                  RET12:
 28710 00004E78 C3                      	retn
 28711                                  
 28712                                  ;Break	<GETEOF -- Find the end of a file>
 28713                                  ;------------------------------------------------------------------------
 28714                                  ;
 28715                                  ; Procedure Name : GETEOF
 28716                                  ;
 28717                                  ; Inputs:
 28718                                  ;       ES:BP Points to DPB
 28719                                  ;       BX = Cluster in a file
 28720                                  ;       DS = CS
 28721                                  ; Outputs:
 28722                                  ;       BX = Last cluster in the file
 28723                                  ;       Carry set if error (currently user FAILed to I 24)
 28724                                  ; DI destroyed. No other registers affected.
 28725                                  ;
 28726                                  ;--------------------------------------------------------------------------
 28727                                  
 28728                                  GETEOF:
 28729 00004E79 E84006                  	call	UNPACK
 28730 00004E7C 72FA                            jc	short RET12
 28731 00004E7E 53                              PUSH    BX
 28732 00004E7F 89FB                            MOV     BX,DI
 28733 00004E81 E82106                  	call	IsEOF
 28734 00004E84 5B                              POP     BX
 28735 00004E85 73F1                            JAE     short RET12
 28736 00004E87 89FB                            MOV     BX,DI
 28737 00004E89 EBEE                            JMP     short GETEOF
 28738                                  
 28739                                  ;============================================================================
 28740                                  ; FCB.ASM, MSDOS 6.0, 1991
 28741                                  ;============================================================================
 28742                                  ; 30/07/2018 - Retro DOS v3.0
 28743                                  ; 20/05/2019 - Retro DOS v4.0
 28744                                  
 28745                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28746                                  ;	NAME	FCB
 28747                                  
 28748                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28749                                  ;		  filename characters
 28750                                  ;
 28751                                  ;	MakeFcb
 28752                                  ;	NameTrans
 28753                                  ;	PATHCHRCMP
 28754                                  ;	GetLet
 28755                                  ;	UCase
 28756                                  ;	GetLet3
 28757                                  ;	GetCharType
 28758                                  ;	TESTKANJ
 28759                                  ;	NORMSCAN
 28760                                  ;	DELIM
 28761                                  ;
 28762                                  ;	Revision history:
 28763                                  ;
 28764                                  ;		A000  version 4.00  Jan. 1988
 28765                                  ;	
 28766                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28767                                  
 28768                                  TableLook	EQU	-1
 28769                                  
 28770                                  SCANSEPARATOR	EQU	1
 28771                                  DRVBIT		EQU	2
 28772                                  NAMBIT		EQU	4
 28773                                  EXTBIT		EQU	8
 28774                                  
 28775                                  ;----------------------------------------------------------------------------
 28776                                  ;
 28777                                  ; Procedure : MakeFcb
 28778                                  ;
 28779                                  ;----------------------------------------------------------------------------
 28780                                  
 28781                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28782                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28783                                  MAKEFCB:
 28784                                  ;hkn; SS override
 28785 00004E8B 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28786 00004E91 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28787                                  	;test	al,2
 28788 00004E93 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28789 00004E95 7504                    	JNZ	short DEFDRV
 28790 00004E97 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28791                                  DEFDRV:
 28792 00004E9B 47                      	INC	DI
 28793 00004E9C B90800                  	MOV	CX,8
 28794                                  	;test	al,4
 28795 00004E9F A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28796 00004EA1 93                      	XCHG	AX,BX		; Save bits in BX
 28797 00004EA2 B020                    	MOV	AL," "
 28798 00004EA4 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28799 00004EA6 01CF                    	ADD	DI,CX
 28800 00004EA8 31C9                    	XOR	CX,CX		; Don't fill any
 28801                                  FILLB:
 28802 00004EAA F3AA                    	REP	STOSB
 28803 00004EAC B103                    	MOV	CL,3
 28804 00004EAE F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28805 00004EB1 7404                    	JZ	short FILLB2
 28806 00004EB3 01CF                    	ADD	DI,CX
 28807 00004EB5 31C9                    	XOR	CX,CX
 28808                                  FILLB2:
 28809 00004EB7 F3AA                    	REP	STOSB
 28810 00004EB9 91                      	XCHG	AX,CX		; Put zero in AX
 28811 00004EBA AB                      	STOSW
 28812 00004EBB AB                      	STOSW			; Initialize two words after to zero
 28813 00004EBC 83EF10                  	SUB	DI,16		; Point back at start
 28814                                  	;test	bl,1
 28815 00004EBF F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28816 00004EC2 7409                    	JZ	short SKPSPC
 28817 00004EC4 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28818 00004EC7 E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28819 00004ECA 7504                    	JNZ	short NOSCAN
 28820 00004ECC 46                      	INC	SI		; Skip over the delimiter
 28821                                  SKPSPC:
 28822 00004ECD E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28823                                  NOSCAN:
 28824 00004ED0 E8F000                  	CALL	GETLET
 28825 00004ED3 761E                    	JBE	short NODRV	; Quit if termination character
 28826 00004ED5 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28827 00004ED8 7519                    	JNZ	short NODRV
 28828 00004EDA 46                      	INC	SI		; Skip over colon
 28829 00004EDB 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28830 00004EDD 760F                    	JBE	short BADDRV	; Drive letter out of range
 28831                                  
 28832 00004EDF 50                      	PUSH	AX
 28833 00004EE0 E8161B                  	call	GetVisDrv
 28834 00004EE3 58                      	POP	AX
 28835 00004EE4 730A                    	JNC	short HAVDRV
 28836                                  
 28837                                  	; 20/05/2019 - Retro DOS v4.0
 28838                                  	; MSDOS 6.0
 28839                                  ;hkn; SS override
 28840 00004EE6 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28841                                  					; if not FAT drive ;AN000;
 28842 00004EEC 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28843                                  BADDRV:
 28844 00004EEE B2FF                    	MOV	DL,-1
 28845                                  HAVDRV:
 28846 00004EF0 AA                      	STOSB			; Put drive specifier in first byte
 28847 00004EF1 46                      	INC	SI
 28848 00004EF2 4F                      	DEC	DI		; Counteract next two instructions
 28849                                  NODRV:
 28850 00004EF3 4E                      	DEC	SI		; Back up
 28851 00004EF4 47                      	INC	DI		; Skip drive byte
 28852                                  
 28853                                  	;entry	NORMSCAN
 28854                                  NORMSCAN:
 28855 00004EF5 B90800                  	MOV	CX,8
 28856 00004EF8 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28857 00004EFB 803C2E                  	CMP	BYTE [SI],"."
 28858 00004EFE 7510                    	JNZ	short NODOT
 28859 00004F00 46                      	INC	SI		; Skip over dot if present
 28860                                  
 28861                                  	; 24/09/2023
 28862                                  	;mov	cx,3
 28863 00004F01 B103                    	mov	cl,3	; ch=0
 28864                                  
 28865                                  	; MSDOS 6.0
 28866                                  ;hkn; SS override
 28867                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28868                                  	; 10/06/2019
 28869 00004F03 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28870 00004F09 7402                    	JZ	short VOLOK				;AN000;
 28871 00004F0B A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28872                                  	; 24/09/2023
 28873                                  	;MOV	CX,2					;AN000;
 28874 00004F0C 49                      	dec	cx  ; cx=2
 28875                                  	;JMP	SHORT contvol				;AN000;
 28876                                  VOLOK:
 28877                                  	;MOV	CX,3		; Get 3-letter extension
 28878                                  contvol:
 28879 00004F0D E81300                  	CALL	MUSTGETWORD
 28880                                  NODOT:
 28881 00004F10 88D0                    	MOV	AL,DL
 28882                                  
 28883                                  	; MSDOS 6.0
 28884                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28885                                  	; 18/12/2022
 28886 00004F12 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28887                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28888                                  
 28889 00004F18 C3                      	retn
 28890                                  
 28891                                  NONAM:
 28892 00004F19 01CF                    	ADD	DI,CX
 28893 00004F1B 4E                      	DEC	SI
 28894 00004F1C C3                      	retn
 28895                                  
 28896                                  GETWORD:
 28897 00004F1D E8A300                  	CALL	GETLET		
 28898 00004F20 76F7                    	JBE	short NONAM	; Exit if invalid character
 28899 00004F22 4E                      	DEC	SI
 28900                                  
 28901                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28902                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28903                                  
 28904                                  MUSTGETWORD:
 28905 00004F23 E89D00                  	CALL	GETLET
 28906                                  
 28907                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28908                                  
 28909                                  ;IF NOT TABLELOOK
 28910                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28911                                  ;ENDIF
 28912 00004F26 750C                    	JNZ	short MustCheckCX
 28913                                  
 28914                                  ;hkn; SS override
 28915 00004F28 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28916 00004F2E 7419                    	JZ	short FILLNAM
 28917 00004F30 3C20                    	CMP	AL," "
 28918 00004F32 7515                    	JNZ	short FILLNAM
 28919                                  
 28920                                  MustCheckCX:
 28921 00004F34 E3ED                    	JCXZ	MUSTGETWORD
 28922 00004F36 49                      	DEC	CX
 28923 00004F37 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28924 00004F39 7504                    	JNZ	short NOSTAR
 28925 00004F3B B03F                    	MOV	AL,"?"
 28926 00004F3D F3AA                    	REP	STOSB
 28927                                  NOSTAR:
 28928 00004F3F AA                      	STOSB
 28929 00004F40 3C3F                    	CMP	AL,"?"
 28930 00004F42 75DF                    	JNZ	short MUSTGETWORD
 28931 00004F44 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28932 00004F47 EBDA                    	JMP	short MUSTGETWORD
 28933                                  FILLNAM:
 28934 00004F49 B020                    	MOV	AL," "
 28935 00004F4B F3AA                    	REP	STOSB
 28936 00004F4D 4E                      	DEC	SI
 28937 00004F4E C3                      	retn
 28938                                  
 28939                                  SCANB:
 28940 00004F4F AC                      	LODSB
 28941 00004F50 E8A100                  	CALL	SPCHK
 28942 00004F53 74FA                    	JZ	short SCANB
 28943 00004F55 4E                      	DEC	SI
 28944                                  scanb_retn:
 28945 00004F56 C3                      	retn
 28946                                  
 28947                                  ;----------------------------------------------------------------------------
 28948                                  ;
 28949                                  ; Procedure Name : NameTrans
 28950                                  ;
 28951                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28952                                  ; allow spaces in pathnames
 28953                                  ;
 28954                                  ;   Inputs:	DS:SI points to start of path element
 28955                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28956                                  ;		ES = DOSGroup
 28957                                  ;		DS:SI advanced after name
 28958                                  ;   Registers modified: DI,AX,DX,CX
 28959                                  ;
 28960                                  ;----------------------------------------------------------------------------
 28961                                  
 28962                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28963                                  	; 20/05/2019 - Retro DOS v4.0
 28964                                  NameTrans:
 28965                                  ;hkn; SS override
 28966 00004F57 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28967 00004F5D 16                      	push	ss
 28968 00004F5E 07                      	pop	es
 28969                                  
 28970                                  ;hkn; NAME1 is in DOSDATA
 28971 00004F5F BF[4B05]                	MOV	DI,NAME1
 28972 00004F62 57                      	PUSH	DI
 28973 00004F63 B82020                  	MOV	AX,'  '
 28974 00004F66 B90500                  	MOV	CX,5
 28975 00004F69 AA                      	STOSB
 28976 00004F6A F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28977 00004F6C 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28978 00004F6E 88C2                    	MOV	DL,AL
 28979 00004F70 AA                      	STOSB
 28980 00004F71 5F                      	POP	DI
 28981                                  
 28982 00004F72 E880FF                  	CALL	NORMSCAN
 28983                                  
 28984                                  ;hkn; SS override for NAME1
 28985 00004F75 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28986 00004F7B 75D9                    	jnz	short scanb_retn
 28987 00004F7D 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28988 00004F83 C3                      	retn
 28989                                  
 28990                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28991                                  ;============================================================================
 28992                                  
 28993                                  ; 20/05/2019 - Retro DOS v4.0
 28994                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28995                                  
 28996                                  ;If TableLook
 28997                                  
 28998                                  ;hkn; Table	SEGMENT
 28999                                  ;	PUBLIC	CharType
 29000                                  ;----------------------------------------------------------------------------
 29001                                  
 29002                                  ; Character type table for file name scanning
 29003                                  ; Table provides a mapping of characters to validity bits.
 29004                                  ; Four bits are provided for each character. Values 7Dh and above
 29005                                  ; have all bits set, so that part of the table is chopped off, and
 29006                                  ; the translation routine is responsible for screening these values.
 29007                                  ; The bit values are defined in DOSSYM.INC
 29008                                  
 29009                                  ;	      ; ^A and NUL
 29010                                  ;CharType:
 29011                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29012                                  ;	      ; ^C and ^B
 29013                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29014                                  ;	      ; ^E and ^D
 29015                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29016                                  ;	      ; ^G and ^F
 29017                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29018                                  ;	      ; TAB and BS
 29019                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29020                                  ;	      ; ^K and ^J
 29021                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29022                                  ;	      ; ^M and ^L
 29023                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29024                                  ;	      ; ^O and ^N
 29025                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29026                                  ;	      ; ^Q and ^P
 29027                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29028                                  ;	      ; ^S and ^R
 29029                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29030                                  ;	      ; ^U and ^T
 29031                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29032                                  ;	      ; ^W and ^V
 29033                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29034                                  ;	      ; ^Y and ^X
 29035                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29036                                  ;	      ; ESC and ^Z
 29037                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29038                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29040                                  ;	      ; ^_ and ^^
 29041                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29042                                  ;	      ; ! and SPACE
 29043                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29044                                  ;	      ; # and "
 29045                                  ;	 db   LOW (NOT FFCB+FCHK)
 29046                                  ;	      ; $ - )
 29047                                  ;	 db   3 dup (0FFh)
 29048                                  ;	      ; + and *
 29049                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29050                                  ;	      ; - and '
 29051                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29052                                  ;	      ; / and .
 29053                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29054                                  ;	      ; 0 - 9
 29055                                  ;	 db   5 dup (0FFh)
 29056                                  ;	      ; ; and :
 29057                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29058                                  ;	      ; = and <
 29059                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29060                                  ;	      ; ? and >
 29061                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29062                                  ;	      ; A - Z
 29063                                  ;	 db   13 dup (0FFh)
 29064                                  ;	      ; \ and [
 29065                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29066                                  ;	      ; ^ and ]
 29067                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29068                                  ;	      ; _ - {
 29069                                  ;	 db   15 dup (0FFh)
 29070                                  ;	      ; } and |
 29071                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29072                                  
 29073                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29074                                  ;					; character in the table
 29075                                  
 29076                                  ;FCHK	equ 1		; normal name char, no chks needed
 29077                                  ;FDELIM	equ 2		; is a delimiter
 29078                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29079                                  ;FFCB	equ 8		; is valid in an FCB
 29080                                  
 29081                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29082                                  ;----------------------------------------------------------------------------
 29083                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29084                                  
 29085                                  CharType: ; 63 bytes
 29086 00004F84 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29087 00004F8C 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29088 00004F94 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29089 00004F9C FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29090 00004FA4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29091 00004FAC FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29092 00004FB4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29093 00004FBC FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29094                                  
 29095                                  CharType_last equ ($ - CharType) * 2
 29096                                  
 29097                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29098                                  ;----------------------------------------------------------------------------
 29099                                  ;CharType:
 29100                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29101                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29102                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29103                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29104                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29105                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29106                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29107                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29108                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29109                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29110                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29111                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29112                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29113                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29114                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29115                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29116                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29117                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29118                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29119                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29120                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29121                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29122                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29123                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29124                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29125                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29126                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29127                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29128                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29129                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29130                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29131                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29132                                  
 29133                                  ;hkn; Table	ENDS
 29134                                  
 29135                                  ;ENDIF
 29136                                  
 29137                                  ; 20/05/2019 - Retro DOS v4.0
 29138                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29139                                  
 29140                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29141                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29142                                  
 29143                                  ;----------------------------------------------------------------------------
 29144                                  ;
 29145                                  ; Procedure Names : GetLet, UCase, GetLet3
 29146                                  ;
 29147                                  ; These routines take a character, convert it to upper case, and check
 29148                                  ; for delimiters.  Three different entry points:
 29149                                  ;	GetLet -  DS:[SI] = character to convert
 29150                                  ;	UCase  -  AL = character to convert
 29151                                  ;	GetLet3 - AL = character
 29152                                  ;		  [BX] = translation table to use
 29153                                  ;
 29154                                  ;	Exit (in all cases) : AL = upper case character
 29155                                  ;			      CY set if char is control char other than TAB
 29156                                  ;			      ZF set if char is a delimiter
 29157                                  ;	Uses : AX, flags
 29158                                  ;
 29159                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29160                                  ; inline version.  Return with carry set is only possible in the inline
 29161                                  ; version. The table lookup version is the one in use.
 29162                                  ;
 29163                                  ;----------------------------------------------------------------------------
 29164                                  
 29165                                  ; This entry point has character at [SI]
 29166                                  
 29167                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29168                                  GETLET:	
 29169 00004FC3 AC                      	LODSB
 29170                                  
 29171                                  ; This entry point has character in AL
 29172                                  
 29173                                  	;entry	UCase
 29174                                  UCase:	
 29175                                  	; 09/08/2018
 29176                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29177                                  _UCase:
 29178 00004FC4 53                      	PUSH	BX
 29179 00004FC5 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29180                                  
 29181                                  ; Convert the character in AL to upper case
 29182                                  
 29183                                  gl_0:
 29184 00004FC8 3C61                    	CMP	AL,"a"
 29185 00004FCA 7214                    	JB	short gl_2	; Already upper case, go check type
 29186 00004FCC 3C7A                    	CMP	AL,"z"
 29187 00004FCE 7702                    	JA	short gl_1
 29188 00004FD0 2C20                    	SUB	AL,20H		; Convert to upper case
 29189                                  
 29190                                  ; Map European character to upper case
 29191                                  
 29192                                  gl_1:
 29193 00004FD2 3C80                    	CMP	AL,80H
 29194 00004FD4 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29195 00004FD6 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29196                                  
 29197                                  	; M048 - Start 
 29198                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29199                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29200                                  	; preserve it.
 29201                                  
 29202                                  	; 09/08/2018 - Retro DOS v3.0
 29203                                  	; MSDOS 3.3
 29204                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29205                                  	;CS	XLAT
 29206                                  
 29207                                  	; 20/05/2019 - Retro DOS v4.0
 29208                                  
 29209                                  	; MSDOS 6.0
 29210 00004FD8 1E                      	push	ds
 29211                                  	;getdseg <ds>
 29212 00004FD9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29213 00004FDE D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29214 00004FDF 1F                      	pop	ds
 29215                                  
 29216                                  	; M048 - End
 29217                                  
 29218                                  ; Now check the type
 29219                                  
 29220                                  ;If TableLook
 29221                                  gl_2:
 29222                                  	; 20/05/2019 - Retro DOS v4.0
 29223 00004FE0 50                      	PUSH	AX
 29224                                  
 29225                                  	; MSDOS 3.3
 29226                                  	;mov	bx,CharType
 29227                                  	;; 09/08/2018
 29228                                  	;;xlat	byte [cs:bx]
 29229                                  	;cs	xlat	
 29230                                  	
 29231                                  	; MSDOS 6.0
 29232 00004FE1 E81800                  	CALL	GetCharType	; returns type flags in AL
 29233                                  	
 29234                                  	;test	al,1	
 29235 00004FE4 A801                    	TEST	AL,FCHK 	; test for normal character
 29236 00004FE6 58                      	POP	AX
 29237                                  
 29238 00004FE7 5B                      	POP	BX
 29239 00004FE8 C3                      	RETN
 29240                                  
 29241                                  ; This entry has character in AL and lookup table in BX
 29242                                  
 29243                                  	; MSDOS 6.0
 29244                                  ;	;entry GetLet3
 29245                                  GETLET3: ; 10/08/2018
 29246 00004FE9 53                      	PUSH	BX
 29247 00004FEA EBDC                    	JMP	short gl_0
 29248                                  ;ELSE
 29249                                  ;
 29250                                  ;gl_2:
 29251                                  ;	POP	BX
 29252                                  ;	CMP	AL,"."
 29253                                  ;	retz
 29254                                  ;	CMP	AL,'"'
 29255                                  ;	retz
 29256                                  ;	CALL	PATHCHRCMP
 29257                                  ;	retz
 29258                                  ;	CMP	AL,"["
 29259                                  ;	retz
 29260                                  ;	CMP	AL,"]"
 29261                                  ;	retz
 29262                                  ;ENDIF
 29263                                  
 29264                                  ;---------------------------------------------------------------------
 29265                                  ;
 29266                                  ; DELIM - check if character is a delimiter
 29267                                  ;	Entry : AX = character to check
 29268                                  ;	Exit  : ZF set if character is not a delimiter
 29269                                  ;	Uses  : Flags
 29270                                  ;
 29271                                  ;--------------------------------------------------------------------
 29272                                  
 29273                                  	;entry	DELIM
 29274                                  DELIM:
 29275                                  ;IF TableLook
 29276                                  	; 20/05/2019 - Retro DOS v4.0
 29277 00004FEC 50                      	PUSH	AX
 29278                                  
 29279                                  	; MSDOS 3.3
 29280                                  	;push	bx
 29281                                  	;mov	bx,CharType
 29282                                  	;;09/08/2018
 29283                                  	;;xlat	byte [cs:bx]
 29284                                  	;cs	xlat
 29285                                  	;pop	bx
 29286                                  
 29287                                  	; MSDOS 6.0
 29288 00004FED E80C00                  	CALL	GetCharType
 29289                                  	
 29290                                  	;test	al,2
 29291 00004FF0 A802                    	TEST	AL,FDELIM
 29292 00004FF2 58                      	POP	AX
 29293 00004FF3 C3                      	RETN
 29294                                  ;ELSE
 29295                                  ;	CMP	AL,":"
 29296                                  ;	retz
 29297                                  ;
 29298                                  ;	CMP	AL,"<"
 29299                                  ;	retz
 29300                                  ;	CMP	AL,"|"
 29301                                  ;	retz
 29302                                  ;	CMP	AL,">"
 29303                                  ;	retz
 29304                                  ;
 29305                                  ;	CMP	AL,"+"
 29306                                  ;	retz
 29307                                  ;	CMP	AL,"="
 29308                                  ;	retz
 29309                                  ;	CMP	AL,";"
 29310                                  ;	retz
 29311                                  ;	CMP	AL,","
 29312                                  ;	retz
 29313                                  ;ENDIF
 29314                                  
 29315                                  ;-------------------------------------------------------------------------
 29316                                  ;
 29317                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29318                                  ;	Entry : AL = character to check
 29319                                  ;	Exit  : ZF set if character is a space
 29320                                  ;	Uses  : flags
 29321                                  ;
 29322                                  ;-------------------------------------------------------------------------
 29323                                  
 29324                                  	;entry SPCHK
 29325                                  SPCHK:
 29326                                  ;IF TableLook
 29327                                  	; 20/05/2019 - Retro DOS v4.0
 29328 00004FF4 50                      	PUSH	AX
 29329                                  
 29330                                  	; MSDOS 3.3
 29331                                  	;push	bx
 29332                                  	;mov	bx,CharType
 29333                                  	;; 09/08/2018
 29334                                  	;;xlat	byte [cs:bx]
 29335                                  	;cs	xlat
 29336                                  	;pop	bx
 29337                                  
 29338                                  	; MSDOS 6.0
 29339 00004FF5 E80400                  	CALL	GetCharType
 29340                                  	
 29341                                  	;test	al,4
 29342 00004FF8 A804                    	TEST	AL,FSPCHK
 29343 00004FFA 58                      	POP	AX
 29344 00004FFB C3                      	RETN
 29345                                  ;ELSE
 29346                                  ;	CMP	AL,9		; Filter out tabs too
 29347                                  ;	retz
 29348                                  ;; WARNING! " " MUST be the last compare
 29349                                  ;	CMP	AL," "
 29350                                  ;	return
 29351                                  ;ENDIF
 29352                                  
 29353                                  ;-------------------------------------------------------------------------
 29354                                  ;
 29355                                  ;  GetCharType - return flag bits indicating character type
 29356                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29357                                  ;	defined above at label CharType.
 29358                                  ;
 29359                                  ;	Entry : AL = character to return type flags for
 29360                                  ;	Exit  : AL = type flags
 29361                                  ;	Uses  : AL, flags
 29362                                  ;
 29363                                  ;-------------------------------------------------------------------------
 29364                                  
 29365                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29366                                  
 29367                                  	; 20/05/2019 - Retro DOS v4.0
 29368                                  	; MSDOS 6.0
 29369                                  GetCharType:
 29370                                  	;cmp	al,7Eh
 29371 00004FFC 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29372 00004FFE 7316                    	jae	short gct_90		; return standard value
 29373                                  
 29374 00005000 53                      	push	bx
 29375 00005001 BB[844F]                	mov	bx,CharType		; load lookup table
 29376 00005004 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29377                                  	;xlat	cs:[bx] 		; get flags
 29378 00005006 2ED7                    	cs	xlat	
 29379 00005008 5B                      	pop	bx
 29380                                  
 29381                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29382                                  ; we have to shift the flags down to the low nibble
 29383                                  
 29384 00005009 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29385                                  
 29386 0000500B D0E8                    	shr	al,1			; we want high nibble, shift it down
 29387 0000500D D0E8                    	shr	al,1
 29388 0000500F D0E8                    	shr	al,1
 29389 00005011 D0E8                    	shr	al,1
 29390                                  gct_80:
 29391 00005013 240F                    	and	al,0Fh			; clear the unused nibble
 29392 00005015 C3                      	retn
 29393                                  gct_90:
 29394 00005016 B00F                    	mov	al,0Fh			; set all flags
 29395 00005018 C3                      	retn
 29396                                  
 29397                                  ;----------------------------------------------------------------------------
 29398                                  ;
 29399                                  ; Procedure : PATHCHRCMP
 29400                                  ;
 29401                                  ;----------------------------------------------------------------------------
 29402                                  
 29403                                  PATHCHRCMP:
 29404 00005019 3C2F                    	CMP	AL,'/'
 29405 0000501B 7606                    	JBE	short PathRet
 29406 0000501D 3C5C                    	CMP	AL,'\'
 29407 0000501F C3                      	retn
 29408                                  GotFor:
 29409 00005020 B05C                    	MOV	AL,'\'
 29410 00005022 C3                      	retn
 29411                                  PathRet:
 29412 00005023 74FB                    	JZ	short GotFor
 29413 00005025 C3                      	retn
 29414                                  
 29415                                  ;============================================================================
 29416                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29417                                  ;============================================================================
 29418                                  ; 30/07/2018 - Retro DOS v3.0
 29419                                  ; 29/04/2019 - Retro DOS v4.0
 29420                                  
 29421                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29422                                  
 29423                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29424                                  
 29425                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29426                                  ;	NAME	IBMCTRLC
 29427                                  
 29428                                  ;**	Low level routines for detecting special characters on CON input,
 29429                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29430                                  ;	process termination code, and the INT 0 divide overflow handler.
 29431                                  ;
 29432                                  ;	FATAL
 29433                                  ;	FATAL1
 29434                                  ;	reset_environment
 29435                                  ;	DSKSTATCHK
 29436                                  ;	SPOOLINT
 29437                                  ;	STATCHK
 29438                                  ;	CNTCHAND
 29439                                  ;	DIVOV
 29440                                  ;	CHARHARD
 29441                                  ;	HardErr
 29442                                  ;
 29443                                  ;	Revision history:
 29444                                  ;
 29445                                  ;	    AN000	version 4.0   Jan 1988
 29446                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29447                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29448                                  ;
 29449                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29450                                  ;	      flags register. In order to return to user normally DOS used to
 29451                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29452                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29453                                  ;
 29454                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29455                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29456                                  ;	      charhard.
 29457                                  
 29458                                  ; 29/04/2019 - Retro DOS v4.0
 29459                                  	; MSDOS 6.0
 29460                                  ;		public	LowInt23Addr		
 29461                                  LowInt23Addr: ;	LABEL	DWORD
 29462 00005026 [CD10]0000              	DW	LowInt23, 0
 29463                                  
 29464                                  ;		public	LowInt24Addr
 29465                                  LowInt24Addr: ;	LABEL	DWORD
 29466 0000502A [E110]0000              	DW	LowInt24, 0
 29467                                  
 29468                                  ;		public	LowInt28Addr
 29469                                  LowInt28Addr: ;	LABEL	DWORD
 29470 0000502E [F510]0000              	DW	LowInt28, 0
 29471                                  
 29472                                  ;Break	<Checks for ^C in CON I/O>
 29473                                  
 29474                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29475                                  ; 05/05/2019 - Retro DOS v4.0
 29476                                  
 29477                                  ;---------------------------------------------------------------------------
 29478                                  ;
 29479                                  ; Procedure Name : DSKSTATCHK
 29480                                  ;
 29481                                  ; Check for ^C if only one level in
 29482                                  ;
 29483                                  ;---------------------------------------------------------------------------
 29484                                  
 29485                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29486                                  
 29487                                  DSKSTATCHK:        
 29488                                  	;CMP	BYTE [INDOS],1
 29489 00005032 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29490                                  	;retnz			; Do NOTHING
 29491                                  	; 16/12/2022
 29492 00005038 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29493                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29494                                  	;jz	short _RET37 ; dskstatchk1
 29495                                  	;retn
 29496                                  ;_RET37:
 29497                                  ;dskstatchk1:
 29498 0000503A 51                      	PUSH    CX
 29499 0000503B 06                              PUSH    ES
 29500 0000503C 53                              PUSH    BX
 29501 0000503D 1E                              PUSH    DS
 29502 0000503E 56                              PUSH    SI
 29503                                          
 29504                                  	;PUSH	CS
 29505                                          ;POP	ES
 29506                                          ;PUSH	CS
 29507                                          ;POP	DS
 29508                                  
 29509 0000503F 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29510 00005041 8EC3                    	MOV	ES,BX		; for deviocall2
 29511 00005043 8EDB                    	MOV	DS,BX
 29512                                  
 29513                                  	; 16/12/2022
 29514                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29515                                  
 29516                                  	; 05/05/2019
 29517                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29518                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29519                                  	;mov	word [ss:DSKSTST],0
 29520                                  
 29521                                  	; 16/12/2022
 29522                                  	; 25/06/2019
 29523 00005045 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29524 0000504A C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29525 0000504F C706[9503]0000          	mov	word [DSKSTST],0
 29526                                  
 29527 00005055 BB[9203]                        MOV     BX,DSKSTCALL
 29528                                  
 29529                                  	;LDS	SI,[ss:BCON]
 29530                                          ; 25/062019
 29531 00005058 C536[3200]              	lds	si,[BCON]
 29532                                  
 29533                                  ; 16/12/2022
 29534                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29535                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29536                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29537                                  ;	mov	word [ss:DSKSTST],0
 29538                                  ;	mov	bx,DSKSTCALL
 29539                                  ;	lds	si,[ss:BCON]
 29540                                  
 29541 0000505C E890F5                  	CALL	DEVIOCALL2
 29542                                   	; 15/03/2018
 29543                                  	;;test	word [ss:DSKSTST],200h
 29544                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29545                                  	; 05/05/2019
 29546 0000505F 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29547 00005065 7408                    	jz	short _GotCh		; No characters available
 29548                                  
 29549 00005067 30C0                            XOR     AL,AL                   ; Set zero
 29550                                  RET36:
 29551 00005069 5E                              POP     SI
 29552 0000506A 1F                              POP     DS
 29553 0000506B 5B                              POP     BX
 29554 0000506C 07                              POP     ES
 29555 0000506D 59                              POP     CX
 29556                                  	; 16/12/2022
 29557                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29558                                  _RET37:
 29559 0000506E C3                              RETN
 29560                                  
 29561                                  _GotCh:
 29562 0000506F 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29563                                  
 29564 00005073 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29565 00005075 75F2                            JNZ     SHORT RET36
 29566 00005077 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29567 0000507D 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29568 00005083 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29569                                  	; 09/09/2018
 29570 00005088 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29571 0000508F 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29572 00005096 E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29573 00005099 5E                              POP     SI
 29574 0000509A 1F                              POP     DS
 29575 0000509B 5B                              POP     BX                      ; Clean stack
 29576 0000509C 07                              POP     ES
 29577 0000509D 59                              POP     CX
 29578 0000509E E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29579                                  
 29580                                  	; 05/05/2019
 29581                                  NOSTOP:
 29582                                  	; MSDOS 6.0
 29583 000050A1 3C10                    	CMP	AL,"P"-"@"
 29584 000050A3 7509                    	JNZ	short check_next
 29585                                  				    	; SS override
 29586 000050A5 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29587 000050AB 7405                    	JZ	short INCHKJ		; no
 29588                                  check_end:	; 24/09/2023
 29589 000050AD C3                      	retn
 29590                                  check_next:
 29591                                  	;IF	NOT TOGLPRN
 29592                                  	;CMP	AL,"N"-"@"
 29593                                  	;JZ	short INCHKJ
 29594                                  	;ENDIF
 29595                                  
 29596 000050AE 3C03                    	CMP	AL,"C"-"@"
 29597                                  	; 24/09/2023
 29598                                  	;JZ	short INCHKJ
 29599                                  ;check_end:
 29600                                  	;retn
 29601 000050B0 75FB                    	jnz	short check_end
 29602                                  
 29603                                  	; 24/09/2023
 29604                                  	; 08/09/2018
 29605                                  INCHKJ:	; 10/08/2018
 29606 000050B2 E9A500                  	jmp	INCHK
 29607                                  
 29608                                  	; MSDOS 3.3
 29609                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29610                                          ;JZ	short INCHKJ
 29611                                  
 29612                                  	; 15/04/2018
 29613                                          ;;IF	NOT TOGLPRN
 29614                                          ;CMP	AL,"N"-"@"
 29615                                          ;JZ	SHORT INCHKJ
 29616                                          ;;ENDIF
 29617                                  	
 29618                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29619                                          ;JZ	short INCHKJ
 29620                                  	;RETN
 29621                                  
 29622                                  ;	; 08/09/2018
 29623                                  ;INCHKJ:; 10/08/2018
 29624                                  ;	JMP	INCHK
 29625                                  
 29626                                  ;----------------------------------------------------------------------------
 29627                                  ;
 29628                                  ; Procedure Name : SpoolInt
 29629                                  ;
 29630                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29631                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29632                                  ; the middle of an INT 24.
 29633                                  ;
 29634                                  ;----------------------------------------------------------------------------
 29635                                  
 29636                                  SPOOLINT:
 29637 000050B5 9C                              PUSHF
 29638                                  	; 15/03/2018
 29639 000050B6 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29640 000050BC 7423                            JZ      SHORT POPFRET
 29641 000050BE 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29642 000050C4 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29643                                  
 29644                                  	; 30/07/2018
 29645                                  
 29646                                  	; Note that we are going to allow an external program to issue system 
 29647                                  	; calls at this time. We MUST preserve IdleInt across this.
 29648                                  
 29649 000050C6 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29650                                  
 29651                                  	; 05/05/2019 - Retro DOS v4.0
 29652                                   
 29653                                  	; MSDOS 6.0
 29654 000050CB 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29655 000050D1 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29656 000050D3 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29657 000050D5 EB05                    	jmp	short spool_ret_addr
 29658                                  
 29659                                  do_low_int28:
 29660                                  	;call	far [ss:LowInt28Addr]
 29661 000050D7 2EFF1E[2E50]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29662                                  
 29663                                  spool_ret_addr:
 29664                                  	;INT	int_spooler		; INT 28h
 29665                                  
 29666 000050DC 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29667                                  POPFRET:
 29668 000050E1 9D                              POPF
 29669                                  _RET18:  
 29670 000050E2 C3                      	RETN
 29671                                  
 29672                                  ; 05/05/2019 - Retro DOS v4.0
 29673                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29674                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29675                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29676                                  
 29677                                  ;----------------------------------------------------------------------------
 29678                                  ;
 29679                                  ; Procedure Name : STATCHK
 29680                                  ;
 29681                                  ;----------------------------------------------------------------------------
 29682                                  
 29683                                  STATCHK:
 29684 000050E3 E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29685                                                                          ; input redirection
 29686 000050E6 53                              PUSH    BX
 29687 000050E7 31DB                            XOR     BX,BX
 29688 000050E9 E8ECE4                          CALL	GET_IO_SFT
 29689 000050EC 5B                              POP     BX
 29690 000050ED 72F3                            JC      SHORT _RET18
 29691                                  
 29692 000050EF B401                            MOV     AH,1
 29693 000050F1 E826F3                          CALL	IOFUNC
 29694 000050F4 74BF                            JZ      SHORT SPOOLINT
 29695 000050F6 3C13                            CMP     AL,'S'-'@'
 29696 000050F8 75A7                            JNZ     SHORT NOSTOP
 29697                                  
 29698                                  	; 05/05/2019
 29699                                  	; MSDOS 6.0			; SS override
 29700 000050FA 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29701 00005100 75AB                    	JNZ	short check_end		; AN000; yes
 29702                                  
 29703 00005102 30E4                            XOR     AH,AH
 29704 00005104 E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29705 00005107 EB4A                            JMP     SHORT PAUSOSTRT
 29706                                  PRINTOFF:
 29707                                  PRINTON:
 29708 00005109 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29709                                  
 29710                                  	; 30/07/2018 - Retro DOS v3.0
 29711 0000510E 53                      	PUSH	BX
 29712 0000510F BB0400                  	MOV	BX,4
 29713 00005112 E8C3E4                  	call	GET_IO_SFT
 29714 00005115 5B                      	POP	BX
 29715 00005116 72CA                    	jc	short _RET18
 29716 00005118 06                      	PUSH	ES
 29717 00005119 57                      	PUSH	DI
 29718 0000511A 1E                      	PUSH	DS
 29719 0000511B 07                      	POP	ES
 29720 0000511C 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29721                                  	;test	word [es:di+5],800h
 29722                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29723                                  	; 05/05/2019
 29724 0000511E 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29725 00005123 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29726                                  
 29727                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29728                                  					; See if allowed
 29729 00005125 50                      	push	ax
 29730 00005126 B82611                  	mov	ax,1126h
 29731 00005129 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29732                                  			; Return: CF set on error, AX = error code
 29733                                  			; STACK unchanged
 29734 0000512B 58                      	pop	ax
 29735                                  
 29736 0000512C 730F                    	JNC	short NORM_PR 		; Echo is OK
 29737                                  
 29738                                  					; SS override
 29739 0000512E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29740                                  
 29741                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29742                                  
 29743 00005134 50                      	push    ax
 29744 00005135 B82411                  	mov     ax,1124h
 29745 00005138 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29746                                  			; ES:DI -> SFT, SS = DOS CS
 29747 0000513A 58                      	pop     ax
 29748                                  
 29749 0000513B EB10                    	JMP	SHORT RETP6
 29750                                  NORM_PR:
 29751 0000513D 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29752 00005143 7505                    	JNZ	short PRNOPN
 29753 00005145 E82BF4                  	call	DEV_CLOSE_SFT
 29754 00005148 EB03                    	JMP	SHORT RETP6
 29755                                  PRNOPN:
 29756 0000514A E81EF4                  	call	DEV_OPEN_SFT
 29757                                  RETP6:
 29758 0000514D 5F                      	POP	DI
 29759 0000514E 07                      	POP	ES
 29760                                  STATCHK_RETN:
 29761 0000514F C3                              RETN
 29762                                  PAUSOLP:
 29763 00005150 E862FF                          CALL    SPOOLINT
 29764                                  PAUSOSTRT:
 29765 00005153 B401                            MOV     AH,1
 29766 00005155 E8C2F2                          CALL	IOFUNC
 29767 00005158 74F6                            JZ      SHORT PAUSOLP
 29768                                  INCHK:
 29769 0000515A 53                              PUSH    BX
 29770 0000515B 31DB                            XOR     BX,BX
 29771 0000515D E878E4                          CALL	GET_IO_SFT
 29772 00005160 5B                              POP     BX
 29773 00005161 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29774 00005163 30E4                            XOR     AH,AH
 29775 00005165 E8B2F2                          CALL	IOFUNC
 29776                                  	; 30/07/2018
 29777                                  	; MSDOS 3.3
 29778                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29779                                          ;JNZ	SHORT NOPRINT
 29780                                  
 29781                                  	;cmp	byte [SS:SCAN_FLAG],0
 29782                                  	;JZ	SHORT PRINTON	
 29783                                  	;mov	byte [ss:SCAN_FLAG],0
 29784                                  
 29785                                  	; 05/05/2019
 29786                                  	; MSDOS 6.0
 29787 00005168 3C10                    	CMP	AL,"P"-"@"
 29788                                  	;;;;  7/14/86	ALT_Q key fix
 29789 0000516A 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29790                                  ;NOPRINT:	
 29791                                  	;IF	NOT TOGLPRN
 29792                                  	;CMP	AL,"N"-"@"
 29793                                  	;JZ	short PRINTOFF
 29794                                  	;ENDIF
 29795 0000516C 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29796                                  	;retnz
 29797 0000516E 75DF                    	jnz	short STATCHK_RETN
 29798                                  
 29799                                  	; !! NOTE: FALL THROUGH !!
 29800                                  
 29801                                  ;---------------------------------------------------------------------------
 29802                                  ;
 29803                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29804                                  ;
 29805                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29806                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29807                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29808                                  ; processing to continue; 2) the original interrupt return address to the code
 29809                                  ; that performed the function call in the first place. If the user CTRL-C
 29810                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29811                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29812                                  ; is simulated.
 29813                                  ;
 29814                                  ;---------------------------------------------------------------------------
 29815                                  
 29816                                  CNTCHAND:
 29817                                  	; MSDOS 6.0			; SS override
 29818                                  					; AN002; from RAWOUT
 29819                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29820                                  	;JNZ	short around_deadlock 	; AN002;
 29821                                  
 29822                                  	; 05/05/2019 - Retro DOS v4.0
 29823                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29824 00005170 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29825 00005176 7508                    	JNZ	short around_deadlock 	; AN002;
 29826                                  
 29827 00005178 B003                            MOV     AL,3			; Display "^C"
 29828 0000517A E878C5                          CALL	BUFOUT
 29829 0000517D E813C4                          CALL	CRLF
 29830                                  around_deadlock:
 29831 00005180 16                              PUSH    SS
 29832 00005181 1F                              POP     DS
 29833 00005182 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29834 00005187 7403                            JZ      SHORT NOSWAP
 29835 00005189 E8B6E0                          CALL	SWAPBACK
 29836                                  NOSWAP:
 29837 0000518C FA                      	CLI				; Prepare to play with stack
 29838 0000518D 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29839 00005191 8B26[8405]              	MOV	SP,[USER_SP]
 29840 00005195 E8B3B2                          CALL	restore_world       ; User registers now restored
 29841                                  
 29842                                  	; 30/07/2018 - Retro DOS v3.0 
 29843                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29844                                          ; 14/03/2018 - Retro DOS v2.0
 29845                                  	;MOV	BYTE [CS:INDOS],0	
 29846                                          ;MOV	BYTE [CS:ERRORMODE],0
 29847                                          ;MOV	[CS:ConC_Spsave],SP
 29848                                  	;clc	;30/07/2018
 29849                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29850                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29851                                  			; Return: return via RETF 2 with CF set
 29852                                  			; DOS will abort program with errorlevel 0
 29853                                  			; else
 29854                                  			; interrupted DOS call continues
 29855                                  
 29856                                  	; 05/05/2019 - Retro DOS v4.0
 29857                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29858                                  
 29859                                  	; CS was used to address these variables. We have to use DOSDATA
 29860                                  	
 29861 00005198 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29862                                  			; (pop es, after 'call restore_world')	
 29863 00005199 1E                      	push	ds
 29864                                  	;getdseg <ds>			; ds -> dosdata
 29865 0000519A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29866 0000519F C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29867 000051A4 C606[2003]00            	mov	byte [ERRORMODE],0
 29868 000051A9 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29869                                  	; User SP has changed because of push. Adjust for it
 29870 000051AD 8306[3203]02            	add	word [ConC_Spsave],2
 29871                                  
 29872 000051B2 803E[F211]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29873 000051B7 1F                       	pop	ds	; restore ds
 29874 000051B8 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29875 000051BA F8                      	CLC				
 29876 000051BB CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29877 000051BD EB06                    	jmp	short ctrlc_ret_addr
 29878                                  
 29879                                  	; 05/05/2019
 29880                                  do_low_int23:
 29881 000051BF F8                      	clc
 29882 000051C0 2EFF1E[2650]            	call	far [cs:LowInt23Addr]	
 29883                                  
 29884                                  	; 30/07/2018 
 29885                                  
 29886                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29887                                  
 29888                                  ; The user has returned to us. The circumstances we allow are:
 29889                                  ;
 29890                                  ;   IRET	We retry the operation by redispatching the system call
 29891                                  ;   CLC/RETF	POP the stack and retry
 29892                                  ;   ... 	Exit the current process with ^C exit
 29893                                  ;
 29894                                  ; User's may RETURN to us and leave interrupts on. 
 29895                                  ; Turn 'em off just to be sure
 29896                                  
 29897                                  ctrlc_ret_addr: ; 05/05/2019
 29898                                  
 29899 000051C5 FA                      	CLI
 29900                                  
 29901                                  	; MSDOS 3.3 
 29902                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29903                                  	;PUSHF				; and the flags (maybe new call)
 29904                                  	;POP	AX
 29905                                  
 29906                                  	; 05/05/2019
 29907                                  	; MSDOS 6.0
 29908                                  
 29909                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29910                                  
 29911 000051C6 50                      	push	ax
 29912 000051C7 8CD8                    	mov	ax,ds
 29913                                  	;getdseg <ds>			; ds -> dosdata
 29914 000051C9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29915 000051CE A3[0A0D]                	mov	[TEMPSEG],ax
 29916 000051D1 58                      	pop	ax
 29917 000051D2 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29918 000051D5 9C                      	pushf				; and the flags (maybe new call)
 29919 000051D6 58                      	pop	ax
 29920                                  
 29921                                  ; See if the input stack is identical to the output stack
 29922                                  
 29923                                  	; MSDOS 3.3
 29924                                  	;CMP	SP,[CS:ConC_Spsave]
 29925                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29926                                  
 29927                                  	; MSDOS 6.0
 29928 000051D7 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29929 000051DB 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29930                                  
 29931                                  ; Repeat the operation by redispatching the system call.
 29932                                  
 29933                                  ctrlc_repeat:
 29934                                  	; MSDOS 3.3
 29935                                  	;MOV	AX,[CS:USER_IN_AX]
 29936                                  	; 05/05/2019
 29937                                  	; MSDOS 6.0
 29938 000051DD A1[3A03]                	mov	ax,[USER_IN_AX]
 29939 000051E0 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29940                                  	; MSDOS 3.3 & MSDOS 6.0 
 29941                                  	;transfer COMMAND
 29942                                  COMMANDJ:
 29943 000051E4 E921B1                  	JMP	COMMAND
 29944                                  
 29945                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29946                                  ; RETF'd leaving some flags on the stack and examine the input
 29947                                  
 29948                                  ctrlc_try_new:
 29949 000051E7 83C402                  	ADD	SP,2			; pop those flags
 29950                                  	;;test	ax,1
 29951                                  	;TEST	AX,f_Carry		; did he return with carry?
 29952 000051EA A801                    	test	al,f_Carry ; test al,1
 29953 000051EC 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29954                                  
 29955                                  	; MSDOS 6.0
 29956 000051EE 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29957                                  
 29958                                  	; Well...  time to abort the user.  
 29959                                  	; Signal a ^C exit and use the EXIT system call..
 29960                                  
 29961                                  ctrlc_abort:
 29962                                  	; MSDOS 3.3
 29963                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29964                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29965                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29966                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29967                                  	;;JMP	SHORT COMMANDJ
 29968                                  	;JMP	COMMAND
 29969                                  
 29970                                  	; 05/05/2019 - Retro DOS v4.0
 29971                                  	; MSDOS 6.0
 29972 000051F2 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29973 000051F5 1E                      	push	ds
 29974                                  	;getdseg <ds>			; ds -> dosdata
 29975 000051F6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29976 000051FB C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29977 00005200 1F                      	pop	ds
 29978                                  	;transfer COMMAND		; give up by faking $EXIT
 29979 00005201 EBE1                    	JMP	SHORT COMMANDJ
 29980                                  	;JMP	COMMAND
 29981                                  
 29982                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29983                                  ;----------------------------------------------------------------------------
 29984                                  ;
 29985                                  ; Procedure Name : DIVOV
 29986                                  ;
 29987                                  ; Default handler for division overflow trap
 29988                                  ;
 29989                                  ;----------------------------------------------------------------------------
 29990                                  
 29991                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29992                                  DIVOV: 
 29993                                  	; 05/05/2019 - Retro DOS v4.0
 29994                                  	; 30/07/2018
 29995                                  	; 07/07/2018 - Retro DOS v3.0
 29996 00005203 BE[9D09]                	mov	si,DIVMES
 29997 00005206 2E8B1E[B009]            	mov	bx,[cs:DivMesLen]
 29998                                  	;mov	ax,cs
 29999                                  	;mov	ss,ax
 30000                                  	; 05/05/2019
 30001                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30002 0000520B 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30003 00005210 BC[A007]                	mov     sp,AUXSTACK
 30004                                  	;call	RealDivOv ; MSDOS 3.3
 30005 00005213 E80200                  	call	_OUTMES ; MSDOS 6.0
 30006 00005216 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30007                                  
 30008                                  ; 30/07/2018
 30009                                  
 30010                                  ; MSDOS 6.0
 30011                                  ;---------------------------------------------------------------------------
 30012                                  ;
 30013                                  ; Procedure Name : OutMes
 30014                                  ;
 30015                                  ;
 30016                                  ; OutMes: perform message output
 30017                                  ; Inputs:   SS:SI points to message
 30018                                  ;	    BX has message length
 30019                                  ; Outputs:  message to BCON
 30020                                  ;
 30021                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30022                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30023                                  ;NB. This procedure is called only from DIVOV. -SR
 30024                                  ;
 30025                                  ;---------------------------------------------------------------------------
 30026                                  
 30027                                  ;MSDOS 3.3
 30028                                  ;---------------------------------------------------------------------------
 30029                                  ; RealDivOv: perform actual divide overflow stuff.
 30030                                  ; Inputs:   none
 30031                                  ; Outputs:  message to BCON
 30032                                  ;---------------------------------------------------------------------------
 30033                                  
 30034                                  	; 05/05/2019 - Retro DOS v4.0
 30035                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30036                                  
 30037                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30038                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30039                                  
 30040                                  ;---------------------------------------------------------------------------
 30041                                  ;
 30042                                  ; Procedure Name : OutMes
 30043                                  ;
 30044                                  ; OutMes: perform message output
 30045                                  ; Inputs:   SS:SI points to message
 30046                                  ;	    BX has message length
 30047                                  ; Outputs:  message to BCON
 30048                                  ;
 30049                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30050                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30051                                  ;NB. This procedure is called only from DIVOV. -SR
 30052                                  ;
 30053                                  ;---------------------------------------------------------------------------
 30054                                  
 30055                                  	; 30/07/2018
 30056                                  	; MSDOS 6.0
 30057                                  _OUTMES:
 30058                                  	; MSDOS 3.3
 30059                                  ;RealDivOv:
 30060                                  	; 07/07/2018 - Retro DOS v3.0
 30061                                          ;Context ES
 30062 00005218 16                      	push	ss ; 05/05/2019
 30063                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30064 00005219 07                      	POP	ES
 30065                                          ;Context DS
 30066 0000521A 16                      	push	ss ; 05/05/2019	
 30067                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30068 0000521B 1F                      	POP	DS
 30069 0000521C C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30070 00005221 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30071 00005226 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30072                                  	; BX = [DivMesLen] = 19
 30073 0000522C 891E[A403]                      MOV     [DSKSTCNT],BX
 30074 00005230 BB[9203]                        MOV     BX,DSKSTCALL
 30075 00005233 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30076                                  	; 08/09/2018
 30077                                  	;mov	[DEVIOBUF_PTR],si
 30078                                  	; MSDOS 6.0
 30079                                  					; CS is used for string, fill in 
 30080                                  					; segment address 
 30081 00005237 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30082                                  
 30083 0000523B C536[3200]                      LDS     SI,[BCON]
 30084 0000523F E8ADF3                          CALL	DEVIOCALL2
 30085                                  
 30086                                  	;; 14/03/2018
 30087                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30088                                  	;; 08/09/2018
 30089                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30090                                          ;MOV	WORD [CS:DSKSTCNT],1
 30091                                          
 30092                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30093                                  
 30094                                  	; ES still points to DOSDATA. ES is
 30095                                  					; not destroyed by deviocall2. So use
 30096                                  					; ES override.
 30097                                  
 30098 00005242 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30099 00005249 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30100                                  
 30101 00005250 C3                      	RETN
 30102                                  
 30103                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30104                                  ;---------------------------------------------------------------------------
 30105                                  ;
 30106                                  ; Procedure Name : CHARHARD
 30107                                  ;
 30108                                  ;
 30109                                  ; Character device error handler
 30110                                  ; Same function as HARDERR
 30111                                  ;
 30112                                  ;---------------------------------------------------------------------------
 30113                                  
 30114                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30115                                  CHARHARD:
 30116                                  	; 05/05/2019 - Retro DOS v4.0
 30117                                  	; 30/07/2018
 30118                                  	; 08/07/2018 - Retro DOS v3.0
 30119                                  
 30120                                  	; MSDOS 6.0
 30121                                  		   			; M024 - start
 30122 00005251 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30123                                  	;jne	short @f		; Y: allow fail
 30124 00005257 750B                    	jne	short chard1
 30125                                  
 30126 00005259 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30127                                  
 30128 0000525C 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30129 00005262 7503                    	jnz	short ctrlp		; Y: 
 30130                                  ;@@:
 30131                                  chard1:					; M024 - end
 30132                                  	; MSDOS 6.0 & MSDOS 3.3
 30133                                  
 30134                                  ; Character device error handler
 30135                                  ; Same function as HARDERR
 30136                                  
 30137                                  	;or	ah,38h
 30138 00005264 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30139                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30140 00005267 368826[4B03]            	mov	[SS:ALLOWED],ah
 30141                                  
 30142                                  	; 15/03/2018
 30143 0000526C 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30144 00005271 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30145 00005276 56                              PUSH    SI
 30146                                  	;and	di,0FFh
 30147 00005277 81E7FF00                        AND     DI,STECODE
 30148 0000527B 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30149 0000527D E86400                          CALL    FATALC
 30150 00005280 5E                              POP     SI
 30151                                  	;return
 30152 00005281 C3                              RETN
 30153                                  
 30154                                  ;---------------------------------------------------------------------------
 30155                                  ;
 30156                                  ; Procedure Name : HardErr
 30157                                  ;
 30158                                  ; Hard disk error handler. Entry conditions:
 30159                                  ;	DS:BX = Original disk transfer address
 30160                                  ;	DX = Original logical sector number
 30161                                  ;	CX = Number of sectors to go (first one gave the error)
 30162                                  ;	AX = Hardware error code
 30163                                  ;	DI = Original sector transfer count	
 30164                                  ;	ES:BP = Base of drive parameters
 30165                                  ;	[READOP] = 0 for read, 1 for write
 30166                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30167                                  ; Output:
 30168                                  ;	[FAILERR] will be set if user responded FAIL
 30169                                  ;
 30170                                  ;--------------------------------------------------------------------------
 30171                                  
 30172                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30173                                  HARDERR:
 30174                                  	; 05/05/2019 - Retro DOS v4.0
 30175                                  	; 30/07/2018
 30176                                  	; 08/07/2018 - Retro DOS v3.0
 30177 00005282 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 30178                                          ;and	di,0FFh
 30179 00005283 81E7FF00                	AND     DI,STECODE              ; And off status bits
 30180                                          ;CMP	DI,WRECODE		; Write Protect Error?
 30181                                  	;cmp	di,0
 30182 00005287 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30183 0000528A 750A                            JNZ     short NOSETWRPERR
 30184 0000528C 50                              PUSH    AX
 30185                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30186                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30187                                          ;;MOV	AL,[ES:BP+0]
 30188                                  	; 15/12/2022
 30189 0000528D 268A4600                	mov	al,[ES:BP]
 30190                                          	; 15/03/2018
 30191 00005291 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 30192 00005295 58                              POP     AX
 30193                                  NOSETWRPERR:
 30194 00005296 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 30195 00005298 01C2                            ADD     DX,AX                   ; First sector number to retry
 30196 0000529A 52                              PUSH    DX
 30197                                  	; 08/07/2018
 30198                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30199 0000529B 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30200 0000529F 5A                              POP     DX
 30201 000052A0 01C3                            ADD     BX,AX                   ; First address for retry
 30202 000052A2 30E4                            XOR     AH,AH                   ; Flag disk section in error
 30203                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 30204 000052A4 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30205 000052A8 721A                            JB      SHORT ERRINT
 30206 000052AA FEC4                            INC     AH                      ; Flag for FAT
 30207                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30208                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 30209 000052AC 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30210 000052B0 7308                    	JAE	short TESTDIR 		; No
 30211                                  		 ; Err in FAT must force recomp of freespace
 30212                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30213                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30214 000052B2 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30215 000052B8 EB0A                    	JMP	SHORT ERRINT
 30216                                  TESTDIR:
 30217 000052BA FEC4                            INC     AH
 30218                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 30219 000052BC 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 30220 000052C0 7202                            JB      SHORT ERRINT
 30221 000052C2 FEC4                            INC     AH                      ; Must be in data area
 30222                                  ERRINT:
 30223 000052C4 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 30224 000052C6 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 30225                                  
 30226                                  	; 15/08/2018
 30227                                  					; SS override for allowed and EXITHOLD
 30228 000052CB 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30229                                  
 30230                                          ;entry   FATAL
 30231                                  FATAL:
 30232                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30233                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30234                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 30235                                  	; 15/12/2022
 30236 000052D0 268A4600                	MOV	AL,[ES:BP]        
 30237                                  
 30238                                  	;entry   FATAL1
 30239                                  FATAL1:  
 30240                                  	; 15/03/2018      
 30241 000052D4 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 30242 000052D9 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 30243                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30244                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30245 000052DE 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30246 000052E2 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 30247                                  
 30248                                  	; DI has the INT-24-style extended error. We now map the error code 
 30249                                  	; for this into the normalized get extended error set by using the 
 30250                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 30251                                  	; the device returned codes and leave all others beyond the look up 
 30252                                  	; table alone.
 30253                                  
 30254                                  	; 08/07/2018 - Retro DOS v3.0
 30255                                  FATALC:
 30256 000052E4 E89701                  	call	SET_I24_EXTENDED_ERROR
 30257                                  	;cmp	di,0Ch
 30258 000052E7 83FF0C                  	CMP	DI,error_I24_gen_failure
 30259 000052EA 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30260 000052EC BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30261                                  					;  Only come via GetExtendedError
 30262                                  ;** ----------------------------------------------------------------
 30263                                  ;
 30264                                  ; Entry point used by REDIRector on Network I 24 errors.
 30265                                  ;
 30266                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30267                                  ;
 30268                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30269                                  ;     EXITHOLD set for restore of ES:BP.
 30270                                  ; ------------------------------------------------------------------
 30271                                  	;entry	NET_I24_ENTRY
 30272                                  NET_I24_ENTRY:
 30273                                  GOT_RIGHT_CODE:
 30274 000052EF 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30275 000052F5 7404                            JZ	SHORT NoSetFail
 30276 000052F7 B003                    	MOV	AL,3
 30277 000052F9 EB6C                    	JMP	short FailRet
 30278                                  NoSetFail:
 30279 000052FB 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 30280 00005300 16                              PUSH	SS
 30281 00005301 07                              POP	ES
 30282                                      
 30283                                  	; Wango!!! We may need to free some user state info... In 
 30284                                  	; particular, we may have locked down a JFN for a user and he may 
 30285                                  	; NEVER return to us. Thus,we need to free it here and then 
 30286                                  	; reallocate it when we come back.
 30287                                  
 30288 00005302 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30289 00005308 740C                    	JZ	short _NoFree
 30290 0000530A 1E                      	push	ds
 30291 0000530B 56                      	push	si
 30292 0000530C 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30293 00005311 C604FF                  	MOV	BYTE [SI],0FFH
 30294 00005314 5E                      	pop	si
 30295 00005315 1F                      	pop	ds
 30296                                  
 30297                                  _NoFree:
 30298 00005316 FA                      	CLI
 30299                                  					; Prepare to play with stack
 30300 00005317 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30301 0000531C 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 30302                                  
 30303                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30304                                  
 30305                                  	;; Extended Open hooks
 30306                                  					; AN000;IFS.I24 error disabled
 30307                                  	;test	byte [ss:EXTOPEN_ON],2
 30308 00005321 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 30309 00005327 7404                    	JZ	short i24yes		; AN000;IFS.no
 30310                                  faili24:				; AN000;
 30311 00005329 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30312 0000532B EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30313                                  i24yes: 				; AN000;
 30314                                  	;; Extended Open hooks
 30315                                  
 30316 0000532D 368E16[8605]                    MOV     SS,[SS:USER_SS]
 30317 00005332 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 30318                                  
 30319                                  	;;int	24h	
 30320                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 30321                                  					; must preserve ES
 30322                                  	; 05/05/2019
 30323 00005337 26803E[F211]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 30324 0000533D 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30325 0000533F CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30326                                  					; must preserve ES
 30327 00005341 EB05                    	jmp	short criterr_ret_addr
 30328                                  
 30329                                  do_low_int24:
 30330                                  	; 05/05/2019
 30331                                  	; MSDOS 6.0
 30332 00005343 2EFF1E[2A50]            	call    far [cs:LowInt24Addr]
 30333                                  criterr_ret_addr:
 30334 00005348 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 30335 0000534D 268C16[8605]                    MOV     [ES:USER_SS],SS
 30336 00005352 8CC5                            MOV     BP,ES
 30337 00005354 8ED5                            MOV     SS,BP
 30338                                  passi24:
 30339 00005356 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 30340 0000535B 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 30341 00005360 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 30342 00005366 FB                              STI
 30343                                  FailRet:
 30344 00005367 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 30345                                  	
 30346                                  	; 08/07/2018
 30347                                  
 30348                                  	; Triage the user's reply.
 30349                                  
 30350 0000536C 3C01                    	CMP	AL,1
 30351 0000536E 723D                    	JB	short CheckIgnore	; 0 => ignore
 30352 00005370 7445                    	JZ	short CheckRetry	; 1 => retry
 30353 00005372 3C03                    	CMP	AL,3			; 3 => fail
 30354 00005374 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30355                                  
 30356                                  	; The reply was fail. See if we are allowed to fail.
 30357                                  
 30358                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30359                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30360                                  	;test	byte [ss:ALLOWED],8
 30361 00005376 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30362 0000537C 7443                    	jz	short DoAbort	; No, do abort
 30363                                  DoFail:
 30364 0000537E B003                    	MOV	AL,3		; just in case...
 30365                                  				; AN000;EO. I24 error disabled
 30366                                  	; 05/05/2019
 30367                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30368 00005380 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30369 00005386 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30370                                  	
 30371 00005388 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30372                                  CleanUp:
 30373 0000538D 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30374 00005393 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30375                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30376                                  	;jnz	short CleanUp2
 30377                                  	;retn
 30378                                  	; 17/12/2022
 30379 00005399 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30380                                  CleanUp2:
 30381 0000539B 1E                      	push	ds
 30382 0000539C 56                      	push	si
 30383 0000539D 50                      	push	ax
 30384 0000539E 36A1[AA05]              	MOV	AX,[ss:SFN]
 30385 000053A2 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30386 000053A7 8804                    	MOV	[SI],AL
 30387 000053A9 58                      	pop	ax
 30388 000053AA 5E                      	pop	si
 30389 000053AB 1F                      	pop	ds
 30390                                  Cleanup_retn:
 30391 000053AC C3                      	retn
 30392                                  
 30393                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30394                                  
 30395                                  CheckIgnore:
 30396                                  	;test	byte [ss:ALLOWED],20h
 30397 000053AD 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30398 000053B3 74C9                    	jz	short DoFail			 ; No, do fail
 30399 000053B5 EBD6                    	jmp	short CleanUp
 30400                                  
 30401                                  	; The reply was RETRY. See if we are allowed to retry.
 30402                                  
 30403                                  CheckRetry:
 30404                                  	;test	byte [ss:ALLOWED],10h
 30405 000053B7 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30406 000053BD 74BF                    	jz	short DoFail			; No, do fail
 30407 000053BF EBCC                    	JMP	short CleanUp
 30408                                  
 30409                                  	; The reply was ABORT.
 30410                                  DoAbort:
 30411 000053C1 16                      	push	ss
 30412 000053C2 1F                      	pop	ds
 30413                                  
 30414 000053C3 803E[5703]00            	CMP	byte [CONSWAP],0
 30415 000053C8 7403                    	JZ	short NOSWAP2
 30416 000053CA E875DE                  	call	SWAPBACK
 30417                                  NOSWAP2:
 30418                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30419                                  	; turn this abort into a fail.
 30420                                  
 30421                                  	;test	[fAborting],0FFh
 30422                                  	;jnz	short DoFail
 30423                                  
 30424 000053CD 803E[5903]00            	cmp	byte [fAborting],0
 30425 000053D2 75AA                    	JNZ	short DoFail
 30426                                  
 30427                                  	; Set return code
 30428                                  
 30429 000053D4 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30430 000053D9 30C0                    	XOR	AL,AL
 30431                                  
 30432                                  	; we are truly aborting the process. Go restore information from 
 30433                                  	; the PDB as necessary.
 30434                                  
 30435 000053DB E9850D                  	jmp	exit_inner
 30436                                  
 30437                                  ;** --------------------------------------------------------------------------
 30438                                  ;
 30439                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30440                                  ; different, then an old-style return is performed. If they are the same,
 30441                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30442                                  ; the source of the terminate addresses.
 30443                                  ;
 30444                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30445                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30446                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30447                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30448                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30449                                  ; operation. In essence, we dis-allow the abort response.
 30450                                  ;
 30451                                  ; output:   none.
 30452                                  ; ----------------------------------------------------------------------------
 30453                                  
 30454                                  	;entry	reset_environment
 30455                                  	
 30456                                  reset_environment:
 30457                                  	; 30/07/2018 - Retro DOS v3.0
 30458                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30459                                  
 30460                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30461                                  
 30462 000053DE 1E                      	PUSH	DS			; save PDB of process
 30463                                  
 30464                                  	; There are no critical sections in force. Although we may enter 
 30465                                  	; here with critical sections locked down, they are no longer 
 30466                                  	; relevant. We may safely free all allocated resources.
 30467                                  
 30468 000053DF B482                    	MOV	AH,82h
 30469                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30470                                  	;int	2Ah 	
 30471 000053E1 CD2A                    	INT	int_IBM
 30472                                  
 30473                                  					; SS override
 30474 000053E3 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30475                                  
 30476                                  					; DOS 4.00 doesn't need it
 30477                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30478                                  					; Allow REDIR to clear some stuff
 30479                                  					; On process exit.
 30480 000053E9 B82211                  	mov     ax, 1122h
 30481 000053EC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30482                                  			; SS = DOS CS
 30483                                  	;mov	al,22h	
 30484 000053EE B022                    	MOV	AL,int_terminate
 30485 000053F0 E8A1BA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30486                                  
 30487 000053F3 59                      	POP	CX			; get ThisPDB
 30488 000053F4 06                      	push	es
 30489 000053F5 53                      	push	bx			; save return address
 30490                                  
 30491 000053F6 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30492 000053FB 8EDB                    	MOV	DS,BX
 30493 000053FD A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30494                                  
 30495                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30496                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30497                                  	; is not Exit_keep_process
 30498                                  	
 30499 00005400 39D8                    	CMP	AX,BX
 30500 00005402 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30501 00005404 39CB                    	CMP	BX,CX
 30502 00005406 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30503 00005408 50                      	PUSH	AX			; save parent
 30504                                  
 30505                                  					; SS override
 30506                                  	;cmp	byte [SS:EXIT_TYPE],3
 30507 00005409 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30508 0000540F 7406                    	JZ	short reset_to_parent 	; keeping this process
 30509                                  
 30510                                  	; We are truly removing a process. Free all allocation blocks 
 30511                                  	; belonging to this PDB
 30512                                  
 30513                                  	;invoke	arena_free_process
 30514 00005411 E8870D                  	call	arena_free_process
 30515                                  
 30516                                  	; Kill off remainder of this process. Close file handles and signal 
 30517                                  	; to relevant network folks that this process is dead. Remember that 
 30518                                  	; CurrentPDB is STILL the current process!
 30519                                  
 30520                                  	;invoke	DOS_ABORT
 30521 00005414 E845DA                  	call	DOS_ABORT
 30522                                  
 30523                                  reset_to_parent:
 30524                                  					; SS override
 30525 00005417 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30526                                  
 30527                                  reset_return:				; come here for normal return
 30528                                  	;Context DS			; DS is used to refer to DOSDATA  
 30529 0000541C 16                      	push	ss
 30530 0000541D 1F                      	pop	ds	
 30531                                  
 30532 0000541E B0FF                    	MOV	AL,-1
 30533                                  
 30534                                  	; make sure that everything is clean In this case ignore any errors, 
 30535                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30536                                  
 30537                                  	;EnterCrit critDisk
 30538 00005420 E8EABE                  	call	ECritDisk
 30539                                  	;invoke	FLUSHBUF
 30540 00005423 E8A505                  	call	FLUSHBUF
 30541                                  	;LeaveCrit critDisk
 30542 00005426 E8FFBE                  	call	LCritDisk
 30543                                  
 30544                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30545                                  
 30546 00005429 E883F7                  	call	CHECK_VIRT_OPEN
 30547 0000542C FA                      	CLI
 30548 0000542D C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30549 00005432 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30550 00005437 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30551 0000543C 8F06[8005]              	POP	WORD [EXITHOLD]
 30552 00005440 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30553                                  
 30554                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30555                                  
 30556 00005444 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30557 00005448 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30558 0000544C 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30559                                  
 30560 00005450 E8F8AF                  	call	restore_world
 30561                                  
 30562                                  	; 05/05/2019
 30563 00005453 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30564                                  
 30565                                  	; MSDOS 6.0
 30566 00005454 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30567 00005455 8CD8                    	mov	ax,ds			; and not on stack.
 30568                                  	;getdseg <ds>			; ds -> dosdata
 30569 00005457 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30570 0000545C A3[0A0D]                	mov	[TEMPSEG],ax
 30571 0000545F 58                      	pop	ax
 30572                                  					; set up ds to DOSDATA
 30573                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30574 00005460 A3[8405]                	mov	[USER_SP],ax
 30575                                  
 30576 00005463 58                      	POP	AX			; suck off CS:IP of interrupt...
 30577 00005464 58                      	POP	AX
 30578 00005465 58                      	POP	AX
 30579                                  
 30580                                  ; M011 : BEGIN
 30581                                  
 30582                                  	; MSDOS 3.3
 30583                                  ;	MOV	AX,0F202h	; STI
 30584                                  
 30585                                  	; MSDOS 6.0
 30586 00005466 9F                      	LAHF
 30587 00005467 86E0                    	XCHG	AH,AL
 30588 00005469 2402                    	AND	AL,2
 30589 0000546B B4F2                    	MOV	AH,0F2h
 30590                                  
 30591                                  ; M011 : END
 30592                                  
 30593                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30594 0000546D 50                      	PUSH	AX
 30595                                   
 30596                                  	;PUSH	word [CS:EXITHOLD+2]
 30597                                  	;PUSH	word [CS:EXITHOLD]
 30598                                  	
 30599                                  	; MSDOS 6.0
 30600 0000546E FF36[8205]              	PUSH	word [EXITHOLD+2]
 30601 00005472 FF36[8005]              	PUSH	word [EXITHOLD]
 30602                                  
 30603                                  	;MOV	AX,[CS:USER_SP]
 30604                                  
 30605                                  	; MSDOS 6.0
 30606 00005476 A1[8405]                	MOV	AX,[USER_SP]
 30607 00005479 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30608                                  
 30609 0000547D CF                      	IRET			; Long return back to user terminate address
 30610                                  
 30611                                  ;---------------------------------------------------------------------------
 30612                                  ;
 30613                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30614                                  ;
 30615                                  ; This routine handles extended error codes.
 30616                                  ; Input : DI = error code from device
 30617                                  ; Output: All EXTERR fields are set
 30618                                  ;
 30619                                  ;--------------------------------------------------------------------------
 30620                                  
 30621                                  SET_I24_EXTENDED_ERROR:
 30622 0000547E 50                      	PUSH	AX
 30623                                  					; ErrMap24End is in DOSDATA
 30624 0000547F B8[BB0E]                	MOV	AX,ErrMap24End
 30625 00005482 2D[AB0E]                	SUB	AX,ErrMap24
 30626                                  					; Change to dosdata to access 
 30627                                  					; ErrMap24 and EXTERR -SR
 30628                                  	; 05/05/2019 - Retro DOS v4.0
 30629                                  	
 30630                                  	; MSDOS 6.0
 30631 00005485 1E                      	push	ds
 30632                                  	;getdseg <ds>			; ds ->dosdata
 30633 00005486 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30634                                  
 30635                                  	; AX is the index of the first unavailable error. Do not translate 
 30636                                  	; if greater or equal to AX.
 30637                                  
 30638 0000548B 39C7                    	CMP	DI,AX
 30639 0000548D 89F8                    	MOV	AX,DI
 30640 0000548F 7306                    	JAE	short NoTrans
 30641                                  
 30642                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30643 00005491 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30644 00005495 30E4                    	XOR	AH,AH
 30645                                  NoTrans:
 30646                                  	;MOV	[CS:EXTERR],AX
 30647 00005497 A3[2403]                	mov	[EXTERR],AX
 30648 0000549A 1F                      	pop	ds
 30649                                  	;assume	ds:nothing
 30650 0000549B 58                      	POP	AX
 30651                                  
 30652                                  	; Now Extended error is set correctly. Translate it to get correct 
 30653                                  	; error locus class and recommended action.
 30654                                  
 30655 0000549C 56                      	PUSH	SI
 30656                                  					; ERR_TABLE_24 is in DOSCODE 
 30657 0000549D BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30658 000054A0 E8D7B1                  	call	CAL_LK			; Set other extended error fields
 30659 000054A3 5E                      	POP	SI
 30660 000054A4 C3                      	retn
 30661                                  
 30662                                  ;============================================================================
 30663                                  ; FAT.ASM, MSDOS 6.0, 1991
 30664                                  ;============================================================================
 30665                                  ; 30/07/2018 - Retro DOS v3.0
 30666                                  ; 20/05/2019 - Retro DOS v4.0
 30667                                  
 30668                                  ;	TITLE	FAT - FAT maintenance routines
 30669                                  ;	NAME	FAT
 30670                                  
 30671                                  ;**	FAT.ASM
 30672                                  ;----------------------------------------------------------------------------
 30673                                  ;	Low level local device routines for performing disk change sequence,
 30674                                  ;	setting cluster validity, and manipulating the FAT
 30675                                  ;
 30676                                  ;	IsEof
 30677                                  ;	UNPACK
 30678                                  ;	PACK
 30679                                  ;	MAPCLUSTER
 30680                                  ;	FATREAD_SFT
 30681                                  ;	FATREAD_CDS
 30682                                  ;	FAT_operation
 30683                                  ;
 30684                                  ;	Revision history:
 30685                                  ;
 30686                                  ;	  AN000  version Jan. 1988
 30687                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30688                                  ;
 30689                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30690                                  ;	       from CL0FATENTRY rather than disk.
 30691                                  
 30692                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30693                                  
 30694                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30695                                  ;----------------------------------------------------------------------------
 30696                                  ;
 30697                                  ; Procedure Name : IsEOF
 30698                                  ;
 30699                                  ; IsEOF - check the fat value in BX for eof.
 30700                                  ;
 30701                                  ;   Inputs:	ES:BP point to DPB
 30702                                  ;		BX has fat value
 30703                                  ;   Outputs:	JAE eof
 30704                                  ;   Registers modified: none
 30705                                  ;
 30706                                  ;---------------------------------------------------------------------------
 30707                                  
 30708                                  IsEOF:
 30709                                  	;cmp	word [es:bp+0Dh],0FF6h
 30710 000054A5 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30711 000054AB 730B                    	JAE	short EOF16			; yes, check for eof there
 30712                                  
 30713                                  ;J.K. 8/27/86
 30714                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30715                                  ;of any media that has "F0"(Other) as a MediaByte.
 30716                                  ;Hopely, this does not create any side effect for those who may use any value
 30717                                  ;other than "FF8-FFF" as an EOF for their own file.
 30718                                  
 30719 000054AD 81FBF00F                	cmp	bx,0FF0h
 30720 000054B1 7404                    	je	short IsEOF_other
 30721                                  
 30722 000054B3 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30723                                  IsEOF_other:
 30724 000054B7 C3                      	retn
 30725                                  EOF16:
 30726 000054B8 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30727 000054BB C3                      	retn
 30728                                  
 30729                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30730                                  
 30731                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30732                                  ;---------------------------------------------------------------------------
 30733                                  ;
 30734                                  ; Procedur Name : UNPACK
 30735                                  ;
 30736                                  ; Inputs:
 30737                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30738                                  ;	ES:BP = Base of drive parameters
 30739                                  ; Outputs:
 30740                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30741                                  ;	Zero set means DI=0 (free cluster)
 30742                                  ;	Carry set means error (currently user FAILed to I 24)
 30743                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30744                                  ;
 30745                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30746                                  ;
 30747                                  ;----------------------------------------------------------------------------
 30748                                  	
 30749                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30750                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30751                                  
 30752                                  	; 20/05/2019 - Retro DOS v4.0
 30753                                  UNPACK:
 30754                                  	; MSDOS 6.0			; M014 - Start
 30755 000054BC 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30756 000054BE 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30757 000054C0 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30758 000054C4 09FF                    	or	di,di 			; return z if di=0
 30759 000054C6 C3                      	retn				; done
 30760                                  up_cont:				; M014 - End
 30761                                  	; MSDOS 3.3 & MSDOS 6.0
 30762                                  	;cmp	bx,[es:bp+0Dh]
 30763 000054C7 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30764 000054CB 7726                    	JA	short HURTFAT
 30765 000054CD E8D600                  	CALL	MAPCLUSTER
 30766 000054D0 721E                    	jc	short _DoContext
 30767 000054D2 8B3D                    	MOV	DI,[DI]
 30768 000054D4 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30769 000054D6 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30770 000054DA 81FEF60F                	CMP	SI,4096-10
 30771 000054DE 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30772 000054E0 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30773 000054E2 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30774                                  High12:
 30775 000054E4 D1EF                    	SHR	DI,1
 30776 000054E6 D1EF                    	SHR	DI,1
 30777 000054E8 D1EF                    	SHR	DI,1
 30778 000054EA D1EF                    	SHR	DI,1
 30779                                  Unpack12:
 30780 000054EC 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30781                                  _DoContext:
 30782 000054F0 16                      	PUSH	SS
 30783 000054F1 1F                      	POP	DS
 30784 000054F2 C3                      	retn
 30785                                  HURTFAT:
 30786                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30787                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30788 000054F3 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30789 000054F9 50                      	PUSH	AX
 30790 000054FA B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30791                                  
 30792                                  ;hkn; SS override
 30793 000054FC 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30794                                  ;
 30795                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30796                                  ;
 30797 00005502 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30798 00005505 E8C8FD                  	call	FATAL
 30799 00005508 3C03                    	CMP	AL,3
 30800 0000550A F8                      	CLC
 30801 0000550B 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30802 0000550D F9                      	STC				; User said FAIL
 30803                                  OKU_RET:
 30804 0000550E 58                      	POP	AX
 30805                                  hurtfat_retn:
 30806 0000550F C3                      	retn
 30807                                  
 30808                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30809                                  
 30810                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30811                                  ;----------------------------------------------------------------------------
 30812                                  ;
 30813                                  ; Procedure Name : PACK
 30814                                  ;
 30815                                  ; Inputs:
 30816                                  ;	BX = Cluster number
 30817                                  ;	DX = Data
 30818                                  ;	ES:BP = Pointer to drive DPB
 30819                                  ; Outputs:
 30820                                  ;	The data is stored in the FAT at the given cluster.
 30821                                  ;	SI,DX,DI all destroyed
 30822                                  ;	Carry set means error (currently user FAILed to I 24)
 30823                                  ;	No other registers affected
 30824                                  ;
 30825                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30826                                  ;
 30827                                  ;---------------------------------------------------------------------------
 30828                                  
 30829                                  	; 02/01/2024
 30830                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30831                                  	; 20/05/2019 - Retro DOS v4.0
 30832                                  PACK:
 30833                                  	; MSDOS 6.0			; M014 - start
 30834 00005510 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30835 00005512 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30836 00005514 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30837 00005518 C3                      	retn				; done
 30838                                  p_cont:					; M014 - end
 30839                                  	; MSDOS 3.3 & MSDOS 6.0
 30840 00005519 E88A00                  	CALL	MAPCLUSTER
 30841 0000551C 72D2                    	JC	short _DoContext
 30842 0000551E 8B35                    	MOV	SI,[DI]
 30843 00005520 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30844 00005522 51                      	PUSH	CX			; move data to upper 12 bits
 30845 00005523 B104                    	MOV	CL,4
 30846 00005525 D3E2                    	SHL	DX,CL
 30847 00005527 59                      	POP	CX
 30848 00005528 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30849 0000552B EB14                    	JMP	SHORT PACKIN
 30850                                  ALIGNED:
 30851                                  	;cmp	word [es:bp+0Dh],0FF6h
 30852 0000552D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30853 00005533 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30854 00005535 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30855 00005539 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30856 0000553D EB02                    	JMP	SHORT PACKIN		; MZ go store
 30857                                  Pack16:
 30858 0000553F 31F6                    	XOR	SI,SI			; MZ no original data
 30859                                  PACKIN:
 30860 00005541 09D6                    	OR	SI,DX
 30861 00005543 8935                    	MOV	[DI],SI
 30862                                  
 30863                                  ;hkn; SS override
 30864 00005545 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30865                                  	; MSDOS 6.0
 30866 0000554A F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30867                                  					;LB. if already dirty		  ;AN000;
 30868 0000554E 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30869                                  	; 10/06/2019
 30870 00005550 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30871                                  	
 30872                                  	;or	byte [si+5],40h
 30873 00005553 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30874                                  yesdirty11:				;LB.				;AN000;
 30875                                  ;hkn; SS override
 30876 00005557 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30877                                  ;hkn; SS is DOSDATA
 30878 0000555D 16                      	push	ss
 30879 0000555E 1F                      	pop	ds
 30880 0000555F 74AE                    	jz	short hurtfat_retn	; Carry clear
 30881 00005561 50                      	PUSH	AX
 30882 00005562 53                      	PUSH	BX
 30883 00005563 51                      	PUSH	CX
 30884 00005564 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30885 00005567 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30886                                  	;;add	si,16 ; MSDOS 3.3
 30887                                  	;add	si,20 ; MSDOS 6.0
 30888 0000556B 83C614                  	ADD	SI,BUFINSIZ
 30889 0000556E 8824                    	MOV	[SI],AH
 30890                                  ;hkn; SS is DOSDATA
 30891                                  	;Context DS
 30892 00005570 16                      	push	ss
 30893 00005571 1F                      	pop	ds
 30894                                  	
 30895 00005572 50                      	PUSH	AX
 30896                                  	
 30897                                  	; MSDOS 6.0
 30898 00005573 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30899 00005577 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30900                                  
 30901                                  	; MSDOS 3.3 & MSDOS 6.0
 30902 0000557B 8B16[9005]              	MOV	DX,[CLUSSEC]
 30903                                  
 30904                                  	;MOV	SI,1	  ; *
 30905                                  	;XOR	AL,AL     ; *
 30906                                  	;call	GETBUFFRB ; *
 30907                                  	; 22/09/2023
 30908 0000557F E83E03                  	call	GETBUFFRA ; *
 30909                                  
 30910 00005582 58                      	POP	AX
 30911 00005583 721B                    	JC	short POPP_RET
 30912 00005585 C53E[E205]              	LDS	DI,[CURBUF]
 30913                                  	
 30914                                  	; MSDOS 6.0
 30915 00005589 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30916                                  					;LB. if already dirty		  ;AN000;
 30917 0000558D 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30918 0000558F E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30919                                  	
 30920                                  	;or	byte [di+5],40h
 30921 00005592 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30922                                  yesdirty12:
 30923                                  	;;add	di,16
 30924                                  	;add	di,20 ; MSDOS 6.0
 30925                                  	; 02/01/2024
 30926                                  	;ADD	DI,BUFINSIZ
 30927                                  	;DEC	DI
 30928 00005596 83C713                  	add	di,BUFINSIZ-1 ; 19
 30929                                  
 30930                                  	;add	di,[es:bp+2]
 30931 00005599 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30932 0000559D 8805                    	MOV	[DI],AL
 30933 0000559F F8                      	CLC
 30934                                  POPP_RET:
 30935 000055A0 16                      	PUSH	SS
 30936 000055A1 1F                      	POP	DS
 30937 000055A2 59                      	POP	CX
 30938 000055A3 5B                      	POP	BX
 30939 000055A4 58                      	POP	AX
 30940 000055A5 C3                      	retn
 30941                                  
 30942                                  ; 31/07/2018 - Retro DOS v3.0
 30943                                  
 30944                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30945                                  ;---------------------------------------------------------------------------
 30946                                  ;
 30947                                  ; Procedure Name : MAPCLUSTER
 30948                                  ;
 30949                                  ; Inputs:
 30950                                  ;	ES:BP Points to DPB
 30951                                  ;	BX Is cluster number
 30952                                  ; Function:
 30953                                  ;	Get a pointer to the cluster
 30954                                  ; Outputs:
 30955                                  ;	DS:DI Points to contents of FAT for given cluster
 30956                                  ;	DS:SI Points to start of buffer
 30957                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30958                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30959                                  ;	Carry set if failed.
 30960                                  ; SI is destroyed.
 30961                                  ;
 30962                                  ;---------------------------------------------------------------------------
 30963                                  
 30964                                  	; 20/05/2019 - Retro DOS v4.0
 30965                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30966                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30967                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30968                                  
 30969                                  MAPCLUSTER:
 30970                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30971 000055A6 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30972                                  	;SAVE	<AX,BX,CX,DX>
 30973 000055AB 50                      	push	ax
 30974 000055AC 53                      	push	bx
 30975 000055AD 51                      	push	cx
 30976 000055AE 52                      	push	dx
 30977 000055AF 89D8                    	MOV	AX,BX			; AX = BX
 30978 000055B1 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30979 000055B7 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30980 000055B9 D1E8                    	SHR	AX,1			; AX = BX/2
 30981                                  Map16:	
 30982                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30983 000055BB 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30984                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30985 000055BD 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30986 000055BF 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30987 000055C1 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30988                                  
 30989                                  ;IF FastDiv
 30990                                  ;
 30991                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30992                                  ; case and apply a really fast algorithm to get the desired results
 30993                                  ;
 30994                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30995                                  ; Fast method takes 39+20*4=119
 30996                                  ;
 30997                                  ; This saves a bunch.
 30998                                  
 30999 000055C5 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31000 000055C9 7510                    	jne	short _DoDiv		; 4  for no jump
 31001 000055CB 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31002 000055CD 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31003 000055D1 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31004                                  	; MDOS 3.3
 31005                                  	;shr	al,1	
 31006                                  	; MDOS 6.0
 31007 000055D3 D1EF                    	shr	di,1			; 2
 31008 000055D5 D0D8                    	rcr	al,1			; 2
 31009                                  	; MDOS 3.3 (& MSDOS 6.0)
 31010 000055D7 30E4                    	xor	ah,ah			; 3
 31011 000055D9 EB04                    	jmp	short DivDone		; 16
 31012                                  _DoDiv:
 31013                                  ;ENDIF
 31014                                  	; MSDOS 3.3
 31015                                  	;xor	dx,dx
 31016                                  	; MSDOS 6.0
 31017 000055DB 89FA                    	mov	dx,di			; 2
 31018                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31019 000055DD F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31020                                  ;IF FastDiv
 31021                                  DivDone:
 31022                                  ;ENDIF
 31023                                  	;add	ax,[es:bp+6]
 31024 000055DF 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31025 000055E3 49                      	DEC	CX			; CX is sector size - 1
 31026                                  	;SAVE	<AX,DX,CX>
 31027 000055E4 50                      	push	ax
 31028 000055E5 52                      	push	dx
 31029 000055E6 51                      	push	cx
 31030 000055E7 89C2                    	MOV	DX,AX
 31031                                  
 31032                                  	; MSDOS 6.0
 31033                                  	; 22/09/2023
 31034                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31035                                  	;
 31036                                  	; MDOS 3.3 (& MSDOS 6.0)
 31037                                  	;XOR	AL,AL	   ; *
 31038                                  	;MOV	SI,1	   ; *
 31039                                  	;;invoke GETBUFFRB ; *
 31040                                  	;call	GETBUFFRB  ; *
 31041                                  	; 22/09/2023
 31042 000055E9 E8CE02                  	call	GETBUFFRC  ; *!
 31043                                  
 31044                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31045 000055EC 59                      	pop	cx
 31046 000055ED 58                      	pop	ax
 31047 000055EE 5A                      	pop	dx
 31048 000055EF 724C                    	JC	short MAP_POP
 31049                                  
 31050 000055F1 C536[E205]              	LDS	SI,[CURBUF]
 31051                                  	;;lea	di,[si+16]
 31052                                  	;lea	di,[si+20] ; MSDOS 6.0
 31053 000055F5 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31054 000055F8 01C7                    	ADD	DI,AX
 31055 000055FA 39C8                    	CMP	AX,CX
 31056 000055FC 752C                    	JNZ	short MAPRET
 31057 000055FE 8A05                    	MOV	AL,[DI]
 31058                                  	;Context DS		 	;hkn; SS is DOSDATA
 31059 00005600 16                      	push	ss
 31060 00005601 1F                      	pop	ds	
 31061 00005602 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31062 00005606 A2[8E05]                	MOV	[CLUSSAVE],AL
 31063 00005609 8916[9005]              	MOV	[CLUSSEC],DX
 31064                                  	; MSDOS 6.0
 31065 0000560D C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31066 00005613 42                      	INC	DX
 31067                                  
 31068                                  	; 22/09/2023
 31069                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31070                                  	;
 31071                                  	; MDOS 3.3 (& MSDOS 6.0)
 31072                                  	;XOR	AL,AL	   ; *
 31073                                  	;MOV	SI,1	   ; *
 31074                                  	;;invoke GETBUFFRB ; *
 31075                                  	;call	GETBUFFRB  ; *
 31076                                  	; 22/09/2023
 31077 00005614 E8A302                  	call	GETBUFFRC  ; *!
 31078 00005617 7224                    	JC	short MAP_POP
 31079                                  
 31080 00005619 C536[E205]              	LDS	SI,[CURBUF]
 31081 0000561D 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31082 00005620 8A05                    	MOV	AL,[DI]
 31083                                  	;Context DS			;hkn; SS is DOSDATA
 31084 00005622 16                      	push	ss
 31085 00005623 1F                      	pop	ds
 31086 00005624 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31087                                  
 31088                                  ;hkn; CLUSSAVE is in DOSDATA
 31089 00005627 BF[8E05]                	MOV	DI,CLUSSAVE
 31090                                  MAPRET:
 31091                                  	;RESTORE <DX,CX,BX>
 31092 0000562A 5A                      	pop	dx
 31093 0000562B 59                      	pop	cx
 31094 0000562C 5B                      	pop	bx
 31095 0000562D 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31096 0000562F 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31097 00005635 7302                    	JAE	short MapSet		; MZ no, set flags
 31098 00005637 89D8                    	MOV	AX,BX
 31099                                  MapSet:
 31100 00005639 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31101                                  	;RESTORE <AX>
 31102 0000563B 58                      	pop	ax
 31103 0000563C C3                      	retn
 31104                                  
 31105                                  MAP_POP:
 31106                                  	;RESTORE <DX,CX,BX,AX>
 31107 0000563D 5A                      	pop	dx
 31108 0000563E 59                      	pop	cx
 31109 0000563F 5B                      	pop	bx
 31110 00005640 58                      	pop	ax
 31111                                  fatread_sft_retn: ; 17/12/2022
 31112 00005641 C3                      	retn
 31113                                  
 31114                                  ; 20/05/2019 - Retro DOS v4.0
 31115                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31116                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31117                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31118                                  
 31119                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31120                                  ;----------------------------------------------------------------------------
 31121                                  ;
 31122                                  ; Procedure Name : FATREAD_SFT
 31123                                  ;
 31124                                  ; Inputs:
 31125                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31126                                  ;		giving a NET SFT will produce system crashing results).
 31127                                  ;	DS DOSDATA
 31128                                  ; Function:
 31129                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31130                                  ;	if disk changed.
 31131                                  ;	In other respects, same as FATREAD_CDS.
 31132                                  ;	(note ES:DI destroyed!)
 31133                                  ; Outputs:
 31134                                  ;	Carry set if error (currently user FAILed to I 24)
 31135                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31136                                  ;	as far as invalidating curdir_ID is concerned.
 31137                                  ;	Since getting a true disk changed on this call is a screw up
 31138                                  ;	anyway, that's the way it goes.
 31139                                  ;
 31140                                  ;---------------------------------------------------------------------------
 31141                                  
 31142                                  FATREAD_SFT:
 31143 00005642 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31144                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31145                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31146                                  	; 15/12/2022
 31147 00005646 268A4600                	mov	AL,[ES:BP]
 31148 0000564A A2[7605]                	MOV	[THISDRV],AL
 31149 0000564D E8DEAF                  	call	GOTDPB			;Set THISDPB
 31150                                  	;CALL	FAT_GOT_DPB
 31151                                  	; 17/12/2022
 31152 00005650 EB78                    	jmp	FAT_GOT_DPB
 31153                                  ;fatread_sft_retn:
 31154                                  	;retn
 31155                                  
 31156                                  ;----------------------------------------------------------------------------
 31157                                  ;
 31158                                  ; Procedure Name : FATREAD_CDS
 31159                                  ;
 31160                                  ; Inputs:
 31161                                  ;	DS:DOSDATA
 31162                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31163                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31164                                  ; Function:
 31165                                  ;	If disk may have been changed, media is determined and buffers are
 31166                                  ;	flagged invalid. If not, no action is taken.
 31167                                  ; Outputs:
 31168                                  ;	ES:BP = Drive parameter block
 31169                                  ;	THISDPB = ES:BP
 31170                                  ;	THISDRV set
 31171                                  ;	Carry set if error (currently user FAILed to I 24)
 31172                                  ; DS preserved , all other registers destroyed
 31173                                  ;
 31174                                  ;---------------------------------------------------------------------------
 31175                                  
 31176                                  	; 20/05/2019 - Retro DOS v4.0
 31177                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31178                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31179                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31180                                  
 31181                                  FATREAD_CDS:
 31182 00005652 06                      	PUSH	ES
 31183 00005653 57                      	PUSH	DI
 31184                                  	;les	bp,[es:di+45h]
 31185 00005654 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31186                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31187                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31188                                  	; 15/12/2022
 31189 00005658 268A4600                	mov	AL,[ES:BP]
 31190 0000565C A2[7605]                	MOV	[THISDRV],AL
 31191 0000565F E8CCAF                  	call	GOTDPB			;Set THISDPB
 31192 00005662 E86500                  	CALL	FAT_GOT_DPB
 31193 00005665 5F                      	POP	DI			;Get back CDS pointer
 31194 00005666 07                      	POP	ES
 31195 00005667 72D8                    	jc	short fatread_sft_retn
 31196 00005669 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31197                                  
 31198                                  ;	Media changed. We now need to find all CDS structures which use this
 31199                                  ;	DPB and invalidate their ID pointers.
 31200                                  
 31201                                  MED_CHANGE:
 31202 0000566B 31C0                    	XOR	AX,AX
 31203 0000566D 48                      	DEC	AX			; AX = -1
 31204 0000566E 1E                      	PUSH	DS
 31205 0000566F 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31206 00005673 30ED                    	XOR	CH,CH			; CX is number of structures
 31207                                  	;lds	si,[es:di+45h]
 31208 00005675 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31209                                  
 31210                                  ;hkn; SS override
 31211                                  
 31212                                  ;	Find all CDSs with this DevPtr
 31213                                  ;
 31214                                  ;	(ax) = -1
 31215                                  ;	(ds:si) = DevPtr
 31216                                  
 31217 00005679 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31218                                  frcd20: 
 31219                                  	;;test	word [es:di+43h],8000h
 31220                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31221 0000567E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31222 00005683 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31223                                  
 31224                                  	; MSDOS 3.3
 31225                                  	;push	es
 31226                                  	;push	di
 31227                                  	;les	di,[es:di+45h]
 31228                                  	;;les	di,[ES:DI+curdir.devptr]
 31229                                  	;call	POINTCOMP
 31230                                  	;pop	di
 31231                                  	;pop	es
 31232                                  	;jnz	short frcd25
 31233                                  
 31234                                  	; MSDOS 6.0
 31235 00005685 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31236 00005689 7512                    	jne	short frcd25		; no match
 31237 0000568B 8CDB                    	mov	bx,ds
 31238 0000568D 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31239 00005691 750A                    	jne	short frcd25		; CDS not for this drive
 31240                                  
 31241                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31242                                  	;test	[es:di+49h],ax
 31243 00005693 26854549                	test	[ES:DI+curdir.ID],AX
 31244 00005697 7404                    	JZ	short frcd25		; If root (0), leave root
 31245                                  	;mov	[es:di+49h],ax
 31246 00005699 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31247                                  frcd25:	
 31248                                  	;;add	di,81  ; MSDOS 3.3
 31249                                  	;add	di,88  ; MSDOS 6.0	 
 31250 0000569D 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31251 000056A0 E2DC                    	LOOP	frcd20
 31252 000056A2 1F                      	POP	DS
 31253                                  NO_CHANGE:
 31254 000056A3 C42E[8A05]              	LES	BP,[THISDPB]
 31255 000056A7 F8                      	CLC
 31256 000056A8 C3                      	retn
 31257                                  
 31258                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31259                                  ;----------------------------------------------------------------------------
 31260                                  ;
 31261                                  ; Procedure Name : FAT_operation
 31262                                  ;
 31263                                  ;----------------------------------------------------------------------------
 31264                                  
 31265                                  	; 03/01/2024
 31266                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31267                                  
 31268                                  FAT_operation:
 31269                                  	; 31/07/2018 - Retro DOS v3.0
 31270                                  FATERR:
 31271                                  	;mov	word [es:bp+1Eh],-1
 31272                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31273 000056A9 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31274                                  					; Err in FAT must force recomp of freespace
 31275                                  	;and	di,0FFh
 31276 000056AF 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31277                                  	;mov	byte [ALLOWED],18h
 31278 000056B3 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31279                                  	;mov	ah,1Ah
 31280 000056B8 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31281 000056BA A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31282 000056BD E814FC                  	call	FATAL1
 31283 000056C0 C42E[8A05]              	LES	BP,[THISDPB]
 31284 000056C4 3C03                    	CMP	AL,3
 31285 000056C6 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31286 000056C8 F9                      	STC				; User said FAIL
 31287 000056C9 C3                      	retn
 31288                                  
 31289                                  FAT_GOT_DPB:
 31290                                  	;Context DS			;hkn; SS is DOSDATA
 31291 000056CA 16                      	push	ss			
 31292 000056CB 1F                      	pop	ds
 31293                                  	;mov	al,0Fh
 31294 000056CC B00F                    	MOV	AL,DMEDHL
 31295                                  	;mov	ah,[es:bp+1]
 31296 000056CE 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31297 000056D2 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31298 000056D5 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31299 000056DA C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31300                                  	;;mov	al,[es:bp+16h]
 31301                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31302 000056E0 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31303 000056E4 A2[6703]                	MOV	[CALLMED],AL
 31304 000056E7 06                      	PUSH	ES
 31305 000056E8 1E                      	PUSH	DS
 31306                                  
 31307                                  ;hkn; DEVCALL is in DOSDATA
 31308 000056E9 BB[5A03]                	MOV	BX,DEVCALL
 31309                                  	;;lds	si,[es:bp+12h]
 31310                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31311 000056EC 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31312 000056F0 07                      	POP	ES			; ES:BX Points to call header
 31313 000056F1 E8FBEE                  	call	DEVIOCALL2
 31314                                  	;Context DS		 	;hkn; SS is DOSDATA
 31315 000056F4 16                      	push	ss
 31316 000056F5 1F                      	pop	ds
 31317 000056F6 07                      	POP	ES			; Restore ES:BP
 31318 000056F7 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31319                                  	;test	di,8000h
 31320                                  	;jnz	short FATERR
 31321 000056FB 09FF                    	or	di,di
 31322 000056FD 78AA                    	js	short FATERR		; have error
 31323 000056FF 30E4                    	XOR	AH,AH
 31324                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31325                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31326 00005701 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31327 00005705 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31328                                  ; See if we had changed volume id by creating one on the diskette
 31329 00005708 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31330 0000570C 7508                    	jnz	short CHECK_BYT
 31331 0000570E C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31332 00005713 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31333                                  					; new volume label.
 31334                                  CHECK_BYT:
 31335 00005716 0A26[6803]              	OR	AH,[CALLRBYT]
 31336                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31337                                  	;JMP	short NEWDSK
 31338                                  	; 17/12/2022
 31339 0000571A 7863                    	js	short NEWDSK
 31340                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31341                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31342                                  	;JMP	short NEWDSK
 31343                                  
 31344                                  CHECK_ZR:
 31345 0000571C 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31346                                  	; 24/09/2023
 31347                                  	; cf=0 (after 'or' instruction)
 31348                                  	;CLC
 31349 0000571E C3                      	retn				; If Media not changed (NZ)
 31350                                  
 31351                                  DISK_CHNG_ERR:
 31352 0000571F 06                      	PUSH	ES
 31353 00005720 55                      	PUSH	BP
 31354                                  	;;les	bp,[es:bp+12h]
 31355                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31356 00005721 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31357                                  	;;test	word [es:bp+4],800h
 31358                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31359 00005725 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31360 0000572A 5D                      	POP	BP
 31361 0000572B 07                      	POP	ES
 31362 0000572C 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31363 0000572E 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31364 0000572F 57                      	PUSH	DI
 31365 00005730 16                      	push	ss			;hkn; SS is DOSDATA
 31366 00005731 1F                      	pop	ds
 31367                                  	;mov	byte [ALLOWED],18h
 31368 00005732 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31369 00005737 06                      	PUSH	ES
 31370 00005738 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31371 0000573C 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31372 00005740 07                      	POP	ES
 31373 00005741 893E[2803]              	MOV	[EXTERRPT],DI
 31374                                  	;mov	ax,0Fh
 31375 00005745 B80F00                  	MOV	AX,error_I24_wrong_disk
 31376 00005748 C606[7505]01            	MOV	byte [READOP],1		; Write
 31377                                  	;invoke	HARDERR
 31378 0000574D E832FB                  	call	HARDERR
 31379 00005750 5F                      	POP	DI			; Get back buffer for ignore
 31380 00005751 1F                      	POP	DS
 31381 00005752 3C03                    	CMP	AL,3
 31382                                  FAIL_OPJ2:
 31383 00005754 741C                    	JZ	short FAIL_OP
 31384 00005756 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31385                                  
 31386                                  CHKBUFFDIRT:
 31387                                  	; 20/05/2019 - Retro DOS v4.0
 31388                                  
 31389                                  	; MSDOS 3.3
 31390                                  	;lds	di,[BUFFHEAD]
 31391                                  
 31392                                  	; MSDOS 6.0
 31393 00005759 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31394 0000575F 741E                    	je	short NEWDSK			; no, skip the check
 31395 00005761 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31396                                  nbuffer:
 31397                                  	;cmp	al,[di+4]
 31398 00005764 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31399 00005767 750D                    	jne	short lfnxt			; no, go for next buffer
 31400                                  	;test   byte [di+5],40h
 31401 00005769 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31402 0000576D 7407                    	jz	short lfnxt			; no, go for next buffer
 31403                                  	;Context DS
 31404 0000576F 16                      	push	ss
 31405 00005770 1F                      	pop	ds
 31406                                  	; 24/09/2023
 31407                                  	; cf=0 (after 'test' instruction)
 31408                                  	;clc
 31409 00005771 C3                      	retn
 31410                                  
 31411                                  FAIL_OP:					; This label & code is here
 31412                                  	;Context DS				;  for reachability
 31413 00005772 16                      	push	ss
 31414 00005773 1F                      	pop	ds
 31415 00005774 F9                      	STC
 31416 00005775 C3                      	retn
 31417                                  
 31418                                  lfnxt:
 31419                                  	; 15/08/2018 - Retro DOS v3.0
 31420                                  	; MSDOS 3.3
 31421                                  	;lds	di,[di]
 31422                                  
 31423                                  	; 20/05/2019 - Retro DOS v4.0
 31424 00005776 8B3D                    	mov	di,[di]
 31425                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31426                                  	
 31427                                  	; MSDOS 3.3
 31428                                  	;cmp	di,-1
 31429                                  	;jne	short nbuffer
 31430                                  	
 31431                                  	; MSDOS 6.0
 31432 00005778 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31433 0000577D 75E5                    	jne	short nbuffer			; no, check this guy also
 31434                                  
 31435                                  ; If no dirty buffers, assume Media changed
 31436                                  NEWDSK:
 31437                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31438                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31439 0000577F 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31440                                  						;  recompute
 31441                                  	; MSDOS 3.3
 31442                                  	;call	SETVISIT
 31443                                  	; MSDOS 6.0
 31444 00005785 E8CD00                  	call	 GETCURHEAD
 31445                                  nxbuffer:
 31446                                  	; MSDOS 3.3
 31447                                  	;or 	byte [di+5],20h
 31448                                  	; MSDOS 3.3 & MSDOS 6.0
 31449                                  	;cmp	[di+4],al
 31450 00005788 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31451 0000578B 7510                    	jne	short lfnxt2
 31452                                  	;test	byte [di+5],40h
 31453 0000578D F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31454 00005791 758C                    	jnz	short DISK_CHNG_ERR
 31455                                  	;mov	word [di+4],20FFh
 31456 00005793 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31457 00005798 E8CC00                  	call	SCANPLACE
 31458                                  	; MSDOS 6.0
 31459 0000579B EB02                    	jmp	short skpbuff
 31460                                  lfnxt2:
 31461 0000579D 8B3D                    	mov	di,[di]
 31462                                  	;mov	di,[di+BUFFINFO.buf_next]
 31463                                  skpbuff:
 31464                                  	; MSDOS 6.0
 31465 0000579F 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31466 000057A4 75E2                    	jne	short nxbuffer
 31467                                  
 31468 000057A6 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31469 000057AC 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31470 000057AE 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31471 000057B3 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31472 000057B5 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31473                                  ;lfnxt2:
 31474                                  	; MSDOS 3.3
 31475                                  	;call	SKIPVISIT
 31476                                  	;jnz	short nxbuffer
 31477                                  GOGETBPB:
 31478                                  	; MSDOS 3.3 & MSDOS 6.0
 31479                                  	;;lds	di,[es:bp+12h]
 31480                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31481 000057BB 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31482                                  	; 20/05/2019
 31483                                  	;test	word [di+4],2000h
 31484                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31485 000057BF F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31486 000057C3 7510                    	JNZ	short GETFREEBUF
 31487                                  	;context DS	    		;hkn; SS is DOSDATA
 31488 000057C5 16                      	push	ss
 31489 000057C6 1F                      	pop	ds
 31490 000057C7 BB0200                  	MOV	BX,2
 31491 000057CA E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31492                                  FAIL_OPJ:
 31493 000057CD 72A3                    	JC	short FAIL_OP
 31494 000057CF C53E[E205]              	LDS	DI,[CURBUF]
 31495 000057D3 EB13                    	JMP	SHORT GOTGETBUF
 31496                                  
 31497                                  GETFREEBUF:
 31498 000057D5 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31499 000057D6 55                      	PUSH	BP
 31500                                  	; MSDOS 3.3
 31501                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31502                                  	; MSDOS 6.0
 31503 000057D7 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31504                                  ;hkn; SS override
 31505 000057D9 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31506 000057DE E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31507                                  	; MSDOS 3.3 & MSDOS 6.0
 31508 000057E1 E84F02                  	call	BUFWRITE
 31509 000057E4 5D                      	POP	BP
 31510 000057E5 07                      	POP	ES
 31511                                  	;JC	short FAIL_OPJ
 31512 000057E6 728A                    	jc	short FAIL_OP
 31513                                  GOTGETBUF:
 31514                                  	;;add	di,16
 31515                                  	;add	di,20 ; MSDOS 6.0
 31516 000057E8 83C714                  	ADD	DI,BUFINSIZ
 31517                                  
 31518                                  ;hkn; SS override
 31519 000057EB 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31520                                  	;Context DS			;hkn; SS is DOSDATA
 31521 000057F0 16                      	push	ss
 31522 000057F1 1F                      	pop	ds
 31523 000057F2 893E[6803]              	MOV	[CALLXAD],DI
 31524                                  	;mov	al,16h
 31525 000057F6 B016                    	MOV	AL,DBPBHL
 31526                                  	;mov	ah,[es:bp+1]
 31527 000057F8 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31528 000057FC A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31529 000057FF C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31530 00005804 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31531                                  	;;mov	al,[es:bp+16h]
 31532                                  	;mov	al,[es:bp+17h]
 31533 0000580A 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31534 0000580E A2[6703]                	MOV	[CALLMED],AL
 31535 00005811 06                      	PUSH	ES ; **
 31536 00005812 1E                      	PUSH	DS ; *
 31537                                  	;;
 31538                                  ; 03/01/2023
 31539                                  %if 0
 31540                                  	;;push	word [es:bp+14h]
 31541                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31542                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31543                                  	;;push	word [es:bp+12h]
 31544                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31545                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31546                                  
 31547                                  ;hkn; DEVCALL is in DOSDATA
 31548                                  	MOV	BX,DEVCALL
 31549                                  	POP	SI
 31550                                  	POP	DS			; DS:SI Points to device header
 31551                                  %endif
 31552                                  	; 03/01/2024
 31553 00005813 BB[5A03]                	mov	bx,DEVCALL
 31554                                  	;lds	si,[es:bp+13h]
 31555 00005816 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31556                                  					; DS:SI Points to device header
 31557                                  	;;
 31558 0000581A 07                      	POP	ES ; *			; ES:BX Points to call header
 31559                                  	;invoke	DEVIOCALL2
 31560 0000581B E8D1ED                  	call	DEVIOCALL2
 31561 0000581E 07                      	POP	ES ; **			; Restore ES:BP
 31562                                  	;Context DS
 31563 0000581F 16                      	push	ss		 	;hkn; SS is DOSDATA
 31564 00005820 1F                      	pop	ds
 31565 00005821 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31566                                  	; MSDOS 3.3
 31567                                  	;test	di,8000h
 31568                                  	;jnz	short FATERRJ
 31569                                  	; MSDOS 6.0
 31570 00005825 09FF                    	or	di,di
 31571 00005827 7829                    	js	short FATERRJ 		; have error
 31572                                  	;;mov	al,[es:bp+16h]
 31573                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31574 00005829 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31575 0000582D C536[6C03]              	LDS	SI,[CALLBPB]
 31576                                  	;;mov	word [es:bp+1Ch],0
 31577                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31578 00005831 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31579                                  	;invoke	$SETDPB
 31580 00005837 E896B7                  	call	_$SETDPB
 31581                                  
 31582                                  ;hkn; SS override
 31583 0000583A 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31584                                  	;mov	al,[es:bp+8]
 31585 0000583F 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31586                                  
 31587                                  	; MSDOS 3.3
 31588                                  	;;mov	ah,[es:bp+0Fh]
 31589                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31590                                  	;;mov	[DI-8],ax
 31591                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31592                                  
 31593                                  	; MSDOS 6.0
 31594                                  	;mov	[di-0Ah],al
 31595 00005843 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31596                                  						;>32mb		  ;AN000;
 31597                                  	;mov	ax,[es:bp+0Fh]
 31598 00005846 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31599                                  	;mov	[di-9h],ax			  ;AC000;
 31600 0000584A 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31601                                  					;>32mb Correct buffer info ;AC000;
 31602                                  	;Context DS			;hkn; SS is DOSDATA
 31603 0000584D 16                      	push	ss
 31604 0000584E 1F                      	pop	ds
 31605 0000584F 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31606 00005851 C3                      	retn
 31607                                  
 31608                                  FATERRJ: 
 31609 00005852 E954FE                  	JMP	FATERR
 31610                                  
 31611                                  ;============================================================================
 31612                                  ; STDBUF.ASM
 31613                                  ;============================================================================
 31614                                  ; Retro DOS v2.0 - 12/03/2018
 31615                                  
 31616                                  ;
 31617                                  ; Standard buffer management for MSDOS
 31618                                  ;
 31619                                  
 31620                                  ;.xlist
 31621                                  ;.xcref
 31622                                  ;INCLUDE STDSW.ASM
 31623                                  ;.cref
 31624                                  ;.list
 31625                                  
 31626                                  ;TITLE	STDBUF - MSDOS buffer management
 31627                                  ;NAME	STDBUF
 31628                                  
 31629                                  ;INCLUDE BUF.ASM
 31630                                  
 31631                                  ;============================================================================
 31632                                  ; BUF.ASM
 31633                                  ;============================================================================
 31634                                  ; 31/07/2018 - Retro DOS v3.0
 31635                                  ; Retro DOS v2.0 - 12/03/2018
 31636                                  ;
 31637                                  ; buffer management for MSDOS
 31638                                  ;
 31639                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31640                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31641                                  ;
 31642                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31643                                  ;
 31644                                  ;SETVISIT:
 31645                                  ;	; 31/07/2018 - Retro DOS v3.0
 31646                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31647                                  ;; Inputs:
 31648                                  ;;      None
 31649                                  ;; Function:
 31650                                  ;;      Set up a scan of I/O buffers
 31651                                  ;; Outputs:
 31652                                  ;;      All visit flags = 0
 31653                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31654                                  ;;                    may cause a scan to stop in the middle leaving some
 31655                                  ;;                    visit flags set, and some not set.
 31656                                  ;;      DS:DI Points to [BUFFHEAD]
 31657                                  ;; No other registers altered
 31658                                  ;
 31659                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31660                                  ;	PUSH    AX
 31661                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31662                                  ;	;mov	al,0DFh
 31663                                  ;	mov	al,~buf_visit
 31664                                  ;SETLOOP:
 31665                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31666                                  ;	;and	[DI+5],al
 31667                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31668                                  ;       LDS     DI,[DI]
 31669                                  ;       CMP     DI,-1
 31670                                  ;       JNZ     SHORT SETLOOP
 31671                                  ;       POP     AX ; 09/09/2018
 31672                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31673                                  ;SVISIT_RETN:
 31674                                  ;       RETN
 31675                                  ;
 31676                                  ;SKIPVISIT:
 31677                                  ;	; 31/07/2018 - Retro DOS v3.0
 31678                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31679                                  ;
 31680                                  ;; Inputs:
 31681                                  ;;      DS:DI Points to a buffer
 31682                                  ;; Function:
 31683                                  ;;      Skip visited buffers
 31684                                  ;; Outputs:
 31685                                  ;;      DS:DI Points to next unvisited buffer
 31686                                  ;;      Zero is set if skip to LAST buffer
 31687                                  ;; No other registers altered
 31688                                  ;
 31689                                  ;       CMP     DI,-1
 31690                                  ;       ;retz
 31691                                  ;       JZ	SHORT SVISIT_RETN
 31692                                  ;
 31693                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31694                                  ;       ;;;retnz
 31695                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31696                                  ;
 31697                                  ;	;test	byte [di+5],20h
 31698                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31699                                  ;	JNZ	short SKIPLOOP
 31700                                  ;	
 31701                                  ;	push	ax
 31702                                  ;	or	al,1
 31703                                  ;	pop	ax
 31704                                  ;	retn	
 31705                                  ;
 31706                                  ;SKIPLOOP:
 31707                                  ;	LDS     DI,[DI]
 31708                                  ;       JMP     SHORT SKIPVISIT
 31709                                  
 31710                                  ;============================================================================
 31711                                  ; BUF.ASM, MSDOS 6.0, 1991
 31712                                  ;============================================================================
 31713                                  ; 31/07/2018 - Retro DOS v3.0
 31714                                  ; 04/05/2019 - Retro DOS v4.0
 31715                                  
 31716                                  ;	TITLE	BUF - MSDOS buffer management
 31717                                  ;	NAME	BUF
 31718                                  
 31719                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31720                                  ;
 31721                                  ;	GETCURHEAD
 31722                                  ;	ScanPlace
 31723                                  ;	PLACEBUF
 31724                                  ;	PLACEHEAD
 31725                                  ;	PointComp
 31726                                  ;	GETBUFFR
 31727                                  ;	GETBUFFRB
 31728                                  ;	FlushBuf
 31729                                  ;	BufWrite
 31730                                  ;	SET_RQ_SC_PARMS
 31731                                  ;
 31732                                  ;	Revision history:
 31733                                  ;
 31734                                  ;		AN000  version 4.00  Jan. 1988
 31735                                  ;		A004   PTM 3765 -- Disk reset failed
 31736                                  ;		M039 DB 10/17/90 - Disk write optimization
 31737                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31738                                  
 31739                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31740                                  ;----------------------------------------------------------------------------
 31741                                  ; Procedure Name : GetCurHead
 31742                                  ; Inputs:
 31743                                  ;	 No Inputs
 31744                                  ; Function:
 31745                                  ;	Returns the pointer to the first buffer in Queue
 31746                                  ;	and updates FIRST_BUFF_ADDR
 31747                                  ;       and invalidates LASTBUFFER (recency pointer)
 31748                                  ; Outputs:
 31749                                  ;	DS:DI = pointer to the first buffer in Queue
 31750                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31751                                  ;       LASTBUFFER = -1
 31752                                  ; No other registers altered
 31753                                  ;----------------------------------------------------------------------------
 31754                                  
 31755                                  ; 04/05/2019 - Retro DOS v4.0
 31756                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31757                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31758                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31759                                  
 31760                                  GETCURHEAD:
 31761 00005855 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31762 0000585A 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31763 00005861 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31764 00005866 C3                      	retn
 31765                                  
 31766                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31767                                  ;----------------------------------------------------------------------------
 31768                                  ; Procedure Name : ScanPlace
 31769                                  ; Inputs:
 31770                                  ;	Same as PLACEBUF
 31771                                  ; Function:
 31772                                  ;	Save scan location and call PLACEBUF
 31773                                  ; Outputs:
 31774                                  ;	DS:DI Points to saved scan location
 31775                                  ; All registers, except DS:DI, preserved.
 31776                                  ;----------------------------------------------------------------------------
 31777                                  ;M039: Rewritten to preserve registers.
 31778                                  
 31779                                  ;SCANPLACE:
 31780                                  ;	; 31/07/2018 - Retro DOS v3.0
 31781                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31782                                  ;	push	es
 31783                                  ;	les	si,[di]
 31784                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31785                                  ;	call	PLACEBUF
 31786                                  ;	push	es
 31787                                  ;	pop	ds
 31788                                  ;	mov	di,si
 31789                                  ;	pop	es
 31790                                  ;scanplace_retn:
 31791                                  ;	retn	
 31792                                  	
 31793                                  	; MSDOS 6.0
 31794                                  SCANPLACE:
 31795 00005867 FF35                    	push	word [di]
 31796                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31797 00005869 E80200                  	call	PLACEBUF
 31798 0000586C 5F                      	pop	di
 31799 0000586D C3                      	retn
 31800                                  
 31801                                  ;----------------------------------------------------------------------------
 31802                                  ; Procedure Name : PlaceBuf
 31803                                  ; Input:
 31804                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31805                                  ; Function:
 31806                                  ;	Remove buffer from queue and re-insert it in proper place.
 31807                                  ; NO registers altered
 31808                                  ;----------------------------------------------------------------------------
 31809                                  
 31810                                  ;procedure PLACEBUF,NEAR
 31811                                  
 31812                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31813                                  	; 20/05/2019 - Retro DOS v4.0
 31814                                  PLACEBUF:
 31815                                  	; 31/07/2018 - Retro DOS v3.0
 31816                                  
 31817                                  	; MSDOS 6.0
 31818 0000586E 50                      	push	AX			;Save only regs we modify	;AN000;
 31819 0000586F 53                      	push	BX							;AN000;
 31820                                  	; 23/09/2023
 31821                                  	;push	SI							;AN000;
 31822                                  	
 31823 00005870 8B05                    	mov	ax,[di]
 31824                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31825 00005872 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31826                                  	
 31827 00005877 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31828 00005879 7422                    	je	short nret			;Yes, special case	;AN000;
 31829 0000587B 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31830 0000587D 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31831 0000587F 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31832 00005883 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31833                                  not_first:
 31834                                  	; 23/09/2023
 31835 00005885 56                      	push	si
 31836                                  	;mov	si,[di+2]
 31837 00005886 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31838 00005889 8904                    	mov	[si],ax
 31839                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31840 0000588B 96                      	xchg	si,ax
 31841                                  	;mov	[si+2],ax
 31842 0000588C 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31843                                  	
 31844 0000588F 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31845 00005892 893C                    	mov	[si],di
 31846                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31847 00005894 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31848 00005897 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31849 0000589A 891D                    	mov	[di],bx
 31850                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31851                                  	; 23/09/2023
 31852 0000589C 5E                      	pop	si
 31853                                  nret:	
 31854                                  	; 23/09/2023							;AN000;
 31855                                  	;pop	SI							;AN000;
 31856 0000589D 5B                      	pop	BX							;AN000;
 31857 0000589E 58                      	pop	AX							;AN000;
 31858                                  									;AN000;
 31859                                  	;cmp	byte [di+4],0FFh
 31860 0000589F 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31861 000058A3 7505                            jne	short pbx			; M039: -no, jump.
 31862 000058A5 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31863                                  pbx:	
 31864 000058AA C3                      	retn								;AN000;
 31865                                  
 31866                                  	; 31/07/2018 - Retro DOS v3.0
 31867                                  
 31868                                  	; MSDOS 3.3
 31869                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31870                                  
 31871                                  ;PLACEBUF:
 31872                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31873                                  ;	
 31874                                  ;       CALL	save_world
 31875                                  ;       LES     CX,[DI]
 31876                                  ;       CMP     CX,-1           	; Buf is LAST?
 31877                                  ;       JZ      SHORT NRET		; Buffer already last
 31878                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31879                                  ;       PUSH    DS
 31880                                  ;       POP     ES              	; Buf is ES:DI
 31881                                  ;	; 15/03/2018
 31882                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31883                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31884                                  ;       JNZ     SHORT BUFLOOP
 31885                                  ;       MOV     [SS:BUFFHEAD],CX
 31886                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31887                                  ;       JMP     SHORT LOOKEND
 31888                                  ;BUFLOOP:
 31889                                  ;	; 31/07/2018
 31890                                  ;	mov	ax,ds
 31891                                  ;	mov	bx,si
 31892                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31893                                  ;       LDS     SI,[SI]
 31894                                  ;       CALL    POINTCOMP
 31895                                  ;       jnz	short BUFLOOP
 31896                                  ;	;
 31897                                  ;	mov	ds,ax
 31898                                  ;	mov	si,bx
 31899                                  ;	mov	[SI],cx
 31900                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31901                                  ;	mov	[SI+2],bp
 31902                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31903                                  ;LOOKEND:
 31904                                  ;	mov	ax,ds
 31905                                  ;	mov	bx,si
 31906                                  ;       LDS     SI,[SI]
 31907                                  ;       CMP     SI,-1
 31908                                  ;       jnz     short LOOKEND
 31909                                  ;GOTHEEND:
 31910                                  ;       mov	ds,ax
 31911                                  ;	mov	[BX],di
 31912                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31913                                  ;       MOV     WORD [ES:DI],-1
 31914                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31915                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31916                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31917                                  ;NRET:
 31918                                  ;       CALL	restore_world
 31919                                  ;	
 31920                                  ;	;cmp	byte [di+4],-1
 31921                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31922                                  ;	jnz     short scanplace_retn
 31923                                  ;	call    PLACEHEAD
 31924                                  ;	retn
 31925                                  
 31926                                  ;EndProc PLACEBUF
 31927                                  
 31928                                  ;M039 - Removed PLACEHEAD.
 31929                                  ;----------------------------------------------------------------------------
 31930                                  ; places buffer at head
 31931                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31932                                  ;	ONE IN THE LIST!!!!!!!
 31933                                  ; BUGBUG ---- this routine can be removed because it has only
 31934                                  ; BUGBUG ---- one instruction. This routine is called from
 31935                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31936                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31937                                  ; BUGBUG ---- But kept as it is for modularity
 31938                                  ;----------------------------------------------------------------------------
 31939                                  ;procedure   PLACEHEAD,NEAR
 31940                                  ;	mov	word ptr [BufferQueue], di
 31941                                  ;	ret
 31942                                  ;EndProc PLACEHEAD
 31943                                  ;M039
 31944                                  
 31945                                  ;----------------------------------------------------------------------------
 31946                                  ; Procedure Name : PLACEHEAD
 31947                                  ;
 31948                                  ; SAME AS PLACEBUF except places buffer at head
 31949                                  ;----------------------------------------------------------------------------
 31950                                  
 31951                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31952                                  	; 05/09/2018
 31953                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31954                                  ;PLACEHEAD:
 31955                                  ;	; 31/07/2018 - Retro DOS v3.0
 31956                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31957                                  ;
 31958                                  ;       CALL	save_world
 31959                                  ;       PUSH	DS
 31960                                  ;       POP	ES
 31961                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31962                                  ;       LDS     SI,[SS:BUFFHEAD]
 31963                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31964                                  ;	CALL    POINTCOMP
 31965                                  ;       JZ      SHORT GOTHEEND2
 31966                                  ;	MOV	[ES:DI],SI
 31967                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31968                                  ;       MOV	[ES:DI+2],DS
 31969                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31970                                  ;       MOV	[SS:BUFFHEAD],DI
 31971                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31972                                  ;LOOKEND2:
 31973                                  ;       mov	ax,ds
 31974                                  ;	mov	bx,si
 31975                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31976                                  ;       LDS     SI,[SI]
 31977                                  ;       CALL    POINTCOMP
 31978                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31979                                  ;       mov	ds,ax
 31980                                  ;	mov	word [bx],-1
 31981                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31982                                  ;	mov	word [bx+2],-1
 31983                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31984                                  ;GOTHEEND2:
 31985                                  ;      	call	restore_world
 31986                                  ;placehead_retn:
 31987                                  ;	retn
 31988                                  
 31989                                  ; 20/05/2019 - Retro DOS v4.0
 31990                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31991                                  
 31992                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31993                                  ;----------------------------------------------------------------------------
 31994                                  ;
 31995                                  ; Procedure Name : PointComp
 31996                                  ; Inputs:
 31997                                  ;         DS:SI & ES:DI
 31998                                  ; Function:
 31999                                  ;          Checks for ((SI==DI) && (ES==DS))
 32000                                  ;	   Assumes that pointers are normalized for the
 32001                                  ;	   same segment
 32002                                  ;
 32003                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32004                                  ; DO NOT USE FOR < or >
 32005                                  ; No Registers altered
 32006                                  ;
 32007                                  ;----------------------------------------------------------------------------
 32008                                  
 32009                                  POINTCOMP:
 32010                                  	; 31/07/2018 - Retro DOS v3.0
 32011                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32012 000058AB 39FE                    	CMP	SI,DI
 32013 000058AD 750A                    	jnz	short _ret_label	; return if nz
 32014                                  	;jnz	short placehead_retn 
 32015 000058AF 51                      	PUSH	CX
 32016 000058B0 52                      	PUSH	DX
 32017 000058B1 8CD9                    	MOV	CX,DS
 32018 000058B3 8CC2                    	MOV	DX,ES
 32019 000058B5 39D1                    	CMP	CX,DX
 32020 000058B7 5A                      	POP	DX
 32021 000058B8 59                      	POP	CX
 32022                                  _ret_label:
 32023 000058B9 C3                      	retn
 32024                                  
 32025                                  ; 01/08/2018 - Retro DOS v3.0
 32026                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32027                                  
 32028                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32029                                  
 32030                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32031                                  ;----------------------------------------------------------------------------
 32032                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32033                                  ;	It gets the specified local sector into one of the I/O buffers
 32034                                  ;	and shuffles the queue
 32035                                  ; 
 32036                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32037                                  ;		       ELSE no pre-read
 32038                                  ;		(DX) = Desired physical sector number	      (LOW)
 32039                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32040                                  ;		(ES:BP) = Pointer to drive parameters
 32041                                  ;		ALLOWED set in case of INT 24
 32042                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32043                                  ;		'C' clear if OK
 32044                                  ;		CURBUF Points to the Buffer for the sector
 32045                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32046                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32047                                  ;----------------------------------------------------------------------------
 32048                                  
 32049                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32050                                  ;----------------------------------------------------------------------------
 32051                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32052                                  ;	It gets the specified sector into one of the I/O buffers
 32053                                  ;	and shuffles the queue. We need a special entry point so that
 32054                                  ;	we can read the alternate FAT sector if the first read fails, also
 32055                                  ;	so we can mark the buffer as a FAT sector.
 32056                                  ; 
 32057                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32058                                  ;		       ELSE no pre-read
 32059                                  ;		(DX) = Desired physical sector number	     (LOW)
 32060                                  ;		(SI) != 0
 32061                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32062                                  ;		(ES:BP) = Pointer to drive parameters
 32063                                  ;		ALLOWED set in case of INT 24
 32064                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32065                                  ;		'C' clear if OK
 32066                                  ;		CUR ddBUF Points to the Buffer for the sector
 32067                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32068                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32069                                  ;----------------------------------------------------------------------------
 32070                                  
 32071                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32072                                  GETBUFFRC:
 32073 000058BA C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32074                                  GETBUFFRA:
 32075 000058C0 30C0                    	xor	al,al
 32076 000058C2 BE0100                  	mov	si,1
 32077 000058C5 EB09                    	jmp	short GETBUFFRB
 32078                                  
 32079                                  	; 22/09/2023
 32080                                  GETBUFFER:
 32081 000058C7 30C0                    	xor	al,al
 32082                                  GETBUFFRD:
 32083                                  	;mov	byte [ALLOWED],18h
 32084 000058C9 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32085                                  
 32086                                  	; 20/05/2019 - Retro DOS v4.0
 32087                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32088                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32089                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32090                                  GETBUFFR:
 32091 000058CE 31F6                    	XOR	SI,SI
 32092                                  
 32093                                  ;	This entry point is called for FAT buffering with SI != 0
 32094                                  
 32095                                  GETBUFFRB:
 32096 000058D0 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32097                                  	; 15/12/2022
 32098 000058D3 268A4600                	mov	al,[ES:BP]
 32099                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32100                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32101 000058D7 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32102                                  	; MSDOS 6.0
 32103                                  ;hkn; SS override
 32104 000058DB 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32105                                  
 32106                                  ;	See if this is the buffer that was most recently returned.
 32107                                  ;	A big performance win if it is.
 32108                                  
 32109 000058E0 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32110 000058E3 7412                    	je	short getb5			; No
 32111                                  	;cmp	dx,[di+6]
 32112 000058E5 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32113 000058E8 750D                    	JNZ	short getb5			; Wrong sector
 32114                                  	
 32115                                  	; MSDOS 6.0
 32116                                  	;cmp	cx,[di+8]
 32117 000058EA 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32118 000058ED 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32119                                  	
 32120                                  	;cmp	al,[di+4]
 32121 000058EF 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32122                                  	;JZ	getb35				; Just asked for same buffer
 32123 000058F2 7503                    	jnz	short getb5
 32124                                  	;jmp	getb35
 32125                                  	; 17/12/2022
 32126                                  	; 28/07/2019
 32127 000058F4 E9C700                  	jmp	getb35x
 32128                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32129                                  	;jmp	getb35
 32130                                  
 32131                                  ;	It's not the buffer most recently returned. See if it's in the
 32132                                  ;	cache.
 32133                                  ;
 32134                                  ;	(cx:dx) = sector #
 32135                                  ;	(al) = drive #
 32136                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32137                                  ;	??? list may be incomplete ???
 32138                                  
 32139                                  getb5:	
 32140                                  	; MSDOS 3.3
 32141                                  	;lds	di,[SS:BUFFHEAD]
 32142                                  	; MSDOS 6.0
 32143 000058F7 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32144                                  getb10:	
 32145                                  	;cmp	dx,[di+6]
 32146 000058FA 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32147 000058FD 750D                    	jne	short getb12			; wrong sector lo
 32148                                  	
 32149                                  	; MSDOS 6.0
 32150                                  	;cmp	cx,[di+8]
 32151 000058FF 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32152 00005902 7508                    	jne	short getb12			; wrong sector hi
 32153                                  	
 32154                                  	;cmp	al,[di+4]
 32155 00005904 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32156                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32157 00005907 7503                    	jne	short getb12
 32158 00005909 E98C00                  	jmp	getb25
 32159                                  getb12:	
 32160                                  	; MSDOS 3.3
 32161                                  	;;mov	di,[DI]
 32162                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32163                                  	;
 32164                                  	; 15/08/2018
 32165                                  	;lds	di,[di]
 32166                                  
 32167                                  	;cmp	di,-1 ; 0FFFFh
 32168                                  	;jne	short getb10
 32169                                  	;lds	di,[SS:BUFFHEAD]
 32170                                  
 32171                                  	; MSDOS 6.0
 32172 0000590C 8B3D                    	mov	di,[di]
 32173                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32174 0000590E 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32175 00005913 75E5                    	jne	short getb10			; no, continue looking
 32176                                  
 32177                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32178                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32179                                  ;	new sector into it.
 32180                                  ;
 32181                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32182                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32183                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32184                                  ;	down a chain, but should be hashed.
 32185                                  ;
 32186                                  ;	(DS:DI) = first buffer in the queue
 32187                                  ;	(CX:DX) = sector # we want
 32188                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32189                                  
 32190                                  	; MSDOS 3.3 & MSDOS 6.0
 32191                                  ;hkn; SS override
 32192 00005915 51                      	PUSH	CX  ; MSDOS 6.0
 32193 00005916 56                      	push	si
 32194 00005917 52                      	push	dx
 32195 00005918 55                      	push	bp
 32196 00005919 06                      	push	es
 32197 0000591A E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32198 0000591D 07                      	pop	es
 32199 0000591E 5D                      	pop	bp
 32200 0000591F 5A                      	pop	dx
 32201 00005920 5E                      	pop	si
 32202 00005921 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32203                                  	;jc	short getbx			; if got hard error
 32204 00005926 7303                    	jnc	short getb13
 32205 00005928 E99D00                  	jmp	getbx
 32206                                  
 32207                                  getb13:
 32208                                  	; MSDOS 6.0
 32209 0000592B E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32210                                  
 32211                                  ;	We're ready to read in the buffer, if need be. If the caller
 32212                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32213                                  
 32214 0000592E 30E4                    	XOR	AH,AH				; initial flags
 32215                                  ;hkn; SS override
 32216                                  	;test	byte [ss:PREREAD],0FFh
 32217                                  	;jnz	short getb20
 32218 00005930 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32219 00005935 7549                    	JNZ	short getb20			; no, we're done
 32220                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32221                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32222 00005937 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32223                                  	;MOV	CX,1
 32224                                  	; 22/09/2023
 32225 0000593A 29C9                    	sub	cx,cx ; 0
 32226 0000593C 56                      	push	si
 32227 0000593D 57                      	push	di
 32228 0000593E 52                      	push	dx
 32229                                  	; MSDOS 6.0
 32230 0000593F 06                      	push	es ; ***
 32231                                  
 32232                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32233                                  ;	this point. -mrw 10/88
 32234                                  	
 32235                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32236                                  	; 22/09/2023
 32237 00005940 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32238 00005945 7407                    	jz	short getb14
 32239 00005947 1E                      	push	ds ; **
 32240 00005948 53                      	push	bx ; *
 32241 00005949 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32242                                  getb14:
 32243                                  ;M039: Eliminated redundant HMA code.
 32244                                  
 32245                                  	; 22/09/2023
 32246 0000594E 41                      	inc	cx ; cx = 1
 32247                                  
 32248                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32249 0000594F 09F6                    	OR	SI,SI			; FAT sector ?
 32250 00005951 7407                    	JZ	short getb15		
 32251                                  
 32252 00005953 E80EDD                  	call	FATSECRD
 32253                                  	;mov	ah,2
 32254 00005956 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32255                                  
 32256 00005958 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32257                                  
 32258                                  getb15:
 32259 0000595A E833DD                  	call	DREAD			; Buffer is marked free if read barfs
 32260 0000595D B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32261                                  getb17:
 32262                                  	; 17/12/2022	
 32263                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32264                                  ;%if 0
 32265                                  	; MSDOS 6.0							  ;I001
 32266 0000595F 9C                      	pushf								  ;I001
 32267 00005960 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32268 00005966 7411                    	jz	short not_in_hma	; no				  ;I001
 32269                                  	;mov	cx,[es:bp+2]
 32270 00005968 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32271 0000596C D1E9                    	shr	cx,1							  ;I001
 32272 0000596E 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32273 0000596F 89DE                    	mov	si,bx							  ;I001
 32274 00005971 5F                      	pop	di ; *							  ;I001
 32275 00005972 07                      	pop	es ; **							  ;I001
 32276 00005973 FC                      	cld								  ;I001
 32277 00005974 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32278 00005975 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32279 00005977 06                      	push	es							  ;I001
 32280 00005978 1F                      	pop	ds							  ;I001
 32281                                  ;%endif
 32282                                  
 32283                                  ; 17/12/2022
 32284                                  %if 0
 32285                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32286                                  	; MSDOS 5.0
 32287                                  	pushf
 32288                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32289                                  	jz	short not_in_hma	; no
 32290                                  	popf
 32291                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32292                                  	shr	cx,1
 32293                                  	mov	si,bx
 32294                                  	pop	di ; *
 32295                                  	pop	es ; **
 32296                                  	cld
 32297                                  	rep	movsw
 32298                                  	push	es
 32299                                  	pop	ds
 32300                                  	jmp	short getb19 ; 27/11/2022
 32301                                  %endif
 32302                                  
 32303                                  not_in_hma:								  ;I001
 32304 00005979 9D                      	popf							 	  ;I001
 32305                                  getb19:
 32306 0000597A 07                      	pop	es ; ***
 32307 0000597B 5A                      	pop	dx
 32308 0000597C 5F                      	pop	di
 32309 0000597D 5E                      	pop	si
 32310 0000597E 7248                    	JC	short getbx
 32311                                  
 32312                                  ;	The buffer has the data setup in it (if we were to read)
 32313                                  ;	Setup the various buffer fields
 32314                                  ;
 32315                                  ;	(ds:di) = buffer address
 32316                                  ;	(es:bp) = DPB address
 32317                                  ;	(HIGH_SECTOR:DX) = sector #
 32318                                  ;	(ah) = BUF_FLAGS value
 32319                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32320                                  
 32321                                  ;hkn; SS override
 32322                                  getb20:	; MSDOS 6.0
 32323 00005980 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32324                                  	;mov	[di+8],cx
 32325 00005985 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32326                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32327                                   	;mov	[di+6],dx
 32328 00005988 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32329                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32330                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32331 0000598B 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32332                                  	;;mov	[di+0Ch],es
 32333                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32334 0000598E 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32335                                  	; 15/12/2022
 32336 00005991 268A4600                	mov	al,[es:bp]
 32337                                  	;mov	al,[es:bp+0]
 32338                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32339                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32340                                  	;mov	[di+4],ax
 32341 00005995 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32342                                  getb25:	
 32343                                  	; MSDOS 3.3
 32344                                  	;mov     ax,1
 32345                                  
 32346                                  	; MSDOS 6.0
 32347                                  	;mov	byte [di+0Ah],1
 32348 00005998 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32349 0000599C 31C0                    	XOR	AX,AX
 32350                                  
 32351                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32352 0000599E 09F6                    	OR	SI,SI				; FAT sector ?
 32353 000059A0 740B                    	JZ	short getb30
 32354                                  
 32355                                  	;mov	al,[es:bp+8]
 32356 000059A2 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32357                                  	
 32358                                  	; MSDOS 6.0
 32359 000059A6 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32360                                  	;mov	ax,[es:bp+0Fh]
 32361 000059A9 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32362                                  						;  sectors
 32363                                  	; MSDOS 3.3
 32364                                  	;;mov	ah,[es:bp+0Fh]
 32365                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32366                                  
 32367                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32368                                  ;		is set
 32369                                  
 32370                                  getb30:	
 32371                                  	; MSDOS 6.0
 32372                                  	;mov	[di+0Bh],ax
 32373 000059AD 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32374                                  
 32375                                  	; MSDOS 3.3
 32376                                  	;;mov	[di+8],ax ; 15/08/2018	
 32377                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32378                                  
 32379 000059B0 E8BBFE                  	CALL	PLACEBUF
 32380                                  
 32381                                  ;hkn; SS override for next 4
 32382                                  getb35: 
 32383                                  	; 17/12/2022
 32384                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32385                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32386                                  	;MOV	[SS:CURBUF+2],DS
 32387                                  	;MOV	[SS:LastBuffer+2],DS
 32388                                  	;MOV	[SS:CURBUF],DI
 32389                                  	;MOV	[SS:LastBuffer],DI
 32390                                  	;CLC
 32391                                  
 32392                                  	; 17/12/2022
 32393                                  	; 07/12/2022
 32394                                  	; Retro DOS v4.0
 32395 000059B3 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32396 000059B8 36893E[1E00]            	mov	[ss:LastBuffer],di
 32397 000059BD F8                      	clc
 32398                                  getb35x: ; 28/07/2019
 32399 000059BE 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32400 000059C3 36893E[E205]            	MOV	[ss:CURBUF],di
 32401                                  
 32402                                  ;	Return with 'C' set appropriately
 32403                                  ;	(dx) = caller's original value
 32404                                  
 32405                                  getbx:	
 32406 000059C8 16                      	push	ss
 32407 000059C9 1F                      	pop	ds
 32408                                  	;retn
 32409                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32410                                  getbuffrb_retn:
 32411                                  ;flushbuf_retn:	; 17/12/2022
 32412 000059CA C3                      	retn
 32413                                  
 32414                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32415                                  ;----------------------------------------------------------------------------
 32416                                  ; Input:
 32417                                  ;	DS = DOSGROUP
 32418                                  ;	AL = Physical unit number local buffers only
 32419                                  ;	   = -1 for all units and all remote buffers
 32420                                  ; Function:
 32421                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32422                                  ;	Carry set if error (user FAILed to I 24)
 32423                                  ;	    Flush operation completed.
 32424                                  ; DS Preserved, all others destroyed (ES too)
 32425                                  ;----------------------------------------------------------------------------
 32426                                  
 32427                                  	; 20/05/2019 - Retro DOS v4.0
 32428                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32429                                  
 32430                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32431                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32432                                  FLUSHBUF:
 32433                                  	; MSDOS 3.3
 32434                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32435                                  	;lds	di,[BUFFHEAD]
 32436                                  
 32437                                  	; MSDOS 6.0
 32438 000059CB E887FE                  	call	GETCURHEAD
 32439                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32440 000059CE 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32441 000059D4 7508                    	jnz	short scan_buf_queue
 32442 000059D6 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32443 000059DC 7423                    	je	short end_scan
 32444                                  	
 32445                                  scan_buf_queue:
 32446 000059DE E82900                  	call	CHECKFLUSH
 32447                                  	;push	ax  ; MSDOS 3.3
 32448                                  	; MSDOS 6.0
 32449                                  	;mov	ah,[di+4]
 32450 000059E1 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32451 000059E4 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32452 000059E9 7408                    	je	short free_the_buf
 32453                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32454 000059EB 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32455 000059F1 7405                    	jz	short dont_free_the_buf
 32456                                  	; MSDOS 3.3
 32457                                  	;;mov	al,[di+4]
 32458                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32459                                  	;cmp	[SS:WPERR],al					;hkn;
 32460                                  	; 15/08/2018
 32461                                  	;jne	short dont_free_the_buf	
 32462                                  free_the_buf:
 32463                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32464 000059F3 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32465                                  dont_free_the_buf:
 32466                                  	;pop	ax  ; MSDOS 3.3 	   	
 32467                                  
 32468                                  	; MSDOS 3.3
 32469                                  	;mov	di,[DI]
 32470                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32471                                  	;
 32472                                  	; 15/08/2018
 32473                                  	;lds	di,[di]
 32474                                  	;
 32475                                  	;cmp	di,-1 ; 0FFFFh
 32476                                  	;jnz	short scan_buf_queue 
 32477                                  	
 32478                                  	; MSDOS 6.0
 32479 000059F8 8B3D                    	mov	di,[di]
 32480                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32481 000059FA 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32482 000059FF 75DD                    	jne	short scan_buf_queue
 32483                                  
 32484                                  end_scan:
 32485 00005A01 16                      	push	ss
 32486 00005A02 1F                      	pop	ds
 32487                                  	; 01/08/2018 - Retro DOS v3.0
 32488                                  	;cmp	byte [FAILERR],0
 32489                                  	;jne	short bad_flush
 32490                                  	;retn
 32491                                  ;bad_flush:
 32492                                  	;stc
 32493                                  	;retn
 32494                                  
 32495                                  	; 17/12/2022
 32496                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32497                                  	; 01/08/2018 - Retro DOS v3.0
 32498 00005A03 803E[4A03]01            	cmp	byte [FAILERR],1
 32499 00005A08 F5                      	cmc
 32500                                  flushbuf_retn:
 32501 00005A09 C3                      	retn
 32502                                  	
 32503                                  	; 17/12/2022
 32504                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32505                                  	;cmp	byte [FAILERR],0
 32506                                  	;jne	short bad_flush
 32507                                  	;retn
 32508                                  ;bad_flush:
 32509                                  	;stc
 32510                                  	;retn
 32511                                  
 32512                                  ;----------------------------------------------------------------------------
 32513                                  ;
 32514                                  ; Procedure Name : CHECKFLUSH
 32515                                  ;
 32516                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32517                                  ;	   DS:DI - pointer to buffer
 32518                                  ;
 32519                                  ; Function : Write out a buffer if it is dirty
 32520                                  ;
 32521                                  ; Carry set if problem (currently user FAILed to I 24)
 32522                                  ;
 32523                                  ;----------------------------------------------------------------------------
 32524                                  
 32525                                  CHECKFLUSH:
 32526                                  	; MSDOS 6.0
 32527 00005A0A B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32528                                  	;cmp	[di+4],ah
 32529 00005A0C 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32530 00005A0F 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32531 00005A11 38C4                    	CMP	AH,AL			; 
 32532 00005A13 7406                    	JZ	short DOBUFFER		; do this buffer
 32533                                  	;cmp	al,[di+4]
 32534 00005A15 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32535 00005A18 F8                      	CLC
 32536 00005A19 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32537                                  DOBUFFER:
 32538                                  	;test	byte [di+5],40h
 32539 00005A1B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32540 00005A1F 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32541 00005A21 50                      	PUSH	AX
 32542                                  	;push	word [di+4]
 32543 00005A22 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32544 00005A25 E80B00                  	CALL	BUFWRITE
 32545 00005A28 58                      	POP	AX
 32546 00005A29 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32547                                  	;and	ah,0BFh
 32548 00005A2B 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32549                                  	;mov	[di+4],ax
 32550 00005A2E 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32551                                  LEAVE_BUF:
 32552 00005A31 58                      	POP	AX			; Search info
 32553                                  checkflush_retn:
 32554 00005A32 C3                      	retn
 32555                                  
 32556                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32557                                  ;----------------------------------------------------------------------------
 32558                                  ;
 32559                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32560                                  ;
 32561                                  ;	ENTRY	DS:DI Points to the buffer
 32562                                  ;
 32563                                  ;	EXIT	Buffer marked free
 32564                                  ;		Carry set if error (currently user FAILed to I 24)
 32565                                  ;
 32566                                  ;	USES	All buf DS:DI
 32567                                  ;		HIGH_SECTOR
 32568                                  ;----------------------------------------------------------------------------
 32569                                  
 32570                                  	; 20/05/2019 - Retro DOS v4.0
 32571                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32572                                  
 32573                                  
 32574                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32575                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32576                                  
 32577                                  BUFWRITE:
 32578                                  	; 10/09/2018
 32579                                  	; 01/08/2018 - Retro DOS v3.0
 32580                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32581 00005A33 B8FF00                  	MOV	AX,00FFH
 32582                                  	;xchg	ax,[di+4]
 32583 00005A36 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32584 00005A39 3CFF                    	CMP	AL,0FFH
 32585 00005A3B 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32586                                  	;test	ah,40h
 32587 00005A3D F6C440                  	test	AH,buf_dirty
 32588 00005A40 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32589                                  	; MSDOS 6.0
 32590 00005A42 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32591                                  
 32592                                  ;hkn; SS override
 32593 00005A45 363A06[2203]            	CMP	AL,[SS:WPERR]
 32594 00005A4A 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32595                                  
 32596                                  ;hkn; SS override
 32597                                  	; MSDOS 6.0
 32598 00005A4C 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32599                                  	
 32600                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32601                                  	;les	bp,[di+13] ; MSDOS 6.0
 32602 00005A50 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32603                                  	;;lea	bx,[di+16]
 32604                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32605 00005A53 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32606                                  	;mov	dx,[di+6]
 32607 00005A56 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32608                                  	
 32609                                  	; MSDOS 6.0
 32610                                  	;mov	cx,[di+8]
 32611 00005A59 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32612                                  
 32613                                  ;hkn; SS override
 32614 00005A5C 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32615 00005A61 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32616                                  	; MSDOS 3.3
 32617                                  	;; mov	cx,[DI+8]
 32618                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32619                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32620 00005A64 30ED                    	XOR	CH,CH
 32621                                  	;;mov	ah,ch ; MSDOS 3.3
 32622                                  
 32623                                  ;hkn; SS override for ALLOWED
 32624                                  	;mov	byte [SS:ALLOWED],18h
 32625 00005A66 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32626                                  	;test	byte [di+5],8
 32627                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32628                                  	;test	ah,8
 32629 00005A6C F6C408                  	test	AH,buf_isDATA
 32630 00005A6F 7406                    	JZ	short NO_IGNORE
 32631                                  	;or	byte [SS:ALLOWED],20h
 32632 00005A71 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32633                                  NO_IGNORE:
 32634                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32635                                  	; MSDOS 6.0
 32636                                  	;mov	ax,[di+11]
 32637 00005A77 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32638                                  
 32639 00005A7A 57                      	PUSH	DI		; Save buffer pointer
 32640 00005A7B 31FF                    	XOR	DI,DI		; Indicate failure
 32641                                  
 32642 00005A7D 1E                      	push	ds ; *
 32643 00005A7E 53                      	push	bx ; **
 32644                                  WRTAGAIN:
 32645 00005A7F 57                      	push	di ; ***
 32646 00005A80 51                      	push	cx ; ****
 32647 00005A81 50                      	push	ax ; *****
 32648                                  	;MOV	CX,1
 32649                                  	; 17/12/2022
 32650                                  	; ch = 0
 32651 00005A82 B101                    	mov	cl,1 ; 24/07/2019
 32652                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32653                                  	;mov	cx,1
 32654 00005A84 53                      	push	bx ; ******
 32655 00005A85 52                      	push	dx ; *******
 32656 00005A86 1E                      	push	ds ; ********
 32657                                  
 32658                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32659                                  
 32660                                  	; MSDOS 6.0
 32661                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32662                                  	; 22/09/2023
 32663 00005A87 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32664 00005A8C 7418                    	jz	short NBUFFINHMA
 32665 00005A8E 51                      	push	cx
 32666 00005A8F 06                      	push	es
 32667 00005A90 89DE                    	mov	si,bx
 32668 00005A92 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32669 00005A96 D1E9                    	shr	cx,1
 32670 00005A98 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32671 00005A9D 89FB                    	mov	bx,di
 32672 00005A9F FC                      	cld
 32673 00005AA0 F3A5                    	rep	movsw
 32674 00005AA2 06                      	push	es
 32675 00005AA3 1F                      	pop	ds
 32676 00005AA4 07                      	pop	es
 32677 00005AA5 59                      	pop	cx
 32678                                  NBUFFINHMA:
 32679 00005AA6 E847DC                  	call	DWRITE		; Write out the dirty buffer
 32680 00005AA9 1F                      	pop	ds ; ********
 32681 00005AAA 5A                      	pop	dx ; *******
 32682 00005AAB 5B                      	pop	bx ; ******
 32683 00005AAC 58                      	pop	ax ; *****
 32684 00005AAD 59                      	pop	cx ; ****
 32685 00005AAE 5F                      	pop	di ; ***
 32686 00005AAF 7201                    	JC	short NOSET
 32687 00005AB1 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32688                                  NOSET:				;	succeedes.
 32689 00005AB2 01C2                    	ADD	DX,AX
 32690 00005AB4 E2C9                    	LOOP	WRTAGAIN
 32691 00005AB6 5B                      	pop	bx ; **
 32692 00005AB7 1F                      	pop	ds ; *
 32693                                  	;OR	DI,DI		; Clears carry
 32694                                  	;JNZ	short BWROK	; At least one write worked
 32695                                  	;STC			; DI never got INCed, all writes failed.
 32696                                  	; 22/09/2023
 32697 00005AB8 83FF01                  	cmp	di,1
 32698                                  BWROK:	
 32699 00005ABB 5F                      	POP	DI
 32700 00005ABC C3                      	retn
 32701                                  
 32702                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32703                                  ;----------------------------------------------------------------------------
 32704                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32705                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32706                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32707                                  ;	code and time
 32708                                  ;
 32709                                  ;	ENTRY	ES:BP = drive parameter block
 32710                                  ;
 32711                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32712                                  ;		[SC_DRIVE]= drive #
 32713                                  ;
 32714                                  ;	USES	Flags
 32715                                  ;----------------------------------------------------------------------------
 32716                                  
 32717                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32718                                  ; 04/05/2019 - Retro DOS v4.0
 32719                                  
 32720                                  SET_RQ_SC_PARMS:
 32721                                  ;hkn; SS override for all variables used in this procedure.
 32722 00005ABD 50                      	push	ax
 32723                                  	;mov	ax,[es:bp+2]
 32724 00005ABE 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32725 00005AC2 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32726                                  	;;mov	al,[es:bp+0]
 32727                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32728                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32729                                  	; 15/12/2022
 32730 00005AC6 268A4600                	mov	al,[ES:BP]
 32731 00005ACA 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32732 00005ACE 58                      	pop	ax
 32733                                  srspx:	
 32734 00005ACF C3                      	retn					;LB. return
 32735                                  
 32736                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32737                                  ;----------------------------------------------------------------------------
 32738                                  ; Input:
 32739                                  ;	none
 32740                                  ; Function:
 32741                                  ;	increment dirty buffers count
 32742                                  ; Output:
 32743                                  ;	dirty buffers count is incremented
 32744                                  ;
 32745                                  ; All registers preserved
 32746                                  ;----------------------------------------------------------------------------
 32747                                  
 32748                                  INC_DIRTY_COUNT:
 32749                                  ;; BUGBUG  ---- remove this routine
 32750                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32751 00005AD0 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32752 00005AD5 C3                      	retn
 32753                                  
 32754                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32755                                  ;----------------------------------------------------------------------------
 32756                                  ; Input:
 32757                                  ;	none
 32758                                  ; Function:
 32759                                  ;	decrement dirty buffers count
 32760                                  ; Output:
 32761                                  ;	dirty buffers count is decremented
 32762                                  ;
 32763                                  ; All registers preserved
 32764                                  ;----------------------------------------------------------------------------
 32765                                  
 32766                                  DEC_DIRTY_COUNT:
 32767 00005AD6 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32768 00005ADC 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32769 00005ADE 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32770                                  					; error condition to underflow here? ;hkn;
 32771                                  ddcx:	
 32772 00005AE3 C3                      	retn
 32773                                  
 32774                                  ;============================================================================
 32775                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32776                                  ;============================================================================
 32777                                  ; 02/08/2018 - Retro DOS v3.0
 32778                                  ; 29/04/2019 - Retro DOS v4.0
 32779                                  
 32780                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32781                                  
 32782                                  ; Pseudo EXEC system call for DOS
 32783                                  
 32784                                  ;	TITLE	MSPROC - process maintenance
 32785                                  ;	NAME	MSPROC
 32786                                  
 32787                                  ; =========================================================================
 32788                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32789                                  ;	I/O specs are defined in DISPATCH.
 32790                                  ;
 32791                                  ;	$WAIT
 32792                                  ;	$EXEC
 32793                                  ;	$Keep_process
 32794                                  ;	Stay_resident
 32795                                  ;	$EXIT
 32796                                  ;	$ABORT
 32797                                  ;	abort_inner
 32798                                  ;
 32799                                  ;	Modification history:
 32800                                  ;
 32801                                  ;		Created: ARR 30 March 1983
 32802                                  ;		AN000	version 4.0 jan. 1988
 32803                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32804                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32805                                  ;
 32806                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32807                                  ;
 32808                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32809                                  ;		       dossym.inc. 7/30/90
 32810                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32811                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32812                                  ;		       stack is provided at the end of the program. Note that
 32813                                  ;		       only SP is changed.
 32814                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32815                                  ;
 32816                                  ;		M028 - 4b04 implementation
 32817                                  ;
 32818                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32819                                  ;			in memory block >= 64K, sp = 0. If memory block
 32820                                  ;			obtained is <64K, point sp at the end of the memory
 32821                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32822                                  ;			added for a stack segment which may be needed if it
 32823                                  ;			is loaded in low memory situations.
 32824                                  ;
 32825                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32826                                  ;
 32827                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32828                                  ;			a bad environment if it reached 32767 bytes. Changed
 32829                                  ;			to allow 32768 bytes of environment.
 32830                                  ;
 32831                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32832                                  ;		       COM file high. Also ensure that if the biggest block
 32833                                  ;		       into which we load the com file is less than 64K then
 32834                                  ;		       we provide atleast 256 bytes of stack to the user.
 32835                                  ;
 32836                                  ;		M050 - Made Lie table search CASE insensitive
 32837                                  ;
 32838                                  ;		M060 - Removed special version table from the kernal and
 32839                                  ;                      put it in a device drive which puts the address
 32840                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32841                                  ;		       as a DWORD.
 32842                                  ;
 32843                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32844                                  ;		       entry do not try to load low if there is no space in
 32845                                  ;		       UMBs.
 32846                                  ;
 32847                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32848                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32849                                  ;		       change return address to LeaveDos if AL=5.
 32850                                  ;
 32851                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32852                                  ;                      controls building a version of MSDOS.SYS that only
 32853                                  ;                      runs programs from a fixed list (defined in the
 32854                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32855                                  ;                      for details.  This feature is used to build a
 32856                                  ;                      "special" version of DOS that can be handed out to
 32857                                  ;                      OEM/ISV customers as part of a "service" disk.
 32858                                  ;
 32859                                  ; =========================================================================
 32860                                  
 32861                                  ;SAVEXIT  EQU  10
 32862                                  
 32863                                  ;BREAK	<$WAIT - return previous process error code>
 32864                                  ; =========================================================================
 32865                                  ;	$WAIT - Return previous process error code.
 32866                                  ;
 32867                                  ;	Assembler usage:
 32868                                  ;
 32869                                  ;	    MOV     AH, WaitProcess
 32870                                  ;	    INT     int_command
 32871                                  ;
 32872                                  ;	ENTRY	none
 32873                                  ;	EXIT	(ax) = exit code
 32874                                  ;	USES	all
 32875                                  ; =========================================================================
 32876                                  
 32877                                  	; 20/05/2019 - Retro DOS v4.0
 32878                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32879                                  
 32880                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32881                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32882                                  _$WAIT:
 32883                                  	; 02/08/2018 - Retro DOS v3.0
 32884                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32885                                  
 32886 00005AE4 31C0                    	xor	AX,AX
 32887 00005AE6 368706[3403]            	xchg	AX,[ss:exit_code]
 32888 00005AEB E949AB                  	jmp	SYS_RET_OK
 32889                                  
 32890                                  ; =========================================================================
 32891                                  ;BREAK <$exec - load/go a program>
 32892                                  ;	EXEC.ASM - EXEC System Call
 32893                                  ;
 32894                                  ;
 32895                                  ; Assembler usage:
 32896                                  ;	    lds     DX, Name
 32897                                  ;	    les     BX, Blk
 32898                                  ;	    mov     AH, Exec
 32899                                  ;	    mov     AL, FUNC
 32900                                  ;	    int     INT_COMMAND
 32901                                  ;
 32902                                  ;	AL  Function
 32903                                  ;	--  --------
 32904                                  ;	 0  Load and execute the program.
 32905                                  ;	 1  Load, create the program header but do not
 32906                                  ;	    begin execution.
 32907                                  ;	 3  Load overlay. No header created.
 32908                                  ;
 32909                                  ;	    AL = 0 -> load/execute program
 32910                                  ;
 32911                                  ;	    +---------------------------+
 32912                                  ;	    | WORD segment address of	|
 32913                                  ;	    | environment.		|
 32914                                  ;	    +---------------------------+
 32915                                  ;	    | DWORD pointer to ASCIZ	|
 32916                                  ;	    | command line at 80h	|
 32917                                  ;	    +---------------------------+
 32918                                  ;	    | DWORD pointer to default	|
 32919                                  ;	    | FCB to be passed at 5Ch	|
 32920                                  ;	    +---------------------------+
 32921                                  ;	    | DWORD pointer to default	|
 32922                                  ;	    | FCB to be passed at 6Ch	|
 32923                                  ;	    +---------------------------+
 32924                                  ;
 32925                                  ;	    AL = 1 -> load program
 32926                                  ;
 32927                                  ;	    +---------------------------+
 32928                                  ;	    | WORD segment address of	|
 32929                                  ;	    | environment.		|
 32930                                  ;	    +---------------------------+
 32931                                  ;	    | DWORD pointer to ASCIZ	|
 32932                                  ;	    | command line at 80h	|
 32933                                  ;	    +---------------------------+
 32934                                  ;	    | DWORD pointer to default	|
 32935                                  ;	    | FCB to be passed at 5Ch	|
 32936                                  ;	    +---------------------------+
 32937                                  ;	    | DWORD pointer to default	|
 32938                                  ;	    | FCB to be passed at 6Ch	|
 32939                                  ;	    +---------------------------+
 32940                                  ;	    | DWORD returned value of	|
 32941                                  ;	    | CS:IP			|
 32942                                  ;	    +---------------------------+
 32943                                  ;	    | DWORD returned value of	|
 32944                                  ;	    | SS:IP			|
 32945                                  ;	    +---------------------------+
 32946                                  ;
 32947                                  ;	    AL = 3 -> load overlay
 32948                                  ;
 32949                                  ;	    +---------------------------+
 32950                                  ;	    | WORD segment address where|
 32951                                  ;	    | file will be loaded.	|
 32952                                  ;	    +---------------------------+
 32953                                  ;	    | WORD relocation factor to |
 32954                                  ;	    | be applied to the image.	|
 32955                                  ;	    +---------------------------+
 32956                                  ;
 32957                                  ; Returns:
 32958                                  ;	    AX = error_invalid_function
 32959                                  ;	       = error_bad_format
 32960                                  ;	       = error_bad_environment
 32961                                  ;	       = error_not_enough_memory
 32962                                  ;	       = error_file_not_found
 32963                                  ; =========================================================================
 32964                                  ;
 32965                                  ;   Revision history:
 32966                                  ;
 32967                                  ;	 A000	version 4.00  Jan. 1988
 32968                                  ;
 32969                                  ; =========================================================================
 32970                                  
 32971                                  Exec_Internal_Buffer		EQU	OPENBUF
 32972                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32973                                  
 32974                                  ; =========================================================================
 32975                                  
 32976                                  ;IF1		; warning message on buffers
 32977                                  ;%out	Please make sure that the following are contiguous and of the
 32978                                  ;%out	following sizes:
 32979                                  ;%out
 32980                                  ;%out	OpenBuf     128
 32981                                  ;%out	RenBuf	    128
 32982                                  ;%out	SearchBuf    53
 32983                                  ;%out	DummyCDS    curdirLen
 32984                                  ;ENDIF
 32985                                  
 32986                                  ; =========================================================================
 32987                                  
 32988                                  ; =========================================================================
 32989                                  ;
 32990                                  ; =========================================================================
 32991                                  
 32992                                  	; 20/05/2019 - Retro DOS v4.0
 32993                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32994                                  
 32995                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32996                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32997                                  	
 32998                                  _$EXEC:
 32999                                  	; 02/08/2018 - Retro DOS v3.0
 33000                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33001                                  
 33002                                  EXEC001S:
 33003                                  	;LocalVar    Exec_Blk		,DWORD
 33004                                  	;LocalVar    Exec_Func		,BYTE
 33005                                  	;LocalVar    Exec_Load_High	,BYTE
 33006                                  	;LocalVar    Exec_FH		,WORD
 33007                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33008                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33009                                  	;LocalVar    Exec_Environ	,WORD
 33010                                  	;LocalVar    Exec_Size		,WORD
 33011                                  	;LocalVar    Exec_Load_Block	,WORD
 33012                                  	;LocalVar    Exec_DMA		,WORD
 33013                                  	;LocalVar    ExecNameLen 	,WORD
 33014                                  	;LocalVar    ExecName		,DWORD
 33015                                  	;
 33016                                  	;LocalVar    Exec_DMA_Save	,WORD
 33017                                  	;LocalVar    Exec_NoStack	,BYTE
 33018                                  
 33019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33020                                  	;%define	Exec_Blk	dword [bp-4]
 33021                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33022                                  	%define		Exec_BlkL	word [bp-4]	
 33023                                  	%define		Exec_BlkH	word [bp-2]
 33024                                  	%define		Exec_Func	byte [bp-5]
 33025                                  	%define		Exec_Load_High	byte [bp-6]
 33026                                  	%define		Exec_FH		word [bp-8]
 33027                                  	%define		Exec_Rel_Fac	word [bp-10]
 33028                                  	%define		Exec_Res_Len_Para word [bp-12]
 33029                                  	%define		Exec_Environ	word [bp-14]
 33030                                  	%define		Exec_Size	word [bp-16]
 33031                                  	%define		Exec_Load_Block	word [bp-18]
 33032                                  	%define		Exec_DMA	word [bp-20]
 33033                                  	%define		ExecNameLen	word [bp-22]
 33034                                  	;%define	ExecName	dword [bp-26]
 33035                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33036                                  	%define		ExecNameL	word [bp-26]	
 33037                                  	%define		ExecNameH	word [bp-24]
 33038                                  	; MSDOS 6.0
 33039                                  	%define		Exec_DMA_Save	word [bp-28]
 33040                                  	%define		Exec_NoStack	byte [bp-29]
 33041                                  	
 33042                                  	; ==================================================================
 33043                                  	; validate function
 33044                                  	; ==================================================================
 33045                                  		      	
 33046                                  	; M068 - Start
 33047                                  	;
 33048                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33049                                  	; possibility that the count may not be decremented all the way to
 33050                                  	; 0. A typical case is if the program for which we intended to keep 
 33051                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33052                                  	; calls), exits pre-maturely due to error conditions.
 33053                                  
 33054                                  	; MSDOS 6.0
 33055 00005AEE 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33056                                  
 33057                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33058                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33059                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33060                                  
 33061 00005AF4 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33062                                  	;jne	short @f
 33063 00005AF6 7505                    	jne	short Exec_@f		; N: continue
 33064                                  					; Y: change ret addr. to LeaveDos.
 33065 00005AF8 59                      	pop	cx			; Note CX is not input to ExecReady
 33066 00005AF9 B9[0404]                	mov	cx,LeaveDOS
 33067 00005AFC 51                      	push	cx
 33068                                  ;@@:
 33069                                  Exec_@f:
 33070                                  	; M068 - End
 33071                                  	
 33072                                  	;Enter
 33073                                  
 33074 00005AFD 55                      	push	bp
 33075 00005AFE 89E5                    	mov	bp,sp
 33076                                  	;;sub	sp,26	; MSDOS 3.3
 33077                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33078                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33079                                  	; 17/12/2022
 33080                                  	; 20/05/2019
 33081 00005B00 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33082                                  
 33083                                  	; MSDOS 6.0
 33084 00005B03 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33085                                  					; M030
 33086 00005B05 7614                    	jna	short Exec_Check_2
 33087                                  
 33088                                  	; MSDOS 3.3
 33089                                  	;cmp	AL,3
 33090                                  	;jna	short Exec_Check_2
 33091                                  
 33092                                  Exec_Bad_Fun:
 33093 00005B07 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33094                                  					; Extended Error Locus	;smr;SS Override
 33095                                  	;mov	al,1
 33096 00005B0D B001                    	mov	al,error_invalid_function
 33097                                  
 33098                                  Exec_Ret_Err:
 33099                                  	;Leave
 33100 00005B0F 89EC                    	mov	sp,bp
 33101 00005B11 5D                      	pop	bp
 33102                                  	;transfer SYS_RET_ERR
 33103 00005B12 E92BAB                  	jmp	SYS_RET_ERR
 33104                                  
 33105                                  	; MSDOS 6.0
 33106                                  ExecReadyJ:
 33107 00005B15 E8FD17                  	call	ExecReady		; M028
 33108 00005B18 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33109                                  
 33110                                  Exec_Check_2:
 33111 00005B1B 3C02                    	cmp	AL,2			
 33112 00005B1D 74E8                    	je	short Exec_Bad_Fun
 33113                                  
 33114                                  	; MSDOS 6.0
 33115 00005B1F 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33116 00005B21 74E4                    	je	short Exec_Bad_Fun
 33117                                  	
 33118 00005B23 3C05                    	cmp	al,5			; M028 ; M030
 33119 00005B25 74EE                    	je	short ExecReadyJ	; M028
 33120                                  
 33121                                  	;mov	[bp-4],bx
 33122 00005B27 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33123                                  	;mov	[bp-2],es
 33124 00005B2A 8C46FE                  	mov	Exec_BlkH,ES
 33125                                  	;mov	[bp-5],al
 33126 00005B2D 8846FB                  	mov	Exec_Func,AL
 33127                                  	;mov	byte [bp-6],0
 33128 00005B30 C646FA00                	mov	Exec_Load_High,0
 33129                                  
 33130                                  	;mov	[bp-26],dx
 33131 00005B34 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33132                                  	;mov	[bp-24],ds
 33133 00005B37 8C5EE8                  	mov	ExecNameH,DS
 33134 00005B3A 89D6                    	mov	SI,DX			; move pointer to convenient place
 33135                                  	;invoke	DStrLen
 33136 00005B3C E8BAB6                  	call	DStrLen
 33137                                  	;mov	[bp-22],cx
 33138 00005B3F 894EEA                  	mov	ExecNameLen,CX		; save length
 33139                                  
 33140                                  	; MSDOS 6.0
 33141 00005B42 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33142 00005B46 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33143                                  
 33144 00005B4A 30C0                    	xor	AL,AL			; open for reading
 33145 00005B4C 55                      	push	BP
 33146                                  
 33147                                  	; MSDOS 6.0
 33148                                  	;or	byte [ss:DOS_FLAG],1
 33149 00005B4D 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33150                                  					; the redir that this open call is
 33151                                  					; due to an exec.
 33152                                  
 33153                                  	;invoke	$OPEN			; is the file there?
 33154 00005B53 E80513                  	call	_$OPEN
 33155                                  
 33156                                  	; MSDOS 6.0
 33157 00005B56 9C                      	pushf
 33158                                  	; 02/06/2019
 33159                                  	;and	byte [ss:DOS_FLAG],0FEh
 33160 00005B57 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33161 00005B5D 9D                      	popf
 33162                                  
 33163 00005B5E 5D                      	pop	BP
 33164                                  
 33165                                  	; MSDOS 3.3 & MSDOS 6.0
 33166 00005B5F 72AE                    	jc	short Exec_Ret_Err
 33167                                  
 33168                                  	;mov	[bp-8],ax
 33169 00005B61 8946F8                  	mov	Exec_FH,AX
 33170 00005B64 89C3                    	mov	BX,AX
 33171 00005B66 30C0                    	xor	AL,AL
 33172                                  	;invoke	$Ioctl
 33173 00005B68 E8D0C6                  	call	_$IOCTL
 33174 00005B6B 7207                    	jc	short Exec_BombJ
 33175                                  
 33176                                  	;test	dl,80h
 33177 00005B6D F6C280                  	test	DL,devid_ISDEV
 33178 00005B70 740A                    	jz	short Exec_Check_Environ
 33179                                  
 33180                                  	;mov	al,2
 33181 00005B72 B002                    	mov	AL,error_file_not_found
 33182                                  Exec_BombJ:
 33183 00005B74 E9CA00                  	jmp	Exec_Bomb
 33184                                  
 33185                                  BadEnv:
 33186                                  	;mov	al,0Ah
 33187 00005B77 B00A                    	mov	AL,error_bad_environment
 33188 00005B79 E9C500                  	jmp	Exec_Bomb
 33189                                  
 33190                                  Exec_Check_Environ:
 33191                                  	;mov	word [bp-18],0
 33192 00005B7C C746EE0000              	mov	Exec_Load_Block,0
 33193                                  	;mov	word [bp-14],0
 33194 00005B81 C746F20000              	mov	Exec_Environ,0
 33195                                  					; overlays... no environment
 33196                                  	;test	byte [bp-5],2
 33197 00005B86 F646FB02                	test	Exec_Func,exec_func_overlay
 33198 00005B8A 7552                    	jnz	short Exec_Read_Header
 33199                                  
 33200                                  	;lds	si,[bp-4]
 33201 00005B8C C576FC                  	lds	SI,Exec_Blk		; get block
 33202 00005B8F 8B04                    	mov	ax,[SI]
 33203                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33204 00005B91 09C0                    	or	AX,AX
 33205 00005B93 750C                    	jnz	short Exec_Scan_Env
 33206                                  
 33207 00005B95 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33208                                  	;mov	ax,[44]
 33209 00005B9A A12C00                  	mov	AX,[PDB.ENVIRON]
 33210                                  
 33211                                  ; MSDOS 6.0
 33212                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33213                                  ;
 33214                                  ; Exec_environ is being correctly initialized after the environment has been
 33215                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33216                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33217                                  ; parent's environment.
 33218                                  ;	mov	Exec_Environ,AX
 33219                                  ;
 33220                                  ;----------------------------------------------------------------------------
 33221                                  
 33222                                  	;mov	[bp-14],ax
 33223                                  	;mov	Exec_Environ,ax
 33224                                  
 33225 00005B9D 09C0                    	or	AX,AX
 33226 00005B9F 743D                    	jz	short Exec_Read_Header
 33227                                  
 33228                                  Exec_Scan_Env:
 33229 00005BA1 8EC0                    	mov	ES,AX
 33230 00005BA3 31FF                    	xor	DI,DI
 33231                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33232 00005BA5 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33233 00005BA8 30C0                    	xor	AL,AL
 33234                                  
 33235                                  Exec_Get_Environ_Len:
 33236 00005BAA F2AE                    	repnz	scasb			; find that nul byte
 33237 00005BAC 75C9                    	jnz	short BadEnv
 33238                                  
 33239 00005BAE 49                      	dec	CX			; Dec CX for the next nul byte test
 33240 00005BAF 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33241                                  
 33242 00005BB1 AE                      	scasb				; is there another nul byte?
 33243 00005BB2 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33244                                  
 33245 00005BB4 57                      	push	DI
 33246                                  	;lea	bx,[DI+11h]
 33247 00005BB5 8D5D11                  	lea	BX,[DI+0Fh+2]
 33248                                  	;add	bx,[bp-22]
 33249 00005BB8 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33250                                  					; remember argv[0] length
 33251                                  					; round up and remember argc
 33252 00005BBB B104                    	mov	CL,4
 33253 00005BBD D3EB                    	shr	BX,CL			; number of paragraphs needed
 33254 00005BBF 06                      	push	ES
 33255                                  	;invoke	$Alloc			; can we get the space?
 33256 00005BC0 E84406                  	call	_$ALLOC
 33257 00005BC3 1F                      	pop	DS
 33258 00005BC4 59                      	pop	CX
 33259                                  
 33260                                  	;jnc	short Exec_Save_Environ
 33261                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33262                                  	; 17/12/2022
 33263 00005BC5 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33264                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33265                                  	;jnc	short Exec_Save_Environ
 33266                                  	;jmp	SHORT Exec_No_Mem
 33267                                  
 33268                                  Exec_Save_Environ:
 33269 00005BC7 8EC0                    	mov	ES,AX
 33270                                  	;mov	[bp-14],ax
 33271 00005BC9 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33272 00005BCC 31F6                    	xor	SI,SI
 33273 00005BCE 89F7                    	mov	DI,SI
 33274 00005BD0 F3A4                    	rep	movsb			; copy the environment
 33275 00005BD2 B80100                  	mov	AX,1
 33276 00005BD5 AB                      	stosw
 33277                                  	;lds	si,[bp-26]
 33278 00005BD6 C576E6                  	lds	SI,ExecName
 33279                                  	;mov	cx,[bp-22]
 33280 00005BD9 8B4EEA                  	mov	CX,ExecNameLen
 33281 00005BDC F3A4                    	rep	movsb
 33282                                  
 33283                                  Exec_Read_Header:
 33284                                  	; We read in the program header into the above data area and
 33285                                  	; determine where in this memory the image will be located.
 33286                                  
 33287                                  	;Context DS
 33288 00005BDE 16                      	push	ss
 33289 00005BDF 1F                      	pop	ds
 33290                                  	;mov	cx,26
 33291 00005BE0 B91A00                  	mov	CX,exec_header_len	; header size
 33292 00005BE3 BA[C80F]                	mov	DX,exec_signature
 33293 00005BE6 06                      	push	ES
 33294 00005BE7 1E                      	push	DS
 33295 00005BE8 E88304                  	call	ExecRead
 33296 00005BEB 1F                      	pop	DS
 33297 00005BEC 07                      	pop	ES
 33298 00005BED 7250                    	jc	short Exec_Bad_File
 33299                                  
 33300 00005BEF 09C0                    	or	AX,AX
 33301 00005BF1 744C                    	jz	short Exec_Bad_File
 33302                                  	;cmp	ax,26
 33303 00005BF3 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33304 00005BF6 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33305                                  
 33306 00005BF8 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33307 00005BFE 7504                    	jnz	short Exec_Check_Sig
 33308                                  
 33309                                  	;mov	byte [bp-6],0FFh
 33310 00005C00 C646FAFF                	mov	Exec_Load_High,-1
 33311                                  
 33312                                  Exec_Check_Sig:
 33313 00005C04 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33314                                  	;cmp	ax,5A4Dh ; 'MZ'
 33315 00005C07 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33316 00005C0A 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33317                                  
 33318                                  	;cmp	ax,4D5Ah ; 'ZM'
 33319 00005C0C 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33320 00005C0F 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33321                                  
 33322                                  Exec_Com_Filej:
 33323 00005C11 E9E901                  	jmp	Exec_Com_File
 33324                                  
 33325                                  	; We have the program header... determine memory requirements
 33326                                  
 33327                                  Exec_Save_Start:
 33328 00005C14 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33329 00005C17 B105                    	mov	CL,5			; convert to paragraphs
 33330 00005C19 D3E0                    	shl	AX,CL
 33331 00005C1B 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33332                                  	;mov	[bp-12],ax
 33333 00005C1F 8946F4                  	mov	Exec_Res_Len_Para,AX
 33334                                  
 33335                                  		; Do we need to allocate memory?
 33336                                  		; Yes if function is not load-overlay
 33337                                  
 33338                                  	;test	byte [bp-5],2
 33339 00005C22 F646FB02                	test	Exec_Func,exec_func_overlay
 33340 00005C26 7445                    	jz	short Exec_Allocate	; allocation of space
 33341                                  
 33342                                  		; get load address from block
 33343                                  
 33344                                  	;les	di,[bp-4]
 33345 00005C28 C47EFC                  	les	DI,Exec_Blk
 33346 00005C2B 268B05                  	mov	ax,[es:di]
 33347                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33348                                  	;mov	[bp-20],ax
 33349 00005C2E 8946EC                  	mov	Exec_DMA,AX
 33350                                  
 33351                                  	; 17/12/2022
 33352                                  	;;mov	ax,[es:di+2]
 33353                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33354                                  	;;mov	[bp-10],ax
 33355                                  	;mov	Exec_Rel_Fac,AX
 33356                                  
 33357                                  	; 17/12/2022
 33358                                  	; 30/11/2022 (!most proper code!)
 33359                                  	;mov	dx,[es:di+2]
 33360 00005C31 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33361                                  	;mov	[bp-10],dx
 33362 00005C35 8956F6                  	mov	Exec_Rel_Fac,dx
 33363                                  	; ax = Exec_DMA
 33364 00005C38 E9DE00                  	jmp	Exec_Find_Res
 33365                                  
 33366                                  ; 17/12/2022
 33367                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33368                                  ; 27/09/2023
 33369                                  %if 0
 33370                                  	; 02/06/2019 - Retro DOS v4.0
 33371                                  	;mov	ax,[bp-20]  ; *+*
 33372                                  	mov	AX,Exec_DMA ; *+*
 33373                                  	; 10/08/2018
 33374                                  	jmp	Exec_Find_Res		; M000
 33375                                  %endif
 33376                                  
 33377                                  Exec_No_Mem:
 33378                                  	;mov	al,8
 33379 00005C3B B008                    	mov	AL,error_not_enough_memory
 33380 00005C3D EB02                    	jmp	short Exec_Bomb
 33381                                  
 33382                                  Exec_Bad_File:
 33383                                  	;mov	al,0Bh
 33384 00005C3F B00B                    	mov	AL,error_bad_format
 33385                                  
 33386                                  Exec_Bomb:
 33387                                  	;mov	bx,[bp-8]
 33388 00005C41 8B5EF8                  	mov	BX,Exec_FH
 33389 00005C44 E84004                  	call	Exec_Dealloc
 33390                                  	;LeaveCrit CritMem
 33391 00005C47 E8DEB6                  	call	LCritMEM
 33392                                  	;save	<AX,BP>
 33393 00005C4A 50                      	push	ax
 33394 00005C4B 55                      	push	bp
 33395                                  	;invoke	$CLOSE
 33396 00005C4C E83D0A                  	call	_$CLOSE
 33397                                  	;restore <BP,AX>
 33398 00005C4F 5D                      	pop	bp
 33399 00005C50 58                      	pop	ax
 33400 00005C51 E9BBFE                  	jmp	Exec_Ret_Err
 33401                                  
 33402                                  Exec_Chk_Mem: 
 33403                                  
 33404                                  	; 24/09/2023
 33405                                  	; ds = DOSDATA
 33406                                  ; 17/12/2022
 33407                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33408                                  ;%if 0
 33409                                  	; MSDOS 6.0    			; M063 - Start
 33410                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33411                                  	; 10/06/2019
 33412 00005C54 A0[0203]                	mov	al,[AllocMethod]
 33413                                  	;mov	bl,[ss:ALLOCMSAVE]
 33414 00005C57 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33415                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33416 00005C5B 881E[0203]              	mov	[AllocMethod],bl
 33417                                  	
 33418 00005C5F F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33419 00005C62 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33420                                  	;				; N: continue
 33421                                  	;
 33422 00005C64 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33423 00005C66 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33424                                  	; 02/06/2019
 33425                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33426 00005C68 A1[8A00]                	mov	ax,[SAVE_AX]
 33427                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33428                                  					; M063 - End
 33429 00005C6B EB2B                    	jmp	short Exec_Norm_Alloc1
 33430                                  ;%endif
 33431                                  
 33432                                  ; 17/12/2022
 33433                                  %if 0
 33434                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33435                                  	; MSDOS 6.0    			; M063 - Start
 33436                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33437                                  	mov	bl,[ss:ALLOCMSAVE]
 33438                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33439                                  
 33440                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33441                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33442                                  	;				; N: continue
 33443                                  	;
 33444                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33445                                  	jz	short Exec_No_Mem	; N: no memory 
 33446                                  
 33447                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33448                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33449                                  					; M063 - End
 33450                                  %endif
 33451                                  
 33452                                  Exec_Allocate:
 33453                                  	; 09/09/2018
 33454                                  
 33455                                  	; M005 - START
 33456                                  	; If there is no STACK segment for this exe file and if this
 33457                                  	; not an overlay and the resident size is less than 64K - 
 33458                                  	; 256 bytes we shall add 256 bytes to the programs 
 33459                                  	; resident memory requirement and set Exec_SP to this value.
 33460                                  	
 33461                                  	; 17/12/2022
 33462 00005C6D 29DB                    	sub	bx,bx ; 0	
 33463                                  
 33464                                  	; MSDOS 6.0
 33465                                  	;;mov	byte [bp-29],0
 33466                                  	;mov	Exec_NoStack,0
 33467                                  	; 17/12/2022
 33468 00005C6F 885EE3                  	mov	Exec_NoStack,bl ; 0
 33469 00005C72 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33470                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33471 00005C76 7511                    	jne	short ea1		; Y: continue normal processing
 33472 00005C78 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33473                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33474 00005C7C 750B                    	jne	short ea1		; Y: continue normal processing
 33475                                  
 33476                                  	;inc	byte [bp-29]
 33477 00005C7E FE46E3                  	inc	Exec_NoStack
 33478 00005C81 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33479 00005C84 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33480                                  
 33481 00005C86 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33482                                  ea1:
 33483                                  	; M005 - END
 33484                                  
 33485                                  	; MSDOS 6.0			; M000 - start
 33486                                  	; 20/05/2019
 33487                                  	; (ds = ss = DOSDATA)
 33488 00005C89 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33489                                  					; Q: is the alloc strat high_first
 33490 00005C8E 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33491                                  					; Y: set high_only bit
 33492 00005C90 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33493                                  					; M000 - end
 33494                                  Exec_Norm_Alloc:
 33495 00005C95 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33496                                  Exec_Norm_Alloc1:	; 02/06/2019
 33497                                  					; M000: attempt at allocating memory
 33498                                  	; MSDOS 3.3
 33499                                  	;push	ax			; M000
 33500                                  
 33501 00005C98 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33502 00005C9B 1E                      	push	DS
 33503                                  	;invoke	$Alloc			; should have carry set and BX has max
 33504 00005C9C E86805                  	call	_$ALLOC
 33505 00005C9F 1F                      	pop	DS
 33506                                  
 33507                                  	; MSDOS 6.0
 33508 00005CA0 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33509                                  	; MSDOS 3.3
 33510                                  	;pop	ax			; M000
 33511                                  
 33512 00005CA3 83C010                  	add	AX,10h			; room for header
 33513 00005CA6 83FB11                  	cmp	BX,11h			; enough room for a header
 33514                                  	; MSDOS 6.0
 33515 00005CA9 72A9                    	jb	short Exec_Chk_Mem	; M000
 33516                                  	; MSDOS 3.3	
 33517                                  	;jb	short Exec_No_Mem
 33518                                  
 33519 00005CAB 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33520                                  	; MSDOS 6.0
 33521 00005CAD 77A5                    	ja	short Exec_Chk_Mem	; M000
 33522                                  	; MSDOS 3.3
 33523                                  	;ja	short Exec_No_Mem
 33524                                  
 33525                                  	;test	byte [bp-6],0FFh
 33526 00005CAF F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33527 00005CB3 7518                    	jnz	short Exec_BX_Max	; use max
 33528                                  
 33529                                  	; 09/09/2018
 33530                                  
 33531 00005CB5 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33532                                  	; MSDOS 6.0
 33533 00005CB9 7299                    	jc	short Exec_Chk_Mem		; M000
 33534                                  	; MSDOS 3.3
 33535                                  	;jc	short Exec_No_Mem
 33536                                  
 33537 00005CBB 39D8                    	cmp	AX,BX			; enough space?
 33538                                  	; MSDOS 6.0
 33539 00005CBD 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33540                                  	; MSDOS 3.3
 33541                                  	;ja	short Exec_No_Mem
 33542                                  
 33543 00005CBF 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33544 00005CC3 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33545 00005CC7 7204                    	jc	short Exec_BX_Max
 33546                                  
 33547 00005CC9 39D8                    	cmp	AX,BX
 33548 00005CCB 7602                    	jbe	short Exec_Got_Block
 33549                                  
 33550                                  Exec_BX_Max:
 33551 00005CCD 89D8                    	mov	AX,BX
 33552                                  
 33553                                  Exec_Got_Block:
 33554                                  	; 03/08/2018 - Retro DOS v3.0
 33555                                  
 33556 00005CCF 1E                      	push	DS
 33557 00005CD0 89C3                    	mov	BX,AX
 33558                                  	;mov	[bp-16],bx
 33559 00005CD2 895EF0                  	mov	Exec_Size,BX
 33560                                  	;invoke	$Alloc			; get the space
 33561 00005CD5 E82F05                  	call	_$ALLOC
 33562 00005CD8 1F                      	pop	DS
 33563                                  	; MSDOS 6.0
 33564                                  	;jc	short Exec_Chk_Mem	; M000
 33565                                  	; MSDOS 3.3
 33566                                  	;;jc	short Exec_No_Mem
 33567                                  	; 20/05/2019
 33568 00005CD9 7303                    	jnc	short ea0
 33569 00005CDB E976FF                  	jmp	Exec_Chk_Mem
 33570                                  ea0:
 33571                                  	; MSDOS 6.0
 33572 00005CDE 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33573 00005CE2 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33574                                  
 33575                                  ;M029; Begin changes
 33576                                  ; This code does special handling for programs with no stack segment. If so,
 33577                                  ;check if the current block is larger than 64K. If so, we do not modify
 33578                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33579                                  ;case Exec_SS is not changed.
 33580                                  
 33581                                  	; MSDOS 6.0
 33582                                  	;cmp	byte [bp-29],0
 33583 00005CE6 807EE300                	cmp	Exec_NoStack,0
 33584                                  	;je	@f
 33585 00005CEA 7412                    	je	short ea2
 33586                                  
 33587 00005CEC 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33588                                  	;jae	@f			; Y: Exec_SP = 0
 33589 00005CF0 730C                    	jae	short ea2
 33590                                  
 33591                                  ;Make Exec_SP point at the top of the memory block
 33592                                  
 33593 00005CF2 B104                    	mov	cl,4
 33594 00005CF4 D3E3                    	shl	bx,cl			; get byte offset
 33595 00005CF6 81EB0001                	sub	bx,100h			; take care of PSP
 33596 00005CFA 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33597                                  ea2:
 33598                                  ;@@:
 33599                                  ;M029; end changes
 33600                                  
 33601                                  	;mov	[bp-18],ax
 33602 00005CFE 8946EE                  	mov	Exec_Load_Block,AX
 33603 00005D01 83C010                  	add	AX,10h
 33604                                  	;test	byte [bp-6],0FFh
 33605 00005D04 F646FAFF                	test	Exec_Load_High,-1
 33606 00005D08 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33607                                  
 33608                                  	;add	ax,[bp-16]
 33609 00005D0A 0346F0                  	add	AX,Exec_Size		; go to end
 33610                                  	;sub	ax,[bp-12]
 33611 00005D0D 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33612 00005D10 83E810                  	sub	AX,10h			; drop off pdb
 33613                                  
 33614                                  Exec_Use_AX:
 33615                                  	;mov	[bp-10],ax
 33616 00005D13 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33617                                  	;mov	[bp-20],ax
 33618 00005D16 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33619                                  
 33620                                  	; Determine the location in the file of the beginning of
 33621                                  	; the resident
 33622                                  
 33623                                  ; 17/12/2022
 33624                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33625                                  ;%if 0
 33626                                  
 33627                                  Exec_Find_Res:
 33628                                  	; MSDOS 6.0
 33629                                  	;;mov	dx,[bp-20]
 33630                                  	;mov	DX,Exec_DMA ; *+*
 33631                                  	;;mov	[bp-28],dx
 33632                                  	;mov	Exec_DMA_Save,DX
 33633                                  
 33634                                  	; 17/12/2022
 33635                                  	; AX = Exec_DMA
 33636                                  
 33637                                  	; 02/06/2019 - Retro DOS v4.0
 33638                                  	;mov	[bp-28],ax ; *+*
 33639 00005D19 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33640                                  
 33641                                  ;%endif
 33642                                  
 33643                                  ; 17/12/2022
 33644                                  %if 0
 33645                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33646                                  Exec_Find_Res:
 33647                                  	;mov	dx,[bp-20]
 33648                                  	mov	DX,Exec_DMA ; *+*
 33649                                  	;mov	[bp-28],dx
 33650                                  	mov	Exec_DMA_Save,DX
 33651                                  %endif
 33652                                  
 33653                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33654 00005D1C 8B16[D00F]              	mov	DX,[exec_par_dir]
 33655 00005D20 52                      	push	DX
 33656 00005D21 B104                    	mov	CL,4
 33657 00005D23 D3E2                    	shl	DX,CL			; low word of location
 33658 00005D25 58                      	pop	AX
 33659 00005D26 B10C                    	mov	CL,12
 33660 00005D28 D3E8                    	shr	AX,CL			; high word of location
 33661 00005D2A 89C1                    	mov	CX,AX			; CX <- high
 33662                                  
 33663                                  		; Read in the resident image (first, seek to it)
 33664                                  	;mov	bx,[bp-8]
 33665 00005D2C 8B5EF8                  	mov	BX,Exec_FH
 33666 00005D2F 1E                      	push	DS
 33667 00005D30 30C0                    	xor	AL,AL
 33668                                  	;invoke	$Lseek			; Seek to resident
 33669 00005D32 E8D30A                  	call	_$LSEEK
 33670 00005D35 1F                      	pop	DS
 33671 00005D36 7303                    	jnc	short Exec_Big_Read
 33672                                  
 33673 00005D38 E906FF                  	jmp	Exec_Bomb
 33674                                  
 33675                                  Exec_Big_Read:				; Read resident into memory
 33676                                  	;mov	bx,[bp-12]
 33677 00005D3B 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33678 00005D3E 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33679 00005D42 7203                    	jb	short Exec_Read_OK
 33680                                  
 33681 00005D44 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33682                                  
 33683                                  Exec_Read_OK:
 33684                                  	;sub	[bp-12],bx
 33685 00005D47 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33686 00005D4A 53                      	push	BX
 33687 00005D4B B104                    	mov	CL,4
 33688 00005D4D D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33689 00005D4F 89D9                    	mov	CX,BX			; Count in correct register
 33690 00005D51 1E                      	push	DS
 33691                                  	;mov	ds,[bp-20]
 33692 00005D52 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33693                                  
 33694 00005D55 31D2                    	xor	DX,DX
 33695 00005D57 51                      	push	CX			; Save our count
 33696 00005D58 E81303                  	call	ExecRead
 33697 00005D5B 59                      	pop	CX			; Get old count to verify
 33698 00005D5C 1F                      	pop	DS
 33699 00005D5D 7248                    	jc	short Exec_Bad_FileJ
 33700                                  
 33701 00005D5F 39C1                    	cmp	CX,AX			; Did we read enough?
 33702 00005D61 5B                      	pop	BX			; Get paragraph count back
 33703 00005D62 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33704                                  
 33705                                  	; The read did not match the request. If we are off by 512
 33706                                  	; bytes or more then the header lied and we have an error.
 33707                                  
 33708 00005D64 29C1                    	sub	CX,AX
 33709 00005D66 81F90002                	cmp	CX,512
 33710 00005D6A 733B                    	jae	short Exec_Bad_FileJ
 33711                                  
 33712                                  	; We've read in CX bytes... bump DTA location
 33713                                  
 33714                                  ExecCheckEnd:
 33715                                  	;add	[bp-20],bx
 33716 00005D6C 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33717                                  	;test	word [bp-12],0FFFFh
 33718 00005D6F F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33719 00005D74 75C5                    	jnz	short Exec_Big_Read
 33720                                  
 33721                                  	; The image has now been read in. We must perform relocation
 33722                                  	; to the current location.
 33723                                  
 33724                                  exec_do_reloc:
 33725                                  	;mov	cx,[bp-10]
 33726 00005D76 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33727 00005D79 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33728 00005D7C 01C8                    	add	AX,CX			; and relocate him
 33729 00005D7E A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33730                                  
 33731 00005D81 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33732 00005D84 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33733                                  
 33734 00005D87 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33735 00005D8B A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33736 00005D8E 8CC0                    	mov	AX,ES			; rms;NSS
 33737 00005D90 01C8                    	add	AX,CX			; relocated...
 33738 00005D92 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33739                                  
 33740 00005D95 31C9                    	xor	CX,CX
 33741 00005D97 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33742                                  	;mov	bx,[bp-8]
 33743 00005D9B 8B5EF8                  	mov	BX,Exec_FH
 33744 00005D9E 1E                      	push	DS
 33745 00005D9F 31C0                    	xor	AX,AX
 33746                                  	;invoke	$Lseek
 33747 00005DA1 E8640A                  	call	_$LSEEK
 33748 00005DA4 1F                      	pop	DS
 33749 00005DA5 7303                    	jnc	short exec_get_entries
 33750                                  
 33751                                  Exec_Bad_FileJ:
 33752 00005DA7 E995FE                  	jmp	Exec_Bad_File
 33753                                  
 33754                                  exec_get_entries:
 33755 00005DAA 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33756                                  
 33757                                  exec_read_reloc:
 33758 00005DAE 52                      	push	DX
 33759                                  	;mov	dx,OPENBUF
 33760 00005DAF BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33761                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33762                                  	;mov	cx,396 ; MSDOS 6.0
 33763 00005DB2 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33764 00005DB5 1E                      	push	DS
 33765 00005DB6 E8B502                  	call	ExecRead
 33766 00005DB9 07                      	pop	ES
 33767 00005DBA 5A                      	pop	DX
 33768 00005DBB 72EA                    	jc	short Exec_Bad_FileJ
 33769                                  
 33770                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33771                                  	;mov	cx,99 ;  MSDOS 6.0
 33772 00005DBD B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33773                                  					; Pointer to byte location in header
 33774                                  	;mov	di,OPENBUF
 33775 00005DC0 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33776                                  	;mov	si,[bp-10]
 33777 00005DC3 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33778                                  
 33779                                  exec_reloc_one:
 33780 00005DC6 09D2                    	or	DX,DX			; Any more entries?
 33781 00005DC8 7416                    	jz	short Exec_Set_PDBJ
 33782                                  
 33783                                  exec_get_addr:
 33784 00005DCA 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33785 00005DCD 8CD8                    	mov	AX,DS			; Relocate address of item
 33786                                  
 33787                                  	; MSDOS 6.0
 33788                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33789                                  	;add	ax,[bp-28]
 33790 00005DCF 0346E4                  	add	AX,Exec_DMA_Save
 33791                                  
 33792 00005DD2 8ED8                    	mov	DS,AX
 33793 00005DD4 0137                    	add	[BX],SI
 33794 00005DD6 83C704                  	add	DI,4
 33795 00005DD9 4A                      	dec	DX
 33796 00005DDA E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33797                                  
 33798                                  	; We've exhausted a single buffer's worth. Read in the next
 33799                                  	; piece of the relocation table.
 33800                                  
 33801 00005DDC 06                      	push	ES
 33802 00005DDD 1F                      	pop	DS
 33803 00005DDE EBCE                    	jmp	short exec_read_reloc
 33804                                  
 33805                                  Exec_Set_PDBJ:
 33806                                  	; MSDOS 6.0
 33807                                  	
 33808                                  	; We now determine if this is a buggy exe packed file and if 
 33809                                  	; so we patch in the right code. Note that fixexepatch will
 33810                                  	; point to a ret if dos loads low. The load segment as 
 33811                                  	; determined above will be in exec_dma_save
 33812                                  	
 33813 00005DE0 06                      	push	es
 33814 00005DE1 50                      	push	ax			; M030
 33815 00005DE2 51                      	push	cx			; M030
 33816                                  	;mov	es,[bp-28]
 33817 00005DE3 8E46E4                  	mov	es,Exec_DMA_Save
 33818 00005DE6 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33819 00005DEA 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33820 00005DEF 36FF16[F311]            	call	word [ss:FixExePatch]
 33821                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33822                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33823                                  	;call	word [ss:Rational386PatchPtr]
 33824 00005DF4 59                      	pop	cx			; M030
 33825 00005DF5 58                      	pop	ax			; M030
 33826 00005DF6 07                      	pop	es
 33827                                  
 33828 00005DF7 E9DE00                  	jmp	Exec_Set_PDB
 33829                                  
 33830                                  Exec_No_Memj:
 33831 00005DFA E93EFE                  	jmp	Exec_No_Mem
 33832                                  
 33833                                  	; we have a .COM file. First, determine if we are merely
 33834                                  	; loading an overlay.
 33835                                  
 33836                                  Exec_Com_File:
 33837                                  	;test	byte [bp-5],2
 33838 00005DFD F646FB02                	test	Exec_Func,exec_func_overlay
 33839 00005E01 742D                    	jz	short Exec_Alloc_Com_File
 33840                                  	;lds	si,[bp-4]
 33841 00005E03 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33842 00005E06 AD                      	lodsw				; get load address
 33843                                  	;mov	[bp-20],ax
 33844 00005E07 8946EC                  	mov	Exec_DMA,AX
 33845 00005E0A B8FFFF                  	mov	AX,0FFFFh
 33846 00005E0D EB63                    	jmp	short Exec_Read_Block	; read it all!
 33847                                  
 33848                                  Exec_Chk_Com_Mem:			
 33849                                  	; MSDOS 6.0	     		; M063 - Start
 33850 00005E0F 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33851 00005E13 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33852 00005E18 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33853 00005E1D F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33854 00005E20 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33855                                  					; N: continue
 33856                                  	
 33857 00005E22 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33858 00005E24 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33859                                  	
 33860                                  	;mov	ax,[bp-18]
 33861 00005E26 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33862 00005E29 31DB                    	xor	bx,bx			; M047: bx => free arena
 33863 00005E2B E87502                  	call	ChangeOwner		; M047: free this block
 33864                                  	
 33865 00005E2E EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33866                                  					; M063 - End
 33867                                  	
 33868                                  	; We must allocate the max possible size block (ick!)
 33869                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33870                                  	; size of block.
 33871                                  
 33872                                  Exec_Alloc_Com_File:
 33873                                  	; MSDOS 6.0			; M000 -start
 33874 00005E30 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33875                                  					; Q: is the alloc strat high_first
 33876 00005E36 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33877                                  					; Y: set high_only bit
 33878 00005E38 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33879                                  					; M000 - end
 33880                                  Exec_Norm_Com_Alloc:			; M000
 33881                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33882 00005E3E BBFFFF                  	mov	BX,0FFFFh
 33883                                  	;invoke	$Alloc			; largest piece available as error
 33884 00005E41 E8C303                  	call	_$ALLOC
 33885 00005E44 09DB                    	or	BX,BX
 33886                                  	; MSDOS 6.0
 33887 00005E46 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33888                                  	; MSDOS 3.3
 33889                                  	;jz	short Exec_No_Memj
 33890                                  
 33891                                  	;mov	[bp-16],bx
 33892 00005E48 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33893 00005E4B 53                      	push	BX
 33894                                  	;invoke	$ALLOC			; largest piece available
 33895 00005E4C E8B803                  	call	_$ALLOC
 33896 00005E4F 5B                      	pop	BX			; get size of block...
 33897                                  	;mov	[bp-18],ax
 33898 00005E50 8946EE                  	mov	Exec_Load_Block,AX
 33899                                  
 33900 00005E53 83C010                  	add	AX,10h			; increment for header
 33901                                  	;mov	[bp-20],ax
 33902 00005E56 8946EC                  	mov	Exec_DMA,AX
 33903                                  
 33904 00005E59 31C0                    	xor	AX,AX			; presume 64K read...
 33905 00005E5B 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33906 00005E5F 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33907                                  
 33908 00005E61 89D8                    	mov	AX,BX			; convert size to bytes
 33909 00005E63 B104                    	mov	CL,4
 33910 00005E65 D3E0                    	shl	AX,CL
 33911                                  	; 17/12/2022
 33912                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33913                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33914                                  	; MSDOS 5.0
 33915                                  	;cmp	AX,100h   
 33916                                  	; 02/06/2019 - Retro DOS v4.0
 33917                                  	; MSDOS 6.0
 33918                                          ; 17/12/2022
 33919 00005E67 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33920 00005E6A 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33921                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33922                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33923                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33924                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33925                                  
 33926                                  					; M047: size of the block is < 64K
 33927 00005E6C 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33928                                  
 33929                                  Exec_Read_Com:
 33930                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33931 00005E6F 2D0001                  	sub	AX,100h 		; remember size of psp
 33932                                  Exec_Read_Block:
 33933 00005E72 50                      	push	AX			; save number to read
 33934                                  	;mov	bx,[bp-8]
 33935 00005E73 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33936 00005E76 31C9                    	xor	CX,CX			; but seek to 0:0
 33937 00005E78 89CA                    	mov	DX,CX
 33938 00005E7A 31C0                    	xor	AX,AX			; seek relative to beginning
 33939                                  	;invoke	$Lseek			; back to beginning of file
 33940 00005E7C E88909                  	call	_$LSEEK
 33941 00005E7F 59                      	pop	CX			; number to read
 33942                                  	;mov	ds,[bp-20]
 33943 00005E80 8E5EEC                  	mov	DS,Exec_DMA
 33944 00005E83 31D2                    	xor	DX,DX
 33945 00005E85 51                      	push	CX
 33946 00005E86 E8E501                  	call	ExecRead
 33947 00005E89 5E                      	pop	SI			; get number of bytes to read
 33948 00005E8A 7303                    	jnc	short OkRead
 33949 00005E8C E9B0FD                  	jmp	Exec_Bad_File
 33950                                  
 33951                                  	; 10/09/2018
 33952                                  OkRead:
 33953 00005E8F 39F0                    	cmp	AX,SI			; did we read them all?
 33954                                  	; MSDOS 6.0
 33955                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33956                                  	; MSDOS 3.3
 33957                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33958 00005E91 7503                    	jne	short OkRead2
 33959 00005E93 E979FF                  	jmp	Exec_Chk_Com_Mem
 33960                                  OkRead2:
 33961                                  	; MSDOS 6.0
 33962 00005E96 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33963 00005E9B 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33964                                  
 33965                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33966                                  	;test	byte [bp-5],2
 33967 00005EA0 F646FB02                	test	Exec_Func,exec_func_overlay
 33968 00005EA4 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33969                                  
 33970                                  	;mov	ax,[bp-20]
 33971 00005EA6 8B46EC                  	mov	AX,Exec_DMA
 33972 00005EA9 83E810                  	sub	AX,10h
 33973 00005EAC 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33974 00005EB0 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33975                                  
 33976                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33977                                  	; of 0 on stack.
 33978                                  
 33979 00005EB7 81C6FE00                	add	SI,0FEh 		; make room for stack
 33980                                  
 33981                                  	; MSDOS 6.0
 33982 00005EBB 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33983 00005EBE 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33984 00005EC0 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33985                                  
 33986                                  Exec_St_Ok:
 33987                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33988 00005EC4 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33989 00005EC9 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33990 00005ECD 8ED8                    	mov	DS,AX
 33991 00005ECF C7040000                	mov	WORD [SI],0		; 0 for return
 33992                                  
 33993                                  	; MSDOS 6.0
 33994                                  
 33995                                  	; M068
 33996                                  	;
 33997                                  	; We now determine if this is a Copy Protected App. If so the 
 33998                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33999                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34000                                  
 34001 00005ED3 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34002                                  
 34003                                  Exec_Set_PDB:
 34004                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34005                                  	;mov	bx,[bp-8]
 34006 00005ED8 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34007 00005EDB E8A901                  	call	Exec_Dealloc
 34008 00005EDE 55                      	push	BP
 34009                                  	;invoke	$Close			; release the jfn
 34010 00005EDF E8AA07                  	call	_$CLOSE
 34011 00005EE2 5D                      	pop	BP
 34012 00005EE3 E89301                  	call	Exec_Alloc
 34013                                  	;test	byte [bp-5],2
 34014 00005EE6 F646FB02                	test	Exec_Func,exec_func_overlay
 34015 00005EEA 743A                    	jz	short Exec_Build_Header
 34016                                  
 34017                                  	; MSDOS 6.0
 34018 00005EEC E8C201                  	call	Scan_Execname
 34019 00005EEF E8D601                  	call	Scan_Special_Entries
 34020                                  ;SR;
 34021                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34022                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34023                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34024                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34025                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34026                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34027                                  ;issues the version check, it gets the lie version until the next overlay
 34028                                  ;call is issued.
 34029                                  
 34030 00005EF2 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34031 00005EF8 7426                    	je	short norm_ovl		;yes, no special handling
 34032 00005EFA 56                      	push	si
 34033 00005EFB 06                      	push	es
 34034 00005EFC 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34035                                  	 
 34036                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34037 00005F01 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34038 00005F05 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34039                                  	
 34040 00005F07 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34041 00005F0C 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34042 00005F11 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34043                                  		;;; PDB.VERSION
 34044 00005F16 EB06                    	jmp	short setver_done
 34045                                  sysinit_done:
 34046 00005F18 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34047                                  setver_done:
 34048 00005F1E 07                      	pop	es
 34049 00005F1F 5E                      	pop	si
 34050                                  norm_ovl:
 34051                                  	;leave
 34052 00005F20 89EC                    	mov	sp,bp		
 34053 00005F22 5D                      	pop	bp
 34054                                  
 34055                                  	;transfer SYS_RET_OK		; overlay load -> done
 34056 00005F23 E911A7                  	jmp	SYS_RET_OK
 34057                                  
 34058                                  Exec_Build_Header:
 34059                                  	;mov	dx,[bp-18]
 34060 00005F26 8B56EE                  	mov	DX,Exec_Load_Block
 34061                                  					; assign the space to the process
 34062                                  	;mov	si,1
 34063 00005F29 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34064                                  	;mov	ax,[bp-14]
 34065 00005F2C 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34066 00005F2F 09C0                    	or	AX,AX
 34067 00005F31 7405                    	jz	short No_Owner		; no environment
 34068                                  
 34069 00005F33 48                      	dec	AX			; point to header
 34070 00005F34 8ED8                    	mov	DS,AX
 34071 00005F36 8914                    	mov	[SI],DX 		; assign ownership
 34072                                  No_Owner:
 34073                                  	;mov	ax,[bp-18]
 34074                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34075                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34076                                  	; 17/12/2022
 34077 00005F38 89D0                    	mov	ax,dx ; 06/06/2019
 34078                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34079                                  	
 34080 00005F3A 48                      	dec	AX
 34081 00005F3B 8ED8                    	mov	DS,AX			; point to header
 34082 00005F3D 8914                    	mov	[SI],DX 		; assign ownership
 34083                                  
 34084                                  	; MSDOS 6.0
 34085 00005F3F 1E                      	push	DS			;AN000;MS. make ES=DS
 34086 00005F40 07                      	pop	ES			;AN000;MS.
 34087                                  	;mov	di,8
 34088 00005F41 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34089 00005F44 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34090                                  					;	   ds:si->name, cx=name length
 34091 00005F47 51                      	push	CX			;AN007;;MS. save for fake version
 34092 00005F48 56                      	push	SI			;AN007;;MS. save for fake version
 34093                                  
 34094                                  MoveName:				;AN000;
 34095 00005F49 AC                      	lodsb				;AN000;;MS. get char
 34096 00005F4A 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34097 00005F4C 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34098                                  					;AN000;
 34099 00005F4E AA                      	stosb				;AN000;;MS. move char
 34100                                  					; MSKK bug fix - limit length copied
 34101 00005F4F 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34102 00005F52 7302                    	jae	short Mem_Done		; jump if so
 34103                                  	;
 34104 00005F54 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34105                                  Mem_Done:				;AN000;
 34106 00005F56 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34107                                  	;cmp	di,16
 34108 00005F58 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34109 00005F5B 7301                    	jae	short Fill8		;AN000;MS.
 34110                                  	
 34111 00005F5D AA                      	stosb				;AN000;MS.
 34112                                  	
 34113                                  Fill8:					;AN000;
 34114 00005F5E 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34115 00005F5F 59                      	pop	CX			;AN007;MS.
 34116                                  	
 34117 00005F60 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34118                                  
 34119                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34120 00005F63 52                      	push	DX
 34121                                  	;mov	si,[bp-16]
 34122 00005F64 8B76F0                  	mov	SI,Exec_Size
 34123 00005F67 01D6                    	add	SI,DX
 34124                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34125 00005F69 E82BB1                  	call	_$DUP_PDB
 34126 00005F6C 5A                      	pop	DX
 34127                                  
 34128                                  	;push	word [bp-14]
 34129 00005F6D FF76F2                  	push	Exec_Environ
 34130                                  	;pop	WORD [ES:2Ch]
 34131 00005F70 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34132                                  
 34133                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34134                                  					; version number in PSP
 34135 00005F75 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34136 00005F7A 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34137                                  		; PDB.VERSION
 34138                                  
 34139                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34140                                  	;lds	si,[bp-4]
 34141 00005F7F C576FC                  	lds	SI,Exec_Blk		; get the block
 34142 00005F82 1E                      	push	DS			; save its location
 34143 00005F83 56                      	push	SI
 34144                                  	;lds	si,[si+6]
 34145 00005F84 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34146                                  
 34147                                  	; DS points to user space 5C FCB
 34148                                  
 34149 00005F87 B90C00                  	mov	CX,12			; copy drive, name and ext
 34150 00005F8A 51                      	push	CX
 34151 00005F8B BF5C00                  	mov	DI,5Ch
 34152 00005F8E 8A1C                    	mov	BL,[SI]
 34153 00005F90 F3A4                    	rep	movsb
 34154                                  
 34155                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34156                                  
 34157 00005F92 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34158 00005F94 AB                      	stosw
 34159 00005F95 AB                      	stosw
 34160                                  
 34161                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34162                                  
 34163 00005F96 59                      	pop	CX
 34164 00005F97 5E                      	pop	SI			; get block
 34165 00005F98 1F                      	pop	DS
 34166 00005F99 1E                      	push	DS			; save (again)
 34167 00005F9A 56                      	push	SI
 34168                                  	;lds	si,[si+0Ah]
 34169 00005F9B C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34170                                  
 34171                                  	; DS points to user space 6C FCB
 34172                                  
 34173 00005F9E 8A3C                    	mov	BH,[SI] 		; do same as above
 34174 00005FA0 F3A4                    	rep	movsb
 34175 00005FA2 AB                      	stosw
 34176 00005FA3 AB                      	stosw
 34177 00005FA4 5E                      	pop	SI			; get block (last time)
 34178 00005FA5 1F                      	pop	DS
 34179                                  	;ld	si,[si+2]
 34180 00005FA6 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34181                                  
 34182                                  	; DS points to user space 80 command line
 34183                                  
 34184 00005FA9 80C980                  	or	CL,80h
 34185 00005FAC 89CF                    	mov	DI,CX
 34186 00005FAE F3A4                    	rep	movsb			; Wham!
 34187                                  
 34188                                  	; Process BX into default AX (validity of drive specs on args).
 34189                                  	; We no longer care about DS:SI.
 34190                                  
 34191 00005FB0 FEC9                    	dec	CL			; get 0FFh in CL
 34192 00005FB2 88F8                    	mov	AL,BH
 34193 00005FB4 30FF                    	xor	BH,BH
 34194                                  	;invoke	GetVisDrv
 34195 00005FB6 E8400A                  	call	GetVisDrv
 34196 00005FB9 7302                    	jnc	short Exec_BL
 34197                                  
 34198 00005FBB 88CF                    	mov	BH,CL
 34199                                  
 34200                                  Exec_BL:
 34201 00005FBD 88D8                    	mov	AL,BL
 34202 00005FBF 30DB                    	xor	BL,BL
 34203                                  	;invoke	GetVisDrv
 34204 00005FC1 E8350A                  	call	GetVisDrv
 34205 00005FC4 7302                    	jnc	short Exec_Set_Return
 34206                                  
 34207 00005FC6 88CB                    	mov	BL,CL
 34208                                  
 34209                                  Exec_Set_Return:
 34210                                  	;invoke	Get_User_Stack			; get his return address
 34211 00005FC8 E8B6A4                  	call	Get_User_Stack
 34212                                  
 34213                                  	;push	word [si+14h]
 34214 00005FCB FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34215                                  	;push	word [si+12h]
 34216 00005FCE FF7412                  	push	word [SI+user_env.user_IP]
 34217                                  	;push	word [si+14h]
 34218 00005FD1 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34219                                  	;push	word [si+12h]
 34220 00005FD4 FF7412                  	push	word [SI+user_env.user_IP]
 34221                                  	;pop	word [ES:0Ah]
 34222 00005FD7 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34223                                  	;pop	word [ES:0Ch]
 34224 00005FDC 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34225                                  
 34226 00005FE1 31C0                    	xor	AX,AX
 34227 00005FE3 8ED8                    	mov	DS,AX
 34228                                  					; save them where we can get them
 34229                                  					; later when the child exits.
 34230                                  	;pop	word [88h]
 34231 00005FE5 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34232                                  	;pop	word [90h]
 34233 00005FE9 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34234                                  
 34235 00005FED 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34236 00005FF4 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34237 00005FF9 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34238                                  
 34239                                  	;test	byte [bp-5],1
 34240 00005FFE F646FB01                	test	Exec_Func,exec_func_no_execute
 34241 00006002 7427                    	jz	short exec_go
 34242                                  
 34243 00006004 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34244                                  	;les	di,[bp-4]
 34245 00006009 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34246                                  	;mov	[es:di+10h],ds
 34247 0000600C 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34248                                  
 34249 00006010 4E                      	dec	SI			; 'push' default AX
 34250 00006011 4E                      	dec	SI
 34251 00006012 891C                    	mov	[SI],BX 		; save default AX reg
 34252                                  	;mov	[es:di+0Eh], si
 34253 00006014 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34254                                  
 34255 00006018 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34256                                  	;mov	[es:di+14h],ds
 34257 0000601D 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34258                                  	;mov	[es:di+12h],ax
 34259 00006021 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34260                                  	
 34261                                  	;leave
 34262 00006025 89EC                    	mov	sp,bp
 34263 00006027 5D                      	pop	bp	
 34264                                  
 34265                                  	;transfer SYS_RET_OK
 34266 00006028 E90CA6                  	jmp	SYS_RET_OK
 34267                                  
 34268                                  exec_go:
 34269 0000602B 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34270 00006030 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34271 00006035 8CC0                    	mov	AX,ES
 34272                                  
 34273                                  	; MSDOS 6.0
 34274 00006037 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34275 0000603D 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34276                                  
 34277 0000603F 1E                      	push	ds			; Y: control must go to low mem stub
 34278                                  		
 34279 00006040 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34280                                  					;    control to user 
 34281 00006045 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34282                                  					; M004: Set bit to signal int 21
 34283                                  					; ah = 25 & ah= 49. See dossym.inc 
 34284                                  					; under TAG M003 & M009 for 
 34285                                  					; explanation
 34286 0000604A 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34287                                  					; M068: going to be turned OFF.
 34288                                  	
 34289 0000604E 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34290 00006050 1F                      	pop	ds
 34291                                  	
 34292 00006051 50                      	push	ax			; ret far into the low mem stub
 34293 00006052 B8[FB10]                	mov	ax,disa20_xfer
 34294 00006055 50                      	push	ax
 34295 00006056 8CC0                    	mov	AX,ES			; restore ax
 34296 00006058 CB                      	retf
 34297                                  
 34298                                  Xfer_To_User:
 34299                                  	; DS:SI points to entry point
 34300                                  	; AX:DI points to initial stack
 34301                                  	; DX has PDB pointer
 34302                                  	; BX has initial AX value
 34303                                  
 34304 00006059 FA                      	cli
 34305                                  	; 15/08/2018
 34306 0000605A 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34307                                  
 34308 00006060 8ED0                    	mov	SS,AX			; set up user's stack
 34309 00006062 89FC                    	mov	SP,DI			; and SP
 34310 00006064 FB                      	sti
 34311                                  
 34312 00006065 1E                      	push	DS			; fake long call to entry
 34313 00006066 56                      	push	SI
 34314 00006067 8EC2                    	mov	ES,DX			; set up proper seg registers
 34315 00006069 8EDA                    	mov	DS,DX
 34316 0000606B 89D8                    	mov	AX,BX			; set up proper AX
 34317                                  
 34318 0000606D CB                      	retf
 34319                                  
 34320                                  ; 04/08/2018 - Retro DOS v3.0
 34321                                  
 34322                                  ;----------------------------------------------------------------------------
 34323                                  ;
 34324                                  ;----------------------------------------------------------------------------
 34325                                  
 34326                                  ExecRead:
 34327 0000606E E81600                  	CALL	Exec_Dealloc
 34328                                  	;mov	bx,[bp-8]
 34329 00006071 8B5EF8                  	MOV	bx,Exec_FH
 34330                                  
 34331 00006074 55                      	PUSH	BP
 34332 00006075 E82507                  	call	_$READ
 34333 00006078 5D                      	POP	BP
 34334                                  
 34335                                  	;CALL	Exec_Alloc
 34336                                  	;retn
 34337                                  	; 18/12/2022
 34338                                  	;jmp	short Exec_Alloc
 34339                                  
 34340                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34341                                  
 34342                                  ;----------------------------------------------------------------------------
 34343                                  ;
 34344                                  ;----------------------------------------------------------------------------
 34345                                  
 34346                                  Exec_Alloc:
 34347 00006079 53                      	push	BX
 34348                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34349                                  	; 20/05/2019 - Retro DOS v4.0
 34350                                  	; MSDOS 6.0
 34351 0000607A 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34352 0000607F E81000                  	call	ChangeOwners
 34353 00006082 E8A3B2                  	call	LCritMEM
 34354 00006085 5B                      	pop	BX
 34355 00006086 C3                      	retn
 34356                                  
 34357                                  ;----------------------------------------------------------------------------
 34358                                  ;
 34359                                  ;----------------------------------------------------------------------------
 34360                                  
 34361                                  Exec_Dealloc:
 34362 00006087 53                      	push	BX
 34363                                  	;mov	bx,0
 34364 00006088 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34365 0000608A E880B2                  	call	ECritMEM
 34366 0000608D E80200                  	call	ChangeOwners
 34367 00006090 5B                      	pop	BX
 34368 00006091 C3                      	retn
 34369                                  
 34370                                  ; 18/12/2022
 34371                                  %if 0
 34372                                  ;----------------------------------------------------------------------------
 34373                                  ;
 34374                                  ;----------------------------------------------------------------------------
 34375                                  
 34376                                  Exec_Alloc:
 34377                                  	push	BX
 34378                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34379                                  	; 20/05/2019 - Retro DOS v4.0
 34380                                  	; MSDOS 6.0
 34381                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34382                                  	call	ChangeOwners
 34383                                  	call	LCritMEM
 34384                                  	pop	BX
 34385                                  	retn
 34386                                  
 34387                                  %endif
 34388                                  
 34389                                  ;----------------------------------------------------------------------------
 34390                                  ;
 34391                                  ;----------------------------------------------------------------------------
 34392                                  
 34393                                  ChangeOwners:
 34394 00006092 9C                      	pushf
 34395 00006093 50                      	push	AX
 34396                                  	;mov	ax,[bp-14]
 34397 00006094 8B46F2                  	mov	AX,Exec_Environ
 34398 00006097 E80900                  	call	ChangeOwner
 34399                                  	;mov	ax,[bp-18]
 34400 0000609A 8B46EE                  	mov	AX,Exec_Load_Block
 34401 0000609D E80300                  	call	ChangeOwner
 34402 000060A0 58                      	pop	AX
 34403 000060A1 9D                      	popf
 34404                                  chgown_retn:
 34405 000060A2 C3                      	retn
 34406                                  
 34407                                  ;----------------------------------------------------------------------------
 34408                                  ;
 34409                                  ;----------------------------------------------------------------------------
 34410                                  
 34411                                  ChangeOwner:
 34412 000060A3 09C0                    	or	AX,AX			; is area allocated?
 34413 000060A5 74FB                    	jz	short chgown_retn	; no, do nothing
 34414 000060A7 48                      	dec	AX
 34415 000060A8 1E                      	push	DS
 34416 000060A9 8ED8                    	mov	DS,AX
 34417 000060AB 891E0100                	mov	[ARENA.OWNER],BX
 34418 000060AF 1F                      	pop	DS
 34419 000060B0 C3                      	retn
 34420                                  
 34421                                  ;----------------------------------------------------------------------------
 34422                                  ;
 34423                                  ;----------------------------------------------------------------------------
 34424                                  
 34425                                  ; 20/05/2019 - Retro DOS v4.0
 34426                                  
 34427                                  	; MSDOS 6.0
 34428                                  Scan_Execname:
 34429 000060B1 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34430                                  Scan_Execname1:				; M028
 34431                                  Save_Begin:				;
 34432 000060B4 89F1                    	mov	CX,SI			; CX= starting addr
 34433                                  Scan0:					;
 34434 000060B6 AC                      	lodsb				; get char
 34435                                  
 34436 000060B7 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34437 000060B9 74F9                    	jz	short Save_Begin	; yes, save si
 34438 000060BB 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34439 000060BD 74F5                    	jz	short Save_Begin	; yes, save si
 34440 000060BF 3C00                    	cmp	AL,0			; is end of name
 34441 000060C1 75F3                    	jnz	short Scan0		; no, continue scanning
 34442 000060C3 29CE                    	sub	SI,CX			; get name's length
 34443 000060C5 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34444                                  
 34445 000060C7 C3                      	retn
 34446                                  
 34447                                  ;----------------------------------------------------------------------------
 34448                                  ;
 34449                                  ;----------------------------------------------------------------------------
 34450                                  
 34451                                  ; 20/05/2019 - Retro DOS v4.0
 34452                                  
 34453                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34454                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34455                                  
 34456                                  	; MSDOS 6.0
 34457                                  
 34458                                  Scan_Special_Entries:
 34459                                  
 34460 000060C8 49                      	dec	CX			; cx= name length
 34461                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34462                                  					;reset to current version
 34463                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34464                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34465                                  	;mov	word [ss:SPECIAL_VERSION],5
 34466                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34467                                  
 34468                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34469 000060C9 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34470                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34471                                  				; 24/09/2023
 34472                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34473                                  ;***	call	Reset_Version
 34474                                  
 34475                                  ;M060	push	SS
 34476                                  ;M060	pop	ES
 34477                                  
 34478 000060D0 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34479 000060D5 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34480 000060D7 09F8                    	or	AX,DI			;M060; be sure the table exists
 34481 000060D9 7427                    	jz	short End_List		;M060; If ZR then no table
 34482                                  
 34483                                  GetEntries:
 34484 000060DB 268A05                  	mov	AL,[ES:DI]		; end of list
 34485 000060DE 08C0                    	or	AL,AL
 34486 000060E0 7420                    	jz	short End_List		; yes
 34487                                  
 34488 000060E2 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34489 000060E7 38C8                    	cmp	AL,CL			; same length ?
 34490 000060E9 751B                    	jnz	short SkipOne 		; no
 34491                                  
 34492 000060EB 47                      	inc	DI			; es:di -> special name
 34493 000060EC 51                      	push	CX			; save length and name addr
 34494 000060ED 56                      	push	SI
 34495                                  
 34496                                  ; M050 - BEGIN
 34497                                  
 34498 000060EE 50                      	push	ax			; save len
 34499                                  sse_next_char:
 34500 000060EF AC                      	lodsb
 34501 000060F0 E8D1EE                  	call	UCase
 34502 000060F3 AE                      	scasb
 34503 000060F4 750D                    	jne	short Not_Matched
 34504 000060F6 E2F7                    	loop	sse_next_char
 34505                                  	
 34506                                  ;	repz	cmpsb			; same name ?
 34507                                  ;	jnz	short Not_Matched	; no
 34508                                  
 34509 000060F8 58                      	pop	ax			; take len off the stack
 34510                                  
 34511                                  ; M050 - END
 34512                                  
 34513 000060F9 268B05                  	mov	AX,[ES:DI]		; get special version
 34514 000060FC 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34515                                  
 34516                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34517                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34518                                  
 34519 00006100 5E                      	pop	SI
 34520 00006101 59                      	pop	CX
 34521                                  	; 18/12/2022
 34522                                  	;jmp	SHORT End_List
 34523                                  
 34524                                  	; 18/12/2022
 34525                                  End_List:
 34526 00006102 C3                      	retn
 34527                                  
 34528                                  Not_Matched:
 34529 00006103 58                      	pop	ax			; get len from stack ; M050
 34530 00006104 5E                      	pop	SI			; restore si,cx
 34531 00006105 59                      	pop	CX
 34532                                  
 34533                                  SkipOne:
 34534 00006106 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34535 0000610B 30E4                    	xor	AH,AH			; position to next entry
 34536 0000610D 01C7                    	add	DI,AX
 34537                                  
 34538 0000610F 83C703                  	add	DI,3			; DI -> next entry length
 34539                                  ;***	add	DI,4			; DI -> next entry length
 34540                                  
 34541 00006112 EBC7                    	jmp	short GetEntries
 34542                                  
 34543                                  	; 18/12/2022
 34544                                  ;End_List:
 34545                                  	;retn
 34546                                  
 34547                                  ; 04/08/2018 - Retro DOS v3.0
 34548                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34549                                  
 34550                                  ;----------------------------------------------------------------------------
 34551                                  ;SUBTTL Terminate and stay resident handler
 34552                                  ;
 34553                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34554                                  ;	    truncate the current block.
 34555                                  ;
 34556                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34557                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34558                                  ;	    and restoring the vectors.
 34559                                  ;
 34560                                  ;----------------------------------------------------------------------------
 34561                                  
 34562                                  	; 20/05/2019 - Retro DOS v4.0
 34563                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34564                                  
 34565                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34566                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34567                                  
 34568                                  _$KEEP_PROCESS:
 34569 00006114 50                      	push	AX			; keep exit code around
 34570                                  	;mov	byte [SS:EXIT_TYPE],3
 34571 00006115 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34572 0000611B 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34573 00006120 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34574 00006123 7303                    	jae	short Keep_Shrink	; info
 34575                                  
 34576 00006125 BA0600                  	mov	DX,6h
 34577                                  
 34578                                  Keep_Shrink:
 34579 00006128 89D3                    	mov	BX,DX
 34580 0000612A 53                      	push	BX
 34581 0000612B 06                      	push	ES
 34582 0000612C E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34583 0000612F 1F                      	pop	DS
 34584 00006130 5B                      	pop	BX
 34585 00006131 7207                    	jc	short Keep_Done		; failed on modification
 34586                                  
 34587 00006133 8CD8                    	mov	AX,DS
 34588 00006135 01D8                    	add	AX,BX
 34589                                  	;mov	[2],ax
 34590 00006137 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34591                                  
 34592                                  Keep_Done:
 34593 0000613A 58                      	pop	AX
 34594 0000613B EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34595                                  
 34596                                  ;----------------------------------------------------------------------------
 34597                                  ;
 34598                                  ;----------------------------------------------------------------------------
 34599                                  
 34600                                  STAY_RESIDENT:
 34601                                  	;mov	ax,3100h
 34602 0000613D B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34603 00006140 83C20F                  	add	DX,15
 34604 00006143 D1DA                    	rcr	DX,1
 34605 00006145 B103                    	mov	CL,3
 34606 00006147 D3EA                    	shr	DX,CL
 34607                                  
 34608 00006149 E9BCA1                  	jmp	COMMAND
 34609                                  
 34610                                  ;----------------------------------------------------------------------------
 34611                                  ;SUBTTL $EXIT - return to parent process
 34612                                  ;   Assembler usage:
 34613                                  ;	    MOV     AL, code
 34614                                  ;	    MOV     AH, Exit
 34615                                  ;	    INT     int_command
 34616                                  ;   Error return:
 34617                                  ;	    None.
 34618                                  ;
 34619                                  ;----------------------------------------------------------------------------
 34620                                  
 34621                                  	; 20/05/2019 - Retro DOS v4.0
 34622                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34623                                  
 34624                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34625                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34626                                  _$EXIT:
 34627                                  	; 04/08/2018 - Retro DOS v3.0
 34628                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34629 0000614C 30E4                    	xor	AH,AH
 34630 0000614E 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34631 00006153 08E4                    	or	AH,AH
 34632                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34633 00006155 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34634 0000615B 7406                    	jz	short exit_inner
 34635                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34636 0000615D 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34637                                  
 34638                                  	;entry	Exit_inner
 34639                                  exit_inner:
 34640 00006163 E81BA3                  	call	Get_User_Stack		;PBUGBUG
 34641                                  
 34642 00006166 36FF36[3003]            	push	word [ss:CurrentPDB]
 34643                                  	;pop	word [si+14h]
 34644 0000616B 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34645 0000616E EB08                    	jmp	short abort_inner
 34646                                  
 34647                                  ;BREAK <$ABORT -- Terminate a process>
 34648                                  ;----------------------------------------------------------------------------
 34649                                  ; Inputs:
 34650                                  ;	user_CS:00 must point to valid program header block
 34651                                  ; Function:
 34652                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34653                                  ;	to the terminate address
 34654                                  ; Returns:
 34655                                  ;	TO THE TERMINATE ADDRESS
 34656                                  ;----------------------------------------------------------------------------
 34657                                  
 34658                                  _$ABORT:
 34659 00006170 30C0                    	xor	AL,AL
 34660                                  	;mov	byte [SS:EXIT_TYPE],0
 34661                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34662 00006172 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34663                                  
 34664                                  	; abort_inner must have AL set as the exit code! The exit type
 34665                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34666                                  	; to be correct as the one that is terminating.
 34667                                  
 34668                                  abort_inner:
 34669 00006178 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34670 0000617D 36A3[3403]              	mov	[SS:exit_code],AX
 34671 00006181 E8FDA2                  	call	Get_User_Stack
 34672                                  
 34673                                  	;mov	ds,[si+14h]
 34674 00006184 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34675 00006187 31C0                    	xor	AX,AX
 34676 00006189 8EC0                    	mov	ES,AX
 34677                                  	;mov	si,10
 34678 0000618B BE0A00                  	mov	SI,SAVEXIT
 34679                                  	;mov	di,88h
 34680 0000618E BF8800                  	mov	DI,addr_int_terminate
 34681 00006191 A5                      	movsw
 34682 00006192 A5                      	movsw
 34683 00006193 A5                      	movsw
 34684 00006194 A5                      	movsw
 34685 00006195 A5                      	movsw
 34686 00006196 A5                      	movsw
 34687 00006197 E944F2                  	jmp	reset_environment
 34688                                  
 34689                                  ;----------------------------------------------------------------------------
 34690                                  ;
 34691                                  ; fixexepatch will point to this is DOS loads low. 
 34692                                  ;
 34693                                  ;----------------------------------------------------------------------------
 34694                                  ; MSDOS 6.0
 34695                                  
 34696                                  ; 29/04/2019 - Retro DOS v4.0
 34697                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34698                                  
 34699                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34700                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34701                                  
 34702                                  RetExePatch: ; proc near
 34703                                  	
 34704 0000619A C3                      	retn
 34705                                  
 34706                                  ;============================================================================
 34707                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34708                                  ;============================================================================
 34709                                  ; 04/08/2018 - Retro DOS v3.0
 34710                                  ; 14/05/2019 - Retro DOS v4.0
 34711                                  
 34712                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34713                                  
 34714                                  ;**
 34715                                  ;	Microsoft Confidential
 34716                                  ;	Copyright (C) Microsoft Corporation 1991
 34717                                  ;	All Rights Reserved.
 34718                                  ;
 34719                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34720                                  ;	I/O specs are defined in DISPATCH.
 34721                                  ;
 34722                                  ;	$ALLOC
 34723                                  ;	$SETBLOCK
 34724                                  ;	$DEALLOC
 34725                                  ;	$AllocOper
 34726                                  ;	arena_free_process
 34727                                  ;	arena_next
 34728                                  ;	check_signature
 34729                                  ;	Coalesce
 34730                                  ;
 34731                                  ;	Modification history:
 34732                                  ;
 34733                                  ;	    Created: ARR 30 March 1983
 34734                                  ;
 34735                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34736                                  ;		      M003 - added support for link/unlink UMBs from
 34737                                  ;			     DOS arena chain. 7/18/90
 34738                                  ;		      M009 - Added error returns invalid function and 
 34739                                  ;			     arena trashed in set link state call.
 34740                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34741                                  ;			     if UMB_HEAD is initialized.
 34742                                  ;
 34743                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34744                                  ;			     support. Please see under M009 in 
 34745                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34746                                  ;
 34747                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34748                                  ;			     sure that umb_head arena is valid and also make
 34749                                  ;			     sure that the previous arena is pointing to 
 34750                                  ;			     umb_head.
 34751                                  ;
 34752                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34753                                  ;			     set allloc strategy.
 34754                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34755                                  ;			     bx in AllocSetStrat.
 34756                                  ;
 34757                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34758                                  ;			     a bit to indicate to dos dispatcher to turn
 34759                                  ;			     a20 off before iret. See M016.
 34760                                  ;
 34761                                  
 34762                                  ;	BREAK	<memory allocation utility routines>
 34763                                  
 34764                                  
 34765                                  ; 15/04/2018 - Retro DOS v2.0
 34766                                  ;----------------------------------------------------------------------------
 34767                                  ; xenix memory calls for MSDOS
 34768                                  ;
 34769                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34770                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34771                                  ;
 34772                                  ;INCLUDE DOSSEG.ASM
 34773                                  
 34774                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34775                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34776                                  
 34777                                  ;.xlist
 34778                                  ;.xcref
 34779                                  ;INCLUDE DOSSYM.ASM
 34780                                  ;INCLUDE DEVSYM.ASM
 34781                                  ;.cref
 34782                                  ;.list
 34783                                  
 34784                                  ;TITLE ALLOC.ASM - memory arena manager
 34785                                  ;NAME Alloc
 34786                                  
 34787                                  ;SUBTTL memory allocation utility routines
 34788                                  ;PAGE
 34789                                  ;
 34790                                  ; arena data
 34791                                  ;
 34792                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34793                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34794                                  ;       i_need  FirstArena,WORD         ; first free block found
 34795                                  ;       i_need  BestArena,WORD          ; best free block found
 34796                                  ;       i_need  LastArena,WORD          ; last free block found
 34797                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34798                                  
 34799                                  ;**	Arena_Free_Process
 34800                                  ;----------------------------------------------------------------------------
 34801                                  ;	Free all arena blocks allocated to a prOcess
 34802                                  ;
 34803                                  ;	ENTRY	(bx) = PID of process
 34804                                  ;	EXIT	none
 34805                                  ;	USES	????? BUGBUG
 34806                                  ;----------------------------------------------------------------------------
 34807                                  
 34808                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34809                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34810                                  
 34811                                  arena_free_process:
 34812                                  	; 14/05/2019 - Retro DOS v4.0
 34813                                  	; 04/08/2018 - Retro DOS v3.0
 34814 0000619B 36A1[2400]                      MOV	AX,[SS:arena_head]
 34815                                  arena_free_process_start:
 34816 0000619F BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34817                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34818 000061A2 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34819                                  
 34820                                  arena_free_process_loop:
 34821                                          ;retc
 34822 000061A5 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34823 000061A7 06                      	PUSH    ES
 34824 000061A8 1F                              POP     DS
 34825                                  	;cmp	[1],bx 
 34826 000061A9 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34827 000061AD 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34828                                  	;mov	[1],di
 34829 000061AF 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34830                                  
 34831                                  arena_free_next:
 34832                                  	;cmp	byte [di],5Ah ;'Z'
 34833 000061B3 803D5A                          CMP     BYTE [DI],arena_signature_end
 34834                                                                          ; end of road, Jack?
 34835                                          ;retz				; never come back no more
 34836                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34837                                  	; 14/05/2019
 34838                                  	; MSDOS 6.0
 34839 000061B6 7405                    	jz	short arena_chk_umbs
 34840                                          
 34841 000061B8 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34842 000061BB EBE8                            JMP     SHORT arena_free_process_loop
 34843                                  
 34844                                  	; MSDOS 6.0
 34845                                  arena_chk_umbs:				; M010 - Start
 34846                                  	; 20/05/2019
 34847 000061BD 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34848 000061C1 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34849 000061C4 741E                    	je	short ret_label		; N: we're done
 34850                                  	
 34851 000061C6 8CDF                    	mov	di,ds			; di = last arena
 34852 000061C8 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34853 000061CA 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34854 000061CC EBD1                    	jmp	short arena_free_process_start
 34855                                  					; M010 - End
 34856                                  ;AFP_RETN:
 34857                                  ;	RETN
 34858                                  
 34859                                  ;	BREAK	<Arena Helper Routines>
 34860                                  
 34861                                  ;**	Arena_Next - Find Next item in Arena
 34862                                  ;----------------------------------------------------------------------------
 34863                                  ;	ENTRY	DS - pointer to block head
 34864                                  ;		(di) = 0
 34865                                  ;	EXIT	AX,ES - pointers to next head
 34866                                  ;		'C' set iff arena damaged
 34867                                  ;----------------------------------------------------------------------------
 34868                                  
 34869                                  arena_next:
 34870 000061CE 8CD8                            MOV     AX,DS                   ; AX <- current block
 34871 000061D0 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34872 000061D4 40                              INC     AX                      ; remember that header!
 34873                                  
 34874                                  ;       fall into check_signature and return
 34875                                  ;
 34876                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34877                                  ;       RETN
 34878                                  
 34879                                  ;**	Check_Signature - Check Memory Block Signature
 34880                                  ;----------------------------------------------------------------------------
 34881                                  ;	ENTRY	(AX) = address of block header
 34882                                  ;		(di) = 0
 34883                                  ;	EXIT	 ES = AX
 34884                                  ;		'C' clear if signature good
 34885                                  ;		'C' set if signature bad
 34886                                  ;	USES	ES, Flags
 34887                                  ;----------------------------------------------------------------------------
 34888                                  
 34889                                  check_signature:        
 34890                                  
 34891 000061D5 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34892                                  	;cmp	byte [es:di],4Dh ; 'M'
 34893 000061D7 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34894                                                                          ; IF next signature = not_end THEN
 34895 000061DB 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34896                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34897 000061DD 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34898                                                                          ; IF next signature = end then
 34899 000061E1 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34900 000061E3 F9                              STC                             ; set error
 34901                                  ret_label: ; MSDOS 6.0
 34902                                  AFP_RETN:
 34903                                   	; Retro DOS v2.0 - 05/03/2018
 34904                                  check_signature_ok:
 34905                                  COALESCE_RETN:
 34906 000061E4 C3                      	RETN
 34907                                  
 34908                                  ;**	Coalesce - Combine free blocks ahead with current block
 34909                                  ;----------------------------------------------------------------------------
 34910                                  ;	Coalesce adds the block following the argument to the argument block,
 34911                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34912                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34913                                  ;	preceeding allocated block.
 34914                                  ;
 34915                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34916                                  ;		(di) = 0
 34917                                  ;	EXIT	'C' clear if OK
 34918                                  ;		  (ds) unchanged, this block updated
 34919                                  ;		  (ax) = address of next block, IFF not at end
 34920                                  ;		'C' set if arena trashed
 34921                                  ;	USES	(cx)
 34922                                  ;----------------------------------------------------------------------------
 34923                                          
 34924                                  Coalesce:
 34925                                  	;cmp	byte [di],5Ah ; 'Z'
 34926 000061E5 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34927                                                                          ; IF current signature = END THEN
 34928                                          ;retz				;   GOTO ok
 34929 000061E8 74FA                            jz	short COALESCE_RETN
 34930 000061EA E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34931                                          ;retc				; IF no error THEN GOTO check
 34932 000061ED 72F5                    	jc	short COALESCE_RETN
 34933                                  
 34934                                  coalesce_check:
 34935                                  	;cmp	[es:1],di
 34936 000061EF 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34937                                          ;retnz				; IF next block isnt free THEN return
 34938 000061F4 75EE                            JNZ	SHORT COALESCE_RETN
 34939                                  	;mov	cx,[ES:3]
 34940 000061F6 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34941 000061FB 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34942                                          ;ADD	[3],CX
 34943 000061FC 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34944 00006200 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34945 00006203 880D                            MOV     [DI],CL
 34946 00006205 EBDE                            JMP     SHORT Coalesce		; try again
 34947                                  
 34948                                  ; 04/08/2018 - Retro DOS v3.0
 34949                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34950                                  
 34951                                  ;	BREAK  <$Alloc - allocate space in memory>
 34952                                  
 34953                                  ; MSDOS 6.0
 34954                                  ;----------------------------------------------------------------------------
 34955                                  ;**	$Alloc - Allocate Memory Space
 34956                                  ;
 34957                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34958                                  ;	Alloc returns a pointer to a free block of memory that
 34959                                  ;	has the requested size in paragraphs.
 34960                                  ;
 34961                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34962                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34963                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34964                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34965                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34966                                  ;
 34967                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34968                                  ;	starts from arena_head.
 34969                                  ;
 34970                                  ;	Assembler usage:
 34971                                  ;           MOV     BX,size
 34972                                  ;           MOV     AH,Alloc
 34973                                  ;           INT     21h
 34974                                  ;
 34975                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34976                                  ;	so that we start searching the arena at it's first non-trivial free
 34977                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34978                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34979                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34980                                  ;	verify that this is true; if so, this can stay as is
 34981                                  ;
 34982                                  ;	ENTRY	(bx) = requested size, in bytes
 34983                                  ;		(DS) = (ES) = DOSGROUP
 34984                                  ;	EXIT	'C' clear if memory allocated
 34985                                  ;		  (ax:0) = address of requested memory
 34986                                  ;		'C' set if request failed
 34987                                  ;		  (AX) = error_not_enough_memory
 34988                                  ;		    (bx) = max size we could have allocated
 34989                                  ;		  (ax) = error_arena_trashed
 34990                                  ;	USES	All
 34991                                  ;----------------------------------------------------------------------------
 34992                                  
 34993                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34994                                  ;----------------------------------------------------------------------------
 34995                                  ;SUBTTL $Alloc - allocate space in memory
 34996                                  ;
 34997                                  ;   Assembler usage:
 34998                                  ;           MOV     BX,size
 34999                                  ;           MOV     AH,Alloc
 35000                                  ;           INT     21h
 35001                                  ;         AX:0 is pointer to allocated memory
 35002                                  ;         BX is max size if not enough memory
 35003                                  ;
 35004                                  ;   Description:
 35005                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35006                                  ;       memory that has the requested  size  in  paragraphs.
 35007                                  ;
 35008                                  ;   Error return:
 35009                                  ;           AX = error_not_enough_memory
 35010                                  ;              = error_arena_trashed
 35011                                  ;----------------------------------------------------------------------------
 35012                                  
 35013                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35014                                  
 35015                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35016                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35017                                  
 35018                                  _$ALLOC:
 35019                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35020                                  	; 14/05/2019 - Retro DOS v4.0
 35021                                  	; 04/08/2018 - Retro DOS v3.0
 35022                                  	;EnterCrit critMem
 35023 00006207 E803B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35024                                  
 35025                                  ; 17/12/2022
 35026                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35027                                  ;%if 0
 35028                                  	; 14/05/2019
 35029 0000620A 16                      	push	ss
 35030 0000620B 1F                      	pop	ds
 35031                                  
 35032                                  	; MSDOS 6.0
 35033                                  	;mov	ax,[ss:arena_head]
 35034                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35035                                  
 35036 0000620C A1[2400]                	mov	ax,[arena_head]
 35037 0000620F A3[8E00]                	mov	[START_ARENA],ax			
 35038                                  	
 35039                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35040 00006212 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35041                                  					; Q: should we start scanning from 
 35042                                  					;    UMB's
 35043 00006217 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35044                                  		
 35045                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35046                                  	;cmp	word [UMB_HEAD],-1
 35047                                  	;je	short norm_alloc	; N: scan from arena_head
 35048                                  
 35049                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35050 00006219 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35051 0000621E 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35052                                  	
 35053                                  	;mov	ax,[ss:UMB_HEAD]
 35054                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35055 00006220 A1[8C00]                	mov	ax,[UMB_HEAD]
 35056 00006223 A3[8E00]                	mov	[START_ARENA],ax
 35057                                  					; M000 - end
 35058                                  norm_alloc:
 35059 00006226 31C0                            XOR     AX,AX
 35060 00006228 89C7                            MOV     DI,AX
 35061                                  	; 15/03/2018
 35062                                          ;MOV	[SS:FirstArena],AX	; init the options
 35063                                          ;MOV	[SS:BestArena],AX
 35064                                          ;MOV	[SS:LastArena],AX
 35065                                  	; 14/05/2019
 35066 0000622A A3[4003]                	MOV	[FirstArena],AX		; init the options
 35067 0000622D A3[4203]                        MOV	[BestArena],AX
 35068 00006230 A3[4403]                        MOV	[LastArena],AX
 35069 00006233 50                              PUSH    AX                      ; alloc_max <- 0
 35070                                  	; 04/08/2018
 35071                                  start_scan:
 35072                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35073                                  	;MOV	AX,[arena_head]
 35074                                  
 35075                                  	; 14/05/2019	
 35076                                  	; MSDOS 6.0
 35077                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35078 00006234 A1[8E00]                	mov	ax,[START_ARENA]
 35079                                  
 35080                                  	; 27/09/2023 (BugFix) (*) 
 35081                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35082                                  start_scan_x:
 35083                                  
 35084 00006237 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35085 0000623A 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35086                                  
 35087                                  ;%endif
 35088                                  
 35089                                  ; 17/12/2022
 35090                                  %if 0
 35091                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35092                                  
 35093                                  	; MSDOS 6.0
 35094                                  	mov	ax,[ss:arena_head]
 35095                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35096                                  
 35097                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35098                                  					; Q: should we start scanning from 
 35099                                  					;    UMB's
 35100                                  	jz	short norm_alloc	; N: scan from arena_head
 35101                                  		
 35102                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35103                                  	;je	short norm_alloc	; N: scan from arena_head
 35104                                  
 35105                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35106                                  	jz	short norm_alloc	; N: scan from arena_head
 35107                                  	
 35108                                  	mov	ax,[ss:UMB_HEAD]
 35109                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35110                                  					; M000 - end
 35111                                  norm_alloc:
 35112                                          XOR     AX,AX
 35113                                          MOV     DI,AX
 35114                                  	; 15/03/2018
 35115                                  	MOV	[SS:FirstArena],AX	; init the options
 35116                                  	MOV	[SS:BestArena],AX
 35117                                  	MOV	[SS:LastArena],AX
 35118                                          PUSH    AX                      ; alloc_max <- 0
 35119                                  	; 04/08/2018
 35120                                  start_scan:
 35121                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35122                                  	; 14/05/2019	
 35123                                  	; MSDOS 6.0
 35124                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35125                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35126                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35127                                  %endif
 35128                                  
 35129                                  alloc_scan:
 35130 0000623C 06                              PUSH    ES
 35131 0000623D 1F                              POP     DS                      ; DS <- ES
 35132 0000623E 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35133 00006242 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35134                                  
 35135                                  alloc_next:
 35136                                  	; MSDOS 6.0			; M000 - start 
 35137 00006244 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35138 0000624A 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35139                                  	
 35140 0000624C 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35141                                  					; Q: is alloc strategy high_first
 35142 00006252 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35143 00006254 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35144 00006258 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35145                                  					;    arena_head
 35146 0000625D 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35147 0000625F 8CD8                    	mov	ax,ds			; ax = current block
 35148 00006261 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35149 00006266 EB03                    	jmp	short alloc_chk_end
 35150                                  
 35151                                  norm_strat:
 35152                                  	;cmp	byte [di],5Ah ; 'Z'
 35153 00006268 803D5A                          CMP     BYTE [DI],arena_signature_end
 35154                                                                          ; IF current block is last THEN
 35155                                  alloc_chk_end:
 35156 0000626B 740E                            JZ      SHORT alloc_end		;   GOTO end
 35157 0000626D E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35158 00006270 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35159                                  
 35160                                  alloc_err:
 35161 00006272 58                              POP     AX
 35162                                  
 35163                                  alloc_trashed:
 35164                                  	;LeaveCrit critMem
 35165 00006273 E8B2B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35166                                          ;error	error_arena_trashed
 35167                                  	;mov	al,7
 35168 00006276 B007                    	MOV	AL,error_arena_trashed
 35169                                  alloc_errj:
 35170 00006278 E9C5A3                  	JMP	SYS_RET_ERR
 35171                                  
 35172                                  alloc_end:
 35173                                  	; 18/05/2019
 35174 0000627B 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35175 00006281 7403                    	jz	short alloc_chk 
 35176 00006283 E98400                  	jmp	alloc_do_split
 35177                                  
 35178                                  alloc_chk:
 35179                                  	; MSDOS 6.0
 35180 00006286 36A1[2400]              	mov	ax,[ss:arena_head]
 35181 0000628A 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35182 0000628F 740E                    	je	short alloc_fail	; Y: not enough memory
 35183                                  					; N:
 35184                                  					; Q: is the alloc strat HIGH_ONLY
 35185 00006291 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35186 00006297 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35187                                  	
 35188 00006299 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35189                                  	; 27/09/2023 (*)
 35190 0000629D EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35191                                  	;jmp	short start_scan
 35192                                  					; M000 - end
 35193                                  
 35194                                  alloc_fail:
 35195                                          ;invoke Get_User_Stack
 35196 0000629F E8DFA1                          CALL	Get_User_Stack
 35197 000062A2 5B                      	POP     BX
 35198                                          ;MOV	[SI].user_BX,BX
 35199                                  	;MOV	[SI+2],BX
 35200 000062A3 895C02                  	mov	[SI+user_env.user_BX],bx
 35201                                  	;LeaveCrit critMem
 35202 000062A6 E87FB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35203                                  	;error	error_not_enough_memory
 35204                                  	;mov	al,8
 35205 000062A9 B008                    	MOV	AL,error_not_enough_memory
 35206                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35207 000062AB EBCB                    	jmp	short alloc_errj
 35208                                  	;JMP	SYS_RET_ERR
 35209                                  
 35210                                  alloc_free:
 35211 000062AD E835FF                          CALL    Coalesce		; add following free block to current
 35212 000062B0 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35213 000062B2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35214 000062B6 5A                              POP     DX                      ; check for max found size
 35215 000062B7 39D1                            CMP     CX,DX
 35216 000062B9 7602                            JNA     SHORT alloc_test
 35217 000062BB 89CA                            MOV     DX,CX
 35218                                  
 35219                                  alloc_test:
 35220 000062BD 52                              PUSH    DX
 35221 000062BE 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35222 000062C0 7782                    	JA      SHORT alloc_next	;   GOTO next
 35223                                  
 35224                                  	; 15/03/2018
 35225 000062C2 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35226 000062C8 7505                    	JNZ	SHORT alloc_best
 35227 000062CA 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35228                                  alloc_best:
 35229 000062CF 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35230 000062D5 740E                            JZ      SHORT alloc_make_best	; initial best
 35231 000062D7 06                              PUSH	ES
 35232 000062D8 368E06[4203]                    MOV     ES,[SS:BestArena]
 35233 000062DD 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35234 000062E2 07                              POP	ES
 35235 000062E3 7605                            JBE     SHORT alloc_last
 35236                                  alloc_make_best:
 35237 000062E5 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35238                                  alloc_last:
 35239 000062EA 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35240 000062EF E952FF                          JMP     alloc_next
 35241                                  ;
 35242                                  ; split the block high
 35243                                  ;
 35244                                  alloc_do_split_high:
 35245 000062F2 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35246 000062F7 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35247 000062FB 29D9                            SUB     CX,BX
 35248 000062FD 8CDA                            MOV     DX,DS
 35249 000062FF 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35250 00006301 01CA                            ADD     DX,CX                   ; point to next block
 35251 00006303 8EC2                            MOV     ES,DX                   ; no decrement!
 35252 00006305 49                              DEC     CX
 35253 00006306 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35254 00006308 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35255                                  ;
 35256                                  ; we have scanned memory and have found all appropriate blocks
 35257                                  ; check for the type of allocation desired; first and best are identical
 35258                                  ; last must be split high
 35259                                  ;
 35260                                  alloc_do_split:
 35261                                  
 35262                                  ; 17/12/2022
 35263                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35264                                  ;%if 0
 35265                                  	; 14/05/2019
 35266                                  	; MSDOS 6.0			; M000 - start
 35267                                  	;xor	cx,cx
 35268 0000630A 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35269                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35270 0000630F 80E13F                  	and	cl,3Fh
 35271                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35272 00006312 80F901                  	cmp	cl,BEST_FIT
 35273 00006315 77DB                    	ja	short alloc_do_split_high
 35274                                  ;%endif
 35275                                  
 35276                                  	; 17/12/2022
 35277                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35278                                  	; MSDOS 6.0 & MSDOS 5.0
 35279                                  	;xor	cx,cx
 35280                                  	;mov	cl,[ss:AllocMethod]
 35281                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35282                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35283                                  	;ja	short alloc_do_split_high
 35284                                  
 35285                                  	; 15/03/2018
 35286                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35287                                  	; 04/08/2018
 35288                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35289                                          ;JA	SHORT alloc_do_split_high
 35290                                          
 35291 00006317 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35292 0000631C 7205                    	JB      SHORT alloc_get_size
 35293 0000631E 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35294                                  
 35295                                  alloc_get_size:
 35296 00006323 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35297 00006327 29D9                            SUB     CX,BX                   ; get room left over
 35298 00006329 8CD8                            MOV     AX,DS
 35299 0000632B 89C2                            MOV     DX,AX                   ; save for owner setting
 35300 0000632D 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35301 0000632F 01D8                            ADD     AX,BX
 35302 00006331 40                              INC     AX                      ; remember the header
 35303 00006332 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35304 00006334 49                              DEC     CX                      ; CX <- size of split block
 35305                                  alloc_set_sizes:
 35306 00006335 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35307 00006339 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35308                                  	;mov	bl,4Dh ; 'M'
 35309 0000633E B34D                            MOV     BL,arena_signature_normal
 35310 00006340 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35311 00006342 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35312 00006345 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35313                                  
 35314                                  alloc_set_owner:
 35315 0000634A 8EDA                            MOV     DS,DX
 35316 0000634C 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35317 00006350 A30100                          MOV     [ARENA.OWNER],AX
 35318 00006353 8CD8                            MOV     AX,DS
 35319 00006355 40                              INC     AX
 35320 00006356 5B                              POP     BX
 35321                                  	;LeaveCrit critMem
 35322 00006357 E8CEAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35323                                  	
 35324                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35325                                  alloc_ok:
 35326                                          ;transfer SYS_RET_OK
 35327 0000635A E9DAA2                  	JMP	SYS_RET_OK
 35328                                  
 35329                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35330                                  
 35331                                  ; MSDOS 6.0
 35332                                  ;----------------------------------------------------------------------------
 35333                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35334                                  ;
 35335                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35336                                  ;	any following free space onto this block; then we try to trim the
 35337                                  ;	block down to the size requested.
 35338                                  ;
 35339                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35340                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35341                                  ;	Thus the maximum-size-possible value that we return has already
 35342                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35343                                  ;
 35344                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35345                                  ;		finish it's work. For this reason we build the allocsf
 35346                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35347                                  ;		code.
 35348                                  ;
 35349                                  ;	ENTRY	(es) = segment of old block
 35350                                  ;		(bx) = newsize
 35351                                  ;		(ah) = SETBLOCK
 35352                                  ;
 35353                                  ;	EXIT	'C' clear if OK
 35354                                  ;		'C' set if error
 35355                                  ;		  (ax) = error_invalid_block
 35356                                  ;		       = error_arena_trashed
 35357                                  ;		       = error_not_enough_memory
 35358                                  ;		       = error_invalid_function
 35359                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35360                                  ;	USES	???? BUGBUG
 35361                                  ;----------------------------------------------------------------------------
 35362                                  
 35363                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35364                                  ;----------------------------------------------------------------------------
 35365                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35366                                  ;
 35367                                  ;   Assembler usage:
 35368                                  ;           MOV     ES,block
 35369                                  ;           MOV     BX,newsize
 35370                                  ;           MOV     AH,setblock
 35371                                  ;           INT     21h
 35372                                  ;         if setblock fails for growing, BX will have the maximum
 35373                                  ;         size possible
 35374                                  ;   Error return:
 35375                                  ;           AX = error_invalid_block
 35376                                  ;              = error_arena_trashed
 35377                                  ;              = error_not_enough_memory
 35378                                  ;              = error_invalid_function
 35379                                  ;----------------------------------------------------------------------------
 35380                                  
 35381                                  _$SETBLOCK:        
 35382                                  	; 04/08/2018 - Retro DOS v3.0
 35383                                  	;EnterCrit   critMem
 35384 0000635D E8ADAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35385                                  
 35386 00006360 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35387 00006363 8CC0                            MOV     AX,ES
 35388 00006365 48                              DEC     AX
 35389 00006366 E86CFE                          CALL    check_signature
 35390 00006369 7303                            JNC     SHORT setblock_grab
 35391                                  
 35392                                  setblock_bad:
 35393 0000636B E905FF                          JMP     alloc_trashed
 35394                                  
 35395                                  setblock_grab:
 35396 0000636E 8ED8                            MOV     DS,AX
 35397 00006370 E872FE                          CALL    Coalesce
 35398 00006373 72F6                            JC      SHORT setblock_bad
 35399 00006375 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35400 00006379 51                              PUSH    CX
 35401 0000637A 39CB                            CMP     BX,CX
 35402 0000637C 76A5                            JBE     SHORT alloc_get_size
 35403 0000637E E91EFF                          JMP     alloc_fail
 35404                                  
 35405                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35406                                  
 35407                                  ; MSDOS 6.0
 35408                                  ;----------------------------------------------------------------------------
 35409                                  ;**	$DEALLOC - Free Heap Memory
 35410                                  ;
 35411                                  ;	ENTRY	(es) = address of item
 35412                                  ;
 35413                                  ;	EXIT	'C' clear of OK
 35414                                  ;		'C' set if error
 35415                                  ;		  (AX) = error_invalid_block
 35416                                  ;	USES	???? BUGBUG
 35417                                  
 35418                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35419                                  ;----------------------------------------------------------------------------
 35420                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35421                                  ;
 35422                                  ;   Assembler usage:
 35423                                  ;           MOV     ES,block
 35424                                  ;           MOV     AH,dealloc
 35425                                  ;           INT     21h
 35426                                  ;
 35427                                  ;   Error return:
 35428                                  ;           AX = error_invalid_block
 35429                                  ;              = error_arena_trashed
 35430                                  ;---------------------------------------------------------------------------- 
 35431                                  
 35432                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35433                                  _$DEALLOC:
 35434                                  	; 14/05/2019 - Retro DOS v4.0    
 35435                                  	; 04/08/2018 - Retro DOS v3.0
 35436                                  	;EnterCrit   critMem
 35437 00006381 E889AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35438                                  
 35439                                  	; MSDOS 6.0			; M016, M068 - Start
 35440 00006384 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35441                                  					; Q: was the previous call an int 21
 35442                                  					;    exec call
 35443 0000638A 740D                    	jz	short deallocate	; N: continue
 35444 0000638C 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35445 00006392 7505                    	jne	short deallocate	; N: continue
 35446                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35447                                  	; 25/09/2023
 35448 00006394 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35449                                  deallocate:				; M016, M068 - End
 35450 00006399 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35451 0000639C 8CC0                            MOV     AX,ES
 35452 0000639E 48                              DEC     AX
 35453 0000639F E833FE                          CALL    check_signature
 35454 000063A2 720A                            JC      SHORT dealloc_err
 35455 000063A4 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35456                                  	;LeaveCrit critMem
 35457 000063A9 E87CAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35458                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35459                                          ;transfer SYS_RET_OK
 35460                                  dealloc_ok:
 35461 000063AC EBAC                    	jmp	short alloc_ok
 35462                                  	;JMP	SYS_RET_OK
 35463                                  
 35464                                  dealloc_err:
 35465                                  	;LeaveCrit critMem
 35466 000063AE E877AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35467                                          ;error	error_invalid_block
 35468                                  	;mov	al,9
 35469 000063B1 B009                    	MOV	AL,error_invalid_block
 35470                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35471                                  dealloc_errj:
 35472                                  AllocOperErrj:	; 17/12/2022
 35473 000063B3 E98AA2                  	JMP	SYS_RET_ERR
 35474                                  
 35475                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35476                                  
 35477                                  ; MSDOS 6.0
 35478                                  ;----------------------------------------------------------------------------
 35479                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35480                                  ;
 35481                                  ;	Assembler usage:
 35482                                  ;           MOV     AH,AllocOper
 35483                                  ;           MOV     BX,method
 35484                                  ;           MOV     AL,func
 35485                                  ;           INT     21h
 35486                                  ;
 35487                                  ;	ENTRY	
 35488                                  ;		(al) = 0
 35489                                  ;		  Get allocation Strategy in (ax)
 35490                                  ;
 35491                                  ;		(al) = 1, (bx) = method = zw0000xy
 35492                                  ;		  Set allocation strategy.
 35493                                  ;		   w  = 1  => HIGH_ONLY
 35494                                  ;		   z  = 1  => HIGH_FIRST
 35495                                  ;		   xy = 00 => FIRST_FIT
 35496                                  ;		      = 01 => BEST_FIT
 35497                                  ;		      = 10 => LAST_FIT
 35498                                  ;
 35499                                  ;		(al) = 2
 35500                                  ;		  Get UMB link state in (al)
 35501                                  ;
 35502                                  ;		(al) = 3
 35503                                  ;		  Set UMB link state
 35504                                  ;		   (bx) = 0 => Unlink UMBs
 35505                                  ;		   (bx) = 1 => Link UMBs
 35506                                  ;
 35507                                  ;
 35508                                  ;	EXIT	'C' clear if OK
 35509                                  ;
 35510                                  ;		 if (al) = 0
 35511                                  ;		  (ax) = existing method
 35512                                  ;		 if (al) = 1
 35513                                  ;		  Sets allocation strategy
 35514                                  ;		 if (al) = 2
 35515                                  ;		  (al) = 0 => UMBs not linked
 35516                                  ;		  (al) = 1 => UMBs linked in
 35517                                  ;		 if (al) = 3
 35518                                  ;		  Links/Unlinks the UMBs into DOS chain
 35519                                  ;
 35520                                  ;		'C' set if error
 35521                                  ;		  AX = error_invalid_function
 35522                                  ;
 35523                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35524                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35525                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35526                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35527                                  ;		    arena' if an arena sig is damaged.
 35528                                  ;----------------------------------------------------------------------------
 35529                                  
 35530                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35531                                  ;----------------------------------------------------------------------------
 35532                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35533                                  ;
 35534                                  ;   Assembler usage:
 35535                                  ;           MOV     AH,AllocOper
 35536                                  ;           MOV     BX,method
 35537                                  ;           MOV     AL,func
 35538                                  ;           INT     21h
 35539                                  ;
 35540                                  ;   Error return:
 35541                                  ;           AX = error_invalid_function
 35542                                  ;----------------------------------------------------------------------------
 35543                                  
 35544                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35545                                  _$ALLOCOPER:
 35546                                  	; 14/05/2019 - Retro DOS v4.0
 35547                                  	; MSDOS 6.0
 35548 000063B6 08C0                    	or	al,al ; 0
 35549 000063B8 741E                    	jz	short AllocGetStrat
 35550                                  	; 17/12/2022
 35551                                  	;cmp	al,1
 35552                                  	;jz	short AllocSetStrat
 35553                                  
 35554                                  	; 01/12/2022
 35555                                  	;cmp	al, 2
 35556                                  	;jb	short AllocSetStrat
 35557                                  	;ja	short AllocSetLink
 35558                                  	;;jmp	short AllocGetLink
 35559                                  ;AllocGetLink:
 35560                                  	; MSDOS 6.0
 35561                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35562                                  	;and 	al,LINKSTATE		
 35563                                  	;;transfer SYS_RET_OK
 35564                                  	;jmp	SYS_RET_OK
 35565                                  
 35566 000063BA 3C02                    	cmp	al,2
 35567                                  	; 17/12/2022
 35568 000063BC 7223                    	jb	short AllocSetStrat ; al = 1
 35569 000063BE 7432                    	je	short AllocGetLink
 35570                                  
 35571                                  	;cmp	al,2
 35572                                  	;jz	short AllocGetLink
 35573 000063C0 3C03                    	cmp	al,3
 35574 000063C2 7436                    	jz	short AllocSetLink
 35575                                  
 35576                                  	; 15/04/2018
 35577                                  	;CMP	AL,1
 35578                                          ;JB	SHORT AllocOperGet
 35579                                          ;JZ	SHORT AllocOperSet
 35580                                  
 35581                                  AllocOperError:
 35582                                  	; 04/08/2018 - Retro DOS v3.0
 35583                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35584                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35585 000063C4 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35586                                  	;error	error_invalid_function
 35587                                  	;mov	al,1
 35588 000063CA B001                    	MOV	AL,error_invalid_function
 35589                                  	; 17/12/2022
 35590                                  ;AllocOperErrj:
 35591                                  	;JMP	SYS_RET_ERR
 35592                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35593                                  	;jmp	short dealloc_errj
 35594                                  	; 17/12/2022
 35595 000063CC EBE5                    	jmp	short AllocOperErrj
 35596                                  
 35597                                  AllocArenaError:
 35598                                  	; MSDOS 6.0
 35599 000063CE 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35600                                  					; M009: Extended Error Locus
 35601                                  	;error	error_arena_trashed	; M009:
 35602                                  	;mov	al,7
 35603 000063D4 B007                    	MOV	AL,error_arena_trashed
 35604                                  	;JMP	SYS_RET_ERR
 35605 000063D6 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35606                                  
 35607                                  AllocGetStrat: 
 35608                                  	; MSDOS 6.0
 35609                                  AllocOperGet:
 35610 000063D8 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35611 000063DC 30E4                            XOR     AH,AH
 35612                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35613                                  	;transfer SYS_RET_OK
 35614                                  AllocOperOk:
 35615                                  	; 17/12/2022
 35616                                  	;jmp	short dealloc_ok
 35617 000063DE E956A2                  	JMP	SYS_RET_OK
 35618                                  
 35619                                  AllocSetStrat: 
 35620                                  	; 14/05/2019
 35621                                  	; MSDOS 6.0
 35622 000063E1 53                      	push	bx			; M000 - start
 35623                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35624                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35625                                  	; 17/12/2022
 35626 000063E2 80E33F                  	and	bl,3Fh
 35627 000063E5 83FB02                  	cmp	bx,2			; BX must be 0-2
 35628                                  	;cmp	bl,2
 35629 000063E8 5B                      	pop	bx			; M000 - end
 35630 000063E9 77D9                    	ja	short AllocOperError
 35631                                  
 35632                                  AllocOperSet:
 35633 000063EB 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35634                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35635                                  	;transfer SYS_RET_OK
 35636                                  AllocOperOkj:
 35637 000063F0 EBEC                    	jmp	short AllocOperOk
 35638                                  	;JMP	SYS_RET_OK
 35639                                  
 35640                                  AllocGetLink:
 35641                                  	; MSDOS 6.0
 35642 000063F2 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35643                                  	;and	al,1
 35644 000063F6 2401                    	and 	al,LINKSTATE		
 35645                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35646                                  	;transfer SYS_RET_OK
 35647                                  AllocOperOkj2:
 35648                                  	; 17/12/2022
 35649 000063F8 EBE4                    	jmp	short AllocOperOk
 35650                                  	;jmp	short AllocOperOkj
 35651                                  	;;JMP	SYS_RET_OK
 35652                                  
 35653                                  AllocSetLink:
 35654                                  	; MSDOS 6.0			; M009 - start
 35655 000063FA 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35656 000063FF 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35657 00006402 74C0                    	je	short AllocOperError	; N: error
 35658                                  					; Y: continue
 35659                                  					; M009 - end
 35660 00006404 83FB01                  	cmp	bx,1			
 35661 00006407 7204                    	jb	short UnlinkUmbs
 35662 00006409 741C                    	jz	short LinkUmbs
 35663                                  	
 35664 0000640B EBB7                    	jmp	short AllocOperError
 35665                                  	
 35666                                  UnlinkUmbs:
 35667                                  	;test	byte [ss:UMBFLAG],1
 35668 0000640D 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35669 00006413 7410                    	jz	short unlinked		; Y: return 
 35670                                  	
 35671 00006415 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35672 00006418 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35673                                  	
 35674                                  					; make it last
 35675 0000641A C60600005A              	mov	byte [0],arena_signature_end
 35676                                  	
 35677                                  	;and	byte [ss:UMBFLAG],0FEh
 35678 0000641F 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35679                                  	
 35680                                  unlinked:
 35681                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35682                                  	;transfer SYS_RET_OK
 35683                                  	; 17/12/2022
 35684 00006425 EBB7                    	jmp	short AllocOperOk
 35685                                  	;jmp	short AllocOperOkj2
 35686                                  	;;JMP	SYS_RET_OK
 35687                                  
 35688                                  LinkUmbs:
 35689 00006427 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35690 0000642D 7510                    	jnz	short linked		; Y: return
 35691                                  	
 35692 0000642F E80F00                  	call	GetLastArena		; get arena before umb_head
 35693 00006432 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35694                                  	
 35695                                  					; make it normal. M061: ds points to
 35696                                  					; arena before umb_head
 35697 00006434 C60600004D              	mov	byte [0],arena_signature_normal
 35698                                  	
 35699 00006439 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35700                                  linked:
 35701                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35702                                  	;transfer SYS_RET_OK
 35703                                  	; 17/12/2022
 35704 0000643F EB9D                    	jmp	short AllocOperOk
 35705                                  	;jmp	short unlinked
 35706                                  	;;JMP	SYS_RET_OK
 35707                                  
 35708                                  ; MSDOS 6.0
 35709                                  ;--------------------------------------------------------------------------
 35710                                  ; Procedure Name : GetLastArena		-  M003
 35711                                  ;
 35712                                  ; Inputs	 : cx = umb_head
 35713                                  ;
 35714                                  ;
 35715                                  ; Outputs	 : If UMBs are linked
 35716                                  ;			ES = umb_head
 35717                                  ;			DS = arena before umb_head
 35718                                  ;		   else
 35719                                  ;			DS = last arena
 35720                                  ;			ES = next arena. will be umb_head if NC.
 35721                                  ;
 35722                                  ;		   CY if error
 35723                                  ;
 35724                                  ; Uses		 : DS, ES, DI, BX
 35725                                  ;--------------------------------------------------------------------------
 35726                                  
 35727                                  ; 14/05/2019 - Retro DOS v4.0
 35728                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35729                                  
 35730                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35731                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35732                                  	
 35733                                  GetLastArena:
 35734 00006441 50                      	push	ax			; save ax
 35735                                  
 35736 00006442 36A1[2400]              	mov	ax,[ss:arena_head]
 35737 00006446 8EC0                    	mov	es,ax			; es = arena_head
 35738 00006448 31FF                    	xor	di,di
 35739                                  
 35740 0000644A 26803D5A                	cmp     byte [es:di],arena_signature_end
 35741                                  					; Q: is this the last arena
 35742 0000644E 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35743                                  					
 35744                                  GLA_next:
 35745 00006450 8ED8                    	mov	ds,ax
 35746 00006452 E879FD                  	call	arena_next		; ax, es -> next arena
 35747                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35748                                  	;jc	short GLA_err
 35749                                  	; 17/12/2022
 35750 00006455 7228                    	jc	short GLA_err2
 35751                                  
 35752 00006457 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35753 0000645D 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35754                                  					;    umb_head
 35755                                  					; N: terminating condition is 05Ah
 35756                                  
 35757 0000645F 26803D5A                	cmp     byte [es:di],arena_signature_end
 35758                                  					; Q: is this the last arena
 35759 00006463 EB02                    	jmp	short GLA_@f
 35760                                  GLA_chkumb:
 35761 00006465 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35762                                  GLA_@f:
 35763 00006467 75E7                    	jne	short GLA_next		; N: get next arena
 35764                                  
 35765                                  GLA_done:
 35766                                  					; M061 - Start
 35767 00006469 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35768 0000646F 750B                    	jnz	short GLA_ret		; Y: we're done
 35769                                  					; N: let us confirm that the next 
 35770                                  					;    arena is umb_head
 35771 00006471 8ED8                    	mov	ds,ax
 35772 00006473 E858FD                  	call	arena_next		; ax, es -> next arena
 35773                                  	;jc	short GLA_err
 35774 00006476 7207                    	jc	short GLA_err2
 35775 00006478 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35776 0000647A 7502                    	jne	short GLA_err		; N: error
 35777                                  					; M061 - End
 35778                                  GLA_ret:
 35779                                  	; 17/12/2022				
 35780                                  	;clc
 35781                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35782                                  	;clc
 35783 0000647C 58                      	pop	ax			; M061
 35784 0000647D C3                      	retn				; M061
 35785                                  
 35786                                  GLA_err:
 35787 0000647E F9                      	stc				; M061
 35788                                  GLA_err2:
 35789 0000647F 58                      	pop	ax
 35790 00006480 C3                      	retn
 35791                                  
 35792                                  ;============================================================================
 35793                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35794                                  ;============================================================================
 35795                                  ; 04/08/2018 - Retro DOS v3.0
 35796                                  
 35797                                  ;	TITLE SRVCALL - Server DOS call
 35798                                  ;	NAME  SRVCALL
 35799                                  
 35800                                  ;**	SRVCALL.ASM - Server DOS call functions
 35801                                  ;
 35802                                  ;
 35803                                  ;	$ServerCall
 35804                                  ;
 35805                                  ;	Modification history:
 35806                                  ;
 35807                                  ;	    Created: ARR 08 August 1983
 35808                                  
 35809                                  ;AsmVars <Installed>
 35810                                  
 35811                                  ;include dpl.asm
 35812                                  
 35813                                  ;Installed = TRUE
 35814                                  
 35815                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35816                                  ; ---------------------------------------------------------------------------
 35817                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35818                                  
 35819                                  ;BREAK <ServerCall -- Server DOS call>
 35820                                  
 35821                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35822                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35823                                  
 35824                                  ;hkn; TABLE	SEGMENT
 35825                                  ;Public SRVC001S,SRVC001E
 35826                                  ;SRVC001S label byte
 35827                                  
 35828                                  SRVC001S:
 35829                                  
 35830 00006481 [8564]                  SERVERTAB:	dw	SERVER_DISP
 35831 00006483 [D764]                  SERVERLEAVE:	dw	SERVERRETURN
 35832 00006485 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35833 00006486 [3F65]                  		dw	SRV_CALL	; 0
 35834 00006488 [D864]                  		dw	COMMIT_ALL	; 1
 35835 0000648A [0E65]                  		dw	CLOSE_NAME	; 2
 35836 0000648C [1965]                  		dw	CLOSE_UID	; 3
 35837 0000648E [2065]                  		dw	CLOSE_UID_PID	; 4
 35838 00006490 [2765]                  		dw	GET_LIST	; 5
 35839 00006492 [8065]                  		dw	GET_DOS_DATA	; 6
 35840 00006494 [A465]                  		dw	SPOOL_OPER	; 7
 35841 00006496 [A465]                  		dw	SPOOL_OPER	; 8
 35842 00006498 [A465]                  		dw	SPOOL_OPER	; 9
 35843 0000649A [B065]                  		dw	_$SetExtendedError  ; 10
 35844                                  
 35845                                  SERVER_DISP_END:  ;  LABEL BYTE
 35846                                  
 35847                                  ;SRVC001E label byte
 35848                                  
 35849                                  SRVC001E:
 35850                                  
 35851                                  ;hkn; TABLE	ENDS
 35852                                  
 35853                                  ;----------------------------------------------------------------------------
 35854                                  ;
 35855                                  ; Procedure Name : $ServerCall
 35856                                  ;
 35857                                  ; Inputs:
 35858                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35859                                  ; Function:
 35860                                  ;	AL=0	Server DOS call
 35861                                  ;	AL=1	Commit All files
 35862                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35863                                  ;	AL=3	Close all files for DPL_UID
 35864                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35865                                  ;	AL=5	Get open file list entry
 35866                                  ;		    IN: BX File Index
 35867                                  ;			CX User Index
 35868                                  ;		    OUT:ES:DI -> Name
 35869                                  ;			BX = UID
 35870                                  ;		    CX = # locked blocks held by this UID
 35871                                  ;	AL=6	Get DOS data area
 35872                                  ;		    OUT: DS:SI -> Start
 35873                                  ;			CX size in bytes of swap if indos
 35874                                  ;			DX size in bytes of swap always
 35875                                  ;	AL=7	Get truncate flag
 35876                                  ;	AL=8	Set truncate flag
 35877                                  ;	AL=9	Close all spool files
 35878                                  ;	AL=10	SetExtendedError
 35879                                  ;
 35880                                  ;----------------------------------------------------------------------------
 35881                                  
 35882                                  _$ServerCall:
 35883                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35884                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35885                                  	; 10/06/2019
 35886                                  	; 29/04/2019 - Retro DOS v4.0
 35887                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35888                                  
 35889                                  	; 05/08/2018 - Retro DOS v3.0
 35890                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35891 0000649C 3C07                    	CMP	AL,7
 35892 0000649E 7204                    	JB	short SET_STUFF
 35893 000064A0 3C09                    	CMP	AL,9
 35894 000064A2 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35895                                  SET_STUFF:
 35896 000064A4 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35897                                  	;mov	bx,[si+12h]
 35898 000064A6 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35899                                  
 35900                                  	; MSDOS 6.0
 35901                                  ;SR;
 35902                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35903                                  ; of USER_ID
 35904                                  
 35905 000064A9 36F606[3010]01          	test	byte [SS:IsWin386],1
 35906 000064AF 7505                    	jnz	short skip_win386
 35907                                  
 35908                                  ;hkn; SS override for user_id and proc_id
 35909                                  	; 15/08/2018
 35910 000064B1 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35911                                  
 35912                                  skip_win386:
 35913 000064B6 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35914 000064B9 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35915                                  NO_SET_ID:
 35916                                  	; 10/06/2019 - Retro DOS v4.0
 35917 000064BE 2EFF36[8364]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35918 000064C3 2EFF36[8164]            	PUSH	word [cS:SERVERTAB]	; push table address
 35919 000064C8 50                      	PUSH	AX
 35920 000064C9 E854AD                  	call	TableDispatch
 35921                                  
 35922                                  ;hkn; SS override
 35923                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35924 000064CC 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35925                                  	;error	error_invalid_function
 35926                                  	;mov	al,1
 35927 000064D2 B001                    	MOV	AL,error_invalid_function
 35928                                  servercall_error:
 35929 000064D4 E969A1                  	JMP	SYS_RET_ERR
 35930                                  
 35931                                  SERVERRETURN:
 35932 000064D7 C3                      	retn
 35933                                  
 35934                                  ; Commit - iterate through the open file list and make sure that the
 35935                                  ; directory entries are correctly updated.
 35936                                  
 35937                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35938                                  COMMIT_ALL:
 35939 000064D8 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35940 000064DA 16                      	push	ss
 35941 000064DB 1F                      	pop	ds
 35942 000064DC E82EAE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35943                                  CommitLoop:
 35944 000064DF 53                      	push	bx
 35945 000064E0 E82401                  	call	SFFromSFN
 35946 000064E3 7222                    	JC	short CommitDone
 35947 000064E5 26833D00                	cmp	word [es:di],0
 35948                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35949                                  					; if (ThisSFT->refcount != 0)
 35950 000064E9 7418                    	JZ	short CommitNext
 35951                                  	;cmp	word [es:di],0FFFFh ; -1
 35952 000064EB 26833DFF                	cmp	word [ES:DI],sf_busy
 35953                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35954                                  					; BUSY SFTs have god knows what
 35955 000064EF 7412                    	JZ	short CommitNext	;   in them.
 35956                                  	; 17/12/2022
 35957 000064F1 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35958                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35959 000064F6 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35960                                  					;	doesn't deadlock
 35961 000064F8 893E[9E05]              	MOV	[THISSFT],DI
 35962 000064FC 8C06[A005]              	MOV	[THISSFT+2],ES
 35963 00006500 E807CB                  	call	DOS_COMMIT		;	DOSCommit ();
 35964                                  CommitNext:
 35965 00006503 5B                      	pop	bx
 35966 00006504 43                      	INC	BX
 35967 00006505 EBD8                    	JMP	short CommitLoop
 35968                                  CommitDone:
 35969 00006507 E81EAE                  	call	LCritSFT
 35970 0000650A 5B                      	pop	bx
 35971                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35972                                  Commit_Ok:
 35973 0000650B E929A1                  	jmp	SYS_RET_OK
 35974                                  	
 35975                                  
 35976                                  CLOSE_NAME:
 35977                                  
 35978                                  ;if installed
 35979                                  
 35980                                  ;hkn; SS override
 35981                                  	;call	far [ss:MFTcloN]
 35982 0000650E 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35983                                  ;else
 35984                                  ;	Call	MFTcloN
 35985                                  ;endif
 35986                                  
 35987                                  CheckReturns:
 35988 00006513 7202                    	JC	short func_err
 35989                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35990                                  	;transfer SYS_RET_OK
 35991                                  Commit_Okj:
 35992 00006515 EBF4                    	jmp	short Commit_Ok
 35993                                  	;jmp	SYS_RET_OK
 35994                                  
 35995                                  func_err:
 35996                                  	;transfer SYS_RET_ERR
 35997                                  	;jmp	SYS_RET_ERR
 35998 00006517 EBBB                    	jmp	short servercall_error
 35999                                  
 36000                                  CLOSE_UID:
 36001                                  
 36002                                  ;if installed
 36003                                  ;hkn; SS override
 36004                                  	;call	far [ss:MFTclU]
 36005 00006519 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36006                                  ;else
 36007                                  ;	Call	MFTclU
 36008                                  ;endif
 36009 0000651E EBF3                    	JMP	short CheckReturns
 36010                                  
 36011                                  CLOSE_UID_PID:
 36012                                  
 36013                                  ;if installed
 36014                                  ;hkn; SS override
 36015                                  	;call	far [ss:MFTCloseP]
 36016 00006520 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36017                                  ;else
 36018                                  ;	Call	MFTCloseP
 36019                                  ;endif
 36020 00006525 EBEC                    	JMP	short CheckReturns
 36021                                  
 36022                                  GET_LIST:
 36023                                  
 36024                                  ;if installed
 36025                                  ;hkn; SS override
 36026                                  	;call	far [ss:MFT_get]
 36027 00006527 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36028                                  ;else
 36029                                  ;	Call	MFT_get
 36030                                  ;endif
 36031 0000652C 72E9                    	JC	short func_err
 36032 0000652E E8509F                  	call	Get_User_Stack
 36033                                  	;mov	[si+2],bx
 36034 00006531 895C02                  	MOV	[SI+user_env.user_BX],BX
 36035                                  	;mov	[si+10],di
 36036 00006534 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36037                                  	;mov	[si+16],es
 36038 00006537 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36039                                  SetCXOK:
 36040                                  	;mov	[si+4],cx
 36041 0000653A 894C04                  	MOV	[SI+user_env.user_CX],CX
 36042                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36043                                  	;transfer SYS_RET_OK
 36044                                  Commit_Okj2:
 36045                                  	; 17/12/2022
 36046 0000653D EBCC                    	jmp	short Commit_Ok
 36047                                  	;jmp	short Commit_Okj
 36048                                  	;;jmp	SYS_RET_OK
 36049                                  
 36050                                  SRV_CALL:
 36051 0000653F 58                      	POP	AX			; get rid of call to $srvcall
 36052 00006540 1E                      	push	ds
 36053 00006541 56                      	push	si
 36054 00006542 E83C9F                  	call	Get_User_Stack
 36055 00006545 5F                      	pop	di
 36056 00006546 07                      	pop	es
 36057                                  
 36058                                  ; DS:SI point to stack
 36059                                  ; ES:DI point to DPL
 36060                                  
 36061 00006547 E8B5AC                  	call	XCHGP
 36062                                  
 36063                                  ; DS:SI point to DPL
 36064                                  ; ES:DI point to stack
 36065                                  ;
 36066                                  ; We now copy the registers from DPL to save stack
 36067                                  
 36068 0000654A 56                      	push	si
 36069 0000654B B90600                  	MOV	CX,6
 36070 0000654E F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36071 00006550 47                      	INC	DI
 36072 00006551 47                      	INC	DI			; Skip user_BP
 36073 00006552 A5                      	MOVSW				; DS
 36074 00006553 A5                      	MOVSW				; ES
 36075 00006554 5E                      	pop	si			; DS:SI -> DPL
 36076 00006555 8B04                    	mov	ax,[SI]
 36077                                  	;MOV	AX,[SI+DPL.AX]
 36078                                  	;mov	bx,[si+2]
 36079 00006557 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36080                                  	;mov	cx,[si+4]
 36081 0000655A 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36082                                  	;mov	dx,[si+6]
 36083 0000655D 8B5406                  	MOV	DX,[SI+DPL.DX]
 36084                                  	;mov	di,[si+10]
 36085 00006560 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36086                                  	;mov	es,[si+14]
 36087 00006563 8E440E                  	MOV	ES,[SI+DPL.ES]
 36088                                  	;push	word [si+8]
 36089 00006566 FF7408                  	PUSH	word [SI+DPL.SI]
 36090                                  	;mov	ds,[si+12]
 36091 00006569 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36092 0000656C 5E                      	POP	SI
 36093                                  
 36094                                  ;hkn; SS override for next 3
 36095 0000656D 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36096 00006572 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36097 00006577 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36098 0000657D E9089E                  	jmp	REDISP
 36099                                  
 36100                                  GET_DOS_DATA:
 36101 00006580 16                      	push	ss
 36102 00006581 07                      	pop	es
 36103 00006582 BF[2003]                	MOV     DI,SWAP_START
 36104 00006585 B9[AC0A]                	MOV     CX,SWAP_END
 36105 00006588 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36106 0000658B 29F9                    	SUB     CX,DI
 36107 0000658D 29FA                    	SUB     DX,DI
 36108 0000658F D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36109 00006591 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36110 00006594 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36111 00006596 E8E89E                  	call	Get_User_Stack
 36112                                  	;mov	[si+14],es
 36113 00006599 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36114                                  	;mov	[si+8],di
 36115 0000659C 897C08                  	MOV     [SI+user_env.user_SI],DI
 36116                                  	;mov	[si+6],dx
 36117 0000659F 895406                  	MOV     [SI+user_env.user_DX],DX
 36118 000065A2 EB96                    	JMP	short SetCXOK
 36119                                  
 36120                                  SPOOL_OPER:
 36121                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36122                                  
 36123 000065A4 50                      	push    ax
 36124 000065A5 B82511                  	mov     ax,1125h
 36125 000065A8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36126                                  			; STACK: WORD subfunction
 36127                                  			; Return: CF set on error, AX = error code
 36128                                  			; STACK unchanged
 36129 000065AA 5B                      	pop	bx
 36130                                  	; 17/12/2022
 36131                                  	;JC	short func_err2
 36132 000065AB 7390                    	jnc	short Commit_Okj2
 36133                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36134                                  	;;jmp	SYS_RET_OK
 36135                                  	;jmp	short Commit_Okj2
 36136                                  	
 36137                                  func_err2:
 36138 000065AD E990A0                  	jmp	SYS_RET_ERR
 36139                                  
 36140                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36141                                  ;--------------------------------------------------------------------------
 36142                                  ;
 36143                                  ; Procedure Name : $SetExtendedError
 36144                                  ;
 36145                                  ; $SetExtendedError takes extended error information and loads it up for the
 36146                                  ; next extended error call. This is used by interrupt-level proccessors to
 36147                                  ; mask their actions.
 36148                                  ;
 36149                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36150                                  ;   Outputs: none
 36151                                  ;
 36152                                  ;---------------------------------------------------------------------------
 36153                                  
 36154                                  _$SetExtendedError:
 36155                                  
 36156                                  ;hkn; SS override for all variables used
 36157                                  
 36158 000065B0 8B04                    	mov	ax,[si]
 36159                                  	;MOV	AX,[SI+DPL.AX]
 36160 000065B2 36A3[2403]              	MOV	[SS:EXTERR],AX
 36161                                  	;mov	ax,[si+10]
 36162 000065B6 8B440A                  	MOV	AX,[SI+DPL.DI]
 36163 000065B9 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36164                                  	;mov	ax,[si+14]
 36165 000065BD 8B440E                  	MOV	AX,[SI+DPL.ES]
 36166 000065C0 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36167                                  	;mov	ax,[si+2]
 36168 000065C4 8B4402                  	MOV	AX,[SI+DPL.BX]
 36169 000065C7 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36170                                  	;mov	ax,[si+4]
 36171 000065CB 8B4404                  	MOV	AX,[SI+DPL.CX]
 36172 000065CE 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36173 000065D3 C3                      	retn
 36174                                  
 36175                                  ;============================================================================
 36176                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36177                                  ;============================================================================
 36178                                  ; 05/08/2018 - Retro DOS v3.0
 36179                                  ; 05/05/2019 - Retro DOS v4.0
 36180                                  
 36181                                  ;**	Handle related utilities for MSDOS 2.X.
 36182                                  ;----------------------------------------------------------------------------
 36183                                  ;	pJFNFromHandle	written
 36184                                  ;	SFFromHandle	written
 36185                                  ;	SFFromSFN	written
 36186                                  ;	JFNFree 	written
 36187                                  ;	SFNFree 	written
 36188                                  ;
 36189                                  ;	Modification history:
 36190                                  ;
 36191                                  ;	    Created: MZ 1 April 1983
 36192                                  ;----------------------------------------------------------------------------
 36193                                  
 36194                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36195                                  
 36196                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36197                                  ;----------------------------------------------------------------------------
 36198                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36199                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36200                                  ;
 36201                                  ;	NOTE:
 36202                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36203                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36204                                  ;
 36205                                  ;	ENTRY	(bx) = handle
 36206                                  ;	EXIT	'C' clear if ok
 36207                                  ;		  (es:di) = address of JFN value
 36208                                  ;		'C' set if error
 36209                                  ;		  (ax) = error code
 36210                                  ;	USES	AX, DI, ES, Flags
 36211                                  ;----------------------------------------------------------------------------
 36212                                  
 36213                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36214                                  
 36215                                  pJFNFromHandle:
 36216                                  	; 05/05/2019 - Retro DOS v4.0
 36217                                  	;getdseg <es>			; es -> dosdata
 36218 000065D4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36219                                  	
 36220                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36221 000065D9 268E06[3003]            	mov	es,[es:CurrentPDB]
 36222                                  
 36223                                  	;cmp	bx,[ES:32h]
 36224 000065DE 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36225 000065E3 7204                    	JB	short pjfn10		; no, get offset
 36226                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36227                                  	;mov	al,6
 36228 000065E5 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36229                                  ReturnCarry:
 36230 000065E7 F9                      	STC                             ; signal error
 36231 000065E8 C3                      	retn				; go back
 36232                                  pjfn10: 
 36233                                  	;les	di,[es:34h]
 36234 000065E9 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36235 000065EE 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36236                                  	;clc
 36237                                  pJFNFromHandle_error:
 36238 000065F0 C3                      	retn
 36239                                  
 36240                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36241                                  ;----------------------------------------------------------------------------
 36242                                  ;
 36243                                  ; Procedure Name : SFFromHandle
 36244                                  ;
 36245                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36246                                  ;
 36247                                  ;   Input:      BX has handle
 36248                                  ;   Output:     Carry Set
 36249                                  ;                   AX has error code
 36250                                  ;               Carry Reset
 36251                                  ;                   ES:DI has pointer to SF entry
 36252                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36253                                  ; NOTE:
 36254                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36255                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36256                                  ;
 36257                                  ;----------------------------------------------------------------------------
 36258                                  
 36259                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36260                                  
 36261                                  SFFromHandle:
 36262 000065F1 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36263                                  	;retc				; return if error
 36264 000065F4 72FA                    	jc	short pJFNFromHandle_error
 36265 000065F6 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36266                                  	;JNZ	short GetSF		; nope, suck out SF
 36267                                  	;;mov	al,6
 36268                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36269                                  	;jmp	short ReturnCarry	; signal it
 36270                                  	; 17/12/2022
 36271                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36272 000065FA 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36273                                  	;JNZ	short GetSF		; nope, suck out SF
 36274                                  	;;mov	al,6
 36275                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36276                                  	;jmp	short ReturnCarry	; signal it
 36277                                  GetSF:
 36278 000065FC 53                      	push	bx			; save handle
 36279 000065FD 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36280 00006600 30FF                    	XOR     BH,BH                   ; ignore upper half
 36281 00006602 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36282 00006605 5B                      	pop	bx			; restore
 36283 00006606 C3                      	retn                        	; say goodbye
 36284                                  
 36285                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36286                                  
 36287                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36288                                  ;----------------------------------------------------------------------------
 36289                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36290                                  ;	is more than just a simple index instruction because the SF table
 36291                                  ;	can be made up of multiple pieces chained together. We follow the
 36292                                  ;	chain to the right piece and then do the index operation.
 36293                                  ;
 36294                                  ;   NOTE:
 36295                                  ;	This routine is called from SFFromHandle which is called
 36296                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36297                                  ;
 36298                                  ;	ENTRY	BX has SF index
 36299                                  ;	EXIT	'C' clear if OK
 36300                                  ;		  ES:DI points to SF entry
 36301                                  ;		'C' set if index too large
 36302                                  ;	USES	BX, DI, ES
 36303                                  ;----------------------------------------------------------------------------
 36304                                  
 36305                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36306                                  
 36307                                  SFFromSFN:
 36308                                  	; 05/05/2019 - Retro DOS v4.0
 36309                                  	;getdseg <es>			; es -> dosdata
 36310 00006607 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36311                                  
 36312                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36313 0000660C 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36314                                  sfsfn5:	
 36315                                  	;cmp	bx,[es:di+4]
 36316 00006611 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36317 00006615 720E                    	JB	short sfsfn7		; yes, go grab it
 36318                                  	;sub	bx,[es:di+4]
 36319 00006617 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36320 0000661B 26C43D                  	les	di,[es:di] ; 14/08/2018
 36321                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36322 0000661E 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36323 00006621 75EE                    	JNZ	short sfsfn5		; no, try again
 36324 00006623 F9                      	STC
 36325 00006624 C3                      	retn				; return with error, not found
 36326                                  sfsfn7:
 36327 00006625 50                      	push	ax
 36328                                  	;mov	ax,53 ; MSDOS 3.3
 36329                                  	;mov	ax,59 ; MSDOS 6.0
 36330                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36331                                  	
 36332                                  	; 17/12/2022
 36333 00006626 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36334                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36335                                  	;mov	ax,SF_ENTRY.size ; 59
 36336                                  	
 36337 00006628 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36338 0000662A 01C7                    	ADD	DI,AX			; add base of SF block
 36339 0000662C 58                      	pop	ax
 36340                                  	;add	di,6
 36341 0000662D 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36342 00006630 C3                      	retn				; return with 'C' clear
 36343                                  
 36344                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36345                                  
 36346                                  ;**	JFNFree - Find a Free JFN Slot
 36347                                  ;----------------------------------------------------------------------------
 36348                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36349                                  ;
 36350                                  ;	ENTRY	(ss) = DOSDATA
 36351                                  ;	EXIT	'C' clear if OK
 36352                                  ;		  (bx) = new handle
 36353                                  ;		  (es:di) = pointer to JFN slot
 36354                                  ;		'C' set if error
 36355                                  ;		  (al) = error code
 36356                                  ;	USES	bx, di, es, flags
 36357                                  ;----------------------------------------------------------------------------
 36358                                  
 36359                                  JFNFree:
 36360 00006631 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36361                                  jfnf1:	
 36362 00006633 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36363 00006636 7209                    	JC	short jfnf5		; no more handles
 36364 00006638 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36365 0000663C 7405                    	je	short jfnfx		; yes, carry is clear
 36366 0000663E 43                      	INC     BX                      ; no, next handle
 36367 0000663F EBF2                    	JMP	short jfnf1		; and try again
 36368                                  
 36369                                  	; Error. 'C' set
 36370                                  jfnf5:	
 36371                                  	;mov	al,4
 36372 00006641 B004                    	MOV	AL,error_too_many_open_files
 36373                                  jfnfx:	
 36374 00006643 C3                      	retn				; bye
 36375                                  
 36376                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36377                                  
 36378                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36379                                  ;----------------------------------------------------------------------------
 36380                                  ;	SFNFree scans through the sf table looking for a free entry
 36381                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36382                                  ;
 36383                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36384                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36385                                  ;	we can't just mark it busy because we may get blown out of our open
 36386                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36387                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36388                                  ;	an SFT with this value we look to see if it belongs to this user
 36389                                  ;	and process.  If it does belong to us then it must be an orphan
 36390                                  ;	and we reclaim it.
 36391                                  ;
 36392                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36393                                  ;		over and over, but we could at least set a high water mark...
 36394                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36395                                  ;		even though this is not a frequently called routine - jgl
 36396                                  ;
 36397                                  ;	ENTRY	(ss) = DOSDATA
 36398                                  ;	EXIT	'C' clear if no error
 36399                                  ;		  (bx) = SFN
 36400                                  ;		  (es:di) = pointer to SFT
 36401                                  ;		  es:[di].SFT_REF_COUNT = -1
 36402                                  ;		'C' set if error
 36403                                  ;		  (al) = error code
 36404                                  ;	USES	bx, di, es, Flags
 36405                                  ;----------------------------------------------------------------------------
 36406                                  
 36407                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36408                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36409                                  
 36410                                  SFNFree:
 36411                                  	; 12/08/2018
 36412                                  	; 05/08/2018 - Retro DOS v3.0
 36413                                  	;
 36414                                  	; MSDOS 6.0
 36415 00006644 50                      	push	ax
 36416 00006645 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36417                                  sfnf5:	
 36418 00006647 53                      	push	bx
 36419 00006648 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36420 0000664B 5B                      	pop	bx
 36421 0000664C 723A                    	jc	short sfnf95		; no more free SFNs
 36422 0000664E 26833D00                	cmp	word [ES:DI],0
 36423                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36424 00006652 741D                    	je	short sfnf20			; yep, got one
 36425                                  	
 36426                                  	;cmp	word [es:di],0FFFFh ; -1
 36427 00006654 26833DFF                	cmp	word [ES:DI],sf_busy
 36428                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36429 00006658 7403                    	je	short sfnf10		; special busy mark
 36430                                  sfnf7:	
 36431 0000665A 43                      	inc	bx			; try the next one
 36432 0000665B EBEA                    	jmp	short sfnf5
 36433                                  
 36434                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36435                                  ;	it was abandoned during a earlier call and we can use it.
 36436                                  ;
 36437                                  ;	(bx)	= SFN
 36438                                  ;	(es:di) = pointer to SFT
 36439                                  ;	(TOS)	= caller's (ax)
 36440                                  
 36441                                  sfnf10:	
 36442 0000665D 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36443                                  	;cmp	[es:di+2Fh],ax
 36444 00006661 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36445 00006665 75F3                    	jnz	short sfnf7		; not ours
 36446 00006667 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36447                                  	;cmp	[es:di+31h],ax
 36448 0000666B 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36449 0000666F 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36450                                  
 36451                                  ;	We have an SFT to allocate
 36452                                  ;
 36453                                  ;	(bx)	= SFN
 36454                                  ;	(es:di) = pointer to SFT
 36455                                  ;	(TOS)	= caller's (ax)
 36456                                  
 36457                                  sfnf20:
 36458                                  	; cf = 0 ;; Retro DOS v3.0
 36459                                  
 36460                                  	;mov	word [es:di],0FFFFh
 36461 00006671 26C705FFFF              	mov	word [ES:DI],sf_busy
 36462                                  					; make sure that this is allocated
 36463                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36464                                  
 36465 00006676 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36466                                  	;mov	[es:di+2Fh],ax
 36467 0000667A 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36468 0000667E 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36469                                  	;mov	[es:di+31h],ax
 36470 00006682 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36471                                  sfnf21: ;; Retro DOS v3.0
 36472                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36473                                  	;pop	ax
 36474                                  	;;clc
 36475                                  	;retn				; return with no error
 36476                                  	; 17/12/2022
 36477 00006686 58                      	pop	ax
 36478                                  	;clc
 36479 00006687 C3                      	retn
 36480                                  
 36481                                  ;**	Error - no more free SFNs
 36482                                  ;
 36483                                  ;	'C' set
 36484                                  ;	(TOS) = saved ax
 36485                                  
 36486                                  sfnf95: 
 36487 00006688 58                      	pop	ax
 36488                                  	;mov	al,4
 36489 00006689 B004                    	mov	al,error_too_many_open_files
 36490 0000668B C3                      	retn				; return with 'C' and error
 36491                                  
 36492                                  ;============================================================================
 36493                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36494                                  ;============================================================================
 36495                                  ; 13/07/2018 - Retro DOS v3.0
 36496                                  ; 20/05/2019 - Retro DOS v4.0
 36497                                  
 36498                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36499                                  
 36500                                  ;	BREAK <$Close - return a handle to the system>
 36501                                  ;----------------------------------------------------------------------------
 36502                                  ;
 36503                                  ;**	$Close - Close a file Handle
 36504                                  ;
 36505                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36506                                  ;		path
 36507                                  ;
 36508                                  ;	Assembler usage:
 36509                                  ;	    MOV     BX, handle
 36510                                  ;	    MOV     AH, Close
 36511                                  ;	    INT     int_command
 36512                                  ;
 36513                                  ;	ENTRY	(bx) = handle
 36514                                  ;	EXIT	<normal INT21 return convention>
 36515                                  ;	USES	all
 36516                                  ;
 36517                                  ;----------------------------------------------------------------------------
 36518                                  
 36519                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36520                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36521                                  
 36522                                  _$CLOSE:
 36523                                  ;	Grab the SFT pointer from the JFN.
 36524                                  
 36525 0000668C E85A02                  	call	CheckOwner		; get system file entry
 36526 0000668F 722B                    	jc	short CloseError	; error return
 36527 00006691 16                      	push	ss
 36528 00006692 1F                      	pop	ds			; For DOS_CLOSE
 36529 00006693 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36530 00006697 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36531                                  
 36532                                  ; DS:SI point to JFN table entry.
 36533                                  ; ES:DI point to SFT
 36534                                  ;
 36535                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36536                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36537                                  ; If the file was not a net FCB, we free the JFN too.
 36538                                  
 36539                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36540 0000669B 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36541 0000669F 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36542                                  	;mov	al,[ES:DI+2]
 36543 000066A1 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36544                                  	;and	al,0F0h
 36545 000066A5 24F0                    	AND	AL,SHARING_MASK
 36546                                  	;cmp	al,70h
 36547 000066A7 3C70                    	CMP	AL,SHARING_NET_FCB
 36548 000066A9 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36549                                  
 36550                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36551                                  ; -1.
 36552                                  
 36553                                  FreeJFN:
 36554 000066AB E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36555 000066AE 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36556                                  PostFree:
 36557                                  
 36558                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36559                                  
 36560 000066B2 E813C8                  	call	DOS_CLOSE
 36561                                  
 36562                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36563                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36564                                  
 36565 000066B5 7205                    	JC	short CloseError
 36566                                  	;mov	ah,3Eh
 36567 000066B7 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36568                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36569                                  CloseOk:
 36570 000066B9 E97B9F                  	jmp	SYS_RET_OK
 36571                                  CloseError:
 36572 000066BC E9819F                  	jmp	SYS_RET_ERR
 36573                                  
 36574                                  ;	BREAK <$Commit - commit the file>
 36575                                  ;----------------------------------------------------------------------------
 36576                                  ;
 36577                                  ;**	$Commit - Commit a File
 36578                                  ;
 36579                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36580                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36581                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36582                                  ;	and fix this!! jgl
 36583                                  ;
 36584                                  ;	Assembler usage:
 36585                                  ;	    MOV     BX, handle
 36586                                  ;	    MOV     AH, Commit
 36587                                  ;	    INT     int_command
 36588                                  ;
 36589                                  ;	ENTRY	(bx) = handle
 36590                                  ;	EXIT	none
 36591                                  ;	USES	all
 36592                                  ;;----------------------------------------------------------------------------
 36593                                  
 36594                                  _$COMMIT:
 36595                                  ;	Grab the SFT pointer from the JFN.
 36596                                  
 36597 000066BF E82702                  	call	CheckOwner		; get system file entry
 36598 000066C2 7213                    	JC	short CommitError	; error return
 36599 000066C4 16                      	push	ss
 36600 000066C5 1F                      	pop	ds			; For DOS_COMMIT
 36601 000066C6 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36602 000066CA 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36603                                  
 36604                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36605                                  ;
 36606                                  ;	ES:DI point to SFT
 36607                                  
 36608 000066CE E839C9                  	call	DOS_COMMIT
 36609 000066D1 7204                    	JC	short CommitError
 36610                                  	; 07/12/2022
 36611                                  	;jc	short CloseError
 36612                                  	;mov	ah,68h
 36613 000066D3 B468                    	MOV	AH,COMMIT
 36614                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36615                                  	;jmp	SYS_RET_OK
 36616                                  CommitOk:
 36617 000066D5 EBE2                    	jmp	short CloseOk	
 36618                                  
 36619                                  CommitError:
 36620                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36621                                  	;jmp	SYS_RET_ERR
 36622 000066D7 EBE3                    	jmp	short CloseError
 36623                                  
 36624                                  ;	BREAK <$ExtHandle - extend handle count>
 36625                                  
 36626                                  ;**	$ExtHandle - Extend Handle Count
 36627                                  ;----------------------------------------------------------------------------
 36628                                  ;	Assembler usage:
 36629                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36630                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36631                                  ;	    INT     int_command 		 busy )
 36632                                  ;
 36633                                  ;	ENTRY	(bx) = new number of handles
 36634                                  ;	EXIT	'C' clear if OK
 36635                                  ;		'C' set iff err
 36636                                  ;		  (ax) = error code
 36637                                  ;			 AX = error_not_enough_memory
 36638                                  ;			      error_too_many_open_files
 36639                                  ;	USES	all
 36640                                  ;----------------------------------------------------------------------------
 36641                                  
 36642                                  _$ExtHandle:
 36643 000066D9 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36644                                  	;cmp	bx,20
 36645 000066DB 83FB14                  	CMP	BX,FILPERPROC
 36646 000066DE 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36647 000066E0 BB1400                  	MOV	BX,FILPERPROC
 36648                                  exth2:	
 36649 000066E3 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36650                                  	;mov	cx,[ES:32h]
 36651 000066E8 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36652 000066ED 39CB                    	CMP	BX,CX			; the requested == current
 36653 000066EF 7455                    	JE	short ok_done 		; yes and exit
 36654 000066F1 7722                    	JA	short larger		; go allocate new table
 36655                                  
 36656                                  ;	We're going to shrink the # of handles available
 36657                                  
 36658 000066F3 BD0100                  	MOV	BP,1			; shrink
 36659                                  	;mov	ds,[ES:36h]
 36660 000066F6 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36661 000066FB 89DE                    	MOV	SI,BX			;
 36662 000066FD 29D9                    	SUB	CX,BX			; get difference
 36663                                  
 36664                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36665                                  chck_handles:
 36666 000066FF 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36667 00006702 753D                    	JNZ	short too_many_files	; status
 36668 00006704 46                      	INC	SI
 36669 00006705 E2F8                    	LOOP	chck_handles
 36670 00006707 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36671 0000670A 7709                    	JA	short larger		; no
 36672                                  
 36673 0000670C BD0200                  	MOV	BP,2			; psp
 36674                                  	;mov	di,24
 36675 0000670F BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36676 00006712 53                      	PUSH	BX
 36677 00006713 EB1D                    	JMP	short movhandl
 36678                                  
 36679                                  larger:
 36680 00006715 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36681 00006718 747F                    	JZ	short invalid_func	; 10/08/2018
 36682 0000671A F8                      	CLC
 36683 0000671B 53                      	PUSH	BX			; save requested number
 36684 0000671C 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36685 0000671F B104                    	MOV	CL,4
 36686                                  	;ror	bx,cl			; MSDOS 3.3
 36687 00006721 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36688 00006723 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36689                                  
 36690 00006727 55                      	PUSH	BP
 36691 00006728 E8DCFA                  	call	_$ALLOC			; allocate memory
 36692 0000672B 5D                      	POP	BP
 36693 0000672C 7266                    	JC	short no_memory		; not enough meory
 36694                                  
 36695 0000672E 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36696 00006730 31FF                    	XOR	DI,DI
 36697                                  movhandl:
 36698 00006732 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36699                                  
 36700 00006737 F7C50300                	test	BP,3			; enlarge ?
 36701 0000673B 740C                    	JZ	short enlarge 		; yes
 36702 0000673D 59                      	POP	CX			; cx = the amount you shrink
 36703 0000673E 51                      	PUSH	CX
 36704 0000673F EB0C                    	JMP	short copy_hand
 36705                                  
 36706                                  ;	Done.  'C' clear
 36707                                  
 36708                                  ; 17/12/2022
 36709                                  ;ok_done:
 36710                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36711                                  ;	;jmp	short CommitOk
 36712                                  ;	; 17/12/2022
 36713                                  ;	jmp	SYS_RET_OK
 36714                                  
 36715                                  too_many_files:
 36716                                  	;mov	al,4
 36717 00006741 B004                    	MOV	AL,error_too_many_open_files
 36718                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36719                                  	;jmp	SYS_RET_ERR
 36720                                  CommitErrorj:
 36721                                  	;jmp	short CommitError
 36722                                  	; 17/12/2022
 36723 00006743 E9FA9E                  	jmp	SYS_RET_ERR
 36724                                  
 36725                                  ; 17/12/2022 
 36726                                  ok_done:
 36727                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36728                                  	;jmp	short CommitOk
 36729                                  	; 17/12/2022
 36730 00006746 E9EE9E                  	jmp	SYS_RET_OK
 36731                                  
 36732                                  enlarge:
 36733                                  	;mov	cx,[32h]
 36734 00006749 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36735                                  copy_hand:
 36736 0000674D 89CA                    	MOV	DX,CX
 36737                                  	;lds	si,[34h]
 36738 0000674F C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36739 00006753 F3A4                    	REP	MOVSB			; copy infomation to new table
 36740 00006755 59                      	POP	CX			; get new number of handles
 36741 00006756 51                      	PUSH	CX			; save it again
 36742 00006757 29D1                    	SUB	CX,DX			; get the difference
 36743 00006759 B0FF                    	MOV	AL,-1			; set availability to handles
 36744 0000675B F3AA                    	REP	STOSB
 36745 0000675D 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36746                                  	;cmp	word [34h],0
 36747 00006762 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36748 00006767 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36749 00006769 55                      	PUSH	BP
 36750 0000676A 1E                      	PUSH	DS			; save old table segment
 36751 0000676B 06                      	PUSH	ES			; save new table segment
 36752 0000676C 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36753 00006770 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36754 00006773 07                      	POP	ES			; restore new table segment
 36755 00006774 1F                      	POP	DS			; restore old table segment
 36756 00006775 5D                      	POP	BP
 36757                                  
 36758                                  update_info:
 36759 00006776 F7C50200                	test	BP,2			; psp?
 36760 0000677A 7408                    	JZ	short non_psp 		; no
 36761                                  	;mov	word [34h],18h ; 24
 36762 0000677C C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36763 00006782 EB06                    	JMP	short final
 36764                                  non_psp:
 36765                                  	;mov	word [34h],0
 36766 00006784 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36767                                  final:
 36768                                  	;mov	[36h],es	
 36769 0000678A 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36770                                  	;pop	word [32h]
 36771 0000678E 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36772                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36773                                  	;jmp	SYS_RET_OK
 36774                                  ok_done_j:
 36775 00006792 EBB2                    	jmp	short ok_done
 36776                                  
 36777                                  no_memory:
 36778 00006794 5B                      	POP	BX			; clean stack
 36779                                  	;mov	al,8
 36780 00006795 B008                    	MOV	AL,error_not_enough_memory
 36781                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36782                                  	;jmp	SYS_RET_ERR
 36783                                  CommitErrorj2:
 36784 00006797 EBAA                    	jmp	short CommitErrorj
 36785                                  
 36786                                  invalid_func:
 36787                                  	;mov	al,1
 36788 00006799 B001                    	MOV	AL,error_invalid_function
 36789                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36790                                  	;jmp	SYS_RET_ERR
 36791                                  CommitErrorj3:
 36792                                  	;jmp	short CommitErrorj2
 36793                                  	; 17/12/2022
 36794 0000679B EBA6                    	jmp	short CommitErrorj
 36795                                  
 36796                                  ; 20/05/2019 - Retro DOS v4.0
 36797                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36798                                  
 36799                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36800                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36801                                  
 36802                                  ;	BREAK <$READ - Read from a file handle>
 36803                                  ;----------------------------------------------------------------------------
 36804                                  ;
 36805                                  ;**	$Read - Read from a File Handle
 36806                                  ;
 36807                                  ;   Assembler usage:
 36808                                  ;
 36809                                  ;	LDS	DX, buf
 36810                                  ;	MOV	CX, count
 36811                                  ;	MOV	BX, handle
 36812                                  ;	MOV	AH, Read
 36813                                  ;	INT	int_command
 36814                                  ;	  AX has number of bytes read
 36815                                  ;
 36816                                  ;	ENTRY	(bx) = file handle
 36817                                  ;		(cx) = byte count
 36818                                  ;		(ds:dx) = buffer address
 36819                                  ;	EXIT	Through system call return so that to user:
 36820                                  ;		  'C' clear if OK
 36821                                  ;		    (ax) = bytes read
 36822                                  ;		  'C' set if error
 36823                                  ;		    (ax) = error code
 36824                                  ;
 36825                                  ;----------------------------------------------------------------------------
 36826                                  
 36827                                  _$READ:
 36828 0000679D BE[5C32]                	MOV	SI,DOS_READ
 36829                                  ReadDo:
 36830 000067A0 E831FE                  	call	pJFNFromHandle
 36831 000067A3 7208                    	JC	short ReadError
 36832                                  
 36833 000067A5 268A05                  	MOV	AL,[ES:DI]
 36834 000067A8 E83E01                  	call	CheckOwner		; get the handle
 36835 000067AB 7303                    	JNC	short ReadSetup		; no errors do the operation
 36836                                  
 36837                                  ;	Have an error. 'C' set
 36838                                  
 36839                                  ReadError:
 36840                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36841                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36842                                  	;jmp	short CommitErrorj3
 36843                                  	; 17/12/2022
 36844 000067AD E9909E                  	jmp	SYS_RET_ERR
 36845                                  
 36846                                  ReadSetup:
 36847 000067B0 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36848 000067B5 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36849                                  	; 20/05/2019 - Retro DOS v4.0
 36850                                  	; MSDOS 6.0 
 36851                                  ;; Extended Open
 36852                                  	;test	byte [es:di+3],20h
 36853 000067BA 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36854                                  						 ;AN000;;EO. need i24
 36855 000067BF 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36856 000067C1 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36857                                  					;AN000;;EO. set it off;smr;SS Override
 36858                                  needi24:				;AN000;
 36859                                  ;; Extended Open
 36860 000067C7 36FF36[2C03]            	push	word [SS:DMAADD]
 36861 000067CC 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36862                                  
 36863                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36864                                  
 36865                                  	; 26/07/2019
 36866                                  
 36867                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36868                                  	;
 36869                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36870                                  	; there is not another caller; it is better to put the code in this proc
 36871                                   	; here instead of calling it as a subroutine; but I have modified code
 36872                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36873                                  
 36874                                  	; MSDOS 6.0
 36875 000067D1 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36876                                  	
 36877                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36878                                  	; MSDOS 3.3
 36879                                  	;MOV	BX,DX			; copy offset
 36880                                  	;push	cx			; don't stomp on count
 36881                                  	;MOV	CL,4			; bits to shift bytes->para
 36882                                  	;SHR	BX,CL			; get number of paragraphs
 36883                                  	;pop	cx			; get count back
 36884                                  	;MOV	AX,DS			; get original segment
 36885                                  	;ADD	AX,BX			; get new segment
 36886                                  	;MOV	DS,AX			; in seg register
 36887                                  	;AND	DX,0Fh			; normalize offset
 36888                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36889                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36890                                  						;smr;SS Override
 36891                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36892                                  	
 36893 000067D4 16                      	push	ss			; go for DOS addressability
 36894 000067D5 1F                      	pop	ds
 36895                                  
 36896 000067D6 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36897                                  
 36898 000067D8 8F06[2E03]              	pop	word [DMAADD+2]
 36899 000067DC 8F06[2C03]              	pop	word [DMAADD]
 36900                                  	;JNC	short READ_OK		;AN002;
 36901                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36902                                  	; 17/12/2022
 36903 000067E0 72CB                    	jc	short ReadError
 36904                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36905                                  	;jnc	short READ_OK		;AN002;
 36906                                  	;jmp	short ReadError
 36907                                  
 36908                                  READ_OK:
 36909 000067E2 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36910                                  Read_Okj:
 36911                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36912                                  	;;jmp	SYS_RET_OK		; successful return
 36913                                  	;jmp	short ok_done_j
 36914                                  	; 17/12/2022
 36915 000067E4 E9509E                  	jmp	SYS_RET_OK
 36916                                  
 36917                                  ; 13/07/2018 - Retro DOS v3.0
 36918                                  
 36919                                  ;----------------------------------------------------------------------------
 36920                                  
 36921                                  ;   Input: DS:DX points to user's buffer addr
 36922                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36923                                  ;   Output: [DMAADD] set
 36924                                  
 36925                                  ; 20/05/2019 - Retro DOS v4.0
 36926                                  ; 26/07/2019
 36927                                  ;	; MSDOS 6.0
 36928                                  ;Align_Buffer:
 36929                                  ;	MOV	BX,DX			; copy offset
 36930                                  ;	push	cx			; don't stomp on count
 36931                                  ;	MOV	CL,4			; bits to shift bytes->para
 36932                                  ;	SHR	BX,CL			; get number of paragraphs
 36933                                  ;	pop	cx			; get count back
 36934                                  ;	MOV	AX,DS			; get original segment
 36935                                  ;	ADD	AX,BX			; get new segment
 36936                                  ;	MOV	DS,AX			; in seg register
 36937                                  ;	AND	DX,0Fh			; normalize offset
 36938                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36939                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36940                                  ;						;smr;SS Override
 36941                                  ;	retn
 36942                                  
 36943                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36944                                  Align_Buffer:
 36945 000067E7 89D3                    	MOV	BX,DX			; copy offset
 36946 000067E9 51                      	push	cx			; don't stomp on count
 36947 000067EA B104                    	MOV	CL,4			; bits to shift bytes->para
 36948 000067EC D3EB                    	SHR	BX,CL			; get number of paragraphs
 36949 000067EE 59                      	pop	cx			; get count back
 36950 000067EF 8CD8                    	MOV	AX,DS			; get original segment
 36951 000067F1 01D8                    	ADD	AX,BX			; get new segment
 36952 000067F3 8ED8                    	MOV	DS,AX			; in seg register
 36953 000067F5 83E20F                  	AND	DX,0Fh			; normalize offset
 36954 000067F8 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36955 000067FD 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36956                                  						;smr;SS Override
 36957 00006802 C3                      	retn
 36958                                  
 36959                                  ; 20/05/2019 - Retro DOS v4.0
 36960                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36961                                  
 36962                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36963                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36964                                  
 36965                                  ;BREAK <$WRITE - write to a file handle>
 36966                                  ;----------------------------------------------------------------------------
 36967                                  ;
 36968                                  ;   Assembler usage:
 36969                                  ;	    LDS     DX, buf
 36970                                  ;	    MOV     CX, count
 36971                                  ;	    MOV     BX, handle
 36972                                  ;	    MOV     AH, Write
 36973                                  ;	    INT     int_command
 36974                                  ;	  AX has number of bytes written
 36975                                  ;   Errors:
 36976                                  ;	    AX = write_invalid_handle
 36977                                  ;	       = write_access_denied
 36978                                  ;
 36979                                  ;   Returns in register AX
 36980                                  ;
 36981                                  ;----------------------------------------------------------------------------
 36982                                  
 36983                                  _$WRITE:
 36984 00006803 BE[8534]                	MOV	SI,DOS_WRITE
 36985 00006806 EB98                    	JMP	short ReadDo
 36986                                  
 36987                                  ;BREAK <$LSEEK - move r/w pointer>
 36988                                  ;----------------------------------------------------------------------------
 36989                                  ;
 36990                                  ;   Assembler usage:
 36991                                  ;	    MOV     DX, offsetlow
 36992                                  ;	    MOV     CX, offsethigh
 36993                                  ;	    MOV     BX, handle
 36994                                  ;	    MOV     AL, method
 36995                                  ;	    MOV     AH, LSeek
 36996                                  ;	    INT     int_command
 36997                                  ;	  DX:AX has the new location of the pointer
 36998                                  ;   Error returns:
 36999                                  ;	    AX = error_invalid_handle
 37000                                  ;	       = error_invalid_function
 37001                                  ;   Returns in registers DX:AX
 37002                                  ;
 37003                                  ;----------------------------------------------------------------------------
 37004                                  
 37005                                  ; 21/05/2019 - Retro DOS v4.0
 37006                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37007                                  
 37008                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37009                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37010                                  
 37011                                  _$LSEEK:
 37012 00006808 E8DE00                  	call	CheckOwner		; get system file entry
 37013                                  
 37014                                  	; 17/12/2022
 37015                                  ;LSeekError:
 37016                                  	;JNC	short CHKOWN_OK		;AN002;
 37017                                  	;JMP	short ReadError		;AN002; error return
 37018                                  	; 17/12/2022
 37019                                  	; 02/06/2019
 37020 0000680B 72A0                    	jc	short ReadError
 37021                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37022                                  	;JNC	short CHKOWN_OK		;AN002;
 37023                                  	;JMP	short ReadError		;AN002; error return
 37024                                  
 37025                                  CHKOWN_OK:
 37026                                  					;AN002;
 37027 0000680D 3C02                    	CMP	AL,2			; is the seek value correct?
 37028 0000680F 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37029                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37030 00006811 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37031                                  					;smr;SS Override
 37032                                  	;mov	al,1
 37033 00006817 B001                    	mov	al,error_invalid_function ; invalid method
 37034                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37035                                  LSeekError2:
 37036 00006819 EB92                    	jmp	short ReadError
 37037                                  
 37038                                  LSeekDisp:
 37039 0000681B 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37040 0000681D 720A                    	JB	short LSeekStore	; just store CX:DX
 37041 0000681F 771B                    	JA	short LSeekEOF		; seek from end of file
 37042                                  	;add	dx,[es:di+21]
 37043 00006821 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37044                                  	;adc	cx,[es:di+23]
 37045 00006825 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37046                                  LSeekStore:
 37047 00006829 89C8                    	MOV	AX,CX			; AX:DX
 37048 0000682B 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37049                                  LSeekSetpos:
 37050                                  	;mov	[es:di+21],ax
 37051 0000682C 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37052                                  	;mov	[es:di+23],dx
 37053 00006830 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37054 00006834 E84A9C                  	call	Get_User_Stack
 37055                                  	;mov	[si+6],dx
 37056 00006837 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37057                                  	;jmp	SYS_RET_OK		; successful return
 37058                                  	; 25/06/2019
 37059                                  	;jmp	SYS_RET_OK_clc
 37060                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37061                                  	;jmp	SYS_RET_OK_clc
 37062                                  LSeekOk:
 37063 0000683A EBA8                    	jmp     short Read_Okj
 37064                                  
 37065                                  LSeekEOF:
 37066                                  	;;test	word [es:di+5],8000h
 37067                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37068                                  	; 21/05/2019 - Retro DOS v4.0
 37069 0000683C 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37070 00006841 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37071                                  LOCAL_LSeek:
 37072                                  	;add	dx,[es:di+17]
 37073 00006843 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37074                                  	;adc	cx,[es:di+19]
 37075 00006847 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37076 0000684B EBDC                    	JMP	short LSeekStore	; go and set the position
 37077                                  
 37078                                  Check_LSeek_Mode:
 37079                                  	;;test	word [es:di+2],8000h
 37080                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37081                                  	; 21/05/2019
 37082 0000684D 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37083 00006852 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37084                                  	;mov	ax,[es:di+2]
 37085 00006854 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37086                                  	;and	ax, 0F0h
 37087 00006858 25F000                  	AND	AX,SHARING_MASK
 37088                                  	;cmp	ax,40h
 37089 0000685B 83F840                  	CMP	AX,SHARING_DENY_NONE
 37090 0000685E 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37091                                  	;cmp	ax,30h
 37092 00006860 83F830                  	CMP	AX,SHARING_DENY_READ
 37093 00006863 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37094                                  NET_LSEEK:
 37095                                  ;	JMP	short LOCAL_LSeek
 37096                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37097                                  	;CallInstall Net_Lseek,MultNET,33
 37098                                  	;JNC	short LSeekSetPos
 37099                                  
 37100 00006865 B82111                  	mov     ax,1121h
 37101 00006868 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37102                                  			; CX:DX = offset (in bytes) from end
 37103                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37104                                  			; SS = DOS CS
 37105                                  			; Return: CF set on error
 37106                                  			; CF clear if successful, DX:AX = new file position
 37107 0000686A 73C0                    	jnb     short LSeekSetpos
 37108                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37109                                  	;jmp	SYS_RET_ERR
 37110                                  ;LSeekError3:
 37111                                  	; 17/12/2022
 37112                                  LSeekError:
 37113                                  	;jmp	short LSeekError2
 37114                                  DupErr:	; 17/12/2022
 37115 0000686C E9D19D                  	jmp	SYS_RET_ERR
 37116                                  
 37117                                  ;BREAK <FileTimes - modify write times on a handle>
 37118                                  ;----------------------------------------------------------------------------
 37119                                  ;
 37120                                  ;   Assembler usage:
 37121                                  ;	    MOV AH, FileTimes (57H)
 37122                                  ;	    MOV AL, func
 37123                                  ;	    MOV BX, handle
 37124                                  ;	; if AL = 1 then then next two are mandatory
 37125                                  ;	    MOV CX, time
 37126                                  ;	    MOV DX, date
 37127                                  ;	    INT 21h
 37128                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37129                                  ;	; for the handle.
 37130                                  ;
 37131                                  ;	AL=02		 get extended attributes
 37132                                  ;	   BX=handle
 37133                                  ;	   CX=size of buffer (0, return max size )
 37134                                  ;	   DS:SI query list (si=-1, selects all EA)
 37135                                  ;	   ES:DI buffer to hold EA list
 37136                                  ;
 37137                                  ;	AL=03		 get EA name list
 37138                                  ;	   BX=handle
 37139                                  ;	   CX=size of buffer (0, return max size )
 37140                                  ;	   ES:DI buffer to hold name list
 37141                                  ;
 37142                                  ;	AL=04		 set extended attributes
 37143                                  ;	   BX=handle
 37144                                  ;	   ES:DI buffer of EA list
 37145                                  ;
 37146                                  ;
 37147                                  ;   Error returns:
 37148                                  ;	    AX = error_invalid_function
 37149                                  ;	       = error_invalid_handle
 37150                                  ;
 37151                                  ;----------------------------------------------------------------------------
 37152                                  
 37153                                  ; 21/05/2019 - Retro DOS v4.0
 37154                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37155                                  
 37156                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37157                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37158                                  
 37159                                  _$FILE_TIMES:
 37160                                  	; 13/07/2018 - Retro DOS v3.0
 37161                                  
 37162                                  	; MSDOS 3.3
 37163                                  	;cmp	al,2			; correct subfunction ?
 37164                                  	;jb	short ft1
 37165                                  
 37166                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37167                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37168                                  						;SS Overr
 37169                                  	;;mov	al,1
 37170                                  	;mov	al,error_invalid_function ; give bad return
 37171                                  	;jmp	SYS_RET_ERR
 37172                                  
 37173                                  	; MSDOS 6.0
 37174 0000686F 3C02                    	cmp	al,2			; correct subfunction ?
 37175 00006871 7340                    	jae	short inval_func
 37176                                  ;ft1:
 37177 00006873 E87300                  	call	CheckOwner		; get sft
 37178                                  	; 17/12/2022
 37179 00006876 72F4                    	jc	short LSeekError	; bad handle
 37180                                  
 37181 00006878 08C0                    	or	al,al			; get time/date ?
 37182 0000687A 7515                    	jnz	short ft_set_time
 37183                                  
 37184                                  ;------ here we get the time & date from the sft for the user
 37185                                  
 37186 0000687C FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37187                                  	;mov	cx,[es:di+13]
 37188 0000687D 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37189                                  	;mov	dx,[es:di+15]
 37190 00006881 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37191 00006885 FB                      	sti
 37192 00006886 E8F89B                  	call	Get_User_Stack
 37193                                  	;mov	[si+4],cx
 37194 00006889 894C04                  	mov	[si+user_env.user_CX],cx
 37195                                  	;mov	[si+6],dx
 37196 0000688C 895406                  	mov	[si+user_env.user_DX],dx
 37197 0000688F EB1F                    	jmp	short ok_ret
 37198                                  
 37199                                  ;------ here we set the time in sft
 37200                                  
 37201                                  ft_set_time:
 37202 00006891 E879AA                  	call    ECritSFT
 37203                                  	;mov	[es:di+13],cx
 37204 00006894 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37205                                  	;mov	[es:di+15],dx
 37206 00006898 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37207                                  
 37208 0000689C 31C0                    	xor	ax, ax
 37209 0000689E 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37210                                  
 37211                                  ;------ set the flags in SFT entry
 37212                                  	;and	word [es:di+5],0FFBFh
 37213                                  	; 18/12/2022
 37214                                  	;and	byte [es:di+5],0BFh
 37215 000068A3 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37216                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37217                                  							; mark file as dirty
 37218                                  	;or	word [es:di+5],4000h
 37219                                  	; 17/12/2022
 37220                                  	;or	byte [es:di+6],40h
 37221 000068A8 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37222                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37223                                  							; ask close not to
 37224                                  							;   bother about date
 37225                                  							;   and time
 37226 000068AD E878AA                  	call	LCritSFT
 37227                                  ok_ret:
 37228                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37229                                  	; 17/12/2022
 37230 000068B0 E9849D                  	jmp	SYS_RET_OK
 37231                                  	;jmp	short LSeekOk
 37232                                  
 37233                                  inval_func:
 37234                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37235 000068B3 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37236                                  						;SS Overr
 37237                                  	;mov	al,1
 37238 000068B9 B001                    	mov	al,error_invalid_function ; give bad return
 37239                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37240                                  ft_error:
 37241                                  	;;jmp	SYS_RET_ERR
 37242                                  	;jmp	short LSeekError3
 37243                                  	; 17/12/2022
 37244 000068BB EBAF                    	jmp	short LSeekError
 37245                                  
 37246                                  ; 21/05/2019 - Retro DOS v4.0
 37247                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37248                                  
 37249                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37250                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37251                                  
 37252                                  ;BREAK <$DUP - duplicate a jfn>
 37253                                  ;----------------------------------------------------------------------------
 37254                                  ;
 37255                                  ;   Assembler usage:
 37256                                  ;	    MOV     BX, fh
 37257                                  ;	    MOV     AH, Dup
 37258                                  ;	    INT     int_command
 37259                                  ;	  AX has the returned handle
 37260                                  ;   Errors:
 37261                                  ;	    AX = dup_invalid_handle
 37262                                  ;	       = dup_too_many_open_files
 37263                                  ;
 37264                                  ;----------------------------------------------------------------------------
 37265                                  
 37266                                  _$DUP:
 37267 000068BD 89D8                    	MOV	AX,BX			; save away old handle in AX
 37268 000068BF E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37269                                  DupErrorCheck:
 37270 000068C2 72A8                    	JC	short DupErr		; nope, bye
 37271 000068C4 06                      	push	es
 37272 000068C5 57                      	push	di			; save away SFT
 37273 000068C6 5E                      	pop	si			; into convenient place DS:SI
 37274 000068C7 1F                      	pop	ds
 37275 000068C8 93                      	XCHG	AX,BX			; get back old handle
 37276 000068C9 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37277 000068CC 729E                    	JC	short DupErr		; errors go home
 37278 000068CE E80FC1                  	call	DOS_Dup_Direct
 37279 000068D1 E800FD                  	call	pJFNFromHandle		; get pointer
 37280 000068D4 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37281 000068D7 881C                    	MOV	[SI],BL			; stuff in new SFT
 37282                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37283                                  	;jmp	SYS_RET_OK		; and go home
 37284 000068D9 EBD5                    	jmp	short ok_ret
 37285                                  
 37286                                  	; 17/12/2022
 37287                                  ;DupErr:
 37288                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37289                                  	;;jmp	SYS_RET_ERR
 37290                                  	;jmp	short ft_error
 37291                                  
 37292                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37293                                  ;----------------------------------------------------------------------------
 37294                                  ;
 37295                                  ;   Assembler usage:
 37296                                  ;	    MOV     BX, fh
 37297                                  ;	    MOV     CX, newfh
 37298                                  ;	    MOV     AH, Dup2
 37299                                  ;	    INT     int_command
 37300                                  ;   Error returns:
 37301                                  ;	    AX = error_invalid_handle
 37302                                  ;
 37303                                  ;----------------------------------------------------------------------------
 37304                                  
 37305                                  _$DUP2:
 37306 000068DB 53                      	push	bx
 37307 000068DC 51                      	push	cx			; save source
 37308 000068DD 89CB                    	MOV	BX,CX			; get one to close
 37309 000068DF E8AAFD                  	call	_$CLOSE			; close destination handle
 37310 000068E2 5B                      	pop	bx
 37311 000068E3 58                      	pop	ax			; old in AX, new in BX
 37312 000068E4 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37313 000068E7 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37314                                  
 37315                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37316                                  ;----------------------------------------------------------------------------
 37317                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37318                                  ;   process without the process knowing it (delete/rename of open files, for
 37319                                  ;   example), it is possible for the redirector to issue a call to a handle
 37320                                  ;   that it soes not rightfully own. We check here to make sure that the
 37321                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37322                                  ;   SFFromHandle to really make sure that the SFT is good.
 37323                                  ;
 37324                                  ;	ENTRY	BX has the handle
 37325                                  ;		User_ID is the current user
 37326                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37327                                  ;		Carry Set => AX has error code
 37328                                  ;	USES	none
 37329                                  ;----------------------------------------------------------------------------
 37330                                  
 37331                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37332                                  	; 21/05/2019 - Retro DOS v4.0
 37333                                  CheckOwner:
 37334                                  	; 13/07/2018 - Retro DOS v3.0
 37335                                  
 37336 000068E9 E805FD                  	call	SFFromHandle
 37337 000068EC 721B                    	jc	short co_ret_label	; retc
 37338                                  
 37339 000068EE 50                      	push	ax
 37340                                  
 37341                                  	; MSDOS 6.0
 37342                                  
 37343                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37344                                  ;SR; are shared across multiple VMs in win386.
 37345                                  
 37346 000068EF 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37347 000068F5 7404                    	jz	short no_win386		;win386 is not present
 37348 000068F7 31C0                    	xor	ax,ax			;set the zero flag
 37349 000068F9 EB08                    	jmp	short _skip_win386	
 37350                                  
 37351                                  no_win386:
 37352 000068FB 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37353                                  	;cmp	ax,[es:di+47]
 37354 000068FF 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37355                                  
 37356                                  _skip_win386:
 37357 00006903 58                      	pop	ax
 37358                                  	
 37359                                  	; 17/12/2022
 37360 00006904 7403                    	jz	short co_ret_label
 37361                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37362                                  	;jnz	short CheckOwner_err
 37363                                  	;retn
 37364                                  	
 37365                                  CheckOwner_err:
 37366                                  	;mov	al,6
 37367 00006906 B006                    	mov	al,error_invalid_handle
 37368 00006908 F9                      	stc
 37369                                  
 37370                                  co_ret_label:
 37371 00006909 C3                      	retn
 37372                                  
 37373                                  ;============================================================================
 37374                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37375                                  ;============================================================================
 37376                                  ; Retro	DOS v3.0 - 11/07/2018
 37377                                  ; 21/05/2019 - Retro DOS v4.0
 37378                                  
 37379                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37380                                  ;	NAME	MACRO
 37381                                  
 37382                                  ;	Microsoft Confidential
 37383                                  ;	Copyright (C) Microsoft Corporation 1991
 37384                                  ;	All Rights Reserved.
 37385                                  
 37386                                  ;**	MACRO.ASM
 37387                                  ;
 37388                                  ;	$AssignOper
 37389                                  ;	FIND_DPB
 37390                                  ;	InitCDS
 37391                                  ;	$UserOper
 37392                                  ;	GetVisDrv
 37393                                  ;	GetThisDrv
 37394                                  ;	GetCDSFromDrv
 37395                                  ;
 37396                                  ;   Revision history:
 37397                                  ;
 37398                                  ;	Created: MZ 4 April 1983
 37399                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37400                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37401                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37402                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37403                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37404                                  ;				    aliasing.
 37405                                  ;
 37406                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37407                                  ;   each valid drive letter the text of the current directory on that drive.
 37408                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37409                                  ;   be at the root. A current directory is either the raw local directory
 37410                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37411                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37412                                  ;
 37413                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37414                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37415                                  ;   this and all * are expanded into ?'s.
 37416                                  ;
 37417                                  ;   The second part of name translation involves subtree aliasing. A list of
 37418                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37419                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37420                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37421                                  ;   replaced with the other subtree in the pair.
 37422                                  ;
 37423                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37424                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37425                                  ;   The output of the previous translation is examined to see if any of the
 37426                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37427                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37428                                  ;   'mount' one device under another.
 37429                                  ;
 37430                                  ;   The final form of name translation involves the mapping of a user's
 37431                                  ;   logical drive number into the internal physical drive. This is
 37432                                  ;   accomplished by converting the drive number into letter:CON, performing
 37433                                  ;   the above translation and then converting the character back into a drive
 37434                                  ;   number.
 37435                                  ;
 37436                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37437                                  ;   take a path and form the real text of the pathname with all . and ..
 37438                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37439                                  ;   TransPath.
 37440                                  ;
 37441                                  ;	A000	version 4.00  Jan. 1988
 37442                                  
 37443                                  ;Installed = TRUE
 37444                                  
 37445                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37446                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37447                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37448                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37449                                  ;					; current drive)
 37450                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37451                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37452                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37453                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37454                                  ;	I_need	MYNAME,16		; machine name
 37455                                  ;	I_need	MYNUM,WORD		; machine number
 37456                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37457                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37458                                  ;	I_need	DrvErr,BYTE		; drive error
 37459                                  
 37460                                  ;BREAK <$AssignOper -- Set up a Macro>
 37461                                  ;----------------------------------------------------------------------------
 37462                                  ; Inputs:
 37463                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37464                                  ;	AL = 01 set assign mode 		    (SetMode)
 37465                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37466                                  ;	AL = 03 Define Macro (attch start)
 37467                                  ;	    BL = Macro type
 37468                                  ;	       = 0 alias
 37469                                  ;	       = 1 file/device
 37470                                  ;	       = 2 drive
 37471                                  ;	       = 3 Char device -> network
 37472                                  ;	       = 4 File device -> network
 37473                                  ;	    DS:SI -> ASCIZ source name
 37474                                  ;	    ES:DI -> ASCIZ destination name
 37475                                  ;	AL = 04 Cancel Macro
 37476                                  ;	    DS:SI -> ASCIZ source name
 37477                                  ;	AL = 05 Modified get attach list entry
 37478                                  ;	AL = 06 Get ifsfunc item
 37479                                  ;	AL = 07 set in_use of a drive's CDS
 37480                                  ;	     DL = drive number, 0=default  0=A,,
 37481                                  ;	AL = 08 reset in_use of a drive's CDS
 37482                                  ;	     DL = drive number, 0=A, 1=B,,,
 37483                                  ; Function:
 37484                                  ;	Do macro stuff
 37485                                  ; Returns:
 37486                                  ;	Std Xenix style error return
 37487                                  ;----------------------------------------------------------------------------
 37488                                  
 37489                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37490                                  	; 21/05/2019 - Retro DOS v4.0
 37491                                  _$AssignOper:
 37492                                  	; MSDOS 6.0
 37493 0000690A 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37494 0000690C 7525                    	JNZ	short chk08		      ; no			;AN000;
 37495                                  srinuse:								;AN000;
 37496 0000690E 50                      	PUSH	AX			      ; save al 		;AN000;
 37497 0000690F 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37498 00006911 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37499 00006914 58                      	POP	AX			      ; 			;AN000;
 37500 00006915 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37501                                  	;cmp	word [si+45h],0
 37502 00006917 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37503 0000691B 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37504 0000691D 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37505 0000691F 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37506                                  	;or	word [si+43h],4000h
 37507                                  	; 17/12/2022
 37508                                  	;or	byte [si+44h],40h
 37509 00006921 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37510                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37511 00006925 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37512                                  resetdrv:
 37513                                  	;and	word [si+43h],0BFFFh									;AN000;
 37514                                  	; 18/12/2022
 37515 00006927 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37516                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37517 0000692B EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37518                                  
 37519                                  	; 17/12/2022
 37520                                  baddrv: 								;AN000;
 37521 0000692D B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37522                                  
 37523                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37524                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37525                                  	; 17/12/2022
 37526                                  	; 21/05/2019
 37527                                  ASS_ERR:
 37528 00006930 E90D9D                  	jmp	SYS_RET_ERR
 37529                                  
 37530                                  chk08:									;AN000;
 37531 00006933 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37532 00006935 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37533                                  
 37534                                    ;IF	NOT INSTALLED
 37535                                  	;transfer NET_ASSOPER
 37536                                    ;ELSE
 37537                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37538 00006937 50                      	PUSH	AX
 37539                                  	;mov	ax,111Eh
 37540                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37541 00006938 B81E11                  	mov	ax,(MultNET*256)+30
 37542 0000693B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37543                                  			; SS = DOS CS
 37544                                  			; STACK: WORD function to execute
 37545                                  			; Return: CF set on error, AX = error code
 37546                                  			; STACK unchanged
 37547 0000693D 5B                      	POP	BX			; Don't zap error code in AX
 37548 0000693E 72F0                    	JC	short ASS_ERR
 37549                                  okdone:
 37550 00006940 E9F49C                  	jmp	SYS_RET_OK
 37551                                  
 37552                                  	; 17/12/2022
 37553                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37554                                  ;ASS_ERR:
 37555                                  	;jmp	SYS_RET_ERR
 37556                                  
 37557                                    ;ENDIF
 37558                                  
 37559                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37560                                  ;----------------------------------------------------------------------------
 37561                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37562                                  ;
 37563                                  ;	ENTRY	AL has drive number A = 0
 37564                                  ;	EXIT	'C' set
 37565                                  ;		    No DPB for this drive number
 37566                                  ;		'C' clear
 37567                                  ;		    DS:SI points to DPB for drive
 37568                                  ;	USES	SI, DS, Flags
 37569                                  ;----------------------------------------------------------------------------
 37570                                  
 37571                                  	; 21/05/2019 - Retro DOS v4.0
 37572                                  FIND_DPB:
 37573 00006943 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37574                                  fdpb5:	
 37575 00006948 83FEFF                  	CMP	SI,-1
 37576 0000694B 7409                    	JZ	short fdpb10
 37577 0000694D 3A04                    	cmp	al,[si]
 37578                                  	;CMP	AL,[SI+DPB.DRIVE]
 37579 0000694F 7406                    	jz	short ret_label15	; Carry clear (retz)
 37580                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37581                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37582 00006951 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37583 00006954 EBF2                    	JMP	short fdpb5
 37584                                  fdpb10:	
 37585 00006956 F9                      	STC
 37586                                  ret_label15:
 37587 00006957 C3                      	retn
 37588                                  
 37589                                  ;	Break <InitCDS - set up an empty CDS>
 37590                                  ;----------------------------------------------------------------------------
 37591                                  ;**	InitCDS - Setup an Empty CDS
 37592                                  ;
 37593                                  ;	ENTRY	ThisCDS points to CDS
 37594                                  ;		AL has uppercase drive letter
 37595                                  ;	EXIT	ThisCDS is now empty
 37596                                  ;		(ES:DI) = CDS
 37597                                  ;		'C' set if no DPB associated with drive
 37598                                  ;	USES	AH,ES,DI, Flags
 37599                                  ;----------------------------------------------------------------------------
 37600                                  
 37601                                  ; 21/05/2019 - Retro DOS v4.0
 37602                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37603                                  
 37604                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37605                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37606                                  
 37607                                  InitCDS:
 37608                                  	; 19/08/2018
 37609                                  	; 05/08/2018 - Retro DOS v3.0
 37610                                  	; MSDOS 6.0
 37611 00006958 50                      	push	ax			; save (AL) for caller
 37612 00006959 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37613                                  	;mov	word [es:di+67],0
 37614 0000695E 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37615 00006964 2C40                    	SUB	AL,"A"-1                ; A = 1
 37616 00006966 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37617 0000696B 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37618 0000696D 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37619 0000696E 50                      	PUSH	AX			; save drive number for later
 37620 0000696F 0441                    	add	al,"A"
 37621 00006971 B43A                    	MOV	AH,':'
 37622 00006973 268905                  	mov	[ES:DI],ax
 37623                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37624                                  	;mov	ax,"\"
 37625                                  	;mov	[es:di+2],ax
 37626                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37627 00006976 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37628                                  	;or	word [es:di+67],4000h
 37629                                  	;or	byte [es:di+68],40h
 37630 0000697C 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37631 00006981 29C0                    	sub	ax,ax
 37632                                  	;MOV	[es:di+73],ax ; 0
 37633 00006983 26894549                	MOV	[ES:DI+curdir.ID],ax
 37634                                  	;mov	[es:di+75],ax ; 0
 37635 00006987 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37636 0000698B B002                    	mov	al,2
 37637                                  	;mov	[es:di+79],aX ; 2
 37638 0000698D 2689454F                	MOV	[ES:DI+curdir.end],ax
 37639 00006991 58                      	POP	AX			; (al) = drive number
 37640 00006992 1E                      	push	ds
 37641 00006993 56                      	push	si
 37642 00006994 E8ACFF                  	call	FIND_DPB
 37643 00006997 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37644                                  	;mov	[es:di+69],si
 37645 00006999 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37646                                  	;mov	[es:di+71],ds
 37647 0000699D 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37648                                  icds5:	
 37649 000069A1 5E                      	pop	si
 37650 000069A2 1F                      	pop	ds
 37651                                  icdsx:	
 37652 000069A3 58                      	pop	ax
 37653                                  RET45:
 37654 000069A4 C3                      	retn
 37655                                  
 37656                                  ;Break <$UserOper - get/set current user ID (for net)>
 37657                                  ;----------------------------------------------------------------------------
 37658                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37659                                  ;	maintain this string and do no verifications.
 37660                                  ;
 37661                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37662                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37663                                  ;		DS:DX is user string pointer (calls 1,2)
 37664                                  ;		ES:DI is user buffer (call 3)
 37665                                  ;		BX is assign index (calls 2,3,4,5)
 37666                                  ;		CX is user number (call 1)
 37667                                  ;		DX is flag word (call 4)
 37668                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37669                                  ;			and user CX is set to the user number
 37670                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37671                                  ;		If AL = 5 then DX is flag word
 37672                                  ;----------------------------------------------------------------------------
 37673                                  
 37674                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37675                                  	; 21/05/2019 - Retro DOS v4.0
 37676                                  _$UserOper:
 37677                                  	; 05/08/2018 - Retro DOS v3.0
 37678                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37679 000069A5 50                      	PUSH	AX
 37680 000069A6 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37681 000069A8 58                      	POP	AX
 37682 000069A9 7211                    	JB	short UserGet 		; return to user the string
 37683 000069AB 742E                    	JZ	short UserSet 		; set the current user
 37684 000069AD 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37685 000069AF 763D                    	JBE	short UserPrint		; yep
 37686                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37687 000069B1 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37688                                  					; Extended Error Locus
 37689                                  	;error	error_invalid_function	; not 0,1,2,3
 37690                                  	;mov	al,1
 37691 000069B7 B001                    	MOV	AL,error_invalid_function
 37692                                  useroper_error:
 37693                                  	; 17/12/2022
 37694                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37695 000069B9 E9849C                  	JMP	SYS_RET_ERR
 37696                                  	;jmp	short ASS_ERR
 37697                                  
 37698                                  UserGet:
 37699                                  ; Transfer MYNAME to DS:DX
 37700                                  ; Set Return CX to MYNUM
 37701 000069BC 1E                      	PUSH	DS			; switch registers
 37702 000069BD 07                      	POP	ES
 37703 000069BE 89D7                    	MOV	DI,DX			; destination
 37704 000069C0 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37705 000069C5 E8B99A                  	call	Get_User_Stack
 37706                                  	;mov	[si+4],cx
 37707 000069C8 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37708 000069CB 16                      	push	ss			; point to DOSDATA
 37709 000069CC 1F                      	pop	ds
 37710 000069CD BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37711                                  UserMove:
 37712 000069D0 B90F00                  	MOV	CX,15
 37713 000069D3 F3A4                    	REP	MOVSB			; blam.
 37714 000069D5 31C0                    	XOR	AX,AX			; 16th byte is 0
 37715 000069D7 AA                      	STOSB
 37716                                  UserBye:
 37717 000069D8 E95C9C                  	jmp	SYS_RET_OK		; no errors here
 37718                                  
 37719                                  UserSet:
 37720                                  ; Transfer DS:DX to MYNAME
 37721                                  ; CX to MYNUM
 37722 000069DB 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37723 000069E0 89D6                    	MOV	SI,DX			; user space has source
 37724 000069E2 16                      	push	ss
 37725 000069E3 07                      	pop	es
 37726 000069E4 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37727 000069E7 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37728 000069EC EBE2                    	JMP	short UserMove
 37729                                  
 37730                                  UserPrint:
 37731                                  
 37732                                    ;IF NOT Installed
 37733                                    ;	transfer PRINTER_GETSET_STRING
 37734                                    ;ELSE
 37735 000069EE 50                      	PUSH	AX
 37736                                  	;mov	ax,111Fh
 37737                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37738 000069EF B81F11                  	mov	ax,(MultNET<<8)|31
 37739 000069F2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37740                                  			; STACK: WORD function
 37741                                  			; Return: CF set on error, AX = error code
 37742                                  			; STACK unchanged
 37743 000069F4 5A                      	POP	DX			; Clean stack
 37744                                  	;JNC	short OKPA
 37745 000069F5 73E1                    	jnc	short UserBye ; 21/05/2019
 37746                                  	; 17/12/2022
 37747 000069F7 EBC0                    	jmp	short useroper_error
 37748                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37749                                  	;jnb     short OKPA
 37750                                  	;jmp     short useroper_error
 37751                                  
 37752                                  	; 17/12/2022
 37753                                  ;OKPA:
 37754                                  ;	jmp	short UserBye
 37755                                  
 37756                                    ;ENDIF
 37757                                  
 37758                                  
 37759                                  ;Break	<GetVisDrv - return visible drive>
 37760                                  ;----------------------------------------------------------------------------
 37761                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37762                                  ;
 37763                                  ;   Inputs:	AL has drive identifier (0=default)
 37764                                  ;   Outputs:	Carry Set - invalid drive/macro
 37765                                  ;		Carry Clear - AL has physical drive (0=A)
 37766                                  ;		    ThisCDS points to CDS
 37767                                  ;   Registers modified: AL
 37768                                  ;----------------------------------------------------------------------------
 37769                                  
 37770                                  	; 21/05/2019 - Retro DOS v4.0
 37771                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37772                                  
 37773                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37774                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37775                                  GetVisDrv:
 37776                                  	; 05/08/2018 - Retro DOS v3.0
 37777                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37778 000069F9 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37779 000069FC 72A6                    	jc	short RET45
 37780 000069FE 1E                      	push	ds
 37781 000069FF 56                      	push	si
 37782 00006A00 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37783                                  	;test	word [si+67],2000h
 37784                                  	; 17/12/2022
 37785                                  	;test	byte [si+68],20h
 37786 00006A05 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37787                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37788 00006A09 5E                      	pop	si
 37789 00006A0A 1F                      	pop	ds
 37790 00006A0B 7497                    	jz	short RET45		; if not spliced, return OK
 37791                                  	; MSDOS 6.0
 37792                                  	;mov	byte [ss:DrvErr],0Fh
 37793 00006A0D 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37794 00006A13 F9                      	STC				; signal error
 37795 00006A14 C3                      	retn
 37796                                  
 37797                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37798                                  ;----------------------------------------------------------------------------
 37799                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37800                                  ;	macro pointer
 37801                                  ;
 37802                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37803                                  ;   Outputs:
 37804                                  ;		Carry Set - invalid drive/macro
 37805                                  ;		Carry Clear - AL has physical drive (0=A)
 37806                                  ;		   ThisCDS points to macro
 37807                                  ;   Registers modified: AL
 37808                                  ;----------------------------------------------------------------------------
 37809                                  
 37810                                  	; 21/05/2019 - Retro DOS v4.0
 37811                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37812                                  
 37813                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37814                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37815                                  GETTHISDRV:
 37816                                  	; 05/08/2018
 37817                                  	; 12/07/2018 - Retro DOS v3.0
 37818                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37819                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37820 00006A15 08C0                    	OR	AL,AL			; are we using default drive?
 37821 00006A17 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37822 00006A19 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37823                                  	;INC	ax			; Counteract next instruction
 37824                                  	; 04/09/2018
 37825                                  	;inc	al
 37826                                  	; 07/12/2022
 37827 00006A1D 40                      	inc	ax
 37828                                  GTD10:	
 37829                                  	;DEC	AX
 37830                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37831 00006A1E 48                      	dec	ax			; 0 = A
 37832                                  	;dec	al
 37833 00006A1F 1E                      	PUSH	DS			; save world
 37834 00006A20 56                      	PUSH	SI
 37835                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37836 00006A21 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37837 00006A27 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37838 00006A2D 7420                    	JZ	SHORT GTD20		; Logical
 37839 00006A2F 50                      	PUSH	AX
 37840 00006A30 06                      	PUSH	ES
 37841 00006A31 57                      	PUSH	DI
 37842 00006A32 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37843                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37844 00006A39 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37845 00006A3E 0441                    	ADD	AL,'A'
 37846 00006A40 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37847                                  	;test	word [es:di+67],4000h
 37848                                  	; 17/12/2022
 37849                                  	;test	byte [es:di+68],40h
 37850 00006A43 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37851                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37852 00006A48 5F                      	POP	DI
 37853 00006A49 07                      	POP	ES
 37854 00006A4A 58                      	POP	AX
 37855 00006A4B 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37856 00006A4D EB18                    	JMP	SHORT GTDX		; carry clear
 37857                                  GTD20:
 37858 00006A4F E81800                  	CALL	GetCDSFromDrv
 37859 00006A52 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37860                                  	;test	word [si+43h],4000h
 37861                                  	; 17/12/2022
 37862                                  	;test	byte [si+44h],40h
 37863 00006A54 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37864                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37865 00006A58 750D                    	JNZ	SHORT GTDX		; carry clear
 37866                                  GTD30:	
 37867                                  	; 21/05/2019
 37868                                  	; MSDOS 6.0
 37869 00006A5A B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37870 00006A5C 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37871                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37872 00006A60 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37873 00006A66 F9                      	STC
 37874                                  GTDX:	
 37875 00006A67 5E                      	POP	SI			; restore world
 37876 00006A68 1F                      	POP	DS
 37877 00006A69 C3                      	RETN
 37878                                   
 37879                                  
 37880                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37881                                  ;----------------------------------------------------------------------------
 37882                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37883                                  ;	pointer, returning an error if the drive number is greater than the
 37884                                  ;	number of CDS's
 37885                                  ;
 37886                                  ;   Inputs:	AL is physical unit # A=0...
 37887                                  ;   Outputs:	Carry Set if Bad Drive
 37888                                  ;		Carry Clear
 37889                                  ;		    DS:SI -> CDS
 37890                                  ;		    [THISCDS] = DS:SI
 37891                                  ;   Registers modified: DS,SI
 37892                                  ;----------------------------------------------------------------------------
 37893                                  
 37894                                  	; 21/05/2019 - Retro DOS v4.0
 37895                                  GetCDSFromDrv:
 37896 00006A6A 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37897                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37898                                  	;STC				; signal error
 37899                                  	;RETN				; bye
 37900                                  	; 23/09/2023
 37901 00006A6F F5                      	cmc	; cf=1 <-> cf=0
 37902 00006A70 7217                    	jc	short GetCDS_retn
 37903                                  GetCDS:
 37904                                  	; 23/09/2023
 37905                                  	;PUSH	BX
 37906 00006A72 50                      	PUSH	AX
 37907 00006A73 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37908                                  	;mov	bl,81 ; MSDOS 3.3
 37909                                  	;mov	bl,88 ; MSDOS 6.0 
 37910                                  	; 23/09/2023
 37911                                  	;MOV	BL,curdir.size		; size in convenient spot
 37912                                  	;MUL	BL			; get net offset
 37913 00006A78 B458                    	mov	ah,curdir.size
 37914 00006A7A F6E4                    	mul	ah
 37915 00006A7C 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37916 00006A7E 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37917 00006A83 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37918 00006A88 58                      	POP	AX
 37919                                  	; 23/09/2023
 37920                                  	;POP	BX
 37921                                  	; (cf must be 0 here) ; *
 37922                                  	;CLC				; no error
 37923                                  GetCDS_retn:
 37924 00006A89 C3                      	RETN				; bye!
 37925                                  
 37926                                  ;============================================================================
 37927                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37928                                  ;============================================================================
 37929                                  ; Retro	DOS v3.0 - 12/07/2018
 37930                                  ; 22/05/2019 - Retro DOS v4.0
 37931                                  
 37932                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37933                                  ;----------------------------------------------------------------------------
 37934                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37935                                  ;       gritty substitution.
 37936                                  ;
 37937                                  ;   Inputs:     DS:DX - pointer to FCB
 37938                                  ;               ES:DI - point to destination
 37939                                  ;   Outputs:    Carry Set - invalid path in final map
 37940                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37941                                  ;                   Sattrib is set from possibly extended FCB
 37942                                  ;                   ExtFCB set if extended FCB found
 37943                                  ;   Registers modified: most
 37944                                  ;----------------------------------------------------------------------------
 37945                                  
 37946                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37947                                  TransFCB:
 37948                                  	; 22/05/2019 - Retro DOS v4.0
 37949                                  	; 12/07/2018 - Retro DOS v3.0
 37950                                  	;LocalVar FCBTmp,16
 37951                                  	;ENTER
 37952 00006A8A 55                      	push	bp
 37953 00006A8B 89E5                    	mov	bp,sp
 37954                                  	;sub	sp,15	; MSDOS 3.3
 37955 00006A8D 83EC10                  	sub	sp,16	; MSDOS 6.0
 37956 00006A90 16                      	push	ss
 37957 00006A91 07                      	pop	es
 37958 00006A92 06                      	push	es
 37959 00006A93 57                      	push	di
 37960                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37961                                  	;LEA	DI,FCBTmp 
 37962 00006A94 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37963 00006A97 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37964 00006A9D 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37965 00006AA3 E8AEB1                  	call	GetExtended             ; get FCB, extended or not
 37966                                  	; 06/12/2022
 37967 00006AA6 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37968 00006AA8 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37969 00006AAB 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37970 00006AAF 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37971                                  GetDrive:
 37972 00006AB5 AC                      	lodsb				; get drive byte
 37973 00006AB6 E85CFF                  	call	GETTHISDRV
 37974 00006AB9 722A                    	jc	short BadPack
 37975 00006ABB E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37976                                  
 37977                                  ; Scan the source to see if there are any illegal chars
 37978                                  
 37979                                  	;mov	bx,CharType		; load lookup table
 37980 00006ABE B90B00                  	mov	cx,11
 37981 00006AC1 56                      	push	si			; back over name, ext
 37982                                  FCBScan:
 37983 00006AC2 AC                      	lodsb				; get a byte
 37984                                  	
 37985                                  	; 09/08/2018
 37986                                  	;;xlat	byte [es:bx]
 37987                                  	;es	xlat
 37988                                  
 37989                                  	; 22/05/2019 - Retro DOS v4.0	
 37990 00006AC3 E836E5                  	call	GetCharType		; get flags
 37991                                  
 37992                                  	;test	al,8	
 37993 00006AC6 A808                    	test	al,FFCB
 37994 00006AC8 741B                    	jz	short BadPack
 37995                                  NextCh: 
 37996 00006ACA E2F6                    	loop	FCBScan
 37997 00006ACC 5E                      	pop	si
 37998 00006ACD 89FB                    	mov	bx,di
 37999 00006ACF E8BEB5                  	call	PackName                ; crunch the path
 38000 00006AD2 5F                      	pop	di			; get original destination
 38001 00006AD3 07                      	pop	es
 38002 00006AD4 16                      	push	ss			; get DS addressability
 38003 00006AD5 1F                      	pop	ds
 38004                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38005                                  	;LEA	SI,FCBTmp		; point at new pathname
 38006 00006AD6 8D76F0                  	lea	si,[bp-16]
 38007 00006AD9 803F00                  	cmp	byte [bx],0
 38008 00006ADC 7407                    	jz	short BadPack
 38009 00006ADE 55                      	push	bp
 38010 00006ADF E80E00                  	call	TransPathSet            ; convert the path
 38011 00006AE2 5D                      	pop	bp
 38012 00006AE3 7303                    	jnc	short FCBRet		; bye with transPath error code
 38013                                  BadPack:
 38014 00006AE5 F9                      	STC
 38015                                  	;mov	al,3
 38016 00006AE6 B003                    	MOV     AL,error_path_not_found
 38017                                  FCBRet: 
 38018                                  	;LEAVE
 38019 00006AE8 89EC                    	mov	sp,bp
 38020 00006AEA 5D                      	pop	bp
 38021                                  TransPath_retn:
 38022 00006AEB C3                      	retn
 38023                                  
 38024                                  ; 12/07/2018 - Retro DOS v3.0
 38025                                  
 38026                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38027                                  ;----------------------------------------------------------------------------
 38028                                  ;
 38029                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38030                                  ;       substitution, insertion of current directory and fixing . and ..
 38031                                  ;       entries. Perform splicing. Allow input string to match splice
 38032                                  ;       exactly.
 38033                                  ;
 38034                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38035                                  ;       matches splice.
 38036                                  ;
 38037                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38038                                  ;
 38039                                  ;   The following anomalous behaviour is required:
 38040                                  ;
 38041                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38042                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38043                                  ;       Raw net I/O sets ThisCDS => NULL.
 38044                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38045                                  ;
 38046                                  ;   Other behaviour:
 38047                                  ;
 38048                                  ;       ThisCDS set up.
 38049                                  ;       FatRead done on local CDS.
 38050                                  ;       ValidateCDS done on local CDS.
 38051                                  ;
 38052                                  ;   Brief flowchart:
 38053                                  ;
 38054                                  ;       if fSharing then
 38055                                  ;           set up DummyCDS (ThisCDS)
 38056                                  ;           canonicalize (sets cMeta)
 38057                                  ;           splice
 38058                                  ;           fatRead
 38059                                  ;           return
 38060                                  ;       if \\ or d:\\ lead then
 38061                                  ;           set up null CDS (ThisCDS)
 38062                                  ;           canonicalize (sets cMeta)
 38063                                  ;           return
 38064                                  ;       if device then
 38065                                  ;           set up dummyCDS (ThisCDS)
 38066                                  ;           canonicalize (sets cMeta)
 38067                                  ;           return
 38068                                  ;       if file then
 38069                                  ;           getCDS (sets (ThisCDS) from name)
 38070                                  ;           validateCDS (may reset current dir)
 38071                                  ;           Copy current dir
 38072                                  ;           canonicalize (set cMeta)
 38073                                  ;           splice
 38074                                  ;           generate correct CDS (ThisCDS)
 38075                                  ;           if local then
 38076                                  ;               fatread
 38077                                  ;           return
 38078                                  ;
 38079                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38080                                  ;               DI - point to buffer in DOSDATA
 38081                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38082                                  ;                   syntax, etc. or user FAILed to I 24.
 38083                                  ;               WFP_Start - points to beginning of buffer
 38084                                  ;               Curr_Dir_End - points to end of current dir in path
 38085                                  ;               DS - DOSDATA
 38086                                  ;   Registers modified: most
 38087                                  ;
 38088                                  ;----------------------------------------------------------------------------
 38089                                  
 38090                                  ; 22/05/2019
 38091                                  ; 13/05/2019 - Retro DOS v4.0
 38092                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38093                                  
 38094                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38095                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38096                                  
 38097                                  TransPath:
 38098 00006AEC 30C0                    	XOR     AL,AL
 38099 00006AEE EB02                    	JMP     SHORT SetSplice
 38100                                  TransPathSet:
 38101 00006AF0 B0FF                    	MOV     AL,-1
 38102                                  SetSplice:
 38103 00006AF2 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38104 00006AF6 B0FF                    	MOV     AL,-1
 38105                                  TransPathNoSet:
 38106 00006AF8 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38107 00006AFC 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38108 00006B02 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38109 00006B07 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38110 00006B0E 16                      	push	ss
 38111 00006B0F 07                      	pop	es
 38112                                  	;lea	bp,[di+134]
 38113 00006B10 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38114                                  ;
 38115                                  ; if this is through the server dos call, fsharing is set. We set up a
 38116                                  ; dummy cds and let the operation go.
 38117                                  ;
 38118 00006B14 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38119 00006B1A 7435                    	JZ	short CheckUNC		; skip to UNC check
 38120                                  ;
 38121                                  ; ES:DI point to buffer
 38122                                  ;
 38123 00006B1C E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38124 00006B1F E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38125 00006B22 722A                    	jc	short NoPath
 38126 00006B24 E80A03                  	CALL	TextFromDrive		; drop in new
 38127 00006B27 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38128 00006B2A E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38129 00006B2D 72BC                    	jc	short TransPath_retn	; errors
 38130                                  ;
 38131                                  ; Perform splices for net guys.
 38132                                  ;
 38133 00006B2F 16                      	push	ss
 38134 00006B30 1F                      	pop	ds
 38135 00006B31 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38136 00006B35 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38137 00006B3A 7403                    	JZ	short NoServerSplice
 38138 00006B3C E83102                  	CALL    Splice
 38139                                  NoServerSplice:
 38140 00006B3F 16                      	push	ss
 38141 00006B40 1F                      	pop	ds                      ; for FATREAD
 38142 00006B41 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38143 00006B45 E8C5A7                  	call	ECritDisk
 38144 00006B48 E807EB                  	call	FATREAD_CDS
 38145 00006B4B E8DAA7                  	call	LCritDisk
 38146                                  NoPath:
 38147                                  	;mov	al,3
 38148 00006B4E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38149 00006B50 C3                      	retn				; any errors are in Carry flag
 38150                                  
 38151                                  ; Let the network decide if the name is for a spooled device. It will map
 38152                                  ; the name if so.
 38153                                  
 38154                                  CheckUNC:
 38155 00006B51 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38156                                  	;CallInstall NetSpoolCheck,MultNET,35
 38157 00006B58 B82311                  	mov	ax,1123h
 38158 00006B5B CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38159                                  			; DS:SI -> ASCIZ filename to canonicalize
 38160                                  			; ES:DI -> 128-byte buffer for qualified name
 38161                                  			; Return: CF set if not resolved
 38162 00006B5D 7329                    	JNC	short UNCDone
 38163                                  
 38164                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38165                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38166                                  ; input, then the name has been changed to the remote spooler by the above net
 38167                                  ; call. Also, there may be a drive in front of the \\.
 38168                                  
 38169                                  NO_CHECK:
 38170 00006B5F E8B902                  	CALL    DriveFromText		; eat drive letter
 38171 00006B62 50                      	PUSH    AX                      ; save it
 38172 00006B63 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38173 00006B65 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 38174 00006B68 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38175 00006B6A E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 38176 00006B6D 751F                    	JNZ	short CheckDevice	; not a path char
 38177 00006B6F 38C4                    	CMP     AH,AL                   ; are they same?
 38178 00006B71 751B                    	JNZ	short CheckDevice	; nope
 38179                                  
 38180                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38181                                  ; local machine root path
 38182                                  
 38183 00006B73 58                      	POP     AX
 38184 00006B74 A5                      	MOVSW                           ; get the lead \\.
 38185                                  UNCCpy:
 38186 00006B75 AC                      	LODSB                           ; get a byte
 38187 00006B76 E84BE4                   	call	UCase                   ;AN000;; convert the char
 38188 00006B79 08C0                    	OR      AL,AL
 38189 00006B7B 740E                    	JZ	short UNCTerm		; end of string. All done.
 38190 00006B7D E899E4                  	call    PATHCHRCMP              ; is it a path char?
 38191 00006B80 89FB                    	MOV     BX,DI                   ; backup position
 38192 00006B82 AA                      	STOSB
 38193 00006B83 75F0                    	JNZ	short UNCCpy		; no, go copy
 38194 00006B85 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38195                                  UNCDone:
 38196 00006B88 16                      	push	ss
 38197 00006B89 1F                      	pop	ds
 38198 00006B8A C3                       	retn				; return error code
 38199                                  UNCTerm:
 38200 00006B8B AA                      	STOSB                           ;AN000;
 38201 00006B8C EBFA                    	JMP	short UNCDone		;AN000;
 38202                                  
 38203                                  CheckDevice:
 38204                                  
 38205                                  ; Check DS:SI for device. First eat any path stuff
 38206                                  
 38207 00006B8E 58                      	POP     AX                      ; retrieve drive info
 38208 00006B8F 803C00                  	CMP     BYTE [SI],0		; check for null file
 38209 00006B92 7504                    	JNZ	short CheckPath
 38210                                  	;mov	al,2 
 38211 00006B94 B002                    	MOV     AL,error_file_not_found ; bad file error
 38212 00006B96 F9                      	STC                             ; signal error on null input
 38213 00006B97 C3                      	RETN				; bye!
 38214                                  CheckPath:
 38215 00006B98 50                      	push	ax
 38216 00006B99 55                      	push	bp			; save drive number
 38217                                  
 38218                                  
 38219                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38220                                  %if 0
 38221                                  	; MSDOS 6.0
 38222                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38223                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38224                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38225                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38226                                  ;;;end up having a 5D in the opcode's displacement field. The
 38227                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38228                                  ;;;
 38229                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38230                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38231                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38232                                  ;;;
 38233                                  ;;;More info:
 38234                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38235                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38236                                  ;;;
 38237                                  	call	no5Dshere
 38238                                  start5Dhack:
 38239                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38240                                  backfrom5Dhack:
 38241                                  
 38242                                  %endif
 38243                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38244                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38245 00006B9A E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38246                                  
 38247 00006B9D 5D                      	pop	bp
 38248 00006B9E 58                      	pop	ax			; get drive letter back
 38249 00006B9F 731C                    	JNC	short DoFile		; yes we have a file.
 38250                                  
 38251                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38252                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38253                                  ; call.
 38254                                  
 38255 00006BA1 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38256 00006BA7 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38257 00006BAA 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38258                                  
 38259                                  ; Now that we have noted that we have a device, we put it into a form that
 38260                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38261                                  ; string. We relax this to state that if the d:\ is present then the path
 38262                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38263                                  ; a device.
 38264                                  
 38265 00006BB0 E87E02                  	CALL    TextFromDrive
 38266 00006BB3 B02F                    	MOV     AL,'/'                  ; path sep.
 38267 00006BB5 AA                      	STOSB
 38268 00006BB6 E81AA6                  	call	StrCpy			; move remainder of string
 38269                                  
 38270 00006BB9 F8                      	CLC                             ; everything OK.
 38271 00006BBA 16                      	push	ss
 38272 00006BBB 1F                      	pop	ds                      ; remainder of OK stuff
 38273                                  DoFile_retn:
 38274 00006BBC C3                      	retn
 38275                                  
 38276                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38277                                  %if 0
 38278                                  
 38279                                  no5Dshere:
 38280                                  	; 10/08/2018
 38281                                  	jmp	CheckThisDevice		; snoop for device
 38282                                  %endif
 38283                                  
 38284                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38285                                  
 38286                                  ; We have a file. Get the raw CDS.
 38287                                  
 38288                                  DoFile:
 38289                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38290                                  
 38291 00006BBD E839FE                  	call	GetVisDrv               ; get proper CDS
 38292                                  	;mov	al,3 
 38293 00006BC0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38294 00006BC2 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38295                                  
 38296                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38297                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38298                                  ; Use the one that we are going to use (ES:DI).
 38299                                  
 38300                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38301 00006BC4 1E                      	push	ds
 38302 00006BC5 56                      	push	si
 38303 00006BC6 06                      	push	es
 38304 00006BC7 57                      	push	di
 38305 00006BC8 E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38306                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38307 00006BCB 5F                      	pop	di
 38308 00006BCC 07                      	pop	es
 38309 00006BCD 5E                      	pop	si
 38310 00006BCE 1F                      	pop	ds
 38311                                  	;mov	al,3
 38312 00006BCF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38313                                  	;retc				; someone failed an operation
 38314 00006BD1 72E9                    	jc	short DoFile_retn
 38315                                  
 38316                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38317                                  ; current directory. Copy it in.
 38318                                  
 38319 00006BD3 1E                      	push	ds
 38320 00006BD4 56                      	push	si
 38321 00006BD5 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38322 00006BDA 89FB                    	MOV     BX,DI                   ; point to destination
 38323                                  	;add	bx,[si+79] ; MSDOS 6.0
 38324 00006BDC 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38325                                  	;lea	bp,[di+134]
 38326 00006BDF 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38327                                  					;AN000;
 38328 00006BE3 E8FCA5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38329 00006BE6 4F                      	DEC     DI                      ; point to NUL byte
 38330                                  
 38331                                  ; Make sure that there is a path char at end.
 38332                                  
 38333 00006BE7 B05C                    	MOV     AL,'\'
 38334 00006BE9 263845FF                	CMP     [ES:DI-1],AL
 38335 00006BED 7401                    	JZ	short GetOrig
 38336 00006BEF AA                      	STOSB
 38337                                  
 38338                                  ; Now get original string.
 38339                                  
 38340                                  GetOrig:
 38341 00006BF0 4F                      	DEC     DI                      ; point to path char
 38342 00006BF1 5E                      	pop	si
 38343 00006BF2 1F                      	pop	ds
 38344                                  
 38345                                  ; BX points to the end of the root part of the CDS (at where a path char
 38346                                  ; should be). Now, we decide whether we use this root or extend it with the
 38347                                  ; current directory. See if the input string begins with a leading 
 38349 00006BF3 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38350 00006BF6 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38351 00006BF8 08C0                    	OR      AL,AL                   ; end of string?
 38352 00006BFA 7410                    	JZ	short DoCanon		; yes, skip.
 38353                                  ;
 38354                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38355                                  ; to this root. Make sure that there is a path char there and advance the
 38356                                  ; source string over all leading \'s.
 38357                                  ;
 38358 00006BFC 89DF                    	MOV     DI,BX                   ; back up to root point.
 38359                                  SkipPath:
 38360 00006BFE AC                      	LODSB
 38361 00006BFF E817E4                  	call    PATHCHRCMP
 38362 00006C02 74FA                    	JZ	short SkipPath
 38363 00006C04 4E                      	DEC     SI
 38364 00006C05 08C0                    	OR      AL,AL
 38365 00006C07 7403                    	JZ	short DoCanon
 38366                                  
 38367                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38368                                  ; for yucks.
 38369                                  
 38370                                  PathAssure:
 38371 00006C09 B05C                    	MOV     AL,'\'	; 5Ch
 38372 00006C0B AA                      	STOSB
 38373                                  
 38374                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38375                                  ; BP is the max extent to advance DI
 38376                                  ; BX is the backup limit for ..
 38377                                  
 38378                                  DoCanon:
 38379 00006C0C E85200                  	CALL    Canonicalize            ; wham.
 38380                                  	;retc				; badly formatted path.
 38381 00006C0F 72AB                    	jc	short DoFile_retn
 38382                                  
 38383                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38384                                  ; to wfp_start and do string substitution. BP is still the max position in
 38385                                  ; buffer.
 38386                                  
 38387 00006C11 16                      	push	ss
 38388 00006C12 1F                      	pop	ds
 38389 00006C13 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38390 00006C17 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38391 00006C1B E81B02                  	CALL    PathPref                ; is there a prefix?
 38392 00006C1E 7514                    	JNZ	short DoSplice		; no, do splice
 38393                                  
 38394                                  ; We have a match. Check to see if we ended in a path char.
 38395                                  
 38396 00006C20 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38397 00006C23 E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38398 00006C26 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38399                                  Pathline:                               ; 2/13/KK
 38400 00006C28 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38401 00006C2C 7406                    	JZ	short DoSplice
 38402 00006C2E 47                      	INC     DI                      ; point to after current path char
 38403 00006C2F 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38404                                  
 38405                                  ; Splice the result.
 38406                                  
 38407                                  DoSplice:
 38408 00006C34 16                      	push	ss
 38409 00006C35 1F                      	pop	ds			; back to DOSDATA
 38410 00006C36 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38411 00006C3A 31C9                    	XOR     CX,CX
 38412 00006C3C F606[7105]FF            	TEST	byte [FSPLICE],-1
 38413 00006C41 7403                    	JZ	short SkipSplice
 38414 00006C43 E82A01                  	CALL    Splice                  ; replaces in place.
 38415                                  SkipSplice:
 38416                                  
 38417                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38418                                  ; device.
 38419                                  
 38420 00006C46 16                      	push	ss
 38421 00006C47 1F                      	pop	ds
 38422 00006C48 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38423                                  	;test	word [es:di+67],8000h
 38424                                  	; 17/12/2022
 38425                                  	;test	byte [es:di+68],80h
 38426 00006C4C 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38427                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38428 00006C51 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38429 00006C53 E30B                    	JCXZ    Done
 38430 00006C55 E8B5A6                  	call	ECritDisk
 38431 00006C58 E8F7E9                  	call	FATREAD_CDS
 38432 00006C5B E8CAA6                  	call	LCritDisk
 38433                                  	;mov	al, 3
 38434 00006C5E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38435                                  Done:   
 38436 00006C60 C3                      	retn                         ; any errors in carry flag.
 38437                                  
 38438                                  ; 13/07/2018
 38439                                  
 38440                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38441                                  ;----------------------------------------------------------------------------
 38442                                  ;   Canonicalize - copy path removing . and .. entries.
 38443                                  ;
 38444                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38445                                  ;               ES:DI - point to buffer
 38446                                  ;               BX - backup limit (offset from ES) points to slash
 38447                                  ;               BP - end of buffer
 38448                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38449                                  ;                   syntax, etc.
 38450                                  ;               Carry Clear -
 38451                                  ;                   DS:DI - advanced to end of string
 38452                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38453                                  ;   Registers modified: AX CX DX (in addition to those above)
 38454                                  ;----------------------------------------------------------------------------
 38455                                  
 38456                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38457                                  
 38458                                  Canonicalize:
 38459                                  
 38460                                  ; We copy all leading path separators.
 38461                                  
 38462 00006C61 AC                      	LODSB                           ;   while (PathChr (*s))
 38463 00006C62 E8B4E3                  	call    PATHCHRCMP
 38464 00006C65 7507                    	JNZ	short CanonDec
 38465 00006C67 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38466 00006C69 7319                    	JAE	short CanonBad		;           goto error;
 38467 00006C6B AA                      	STOSB
 38468 00006C6C EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38469                                  CanonDec:
 38470 00006C6E 4E                      	DEC     SI
 38471                                  
 38472                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38473                                  ; component (no leading path separators) and ES:DI being the destination
 38474                                  ; buffer.
 38475                                  
 38476                                  CanonLoop:
 38477                                  
 38478                                  ; If we are at the end of the source string, then we need to check to see that
 38479                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38480                                  ; Otherwise, do nothing
 38481                                  
 38482 00006C6F 31C0                    	XOR     AX,AX
 38483 00006C71 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38484 00006C73 751A                    	JNZ	short DoComponent
 38485 00006C75 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38486 00006C7A 7505                    	JNZ	short DoTerminate
 38487 00006C7C B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38488 00006C7E AA                      	STOSB
 38489 00006C7F 88E0                    	MOV     AL,AH
 38490                                  DoTerminate:
 38491 00006C81 AA                      	STOSB                           ;           *d++ = 0;
 38492 00006C82 F8                      	CLC                             ;           return (0);
 38493 00006C83 C3                      	retn
 38494                                  
 38495                                  CanonBad:
 38496 00006C84 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38497                                  	;mov	al,3
 38498 00006C87 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38499 00006C89 7402                    	JZ	short PathEnc		; path character encountered in string
 38500                                  	;mov	al,2
 38501 00006C8B B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38502                                  PathEnc:
 38503 00006C8D F9                      	STC
 38504                                  CanonBad_retn:
 38505 00006C8E C3                      	retn
 38506                                  
 38507                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38508                                  ; it to 8.3
 38509                                  
 38510                                  DoComponent:                            ;           }
 38511 00006C8F E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38512 00006C92 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38513                                  
 38514                                  ; We special case the . and .. cases.  These will be backed up.
 38515                                  
 38516                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38517 00006C94 26833D2E                	CMP	WORD [ES:DI],002Eh
 38518 00006C98 7408                    	JZ	short Skip1
 38519                                  	;CMP	WORD PTR ES:[DI],'..'
 38520 00006C9A 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38521 00006C9F 750A                    	JNZ	short CanonNormal
 38522 00006CA1 4F                      	DEC     DI                      ;           d--;
 38523                                  Skip1:  
 38524 00006CA2 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38525                                  	;mov	al,3
 38526 00006CA5 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38527 00006CA7 72E5                    	jc	short CanonBad_retn
 38528 00006CA9 EB02                    	JMP     short CanonPath         ;           }
 38529                                  
 38530                                  ; We have a normal path. Advance destination pointer over it.
 38531                                  
 38532                                  CanonNormal:                            ;       else
 38533 00006CAB 01CF                    	ADD     DI,CX                   ;           d += ct;
 38534                                  
 38535                                  ; We have successfully copied a component. We are now pointing at a path
 38536                                  ; sep char or are pointing at a nul or are pointing at something else.
 38537                                  ; If we point at something else, then we have an error.
 38538                                  
 38539                                  CanonPath:
 38540 00006CAD E81600                  	CALL    PathSep
 38541 00006CB0 75D2                    	JNZ	short CanonBad		; something else...
 38542                                  
 38543                                  ; Copy the first path char we see.
 38544                                  
 38545 00006CB2 AC                      	LODSB                           ; get the char
 38546 00006CB3 E863E3                  	call    PATHCHRCMP              ; is it path char?
 38547 00006CB6 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38548 00006CB8 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38549 00006CBA 73C8                    	JAE	short CanonBad		; yep, error.
 38550 00006CBC AA                      	STOSB                           ; copy the one byte
 38551                                  
 38552                                  ; Skip all remaining path chars
 38553                                  
 38554                                  CanonPathLoop:
 38555 00006CBD AC                      	LODSB                           ; get next byte
 38556 00006CBE E858E3                  	call    PATHCHRCMP              ; path char again?
 38557 00006CC1 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38558 00006CC3 4E                      	DEC     SI                      ; back up
 38559 00006CC4 EBA9                    	JMP	short  CanonLoop	; go copy component
 38560                                  
 38561                                  ;BREAK <PathSep - determine if char is a path separator>
 38562                                  ;----------------------------------------------------------------------------
 38563                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38564                                  ;   Inputs:     DS:SI - point to a char
 38565                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38566                                  ;               Zero set if AL is / \ or NUL
 38567                                  ;               Zero reset otherwise
 38568                                  ;   Registers modified: AL
 38569                                  ;----------------------------------------------------------------------------
 38570                                  
 38571                                  PathSep:
 38572 00006CC6 8A04                    	MOV     AL,[SI]                 ; get the character
 38573                                  PathSepGotCh:				; already have character
 38574 00006CC8 08C0                    	OR      AL,AL                   ; test for zero
 38575 00006CCA 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38576                                  	;call	PATHCHRCMP              ; check for path character
 38577                                  	;retn				; and return HIS determination
 38578                                  	; 18/12/2022
 38579 00006CCC E94AE3                  	jmp	PATHCHRCMP
 38580                                  
 38581                                  
 38582                                  ;BREAK <SkipBack - move backwards to a path separator>
 38583                                  ;----------------------------------------------------------------------------
 38584                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38586                                  ;               BX has current directory back up limit (point to a / \)
 38587                                  ;   Outputs:    ES:DI backed up to point to a path char
 38588                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38589                                  ;               Carry set if illegal backup
 38590                                  ;               Carry Clear if ok
 38591                                  ;   Registers modified: DI,AL
 38592                                  ;----------------------------------------------------------------------------
 38593                                  
 38594                                  SkipBack:
 38595 00006CCF 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38596 00006CD1 720B                    	JB	short SkipBad		;       if (d < dlim)
 38597 00006CD3 4F                      	DEC     DI                      ;           goto err;
 38598 00006CD4 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38599 00006CD7 E83FE3                  	call    PATHCHRCMP              ;           break;
 38600 00006CDA 75F3                    	JNZ	short SkipBack		;       }
 38601 00006CDC F8                      	CLC                             ;   return (0);
 38602 00006CDD C3                      	retn				;
 38603                                  SkipBad:                                ;err:
 38604                                  	;mov	al,3
 38605 00006CDE B003                    	MOV     AL,error_path_not_found ; bad path error
 38606 00006CE0 F9                      	STC                             ;   return (-1);
 38607 00006CE1 C3                      	retn				;
 38608                                  
 38609                                  ;Break <CopyComponent - copy out a file path component>
 38610                                  ;----------------------------------------------------------------------------
 38611                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38612                                  ;
 38613                                  ;   Inputs:     DS:SI - source path
 38614                                  ;               ES:DI - destination
 38615                                  ;               ES:BP - end of buffer
 38616                                  ;   Outputs:    Carry Set - too long
 38617                                  ;               Carry Clear - DS:SI moved past component
 38618                                  ;                   CX has length of destination
 38619                                  ;   Registers modified: AX,CX,DX
 38620                                  ;----------------------------------------------------------------------------
 38621                                  
 38622                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38623                                  
 38624                                  CopyComponent:
 38625                                  
 38626                                  %define CopyBP	 [BP]		; word
 38627                                  %define CopyD	 [BP+2]		; dword
 38628                                  %define CopyDoff [BP+2]		; word
 38629                                  %define CopyS	 [BP+6]		; dword
 38630                                  %define CopySoff [BP+6]		; word
 38631                                  %define CopyTemp [BP+10]	; byte
 38632                                  
 38633 00006CE2 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38634 00006CE5 1E                      	push	ds
 38635 00006CE6 56                      	push	si
 38636 00006CE7 06                      	push	es
 38637 00006CE8 57                      	push	di
 38638 00006CE9 55                      	push	bp
 38639 00006CEA 89E5                    	MOV     BP,SP
 38640 00006CEC B42E                    	MOV     AH,'.'
 38641 00006CEE AC                      	LODSB
 38642 00006CEF AA                      	STOSB
 38643 00006CF0 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38644 00006CF2 7518                    	JNZ	short NormalComp
 38645 00006CF4 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38646 00006CF7 740B                    	JZ	short NulTerm
 38647                                  TryTwoDot:
 38648 00006CF9 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38649 00006CFA AA                      	STOSB
 38650 00006CFB 38E0                    	CMP     AL,AH
 38651 00006CFD 7557                    	JNZ	short CopyBad
 38652 00006CFF E8C4FF                  	CALL    PathSep
 38653 00006D02 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38654                                  NulTerm:                                ;               return -1;
 38655 00006D04 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38656 00006D06 AA                      	STOSB
 38657 00006D07 897606                  	MOV     CopySoff,SI
 38658 00006D0A EB47                    	JMP     SHORT _GoodRet		;       }
 38659                                  NormalComp:                             ;   else {
 38660 00006D0C 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38661 00006D0F E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38662 00006D12 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38663 00006D15 743F                    	JZ	short CopyBad		;           return (-1);
 38664 00006D17 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38665 00006D1D 7510                    	JNZ	short DoPack
 38666 00006D1F 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38667 00006D22 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38668 00006D27 7F2D                    	JG	short CopyBad		;               return (-1);
 38669 00006D29 7504                    	JNZ	short DoPack		;           else
 38670 00006D2B 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38671 00006D2D 742F                    	JZ	short CopyBadPath	;               return (-1);
 38672                                  DoPack:                                 ;           }
 38673 00006D2F 897606                  	MOV     CopySoff,SI ; [bp+6]
 38674 00006D32 16                      	push	ss
 38675 00006D33 1F                      	pop	ds
 38676 00006D34 BE[4B05]                	MOV     SI,NAME1
 38677 00006D37 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38678 00006D3A 57                      	push	di
 38679 00006D3B E852B3                  	call	PackName                ;       PackName (Name1, temp);
 38680 00006D3E 5F                      	pop	di
 38681 00006D3F E8A9A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38682 00006D42 49                      	DEC     CX
 38683 00006D43 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38684                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38685                                  	;cmp	cx,[bp+0]
 38686                                  	; 15/12/2022
 38687                                  	;cmp	cx,[bp]
 38688 00006D46 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38689 00006D49 730B                    	JAE	short CopyBad		;           return (-1);
 38690 00006D4B 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38691 00006D4D C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38692 00006D50 E88FA4                  	call	FStrCpy
 38693                                  _GoodRet:				;       }
 38694 00006D53 F8                      	CLC
 38695 00006D54 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38696                                  CopyBad:
 38697 00006D56 F9                      	STC
 38698 00006D57 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38699                                  	;mov	al,2
 38700 00006D5A B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38701 00006D5C 7503                    	JNZ	short CopyEnd
 38702                                  CopyBadPath:
 38703 00006D5E F9                      	STC
 38704                                  	;mov	al,3
 38705 00006D5F B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38706                                  CopyEnd:
 38707 00006D61 5D                      	pop	bp
 38708 00006D62 5F                      	pop	di
 38709 00006D63 07                      	pop	es
 38710 00006D64 5E                      	pop	si
 38711 00006D65 1F                      	pop	ds
 38712 00006D66 9F                      	LAHF
 38713 00006D67 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38714 00006D6A E87EA4                  	call	StrLen
 38715 00006D6D 49                      	DEC     CX
 38716 00006D6E 9E                      	SAHF
 38717 00006D6F C3                      	retn
 38718                                  
 38719                                  ; 14/05/2019 - Retro DOS v4.0
 38720                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38721                                  
 38722                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38723                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38724                                  
 38725                                  ;Break <Splice - pseudo mount by string substitution>
 38726                                  ;----------------------------------------------------------------------------
 38727                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38728                                  ;       ThisCDS to point to physical drive CDS.
 38729                                  ;   Inputs:     DS:SI point to string
 38730                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38731                                  ;   Outputs:    DS:SI points to thisCDS
 38732                                  ;               ES:DI points to DPB
 38733                                  ;               String at DS:SI may be reduced in length by removing prefix
 38734                                  ;               and substituting drive letter.
 38735                                  ;               CX = 0 If no splice done
 38736                                  ;               CX <> 0 otherwise
 38737                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38738                                  ;                   left alone
 38739                                  ;               ThisDPB points to proper DPB
 38740                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38741                                  ;----------------------------------------------------------------------------
 38742                                  
 38743                                  Splice:
 38744 00006D70 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38745 00006D76 7469                    	JZ	short AllDone
 38746 00006D78 36FF36[A205]            	push	word [SS:THISCDS]
 38747 00006D7D 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38748 00006D82 1E                      	push	ds
 38749 00006D83 56                      	push	si
 38750 00006D84 5F                      	pop	di
 38751 00006D85 07                      	pop	es
 38752 00006D86 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38753                                  SpliceScan:
 38754 00006D88 E8DFFC                  	call	GetCDSFromDrv
 38755 00006D8B 724A                    	JC	short SpliceDone
 38756 00006D8D FEC0                    	INC     AL
 38757                                  	; 17/12/2022
 38758                                  	;test	byte [si+68],20h
 38759 00006D8F F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38760                                  	;;test	word [si+67],2000h
 38761                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38762 00006D93 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38763 00006D95 57                      	push	di
 38764 00006D96 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38765 00006D99 7403                    	JZ	short SpliceFound	;
 38766                                  SpliceSkip:
 38767 00006D9B 5F                      	pop	di
 38768 00006D9C EBEA                    	JMP	short SpliceScan	;               continue;
 38769                                  SpliceFound:
 38770 00006D9E 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38771 00006DA2 7508                    	JNZ	short SpliceDo
 38772 00006DA4 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38773 00006DAA 75EF                    	JNZ	short SpliceSkip
 38774                                  SpliceDo:
 38775 00006DAC 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38776 00006DAE 06                      	push	es
 38777 00006DAF 1F                      	pop	ds
 38778 00006DB0 5F                      	pop	di
 38779 00006DB1 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38780 00006DB4 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38781 00006DB8 09C0                    	OR      AX,AX
 38782 00006DBA 7808                    	JS	short NoPoke
 38783 00006DBC 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38784 00006DBE 29F0                    	SUB     AX,SI
 38785 00006DC0 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38786                                  NoPoke:
 38787 00006DC4 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38788 00006DC7 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38789 00006DC9 B05C                    	MOV     AL,"\"
 38790 00006DCB AA                      	STOSB
 38791                                  SpliceCopy:                             ;               strcpy (src, p);
 38792 00006DCC E813A4                  	call	FStrCpy
 38793 00006DCF 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38794 00006DD2 80C901                  	OR      CL,1                    ; signal splice done.
 38795 00006DD5 EB0C                    	JMP     SHORT DoSet             ;               return;
 38796                                  SpliceDone:                             ;               }
 38797 00006DD7 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38798 00006DDC 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38799                                  AllDone:
 38800 00006DE1 31C9                    	XOR     CX,CX
 38801                                  DoSet:
 38802 00006DE3 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38803                                  	;les	di,[si+69]
 38804 00006DE8 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38805 00006DEB 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38806 00006DF0 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38807                                  Splice_retn:
 38808 00006DF5 C3                      	retn
 38809                                  
 38810                                  ; 15/05/2019 - Retro DOS v4.0
 38811                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38812                                  
 38813                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38814                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38815                                  
 38816                                  ;Break <$NameTrans - partially process a name>
 38817                                  ;----------------------------------------------------------------------------
 38818                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38819                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38820                                  ;   to Transpath playing games with devices, we need to insure that the output
 38821                                  ;   has drive letter and : in it.
 38822                                  ;
 38823                                  ;   Inputs:     DS:SI - source string for translation
 38824                                  ;               ES:DI - pointer to buffer
 38825                                  ;   Outputs:
 38826                                  ;       Carry Clear
 38827                                  ;               Buffer at ES:DI is filled in with data
 38828                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38829                                  ;       Carry Set
 38830                                  ;               AX = error_path_not_found
 38831                                  ;   Registers modified: all
 38832                                  ;----------------------------------------------------------------------------
 38833                                  
 38834                                  _$NameTrans:
 38835 00006DF6 1E                      	push	ds
 38836 00006DF7 56                      	push	si
 38837 00006DF8 06                      	push	es
 38838 00006DF9 57                      	push	di
 38839 00006DFA 51                      	push	cx ; MSDOS 6.0
 38840                                  	
 38841                                  	; MSDOS 6.0	
 38842                                  ; M027 - Start
 38843                                  ;
 38844                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38845                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38846                                  ; device if the old call set the volume attribute bit. Note that devname in
 38847                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38848                                  ; and restore CX.
 38849                                  
 38850                                  	;mov	ch,16h
 38851 00006DFB B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38852 00006DFD E8B902                  	call	SetAttrib
 38853                                  
 38854                                  ; M027 - End
 38855                                  
 38856                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38857 00006E00 BF[BE03]                	MOV     DI,OPENBUF
 38858 00006E03 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38859 00006E06 59                      	pop	cx ; MSDOS 6.0
 38860 00006E07 5F                      	pop     di
 38861 00006E08 07                      	pop	es
 38862 00006E09 5E                      	pop     si
 38863 00006E0A 1F                      	pop     ds
 38864 00006E0B 7303                    	JNC	short TransOK
 38865 00006E0D E93098                  	jmp	SYS_RET_ERR
 38866                                  TransOK:
 38867 00006E10 BE[BE03]                	MOV     SI,OPENBUF
 38868 00006E13 16                      	push	ss
 38869 00006E14 1F                      	pop	ds
 38870                                  ;GotText:
 38871 00006E15 E8CAA3                  	call	FStrCpy
 38872 00006E18 E91C98                  	jmp	SYS_RET_OK
 38873                                  
 38874                                  ;Break   <DriveFromText - return drive number from a text string>
 38875                                  ;----------------------------------------------------------------------------
 38876                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38877                                  ;   pointer.
 38878                                  ;
 38879                                  ;   Inputs:     DS:SI point to a text string
 38880                                  ;   Outputs:    AL has drive number
 38881                                  ;               DS:SI advanced
 38882                                  ;   Registers modified: AX,SI.
 38883                                  ;----------------------------------------------------------------------------
 38884                                  
 38885                                  DriveFromText:
 38886 00006E1B 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38887                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38888                                  	; 23/09/2023
 38889 00006E1D 3804                    	cmp	[si],al ; 0
 38890 00006E1F 74D4                    	jz	short Splice_retn
 38891 00006E21 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38892 00006E25 75CE                    	jnz	short Splice_retn
 38893 00006E27 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38894 00006E28 0C20                    	OR      AL,20h
 38895                                  	;sub	al,60h
 38896 00006E2A 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38897 00006E2C 75C7                    	jnz	short Splice_retn
 38898 00006E2E B0FF                    	MOV	AL,-1                   ; nuke AL...
 38899                                  	; 23/09/2023
 38900                                  	;dec	al ; -1
 38901 00006E30 C3                      	retn				;           }
 38902                                  
 38903                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38904                                  ;----------------------------------------------------------------------------
 38905                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38906                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38907                                  ;
 38908                                  ;   Inputs:     AL has 0-based drive number
 38909                                  ;   Outputs:    ES:DI advanced
 38910                                  ;   Registers modified: AX
 38911                                  ;----------------------------------------------------------------------------
 38912                                  
 38913                                  TextFromDrive:
 38914 00006E31 FEC0                    	INC     AL
 38915                                  TextFromDrive1:
 38916                                  	;add	al,40h
 38917 00006E33 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38918 00006E35 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38919 00006E37 AB                      	STOSW
 38920                                  PathPref_retn:
 38921 00006E38 C3                      	retn
 38922                                  
 38923                                  ;Break   <PathPref - see if one path is a prefix of another>
 38924                                  ;----------------------------------------------------------------------------
 38925                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38926                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38927                                  ;   prefix: A:\ and A:\FOO
 38928                                  ;
 38929                                  ;   Inputs:     DS:SI potential prefix
 38930                                  ;               ES:DI string
 38931                                  ;   Outputs:    Zero set => prefix found
 38932                                  ;                   DI/SI advanced past matching part
 38933                                  ;               Zero reset => no prefix, DS/SI garbage
 38934                                  ;   Registers modified: CX
 38935                                  ;----------------------------------------------------------------------------
 38936                                  
 38937                                  PathPref:
 38938 00006E39 E8BDA3                  	call	DStrLen                 ; get length
 38939 00006E3C 49                      	DEC     CX                      ; do not include nul byte
 38940 00006E3D F3A6                    	REPZ    CMPSB                   ; compare
 38941 00006E3F 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38942 00006E41 50                      	push	ax			; save char register
 38943 00006E42 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38944 00006E45 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38945 00006E48 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38946                                  NotSep:                                 ; 2/13/KK
 38947 00006E4A 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38948 00006E4D E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38949                                  Prefix:
 38950 00006E50 58                      	pop	ax			; get back original
 38951 00006E51 C3                      	retn
 38952                                  
 38953                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38954                                  ;----------------------------------------------------------------------------
 38955                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38956                                  ;     a path separator.
 38957                                  ;
 38958                                  ;     Input:    DS:SI target string (null terminated)
 38959                                  ;     Output:   Zero set => path separator encountered in string
 38960                                  ;               Zero clear => null encountered
 38961                                  ;     Registers modified: SI
 38962                                  ;----------------------------------------------------------------------------
 38963                                  
 38964                                  ScanPathChar:
 38965 00006E52 AC                      	LODSB                           ; fetch a character
 38966 00006E53 E872FE                  	call    PathSepGotCh
 38967 00006E56 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38968                                  	;call	PATHCHRCMP              ; path separator?
 38969                                  	;retn
 38970                                  	; 18/12/2022
 38971 00006E58 E9BEE1                  	jmp	PATHCHRCMP
 38972                                  
 38973                                  ;============================================================================
 38974                                  ; FILE.ASM, MSDOS 6.0, 1991
 38975                                  ;============================================================================
 38976                                  ; 14/07/2018 - Retro DOS v3.0
 38977                                  
 38978                                  ; 13/05/2019 - Retro DOS v4.0
 38979                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38980                                  
 38981                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38982                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38983                                  
 38984                                  ; MSDOS 2.11
 38985                                  ;BREAK <$Open - open a file handle>
 38986                                  ;----------------------------------------------------------------------------
 38987                                  ;   Assembler usage:
 38988                                  ;           LDS     DX, Name
 38989                                  ;           MOV     AH, Open
 38990                                  ;           MOV     AL, access
 38991                                  ;           INT     int_command
 38992                                  ;
 38993                                  ;       ACCESS          Function
 38994                                  ;       ------          --------
 38995                                  ;       open_for_read   file is opened for reading
 38996                                  ;       open_for_write  file is opened for writing
 38997                                  ;       open_for_both   file is opened for both reading and writing.
 38998                                  ;
 38999                                  ;   Error returns:
 39000                                  ;           AX = error_invalid_access
 39001                                  ;              = error_file_not_found
 39002                                  ;              = error_access_denied
 39003                                  ;              = error_too_many_open_files
 39004                                  ;----------------------------------------------------------------------------
 39005                                  
 39006                                  ; MSDOS 6.0
 39007                                  ;	BREAK <$Open - open a file from a path string>
 39008                                  ;----------------------------------------------------------------------------
 39009                                  ;
 39010                                  ;**	$OPen - Open a File
 39011                                  ;
 39012                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39013                                  ;	file and and returns a handle
 39014                                  ;
 39015                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39016                                  ;		(AL) = open mode
 39017                                  ;	EXIT	'C' clear if OK
 39018                                  ;		  (ax) = file handle
 39019                                  ;		'C' set if error
 39020                                  ;		  (ax) = error code
 39021                                  ;	USES	all
 39022                                  ;
 39023                                  ;----------------------------------------------------------------------------
 39024                                  
 39025                                  ; 13/05/2019 - Retro DOS v4.0
 39026                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39027                                  
 39028                                  _$OPEN:       
 39029 00006E5B 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39030                                  _$Open2:
 39031                                  	;mov	ch,16h
 39032 00006E5D B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39033 00006E5F E85702                  	call	SetAttrib
 39034 00006E62 B9[122B]                	mov	cx,DOS_OPEN
 39035                                  
 39036                                  	;xor	ah,ah  ; MSDOS 3.3
 39037                                  
 39038 00006E65 50                      	push	ax
 39039                                  
 39040                                  ;*	General file open/create code. The $CREATE call and the various
 39041                                  ;	$OPEN calls all come here.
 39042                                  ;
 39043                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39044                                  ;	path names, etc., and then dispatch to our individual handlers.
 39045                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39046                                  ;
 39047                                  ;	(TOS) = create mode
 39048                                  ;	(CX) = address of routine to call to do actual function
 39049                                  ;	(DS:DX) = ASCIZ name
 39050                                  ;	SAttrib = Attribute mask
 39051                                  
 39052                                  ;	Get a free SFT and mark it "being allocated"
 39053                                  
 39054                                  AccessFile:
 39055 00006E66 E8A4A4                  	call	ECritSFT
 39056 00006E69 E8D8F7                  	call	SFNFree			; get a free sfn
 39057 00006E6C E8B9A4                  	call	LCritSFT
 39058 00006E6F 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39059 00006E71 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39060 00006E76 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39061 00006E7B 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39062                                  
 39063                                  ;	Find a free area in the user's JFN table.
 39064                                  
 39065 00006E80 E8AEF7                  	call	JFNFree			; get a free jfn
 39066 00006E83 7303                    	jnc	short SaveJFN
 39067                                  OpenFailJ:
 39068 00006E85 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39069                                  
 39070                                  SaveJFN:
 39071 00006E88 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39072 00006E8D 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39073 00006E92 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39074                                  
 39075                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39076                                  ;	reusing the same JFN.
 39077                                  
 39078 00006E97 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39079 00006E9C 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39080 00006E9F 89D6                    	MOV	SI,DX			; get name in appropriate place
 39081 00006EA1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39082 00006EA4 51                      	push	cx			; save routine to call
 39083 00006EA5 E844FC                  	call	TransPath		; convert the path
 39084 00006EA8 5B                      	pop	bx			; (bx) = routine to call
 39085                                  
 39086 00006EA9 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39087 00006EAE 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39088 00006EB0 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39089 00006EB6 7404                    	JZ	short SetSearch
 39090                                  	;mov	al,2
 39091 00006EB8 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39092                                  OpenCleanJ:
 39093 00006EBA EB50                    	JMP	short OpenClean
 39094                                  
 39095                                  SetSearch:
 39096 00006EBC 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39097                                  
 39098                                  ;	We need to get the new inheritance bits.
 39099                                  
 39100 00006EBD 31C9                    	xor	cx,cx
 39101                                  	; MSDOS 6.0
 39102                                  	;mov	[si+2],cx ; 0
 39103 00006EBF 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39104                                  	;mov    [si+51],cx ; 0
 39105 00006EC2 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39106                                  	;
 39107 00006EC5 81FB[122B]              	CMP	BX,DOS_OPEN
 39108 00006EC9 7509                    	JNZ	short _DoOper
 39109                                  	;test   al,80h
 39110 00006ECB A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39111 00006ECD 7405                    	JZ	short _DoOper ; 10/08/2018
 39112 00006ECF 247F                    	AND	AL,7Fh			; mask off inherit bit
 39113                                  	;mov	cx,1000h
 39114 00006ED1 B90010                  	MOV	CX,sf_no_inherit
 39115                                  _DoOper:
 39116                                  	;; MSDOS 3.3
 39117                                  	;;mov	word [si+2], 0
 39118                                  	;;mov	word [si+33h], 0
 39119                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39120                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39121                                  
 39122                                  	; MSDOS 6.0
 39123                                  ;**	Check if this is an extended open. If so you must set the
 39124                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39125                                  ;	Set_EXT_mode in creat.asm
 39126                                  
 39127                                  	; MSDOS 6.0
 39128                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39129 00006ED4 57                      	push	di
 39130 00006ED5 06                      	push	es
 39131 00006ED6 1E                      	push	ds
 39132 00006ED7 07                      	pop	es
 39133 00006ED8 56                      	push	si
 39134 00006ED9 5F                      	pop	di			; (es:di) = SFT address
 39135 00006EDA E821BC                  	call	Set_EXT_mode
 39136                                  	;RESTORE <es, di>
 39137 00006EDD 07                      	pop	es
 39138 00006EDE 5F                      	pop	di
 39139                                  
 39140                                  	;Context DS
 39141 00006EDF 16                      	push	ss
 39142 00006EE0 1F                      	pop	ds	
 39143                                  
 39144 00006EE1 51                      	push	cx
 39145 00006EE2 FFD3                    	CALL	BX			; blam!
 39146 00006EE4 59                      	pop	cx
 39147 00006EE5 C536[9E05]              	LDS	SI,[THISSFT]
 39148 00006EE9 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39149                                  	;jc	short OpenE ; MSDOS 3.3
 39150                                  
 39151                                  ;	The SFT was successfully opened. Remove busy mark.
 39152                                  
 39153                                  OpenOK:
 39154                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39155 00006EEB C7040100                	mov	word [SI],1
 39156                                  	;or	[SI+5],cx
 39157 00006EEF 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39158                                  
 39159                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39160                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39161                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39162                                  ;
 39163                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39164                                  ; sharer.
 39165                                  
 39166 00006EF2 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39167 00006EF6 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39168                                  
 39169 00006EFB 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39170                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39171                                  OpenOkj:
 39172 00006F02 E93297                  	jmp	SYS_RET_OK		; bye with no errors
 39173                                  
 39174                                  	; MSDOS 6.0
 39175                                  ;Extended Open hooks check
 39176                                  OpenE2:					;AN000;;EO.
 39177 00006F05 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39178 00006F08 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39179 00006F0A EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39180                                  
 39181                                  ;	Extended Open hooks check
 39182                                  ;
 39183                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39184                                  
 39185                                  OpenClean:
 39186 00006F0C 5B                      	pop	bx			; clean off stack
 39187                                  OpenE:
 39188                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39189 00006F0D C7040000                	mov	word [SI],0
 39190 00006F11 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39191 00006F16 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39192 00006F19 EB02                    	JMP	SHORT OpenCritLeave
 39193                                  
 39194                                  OpenFail:
 39195 00006F1B FB                      	STI
 39196 00006F1C 59                      	pop	cx			; Clean stack
 39197                                  OpenCritLeave:
 39198 00006F1D 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39199                                  
 39200                                  	; MSDOS 6.0
 39201                                  ; File Tagging DOS 4.00
 39202 00006F24 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39203                                  					;AN000;;FT. code page mismatch
 39204 00006F2A 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39205 00006F2C E91997                  	jmp	From_GetSet		;AN000;;FT. yes
 39206                                  NORERR: 				;AN000;
 39207                                  ; File Tagging DOS 4.00
 39208                                  
 39209 00006F2F E90E97                  	jmp	SYS_RET_ERR		; no free, return error
 39210                                  
 39211                                  ; MSDOS 2.11
 39212                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39213                                  ;----------------------------------------------------------------------------
 39214                                  ;   Assembler usage:
 39215                                  ;           LDS     DX, name
 39216                                  ;           MOV     AH, Creat
 39217                                  ;           MOV     CX, access
 39218                                  ;           INT     21h
 39219                                  ;       ; AX now has the handle
 39220                                  ;
 39221                                  ;   Error returns:
 39222                                  ;           AX = error_access_denied
 39223                                  ;              = error_path_not_found
 39224                                  ;              = error_too_many_open_files
 39225                                  ;----------------------------------------------------------------------------
 39226                                  
 39227                                  ; MSDOS 6.0
 39228                                  ;	BREAK <$Creat - create a brand-new file>
 39229                                  ;----------------------------------------------------------------------------
 39230                                  ;
 39231                                  ;**	$Creat - Create a File
 39232                                  ;
 39233                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39234                                  ;	initial attributes contained in CX
 39235                                  ;
 39236                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39237                                  ;		(CX) = initial attributes
 39238                                  ;	EXIT	'C' set if error
 39239                                  ;		  (ax) = error code
 39240                                  ;		'C' clear if OK
 39241                                  ;		  (ax) = file handle
 39242                                  ;	USES	all
 39243                                  ;
 39244                                  ;----------------------------------------------------------------------------
 39245                                  
 39246                                  _$CREAT:
 39247 00006F32 51                      	push	cx			; Save attributes on stack
 39248 00006F33 B9[EC29]                	mov	CX,DOS_CREATE		; routine to call
 39249                                  AccessSet:
 39250                                  	;mov	byte [ss:SATTRIB],6
 39251 00006F36 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39252                                  	; 10/08/2018
 39253 00006F3C E927FF                  	JMP	AccessFile		; use good ol' open
 39254                                  
 39255                                  ; MSDOS 6.0 (MSDOS 3.3)
 39256                                  ;	BREAK <$CHMOD - change file attributes>
 39257                                  ;----------------------------------------------------------------------------
 39258                                  ;
 39259                                  ;**	$CHMOD - Change File Attributes
 39260                                  ;
 39261                                  ;   Assembler usage:
 39262                                  ;	    LDS     DX, name
 39263                                  ;	    MOV     CX, attributes
 39264                                  ;	    MOV     AL,func (0=get, 1=set)
 39265                                  ;	    INT     21h
 39266                                  ;   Error returns:
 39267                                  ;	    AX = error_path_not_found
 39268                                  ;	    AX = error_access_denied
 39269                                  ;
 39270                                  ;----------------------------------------------------------------------------
 39271                                  
 39272                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39273                                  _$CHMOD:
 39274                                  	; 05/08/2018 - Retro DOS v3.0
 39275                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39276 00006F3F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39277 00006F42 50                      	push	ax
 39278 00006F43 51                      	push	cx			; save function and attributes
 39279 00006F44 89D6                    	MOV	SI,DX			; get things in appropriate places
 39280 00006F46 E8A7FB                  	call	TransPathSet		; get correct path
 39281 00006F49 59                      	pop	cx
 39282 00006F4A 58                      	pop	ax			; and get function and attrs back
 39283 00006F4B 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39284 00006F4D 16                      	push	ss			; set up for later possible calls
 39285 00006F4E 1F                      	pop	ds
 39286 00006F4F 803E[7A05]FF            	CMP	byte [CMETA],-1
 39287 00006F54 754E                    	JNZ	short ChModErr
 39288                                  	;mov	byte [SATTRIB],16h
 39289 00006F56 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39290 00006F5B 2C01                    	SUB	AL,1			; fast way to discriminate
 39291 00006F5D 720B                    	JB	short ChModGet		; 0 -> go get value
 39292 00006F5F 7417                    	JZ	short ChModSet		; 1 -> go set value
 39293                                  	;mov	byte [EXTERR_LOCUS],1
 39294 00006F61 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39295                                  	;mov	al,1
 39296 00006F66 B001                    	mov	al,error_invalid_function ; bad value
 39297                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39298                                  chmod_errj:	
 39299                                  	;;jmp	SYS_RET_ERR
 39300                                  	;jmp	short ChModE	
 39301 00006F68 EBC5                    	jmp	short NORERR	; 06/12/2022
 39302                                  ChModGet:
 39303 00006F6A E86AB9                  	call	GET_FILE_INFO		; suck out the ol' info
 39304 00006F6D 7237                    	JC	short ChModE		; error codes are already set for ret
 39305 00006F6F E80F95                  	call	Get_User_Stack		; point to user saved vaiables
 39306                                  	;mov	[SI+4],ax
 39307 00006F72 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39308                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39309                                  OpenOkj2:
 39310                                  	; 17/12/2022
 39311                                  	;;jmp	SYS_RET_OK		; say sayonara
 39312                                  	;jmp	short OpenOkj
 39313                                  	; 25/06/2019
 39314 00006F75 E9C296                  	jmp	SYS_RET_OK_clc
 39315                                  
 39316                                  ChModSet:
 39317 00006F78 89C8                    	MOV	AX,CX			; get attrs in position
 39318 00006F7A E8B8B9                  	call	SET_FILE_ATTRIBUTE	; go set
 39319 00006F7D 7227                    	JC	short ChModE		; errors are set
 39320                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39321                                  	;jmp	SYS_RET_OK
 39322                                  OpenOkj3:
 39323                                  	;jmp	short OpenOkj2
 39324                                  	; 17/12/2022
 39325 00006F7F E9B596                  	jmp	SYS_RET_OK
 39326                                  
 39327                                  ; 17/12/2022
 39328                                  %if 0
 39329                                  ChModErr:
 39330                                  NotFound:	; 17/12/2022
 39331                                  	;mov	al,3
 39332                                  	mov	al,error_path_not_found
 39333                                  ChModE:
 39334                                  UnlinkE:	; 17/12/2022
 39335                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39336                                  	;;jmp	SYS_RET_ERR
 39337                                  	;jmp	short chmod_errj
 39338                                  	; 17/12/2022
 39339                                  	jmp	short NORERR
 39340                                  %endif
 39341                                  
 39342                                  ; 22/05/2019 - Retro DOS v4.0
 39343                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39344                                  
 39345                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39346                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39347                                  
 39348                                  ;	BREAK <$UNLINK - delete a file entry>
 39349                                  ;----------------------------------------------------------------------------
 39350                                  ;
 39351                                  ;**	$UNLINK - Delete a File
 39352                                  ;
 39353                                  ;
 39354                                  ;	Assembler usage:
 39355                                  ;	    LDS     DX, name
 39356                                  ;	    IF VIA SERVER DOS CALL
 39357                                  ;	     MOV     CX,SEARCH_ATTRIB
 39358                                  ;	    MOV     AH, Unlink
 39359                                  ;	    INT     21h
 39360                                  ;
 39361                                  ;	ENTRY	(ds:dx) = path name
 39362                                  ;		(cx) = search_attribute, if via server_dos
 39363                                  ;	EXIT	'C' clear if no error
 39364                                  ;		'C' set if error
 39365                                  ;		  (ax) = error code
 39366                                  ;			= error_file_not_found
 39367                                  ;			= error_access_denied
 39368                                  ;
 39369                                  ;----------------------------------------------------------------------------
 39370                                  
 39371                                  _$UNLINK:
 39372 00006F82 51                      	push	cx			; Save possible CX input parm
 39373 00006F83 89D6                    	MOV	SI,DX			; Point at input string
 39374 00006F85 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39375 00006F88 E865FB                  	call	TransPathSet		; go get normalized path
 39376 00006F8B 59                      	pop	cx
 39377 00006F8C 7216                    	JC	short ChModErr		; badly formed path
 39378 00006F8E 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39379 00006F94 750E                    	JNZ	short NotFound
 39380 00006F96 16                      	push	ss
 39381 00006F97 1F                      	pop	ds
 39382                                  	;mov	ch,6
 39383 00006F98 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39384 00006F9A E81C01                  	call	SetAttrib
 39385 00006F9D E839B5                  	call	DOS_DELETE		; remove that file
 39386                                  	;JC	short UnlinkE 		; error is there
 39387                                  	; 17/12/2022
 39388 00006FA0 728D                    	jc	short NORERR
 39389                                  
 39390                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39391                                  UnlinkOk:
 39392                                  	;jmp	SYS_RET_OK		; okey doksy
 39393 00006FA2 EBDB                    	jmp	short OpenOkj3
 39394                                  
 39395                                  	; 17/12/2022
 39396                                  ChModErr:	; 17/12/2022
 39397                                  NotFound:
 39398                                  	;mov	al,3
 39399 00006FA4 B003                    	MOV	AL,error_path_not_found
 39400                                  ChModE:		; 17/12/2022
 39401                                  UnlinkE:
 39402                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39403                                  	;;jmp	SYS_RET_ERR		; bye
 39404                                  	;jmp	short ChModE
 39405                                  	; 17/12/2022
 39406 00006FA6 EB87                    	jmp	short NORERR
 39407                                  
 39408                                  ;BREAK <$RENAME - move directory entries around>
 39409                                  ;----------------------------------------------------------------------------
 39410                                  ;
 39411                                  ;   Assembler usage:
 39412                                  ;	    LDS     DX, source
 39413                                  ;	    LES     DI, dest
 39414                                  ;	    IF VIA SERVER DOS CALL
 39415                                  ;	      MOV   CX,SEARCH_ATTRIB
 39416                                  ;	    MOV     AH, Rename
 39417                                  ;	    INT     21h
 39418                                  ;
 39419                                  ;   Error returns:
 39420                                  ;	    AX = error_file_not_found
 39421                                  ;	       = error_not_same_device
 39422                                  ;	       = error_access_denied
 39423                                  ;
 39424                                  ;----------------------------------------------------------------------------
 39425                                  
 39426                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39427                                  _$RENAME:
 39428                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39429 00006FA8 51                      	push	cx
 39430 00006FA9 1E                      	push	ds
 39431 00006FAA 52                      	push	dx			; save source and possible CX arg
 39432 00006FAB 06                      	PUSH	ES
 39433 00006FAC 1F                      	POP	DS			; move dest to source
 39434 00006FAD 89FE                    	MOV	SI,DI			; save for offsets
 39435 00006FAF BF[3E04]                	MOV	DI,RENBUF
 39436 00006FB2 E83BFB                  	call	TransPathSet		; munge the paths
 39437 00006FB5 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39438 00006FBA 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39439 00006FBF 5E                      	pop	si
 39440 00006FC0 1F                      	pop	ds
 39441 00006FC1 59                      	pop	cx			; get back source and possible CX arg
 39442                                  epjc2:	
 39443 00006FC2 72E0                    	JC	short ChModErr		; get old error
 39444 00006FC4 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39445 00006FCA 75D8                    	JNZ	short NotFound
 39446 00006FCC 51                      	push	cx			; Save possible CX arg
 39447 00006FCD BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39448 00006FD0 E81DFB                  	call	TransPathSet		; wham
 39449 00006FD3 59                      	pop	cx
 39450 00006FD4 72EC                    	JC	short epjc2
 39451 00006FD6 16                      	push	ss
 39452 00006FD7 1F                      	pop	ds
 39453 00006FD8 803E[7A05]FF            	CMP	byte [CMETA],-1
 39454 00006FDD 72C5                    	JB	short NotFound
 39455                                  
 39456                                  	; MSDOS 6.0
 39457 00006FDF FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39458 00006FE3 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39459 00006FE7 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39460 00006FEA 16                      	PUSH	SS			   ;AN000;;MS.
 39461 00006FEB 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39462 00006FEC 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39463                                  rnloop: 				   ;AN000;
 39464 00006FEE E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39465 00006FF1 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39466 00006FF3 E8BBA1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39467 00006FF6 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39468 00006FF8 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39469 00006FFA EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39470                                  rnerr:					   ;AN000;
 39471 00006FFC 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39472                                  	;error	error_current_directory    ;AN000;;MS.
 39473 00006FFF B010                    	mov	al,error_current_directory 
 39474                                  	;jmp	SYS_RET_ERR
 39475                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39476 00007001 EBA3                    	jmp	short UnlinkE
 39477                                  dorn:					   ;AN000;
 39478 00007003 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39479 00007008 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39480                                  
 39481 0000700D 16                      	push	ss
 39482 0000700E 1F                      	pop	ds
 39483                                  
 39484                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39485                                  	;mov	ch,16h
 39486 0000700F B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39487                                  					; rename appropriate files
 39488 00007011 E8A500                  	call	SetAttrib
 39489 00007014 E896B6                  	call	DOS_RENAME		; do the deed
 39490 00007017 728D                    	JC	short UnlinkE 		; errors
 39491                                  
 39492                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39493                                  	;jmp	SYS_RET_OK
 39494 00007019 EB87                    	jmp	short UnlinkOk
 39495                                  
 39496                                  
 39497                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39498                                  
 39499                                  ; 14/07/2018 - Retro DOS v3.0
 39500                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39501                                  
 39502                                  ;Break <$CreateNewFile - Create a new directory entry>
 39503                                  ;----------------------------------------------------------------------------
 39504                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39505                                  ;	was no previous directory entry, and fail if a directory entry with
 39506                                  ;	the same name existed previously.
 39507                                  ;
 39508                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39509                                  ;		CX contains default file attributes
 39510                                  ;   Outputs:	Carry Clear:
 39511                                  ;		    AX has file handle opened for read/write
 39512                                  ;		Carry Set:
 39513                                  ;		    AX has error code
 39514                                  ;   Registers modified: All
 39515                                  ;----------------------------------------------------------------------------
 39516                                  
 39517                                  _$CreateNewFile:
 39518 0000701B 51                      	push	cx			; Save attributes on stack
 39519 0000701C B9[B52A]                	MOV	CX,DOS_Create_New	; routine to call
 39520 0000701F E914FF                  	JMP	AccessSet		; use good ol' open
 39521                                  
 39522                                  ;**	BinToAscii - convert a number to a string.
 39523                                  ;----------------------------------------------------------------------------
 39524                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39525                                  ;	This routine is used to generate temp file names so we don't spend
 39526                                  ;	the time and code needed for a true hex number, we just use
 39527                                  ;	A thorugh O.
 39528                                  ;
 39529                                  ;	ENTRY	(ax) = value
 39530                                  ;		(es:di) = destination
 39531                                  ;	EXIT	(es:di) updated by 4
 39532                                  ;	USES	cx, di, flags
 39533                                  ;----------------------------------------------------------------------------
 39534                                  
 39535                                  ; MSDOS 3.3
 39536                                  ;BinToAscii:
 39537                                  ;	mov     cx,4
 39538                                  ;bta5:
 39539                                  ;	push    cx
 39540                                  ;	mov     cl,4
 39541                                  ;	rol     ax,cl
 39542                                  ;	push    ax
 39543                                  ;	and     al,0Fh
 39544                                  ;	add     al,'0'
 39545                                  ;	cmp     al,'9'
 39546                                  ;	jbe     short bta6
 39547                                  ;	add     al,7
 39548                                  ;bta6: 
 39549                                  ;	stosb
 39550                                  ;	pop     ax
 39551                                  ;	pop     cx
 39552                                  ;	loop    bta5
 39553                                  ;	retn
 39554                                  
 39555                                  ; MSDOS 6.0
 39556                                  BinToAscii:
 39557 00007022 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39558                                  bta5:	
 39559 00007025 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39560 00007027 50                      	push	ax			; preserve remainder of digits
 39561 00007028 240F                    	AND	AL,0Fh			; grab low nibble
 39562 0000702A 0441                    	ADD	AL,'A'			; turn into ascii
 39563 0000702C AA                      	STOSB				; drop in the character
 39564 0000702D 58                      	pop	ax			; (ax) = shifted number
 39565 0000702E FECD                    	dec	ch
 39566 00007030 75F3                    	jnz	short bta5		; process 4 digits
 39567 00007032 C3                      	retn
 39568                                  
 39569                                  ;Break	<$CreateTempFile - create a unique name>
 39570                                  ;----------------------------------------------------------------------------
 39571                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39572                                  ;	Method used is to get the current time, convert to a name and attempt
 39573                                  ;	a create new. Repeat until create new succeeds.
 39574                                  ;
 39575                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39576                                  ;		CX  contains default attributes
 39577                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39578                                  ;		AX has handle
 39579                                  ;   Registers modified: all
 39580                                  ;----------------------------------------------------------------------------
 39581                                  
 39582                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39583                                  
 39584                                  _$CreateTempFile:
 39585                                  	;Enter
 39586 00007033 55                      	push	bp
 39587 00007034 89E5                    	mov	bp,sp
 39588                                  
 39589                                  	;LocalVar  EndPtr,DWORD
 39590                                  	;LocalVar  FilPtr,DWORD
 39591                                  	;LocalVar  Attr,WORD
 39592                                  
 39593 00007036 83EC0A                  	sub	sp,10
 39594                                  
 39595                                  	;test	cx,0FFD8h
 39596 00007039 F7C1D8FF                	test	CX,~attr_changeable
 39597 0000703D 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39598                                  
 39599                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39600                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39601                                  ; below. The code loops on error_access_denied, but if one of the non
 39602                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39603                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39604                                  ; need to detect these cases before getting to the loop.
 39605                                  
 39606                                  	;mov	ax, 5
 39607 0000703F B80500                  	MOV	AX,error_access_denied
 39608 00007042 EB69                    	JMP	SHORT SETTMPERR
 39609                                  
 39610                                  OKatts:
 39611                                  	;MOV	attr,CX 		; save attribute
 39612 00007044 894EF6                  	mov     [bp-10],cx
 39613                                  	;MOV	FilPtrL,DX		; pointer to file
 39614 00007047 8956F8                  	mov	[bp-8],dx
 39615                                  	;MOV	FilPtrH,DS
 39616 0000704A 8C5EFA                  	mov	[bp-6],ds
 39617                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39618 0000704D 8C5EFE                  	mov	[bp-2],ds
 39619 00007050 1E                      	PUSH	DS
 39620 00007051 07                      	POP	ES			; destination for nul search
 39621 00007052 89D7                    	MOV	DI,DX
 39622 00007054 89F9                    	MOV	CX,DI
 39623 00007056 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39624                                  	; MSDOS 6.0
 39625 00007058 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39626 0000705A 7501                    	JNZ	short okok		;AN000;MS. no
 39627                                  	;MOV	CX,-1			;AN000;MS.
 39628                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39629                                  	; 17/12/2022
 39630 0000705C 49                      	dec	cx  ; mov cx,-1
 39631                                  	;mov	cx,-1 ; 0FFFh
 39632                                  okok:					;AN000;
 39633 0000705D 31C0                    	XOR	AX,AX			;AN000;
 39634 0000705F F2AE                    	REPNZ	SCASB			;AN000;
 39635                                  					;AN000;
 39636 00007061 4F                      	DEC	DI			; point back to the null
 39637 00007062 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39638 00007066 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39639 00007069 7403                    	JZ	short SETENDPTR		; Yes
 39640                                  STOREPTH:
 39641 0000706B B05C                    	MOV	AL,'\'
 39642 0000706D AA                      	STOSB				; Add a path separator (and INC DI)
 39643                                  SETENDPTR:
 39644                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39645 0000706E 8856FC                  	mov	[bp-4],dl
 39646                                  CreateLoop:
 39647 00007071 16                      	push	ss			; let ReadTime see variables
 39648 00007072 1F                      	pop	ds
 39649 00007073 55                      	push	bp
 39650 00007074 E8A39A                  	call	READTIME		; go get time
 39651 00007077 5D                      	pop	bp
 39652                                  ;
 39653                                  ; Time is in CX:DX. Go drop it into the string.
 39654                                  ;
 39655                                  	;les	di,EndPtr		; point to the string
 39656 00007078 C47EFC                  	les	di,[BP-4]
 39657 0000707B 89C8                    	mov	ax,cx
 39658 0000707D E8A2FF                  	call	BinToAscii		; store upper word
 39659 00007080 89D0                    	mov	ax,dx
 39660 00007082 E89DFF                  	call	BinToAscii		; store lower word
 39661 00007085 30C0                    	xor	al,al
 39662 00007087 AA                      	STOSB				; nul terminate
 39663                                  	;LDS	DX,FilPtr		; get name
 39664 00007088 C556F8                  	lds	dx,[bp-8]
 39665                                  	;MOV	CX,Attr 		; get attr
 39666 0000708B 8B4EF6                  	mov	cx,[bp-10]
 39667 0000708E 55                      	push	bp
 39668 0000708F E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39669 00007092 5D                      	pop	bp
 39670 00007093 7319                    	JNC	short CreateDone	; failed, go try again
 39671                                  
 39672                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39673                                  ; error and figure out what to do.
 39674                                  
 39675                                  	;; MSDOS 3.3			; M049 - start
 39676                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39677                                  ;;	cmp	al,error_file_exists
 39678                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39679                                  ;;	cmp	al,error_access_denied
 39680                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39681                                  
 39682                                  	; MSDOS 6.0
 39683                                  	;cmp	al,50h
 39684 00007095 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39685 00007097 74D8                    	JZ	short CreateLoop	; Y: try again
 39686                                  	;cmp	al,5
 39687 00007099 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39688 0000709B 7510                    	JNZ	short SETTMPERR		; N: Error out
 39689                                  					; Y: Check to see if we got this due
 39690                                  					;    to the network drive. Note that
 39691                                  					;    the redir will set the exterr
 39692                                  					;    to error_cannot_make if this is 
 39693                                  					;    so. 
 39694 0000709D 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39695                                  					; See if it's REALLY an att mismatch
 39696 000070A3 7408                    	je	short SETTMPERR		; no, network error, stop
 39697                                  ;M070
 39698                                  ; If the user failed on an I24, we do not want to try again
 39699                                  ;
 39700 000070A5 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39701                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39702                                  
 39703                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39704                                  	; 17/12/2022
 39705 000070AB 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39706                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39707                                  	;jz	short SETTMPERR
 39708                                  	;jmp	short CreateLoop
 39709                                  
 39710                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39711                                  					; M049 - end
 39712                                  SETTMPERR:
 39713 000070AD F9                      	STC
 39714                                  CreateDone:
 39715                                  	;Leave
 39716 000070AE 89EC                    	mov	sp,bp
 39717 000070B0 5D                      	pop	bp
 39718 000070B1 7203                    	JC	short CreateFail
 39719 000070B3 E98195                  	jmp	SYS_RET_OK		; success!
 39720                                  CreateFail:
 39721 000070B6 E98795                  	jmp	SYS_RET_ERR
 39722                                  
 39723                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39724                                  ;   (CH) or to the value in CL if the current system call is through
 39725                                  ;   serverdoscall.
 39726                                  ;
 39727                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39728                                  ;		fSharing == TRUE => set sattrib to CL
 39729                                  ;   Outputs:	none
 39730                                  ;   Registers changed:	CX
 39731                                  
 39732                                  SetAttrib:
 39733 000070B9 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39734 000070BF 7502                    	jnz	short Set
 39735 000070C1 88E9                    	mov	cl,ch
 39736                                  Set:
 39737 000070C3 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39738 000070C8 C3                      	retn
 39739                                  
 39740                                  ; 14/07/2018 - Retro DOS v3.0
 39741                                  ; MSDOS 6.0
 39742                                  
 39743                                  ; 29/04/2019 - Retro DOS v4.0
 39744                                  
 39745                                  ;Break	<Extended_Open- Extended open the file>
 39746                                  ;----------------------------------------------------------------------------
 39747                                  ; Input: AL= 0 reserved  AH=6CH
 39748                                  ;	 BX= mode
 39749                                  ;	 CL= create attribute  CH=search attribute (from server)
 39750                                  ;	 DX= flag
 39751                                  ;	 DS:SI = file name
 39752                                  ;	 ES:DI = parm list
 39753                                  ;			   DD  SET EA list (-1) null
 39754                                  ;			   DW  n  parameters
 39755                                  ;			   DB  type (TTTTTTLL)
 39756                                  ;			   DW  IOMODE
 39757                                  ; Function: Extended Open
 39758                                  ; Output: carry clear
 39759                                  ;		     AX= handle
 39760                                  ;		     CX=1 file opened
 39761                                  ;			2 file created/opened
 39762                                  ;			3 file replaced/opened
 39763                                  ;	  carry set: AX has error code
 39764                                  ;----------------------------------------------------------------------------
 39765                                  
 39766                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39767                                  _$Extended_Open:			  ;AN000;
 39768                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39769 000070C9 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39770 000070CE 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39771                                  	; 17/12/2022
 39772 000070D5 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39773                                  	;;test	dx,0FE00h
 39774                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39775 000070D8 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39776 000070DA 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39777 000070DC 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39778 000070DF 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39779                                  	;and	dl,0Fh
 39780 000070E1 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39781 000070E4 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39782 000070E7 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39783                                  	;and	ah,0F0h
 39784 000070E9 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39785 000070EC 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39786 000070EF 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39787                                  
 39788 000070F1 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39789 000070F6 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39790 000070FB 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39791 00007100 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39792 00007105 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39793 0000710A 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39794 0000710F 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39795 00007114 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39796 00007119 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39797 0000711B 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39798 0000711D EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39799                                  ext_inval2:				  ;AN000;;EO.
 39800                                  	;mov	al,1
 39801 0000711F B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39802                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39803                                  eo_err:
 39804                                  	;jmp	SYS_RET_ERR
 39805 00007121 EB93                    	jmp	short CreateFail
 39806                                  
 39807                                  ext_inval_parm:				  ;AN000;EO..
 39808 00007123 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39809 00007124 5E                      	POP	SI			  ;AN000;EO..
 39810                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39811                                  	;mov	al,13
 39812 00007125 B00D                    	mov	al,error_invalid_data
 39813                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39814                                  	;;jmp	SYS_RET_ERR
 39815                                  	;jmp	short eo_err
 39816                                  	; 17/12/2022
 39817 00007127 EB8D                    	jmp	short CreateFail
 39818                                  
 39819                                  	; 17/12/2022	
 39820                                  ;error_return:				  ;AN000;EO.
 39821                                  ;	retn				  ;AN000;EO.. return with error
 39822                                  
 39823                                  goopen2:				  ;AN000;
 39824                                  	; 17/12/2022
 39825                                  	;test	bh,20h				 
 39826 00007129 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39827                                  	;;test	bx,2000h
 39828                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39829 0000712C 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39830                                  	;or	byte [SS:EXTOPEN_ON],2
 39831 0000712E 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39832                                  goopen:					  ;AN000;
 39833                                  	;or	byte [SS:EXTOPEN_ON],1 
 39834 00007134 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39835                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39836                                  	; 18/12/2022
 39837 0000713A 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39838                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39839 00007140 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39840 00007146 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39841 00007148 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39842 0000714B 723F                    	JC	short error_return	  ;AN000;;EO. error
 39843                                  
 39844 0000714D 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39845 00007153 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39846                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39847 00007155 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39848 0000715C EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39849                                  
 39850                                  	; 17/12/2022
 39851                                  ;ok_return2:
 39852                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39853                                  
 39854                                  chknext:
 39855                                  	; 17/12/2022
 39856 0000715E 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39857                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39858                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39859 00007164 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39860 00007166 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39861 00007169 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39862 0000716B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39863 00007171 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39864 00007173 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39865 0000717A 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39866 00007180 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39867 00007182 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39868 00007189 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39869                                  error_return2:
 39870 0000718B F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39871                                  error_return:	 ;17/12/2022
 39872 0000718C C3                      	retn				  ;AN000;;EO. return with error
 39873                                  
 39874                                  	; 17/12/2022
 39875                                  ok_return:
 39876                                  ok_return2:
 39877 0000718D E9A794                  	jmp	SYS_RET_OK
 39878                                  
 39879                                  exist_open:				  ;AN000;
 39880 00007190 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39881 00007196 7402                    	jz	short noserver		  ;AN000;;EO. no
 39882 00007198 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39883                                  noserver:
 39884 0000719A E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39885 0000719D 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39886 0000719F 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39887 000071A5 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39888                                  local_extopen:
 39889                                  	;cmp	ax,2
 39890 000071A7 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39891 000071AA 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39892                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39893                                  	; 17/12/2022
 39894 000071AC 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39895                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39896                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39897                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39898                                  	; 17/12/2022
 39899 000071B2 745D                    	jz	short extexit ; 10/06/2019
 39900                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39901                                  	;jnz	short do_creat
 39902                                  	;jmp	short extexit
 39903                                  do_creat:
 39904 000071B4 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39905 000071B9 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39906 000071BE 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39907 000071C0 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39908 000071C3 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39909                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39910 000071C5 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39911                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39912 000071CC EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39913                                  
 39914                                  ext_ok:
 39915 000071CE 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39916 000071D4 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39917                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39918 000071D6 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39919                                  setXAttr:
 39920                                  	; 29/04/2019
 39921 000071DD 50                      	push	ax
 39922 000071DE E8A092                  	call	Get_User_Stack		  ;AN000;;EO.
 39923 000071E1 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39924                                  	;mov	[si+4],ax
 39925 000071E5 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39926 000071E8 58                      	pop	ax			  ;AN000;;EO.
 39927 000071E9 8904                    	mov	[si],ax
 39928                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39929                                  	; 17/12/2022
 39930 000071EB EBA0                    	jmp	short ok_return
 39931                                  ;ok_return:				  ;AN000;
 39932                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39933                                  
 39934                                  extexit2:				  ;AN000; ERROR RECOVERY
 39935 000071ED 5B                      	POP	BX			  ;AN000;EO. close the handle
 39936 000071EE 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39937                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39938 000071EF 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39939                                  					  ;AN000;EO. from create;smr;SS Override
 39940 000071F5 750C                    	JNZ	short justopen		  ;AN000;EO.
 39941 000071F7 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39942 000071FC C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39943 000071FE E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39944 00007201 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39945                                  
 39946                                  justopen:				  ;AN000;
 39947 00007203 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39948                                  reserror:				  ;AN000;
 39949 00007206 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39950 00007207 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39951                                  
 39952                                  ext_file_unfound:			  ;AN000;
 39953                                  	;mov	ax,2
 39954 00007209 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39955 0000720C EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39956                                  ext_inval:				  ;AN000;
 39957                                  	;mov	ax,1
 39958 0000720E B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39959                                  lockoperr:	; 17/12/2022
 39960                                  extexit:
 39961 00007211 E92C94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39962                                  
 39963                                  ;============================================================================
 39964                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39965                                  ;============================================================================
 39966                                  ; 14/07/2018 - Retro DOS v3.0
 39967                                  ; 22/05/2019 - Retro DOS v4.0
 39968                                  
 39969                                  ;BREAK <$LockOper - Lock Calls>
 39970                                  ;----------------------------------------------------------------------------
 39971                                  ;
 39972                                  ;   Assembler usage:
 39973                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39974                                  ;	    MOV     CX, OffsetHigh
 39975                                  ;	    MOV     DX, OffsetLow
 39976                                  ;	    MOV     SI, LengthHigh
 39977                                  ;	    MOV     DI, LengthLow
 39978                                  ;	    MOV     AH, LockOper
 39979                                  ;	    MOV     AL, Request
 39980                                  ;	    INT     21h
 39981                                  ;
 39982                                  ;   Error returns:
 39983                                  ;	    AX = error_invalid_handle
 39984                                  ;	       = error_invalid_function
 39985                                  ;	       = error_lock_violation
 39986                                  ;
 39987                                  ;   Assembler usage:
 39988                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39989                                  ;
 39990                                  ;				    0? lock all
 39991                                  ;				    8? lock write
 39992                                  ;				    ?2 lock multiple
 39993                                  ;				    ?3 unlock multiple
 39994                                  ;				    ?4 lock/read
 39995                                  ;				    ?5 write/unlock
 39996                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39997                                  ;	    MOV     BX, Handle
 39998                                  ;	    MOV     CX, count or size
 39999                                  ;	    LDS     DX, buffer
 40000                                  ;	    INT     21h
 40001                                  ;
 40002                                  ;   Error returns:
 40003                                  ;	    AX = error_invalid_handle
 40004                                  ;	       = error_invalid_function
 40005                                  ;	       = error_lock_violation
 40006                                  ;
 40007                                  ;----------------------------------------------------------------------------
 40008                                  
 40009                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40010                                  _$LockOper:
 40011 00007214 3C01                    	CMP	AL,1
 40012 00007216 770B                    	JA	short lock_bad_func
 40013                                  
 40014 00007218 57                      	PUSH	DI			       ; Save LengthLow
 40015 00007219 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40016 0000721C 731D                    	JNC	short lock_do 		       ; have valid handle
 40017 0000721E 5F                      	POP	DI			       ; Clean stack
 40018                                  	;mov	al,6
 40019 0000721F B006                    	mov	al,error_invalid_handle
 40020                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40021                                  ;lockoperr:
 40022                                  	;jmp	SYS_RET_ERR
 40023                                  	; 17/12/2022
 40024 00007221 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40025                                  
 40026                                  lock_bad_func:
 40027                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40028 00007223 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40029                                  	;mov	al,1
 40030 00007229 B001                    	mov	al,error_invalid_function
 40031                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40032                                  lockoperrj:
 40033                                  	;jmp	SYS_RET_ERR
 40034 0000722B EBE4                    	jmp	short lockoperr
 40035                                  
 40036                                  	; 22/05/2019 - Retro DOS v4.0
 40037                                  
 40038                                  	; MSDOS 6.0 
 40039                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40040                                  ; Dead code deleted, MD, 23 Mar 90
 40041                                  
 40042                                  ;lock_do:
 40043                                  ;	; MSDOS 3.3
 40044                                  ;	or	al,al
 40045                                  ;	pop	ax
 40046                                  ;	jz	short DOS_Lock
 40047                                  ;DOS_Unlock:
 40048                                  ;	;test	word [es:di+5],8000h
 40049                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40050                                  ;	JZ	short LOCAL_UNLOCK
 40051                                  ;	push    ax
 40052                                  ;	mov     ax,110Bh
 40053                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40054                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40055                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40056                                  ;			; SFT DPB field -> DPB of drive containing file
 40057                                  ;			; Return: CF set error
 40058                                  ;	pop     bx
 40059                                  ;	jmp     short ValChk
 40060                                  ;
 40061                                  ;LOCAL_UNLOCK:
 40062                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40063                                  ;ValChk:
 40064                                  ;	JNC	short Lock_OK
 40065                                  ;lockerror:
 40066                                  ;	jmp	SYS_RET_ERR
 40067                                  ;Lock_OK:
 40068                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40069                                  ;	jmp	SYS_RET_OK
 40070                                  ;DOS_Lock:
 40071                                  ;	;test	word [es:di+5],8000h
 40072                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40073                                  ;	JZ	short LOCAL_LOCK
 40074                                  ;	;CallInstall NET_XLock,MultNET,10
 40075                                  ;	mov     ax, 110Ah
 40076                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40077                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40078                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40079                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40080                                  ;			; Return: CF set error
 40081                                  ;	JMP	short ValChk
 40082                                  ;
 40083                                  ;LOCAL_LOCK:
 40084                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40085                                  ;	JMP	short ValChk
 40086                                  
 40087                                  ; 17/12/2022
 40088                                  LOCAL_UNLOCK:
 40089                                  	; MSDOS 3.3
 40090                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40091                                  	; MSDOS 6.0
 40092 0000722D FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40093                                  ValChk:
 40094 00007231 7302                    	JNC	short Lock_OK
 40095                                  lockerror:
 40096                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40097                                  	;;jmp	SYS_RET_ERR
 40098                                  	;jmp	short lockoperrj
 40099                                  	; 17/12/2022
 40100 00007233 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40101                                  Lock_OK:
 40102                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40103                                  	; 10/06/2019
 40104 00007235 A1[0C06]                	mov	ax,[TEMP_VAR]
 40105 00007238 E9FC93                  	jmp	SYS_RET_OK
 40106                                  
 40107                                  	; 22/05/2019
 40108                                  lock_do:
 40109                                  	; MSDOS 6.0
 40110 0000723B 89C3                    	MOV	BX,AX				; save AX
 40111 0000723D BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40112                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40113                                  	;;mov	[bp+0],dx
 40114                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40115                                  	; 15/12/2022
 40116 00007240 895600                  	mov	[bp],dx
 40117                                  	;mov	[bp+2],cx
 40118 00007243 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40119 00007246 59                      	POP	CX				; get low length
 40120                                  	;mov	[bp+4],cx
 40121 00007247 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40122                                  	;mov	[bp+6],si
 40123 0000724A 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40124 0000724D B90100                  	MOV	CX,1				; one range
 40125                                  
 40126                                  ;	PUSH	CS				;
 40127                                  ;	POP	DS				; DS:DX points to
 40128                                  
 40129 00007250 16                      	push	ss
 40130 00007251 1F                      	pop	ds
 40131                                  
 40132 00007252 89EA                    	MOV	DX,BP				; Lock_Buffer
 40133                                  	;test	al,1
 40134 00007254 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40135                                  	;JNZ	short DOS_Unlock		; yes
 40136                                  	;JMP	short DOS_Lock			; function 0
 40137                                  	; 17/12/2022
 40138                                  	; 10/06/2019
 40139 00007256 740E                    	jz	short DOS_Lock
 40140                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40141                                  	;JNZ	short DOS_Unlock
 40142                                  	;JMP	short DOS_Lock
 40143                                  
 40144                                  DOS_Unlock:
 40145                                  	;;test	word [es:di+5],8000h
 40146                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40147 00007258 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40148 0000725D 74CE                    	JZ	short LOCAL_UNLOCK
 40149                                  
 40150                                  lock_unlock: ; 22/05/2019
 40151                                  	
 40152                                  	;CallInstall Net_Xlock,MultNET,10
 40153                                  	
 40154                                  	; MSDOS 3.3
 40155                                  	;mov     ax,110Bh
 40156                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40157                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40158                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40159                                  			; SFT DPB field -> DPB of drive containing file
 40160                                  			; Return: CF set error
 40161                                  	; MSDOS 6.0
 40162 0000725F B80A11                  	mov     ax,110Ah
 40163 00007262 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40164                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40165                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40166                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40167                                  			; Return: CF set error
 40168                                  
 40169 00007264 EBCB                    	JMP	SHORT ValChk
 40170                                  
 40171                                  ; 17/12/2022
 40172                                  %if 0
 40173                                  LOCAL_UNLOCK:
 40174                                  	; MSDOS 3.3
 40175                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40176                                  	; MSDOS 6.0
 40177                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40178                                  ValChk:
 40179                                  	JNC	short Lock_OK
 40180                                  lockerror:
 40181                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40182                                  	;jmp	SYS_RET_ERR
 40183                                  	jmp	short lockoperrj
 40184                                  Lock_OK:
 40185                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40186                                  	; 10/06/2019
 40187                                  	mov	ax,[TEMP_VAR]
 40188                                  	jmp	SYS_RET_OK
 40189                                  %endif
 40190                                  
 40191                                  DOS_Lock:
 40192                                  	;;test	word [es:di+5],8000h
 40193                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40194 00007266 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40195 0000726B 7407                    	JZ	short LOCAL_LOCK
 40196                                  
 40197                                  	;CallInstall NET_XLock,MultNET,10
 40198                                  
 40199 0000726D B80A11                  	mov     ax,110Ah
 40200 00007270 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40201                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40202                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40203                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40204                                  			; Return: CF set error
 40205                                  
 40206 00007272 EBBD                    	JMP	short ValChk
 40207                                  
 40208                                  LOCAL_LOCK:
 40209                                  	; MSDOS 3.3
 40210                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40211                                  	; MSDOS 6.0
 40212 00007274 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40213                                  
 40214 00007278 EBB7                    	JMP	short ValChk
 40215                                  
 40216                                  ; 14/07/2018 - Retro DOS v3.0
 40217                                  ; LOCK_CHECK
 40218                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40219                                  
 40220                                  ;----------------------------------------------------------------------------
 40221                                  ; Inputs:
 40222                                  ;	Outputs of SETUP
 40223                                  ;	[USER_ID] Set
 40224                                  ;	[PROC_ID] Set
 40225                                  ; Function:
 40226                                  ;	Check for lock violations on local I/O
 40227                                  ;	Retries are attempted with sleeps in between
 40228                                  ; Outputs:
 40229                                  ;    Carry clear
 40230                                  ;	Operation is OK
 40231                                  ;    Carry set
 40232                                  ;	A lock violation detected
 40233                                  ; Outputs of SETUP preserved
 40234                                  ;----------------------------------------------------------------------------
 40235                                  
 40236                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40237                                  	; 22/05/2019 - Retro DOS v4.0
 40238                                  LOCK_CHECK:
 40239 0000727A 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40240                                  LockRetry:
 40241 0000727E 53                      	push	bx		; save regs
 40242 0000727F 50                      	push	ax ; MSDOS 6.0
 40243                                  
 40244                                  	;MSDOS 3.3
 40245                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40246                                  	;MSDOS 6.0
 40247 00007280 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40248                                  
 40249 00007284 58                      	pop	ax ; MSDOS 6.0
 40250 00007285 5B                      	pop	bx		; restrore regs
 40251 00007286 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40252                                  LockN:
 40253 00007288 E87B9F                  	call	Idle		; wait a while
 40254 0000728B 4B                      	DEC	BX		; remember a retry
 40255 0000728C 75F0                    	JNZ	short LockRetry	; more retries left...
 40256 0000728E F9                      	STC
 40257                                  lc_ret_label:
 40258 0000728F C3                      	retn
 40259                                  
 40260                                  ; 14/07/2018 - Retro DOS v3.0
 40261                                  ; LOCK_VIOLATION
 40262                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40263                                  
 40264                                  ;----------------------------------------------------------------------------
 40265                                  ; Inputs:
 40266                                  ;	[THISDPB] set
 40267                                  ;	[READOP] indicates whether error on read or write
 40268                                  ; Function:
 40269                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40270                                  ; Outputs:
 40271                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40272                                  ;	Carry clear if user wants a retry
 40273                                  ;
 40274                                  ; DS, ES, DI, CX preserved, others destroyed
 40275                                  ;----------------------------------------------------------------------------
 40276                                  
 40277                                  LOCK_VIOLATION:
 40278 00007290 1E                      	PUSH	DS
 40279 00007291 06                      	PUSH	ES
 40280 00007292 57                      	PUSH	DI
 40281 00007293 51                      	PUSH	CX
 40282                                  	;mov	ax,21h
 40283 00007294 B82100                  	MOV	AX,error_lock_violation
 40284                                  	;mov	byte [ALLOWED],18h
 40285 00007297 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40286 0000729C C42E[8A05]              	LES	BP,[THISDPB]
 40287 000072A0 BF0100                  	MOV	DI,1		; Fake some registers
 40288 000072A3 89F9                    	MOV	CX,DI
 40289                                  	;mov	dx,[es:bp+11]
 40290 000072A5 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40291 000072A9 E8D6DF                  	call	HARDERR
 40292 000072AC 59                      	POP	CX
 40293 000072AD 5F                      	POP	DI
 40294 000072AE 07                      	POP	ES
 40295 000072AF 1F                      	POP	DS
 40296 000072B0 3C01                    	CMP	AL,1
 40297 000072B2 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40298 000072B4 F9                      	STC
 40299 000072B5 C3                      	retn
 40300                                  
 40301                                  ; 14/07/2018 - Retro DOS v3.0
 40302                                  
 40303                                  ;----------------------------------------------------------------------------
 40304                                  
 40305                                  ;	do a retz to return error
 40306                                  
 40307                                  	; 22/05/2019 - Retro DOS v4.0
 40308                                  CheckShare:
 40309                                  	; MSDOS 3.3
 40310                                  	;cmp	byte [cs:fShare],0
 40311                                  	;retn
 40312                                  
 40313                                  	; MSDOS 6.0
 40314 000072B6 1E                      	push	ds			;smr;
 40315                                  	;getdseg <ds>			; ds -> dosdata
 40316 000072B7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40317 000072BC 803E[0303]00            	cmp	byte [fShare],0
 40318 000072C1 1F                      	pop	ds			;smr;
 40319 000072C2 C3                      	retn
 40320                                  	
 40321                                  ;============================================================================
 40322                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40323                                  ;============================================================================
 40324                                  ; 14/07/2018 - Retro DOS v3.0
 40325                                  ; 22/05/2019 - Retro DOS v4.0
 40326                                  
 40327                                  ; SHARE_CHECK
 40328                                  ;----------------------------------------------------------------------------
 40329                                  ; Inputs:
 40330                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40331                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40332                                  ;       [WFP_START] has full path of name
 40333                                  ;       [USER_ID] Set
 40334                                  ;       [PROC_ID] Set
 40335                                  ; Function:
 40336                                  ;       Check for sharing violations on local file/device access
 40337                                  ; Outputs:
 40338                                  ;    Carry clear
 40339                                  ;       Sharing approved
 40340                                  ;    Carry set
 40341                                  ;       A sharing violation detected
 40342                                  ;           AX is error code
 40343                                  ; USES    ALL but DS
 40344                                  ;----------------------------------------------------------------------------
 40345                                  
 40346                                  	; 22/05/2019 - Retro DOS v4.0
 40347                                  SHARE_CHECK:
 40348                                  	; 26/07/2019
 40349 000072C3 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40350                                  shchk_retn:
 40351 000072C7 C3                      	retn
 40352                                  
 40353                                  ; SHARE_VIOLATION
 40354                                  ;----------------------------------------------------------------------------
 40355                                  ; Inputs:
 40356                                  ;       [THISDPB] Set
 40357                                  ;       AX has error code
 40358                                  ; Function:
 40359                                  ;       Handle Sharing errors
 40360                                  ; Outputs:
 40361                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40362                                  ;       Carry clear if user wants a retry
 40363                                  ;
 40364                                  ; DS, ES, DI preserved, others destroyed
 40365                                  ;----------------------------------------------------------------------------
 40366                                  
 40367                                  SHARE_VIOLATION:
 40368 000072C8 1E                      	PUSH    DS
 40369 000072C9 06                      	PUSH	ES
 40370 000072CA 57                      	PUSH    DI
 40371 000072CB C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40372                                  	;mov	byte [ALLOWED],18h
 40373 000072D0 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40374 000072D5 C42E[8A05]              	LES     BP,[THISDPB]
 40375 000072D9 BF0100                  	MOV     DI,1			; Fake some registers
 40376 000072DC 89F9                    	MOV     CX,DI
 40377                                  	;mov	dx,[es:bp+17]
 40378 000072DE 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40379 000072E2 E89DDF                  	call	HARDERR
 40380 000072E5 5F                      	POP     DI
 40381 000072E6 07                      	POP	ES
 40382 000072E7 1F                      	POP     DS
 40383 000072E8 3C01                    	CMP     AL,1
 40384 000072EA 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40385 000072EC F9                      	STC
 40386 000072ED C3                      	retn
 40387                                  
 40388                                  ;----------------------------------------------------------------------------
 40389                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40390                                  ;       NOT perform a close, it merely asserts that the sharing information
 40391                                  ;       for the SFT/UID/PID may be safely released.
 40392                                  ;
 40393                                  ;   Inputs:     ES:DI points to an SFT
 40394                                  ;   Outputs:    None
 40395                                  ;   Registers modified: all except DS,ES,DI
 40396                                  ;----------------------------------------------------------------------------
 40397                                  
 40398                                  ShareEnd:
 40399                                  	; 26/07/2019
 40400 000072EE FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40401 000072F2 C3                      	retn
 40402                                  
 40403                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40404                                  ;----------------------------------------------------------------------------
 40405                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40406                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40407                                  ;
 40408                                  ;   Inputs:     ThisSFT points to the SFT
 40409                                  ;               WFP_Start points to the WFP
 40410                                  ;   Outputs:    Carry clear => successful entry
 40411                                  ;               Carry set => failed system call
 40412                                  ;   Registers modified: all
 40413                                  ;----------------------------------------------------------------------------
 40414                                  
 40415                                  ShareEnter:
 40416 000072F3 51                      	push	cx
 40417                                  retry:
 40418 000072F4 8B0E[1A00]              	mov     cx,[RetryCount]
 40419                                  attempt:
 40420 000072F8 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40421 000072FC 31C0                    	XOR     AX,AX
 40422                                   	;mov	[es:di+51],axfff
 40423 000072FE 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40424 00007302 51                      	push	cx
 40425 00007303 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40426 00007306 59                      	pop	cx
 40427 00007307 730A                    	jnc	short done		; success, let the user see this
 40428 00007309 E8FA9E                  	call	Idle                    ; wait a while
 40429 0000730C E2EA                    	loop    attempt                 ; go back for another attempt
 40430 0000730E E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40431 00007311 73E1                    	jnc	short retry		; user said to retry, go do it
 40432                                  done:
 40433 00007313 59                      	pop	cx
 40434 00007314 C3                      	retn
 40435                                  
 40436                                  ;============================================================================
 40437                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40438                                  ;============================================================================
 40439                                  ; 29/04/2019 - Retro DOS 4.0
 40440                                  
 40441                                  ;** EXEPATCH.ASM 
 40442                                  ;----------------------------------------------------------------------------
 40443                                  ;	Contains the foll:
 40444                                  ;
 40445                                  ;		- code to find and overlay buggy unpack code
 40446                                  ;		- new code to be overlayed on buggy unpack code 
 40447                                  ;		- old code sequence to identify buggy unpack code
 40448                                  ;
 40449                                  ;	Revision history:
 40450                                  ;
 40451                                  ;		Created: 5/14/90
 40452                                  ;----------------------------------------------------------------------------
 40453                                  
 40454                                  ;----------------------------------------------------------------------------
 40455                                  ;
 40456                                  ; M020 : Fix for rational bug - for details see routine header
 40457                                  ; M028 : 4b04 implementation
 40458                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40459                                  ; M032 : set turnoff bit only if DOS in HMA.
 40460                                  ; M033 : if IP < 2 then not exepacked.
 40461                                  ; M046 : support for a 4th version of exepacked files.
 40462                                  ; M068 : support for copy protected apps.
 40463                                  ; M071 : use A20OFF_COUNT of 10.
 40464                                  ;
 40465                                  ;----------------------------------------------------------------------------
 40466                                  
 40467                                  PATCH1_COM_OFFSET	EQU	06CH
 40468                                  PATCH1_OFFSET		EQU	028H
 40469                                  PATCH1_CHKSUM		EQU	0EF4EH
 40470                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40471                                  
 40472                                  PATCH2_COM_OFFSET	EQU	076H
 40473                                  PATCH2_OFFSET		EQU	032H
 40474                                  
 40475                                  	; The strings that start at offset 076h have two possible 
 40476                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40477                                  
 40478                                  PATCH2_CHKSUM		EQU	78B2H
 40479                                  CHKSUM2_LEN		EQU	119H/2
 40480                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40481                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40482                                  
 40483                                  PATCH3_COM_OFFSET	EQU	074H
 40484                                  PATCH3_OFFSET		EQU	032H
 40485                                  PATCH3_CHKSUM		EQU	4EDEH
 40486                                  CHKSUM3_LEN		EQU	117H/2
 40487                                  
 40488                                  ;**	Data structure passed for ExecReady call
 40489                                  ;
 40490                                  ;struc ERStruc
 40491                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40492                                  ; .ER_Flags:	resw	1
 40493                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40494                                  ; .ER_PSP:	resw	1	; PSP of the program
 40495                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40496                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40497                                  ; .size:
 40498                                  ;endstruc
 40499                                  
 40500                                  ;DOSCODE SEGMENT
 40501                                  
 40502                                  	; 22/05/2019 - Retro DOS v4.0
 40503                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40504                                  
 40505                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40506                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40507                                  
 40508                                  ; M028 - BEGIN
 40509                                  
 40510                                  ;--------------------------------------------------------------------------
 40511                                  ;
 40512                                  ;	Procedure Name		: ExecReady
 40513                                  ;
 40514                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40515                                  ;
 40516                                  ;--------------------------------------------------------------------------
 40517                                  
 40518                                  ExecReady:
 40519 00007315 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40520                                  	;;test	word [si+2],1
 40521                                  	; 17/12/2022
 40522 00007317 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40523                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40524 0000731B 7413                    	jz	short er_setver		; only setver for .COM files
 40525                                  
 40526                                  	;mov	ax,[si+8]
 40527 0000731D 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40528 00007320 83C010                  	add	ax,10h
 40529 00007323 8EC0                    	mov	es,ax
 40530                                  
 40531                                  	;mov	cx,[si+10]
 40532 00007325 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40533                                  	;mov	cx,[si+12]
 40534 00007328 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40535                                  
 40536                                  	;call	[ss:FixExePatch]
 40537 0000732B 36FF16[F311]            	call	word [ss:FixExePatch] ; 28/12/2022
 40538                                  	
 40539                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40540                                  	;call	[ss:Rational386PatchPtr]
 40541                                  
 40542                                  er_setver:
 40543                                  	;;test	word [si+2],2		; Q: is this an overlay
 40544                                  	; 17/12/2022
 40545 00007330 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40546                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40547 00007334 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40548                                  					; N: set up lie version first
 40549 00007336 1E                      	push	ds
 40550 00007337 56                      	push	si
 40551                                  	;lds	si,[si+4]
 40552 00007338 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40553 0000733B E876ED                  	call	Scan_Execname1
 40554 0000733E E887ED                  	call	Scan_Special_Entries
 40555 00007341 5E                      	pop	si
 40556 00007342 1F                      	pop	ds
 40557                                  	;mov	es,[si+8]
 40558 00007343 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40559 00007346 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40560 0000734A 26A34000                	mov	[es:PDB.Version],ax
 40561                                  
 40562                                  er_chkdoshi:
 40563 0000734E 36803E[F211]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40564 00007354 741F                    	je	short er_done		; M032: N: done
 40565                                  
 40566                                  					; M068 - Start
 40567                                  	;mov	ax,[si+8]
 40568 00007356 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40569                                  
 40570                                  	;or	byte [ss:DOS_FLAG],4
 40571 00007359 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40572                                  					; ah = 25 & ah= 49. See dossym.inc 
 40573                                  					; under TAG M003 & M009 for 
 40574                                  					; explanation
 40575                                  	;;test	word [si+2],1
 40576                                  	; 17/12/2022
 40577 0000735F F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40578                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40579 00007363 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40580                                  					;    a20off_psp and ret
 40581 00007365 1E                         	push	ds
 40582 00007366 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40583 00007368 E88E02                  	call	IsCopyProt		; check if copy protected
 40584 0000736B 1F                      	pop	ds
 40585                                  
 40586                                  er_setA20:
 40587                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40588                                  	; is non-zero at this point it indicates that the A20 is to be 
 40589                                  	; turned off for that many int 21 calls made by the app. In 
 40590                                  	; addition the A20 has to be turned off when we exit from this 
 40591                                  	; call. Hence the inc.
 40592                                  
 40593 0000736C 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40594 00007371 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40595                                  					; turned OFF.
 40596                                  er_done:				; M068 - End
 40597 00007375 31C0                    	xor	ax,ax
 40598 00007377 C3                      	retn
 40599                                  
 40600                                  ; M028 - END
 40601                                  
 40602                                  
 40603                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40604                                  %if 0
 40605                                  
 40606                                  ;----------------------------------------------------------------------------
 40607                                  ;
 40608                                  ; procedure : Rational386Patch
 40609                                  ;
 40610                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40611                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40612                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40613                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40614                                  ;
 40615                                  ; This routine applies patches to the Rational DOS Extender to work around
 40616                                  ; most of the register trashing bugs.
 40617                                  ;
 40618                                  ; Note that there are additional register trashing bugs not fixed by these
 40619                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40620                                  ; may be modified on interrupts.
 40621                                  ;
 40622                                  ; There are two different Rational DOS Extender patchs in this module.
 40623                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40624                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40625                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40626                                  ; or not.
 40627                                  ;
 40628                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40629                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40630                                  ; running in the HMA.
 40631                                  ;
 40632                                  ; This patch detection and replacement is based on an example supplied by
 40633                                  ; Ben Williams at Rational.
 40634                                  ;
 40635                                  ;----------------------------------------------------------------------------
 40636                                  
 40637                                  ; 22/05/2019 - Retro DOS v4.0
 40638                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40639                                  
 40640                                  ;----------------------------------------------------------------------------
 40641                                  ;
 40642                                  ; INPUT : ES = segment where program got loaded
 40643                                  ;
 40644                                  ;----------------------------------------------------------------------------
 40645                                  
 40646                                  rpFind1:
 40647                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40648                                  
 40649                                  rpFind1Len equ	$ - rpFind1
 40650                                  
 40651                                  ;	cli
 40652                                  ;	in	al, 21h
 40653                                  ;	pusha
 40654                                  ;	xor	ax, ax
 40655                                  ;	out	43h, al
 40656                                  ;	mov	dx, ...
 40657                                  
 40658                                  rpFind1a:
 40659                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40660                                  
 40661                                  rpFind1aLen equ	$ - rpFind1a
 40662                                  
 40663                                  ;	mov	al, 0Eh
 40664                                  ;	out	37h, al
 40665                                  ;	xor	ax, ax
 40666                                  ;	out	0F2h, al
 40667                                  
 40668                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40669                                  
 40670                                  rpFind2:
 40671                                  	db	0Fh, 20h, 0C0h
 40672                                  
 40673                                  rpFind2Len equ	$ - rpFind2
 40674                                  
 40675                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40676                                  
 40677                                  rpFind3:
 40678                                  	db	0Fh, 22h, 0C0h, 0EAh
 40679                                  
 40680                                  rpFind3Len equ	$ - rpFind3
 40681                                  
 40682                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40683                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40684                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40685                                  
 40686                                  ; note, there is no rpRepl1 string
 40687                                  
 40688                                  rpRepl2:
 40689                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40690                                  
 40691                                  rpRepl2Len equ	$ - rpRepl2
 40692                                  
 40693                                  ;	push	eax
 40694                                  ;	push	cx
 40695                                  ;	mov	eax, cr0
 40696                                  
 40697                                  rpRepl3:
 40698                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40699                                  
 40700                                  rpRepl3Len equ	$ - rpRepl3
 40701                                  
 40702                                  ;	mov	ss, bx
 40703                                  ;	pop	cx
 40704                                  ;	pop	eax
 40705                                  
 40706                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40707                                  
 40708                                  rpFind4:
 40709                                  	db	93h, 58h, 8Bh, 0CCh
 40710                                  
 40711                                  rpFind4Len equ	$ - rpFind4
 40712                                  
 40713                                  ;	xchg	bx, ax
 40714                                  ;	pop	ax
 40715                                  ;	mov	cx, sp
 40716                                  
 40717                                  rpFind5:
 40718                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40719                                  
 40720                                  rpFind5Len equ	$ - rpFind5
 40721                                  
 40722                                  ;	mov	ax, DE0Ch
 40723                                  ;	int	67h
 40724                                  ;	mov	sp, cx
 40725                                  ;	jmp	bx
 40726                                  
 40727                                  rpRepl4:
 40728                                  	db	93h, 58h, 8Bh, 0CCh
 40729                                  	db	02Eh, 066h, 0A3h
 40730                                  
 40731                                  rpRepl4o1Len equ $ - rpRepl4
 40732                                  
 40733                                  	db	00h, 00h
 40734                                  	db	02Eh, 066h, 89h, 36h
 40735                                  
 40736                                  rpRepl4o2Len equ $ - rpRepl4
 40737                                  
 40738                                  	db	00h, 00h
 40739                                  
 40740                                  rpRepl4Len equ	$ - rpRepl4
 40741                                  
 40742                                  ;	xchg	bx, ax
 40743                                  ;	pop	ax
 40744                                  ;	mov	cx, sp
 40745                                  ;	mov	dword ptr cs:[xxxx], eax
 40746                                  ;	mov	dword ptr cs:[xxxx], esi
 40747                                  
 40748                                  rpRepl5:
 40749                                  	db	8Bh, 0E1h
 40750                                  	db	2Eh, 66h, 0A1h
 40751                                  
 40752                                  rpRepl5o1Len equ $ - rpRepl5
 40753                                  
 40754                                  	db	00h, 00h
 40755                                  	db	2Eh, 66h, 8Bh, 36h
 40756                                  
 40757                                  rpRepl5o2Len equ $ - rpRepl5
 40758                                  
 40759                                  	db	00h, 00h
 40760                                  	db	0FFh, 0E3h
 40761                                  
 40762                                  rpRepl5Len equ	$ - rpRepl5
 40763                                  
 40764                                  ;	mov	sp, cx
 40765                                  ;	mov	eax, dword ptr cs:[xxxx]
 40766                                  ;	mov	esi, dword ptr cs:[xxxx]
 40767                                  ;	jmp	bx
 40768                                  
 40769                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40770                                  
 40771                                  rpFind6:
 40772                                  	db	0FAh, 52h, 51h
 40773                                  
 40774                                  rpFind6Len equ	$ - rpFind6
 40775                                  
 40776                                  ;	cli
 40777                                  ;	push	dx
 40778                                  ;	push	cx
 40779                                  
 40780                                  rpFind7a:
 40781                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40782                                  
 40783                                  rpFind7aLen equ	$ - rpFind7a
 40784                                  
 40785                                  ;	mov	ax, 0DE0Ch
 40786                                  ;	call	fword ptr es:[xxxx]
 40787                                  
 40788                                  rpFind7b:
 40789                                  	db	59h, 5Ah, 5Bh
 40790                                  
 40791                                  rpFind7bLen equ	$ - rpFind7b
 40792                                  
 40793                                  ;	pop	cx
 40794                                  ;	pop	dx
 40795                                  ;	pop	bx
 40796                                  
 40797                                  rpRepl6 :
 40798                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40799                                  
 40800                                  rpRepl6Len equ	$ - rpRepl6
 40801                                  
 40802                                  ;	cli
 40803                                  ;	push	eax
 40804                                  ;	push	ebx
 40805                                  ;	push	ecx
 40806                                  ;	push	edx
 40807                                  
 40808                                  rpRepl7:
 40809                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40810                                  
 40811                                  rpRepl7Len equ	$ - rpRepl7
 40812                                  
 40813                                  ;	pop	edx
 40814                                  ;	pop	ecx
 40815                                  ;	pop	ebx
 40816                                  ;	pop	eax
 40817                                  ;	pop	bx
 40818                                  
 40819                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40820                                  
 40821                                  rpFind8:
 40822                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40823                                  
 40824                                  rpFind8Len equ	$ - rpFind8
 40825                                  
 40826                                  ;	pusha
 40827                                  ;	push	es
 40828                                  ;	push	ds
 40829                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40830                                  ;	mov	ds, ax
 40831                                  
 40832                                  rpFind9 :
 40833                                  	db	1Fh, 07h, 61h
 40834                                  
 40835                                  rpFind9Len equ	$ - rpFind9
 40836                                  
 40837                                  ;	pop	ds
 40838                                  ;	pop	es
 40839                                  ;	popa
 40840                                  
 40841                                  rpRepl8:
 40842                                   	db	66h, 60h, 06h, 1Eh
 40843                                  
 40844                                  rpRepl8Len equ	$ - rpRepl8
 40845                                  
 40846                                  ;	pushad
 40847                                  ;	push	es
 40848                                  ;	push	ds
 40849                                  
 40850                                  rpRepl9:
 40851                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40852                                  
 40853                                  rpRepl9Len equ	$ - rpRepl9
 40854                                  
 40855                                  ;	pop	ds
 40856                                  ;	pop	es
 40857                                  ;	popad
 40858                                  ;	retn			;no need to jmp back to main-line
 40859                                  
 40860                                  ;----------------------------------------------------------------------------
 40861                                  
 40862                                  struc SearchPair
 40863                                   .sp_off1: resw 1	; offset of 1st search string
 40864                                   .sp_len1: resw 1	; length of 1st search string
 40865                                   .sp_off2: resw 1	; 2nd string
 40866                                   .sp_len2: resw 1	; 2nd string
 40867                                   .sp_diff: resw 1	; max difference between offsets
 40868                                   .size:
 40869                                  endstruc
 40870                                  
 40871                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40872                                  
 40873                                  rpBug1Strs:
 40874                                  	dw	rpFind2
 40875                                  	dw	rpFind2Len ; 3
 40876                                  	dw	rpFind3
 40877                                  	dw	rpFind3Len ; 4
 40878                                  	dw	20h
 40879                                  
 40880                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40881                                  
 40882                                  rpBug2Strs:
 40883                                  	dw	rpFind4
 40884                                  	dw	rpFind4Len ; 4
 40885                                  	dw	rpFind5
 40886                                  	dw	rpFind5Len ; 9
 40887                                  	dw	80h
 40888                                  
 40889                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40890                                  
 40891                                  rpBug3Strs:
 40892                                  	dw	rpFind6
 40893                                  	dw	rpFind6Len ; 3
 40894                                  	dw	rpFind7a
 40895                                  	dw	rpFind7aLen ; 7
 40896                                  	dw	80h
 40897                                  
 40898                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40899                                  
 40900                                  rpBug4Strs:
 40901                                  	dw	rpFind8
 40902                                  	dw	4
 40903                                  	dw	rpFind9
 40904                                  	dw	rpFind9Len ; 3
 40905                                  	dw	80h
 40906                                  
 40907                                  ;----------------------------------------------------------------------------
 40908                                  
 40909                                  struc StackVars
 40910                                   .sv_wVersion:	resw 1		; Rational extender version #
 40911                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40912                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40913                                   .size:
 40914                                  endstruc
 40915                                  
 40916                                  ;----------------------------------------------------------------------------
 40917                                  
 40918                                  ; 22/05/2019 - Retro DOS v4.0
 40919                                  
 40920                                  Rational386Patch:
 40921                                  	; Do a few quick checks to see if this looks like a Rational
 40922                                  	; Extended application. Hopefully this will quickly weed out
 40923                                  	; most non Rational apps.
 40924                                  
 40925                                  	cmp	word [es:0],395		; version number goes here - versions
 40926                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40927                                  
 40928                                  	cmp	word [es:0Ch],20h	; always has this value here
 40929                                  	jne	short rp3QuickOut
 40930                                  
 40931                                  	push	ax
 40932                                  
 40933                                  	mov	ax,18h 			; extender has 18h at
 40934                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40935                                  	jne	short rp3QO_ax
 40936                                  	cmp	[es:28],ax
 40937                                  	jne	short rp3QO_ax
 40938                                  	cmp	[es:36],ax
 40939                                  	je	short rp3Maybe
 40940                                  rp3QO_ax:
 40941                                  	pop	ax
 40942                                  rp3QuickOut:
 40943                                  	retn
 40944                                  
 40945                                  ; It might be the rational extender, do more extensive checking
 40946                                  
 40947                                  rp3Maybe:
 40948                                  	cld
 40949                                  	push	bx			; note ax pushed above
 40950                                  	push	cx
 40951                                  	push	dx
 40952                                  	push	si
 40953                                  	push	di
 40954                                  	push	es
 40955                                  	push	ds			; we use all of them
 40956                                  	push	bp
 40957                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40958                                  	mov	bp,sp
 40959                                  
 40960                                  	push	cs
 40961                                  	pop	ds
 40962                                  
 40963                                  	mov	ax,[es:0]		; save version #
 40964                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40965                                  	mov	[bp],ax	
 40966                                  					; check that binary version # matches
 40967                                  	call	VerifyVersion		;   ascii string
 40968                                  	jne	short rp3Exit_j
 40969                                  
 40970                                  ; Looks like this is it, find where to put the patch code.  The
 40971                                  ; patch will be located on top of Rational code specific to 80286
 40972                                  ; processors, so these patchs MUST NOT be applied if running on
 40973                                  ; an 80286 system.
 40974                                  
 40975                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40976                                  
 40977                                  	mov	cx,4500h		; force search len to 4700h (searches
 40978                                  	;mov	[bp+2],cx
 40979                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40980                                  
 40981                                  	mov	es,[es:20h]		; es=code segment
 40982                                  
 40983                                  	mov	si,rpFind1		; string to find
 40984                                  	mov	dx,rpFind1Len ; 10	; length to match
 40985                                  	call	ScanCodeSeq		; look for code seq
 40986                                  	jz	short rpGotPatch
 40987                                  
 40988                                  ; According to Rational, some very old versions of the extender may not
 40989                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40990                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40991                                  
 40992                                  	mov	si,rpFind1a
 40993                                  	mov	dx,rpFind1aLen  ;8
 40994                                  	call	ScanCodeSeq
 40995                                  	jz	short rpGotPatch
 40996                                  
 40997                                  rp3Exit_j:
 40998                                  	jmp	rp3Exit
 40999                                  
 41000                                  ; Found the location to write patch code! DI = offset in code seg.
 41001                                  
 41002                                  rpGotPatch:
 41003                                  	;mov	[bp+4],di
 41004                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41005                                  
 41006                                  ;----------------------------------------------------------------------------
 41007                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41008                                  
 41009                                  	;cmp	word [bp+0],381
 41010                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41011                                  	cmp	word [bp],381
 41012                                  	jae	short rpBug2			;   < 3.81
 41013                                  
 41014                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41015                                  	call	FindBadCode
 41016                                  	jc	short rpBug2
 41017                                  
 41018                                  ; si = rpFind2 offset, di = rpFind3 offset
 41019                                  
 41020                                  	push	di
 41021                                  	mov	di,si				; rpFind2 offset
 41022                                  	mov	dx,rpFind2Len ; 3
 41023                                  
 41024                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41025                                  	jne	short rp_no_cx
 41026                                  
 41027                                  	dec	di				;   yes, gobble up push cx too
 41028                                  	inc	dx
 41029                                  rp_no_cx:
 41030                                  	mov	si,rpRepl2			; patch out find2 sequence
 41031                                  	mov	cx,rpRepl2Len  ; 6
 41032                                  	call	GenPatch
 41033                                  
 41034                                  	pop	di				; rpFind3 offset
 41035                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41036                                  	jne	short rp_no_cx2
 41037                                  
 41038                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41039                                  rp_no_cx2:
 41040                                  	;mov	ax,[bp+4]
 41041                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41042                                  	;mov	[es:di+4],ax
 41043                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41044                                  
 41045                                  	push	di				; save find3 offset
 41046                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41047                                  	mov	cx,rpRepl3Len ; 5
 41048                                  	call	CopyPatch
 41049                                  
 41050                                  	pop	bx				; find3 offset
 41051                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41052                                  	call	GenJump 			; jmp back from patch area
 41053                                  	;mov	[bp+4],di
 41054                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41055                                  						;   area pointer
 41056                                  
 41057                                  ;----------------------------------------------------------------------------
 41058                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41059                                  
 41060                                  rpBug2:
 41061                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41062                                  	call	FindBadCode
 41063                                  	jc	short rpBug3
 41064                                  
 41065                                  ; si = rpFind4 offset, di = rpFind5 offset
 41066                                  
 41067                                  	;push	word [bp+4]
 41068                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41069                                  						;   (where repl4 goes)
 41070                                  	push	di				; save find5 offset
 41071                                  
 41072                                  	mov	di,si
 41073                                  	mov	dx,rpFind4Len ; 4
 41074                                  	mov	si,rpRepl4
 41075                                  	mov	cx,rpRepl4Len ; 15
 41076                                  	call	GenPatch			; patch out find4 code
 41077                                  
 41078                                  	pop	di				; find5 offset
 41079                                  	add	di,5				; keep 5 bytes of find5 code
 41080                                  	;mov	bx,[bp+4]
 41081                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41082                                  	push	bx				; save repl5 location
 41083                                  	call	GenJump
 41084                                  
 41085                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41086                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41087                                  	call	CopyPatch			;   so no need to jmp back to
 41088                                  						;   main-line code
 41089                                  
 41090                                  ; patches have been made, now update the patch code to store/load dwords just
 41091                                  ; after the code in the patch area
 41092                                  
 41093                                  	pop	di				; repl5 location
 41094                                  	pop	si				; repl4 location
 41095                                  
 41096                                  	;mov	ax,[bp+4]
 41097                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41098                                  
 41099                                  	;mov	[es:si+7],ax
 41100                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41101                                  	;mov	[es:di+5],ax
 41102                                  	mov	[es:di+rpRepl5o1Len],ax
 41103                                  	add	ax,4
 41104                                  	;mov	[es:si+0Dh],ax
 41105                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41106                                  	;mov	[es:di+0Bh],ax
 41107                                  	mov	[es:di+rpRepl5o2Len],ax
 41108                                  
 41109                                  	;add	word [bp+4],8
 41110                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41111                                  						; patch area
 41112                                  
 41113                                  ;----------------------------------------------------------------------------
 41114                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41115                                  
 41116                                  rpBug3:
 41117                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41118                                  	call	FindBadCode
 41119                                  	jc	short rpBug4
 41120                                  
 41121                                  	;add	di,9
 41122                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41123                                  	push	si				;   code and locate find7b
 41124                                  	mov	si,rpFind7b			;   sequence
 41125                                  	mov	dx,rpFind7bLen ; 3
 41126                                  	call	ScanCodeSeq_di
 41127                                  	pop	si
 41128                                  	jnz	short rpBug4
 41129                                  
 41130                                  	push	di				; save find7b code offset
 41131                                  
 41132                                  	mov	di,si
 41133                                  	mov	dx,rpFind6Len ; 3
 41134                                  	mov	si,rpRepl6
 41135                                  	mov	cx,rpRepl6Len ; 9
 41136                                  	call	GenPatch			; patch out find6 code
 41137                                  
 41138                                  	pop	di
 41139                                  	mov	dx,rpFind7bLen ; 3
 41140                                  	mov	si,rpRepl7
 41141                                  	mov	cx,rpRepl7Len ; 9
 41142                                  	call	GenPatch			; patch out find7b code
 41143                                  
 41144                                  ;----------------------------------------------------------------------------
 41145                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41146                                  
 41147                                  rpBug4:
 41148                                  	;cmp	word [bp+0],360
 41149                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41150                                  	cmp	word [bp],360
 41151                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41152                                  
 41153                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41154                                  	call	FindBadCode
 41155                                  	jc	short rp3Exit
 41156                                  
 41157                                  	push	di				; save find9 code offset
 41158                                  
 41159                                  	mov	di,si
 41160                                  	mov	dx,3
 41161                                  	mov	si,rpRepl8
 41162                                  	mov	cx,rpRepl8Len ; 4
 41163                                  	call	GenPatch			; patch out find8 code
 41164                                  
 41165                                  	pop	di				; find9 offset
 41166                                  	;mov	bx,[bp+4]
 41167                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41168                                  	call	GenJump 			;   patch area
 41169                                  
 41170                                  	mov	si,rpRepl9			; copy replacement code to
 41171                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41172                                  	call	CopyPatch			;   so no jmp back to main-line
 41173                                  
 41174                                  rp3Exit:
 41175                                  	add	sp,StackVars.size
 41176                                  	pop	bp
 41177                                  	pop	ds
 41178                                  	pop	es
 41179                                  	pop	di
 41180                                  	pop	si
 41181                                  	pop	dx
 41182                                  	pop	cx
 41183                                  	pop	bx
 41184                                  	pop	ax
 41185                                  	retn
 41186                                  
 41187                                  ;----------------------------------------------------------------------------
 41188                                  ;
 41189                                  ; FindBadCode
 41190                                  ;
 41191                                  ; Searches Rational code segment looking for a pair of find strings (all
 41192                                  ; patches have at least two find strings).
 41193                                  ;
 41194                                  ; Entry:
 41195                                  ;	ES    = code segment to search
 41196                                  ;	DS:BX = search pair structure for this search
 41197                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41198                                  ;
 41199                                  ; Exit:
 41200                                  ;	CY flag clear if both strings found, and
 41201                                  ;	SI    = offset in ES of 1st string
 41202                                  ;	DI    = offset in ES of 2nd string
 41203                                  ;	CY set if either string not found, or strings too far apart
 41204                                  ;
 41205                                  ; Used:
 41206                                  ;	CX
 41207                                  ;
 41208                                  ;----------------------------------------------------------------------------
 41209                                  
 41210                                  ;struc SearchPair
 41211                                  ; .sp_off1: resw 1	; offset of 1st search string
 41212                                  ; .sp_len1: resw 1	; length of 1st search string
 41213                                  ; .sp_off2: resw 1	; 2nd string
 41214                                  ; .sp_len2: resw 1	; 2nd string
 41215                                  ; .sp_diff: resw 1	; max difference between offsets
 41216                                  ; .size:
 41217                                  ;endstruc
 41218                                  
 41219                                  FindBadCode:
 41220                                  	;mov	cx,[bp+2]
 41221                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41222                                  
 41223                                  	mov	si,[bx]	; mov si,[bx+0]
 41224                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41225                                  	
 41226                                  	;mov	dx,[bx+2]
 41227                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41228                                  	call	ScanCodeSeq
 41229                                  	jnz	short fbc_error		; done if 1st not found
 41230                                  
 41231                                  	push	di			; save 1st string offset
 41232                                  
 41233                                  	;mov	si,[bx+4]
 41234                                  	mov	si,[bx+SearchPair.sp_off2]
 41235                                  	;mov	dx,[bx+6]
 41236                                  	mov	dx,[bx+SearchPair.sp_len2]
 41237                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41238                                  
 41239                                  	pop	si			; restore 1st string offset
 41240                                  	jnz	short fbc_error
 41241                                  
 41242                                  	mov	ax,di			; sanity check that
 41243                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41244                                  	jc	short fbc_error
 41245                                  	;cmp	ax,[bx+8]
 41246                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41247                                  	ja	short fbc_error
 41248                                  
 41249                                  	clc
 41250                                  	retn
 41251                                  
 41252                                  fbc_error:
 41253                                  	stc
 41254                                  	retn
 41255                                  
 41256                                  ;----------------------------------------------------------------------------
 41257                                  ;
 41258                                  ; GenPatch
 41259                                  ;
 41260                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41261                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41262                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41263                                  ; code.
 41264                                  ;
 41265                                  ; Entry:
 41266                                  ;	ES:DI = start of buggy code to be patched
 41267                                  ;	DX    = length of buggy code to be patched
 41268                                  ;	DS:SI = replacement patch code
 41269                                  ;	CX    = length of replacement patch code
 41270                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41271                                  ;
 41272                                  ; Exit:
 41273                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41274                                  ;
 41275                                  ; Used:
 41276                                  ;	AX, BX, SI, Flags
 41277                                  ;
 41278                                  ;----------------------------------------------------------------------------
 41279                                  
 41280                                  GenPatch:
 41281                                  	push	di			;save offset of buggy code
 41282                                  
 41283                                  	;mov	bx,[bp+4]
 41284                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41285                                  					;jump from buggy code to patch area
 41286                                  	call	GenJump
 41287                                  
 41288                                  	call	CopyPatch		;copy replacement code to patch area
 41289                                  
 41290                                  	pop	bx			;offset of buggy code + buggy code
 41291                                  	add	bx,dx			;  length = return from patch offset
 41292                                  
 41293                                  	call	GenJump 		;jump from patch area back to main-
 41294                                  	;mov	[bp+4],di
 41295                                  	mov	[bp+StackVars.sv_pPatch],di
 41296                                  					;  line code, update patch pointer
 41297                                  	retn
 41298                                  
 41299                                  ;----------------------------------------------------------------------------
 41300                                  ;
 41301                                  ; CopyPatch
 41302                                  ;
 41303                                  ; Copies patch code to patch location.
 41304                                  ;
 41305                                  ; Entry:
 41306                                  ;	DS:SI = patch code to be copied
 41307                                  ;	ES    = segment of code to patch
 41308                                  ;	CX    = length of code to copy
 41309                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41310                                  ;
 41311                                  ; Exit:
 41312                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41313                                  ;
 41314                                  ; Used:
 41315                                  ;	SI, Flags
 41316                                  ;
 41317                                  ;----------------------------------------------------------------------------
 41318                                  
 41319                                  CopyPatch:
 41320                                  	push	cx
 41321                                  	;mov	di,[bp+4]
 41322                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41323                                  	cld
 41324                                  	rep movsb
 41325                                  	pop	cx
 41326                                  	;mov	[bp+4],di
 41327                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41328                                  	retn
 41329                                  
 41330                                  ;----------------------------------------------------------------------------
 41331                                  ;
 41332                                  ; GenJump
 41333                                  ;
 41334                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41335                                  ;
 41336                                  ; Entry:
 41337                                  ;	ES:DI = from location (where to put jmp instruction)
 41338                                  ;	BX    = to location (where to jump to)
 41339                                  ;
 41340                                  ; Exit:
 41341                                  ;	DI = byte after generated jump
 41342                                  ;
 41343                                  ; Used:
 41344                                  ;	AX
 41345                                  ;
 41346                                  ;----------------------------------------------------------------------------
 41347                                  
 41348                                  GenJump:
 41349                                  	mov	al,0E9h		; jmp rel16 opcode
 41350                                  	stosb
 41351                                  
 41352                                  	mov	ax,bx		; calc offset to 'to' location
 41353                                  	sub	ax,di
 41354                                  	sub	ax,2
 41355                                  
 41356                                  	stosw			; output offset
 41357                                  
 41358                                  	retn
 41359                                  
 41360                                  ;----------------------------------------------------------------------------
 41361                                  ;
 41362                                  ; ScanCodeSeq
 41363                                  ;
 41364                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41365                                  ;
 41366                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41367                                  ;
 41368                                  ;----------------------------------------------------------------------------
 41369                                  
 41370                                  ScanCodeSeq:
 41371                                  	mov	di,200h
 41372                                  ScanCodeSeq_di:
 41373                                  	push	cx
 41374                                  	sub	cx,dx
 41375                                  	inc	cx
 41376                                  scsagain:
 41377                                  	push	si
 41378                                  	push	di
 41379                                  	push	cx
 41380                                  	mov	cx,dx
 41381                                  	rep	cmpsb
 41382                                  	pop	cx
 41383                                  	pop	di
 41384                                  	pop	si
 41385                                  	je	short scsfound
 41386                                  	inc	di
 41387                                  	loop	scsagain
 41388                                  scsfound:
 41389                                  	pop	cx
 41390                                  vvexit:		; 18/12/2022
 41391                                  	retn
 41392                                  	
 41393                                  ;----------------------------------------------------------------------------
 41394                                  ;
 41395                                  ; VerifyVersion
 41396                                  ;
 41397                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41398                                  ; from ES:2A.
 41399                                  ;
 41400                                  ;       Entry: AX = binary version number 
 41401                                  ;       Exit : Z flag set if version numbers match
 41402                                  ;
 41403                                  ;----------------------------------------------------------------------------
 41404                                  
 41405                                  VerifyVersion:
 41406                                  	mov	si,[es:2Ah]		; offset of version number
 41407                                  					;  in ascii
 41408                                  	mov	bl,10
 41409                                  	add	si,3			; point to last digit
 41410                                  
 41411                                  	call	VVDigit
 41412                                  	jne	short vvexit
 41413                                  	call	VVDigit
 41414                                  	jne	short vvexit
 41415                                  	cmp	byte [es:si],'.'
 41416                                  	jne	short vvexit
 41417                                  	dec	si
 41418                                  	;call	VVDigit
 41419                                  	; 18/12/2022
 41420                                  	;jmp	short VVDigit
 41421                                  ;vvexit:
 41422                                  	;retn
 41423                                  VVDigit:
 41424                                  	div	bl
 41425                                  	add	ah,'0'
 41426                                  	dec	si
 41427                                  	cmp	[es:si+1],ah
 41428                                  	mov	ah,0			; do not xor or sub we need Z
 41429                                  	retn
 41430                                  
 41431                                  %endif
 41432                                  
 41433                                  ;-----------------------------------------------------------------------
 41434                                  
 41435                                  ; 23/05/2019 - Retro DOS v4.0
 41436                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41437                                  
 41438                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41439                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41440                                  
 41441                                  exepatch_start:	 ; label byte
 41442                                  
 41443                                  	; The following is the code that'll be layed over the buggy unpack
 41444                                  	; code.
 41445                                  str1:
 41446 00007378 06                      	db  06h	  		;push	es		 
 41447 00007379 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41448                                  
 41449                                  first_stop equ	$-str1
 41450                                  			
 41451 0000737B 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41452                                  
 41453                                  first:  ; label	byte
 41454                                  
 41455 0000737D 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41456 0000737F 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41457 00007381 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41458 00007384 57                      	db  57h	    		;push	di
 41459 00007385 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41460 00007388 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41461 0000738A F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41462 0000738C 47                      	db  47h	    		;inc	di			
 41463 0000738D 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41464 0000738F 5F                      	db  5Fh	    		;pop	di
 41465 00007390 58                      	db  58h	    		;pop	ax
 41466                                  
 41467                                  second_stop equ	$-first
 41468                                  
 41469 00007391 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41470                                  
 41471                                  second: ; label	byte
 41472                                  
 41473 00007393 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41474                                  		    		;NextRec:				
 41475 00007395 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41476                                  		    		;norm_agn:				
 41477 00007398 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41478 0000739A F7D0                    	db  0F7h,0D0h		;not	ax		
 41479 0000739C D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41480 0000739E 7413                    	db  74h,13h		;jz	short SI_ok			
 41481 000073A0 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41482 000073A2 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41483 000073A5 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41484 000073A7 7308                    	db  73h,08h		;jnc	short SItoDS			
 41485 000073A9 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41486 000073AB D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41487 000073AD 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41488 000073AF 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41489                                  				;SItoDS: 				
 41490 000073B1 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41491                                  				;SI_ok:					
 41492 000073B3 87F7                    	db  87h,0F7h		;xchg	si,di			
 41493 000073B5 1E                      	db  1Eh			;push	ds			
 41494 000073B6 06                      	db  06h			;push	es			
 41495 000073B7 1F                      	db  1Fh			;pop	ds			
 41496 000073B8 07                      	db  07h			;pop	es			
 41497 000073B9 FECD                    	db  0FEh,0CDh		;dec	ch			
 41498 000073BB 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41499 000073BD AC                      	db  0ACh		;lodsb			
 41500 000073BE 92                      	db  92h			;xchg	dx,ax
 41501 000073BF 4E                      	db  4Eh			;dec	si
 41502 000073C0 AD                      	db  0ADh		;lodsw			
 41503 000073C1 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41504 000073C3 46                      	db  46h			;inc	si		
 41505 000073C4 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41506 000073C6 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41507 000073C8 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41508 000073CA 7505                    	db  75h,05h		;jne	short TryEnum
 41509 000073CC AC                      	db  0ACh		;lodsb				
 41510 000073CD F3AA                    	db  0F3h,0AAh		;rep stosb			
 41511                                  
 41512                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41513 000073CF EB06                    	db  0EBh,06h		;jmp	short TryNext
 41514                                  
 41515                                  				;TryEnum:
 41516 000073D1 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41517 000073D3 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41518 000073D5 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41519                                  				;TryNext:
 41520                                  
 41521 000073D7 92                      	db  92h			;xchg	dx,ax
 41522                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41523                                  
 41524 000073D8 A801                    	db  0A8h,01h		;test	al,1			
 41525 000073DA 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41526 000073DC 9090                    	db  90h,90h		;nop,nop
 41527                                  	
 41528                                  last_stop equ $-second
 41529                                  size_str1 equ $-str1
 41530                                  
 41531                                  	; The following is the code that we need to look for in the exe
 41532                                  	; file.
 41533                                  
 41534                                  scan_patch1: ; label byte
 41535                                  
 41536 000073DE 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41537 000073E0 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41538 000073E2 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41539 000073E4 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41540 000073E6 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41541 000073E8 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41542 000073EB B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41543 000073EE B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41544 000073F0 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41545 000073F2 47                      	db  47h			;inc	di			
 41546 000073F3 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41547 000073F5 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41548 000073F7 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41549 000073F9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41550 000073FB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41551                                  				;NextRec:
 41552 000073FE B104                    	db  0B1h,04h		;mov	cl,4
 41553 00007400 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41554 00007402 F7D0                    	db  0F7h,0D0h		;not	ax		
 41555 00007404 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41556 00007406 7409                    	db  74h,09h		;jz	short SI_ok
 41557 00007408 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41558 0000740A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41559 0000740C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41560 0000740E 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41561                                  	       			;SI_ok:
 41562 00007411 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41563 00007413 F7D0                    	db  0F7h,0D0h		;not	ax
 41564 00007415 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41565 00007417 7409                    	db  74h,09h		;jz	short DI_ok
 41566 00007419 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41567 0000741B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41568 0000741D 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41569 0000741F 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41570                                  				;DI_ok:
 41571                                  
 41572                                  size_scan_patch1 equ $-scan_patch1
 41573                                  
 41574                                  scan_patch2: ; label byte
 41575                                  			
 41576 00007422 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41577 00007424 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41578 00007426 48                      	db  48h			;dec	ax
 41579 00007427 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41580 00007429 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41581 0000742B BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41582 0000742E B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41583 00007431 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41584 00007433 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41585 00007435 47                      	db  47h			;inc	di			
 41586 00007436 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41587 00007438 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41588 0000743A 48                      	db  48h			;dec	ax
 41589 0000743B 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41590 0000743D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41591                                  				;NextRec:
 41592 00007440 B104                    	db  0B1h,04h		;mov	cl,4
 41593 00007442 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41594 00007444 F7D0                    	db  0F7h,0D0h		;not	ax		
 41595 00007446 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41596 00007448 740A                    	db  74h,0Ah		;jz	short SI_ok
 41597 0000744A 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41598 0000744C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41599 0000744E 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41600 00007450 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41601                                  				;or	si,0FFF0H
 41602                                  				;SI_ok:
 41603 00007454 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41604 00007456 F7D0                    	db  0F7h,0D0h		;not	ax
 41605 00007458 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41606 0000745A 740A                    	db  74h,0Ah		;jz	short DI_ok
 41607 0000745C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41608 0000745E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41609 00007460 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41610 00007462 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41611                                  				;or	di,0FFF0H
 41612                                  				;DI_ok:
 41613                                  
 41614                                  size_scan_patch2 equ $-scan_patch2
 41615                                  
 41616                                  scan_patch3: ; label byte
 41617                                  
 41618 00007466 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41619 00007468 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41620 0000746A 48                      	db  48h			;dec	ax
 41621 0000746B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41622 0000746D 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41623 0000746F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41624 00007472 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41625 00007475 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41626 00007477 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41627 00007479 47                      	db  47h			;inc	di			
 41628 0000747A 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41629 0000747C 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41630 0000747E 48                      	db  48h			;dec	ax
 41631 0000747F 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41632 00007481 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41633                                  				;NextRec:
 41634 00007484 B104                    	db  0B1h,04h		;mov	cl,4
 41635 00007486 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41636 00007488 F7D0                    	db  0F7h,0D0h		;not	ax		
 41637 0000748A D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41638 0000748C 7409                    	db  74h,09h		;jz	short SI_ok
 41639 0000748E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41640 00007490 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41641 00007492 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41642 00007494 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41643                                  				;SI_ok:
 41644 00007497 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41645 00007499 F7D0                    	db  0F7h,0D0h		;not	ax
 41646 0000749B D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41647 0000749D 7409                    	db  74h,09h		;jz	short DI_ok
 41648 0000749F 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41649 000074A1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41650 000074A3 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41651 000074A5 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41652                                  				;DI_ok:
 41653                                  
 41654                                  size_scan_patch3 equ $-scan_patch3
 41655                                  
 41656                                  scan_com: ; label byte
 41657                                  
 41658 000074A8 AC                      	db  0ACh		;lodsb			
 41659 000074A9 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41660 000074AB 4E                      	db  4Eh			;dec	si
 41661 000074AC AD                      	db  0ADh		;lodsw			
 41662 000074AD 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41663 000074AF 46                      	db  46h			;inc	si		
 41664 000074B0 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41665 000074B2 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41666 000074B4 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41667 000074B6 7506                    	db  75h,06h		;jne	short TryEnum
 41668 000074B8 AC                      	db  0ACh		;lodsb				
 41669 000074B9 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41670 000074BB EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41671                                  				;TryEnum:
 41672 000074BE 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41673 000074C0 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41674 000074C2 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41675                                  				;TryNext:
 41676 000074C4 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41677 000074C6 A801                    	db  0A8h,01h		;test	al,1			
 41678                                  ;	db  74h,0BAh		;jz	short NextRec			
 41679                                  
 41680                                  size_scan_com	equ	$-scan_com
 41681                                  
 41682                                  ;-----------------------------------------------------------------------
 41683                                  
 41684                                  ; 23/05/2019 - Retro DOS v4.0
 41685                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41686                                  
 41687                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41688                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41689                                  
 41690                                  ExePatch:
 41691                                  	; 28/12/2022 - Retro DOS v4.1
 41692                                  	;call	ExePackPatch
 41693                                  	;;call	word [ss:RationalPatchPtr]
 41694                                  	;retn
 41695                                  	; 28/12/2022
 41696                                  	;jmp	short ExePackPatch
 41697                                  
 41698                                  ;-----------------------------------------------------------------------
 41699                                  ;
 41700                                  ; Procedure Name 	: ExePackPatch
 41701                                  ;
 41702                                  ; Inputs	 	: DS 			-> DOSDATA
 41703                                  ;			  ES:0 			-> read in image
 41704                                  ;			  ax:cx = start cs:ip of program
 41705                                  ; Output		:		
 41706                                  ;
 41707                                  ;	1. If ES <= 0fffh
 41708                                  ;	   2. if exepack signature ('RB') found
 41709                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41710                                  ;	       	 4. if rest of the code & checksum compares
 41711                                  ;	  	    5. overlay buggy code with code in 
 41712                                  ;		       doscode:str1.
 41713                                  ;		 6. endif
 41714                                  ;	      7. endif
 41715                                  ;	   8. endif
 41716                                  ;	9. endif
 41717                                  ;
 41718                                  ;
 41719                                  ; Uses			: NONE
 41720                                  ;
 41721                                  ;-----------------------------------------------------------------------
 41722                                  		
 41723                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41724                                  	; 23/05/2019 - Retro DOS v4.0	
 41725                                  ExePackPatch:
 41726 000074C8 53                      	push	bx
 41727 000074C9 8CC3                    	mov	bx,es			; bx has load segment
 41728 000074CB 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41729 000074CF 7602                    	jbe	short ep_cont		; N: 
 41730 000074D1 5B                      	pop	bx			; Y: no need to patch
 41731 000074D2 C3                      	retn
 41732                                  ep_cont:
 41733 000074D3 1E                      	push	ds
 41734 000074D4 06                      	push	es
 41735 000074D5 50                      	push	ax
 41736 000074D6 51                      	push	cx
 41737 000074D7 56                      	push	si
 41738 000074D8 57                      	push	di
 41739                                  	
 41740                                  		; M033 - start
 41741                                  		; exepacked programs have an IP of 12h (>=2)
 41742                                  
 41743 000074D9 83E902                  	sub	cx,2			; Q: is IP >=2 
 41744 000074DC 7303                    	jnb	short epp_1		; N: exit
 41745 000074DE E9C500                  	jmp	ep_notpacked
 41746                                  					; ax:cx now points to location of
 41747                                  					; 'RB' if this is an exepacked file.
 41748                                  		; M033 - end
 41749                                  epp_1:
 41750 000074E1 89CF                    	mov	di,cx
 41751 000074E3 8EC0                    	mov	es,ax
 41752 000074E5 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41753                                  					; unpack_offset
 41754                                  
 41755 000074EA 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41756                                  	;ljne	ep_notpacked
 41757 000074EF 7403                    	je	short epp_2
 41758 000074F1 E9B200                  	jmp	ep_notpacked
 41759                                  epp_2:
 41760 000074F4 0E                      	push	cs
 41761 000074F5 1F                      	pop	ds			; set ds to cs
 41762                                  
 41763                                  	;add	di,6Ch
 41764 000074F6 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41765                                  					;          file where we hope to find
 41766                                  					;	   scan string. 
 41767                                  
 41768 000074F9 E8B200                  	call	chk_common_str		; check for match
 41769                                  
 41770 000074FC 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41771                                  					; N: check at patch2_offset
 41772                                  					; Y: check for rest of patch string
 41773 000074FE BE[DE73]                	mov	si,scan_patch1
 41774                                  					; ds:si -> scan string 
 41775 00007501 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41776                                  
 41777                                  	;add	di,28h
 41778                                  	; 07/12/2022
 41779 00007506 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41780                                  					;          file where we hope to find
 41781                                  					;	   scan string. 
 41782                                  	;mov	cx,68
 41783 00007509 B94400                  	mov	cx,size_scan_patch1
 41784                                  	;mov	bx,142
 41785 0000750C BB8E00                  	mov	bx,CHKSUM1_LEN
 41786                                  	;mov	ax,0EF4Eh
 41787 0000750F B84EEF                  	mov	ax,PATCH1_CHKSUM
 41788 00007512 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41789 00007515 7208                    	jc	short ep_done1		; Q: did we pass the test
 41790                                  					; N: exit
 41791                                  					; Y: overlay code with new 
 41792 00007517 BE[7873]                	mov	si,str1
 41793                                  	;mov	cx,102
 41794 0000751A B96600                  	mov	cx,size_str1
 41795                                  	
 41796 0000751D F3A4                    	rep	movsb
 41797                                  ep_done1:
 41798 0000751F E98400                  	jmp	ep_done
 41799                                  
 41800                                  ep_chkpatch2:
 41801                                  	;mov	di,76h
 41802 00007522 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41803                                  					; in another version of unpack
 41804 00007525 E88600                  	call	chk_common_str		; check for match
 41805                                  
 41806 00007528 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41807                                  					; N: check for patch3_offset
 41808                                  					; Y: check for rest of patch string
 41809                                  
 41810 0000752A BE[2274]                	mov	si,scan_patch2
 41811                                  					; ds:si -> scan string 
 41812                                  	;mov	di,32h
 41813 0000752D BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41814                                  					;          file where we hope to find
 41815                                  	;mov	cx,68			;	   scan string. 
 41816 00007530 B94400                  	mov	cx,size_scan_patch2
 41817                                  	;mov	bx,140
 41818 00007533 BB8C00                  	mov	bx,CHKSUM2_LEN
 41819                                  	;mov	ax,78B2h
 41820 00007536 B8B278                  	mov	ax,PATCH2_CHKSUM
 41821 00007539 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41822                                  
 41823                                  					; M046 - Start
 41824                                  					; Q: did we pass the test
 41825 0000753C 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41826                                  					; N: try with a different chksum
 41827                                  
 41828 0000753E BE[2274]                	mov	si,scan_patch2
 41829                                  					; ds:si -> scan string 
 41830                                  	;mov	cx,68
 41831 00007541 B94400                  	mov	cx,size_scan_patch2
 41832                                  	;mov	bx,129
 41833 00007544 BB8100                  	mov	bx,CHKSUM2A_LEN
 41834                                  	;mov	ax,1C47h
 41835 00007547 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41836 0000754A E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41837                                  					; Q: did we pass the test
 41838 0000754D 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41839                                  					; Y: overlay code with new 
 41840                                  						
 41841                                  ep_patchcode2:			       	; M046 - End
 41842 0000754F BE[7873]                	mov	si,str1
 41843                                  	;mov	cx,3
 41844 00007552 B90300                  	mov	cx,first_stop
 41845 00007555 F3A4                    	rep	movsb
 41846 00007557 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41847 0000755A AB                      	stosw
 41848 0000755B 83C602                  	add	si,2
 41849                                  	;mov	cx,20
 41850 0000755E B91400                  	mov	cx,second_stop
 41851 00007561 F3A4                    	rep	movsb
 41852 00007563 AB                      	stosw				; put in dec ax and nop
 41853 00007564 83C602                  	add	si,2
 41854                                  	;mov	cx,75
 41855 00007567 B94B00                  	mov	cx,last_stop
 41856 0000756A F3A4                    	rep	movsb
 41857 0000756C EB38                    	jmp	short ep_done
 41858                                  
 41859                                  ep_chkpatch3:
 41860                                  	;mov	di,74h
 41861 0000756E BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41862                                  					; in another version of unpack
 41863 00007571 E83A00                  	call	chk_common_str		; check for match
 41864                                  
 41865 00007574 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41866                                  					; N: exit
 41867                                  					; Y: check for rest of patch string
 41868 00007576 BE[6674]                	mov	si,scan_patch3
 41869                                  					; ds:si -> scan string 
 41870                                  	;mov	di,32h
 41871 00007579 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41872                                  					;          file where we hope to find
 41873                                  					;	   scan string. 
 41874                                  	;mov	cx,66
 41875 0000757C B94200                  	mov	cx,size_scan_patch3
 41876                                  	;mov	bx,139
 41877 0000757F BB8B00                  	mov	bx,CHKSUM3_LEN
 41878                                  	;mov	ax,4EDEh
 41879 00007582 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41880 00007585 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41881 00007588 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41882                                  					; N: exit
 41883                                  					; Y: overlay code with new 
 41884 0000758A BE[7873]                	mov	si,str1
 41885                                  	;mv	cx,3
 41886 0000758D B90300                  	mov	cx,first_stop
 41887 00007590 F3A4                    	rep	movsb
 41888 00007592 B048                    	mov	al,48h			; al = opcode for dec ax
 41889 00007594 AA                      	stosb
 41890 00007595 83C602                  	add	si,2
 41891                                  	;mov	cx,20
 41892 00007598 B91400                  	mov	cx,second_stop
 41893 0000759B F3A4                    	rep	movsb
 41894 0000759D AA                      	stosb				; put in dec ax
 41895 0000759E 83C602                  	add	si,2
 41896                                  	;mov	cx,75
 41897 000075A1 B94B00                  	mov	cx,last_stop
 41898 000075A4 F3A4                    	rep	movsb
 41899                                  
 41900                                  ep_notpacked:
 41901                                  	;stc
 41902                                  ep_done:
 41903 000075A6 5F                      	pop	di
 41904 000075A7 5E                      	pop	si
 41905 000075A8 59                      	pop	cx
 41906 000075A9 58                      	pop	ax
 41907 000075AA 07                      	pop	es
 41908 000075AB 1F                      	pop	ds
 41909 000075AC 5B                      	pop	bx
 41910 000075AD C3                      	retn
 41911                                  
 41912                                  ;-------------------------------------------------------------------------
 41913                                  ;
 41914                                  ; 	Procedure Name	: chk_common_str
 41915                                  ;
 41916                                  ;	Input		: DS = DOSCODE
 41917                                  ;			; ES:DI points to string in packed file
 41918                                  ;
 41919                                  ;	Output		; Z if match else NZ
 41920                                  ;
 41921                                  ;-------------------------------------------------------------------------
 41922                                  
 41923                                  	; 23/05/2019 - Retro DOS v4.0
 41924                                  chk_common_str:
 41925 000075AE BE[A874]                	mov	si,scan_com
 41926                                  					; ds:si -> scan string 
 41927                                  	;mov	cx,32
 41928 000075B1 B92000                  	mov	cx,size_scan_com
 41929                                  
 41930 000075B4 F3A6                    	repe	cmpsb	       
 41931                                  
 41932                                  					; M046 - start
 41933                                  	; a fourth possible version of these exepacked programs have a 
 41934                                  	; 056h instead of 06Bh. See scan_com above
 41935                                  	;
 41936                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41937                                  	;
 41938                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41939                                  	; we shall try to match the rest of the string
 41940                                  	;
 41941                                  
 41942 000075B6 7409                    	jz	short ccs_done
 41943 000075B8 26807DFF56              	cmp	byte [es:di-1],56h
 41944 000075BD 7502                    	jnz	short ccs_done
 41945                                  
 41946 000075BF F3A6                    	repe	cmpsb	    
 41947                                  ccs_done:				; M046 - end
 41948 000075C1 C3                      	retn
 41949                                  
 41950                                  ;-------------------------------------------------------------------------
 41951                                  ;
 41952                                  ;	Procedure Name	: chk_patchsum
 41953                                  ;
 41954                                  ;	Input		: DS:SI -> string we're looking for
 41955                                  ;			: ES:DI -> offset in packed file
 41956                                  ;			: CX 	= scan length
 41957                                  ;			: BX	= length of check sum
 41958                                  ;			: AX 	= value of check sum
 41959                                  ;
 41960                                  ;	Output		: if patch & check sum compare
 41961                                  ;				NC
 41962                                  ;			  else
 41963                                  ;				CY
 41964                                  ;
 41965                                  ;	Uses		: AX, BX, CX, SI
 41966                                  ;
 41967                                  ;-------------------------------------------------------------------------
 41968                                  
 41969                                  	; 23/05/2019 - Retro DOS v4.0
 41970                                  chk_patchsum:
 41971 000075C2 57                      	push	di
 41972                                  
 41973 000075C3 F3A6                    	repe	cmpsb			   
 41974                                  
 41975 000075C5 7518                    	jnz	short cp_fail		; Q: does the patch match
 41976                                  					; N: exit
 41977                                  					; Y:	
 41978                                  
 41979                                  		; we do a check sum starting from the location of the 
 41980                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41981                                  		; unpacking code.
 41982                                  
 41983 000075C7 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41984 000075CC 89D9                    	mov	cx,bx			; cx = length of check sum
 41985                                  
 41986 000075CE 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41987 000075D0 31C0                    	xor	ax,ax
 41988                                  ep_chksum:
 41989 000075D2 260305                  	add	ax,[es:di]
 41990 000075D5 83C702                  	add	di,2
 41991 000075D8 E2F8                    	loop	ep_chksum
 41992                                  
 41993 000075DA 5F                      	pop	di			; restore di
 41994                                  
 41995 000075DB 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41996                                  	;jne	short cp_fail		; N: exit
 41997                                  					; Y: 
 41998                                  	; 25/09/2023
 41999                                  	;clc	
 42000                                  	;retn
 42001 000075DD 74E2                    	je	short ccs_done ; cf=0
 42002                                  	
 42003                                  cp_fail:
 42004 000075DF F9                      	stc
 42005 000075E0 C3                      	retn
 42006                                  
 42007                                  ; 28/12/2022 - Retro DOS v4.1
 42008                                  %if 0
 42009                                  ;--------------------------------------------------------------------------- 
 42010                                  
 42011                                  
 42012                                  ; M020 : BEGIN
 42013                                  ;
 42014                                  ;---------------------------------------------------------------------------
 42015                                  ;
 42016                                  ; procedure : RationalPatch
 42017                                  ;
 42018                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42019                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42020                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42021                                  ;
 42022                                  ; THE BUG is in the following code sequence:
 42023                                  ;
 42024                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42025                                  ;90		even				; word align
 42026                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42027                                  ;e8 xx xx	call	set_A20			; enable A20
 42028                                  ;
 42029                                  ; This patch routine replaces the mov & the loop with a far call into a
 42030                                  ; routine in DOS data segment which is in low memory (because A20 line
 42031                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42032                                  ; a mov & loop.
 42033                                  ;
 42034                                  ; Identification of Buggy Rational EXE
 42035                                  ; ====================================
 42036                                  ;
 42037                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42038                                  ;
 42039                                  ; OFFSET				Contains
 42040                                  ; ------				--------
 42041                                  ; 0000h			100 times Version number in binary
 42042                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42043                                  ;
 42044                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42045                                  ;
 42046                                  ; 002ah			offset where version number is stored in ASCII
 42047                                  ;				e.g. '3.48A'
 42048                                  ;
 42049                                  ; 0030h			offset of copyright string. Copyright strings either
 42050                                  ;			start with "DOS/16M Copyright...." or
 42051                                  ;			"Copyright.....". The string contains
 42052                                  ;			"Rational Systems, Inc."
 42053                                  ;
 42054                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42055                                  ;				from the program image
 42056                                  ; 0016h			word : size of buggy code segment
 42057                                  ;
 42058                                  ;	Buggy code is definite to start after offset 200h in its segment
 42059                                  ;
 42060                                  ;----------------------------------------------------------------------------
 42061                                  
 42062                                  ; 23/05/2019 - Retro DOS v4.0
 42063                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42064                                  
 42065                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42066                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42067                                  
 42068                                  RScanPattern1:
 42069                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42070                                  
 42071                                  RLen1 equ $ - RScanPattern1
 42072                                  
 42073                                  RScanPattern2:
 42074                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42075                                  
 42076                                  RLen2 equ $ - RScanPattern2
 42077                                  
 42078                                  RScanPattern3:
 42079                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42080                                  
 42081                                  RLen3 equ $ - RScanPattern2
 42082                                  
 42083                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42084                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42085                                  
 42086                                  ;----------------------------------------------------------------------------
 42087                                  ;
 42088                                  ; INPUT : ES = segment where program got loaded
 42089                                  ;
 42090                                  ;----------------------------------------------------------------------------
 42091                                  
 42092                                  RationalPatch:
 42093                                  	cld
 42094                                  	push	ax
 42095                                  	push	bx
 42096                                  	push	cx
 42097                                  	push	dx
 42098                                  	push	si
 42099                                  	push	di
 42100                                  	push	es
 42101                                  	push	ds			; we use all of them
 42102                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42103                                  	push	cs
 42104                                  	pop	ds
 42105                                  	
 42106                                  	mov	si,RScanPattern1
 42107                                  	;mov	cx,10
 42108                                  	mov	cx,RLen1
 42109                                  	rep	cmpsb			; do we have the pattern ?
 42110                                  	jne	short rpexit
 42111                                  	mov	ax,[es:0]
 42112                                  	cmp	ax,348			; is it a buggy version ?
 42113                                  	jb	short rpexit
 42114                                  	cmp	ax,383			; is it a buggy version
 42115                                  	ja	short rpexit
 42116                                  
 42117                                  	call	VerifyVersion
 42118                                  	jne	short rpexit
 42119                                  
 42120                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42121                                  	sub	cx,200h			; Length we search (we start
 42122                                  					;  at offset 200h)
 42123                                  	mov	es,[es:20h]		; es=buggy code segment
 42124                                  	mov	si,RScanPattern2
 42125                                  	;mov	dx,8	
 42126                                  	mov	dx,RLen2
 42127                                  	call	ScanCodeSeq		; look for code seq with nop
 42128                                  	jz	short rpfound
 42129                                  
 42130                                  	mov	si,RScanPattern3
 42131                                  	;mov	dx,15
 42132                                  	mov	dx,RLen3
 42133                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42134                                  	jnz	short rpexit
 42135                                  
 42136                                  rpfound:
 42137                                  	
 42138                                  ;	we set up a far call into DOS data
 42139                                  ;	dx has the length of the code seq we were searching for
 42140                                  
 42141                                  	mov	al,9Ah			; far call opcode
 42142                                  	stosb
 42143                                  	mov	ax,RatBugCode
 42144                                  	stosw
 42145                                  	mov	ax,ss
 42146                                  	stosw
 42147                                  	mov	cx,dx
 42148                                  	sub	cx,6			; filler (with NOPs)
 42149                                  	mov	al,90h
 42150                                  	rep	stosb
 42151                                  rpexit:
 42152                                  	pop	ds
 42153                                  	pop	es
 42154                                  	pop	di
 42155                                  	pop	si
 42156                                  	pop	dx
 42157                                  	pop	cx
 42158                                  	pop	bx
 42159                                  	pop	ax
 42160                                  	retn
 42161                                  
 42162                                  ; M020 END
 42163                                  
 42164                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42165                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42166                                  
 42167                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42168                                  
 42169                                  ;----------------------------------------------------------------------------
 42170                                  ;
 42171                                  ; ScanCodeSeq
 42172                                  ;
 42173                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42174                                  ;
 42175                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42176                                  ;
 42177                                  ;----------------------------------------------------------------------------
 42178                                  
 42179                                  ScanCodeSeq:
 42180                                  	; 17/12/2022
 42181                                  	mov	di,200h
 42182                                  ;ScanCodeSeq_di:
 42183                                  	push	cx
 42184                                  	sub	cx,dx
 42185                                  	inc	cx
 42186                                  	; 17/12/2022
 42187                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42188                                  	;mov	di,200h
 42189                                  scsagain:
 42190                                  	push	si
 42191                                  	push	di
 42192                                  	push	cx
 42193                                  	mov	cx,dx
 42194                                  	rep	cmpsb
 42195                                  	pop	cx
 42196                                  	pop	di
 42197                                  	pop	si
 42198                                  	je	short scsfound
 42199                                  	inc	di
 42200                                  	loop	scsagain
 42201                                  scsfound:
 42202                                  	pop	cx
 42203                                  vvexit:		; 18/12/2022
 42204                                  	retn
 42205                                  
 42206                                  
 42207                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42208                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42209                                  
 42210                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42211                                  
 42212                                  ;----------------------------------------------------------------------------
 42213                                  ;
 42214                                  ; VerifyVersion
 42215                                  ;
 42216                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42217                                  ; from ES:2A.
 42218                                  ;
 42219                                  ;       Entry: AX = binary version number 
 42220                                  ;       Exit : Z flag set if version numbers match
 42221                                  ;
 42222                                  ;----------------------------------------------------------------------------
 42223                                  
 42224                                  VerifyVersion:
 42225                                  	mov	si,[es:2Ah]		; offset of version number
 42226                                  					;  in ascii
 42227                                  	mov	bl,10
 42228                                  	add	si,3			; point to last digit
 42229                                  
 42230                                  	call	VVDigit
 42231                                  	jne	short vvexit
 42232                                  	call	VVDigit
 42233                                  	jne	short vvexit
 42234                                  	cmp	byte [es:si],'.' ; 2Eh
 42235                                  	jne	short vvexit
 42236                                  	dec	si
 42237                                  	;call	VVDigit
 42238                                  	; 18/12/2022
 42239                                  	;jmp	short VVDigit
 42240                                  ;vvexit:
 42241                                  	;retn
 42242                                  VVDigit:
 42243                                  	div	bl
 42244                                  	add	ah,'0' ; 30h
 42245                                  	dec	si
 42246                                  	cmp	[es:si+1],ah
 42247                                  	mov	ah,0			; do not xor or sub we need Z
 42248                                  	retn
 42249                                  
 42250                                  ;--------------------------------------------------------------------------- 
 42251                                  %endif	; 28/12/2022
 42252                                  
 42253                                  ;---------------------------------------------------------------------------
 42254                                  ;
 42255                                  ;	M068
 42256                                  ;
 42257                                  ; 	Procedure Name	: IsCopyProt
 42258                                  ;
 42259                                  ;	Inputs		: DS:100 -> start of com file just read in
 42260                                  ;
 42261                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42262                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42263                                  ;			  copy protect scheme that relies on the A20 line
 42264                                  ;			  being turned off for it's scheme to work.
 42265                                  ;
 42266                                  ;			  Note: The int 21 function dispatcher will turn 
 42267                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42268                                  ;				and dec the A20OFF_COUNT before	iretting 
 42269                                  ;				to the user. 
 42270                                  ;
 42271                                  ;	Uses		: ES, DI, SI, CX
 42272                                  ;
 42273                                  ;---------------------------------------------------------------------------
 42274                                  
 42275                                  ; 23/05/2019 - Retro DOS v4.0
 42276                                  
 42277                                  CPStartOffset	EQU	0175h
 42278                                  CPID1Offset	EQU	011Bh
 42279                                  CPID2Offset	EQU	0173h
 42280                                  CPID3Offset	EQU	0146h
 42281                                  CPID4Offset	EQU	0124h
 42282                                  ID1		EQU	05343h
 42283                                  ID2		EQU	05044h
 42284                                  ID3		EQU	0F413h
 42285                                  ID4		EQU	08000h
 42286                                  
 42287                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42288                                  
 42289                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42290                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42291                                  
 42292                                  CPScanPattern:
 42293 000075E1 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42294 000075E5 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42295 000075E9 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42296 000075EF 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42297 000075F3 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42298 000075F6 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42299                                  
 42300                                  CPSPlen	EQU $ - CPScanPattern
 42301                                  
 42302                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42303                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42304                                  
 42305                                  IsCopyProt:
 42306 000075F9 813E1B014353            	cmp	word [CPID1Offset],ID1
 42307 000075FF 752D                    	jne	short CP_done
 42308                                  
 42309 00007601 813E73014450            	cmp	word [CPID2Offset],ID2
 42310 00007607 7525                    	jne	short CP_done
 42311                                  
 42312 00007609 813E460113F4            	cmp	word [CPID3Offset],ID3
 42313 0000760F 751D                    	jne	short CP_done
 42314                                  
 42315 00007611 813E24010080            	cmp	word [CPID4Offset],ID4
 42316 00007617 7515                    	jne	short CP_done
 42317                                  
 42318 00007619 0E                      	push	cs
 42319 0000761A 07                      	pop	es
 42320 0000761B BF[E175]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42321                                  
 42322 0000761E BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42323                                  					; of pattern
 42324                                  
 42325 00007621 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42326 00007624 F3A6                    	repe	cmpsb
 42327 00007626 7506                    	jnz	short CP_done
 42328                                  
 42329 00007628 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42330                                  CP_done:
 42331 0000762E C3                      	retn
 42332                                  	
 42333                                  ;DOSCODE ENDS
 42334                                  
 42335                                  	;END
 42336                                  
 42337                                  ;----------------------------------------------------------------------------
 42338                                  
 42339                                  ;align 2 ; 05/09/2018 (Error!)
 42340                                  
 42341                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42342                                  ;align 16 ; 08/09/2018 (OK.)
 42343 0000762F 90                      align 2
 42344                                  
 42345                                  ; 06/08/2018 - Retro DOS v3.0
 42346                                  ;============================================================================
 42347                                  ; MSINIT.ASM
 42348                                  ;============================================================================
 42349                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42350                                  ;
 42351                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42352                                  ;
 42353                                  	; 15/07/2018 - Retro DOS v3.0
 42354                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42355                                  
 42356                                  ; temp iret instruction
 42357                                  
 42358                                  
 42359                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42360                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42361                                  
 42362                                  initiret: ; MSDOS 6.0
 42363                                  SYSBUF:
 42364                                  ;IRETT: ; 06/05/2019
 42365 00007630 CF                      	iret
 42366                                  
 42367                                  ; 22/04/2019 - Retro DOS v4.0
 42368                                  
 42369                                  ; pointer to the BIOS data segment that will be available just to the
 42370                                  ; initialization code
 42371                                  
 42372 00007631 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42373                                  
 42374                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42375                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42376                                  
 42377                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42378                                  
 42379                                  ParaRound:
 42380 00007633 83C00F                  	add	ax, 15
 42381 00007636 D1D8                    	rcr	ax, 1
 42382 00007638 D1E8                    	shr	ax, 1
 42383 0000763A D1E8                    	shr	ax, 1
 42384 0000763C D1E8                    	shr	ax, 1
 42385 0000763E C3                      	retn
 42386                                  
 42387                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42388                                  
 42389                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42390                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42391                                  	
 42392                                  	; 30/05/2019
 42393                                  	; 22/04/2019 - Retro DOS v4.0
 42394                                  	; 07/07/2018 - Retro DOS v3.0
 42395                                  	; Retro DOS v2.0 - 03/03/2018
 42396                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42397                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42398                                  DOSINIT:
 42399                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42400                                  	;
 42401                                  	; Far call from SYSINIT
 42402                                  	; DX = Memory size in paragraphs
 42403                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42404                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42405                                  	;
 42406                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42407                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42408                                  
 42409 0000763F FA                              CLI
 42410 00007640 FC                              CLD
 42411                                  
 42412                                  	; 03/11/2022
 42413                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42414                                  	
 42415                                  	; 17/12/2022
 42416                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42417                                  	;push	dx ; =*=		; save parameters from BIOS
 42418                                  	
 42419 00007641 56                      	push	si
 42420 00007642 1E                      	push	ds
 42421 00007643 57                      	push	di			;save di (ptr to BiosComBlock)
 42422                                  
 42423 00007644 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42424                                  
 42425                                  ; First, move the DOS data segment to its final location in low memory
 42426                                  
 42427                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42428                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42429 00007646 B8[C07A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42430                                  
 42431                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42432                                  	;and	ax,~15	; 0FFF0h	; boundary
 42433                                  
 42434                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42435                                  					; code segment
 42436                                  
 42437                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42438 00007649 83C00F                  	add	ax,15			; round to nearest paragraph
 42439 0000764C 83E0F0                  	and	ax,~15			; boundary
 42440                                  
 42441 0000764F 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42442                                  					; code segment
 42443                                  	; 05/12/2022
 42444                                  	; 30/04/2019 - Retro DOS v4.0
 42445                                  	;xor	si,si
 42446                                  	
 42447 00007651 8CC8                    	mov	ax,cs
 42448 00007653 8ED8                    	mov	ds,ax			; ds = current code segment
 42449                                  					; DS:SI now points to dosdata
 42450                                  
 42451                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42452                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42453                                  					;  BData segment. Cannot use
 42454                                  					;  getdseg macro here!!!
 42455                                  	; 17/12/2022
 42456 00007655 8E06[3176]              	mov	es,[InitBioDataSeg]
 42457                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42458                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42459                                  
 42460                                  	;mov	es,[es:3]
 42461 00007659 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42462                                  
 42463 0000765E 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42464                                  
 42465                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42466                                  	;mov	cx,4976  ; 25/05/2019
 42467                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42468                                  	;mov	cx,4962
 42469                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42470 00007660 B9A512                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42471 00007663 F3A4                    	rep	movsb			; move data to final location
 42472                                  	
 42473 00007665 5F                      	pop	di			; restore ptr to BiosComBlock
 42474 00007666 1F                      	pop	ds			; restore parms from BIOS
 42475 00007667 5E                      	pop	si
 42476                                  	; 17/12/2022
 42477                                  	;pop	dx ; 30/05/2019	
 42478                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42479                                  	;pop	dx ; =*=		
 42480                                  
 42481 00007668 06                      	push	es
 42482 00007669 1E                      	push	ds
 42483 0000766A 07                      	pop	es			; es:si -> device chain
 42484 0000766B 1F                      	pop	ds			; ds points to dosdata
 42485                                  
 42486                                  ;SR;
 42487                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42488                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42489                                  ;lie table handling for device drivers. This can be expanded later on to
 42490                                  ;establish a communication block from the BIOS to the DOS.
 42491                                  
 42492                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42493                                  	;mov	[1042h],bx
 42494 0000766C 893E[4010]              	mov	[BiosDataPtr],di
 42495 00007670 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42496                                  
 42497 00007674 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42498                                  
 42499                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42500                                  
 42501 00007679 2E8C1E[2850]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42502 0000767E 2E8C1E[2C50]            	mov	[cs:LowInt24Addr+2],ds
 42503 00007683 2E8C1E[3050]            	mov	[cs:LowInt28Addr+2],ds
 42504                                  
 42505                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42506                                  	;mov	[584h],sp
 42507                                  	;mov	[586h],ss
 42508 00007688 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42509 0000768C 8926[8405]              	mov	[USER_SP],sp
 42510 00007690 8C16[8605]              	mov	[USER_SS],ss
 42511                                  
 42512 00007694 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42513 00007696 8ED0                    	mov	ss,ax
 42514                                  
 42515                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42516                                  	;mov	sp,offset dosdata:dskstack
 42517 00007698 BC[2009]                	mov	sp,DSKSTACK
 42518                                  
 42519                                  ;M023
 42520                                  ; Init patch ptrs to default values
 42521                                  
 42522                                  	;mov	word [1212h],RetExePatch
 42523                                  	;mov	word [1214h],RetExePatch
 42524                                  	;mov	word [61h],RetExePatch
 42525 0000769B C706[F311][9A61]        	mov	word [FixExePatch],RetExePatch	; M023
 42526                                  	; 28/12/2022 - Retro DOS v4.1
 42527                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42528 000076A1 C706[6100][9A61]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42529                                  
 42530                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42531                                  %if 0	; 19/09/2023
 42532                                  
 42533                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42534                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42535                                  ; running in the HMA.
 42536                                  
 42537                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42538                                  	cmp	al,2		;   386 or later?
 42539                                  	mov	ax,Rational386Patch
 42540                                  	jae	short di_set_patch
 42541                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42542                                  di_set_patch:
 42543                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42544                                  
 42545                                  %endif
 42546                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42547                                  
 42548 000076A7 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42549                                  
 42550                                  	; ax now holds segment of DOS code
 42551 000076A9 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42552                                  
 42553 000076AC 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42554 000076B0 8936[4800]              	mov	word [NULDEV],si
 42555                                  ;SR;
 42556                                  ; There are some locations in the Win386 instance data structures
 42557                                  ; which need to be set up with the DOS data segment. First, initialize
 42558                                  ; the segment part of the instance table pointer in the SIS.
 42559                                  
 42560                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42561 000076B4 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42562                                  
 42563                                  ; Now initialize the segment part of the pointer to the data in each
 42564                                  ; instance table entry.
 42565                                  
 42566 000076B8 56                      	push	si		; preserve pointer to device chain
 42567                                  	; 18/12/2022
 42568                                  	; cx = 0
 42569 000076B9 B107                    	mov	cl,7
 42570                                  	;mov	cx,7		; There are 7 entries in the instance table
 42571                                  				; M019
 42572                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42573 000076BB BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42574                                  Instance_init_loop:
 42575 000076BE 8C1C                    	mov	[si],ds		; set offset in instance entry
 42576                                  	;add	si,6
 42577 000076C0 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42578 000076C3 E2F9                    	loop	Instance_init_loop
 42579                                  
 42580                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42581                                  
 42582                                  	; 18/12/2022
 42583 000076C5 B105                    	mov	cl,5
 42584                                  	;mov	cx,5		; There are five entries in the instance table
 42585                                  
 42586                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42587                                  	;mov	si,11EDh	; point si to segment field
 42588 000076C7 BE[CE11]                	mov	si,OldInstanceJunk+6
 42589                                  OldInstance_init_loop:
 42590 000076CA 8C1C                    	mov	[si],ds		; set offset in instance entry
 42591 000076CC 83C606                  	add	si,6		; move on to next entry
 42592 000076CF E2F9                    	loop	OldInstance_init_loop
 42593 000076D1 5E                      	pop	si		; restore pointer to device chain
 42594                                  
 42595                                  ; End of WIN386 2.xx compatibility bullshit
 42596                                  
 42597                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42598                                  %if 0	
 42599                                     	; 30/04/2019
 42600                                  	;push	es
 42601                                  	;pop	ds
 42602                                  			; ds:si points to console device
 42603                                  
 42604                                  	; 24/04/2019 - Retro DOS v4.0
 42605                                  
 42606                                  	; 15/07/2018
 42607                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42608                                  	; (Set INT 2Ah handler address to an 'IRET')
 42609                                  
 42610                                  	; need crit vector inited to use deviocall
 42611                                  	;push	ds			; preserve segment of device chain
 42612                                  	push	es ; 30/04/2019
 42613                                  
 42614                                  %endif
 42615                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42616 000076D2 06                      	push	es
 42617                                  	; 17/12/2022
 42618                                  	;pop	ds
 42619                                  	;push	ds
 42620                                  
 42621 000076D3 31C0                    	xor	ax,ax
 42622 000076D5 8ED8                    	mov	ds,ax			; point DS to int vector table
 42623 000076D7 B8[3076]                	mov	ax,initiret
 42624                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42625 000076DA A3A800                  	mov	[addr_int_ibm],ax
 42626 000076DD 8CC8                    	mov	ax,cs
 42627                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42628 000076DF A3AA00                  	mov	[addr_int_ibm+2],ax
 42629 000076E2 1F                      	pop	ds			; restore segment of device chain
 42630                                  
 42631 000076E3 E81C02                  	call	CHARINIT  		; initialize console driver
 42632 000076E6 56                      	push	si			; save pointer to header
 42633                                  
 42634 000076E7 16                      	push	ss			; move pointer to dos data...
 42635 000076E8 07                      	pop	es			; ...into ES
 42636                                  
 42637                                  	;initialize sft for file 0 (CON)
 42638                                  
 42639                                          ; 07/07/2018 - Retro DOS v3.0
 42640                                  	; 24/04/2019 - Retro DOS v4.0
 42641                                  	;mov	di,SFTABL+6 
 42642 000076E9 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42643 000076EC B80300                          MOV     AX,3
 42644 000076EF AB                              STOSW           	; Refcount
 42645 000076F0 FEC8                            DEC     AL
 42646 000076F2 AB                              STOSW           	; Access rd/wr, compatibility
 42647 000076F3 30C0                            XOR     AL,AL
 42648 000076F5 AA                              STOSB           	; attribute
 42649                                  	;mov	al,0C3h
 42650 000076F6 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42651 000076F8 AB                      	STOSW			; flags
 42652 000076F9 89F0                            mov	ax,si
 42653 000076FB AB                              stosw			; device pointer in devptr	
 42654 000076FC 8CD8                            mov	ax,ds
 42655 000076FE AB                      	stosw
 42656 000076FF 31C0                    	xor	ax,ax	; 0
 42657 00007701 AB                      	stosw			; firclus
 42658 00007702 AB                      	stosw			; time
 42659 00007703 AB                      	stosw			; date
 42660 00007704 48                      	dec	ax	; -1
 42661 00007705 AB                      	stosw			; size
 42662 00007706 AB                      	stosw
 42663 00007707 40                      	inc	ax	; 0
 42664 00007708 AB                      	stosw			; position
 42665 00007709 AB                      	stosw
 42666                                  	;add	di,7
 42667 0000770A 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42668                                  				; point at name
 42669                                  	;add	si,10
 42670 0000770D 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42671                                  				; point to name
 42672 00007710 B90400                  	mov	cx,4
 42673 00007713 F3A5                    	rep	movsw		; name
 42674 00007715 B103                    	mov	cl,3
 42675 00007717 B020                    	mov	al," "
 42676 00007719 F3AA                    	rep	stosb		; extension
 42677                                  
 42678 0000771B 5E                      	pop	si		; get back pointer to header
 42679                                  
 42680                                  				; mark device as CON I/O
 42681                                  	; 15/07/2018
 42682                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42683 0000771C 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42684                                  	; 12/03/2018
 42685                                  	;mov	[ss:32h],si
 42686 00007720 368936[3200]            	MOV     [SS:BCON],SI
 42687                                  	;mov	[ss:34h],ds
 42688 00007725 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42689                                  
 42690                                  	; initialize each device until the clock device is found
 42691                                  
 42692                                  CHAR_INIT_LOOP:
 42693 0000772A C534                            LDS     SI,[SI]			; AUX device
 42694 0000772C E8D301                  	call	CHARINIT 
 42695                                         	;15/07/2018
 42696                                  	;test	byte [SI+4],8
 42697 0000772F F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42698 00007733 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42699                                  	; 12/03/2018
 42700                                  	;mov	[ss:2Eh],si
 42701 00007735 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42702                                  	;mov	[ss:30h],ds
 42703 0000773A 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42704                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42705                                  
 42706                                  	;mov	bp,4970			; bp = pointer to free mem
 42707                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42708                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42709                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42710 0000773F BDA512                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42711                                  
 42712 00007742 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42713 00007747 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42714                                  PERDRV:
 42715                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42716 0000774C C534                            LDS	SI,[SI]			; Next device
 42717 0000774E 83FEFF                          CMP	SI,-1	; 0FFFFh
 42718 00007751 7479                    	JZ	SHORT CONTINIT
 42719                                  
 42720 00007753 E8AC01                          call	CHARINIT
 42721                                  
 42722                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42723                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42724                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42725                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42726                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42727                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42728                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42729                                  
 42730                                          ; 15/07/2018
 42731                                  	;test	word [SI+4],8000h		; DEVTYP
 42732                                          ; 17/12/2022
 42733                                  	;test	byte [SI+5],80h
 42734 00007756 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42735                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42736 0000775A 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42737                                  
 42738 0000775C 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42739 00007761 30ED                    	XOR     CH,CH
 42740                                          ; 07/07/2018
 42741                                  	;MOV	[SI+10],CL		; Number of units in name field
 42742 00007763 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42743 00007766 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42744 0000776B 30F6                    	XOR     DH,DH
 42745 0000776D 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42746 00007772 1E                      	PUSH    DS
 42747 00007773 56                              PUSH    SI
 42748 00007774 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42749                                  
 42750                                  PERUNIT:
 42751 00007779 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42752 0000777B 43                              INC     BX
 42753 0000777C 43                              INC     BX                      ; On to next BPB
 42754                                  	; 15/12/2022
 42755                                  	; 07/07/2018
 42756                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42757 0000777D 26885600                	MOV     [ES:BP],DL
 42758                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42759                                  	;;mov	[ES:BP+0],DL
 42760                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42761                                  
 42762                                  	;MOV	[ES:BP+1],DH
 42763 00007781 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42764 00007785 53                              PUSH    BX
 42765 00007786 51                              PUSH    CX
 42766 00007787 52                              PUSH    DX
 42767                                  
 42768                                          ;invoke	$SETDPB
 42769 00007788 E84598                          CALL	_$SETDPB		; build DPB!
 42770                                  
 42771                                  	; 07/07/2018
 42772                                  	;MOV	AX,[ES:BP+2]
 42773 0000778B 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42774                                          ; 12/03/2018
 42775 0000778F 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42776 00007794 7604                    	JBE     SHORT NOTMAX		; N:
 42777 00007796 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42778                                  NOTMAX:					
 42779                                  	; set the next dpb field in the currently built bpb
 42780                                  	; and mark as never accessed
 42781                                          
 42782                                  	; 24/04/2019
 42783 0000779A 89E8                    	mov	ax,bp			; get pointer to DPB
 42784                                  	;add	ax,33
 42785 0000779C 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42786                                  					; set seg & offset of next DPB
 42787                                  	;mov	[es:bp+25],ax
 42788 0000779F 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42789                                  	;mov	[es:bp+27],es
 42790 000077A3 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42791                                  					; mark as never accessed
 42792                                  	;mov	byte [es:bp+24],0FFh
 42793 000077A7 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42794                                  
 42795 000077AC 5A                      	POP     DX
 42796 000077AD 59                              POP     CX
 42797 000077AE 5B                              POP     BX
 42798 000077AF 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42799 000077B1 5E                              POP     SI
 42800 000077B2 1F                              POP     DS
 42801                                  					; ds:si -> device header
 42802                                  					; store it in the corresponding dpb
 42803                                  	; 07/07/2018
 42804                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42805 000077B3 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42806                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42807 000077B7 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42808                                  
 42809 000077BB 1E                              PUSH    DS			; save pointer to device header
 42810 000077BC 56                              PUSH    SI
 42811 000077BD FEC6                            INC     DH			; inc unit #
 42812 000077BF FEC2                            INC     DL			; inc drive #
 42813 000077C1 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42814                                          ;add	bp,33 ; 24/04/2019
 42815 000077C3 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42816 000077C6 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42817                                          
 42818 000077C8 5E                      	POP     SI			; restore pointer to device header
 42819 000077C9 1F                              POP     DS
 42820 000077CA EB80                    	JMP	PERDRV			; process all drivers in chain
 42821                                  
 42822                                  CONTINIT:
 42823                                  	; 24/04/2019
 42824                                  	;sub	bp,33			; set link in last DPB to -1
 42825 000077CC 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42826                                  					; set last link offset & segment
 42827                                  	;mov	word [bp+25],0FFFFh
 42828 000077CF C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42829                                  	;mov	word [bp+27],0FFFFh
 42830 000077D4 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42831                                  	;add	bp,33
 42832 000077D9 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42833                                  					; the DPB chain is done.  
 42834 000077DC 16                      	push	ss
 42835 000077DD 1F                      	pop	ds
 42836                                  
 42837 000077DE 89E8                    	mov	ax,bp
 42838 000077E0 E850FE                  	call	ParaRound		; round up to segment
 42839                                  
 42840 000077E3 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42841 000077E5 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42842                                  
 42843 000077E7 BB0F00                  	mov	bx,0Fh
 42844                                  	
 42845                                  	; 24/05/2019
 42846                                  	;mov	cx,[ENDMEM]
 42847                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42848                                  	; 17/12/2022
 42849                                  	;mov	cx,[ENDMEM] 
 42850                                  					; set seg inpacketto dosdata					
 42851 000077EA 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42852                                  
 42853                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42854                                  ; Also patch in the segment of the pointers in the dosdata area.
 42855                                  ;
 42856                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42857                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42858                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42859                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42860                                  
 42861 000077EE 52                      	push	dx			; preserve first free segment
 42862                                  
 42863 000077EF A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42864 000077F2 8EC0                    	mov	es,ax			; es = segment of DOS
 42865 000077F4 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42866                                  
 42867 000077FA E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42868 000077FD E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42869                                  					; other tables with seg in ES.
 42870                                  	; 17/12/2022
 42871                                  	; cx = 0
 42872 00007800 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42873                                  
 42874 00007804 5A                      	pop	dx			; restore first free segment
 42875                                  
 42876                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42877                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42878                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42879                                  ; low_mem_stub by seg_reinit.
 42880                                  
 42881                                  	;xor	ax,ax ; 0
 42882                                  	;mov	ds,ax
 42883                                  	;mov	es,ax
 42884                                  	; 17/12/2022
 42885                                  	; cx = 0
 42886                                  	;xor	cx,cx ; 0
 42887 00007805 8ED9                    	mov	ds,cx
 42888 00007807 8EC1                    	mov	es,cx
 42889                                  
 42890                                  	; set the segment of int 24 vector that was 
 42891                                  	; left out by patch_vec_segments above.
 42892                                  
 42893                                  	; 17/12/2022
 42894                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42895                                  ;%if 0
 42896                                  	; 24/05/2019
 42897                                  	;;mov	di,90h
 42898                                  	;;mov	di,4*int_fatal_abort
 42899                                  	;mov	di,addr_int_fatal_abort
 42900 00007809 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42901                                  
 42902 0000780C 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42903                                  	;mov	[di+2],ax  ; int 24h segment
 42904 00007810 8905                    	mov	[di],ax ; 24/05/2019
 42905                                  
 42906                                  	;;mov	di,82h
 42907                                  	;mov	di,INTBASE+2
 42908                                  
 42909                                  ;%endif
 42910                                  	; 17/12/2022
 42911                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42912                                  	;;mov	di,90h
 42913                                  	;;mov	di,4*int_fatal_abort
 42914                                  	;mov	di,addr_int_fatal_abort
 42915                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42916                                  	;mov	[di+2],ax  ; int 24h segment
 42917                                  	;;mov	di,82h
 42918                                  	;mov	di,INTBASE+2
 42919                                  
 42920                                  	; set default divide trap offset
 42921                                  
 42922                                  	;mov	word ptr ds:[0],offset doscode:divov
 42923 00007812 C7060000[0352]          	mov	word [0],DIVOV	
 42924                                  
 42925                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42926                                  
 42927                                  	;mov	di,80h
 42928 00007818 BF8000                  	mov	di,INTBASE
 42929                                  	;mov	ax,offset doscode:irett
 42930 0000781B B8[E202]                	mov	ax,IRETT
 42931                                  
 42932                                  	; 17/12/2022
 42933                                  	; cx = 0
 42934 0000781E B109                    	mov	cl,9
 42935                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42936                                  					;   sets offsets for ints 20h-28h
 42937                                  iset1:
 42938 00007820 AB                      	stosw
 42939                                  	;add	di,2
 42940                                  	; 20/09/2023
 42941 00007821 47                      	inc	di
 42942 00007822 47                      	inc	di
 42943 00007823 E2FB                    	loop	iset1
 42944                                  
 42945 00007825 83C704                  	add	di,4			; skip vector 29h
 42946                                  
 42947                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42948                                  ;					;   sets offsets for ints 2ah-2fh
 42949                                  ;iset2:
 42950                                  ;	stosw
 42951                                  ;	add	di,2
 42952                                  ;	loop	iset2
 42953                                  
 42954                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42955                                  ; patch_vec_segments above. So skip it.
 42956                                  
 42957                                  ;	add	di,8			; skip vector 30h & 31h 
 42958                                  
 42959                                  	;;;
 42960                                  	; 06/05/2019 - Retro DOS v4.0
 42961                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42962                                  	; 17/12/2022
 42963 00007828 B105                    	mov	cl,5 ; 28/06/2019
 42964                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42965                                  	;mov	cx,6
 42966                                  iset2:
 42967 0000782A AB                      	stosw
 42968                                  	;add	di,2
 42969                                  	; 20/09/2023
 42970 0000782B 47                      	inc	di
 42971 0000782C 47                      	inc	di
 42972 0000782D E2FB                    	loop	iset2
 42973                                  
 42974                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42975                                  	; 17/12/2022
 42976 0000782F 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42977                                  	;add	di,8
 42978                                  	;;;
 42979                                  
 42980                                  	; 17/12/2022
 42981 00007832 B10E                    	mov	cl,14
 42982                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42983                                  					;   sets offsets for ints 32h-3fh
 42984                                  iset3:
 42985 00007834 AB                      	stosw
 42986                                  	;add	di,2
 42987                                  	; 20/09/2023
 42988 00007835 47                      	inc	di
 42989 00007836 47                      	inc	di
 42990 00007837 E2FB                    	loop	iset3
 42991                                  
 42992                                  ;if installed
 42993                                  	; set the offset of int2f handler
 42994                                  	;mov	word [0BCh],INT2F
 42995 00007839 C706BC00[0307]          	mov	word [02Fh*4],INT2F
 42996                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42997 0000783F 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42998                                  	;mov	[0BEh],ax
 42999 00007843 A3BE00                  	mov	[(02Fh*4)+2],ax
 43000                                  ;endif
 43001                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43002                                  	; long jump will be patched in by seg_reinit
 43003                                  
 43004                                  	;mov	byte [C0h],0EAh
 43005 00007846 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43006                                  	;mov	byte [C1h],CALL_ENTRY
 43007 0000784B C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43008                                  
 43009 00007851 C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43010 00007857 C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43011 0000785D C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43012 00007863 89168A00                	mov	word [addr_int_terminate+2],dx	
 43013 00007867 C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43014 0000786D C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43015 00007873 C7069C00[3D61]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43016                                  
 43017 00007879 16                      	push	ss
 43018 0000787A 1F                      	pop	ds
 43019                                  	
 43020                                  	; 24/05/2019
 43021                                  	;push	ss
 43022                                  	;pop	es
 43023                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43024                                  	; 17/12/2022
 43025                                  	;push	ss
 43026                                  	;pop	es
 43027                                  
 43028 0000787B 52                      	push	dx			; remember address of arena
 43029                                  
 43030 0000787C 42                      	inc	dx			; leave room for arena header
 43031                                  	;mov	[330h],dx
 43032 0000787D 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43033                                  
 43034 00007881 31FF                    	xor	di,di			; point es:di at end of memory
 43035 00007883 8EC2                    	mov	es,dx			; ...where psp will be
 43036 00007885 31C0                    	xor	ax,ax
 43037                                  	;mov	cx,80h			; psp is 128 words
 43038                                  	; 17/12/2022
 43039 00007887 B180                    	mov	cl,128 ; 28/06/2019
 43040                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43041                                  	;mov	cx,128
 43042                                  
 43043 00007889 F3AB                    	rep	stosw			; zero out psp area
 43044 0000788B A1[4603]                        mov     ax,[ENDMEM]
 43045                                  	
 43046                                  	; 17/12/2022
 43047                                  	; cx = 0
 43048 0000788E E88D98                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43049                                  
 43050                                  	; ds, es now point to PSP
 43051                                  
 43052 00007891 16                      	push	ss
 43053 00007892 1F                      	pop	ds
 43054                                  
 43055                                  	;mov	di,24
 43056 00007893 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43057 00007896 31C0                    	xor	ax,ax
 43058 00007898 AB                      	stosw
 43059 00007899 AA                      	stosb				; 0,1 and 2 are con device
 43060 0000789A B0FF                    	mov	al,0FFh
 43061                                  	;mov	cx,FILPERPROC-3 ; 17
 43062                                  	; 17/12/2022
 43063                                  	; cx = 4
 43064 0000789C B111                    	mov	cl,FILPERPROC-3 ; 17
 43065 0000789E F3AA                    	rep	stosb			; rest are unused
 43066                                  
 43067 000078A0 16                      	push	ss
 43068 000078A1 07                      	pop	es
 43069                                  					; must be set to print messages
 43070 000078A2 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43071                                  
 43072                                  ; after this point the char device functions for con will work for
 43073                                  ; printing messages
 43074                                  
 43075                                  	; 24/04/2019 - Retro DOS v4.0
 43076                                  
 43077                                  ; 12/05/2019
 43078                                  ;
 43079                                  ;write_version_msg:
 43080                                  ;
 43081                                  ;	;if	(not ibm)
 43082                                  ;	;mov	si,offset doscode:header
 43083                                  ;	mov	si,HEADER
 43084                                  ;outmes:
 43085                                  ;	;lods	cs:byte ptr [si]
 43086                                  ;	cs
 43087                                  ;	lodsb
 43088                                  ;	cmp	al,"$"
 43089                                  ;	je	short outdone
 43090                                  ;	call	OUTT
 43091                                  ;	jmp	short outmes
 43092                                  ;outdone:
 43093                                  ;	push	ss			; out stomps on segments
 43094                                  ;	pop	ds
 43095                                  ;	push	ss
 43096                                  ;	pop	es
 43097                                  ;	;endif
 43098                                  
 43099                                  	; at this point es is dosdata
 43100                                  
 43101                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43102                                  	; in sysinittable (ms_data.asm)
 43103                                  
 43104                                  	;mov	si,0D28h
 43105 000078A6 BE[280D]                	mov	si,SysInitTable
 43106                                  
 43107                                  	; 17/12/2022
 43108                                  	; ds = es = ss
 43109                                  
 43110                                  	; 17/12/2022
 43111                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43112                                  ;%if 0
 43113                                  	;;mov	[es:si+6],es
 43114                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43115                                  	;;mov	[es:si+2],es
 43116                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43117                                  	
 43118 000078A9 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43119 000078AC 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43120                                  
 43121                                  	; buffhead -> dosdata:hashinitvar 
 43122                                  
 43123                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43124 000078AF 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43125                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43126                                  	;mov	si,6Dh
 43127 000078B3 BE[6D00]                	mov	si,HASHINITVAR
 43128                                  	;mov	[es:BUFFHEAD],si
 43129 000078B6 8936[3800]              	mov	[BUFFHEAD],si
 43130                                  
 43131 000078BA 5A                              pop     dx                      ; restore address of arena
 43132                                  
 43133                                  	;mov	[032Ch+2],dx
 43134 000078BB 8916[2E03]                      mov     [DMAADD+2],dx
 43135                                  
 43136                                  	;mov	[es:arena_head],dx
 43137 000078BF 8916[2400]              	mov	[arena_head],dx
 43138                                  
 43139                                  ;%endif
 43140                                  
 43141                                  ; 17/12/2022
 43142                                  %if 0
 43143                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43144                                  	;;;
 43145                                  	;mov	[es:si+6],es
 43146                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43147                                  	;mov	[es:si+2],es
 43148                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43149                                  
 43150                                  	; buffhead -> dosdata:hashinitvar 
 43151                                  
 43152                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43153                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43154                                  	;mov	si,6Dh
 43155                                  	mov	si,HASHINITVAR
 43156                                  	mov	[es:BUFFHEAD],si
 43157                                  
 43158                                          pop     dx                      ; restore address of arena
 43159                                  
 43160                                  	;mov	[032Ch+2],dx
 43161                                          mov     [DMAADD+2],dx
 43162                                  
 43163                                  	mov	[es:arena_head],dx
 43164                                  	;;;
 43165                                  %endif
 43166                                  
 43167 000078C3 8EDA                            mov     ds,dx
 43168                                  
 43169                                  	;mov	byte [0],'Z'
 43170 000078C5 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43171                                          ;mov	word [1],0
 43172 000078CA C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43173                                  
 43174 000078D0 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43175 000078D4 29D0                    	sub	ax,dx
 43176 000078D6 48                              dec     ax
 43177 000078D7 A30300                          mov     [ARENA.SIZE],ax
 43178                                  
 43179                                  	; point to sft 0
 43180                                  
 43181                                  	;mov	di,offset dosdata:sftabl + sftable
 43182                                  	;mov	di,SFTABL+6
 43183 000078DA BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43184 000078DD B80300                          mov     ax,3
 43185 000078E0 AB                              stosw           		; adjust refcount
 43186                                  
 43187                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43188                                  
 43189                                          ;mov	di,offset dosdata:sysinittable
 43190                                  	;mov	di,0D28h
 43191 000078E1 BF[280D]                	mov	di,SysInitTable	
 43192                                  
 43193 000078E4 42                      	inc	dx			; advance dx from arena to psp
 43194 000078E5 8EDA                    	mov	ds,dx			; point ds to psp
 43195                                  
 43196                                  					; pass the address os seg_reinit 
 43197                                  					; in dx
 43198 000078E7 BA[5579]                	mov	dx,seg_reinit
 43199 000078EA B9[7873]                	mov	cx,exepatch_start
 43200 000078ED 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43201                                  
 43202 000078F1 B8[3076]                	mov	ax,SYSBUF
 43203 000078F4 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43204                                  	
 43205 000078F7 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43206 000078FC 368E16[8605]                    mov     ss,[ss:USER_SS]
 43207                                  
 43208 00007901 CB                              retf
 43209                                  
 43210                                  ;
 43211                                  ; END OF DOSINIT
 43212                                  ;
 43213                                  ;--------------------------------------------------------------------------
 43214                                  
 43215                                  CHARINIT:
 43216                                  	; 24/04/2019 - Retro DOS v4.0
 43217                                  	; 07/07/2018 - Retro DOS v3.0
 43218                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43219 00007902 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43220                                  	;mov	byte [ss:035Bh],0
 43221 00007908 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43222                                  	;mov	byte [ss:035Ch],0
 43223 0000790E 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43224                                  	;mov	word [ss:035BD],0
 43225 00007914 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43226 0000791B 06                              PUSH	ES
 43227 0000791C 53                              PUSH	BX
 43228 0000791D 50                              PUSH	AX
 43229 0000791E BB[5A03]                        MOV	BX,DEVCALL
 43230                                          ;PUSH	CS
 43231 00007921 16                      	PUSH	SS ; 30/04/2019
 43232 00007922 07                              POP	ES
 43233 00007923 E8C9CC                          CALL	DEVIOCALL2	
 43234 00007926 58                      	POP	AX
 43235 00007927 5B                              POP	BX
 43236 00007928 07                              POP	ES
 43237 00007929 C3                              RETN
 43238                                  
 43239                                  ; 25/04/2019 - Retro DOS v4.0
 43240                                  
 43241                                  ;-----------------------------------------------------------------------------
 43242                                  ;
 43243                                  ;	check_XMM: routine to check presence of XMM driver
 43244                                  ;
 43245                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43246                                  ;
 43247                                  ;	USED:	none
 43248                                  ;
 43249                                  ;-----------------------------------------------------------------------------
 43250                                  
 43251                                  check_XMM: ; proc near
 43252                                  ;
 43253                                  ; determine whether or not an XMM driver is installed
 43254                                  ;
 43255 0000792A 50                      	push	ax
 43256                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43257 0000792B B80043                  	mov	ax,4300h
 43258 0000792E CD2F                    	int	2Fh
 43259                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43260                                  		; Return: AL = 80h XMS driver installed
 43261                                  		; AL <> 80h no driver
 43262 00007930 3C80                    	cmp	al,80h			; Q: installed
 43263 00007932 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43264                                  ;
 43265                                  ; get the XMM control functions entry point, save it, we
 43266                                  ; need to call it later.
 43267                                  ;
 43268 00007934 53                      	push	bx
 43269 00007935 52                      	push	dx
 43270 00007936 1E                      	push	ds
 43271 00007937 06                      	push	es
 43272                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43273 00007938 B81043                  	mov	ax,4310h
 43274 0000793B CD2F                    	int	2Fh
 43275                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43276                                  		; Return: ES:BX -> driver entry point
 43277                                  
 43278 0000793D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43279                                  
 43280 00007942 891E[4911]              	mov	[XMMcontrol],bx
 43281 00007946 8C06[4B11]              	mov	[XMMcontrol+2],es
 43282                                  cXMMexit:
 43283 0000794A F8                      	clc
 43284 0000794B 07                      	pop	es
 43285 0000794C 1F                      	pop	ds
 43286 0000794D 5A                      	pop	dx
 43287 0000794E 5B                      	pop	bx
 43288 0000794F 58                      	pop	ax
 43289 00007950 C3                      	retn				; done
 43290                                  ;
 43291                                  ; set carry if XMM driver not present
 43292                                  ;
 43293                                  cXMM_no_driver:
 43294 00007951 F9                      	stc
 43295 00007952 58                      	pop	ax
 43296 00007953 C3                      	retn
 43297                                  
 43298                                  ;-----------------------------------------------------------------------------
 43299                                  ;
 43300                                  ; Procedure Name : seg_reinit
 43301                                  ;
 43302                                  ; Inputs	 : ES has final dos code location
 43303                                  ;		   AX = 0 / 1
 43304                                  ;
 43305                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43306                                  ;		   if AX =0
 43307                                  ;		      if first entry
 43308                                  ;			 patch segment & offset of vectors with stub
 43309                                  ;			 and stub with segment in ES
 43310                                  ;		      else
 43311                                  ;			 patch stub with segment in ES
 43312                                  ;
 43313                                  ;		   else if AX = 1
 43314                                  ;			patch segment of vectors with segment in ES	
 43315                                  ;
 43316                                  ; NOTE		 : This routine can be called at most twice!
 43317                                  ;
 43318                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43319                                  ;-----------------------------------------------------------------------------
 43320                                  
 43321 00007954 00                      num_entry: db	0		; keeps track of the # of times this routine
 43322                                  				; has been called. (0 or 1)
 43323                                  
 43324                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43325                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43326                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43327                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43328                                  
 43329                                  seg_reinit:	; proc	far
 43330 00007955 1E                      	push	ds
 43331                                  
 43332 00007956 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43333                                  
 43334 0000795B E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43335                                  					; other tables with seg in ES.
 43336                                  	; 17/12/2022
 43337                                  	; cx = 0
 43338 0000795E 39C8                    	cmp	ax,cx ; 0
 43339                                  	;cmp	ax,0
 43340 00007960 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43341                                  
 43342                                  	; 17/12/2022
 43343 00007962 2E380E[5479]            	cmp	[cs:num_entry],cl ; 0
 43344                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43345 00007967 7508                    	jne	short second_entry	; N: just patch the stub with 
 43346                                  					;    segment in ES
 43347                                  					; Y: patch the vectors with stub 
 43348 00007969 8CD8                    	mov	ax,ds
 43349 0000796B E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43350 0000796E E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43351                                  					; with those in the stub.
 43352                                  	; 17/12/2022
 43353                                  	; cx = 0
 43354                                  second_entry:
 43355 00007971 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43356                                  
 43357                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43358                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43359 00007973 BF[4810]                	mov	di,DOSINTTABLE
 43360                                  	; 17/12/2022
 43361                                  	; cx = 0
 43362                                  	;mov	cx,9
 43363 00007976 B109                    	mov	cl,9
 43364 00007978 1E                      	push	ds			
 43365 00007979 07                      	pop	es			; es:di -> DOSINTTABLE
 43366                                  
 43367                                  dosinttabloop:
 43368                                  	;add	di,2
 43369                                  	; 19/06/2023
 43370 0000797A 47                      	inc	di
 43371 0000797B 47                      	inc	di
 43372 0000797C AB                      	stosw
 43373 0000797D E2FB                    	loop	dosinttabloop	
 43374                                  
 43375                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43376                                  ; use the HMA, so we don't want to check CS
 43377                                  
 43378                                  ;ifndef ROMDOS
 43379 0000797F 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43380 00007982 7220                    	jb	short sr_done		; N: done
 43381                                  ;endif
 43382 00007984 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43383 00007987 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43384                                  					; A20 toggling in the stub.
 43385                                  	; 17/12/2022
 43386                                  	; cx = 0
 43387 00007989 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43388                                  ; M021-
 43389                                  	;mov	byte [1211h],1
 43390 0000798C C606[F211]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43391                                  				
 43392                                  					; set pointer to the routine that 
 43393                                  					; patches buggy exepacked code.
 43394                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43395 00007991 C706[F311][C874]        	mov	word [FixExePatch],ExePatch
 43396                                  					; M068: set pointer to the routine 
 43397                                  					; M068: that detects copy protected
 43398                                  					; M068: apps
 43399                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43400 00007997 C706[6100][F975]        	mov	word [ChkCopyProt],IsCopyProt
 43401                                  
 43402                                  	; 19/09/2023
 43403 0000799D EB05                    	jmp	short sr_done
 43404                                  
 43405                                  ; 28/12/2022 - Retro DOS v4.1
 43406                                  %if 0
 43407                                  ;----------------------------------------------------------------------------
 43408                                  
 43409                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43410                                  
 43411                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43412                                  ;
 43413                                  ;; M020 - begin
 43414                                  ;
 43415                                  ;	call	WhatCPUType
 43416                                  ;	cmp	al,1
 43417                                  ;	jne	short sr_done 		; we need Rational Patch only
 43418                                  ;					;  on 286 systems
 43419                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43420                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43421                                  ;
 43422                                  ;; M020 - end
 43423                                  ;
 43424                                  ;	jmp	short sr_done
 43425                                  ;
 43426                                  ;patch_vec_seg:				; patch vectors with segment in es
 43427                                  ;	mov	ax,es
 43428                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43429                                  ;					; NOTE we don't have to patch the 
 43430                                  ;					; offsets as they have been already
 43431                                  ;					; set to the doscode offsets at
 43432                                  ;					; DOSINIT.
 43433                                  ;sr_done:
 43434                                  ;	mov	byte [cs:num_entry],1
 43435                                  ;	pop	ds
 43436                                  ;	retf	; ! far return !
 43437                                  
 43438                                  ;----------------------------------------------------------------------------
 43439                                  ;
 43440                                  ; Procedure Name : WhatCPUType
 43441                                  ;
 43442                                  ; Inputs	 : none
 43443                                  ;
 43444                                  ; Outputs	 : AL = 0 if CPU <  286
 43445                                  ;		      = 1 if CPU == 286
 43446                                  ;		      = 2 if CPU >= 386
 43447                                  ;
 43448                                  ; Regs. Mod.	 : AX
 43449                                  ;
 43450                                  ;----------------------------------------------------------------------------
 43451                                  
 43452                                  WhatCPUType:
 43453                                  	; 25/04/2019 - Retro DOS v4.0
 43454                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43455                                  
 43456                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43457                                  
 43458                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43459                                  ; 	it is called from both CODE and SYSINITSEG.
 43460                                  ;
 43461                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43462                                  ;  Returns: AX = 0 if 8086 or 8088
 43463                                  ;              = 1 if 80286
 43464                                  ;              = 2 if 80386
 43465                                  
 43466                                  	; 04/11/2022
 43467                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43468                                  
 43469                                  Get_CPU_Type:	;macro
 43470                                  	pushf
 43471                                  	push	bx			; preserve bx
 43472                                  	xor	bx,bx			; init bx to zero
 43473                                  
 43474                                  	xor	ax,ax			; 0000 into AX
 43475                                  	push	ax			; put it on the stack...
 43476                                  	popf				; ...then shove it into the flags
 43477                                  	pushf				; get it back out of the flags...
 43478                                  	pop	ax			; ...and into ax
 43479                                  	and	ax,0F000h		; mask off high four bits
 43480                                  	cmp	ax,0F000h		; was it all 1's?
 43481                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43482                                  
 43483                                  	mov	ax,0F000h		; now try to set the high four bits..
 43484                                  	push	ax
 43485                                  	popf
 43486                                  	pushf
 43487                                  	pop	ax			; ...and see what happens
 43488                                  	and	ax,0F000h		; any high bits set ?
 43489                                  	jz	short cpu_286		; nay; it's an 80286
 43490                                  
 43491                                  cpu_386:				; bx starts as zero
 43492                                  	inc	bx			; inc twice if 386
 43493                                  cpu_286:				; just inc once if 286
 43494                                  	inc	bx
 43495                                  cpu_8086:				; don't inc at all if 086
 43496                                  	mov	ax,bx			; put CPU type value in ax
 43497                                  	pop	bx			; restore original bx
 43498                                  	popf
 43499                                  	
 43500                                  	;endm
 43501                                  
 43502                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43503                                  	retn	; 19/09/2023
 43504                                  
 43505                                  ; 19/09/2023
 43506                                  ;	; 04/11/2022
 43507                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43508                                  ;	cmp	al,1
 43509                                  ;	jne	short sr_done 		; we need Rational Patch only
 43510                                  ;					;  on 286 systems
 43511                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43512                                  
 43513                                  ;----------------------------------------------------------------------------
 43514                                  %endif	; 28/12/2022
 43515                                  
 43516                                  	; 19/09/2023
 43517                                  	;jmp	short sr_done
 43518                                  
 43519                                  patch_vec_seg:				; patch vectors with segment in es
 43520 0000799F 8CC0                    	mov	ax,es
 43521 000079A1 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43522                                  					; NOTE we don't have to patch the 
 43523                                  					; offsets as they have been already
 43524                                  					; set to the doscode offsets at
 43525                                  					; DOSINIT.
 43526                                  sr_done:
 43527 000079A4 2EC606[5479]01          	mov	byte [cs:num_entry],1
 43528 000079AA 1F                      	pop	ds
 43529 000079AB CB                      	retf	; ! far return !
 43530                                  
 43531                                  ;----------------------------------------------------------------------------
 43532                                  ;
 43533                                  ; Procedure Name : patch_vec_segments
 43534                                  ;
 43535                                  ; Inputs	 : ax -> has segment address to patch in
 43536                                  ;		   ds -> DOSDATA
 43537                                  ;
 43538                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43539                                  ;			
 43540                                  ;			0,20-28,3a-3f
 43541                                  ;
 43542                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43543                                  ;
 43544                                  ;----------------------------------------------------------------------------
 43545                                  
 43546                                  patch_vec_segments:
 43547                                  
 43548 000079AC 06                      	push	es
 43549                                  
 43550 000079AD 31C9                    	xor	cx,cx ; 0
 43551 000079AF 8EC1                    	mov	es,cx
 43552                                  
 43553                                  	;mov	di,82h
 43554 000079B1 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43555                                  
 43556 000079B4 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43557                                  
 43558                                  					; set vectors 20 & 21
 43559                                  	; 04/11/2022
 43560                                  	;mov	cx,2
 43561                                  	; 17/12/2022
 43562                                  	;mov	cl,2
 43563                                  ps_set1:
 43564 000079B8 AB                      	stosw	; int 20h segment
 43565                                  	;add	di,2
 43566                                  	; 17/12/2022
 43567 000079B9 47                      	inc	di
 43568 000079BA 47                      	inc	di
 43569                                  	;loop	ps_set1
 43570                                  
 43571                                  	; 17/12/2022
 43572 000079BB AB                      	stosw	; int 21h segment
 43573                                  	;inc	di
 43574                                  	;inc	di
 43575                                  
 43576                                  	;add	di,4			; skip int 22h vector
 43577 000079BC 83C706                  	add	di,6 ; *
 43578                                  
 43579 000079BF AB                      	stosw				; set int 23h
 43580 000079C0 83C706                  	add	di,6			; skip int 24h
 43581                                  
 43582                                  					; set vectors 25-28 and 2a-3f 
 43583                                  	; 04/11/2022
 43584                                  	;mov	cx,4			; set 4 segments
 43585                                  	; 17/12/2022
 43586 000079C3 B104                    	mov	cl,4
 43587                                  ps_set2:
 43588 000079C5 AB                      	stosw				
 43589                                  	;add	di,2
 43590                                  	; 17/12/2022
 43591 000079C6 47                      	inc	di
 43592 000079C7 47                      	inc	di
 43593 000079C8 E2FB                    	loop	ps_set2
 43594                                  
 43595 000079CA 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43596                                  					;   already be set.
 43597                                  	; 04/11/2022
 43598                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43599                                  	; 17/12/2022
 43600 000079CD B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43601                                  ps_set3:
 43602 000079CF AB                      	stosw
 43603                                  	;add	di,2
 43604                                  	; 17/12/2022
 43605 000079D0 47                      	inc	di
 43606 000079D1 47                      	inc	di
 43607 000079D2 E2FB                    	loop	ps_set3
 43608                                  
 43609                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43610                                  ; below. So skip it.
 43611                                  
 43612 000079D4 83C708                  	add	di,8			; skip vector 30h & 31h 
 43613                                  	
 43614                                  	; 04/11/2022
 43615                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43616                                  	; 17/12/2022
 43617 000079D7 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43618                                  ps_set4:
 43619 000079D9 AB                      	stosw
 43620                                  	;add	di,2
 43621                                  	; 17/12/2022
 43622 000079DA 47                      	inc	di
 43623 000079DB 47                      	inc	di
 43624 000079DC E2FB                    	loop	ps_set4
 43625                                  
 43626                                  ; set offset of int2f
 43627                                  
 43628                                  ;if installed
 43629                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43630                                  ;endif
 43631                                  	;mov	[es:0C3h],ax
 43632 000079DE 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43633                                  	; 17/12/2022
 43634                                  	; cx = 0
 43635 000079E2 07                      	pop	es
 43636 000079E3 C3                      	retn
 43637                                  
 43638                                  ;---------------------------------------------------------------------------
 43639                                  ;
 43640                                  ; Procedure Name : patch_misc_segments
 43641                                  ;
 43642                                  ; Inputs	 : es = segment to patch in
 43643                                  ;		   ds = dosdata
 43644                                  ;
 43645                                  ; outputs	 : patches in the sharer and other tables in the dos
 43646                                  ;		   with right dos code segment in es
 43647                                  ;
 43648                                  ; Regs Mod	 : DI,SI,CX
 43649                                  ;
 43650                                  ;---------------------------------------------------------------------------
 43651                                  
 43652                                  patch_misc_segments:
 43653                                  
 43654 000079E4 53                      	push	bx
 43655 000079E5 06                      	push	es
 43656 000079E6 50                      	push	ax
 43657                                  
 43658 000079E7 8CC0                    	mov	ax,es			; ax - > DOS segment
 43659                                  	
 43660 000079E9 1E                      	push	ds
 43661 000079EA 07                      	pop	es			; es -> DOSDATA
 43662                                  	
 43663                                  ; initialize the jump table for the sharer...
 43664                                  
 43665                                  	;mov	di,offset dosdata:jshare
 43666                                  	;mov	di,90h
 43667 000079EB BF[9000]                	mov	di,JShare
 43668                                  	;mov	bx,[0AAAh]
 43669 000079EE 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43670                                  					; table was patched during the first
 43671                                  					; call to this routine
 43672 000079F2 B90F00                  	mov	cx,15
 43673                                  jumptabloop:
 43674                                  	;add	di,2			; skip offset
 43675                                  	; 17/12/2022
 43676 000079F5 47                      	inc	di
 43677 000079F6 47                      	inc	di
 43678 000079F7 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43679 000079FA 7405                    	je	short share_patch	; Y: patch in sharer table
 43680                                  					; N: 
 43681 000079FC 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43682 000079FF 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43683                                  share_patch:
 43684 00007A01 AB                      	stosw				; drop in segment
 43685                                  no_share_patch:
 43686 00007A02 E2F1                    	loop	jumptabloop
 43687                                  					; BUGBUG patching the country info 
 43688                                  					; with dosdata can be done inline
 43689                                  					; in dosinit.
 43690                                  					; for dos 3.3 country info
 43691                                  					; table address
 43692                                  
 43693                                  	;mov	si,offset dosdata:country_cdpg
 43694                                  	;mov	si,122Ah   
 43695 00007A04 BE[0012]                	mov	si,COUNTRY_CDPG
 43696                                  					; initialize double word
 43697                                  					; pointers with dosdata in ds
 43698                                  	;mov	[si+4Fh],ds
 43699                                  	;mov	[si+54h],ds
 43700                                  	;mov	[si+59h],ds
 43701                                  	;mov	[si+5Eh],ds
 43702                                  	;mov	[si+80h],ds
 43703                                  	;mov	[si+63h],ds
 43704 00007A07 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43705 00007A0A 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43706 00007A0D 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43707 00007A10 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43708 00007A13 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43709 00007A17 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43710                                  
 43711                                  					; fastopen routines are in doscode
 43712                                  					; so patch with doscode seg in ax
 43713                                  
 43714                                  	;mov	si,offset dosdata:fastopentable
 43715                                  	;mov	si,0D30h
 43716 00007A1A BE[300D]                	mov	si,FastOpenTable
 43717                                  
 43718                                  	; 17/12/2022
 43719                                  	; bx = [TEMP_DOSLOC]
 43720 00007A1D 83FBFF                  	cmp	bx,-1
 43721                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43722 00007A20 7405                    	je	short fast_patch	; Y: patch segment
 43723                                  	;mov	cx,[TEMP_DOSLOC]
 43724                                  					; Q: has fastopen patched in it's
 43725                                  					;    segment
 43726                                  	; 17/12/2022
 43727 00007A22 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43728                                  	;;cmp	cx,[si+4]
 43729                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43730 00007A25 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43731                                  
 43732                                  fast_patch:
 43733                                  	;mov	[si+4],ax
 43734 00007A27 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43735                                  no_fast_patch:
 43736                                  	; 17/12/2022
 43737                                  	; cx = 0
 43738 00007A2A 58                      	pop	ax
 43739 00007A2B 07                      	pop	es
 43740 00007A2C 5B                      	pop	bx
 43741                                  
 43742 00007A2D C3                      	retn
 43743                                  
 43744                                  ;--------------------------------------------------------------------------
 43745                                  ;
 43746                                  ; Procedure Name : patch_offset
 43747                                  ; 
 43748                                  ; Inputs	 : NONE
 43749                                  ;
 43750                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43751                                  ;		   0,20-28,3a-3f, and 30,31
 43752                                  ;
 43753                                  ;
 43754                                  ; Regs. Mod	 : AX,DI,CX
 43755                                  ;--------------------------------------------------------------------------
 43756                                  
 43757                                  patch_offset:
 43758 00007A2E 06                      	push	es		; preserve es
 43759                                  
 43760 00007A2F 31C0                    	xor	ax,ax
 43761 00007A31 8EC0                    	mov	es,ax
 43762                                  				; set default divide trap address
 43763                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43764                                  	;mov	word [es:0],108Ah
 43765 00007A33 26C7060000[7010]        	mov	word [es:0],ldivov
 43766                                  
 43767                                  	;mov	di,80h
 43768 00007A3A BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43769                                  	;mov	ax,offset dosdata:lirett
 43770                                  	;mov	ax,10DAh
 43771 00007A3D B8[C010]                	mov	ax,lirett
 43772                                  				; set vectors 20 & 21 to point to iret.
 43773                                  	; 17/12/2022
 43774                                  	; cx = 0
 43775                                  
 43776                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43777                                  po_iset1:
 43778 00007A40 AB                      	stosw	; int 20h offset
 43779                                  	;add	di,2 ; *
 43780                                  	;loop	po_iset1
 43781                                  	; 17/12/2022
 43782 00007A41 47                      	inc	di
 43783 00007A42 47                      	inc	di
 43784 00007A43 AB                      	stosw	; int 21h offset
 43785                                  
 43786                                  	;add	di,4		; skip vector 22h
 43787                                  	; 17/12/2022
 43788 00007A44 83C706                  	add	di,6 ; *	
 43789                                  
 43790 00007A47 AB                      	stosw			; set offset of 23h
 43791                                  	;add	di,6		; skip 24h
 43792                                  	; 19/09/2023
 43793 00007A48 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43794                                  
 43795                                  				; set vectors 25-28 and 2a-3f to iret.
 43796                                  	; 04/11/2022
 43797                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43798                                  	; 19/09/2023
 43799                                  	; 17/12/2022
 43800                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43801                                  po_iset2:
 43802 00007A4B AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43803                                  	;add	di,2
 43804                                  	; 19/09/2023
 43805                                  	; 17/12/2022
 43806                                  	;inc	di
 43807                                  	;inc	di
 43808                                  	; 19/09/2023
 43809                                  	;loop	po_iset2
 43810                                  
 43811                                  	;add	di,4		; skip vector 29h
 43812                                  	; 19/09/2023
 43813 00007A4C 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43814                                  
 43815                                  	; 04/11/2022
 43816                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43817                                  	; 17/12/2022
 43818                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43819 00007A4F B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43820                                  po_iset3:
 43821 00007A51 AB                      	stosw
 43822                                  	;add	di,2
 43823                                  	; 17/12/2022
 43824 00007A52 47                      	inc	di
 43825 00007A53 47                      	inc	di
 43826 00007A54 E2FB                    	loop	po_iset3
 43827                                  
 43828                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43829                                  ; below. So skip it.
 43830                                  
 43831                                  	;add	di,8		; skip vector 30h & 31h 
 43832                                  	; 17/12/2022
 43833 00007A56 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43834                                  
 43835                                  	; 04/11/2022
 43836                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43837                                  				;   sets offsets for ints 32h-3fh
 43838                                  	; 17/12/2022
 43839 00007A59 B10E                    	mov	cl,14 ; 26/06/2019
 43840                                  po_iset4:
 43841 00007A5B AB                      	stosw
 43842                                  	;add	di,2
 43843                                  	; 17/12/2022
 43844 00007A5C 47                      	inc	di
 43845 00007A5D 47                      	inc	di
 43846 00007A5E E2FB                    	loop	po_iset4
 43847                                  
 43848                                  ;if installed
 43849                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43850                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43851 00007A60 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43852                                  ;endif
 43853                                  
 43854                                  ; set up entry point call at vectors 30-31h
 43855                                  	;mov	byte [es:0C0h],0EAh
 43856 00007A67 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43857                                  	;mov	word [es:0C1h],10D0h
 43858                                  
 43859 00007A6D 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43860                                  
 43861                                  							; 19/09/2023
 43862                                  	;mov	word [es:80h],1094h
 43863 00007A74 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43864                                  	;mov	word [es:84h],109Eh
 43865 00007A7B 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43866                                  	;mov	word [es:94h],10A8h
 43867 00007A82 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43868                                  	;mov	word [es:98h],10B2h
 43869 00007A89 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43870                                  	;mov	word [es:9Ch],10BCh
 43871 00007A90 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43872                                  
 43873                                  	; 17/12/2022
 43874                                  	; CX = 0
 43875 00007A97 07                      	pop	es		; restore es
 43876 00007A98 C3                      	retn
 43877                                  
 43878                                  ;--------------------------------------------------------------------------
 43879                                  ;
 43880                                  ; 	Procedure Name	:	patch_in_nops
 43881                                  ;
 43882                                  ; 	Entry		: 	ES -> DOSDATA
 43883                                  ;
 43884                                  ;	Regs Mod	: 	cx, di
 43885                                  ;
 43886                                  ;	Description:
 43887                                  ;		This routine patches in 2 nops at the offsets specified in 
 43888                                  ;	patch_table. This basically enables the low mem stub to start 
 43889                                  ;	making XMS calls.
 43890                                  ;
 43891                                  ;--------------------------------------------------------------------------
 43892                                  
 43893                                  	; 04/11/2022
 43894                                  	; (MSDOS 5.0 MSDOS.SYS)
 43895                                  	; DOSCODE:0BC50h
 43896                                  
 43897                                  patch_table:	; label	byte
 43898                                  	;dw	offset dosdata:i0patch
 43899                                  	;dw	offset dosdata:i20patch
 43900                                  	;dw	offset dosdata:i21patch
 43901                                  	;dw	offset dosdata:i25patch
 43902                                  	;dw	offset dosdata:i26patch
 43903                                  	;dw	offset dosdata:i27patch
 43904                                  	;dw	offset dosdata:i2fpatch
 43905                                  	;dw	offset dosdata:cpmpatch
 43906 00007A99 [7010]                  	dw	i0patch
 43907 00007A9B [7A10]                  	dw	i20patch
 43908 00007A9D [8410]                  	dw	i21patch
 43909 00007A9F [8E10]                  	dw	i25patch
 43910 00007AA1 [9810]                  	dw	i26patch
 43911 00007AA3 [A210]                  	dw	i27patch
 43912 00007AA5 [AC10]                  	dw	i2fpatch
 43913 00007AA7 [B610]                  	dw	cpmpatch
 43914                                  
 43915                                  patch_table_size equ ($-patch_table)/2
 43916                                  
 43917                                  patch_in_nops:
 43918 00007AA9 50                      	push	ax
 43919 00007AAA 56                      	push	si
 43920 00007AAB BE[997A]                	mov	si,patch_table
 43921 00007AAE B89090                  	mov	ax,9090h ; nop, nop
 43922                                  	; 17/12/2022
 43923                                  	; cx = 0
 43924                                  	;mov	cx,8
 43925                                  	;mov	cx,patch_table_size ; 8
 43926 00007AB1 B108                    	mov	cl,patch_table_size ; 8
 43927                                  pin_loop:
 43928 00007AB3 2E8B3C                  	mov	di,[cs:si]
 43929 00007AB6 AB                      	stosw
 43930                                  	;add	si,2
 43931                                  	; 17/12/2022
 43932 00007AB7 46                      	inc	si
 43933 00007AB8 46                      	inc	si
 43934 00007AB9 E2F8                    	loop	pin_loop
 43935 00007ABB 5E                      	pop	si
 43936 00007ABC 58                      	pop	ax
 43937 00007ABD C3                      	retn
 43938                                  
 43939                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43940                                  ; ---------------------------------------------------------------------------
 43941                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43942                                  ; ---------------------------------------------------------------------------
 43943                                  
 43944                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 43945                                  DOSCODE_END:
 43946                                  	;times	9 db 0	; db 9 dup(0)
 43947                                  	; 18/12/2022
 43948 00007ABE 0000                    	dw	0  ;	times 2 db 0
 43949                                  
 43950                                  ;align 16
 43951                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43952                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43953                                  
 43954                                  ; ---------------------------------------------------------------------------
 43955                                  
 43956                                  
 43957                                  ;memstrt label word
 43958                                  ; ---------------------------------------------------------------------------
 43959                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43960                                  ; ---------------------------------------------------------------------------
 43961                                  
 43962                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43963                                  
 43964                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43965                                  ; the dos initialization segment
 43966                                  
 43967                                  ;ifndef ROMDOS
 43968                                  
 43969                                  ;doscode ends
 43970                                  
 43971                                  ;else
 43972                                  
 43973                                  ;;dosinitseg ends
 43974                                  
 43975                                  ;endif ; ROMDOS
 43976                                  
 43977                                  ;============================================================================
 43978                                  
 43979                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43980                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43981                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43982                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43983                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43984                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43985                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43986                                  
 43987                                  ;; burasý doscode sonu
 43988                                  
 43989                                  ;============================================================================
 43990                                  ; DOSDATA
 43991                                  ;============================================================================
 43992                                  ; 29/04/2019 - Retro DOS 4.0
 43993                                  
 43994                                  ;[BITS 16]
 43995                                  
 43996                                  ;[ORG 0]
 43997                                  
 43998                                  ; 25/04/2019 - Retro DOS v4.0
 43999                                  
 44000                                  ;============================================================================
 44001                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44002                                  ;============================================================================
 44003                                  
 44004                                  ;align 16
 44005                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44006                                  	; (4970 bytes for MSDOS 6.21)
 44007                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44008                                  
 44009                                  ;============================================================================
 44010                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44011                                  ;============================================================================
 44012                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44013                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44014                                  ; 16/07/2018 - Retro DOS 3.0	
 44015                                  
 44016                                  ;Break <Initialized data and data used at DOS initialization>
 44017                                  ;----------------------------------------------------------------------------
 44018                                  
 44019                                  ; We need to identify the parts of the data area that are relevant to tasks
 44020                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44021                                  ; data will be gathered with the system code. The process data under 2.x will
 44022                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44023                                  ;
 44024                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44025                                  ; describing that data item.
 44026                                  
 44027                                  ;DOSDATA SEGMENT
 44028                                  
 44029                                  ; 04/11/2022
 44030                                  ;[ORG 0]
 44031                                  
 44032                                  ; ----------------------------------------------------------------------------
 44033                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44034                                  ; ----------------------------------------------------------------------------
 44035                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44036                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44037                                  ; ----------------------------------------------------------------------------
 44038                                  
 44039                                  ; 04/11/2022
 44040                                  
 44041                                  ;DOSDATA:0000h
 44042                                  
 44043                                  align 16
 44044                                  
 44045                                  ; ----------------------------------------------------------------------------
 44046                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44047                                  ; ----------------------------------------------------------------------------
 44048                                  
 44049                                  segment .data  vstart=0 ; 06/12/2022
 44050                                  								
 44051                                  ; ============================================================================
 44052                                  
 44053                                  ; 06/12/2022
 44054                                  ;DOSDATASTART equ $
 44055                                  DOSDATASTART:
 44056                                  
 44057                                  
 44058                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44059                                  
 44060                                  	;; 03/11/2022
 44061                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44062                                  
 44063                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44064                                  	;db	4 dup (?)	
 44065 00000000 00<rep 4h>              	times	4 db 0
 44066                                  
 44067                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44068                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44069                                  	;dw	0
 44070                                  
 44071                                  	;EVEN
 44072                                  
 44073                                  ;align 2
 44074                                  
 44075                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44076                                  ; area compatability. This location must be incremented EACH TIME the data
 44077                                  ; area here gets mucked with.
 44078                                  ;
 44079                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44080                                  
 44081                                  MSCT001S:	; LABEL BYTE
 44082                                  	
 44083                                  DataVersion:	
 44084 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44085                                  
 44086                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44087                                  ;hkn; been removed to DOSCODE above
 44088                                  
 44089                                  ;M044
 44090                                  ; First part of save area for saving last para of Window memory
 44091                                  
 44092                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44093 00000006 00<rep 8h>              	times	8 db 0
 44094                                  
 44095                                  	; MSDOS 6.21 DOSDATA:000Eh
 44096                                  MYNUM:			; Offset 000Eh
 44097 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44098                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44099 00000010 0000                    	dw	0
 44100                                  OpenLRU:
 44101 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44102                                  OEM_HANDLER: 		
 44103 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44104                                  
 44105                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44106                                  ;;			way that we leave DOS???? - jgl
 44107                                  
 44108                                  LeaveAddr:
 44109 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44110                                  RetryCount:		
 44111 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44112                                  RetryLoop:
 44113 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44114                                  LastBuffer:
 44115 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44116                                  CONTPOS:
 44117 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44118                                  arena_head:
 44119 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44120                                  
 44121                                  ;; 16/07/2018
 44122                                  ;;***************************************************************************
 44123                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44124                                  ;;***************************************************************************
 44125                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44126                                  ;;
 44127                                  ;;	AH = 52h
 44128                                  ;;
 44129                                  ;;	on return:
 44130                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44131                                  ;;		Known "invars" fields follow (varies with DOS version):
 44132                                  ;;
 44133                                  ;;	Offset Size		 Description
 44134                                  ;;
 44135                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44136                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44137                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44138                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44139                                  ;;		      0 indicates no unread input (DOS 3.x)
 44140                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44141                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44142                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44143                                  ;;	  08   dword  pointer to $CLOCK device driver
 44144                                  ;;	  0C   dword  pointer to CON device driver
 44145                                  ;;	  10   byte   number of logical drives in system
 44146                                  ;;	  11   word   maximum bytes/block of any block device
 44147                                  ;;	  13   dword  pointer to DOS cache buffer header
 44148                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44149                                  ;;		      point to the next device in device chain
 44150                                  ;;
 44151                                  ;;***************************************************************************
 44152                                  
 44153                                  ; The following block of data is used by SYSINIT. 
 44154                                  ; Do not change the order or size of this block
 44155                                  
 44156                                  ;SYSINITVAR:
 44157                                  ;----------------------------------------------------------------------------
 44158                                  SYSINITVARS:
 44159                                  DPBHEAD:
 44160 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44161                                  SFT_ADDR:
 44162 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44163                                  BCLOCK:
 44164 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44165                                  BCON:
 44166 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44167                                  MAXSEC:
 44168 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44169                                  BUFFHEAD:
 44170 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44171                                  CDSADDR:
 44172 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44173                                  SFTFCB:
 44174 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44175                                  KEEPCOUNT:
 44176 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44177                                  NUMIO:
 44178 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44179                                  CDSCOUNT:
 44180 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44181                                  
 44182                                  ; A fake header for the NUL device
 44183                                  NULDEV:
 44184 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44185                                  	;dw	8004h
 44186 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44187 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44188 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44189 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44190                                  SPLICES:
 44191 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44192                                  
 44193                                  Special_Entries:
 44194 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44195                                  UU_IFS_DOS_CALL:
 44196 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44197                                  ; 
 44198                                  ; UU_IFS_HEADER:
 44199                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44200                                  
 44201                                  ChkCopyProt:
 44202 00000061 0000                    	dw	0	; M068
 44203                                  A20OFF_PSP:
 44204 00000063 0000                    	dw	0	; M068
 44205                                  BUFFERS_PARM1:
 44206 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44207                                  BUFFERS_PARM2:
 44208 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44209                                  BOOTDRIVE:
 44210 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44211                                  DDMOVE:
 44212 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44213                                  EXT_MEM_SIZE:
 44214 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44215                                  
 44216                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44217                                  ;
 44218                                  ; Replaced by next two declarations
 44219                                  ;
 44220                                  ;UU_BUF_HASH_PTR:
 44221                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44222                                  ;UU_BUF_HASH_COUNT:
 44223                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44224                                  
 44225                                  BufferQueue:
 44226 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44227                                  DirtyBufferCount:
 44228 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44229                                  			; BUGBUG ---- change to byte
 44230                                  SC_CACHE_PTR:
 44231 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44232                                  SC_CACHE_COUNT:
 44233 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44234                                  BuffInHMA:
 44235 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44236                                  LoMemBuff:
 44237 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44238                                  			;  in Low mem when buffs are in HMA
 44239                                  ;
 44240                                  ; All variables which have UU_ as prefix can be reused for other
 44241                                  ; purposes and can be renamed. All these variables were used for
 44242                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44243                                  ; manager ---- MOHANS
 44244                                  ;
 44245                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44246                                  UU_BUF_EMS_FIRST_PAGE:	
 44247 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44248                                  
 44249                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44250                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44251                                  ;	dw	0			
 44252                                  
 44253                                  CL0FATENTRY:
 44254 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44255                                  			; is used in pack/unpack rts.
 44256                                  			; in fat.asm if cluster 0 is specified.
 44257                                  			; SR;
 44258                                  IoStatFail:
 44259 00000083 00                      	db	0	; IoStatFail has been added to 
 44260                                  			; record a fail on an I24 
 44261                                  			; issued from IOFUNC on a status call. 
 44262                                  
 44263                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44264                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44265                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44266                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44267                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44268                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44269                                  ;
 44270                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44271                                  						; state of the 	buffers page.
 44272                                  						; This one byte is retained to 
 44273                                  						; keep the size of this data 
 44274                                  						; block the same.;
 44275                                  ALLOCMSAVE:
 44276 00000084 00                      	db	0	; M063: temp var. used to 
 44277                                  			; M063: save alloc method in
 44278                                  			; M063: msproc.asm
 44279                                  A20OFF_COUNT:
 44280 00000085 00                      	db	0	; M068: indiactes the # of 
 44281                                  			; M068: int 21 calls for 
 44282                                  			; M068: which A20 is off
 44283                                  DOS_FLAG:
 44284 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44285                                  			; definitions
 44286                                  UNPACK_OFFSET:
 44287 00000087 0000                    	dw	0	; saves pointer to the start
 44288                                  			; of unpack code in exepatch.
 44289                                  			; asm.
 44290                                  UMBFLAG:
 44291 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44292                                  			; M003: link state of the UMBs
 44293                                  			; M003: whether linked or not 
 44294                                  			; M003: to the DOS arena chain
 44295                                  SAVE_AX:
 44296 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44297                                  			; M000: in msproc.asm
 44298                                  UMB_HEAD:
 44299 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44300                                  			; M000: the first umb arena by 
 44301                                  			; M000: BIOS sysinit.
 44302                                  START_ARENA:
 44303 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44304                                  			; M000: from which DOS will 
 44305                                  			; M000: start its scan for alloc.
 44306                                  
 44307                                  ; End of SYSINITVar block
 44308                                  ;----------------------------------------------------------------------------
 44309                                  
 44310                                  ; 25/04/2019 - Retro DOS v4.0
 44311                                  
 44312                                  ; 16/07/2018
 44313                                  ; MSDOS 3.3 (& MDOS 6.0)
 44314                                  
 44315                                  ;
 44316                                  ; Sharer jump table
 44317                                  ;
 44318                                  
 44319                                  ;PUBLIC	JShare
 44320                                  	;EVEN
 44321                                  
 44322                                  ;JShare	LABEL	DWORD
 44323                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44324                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44325                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44326                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44327                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44328                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44329                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44330                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44331                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44332                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44333                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44334                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44335                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44336                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44337                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44338                                  
 44339                                  align 2
 44340                                  
 44341                                  JShare:
 44342 00000090 [FD06]0000              		DW	BadCall,0
 44343 00000094 [0107]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44344 00000098 [0107]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44345 0000009C [FD06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44346 000000A0 [FD06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44347 000000A4 [FD06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44348 000000A8 [FD06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44349 000000AC [FD06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44350 000000B0 [0107]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44351 000000B4 [FD06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44352 000000B8 [FD06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44353 000000BC [FD06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44354 000000C0 [0107]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44355 000000C4 [FD06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44356 000000C8 [FD06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44357                                  
 44358                                  
 44359                                  ;============================================================================
 44360                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44361                                  ;============================================================================
 44362                                  ; 25/04/2019 - Retro DOS 4.0 
 44363                                  ; 16/07/2018 - Retro DOS 3.0	
 44364                                  
 44365                                  ;Break <Initialized data and data used at DOS initialization>
 44366                                  ;----------------------------------------------------------------------------
 44367                                  
 44368                                  ; We need to identify the parts of the data area that are relevant to tasks
 44369                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44370                                  ; data will be gathered with the system code.  The process data under 2.x will
 44371                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44372                                  ;
 44373                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44374                                  ; describing that data item.
 44375                                  
 44376                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44377                                  
 44378                                  ;
 44379                                  ; Table of routines for assignable devices
 44380                                  ;
 44381                                  ; MSDOS allows assignment if the following standard devices:
 44382                                  ;   stdin  (usually CON input)
 44383                                  ;   stdout (usually CON output)
 44384                                  ;   auxin  (usually AUX input)
 44385                                  ;   auxout (usually AUX output)
 44386                                  ;   stdlpt (usually PRN output)
 44387                                  ;
 44388                                  ; SPECIAL NOTE:
 44389                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44390                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44391                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44392                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44393                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44394                                  ;   as EOF).
 44395                                  
 44396                                  ; Default SFTs for boot up
 44397                                  
 44398                                  		;PUBLIC	SFTABL
 44399                                  
 44400                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44401 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44402 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44403 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44404                                  		;times 295 db 0 ; MSDOS 6.0
 44405 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44406                                  
 44407                                  ; the next two variables relate to the position of the logical stdout/stdin
 44408                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44409                                  ; console.
 44410                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44411 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44412 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44413                                  					;	   of buffered input call
 44414 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44415 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44416                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44417 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44418 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44419 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44420                                  switch_character:
 44421 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44422 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44423 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44424 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44425 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44426                                  
 44427                                  ; The following table is a list of addresses that the sharer patches to be
 44428                                  ; PUSH AX to enable the critical sections
 44429                                  
 44430                                  		; DOSDATA:0315h (MSDOS 6.21)
 44431                                  
 44432                                  ;PUBLIC	CritPatch
 44433                                  
 44434                                  CritPatch:	; LABEL WORD
 44435                                  
 44436                                  ;IRP sect,<critDisk,critDevice>
 44437                                  
 44438                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44439                                  ;
 44440                                  ;SR; Change code patch address to a variable in data segment
 44441                                  ;
 44442                                  ;       dw OFFSET DOSDATA: redir_patch
 44443                                  ;       dw OFFSET DOSDATA: redir_patch
 44444                                  ;
 44445                                  ;;hkn	Short_Addr  E&sect
 44446                                  ;;hkn	Short_Addr  L&sect
 44447                                  ;
 44448                                  ;ELSE
 44449                                  ;	DW	0
 44450                                  ;	DW	0
 44451                                  ;ENDIF
 44452                                  ;ENDM
 44453                                  ;	DW	0
 44454                                  
 44455                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44456                                   
 44457 00000315 [0C0D]                  	dw 	redir_patch
 44458 00000317 [0C0D]                  	dw 	redir_patch			
 44459 00000319 [0C0D]                  	dw	redir_patch
 44460 0000031B [0C0D]                  	dw 	redir_patch
 44461                                  
 44462 0000031D 0000                    	dw	0
 44463                                  
 44464                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44465                                  ; Also, IBM server 1.0 requires this also.
 44466                                  
 44467                                  	;EVEN			; Force swap area to start on word boundry
 44468 0000031F 90                      align 2
 44469                                  	;PUBLIC	SWAP_START
 44470                                  SWAP_START:	; LABEL BYTE
 44471 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44472 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44473 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44474 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44475 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44476                                  
 44477                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44478 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44479 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44480                                  ; end warning
 44481                                   
 44482 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44483                                  
 44484 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44485 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44486 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44487 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44488 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44489 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44490                                  ;				; F.C. 2/17/86
 44491 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44492 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44493                                  ;align 2
 44494                                  SWAP_ALWAYS:	; 05/08/2018
 44495 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44496                                  				;   extended error type stuff.
 44497                                  				;   NOTE: does not have Correct value on
 44498                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44499                                  				;   GetExtendedError system calls)
 44500 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44501 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44502 00000340 0000                    FirstArena:	dw 0		; first free block found
 44503 00000342 0000                    BestArena:	dw 0		; best free block found
 44504 00000344 0000                    LastArena:	dw 0		; last free block found
 44505 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44506 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44507 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44508 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44509 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44510 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44511 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44512                                  
 44513                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44514                                  	;EVEN
 44515 0000034F 90                      align 2
 44516                                  		; DOSDATA:0350h (MSDOS 6.21)
 44517 00000350 00                      DAY:		db 0		; Day of month
 44518 00000351 00                      MONTH:		db 0		; Month of year
 44519 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44520 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44521 00000356 00                      WEEKDAY:	db 0		; Day of week
 44522                                  ; end warning
 44523                                  
 44524 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44525 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44526 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44527                                  
 44528                                  ; Combination of all device call parameters
 44529                                  	;PUBLIC	DEVCALL 	;
 44530                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44531                                  DEVCALL: ; 08/08/2018
 44532 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44533 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44534 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44535 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44536 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44537                                  
 44538                                  	;PUBLIC	CALLUNIT
 44539                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44540                                  CALLFLSH: ; LABEL   WORD	;
 44541 00000367 00                      CALLMED:	db 0		; media byte
 44542                                  CALLBR:	  ; LABEL   DWORD	;
 44543                                  	;PUBLIC	CALLXAD 	;
 44544                                  CALLXAD:  ; LABEL   DWORD	;
 44545 00000368 00                      CALLRBYT:	db 0		;
 44546                                  	;PUBLIC	CALLVIDM	;
 44547                                  CALLVIDM: ; LABEL   DWORD	;
 44548 00000369 00<rep 3h>              	times 3 db 0	;
 44549                                  	;PUBLIC CallBPB		;
 44550                                  CALLBPB:  ; LABEL   DWORD	;
 44551                                  CALLSCNT:			;
 44552 0000036C 0000                    		dw 0		;
 44553                                  	;PUBLIC	CALLSSEC	;
 44554                                  CALLSSEC: ; LABEL   WORD	;
 44555 0000036E 0000                    		dw 0		;
 44556 00000370 00000000                CALLVIDRW:	dd 0		;
 44557                                  ;MSDOS 6.0
 44558 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44559 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44560                                  
 44561                                  ; Same as above for I/O calls	;
 44562                                  				;
 44563                                  	;PUBLIC	IOCall		;
 44564                                  ;IOCALL	SRHEAD	<>		;
 44565                                  IOCALL:	; 07/08/2018
 44566 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44567 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44568 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44569 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44570 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44571                                  IOFLSH:	  ; LABEL   WORD	;
 44572                                          ;PUBLIC  IORCHR		;
 44573                                  IORCHR:	  ; LABEL   BYTE	;
 44574 00000389 00                      IOMED:		db 0		;
 44575 0000038A 00000000                IOXAD:		dd 0		;
 44576 0000038E 0000                    IOSCNT:		dw 0		;	
 44577 00000390 0000                    IOSSEC:		dw 0		;
 44578                                  
 44579                                  ; Call struct for DSKSTATCHK	;
 44580 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44581 00000393 00                      		db 0
 44582 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44583 00000395 0000                    DSKSTST:	dw 0		;
 44584 00000397 00<rep 8h>              	times 8	db 0		;
 44585 0000039F 00                      DSKCHRET:	db 0		;
 44586                                  
 44587                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44588                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44589                                  ;hkn   short_addr  DEVIOBUF	;
 44590                                  	
 44591 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44592 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44593 000003A4 0100                    DSKSTCNT:	dw 1		;
 44594 000003A6 0000                    		dw 0		;
 44595                                  
 44596 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44597                                  
 44598                                  ;MSDOS 6.0
 44599                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44600 000003A9 00000000                		dd 0		;MS. position
 44601 000003AD 00000000                		dd 0		;MS. length
 44602                                  
 44603                                  ;hkn; the foll. was moved from dosmes.asm.
 44604                                  
 44605                                  	;EVEN
 44606 000003B1 90                      align 2				; needed to maintain offsets
 44607                                  
 44608                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44609                                  USERNUM:
 44610 000003B2 0000                     		dw 0		; 24 bit user number
 44611 000003B4 00                      		db 0
 44612                                  ;IF IBM
 44613                                  ;IF IBMCOPYRIGHT
 44614                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44615                                  ;ELSE
 44616                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44617                                  ;ENDIF
 44618                                  ;ELSE
 44619 000003B5 FF                      OEMNUM:		DB 0FFh
 44620                                  ;ENDIF
 44621                                  
 44622                                  ;============================================================================
 44623                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44624                                  ;============================================================================
 44625                                  ; 25/04/2019 - Retro DOS 4.0
 44626                                  
 44627                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44628                                  ; ----------------------------------------------------------
 44629                                  ; This data section which was named as uninitialized data
 44630                                  ; (as overlayed by initialization code) but follows 
 44631                                  ; initialized data section from DOSDATA:03B6h address
 44632                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44633                                  ; and there is not overlaying..)
 44634                                  ; **********************************************************
 44635                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44636                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44637                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44638                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44639                                  ; TIMEBUF is at offset 03B6h.
 44640                                  ; **********************************************************	
 44641                                  
 44642                                  ;Break <Uninitialized data overlayed by initialization code>
 44643                                  ;----------------------------------------------------------------------------
 44644                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44645                                  ; Init code overlaps with data area below
 44646                                  
 44647                                  ; 	ORG     0
 44648                                  
 44649                                  MSDAT001S:	; label byte
 44650                                  
 44651                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44652                                  TIMEBUF: ;	times 6 db 0
 44653 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44654 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44655                                  
 44656                                  ; The following areas are used as temp buffer in EXEC system call
 44657                                  
 44658                                  ; DOSDATA:03BEh
 44659                                  OPENBUF: ;times 64  dw	0
 44660 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44661                                  RENBUF:	
 44662 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44663                                  
 44664                                  ; Buffer for search calls
 44665                                  SEARCHBUF:	
 44666 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44667                                  DUMMYCDS:  ;times 88 db 0
 44668 000004F3 00<rep 58h>             	times	curdirLen db 0
 44669                                  
 44670                                  ; End of contiguous buffer
 44671                                   
 44672                                  ; Temporary directory entry for use by many routines. Device directory
 44673                                  ; entries (bogus) are built here.
 44674                                  
 44675                                  ; DOSDATA:054Bh
 44676                                  
 44677                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44678                                  
 44679                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44680                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44681                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44682                                  
 44683                                  NAME1:	
 44684 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44685                                  NAME2:
 44686 00000557 00<rep Dh>              	times	13 db	0 		;
 44687                                  DESTSTART:
 44688 00000564 0000                    	dw	0			;
 44689                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44690                                  	;times	5  db	0
 44691 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44692                                  
 44693                                  ; End Temporary directory entry.
 44694                                  
 44695 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44696                                  EXTFCB:	
 44697 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44698                                  SATTRIB:
 44699 0000056D 00                      	db	0		; Storage for search attributes
 44700                                  OPEN_ACCESS:
 44701 0000056E 00                      	db	0		; access of open system call
 44702                                  FOUNDDEL:
 44703 0000056F 00                      	db	0		; true => file was deleted
 44704                                  FOUND_DEV:
 44705 00000570 00                      	db	0		; true => search found a device
 44706                                  FSPLICE:
 44707 00000571 00                      	db	0		; true => do a splice in transpath
 44708                                  FSHARING:
 44709 00000572 00                      	db	0		; TRUE => no redirection
 44710                                  SECCLUSPOS:
 44711 00000573 00                      	db	0		; Position of first sector within cluster
 44712 00000574 00                      TRANS:	db	0		;
 44713 00000575 00                      READOP:	db	0		;
 44714                                  THISDRV:
 44715 00000576 00                      	db	0		;
 44716                                  CLUSFAC:
 44717 00000577 00                      	db	0		;
 44718                                  CLUSSPLIT:
 44719 00000578 00                      	db	0		;
 44720                                  INSMODE:
 44721 00000579 00                      	db	0		; true => insert mode in buffered read
 44722 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44723 0000057B 00                      VOLID:	db	0		;
 44724                                  EXIT_TYPE:
 44725 0000057C 00                      	db	0		; type of exit...
 44726                                   
 44727                                  	;EVEN
 44728                                  
 44729 0000057D 90                      align 2
 44730                                  
 44731                                  ; DOSDATA:057Eh
 44732                                  
 44733                                  ; WARNING - the following two items are accessed as a word
 44734                                  
 44735                                  CREATING:
 44736 0000057E 00                      	db	0		; true => creating a file
 44737 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44738                                  				; = DIRFREE iff BUGBUG
 44739                                  EXITHOLD:
 44740 00000580 00000000                	dd	0		; Temp location for proc terminate
 44741                                  USER_SP:
 44742 00000584 0000                    	dw	0		; User SP for system call
 44743                                  USER_SS:
 44744 00000586 0000                    	dw	0		; User SS for system call
 44745                                  CONTSTK:
 44746 00000588 0000                    	dw	0		;
 44747                                  THISDPB:
 44748 0000058A 00000000                	dd	0		;
 44749                                  CLUSSAVE:
 44750 0000058E 0000                    	dw	0		;
 44751                                  CLUSSEC:
 44752 00000590 00000000                	dd	0		;>32mb			AC0000
 44753                                  PREREAD:
 44754 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44755 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44756                                  FATBYTE:
 44757 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44758                                  ; DOSDATA:059Ah
 44759 0000059A 00000000                DEVPT:	dd	0		;
 44760                                  THISSFT:
 44761 0000059E 00000000                	dd	0		; Address of user SFT
 44762                                  THISCDS:
 44763 000005A2 00000000                	dd	0		; Address of current CDS
 44764                                  THISFCB:
 44765 000005A6 00000000                	dd	0		; Address of user FCB
 44766 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44767 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44768 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44769                                  WFP_START:
 44770 000005B2 0000                    	dw	0		;
 44771                                  REN_WFP:
 44772 000005B4 0000                    	dw	0		;
 44773                                  CURR_DIR_END:
 44774 000005B6 0000                    	dw	0		;
 44775                                  NEXTADD:
 44776 000005B8 0000                    	dw	0		;
 44777                                  LASTPOS:
 44778 000005BA 0000                    	dw	0		;
 44779                                  CLUSNUM:
 44780 000005BC 0000                    	dw	0		;
 44781 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44782                                  DIRSTART:
 44783 000005C2 0000                    	dw	0		;
 44784 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44785 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44786                                                                  ; sectors
 44787                                  BYTSECPOS:
 44788 000005CC 0000                    	dw	0		; Position of first byte within sector
 44789                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44790 000005CE 0000<rep 2h>                    times	2 dw 0
 44791                                  BYTCNT1:
 44792 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44793                                  BYTCNT2:
 44794 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44795 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44796                                  ; DOSDATA:05D8h
 44797                                  ENTFREE:
 44798 000005D8 0000                    	dw	0		;
 44799                                  ENTLAST:
 44800 000005DA 0000                    	dw	0		;
 44801                                  NXTCLUSNUM:
 44802 000005DC 0000                    	dw	0		;
 44803                                  GROWCNT:
 44804 000005DE 00000000                	dd	0		;
 44805 000005E2 00000000                CURBUF:	dd	0		;
 44806 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44807 000005EA 0000                    SAVEBX:	dw	0		;
 44808 000005EC 0000                    SAVEDS:	dw	0		;
 44809                                  RESTORE_TMP:
 44810 000005EE 0000                    	dw	0		; return address for restore world
 44811 000005F0 0000                    NSS:	dw	0
 44812 000005F2 0000                    NSP:	dw	0
 44813                                  ; DOSDATA:05F4h
 44814                                  EXTOPEN_FLAG:
 44815 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44816                                  EXTOPEN_ON:
 44817 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44818                                  EXTOPEN_IO_MODE:
 44819 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44820                                  SAVE_DI:
 44821 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44822                                  SAVE_ES:
 44823 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44824                                  SAVE_DX:
 44825 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44826                                  SAVE_CX:
 44827 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44828                                  SAVE_BX:
 44829 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44830                                  SAVE_SI:
 44831 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44832                                  SAVE_DS:
 44833 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44834                                  
 44835                                  ; DOSDATA:0607h
 44836                                  
 44837                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44838                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44839                                  ; the high 16, the low 16 are still in the register.
 44840                                  
 44841                                  HIGH_SECTOR:	
 44842 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44843                                  	; 25/09/2023
 44844                                  OffsetMagicPatch:
 44845                                  	;dw	MagicPatch	;scottq 8/6/92
 44846                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44847 00000609 0000                    	dw	0
 44848                                  				;see dos\mpatch.asm
 44849                                  DISK_FULL:
 44850 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44851                                  TEMP_VAR:
 44852 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44853                                  TEMP_VAR2:
 44854 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44855 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44856                                  DOS34_FLAG:
 44857 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44858                                  NO_FILTER_PATH:
 44859 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44860                                  NO_FILTER_DPATH:
 44861 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44862                                  ; M008
 44863                                  AbsRdWr_SS:
 44864 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44865                                  AbsRdWr_SP:
 44866 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44867                                  
 44868                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44869                                  ; M008
 44870                                   
 44871                                   
 44872                                  ; make those pushes fast!!!
 44873                                  
 44874                                  ;EVEN
 44875                                  
 44876 0000061F 90                      align 2
 44877                                  
 44878                                  StackSize   equ 180h  ; 384	; gross but effective
 44879                                  
 44880                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44881                                  ;				; made up their minds about
 44882                                   
 44883                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44884                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44885                                  
 44886                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44887                                   
 44888 00000620 00<rep 180h>                    times	StackSize db	0	;
 44889                                  AUXSTACK:			; LABEL   BYTE
 44890                                   
 44891 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44892                                  DSKSTACK:			; LABEL   BYTE
 44893                                   
 44894 00000920 00<rep 180h>                    times	StackSize db	0	;
 44895                                  IOSTACK:			; LABEL   BYTE
 44896                                  
 44897                                  ; DOSDATA:0AA0h 
 44898                                   
 44899                                  ; patch space for Boca folks.
 44900                                  ; Say What????!!! This does NOT go into the swappable area!
 44901                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44902                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44903                                   
 44904                                  IBMPATCH: ; label byte
 44905                                  PRINTER_FLAG:
 44906 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44907                                  VOLCHNG_FLAG:
 44908 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44909                                  VIRTUAL_OPEN:
 44910 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44911                                   
 44912                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44913                                  
 44914                                  FSeek_drive:
 44915 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44916                                  FSeek_firclus:
 44917 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44918                                  FSeek_logclus:
 44919 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44920                                  FSeek_logsave:
 44921 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44922                                  
 44923                                  ; DOSDATA:0AAAh
 44924                                  
 44925                                  TEMP_DOSLOC:
 44926 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44927                                  				;at SYSINIT time.
 44928                                  SWAP_END:  ; LABEL   BYTE
 44929                                   
 44930                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44931                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44932                                  ; to include this byte.
 44933                                   
 44934 00000AAC 00                      	db	0
 44935                                  
 44936                                  ; DOSDATA:0AADh
 44937                                   
 44938                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44939                                  
 44940                                  ;DOSDATA    ENDS
 44941                                  
 44942                                  ;============================================================================
 44943                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44944                                  ;============================================================================
 44945                                  ; 27/04/2019 - Retro DOS 4.0
 44946                                  ; 16/07/2018 - Retro DOS 3.0
 44947                                  
 44948                                  ;DOSDATA Segment
 44949                                  
 44950                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44951                                  
 44952                                  ;
 44953                                  ; upper case table
 44954                                  ; ---------------------------------------------------------------------------
 44955                                  UCASE_TAB:	; label   byte
 44956 00000AAD 8000                    	dw	128
 44957 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44958 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44959 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44960 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44961 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44962 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44963 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44964 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44965 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44966 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44967 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44968 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44969 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44970 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44971 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44972 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44973                                  ;
 44974                                  ; file upper case table
 44975                                  ; ---------------------------------------------------------------------------
 44976                                  FILE_UCASE_TAB:	; label  byte
 44977 00000B2F 8000                    	dw	128
 44978 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44979 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44980 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44981 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44982 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44983 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44984 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44985 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44986 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44987 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44988 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44989 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44990 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44991 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44992 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44993 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44994                                  ;
 44995                                  ; file char list
 44996                                  ; ---------------------------------------------------------------------------
 44997                                  FILE_CHAR_TAB:	; label  byte
 44998 00000BB1 1600                    	dw	22				; length
 44999 00000BB3 0100FF                  	db	1,0,255 			; include all
 45000 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45001 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45001 00000BC2 7C3C3E2B3D3B2C     
 45002                                  	;db	24 dup (?)			; reserved
 45003 00000BC9 00<rep 18h>             	times	24 db 0
 45004                                  
 45005                                  ;
 45006                                  ; collate table
 45007                                  ; ---------------------------------------------------------------------------
 45008                                  COLLATE_TAB:	; label   byte
 45009 00000BE1 0001                    	dw	256
 45010 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45011 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45012 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45013 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45014 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45015 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45016 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45017 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45018 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45019 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45020 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45021 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45022 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45023 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45024 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45025 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45026 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45027 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45028 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45029 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45030 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45031 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45032 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45033 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45034 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45035 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45036 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45037 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45038 00000CC3 E053                    	db	224,"S"
 45039 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45040 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45041 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45042 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45043                                  
 45044                                  ; ------------------------------------------------<MSKK01>----------------------
 45045                                  
 45046                                  ; DOSDATA:0CE3h
 45047                                  
 45048                                  ; 29/04/2019
 45049                                  
 45050                                  ; dbcs is not supported in DOS 3.3
 45051                                  ;		   DBCS_TAB	    CC_DBCS <>
 45052                                  ;
 45053                                  ; DBCS for DOS 4.00			   2/12/KK
 45054                                  
 45055                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45056                                  ; ------------------------------------------------<MSKK01>----------------------
 45057                                  ;ifdef	DBCS
 45058                                  ; ifdef	  JAPAN
 45059                                  ;		dw	6		; <MSKK01>
 45060                                  ;		db	081h,09fh	; <MSKK01>
 45061                                  ;		db	0e0h,0fch	; <MSKK01>
 45062                                  ;		db	0,0		; <MSKK01>
 45063                                  ;
 45064                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45065                                  ; endif
 45066                                  ; ifdef	  TAIWAN
 45067                                  ;		dw	4		; <TAIWAN>
 45068                                  ;		db	081h,0FEh	; <TAIWAN>
 45069                                  ;		db	0,0		; <TAIWAN>
 45070                                  ;
 45071                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45072                                  ; endif
 45073                                  ; ifdef   KOREA                         ; Keyl
 45074                                  ;               dw      4               ; <KOREA>
 45075                                  ;               db      0A1h,0FEh       ; <KOREA>
 45076                                  ;               db      0,0             ; <KOREA>
 45077                                  ;
 45078                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45079                                  ;  endif
 45080                                  ;else
 45081 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45082                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45083 00000CE5 00<rep 10h>             		times	16 db 0
 45084                                  
 45085                                  ;		dw	6		;  2/12/KK
 45086                                  ;		db	081h,09Fh	;  2/12/KK
 45087                                  ;		db	0E0h,0FCh	;  2/12/KK
 45088                                  ;		db	0,0		;  2/12/KK
 45089                                  ;
 45090                                  ;endif
 45091                                  ; ------------------------------------------------<MSKK01>----------------------
 45092                                  
 45093                                  ; DOSDATA:0CF5h
 45094                                  
 45095                                  ; ---------------------------------------------------------------------------
 45096                                  ;
 45097                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45098                                  ;     ENTRY: AL = Character to map
 45099                                  ;     EXIT:  AL = The converted character
 45100                                  ; Alters no registers except AL and flags.
 45101                                  ; The routine should do nothing to chars below 80H.
 45102                                  ; ---------------------------------------------------------------------------
 45103                                  ; Example:
 45104                                  
 45105                                  MAP_CASE:
 45106                                  ;Procedure MAP_CASE,FAR
 45107                                  
 45108 00000CF5 3C80                    	CMP	AL,80h
 45109 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45110 00000CF9 CB                      	RETF
 45111                                  Map1:
 45112 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45113 00000CFC 1E                      	PUSH	DS
 45114 00000CFD 53                      	PUSH	BX
 45115 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45116                                  FINISH:
 45117 00000D01 0E                      	PUSH	CS		;Move to DS
 45118 00000D02 1F                      	POP	DS
 45119 00000D03 D7                      	XLAT			;Get upper case character
 45120 00000D04 5B                      	POP	BX
 45121 00000D05 1F                      	POP	DS
 45122                                  L_RET:	
 45123 00000D06 CB                      	RETF
 45124                                  
 45125                                  ;EndProc MAP_CASE
 45126                                  
 45127                                  ; ---------------------------------------------------------------------------
 45128                                  
 45129                                  ; The variables for ECS version are moved here for the same data alignments
 45130                                  ; as IBM-DOS and MS-DOS.
 45131                                  
 45132                                  InterChar:
 45133 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45134                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45135                                  DUMMY:	; LABEL   WORD
 45136                                  InterCon:  
 45137 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45138                                  SaveCurFlg:
 45139 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45140                                  
 45141                                  ; ---------------------------------------------------------------------------
 45142                                  
 45143 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45144                                  redir_patch:
 45145 00000D0C 00                      	  db	0
 45146                                  
 45147                                  ; DOSDATA:0D0Dh
 45148                                  
 45149                                  Mark1:	; label byte
 45150                                  
 45151                                  ;IF2
 45152                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45153                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45154                                  ;	ENDIF
 45155                                  ;ENDIF
 45156                                  
 45157 00000D0D 00<rep 5h>              	  times 5 db 0
 45158                                  
 45159                                  ;############################################################################
 45160                                  ;
 45161                                  ; ** HACK FOR DOS 4.0 REDIR **
 45162                                  ; 
 45163                                  ; The redir requires the following:
 45164                                  ;
 45165                                  ;	MSVERS	offset D12H
 45166                                  ;	YRTAB	offset D14H
 45167                                  ; 	MONTAB	offset D1CH
 45168                                  ;
 45169                                  ; WARNING! WARNING!
 45170                                  ; 
 45171                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45172                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45173                                  ;
 45174                                  ; CURRENTLY MARK1 = 0D0DH
 45175                                  ;
 45176                                  ;############################################################################
 45177                                  
 45178                                  	;ORG	0D12h
 45179                                  
 45180                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45181                                  
 45182                                  	;db	6
 45183                                  	;db	20
 45184                                  
 45185                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45186                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45187 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45188 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45189                                  
 45190                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45191                                  ;
 45192                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45193                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45194                                  
 45195                                  ; Days in year
 45196                                  
 45197                                  YRTAB:   
 45198 00000D14 C8A6                    	DB	200,166			; Leap year
 45199 00000D16 C8A5                    	DB	200,165
 45200 00000D18 C8A5                    	DB	200,165
 45201 00000D1A C8A5                    	DB	200,165
 45202                                  
 45203                                  ; Days of each month
 45204                                  
 45205                                  MONTAB:        
 45206 00000D1C 1F                      	DB      31                      ; January
 45207                                  february:
 45208 00000D1D 1C                      	DB	28 			; February--reset each 
 45209                                  					; time year changes
 45210 00000D1E 1F                              DB      31                      ; March
 45211 00000D1F 1E                              DB      30                      ; April
 45212 00000D20 1F                              DB      31                      ; May
 45213 00000D21 1E                              DB      30                      ; June
 45214 00000D22 1F                              DB      31                      ; July
 45215 00000D23 1F                              DB      31                      ; August
 45216 00000D24 1E                              DB      30                      ; September
 45217 00000D25 1F                              DB      31                      ; October
 45218 00000D26 1E                              DB      30                      ; November
 45219 00000D27 1F                              DB      31                      ; December
 45220                                  
 45221                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45222                                  
 45223                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45224                                  
 45225                                  SysInitTable:
 45226                                  	;dw	SYSINITVAR
 45227 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45228 00000D2A 0000                            dw      0		; segment
 45229 00000D2C [0012]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45230 00000D2E 0000                            dw      0		; segment of pointer
 45231                                  
 45232                                  ; DOS 3.3 F.C. 6/12/86
 45233                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45234                                  
 45235                                  FastTable:				; a better name
 45236                                  FastOpenTable:
 45237 00000D30 0200                    	dw      2                       ; number of entries
 45238 00000D32 [A412]                  	dw      FastRet			; pointer to ret instr.
 45239 00000D34 0000                    	dw      0                       ; and will be modified by
 45240 00000D36 [A412]                  	dw      FastRet			; FASTxxx when loaded in
 45241 00000D38 0000                    	dw      0                       
 45242                                  
 45243                                  ; DOS 3.3 F.C. 6/12/86
 45244                                  
 45245                                  FastFlg:				; flags
 45246                                  FastOpenFlg:
 45247 00000D3A 00                      	db	0			; don't change the foll: order  
 45248                                  
 45249                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45250                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45251                                  ; or filled by FastOPen when calling FastOpen Lookup
 45252                                  
 45253                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45254                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45255                                  	;times	11 db 0
 45256 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45257                                  
 45258                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45259                                  ; when calling FastOpen Lookup
 45260                                  
 45261                                  Dir_Info_Buff:	; label  byte
 45262                                  	;db   	SIZE dir_entry dup (0)
 45263                                  	;times	32 db 0
 45264 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45265                                  
 45266                                  Next_Element_Start:
 45267 00000D66 0000                    	dw	0			; save next element start offset
 45268                                  Del_ExtCluster:
 45269 00000D68 0000                    	dw	0			; for dos_delete                       
 45270                                  
 45271                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45272                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45273                                  ; not to destroy the INT 21 stack saved for the user.
 45274                                  
 45275                                  USER_SP_2F:	; LABEL  WORD
 45276 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45277                                  
 45278                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45279                                  DOS_TEMP:	; label  word		; temporary word
 45280                                  FAKE_STACK_2F:  
 45281                                  	; dw  14 dup (0)		; 12 register temporary storage
 45282 00000D6C 0000<rep Eh>            	times 14 dw 0
 45283                                  
 45284                                  Hash_Temp: 	;label  word		; temporary word             
 45285                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45286 00000D88 0000<rep 4h>            	times 4 dw 0
 45287                                              	
 45288                                  SCAN_FLAG:	
 45289 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45290                                  DATE_FLAG:
 45291 00000D91 0000                    	dw     0                	; flag to update the date
 45292                                  
 45293                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45294 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45295                                  
 45296                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45297 00000D95 00000000                	dd     0               		; for extended error                   
 45298 00000D99 00000000                	dd     0			; for parser                           
 45299 00000D9D 00000000                	dd     0			; for critical errror                  
 45300 00000DA1 00000000                	dd     0			; for IFS                              
 45301 00000DA5 00000000                	dd     0			; for code reduction                   
 45302                                  
 45303                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45304 00000DA9 FFFFFFFF                	dd     -1                                                        
 45305                                  SC_SECTOR_SIZE:
 45306 00000DAD 0000                    	dw	0			; sector size for SC                 
 45307                                  SC_DRIVE:
 45308 00000DAF 00                      	db	0			; drive # for secondary cache        
 45309                                  CurSC_DRIVE:
 45310 00000DB0 FF                      	db	-1			; current SC drive                   
 45311                                  CurSC_SECTOR:
 45312 00000DB1 00000000                	dd	0			; current SC starting sector         
 45313                                  SC_STATUS:
 45314 00000DB5 0000                    	dw	0			; SC status word                     
 45315                                  SC_FLAG:
 45316 00000DB7 00                      	db	0			; SC flag                            
 45317                                  AbsDskErr:
 45318 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45319                                                                                            
 45320                                  NO_NAME_ID:	; label byte                                                           
 45321 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45321 00000DC3 2020               
 45322                                  
 45323                                  ;hkn; moved from TABLE segment in kstrin.asm
 45324                                  
 45325                                  KISTR001S:	; label	byte		; 2/17/KK
 45326 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45327                                  KISTR001E:	; label	byte		; 2/17/KK
 45328                                  
 45329                                  ; the nul device driver used to be part of the code. However, since the 
 45330                                  ; header is in the data, and the entry points are only given as an offset,
 45331                                  ; the strategy and interrupt entry points must also be in the data now.
 45332                                  
 45333                                  ; DOSDATA:0DC6h
 45334                                  
 45335                                  SNULDEV:
 45336                                  ;procedure snuldev,far
 45337                                  	;or	word [es:bx+3],100h
 45338                                  	; 17/12/2022
 45339                                  	;or	byte [es:bx+4],01h
 45340                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45341                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45342 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45343                                  INULDEV:
 45344 00000DCC CB                      	retf				; must not be a return!
 45345                                  ;endproc snuldev
 45346                                  
 45347                                  ;M044
 45348                                  ; Second part of save area for saving last para of Windows memory
 45349                                  
 45350                                  WinoldPatch2:
 45351                                  	;db	8 dup (?)	; M044
 45352 00000DCD 00<rep 8h>              	times	8 db 0	
 45353                                  UmbSave2:
 45354                                  	;db	5 dup (?)	; M062
 45355 00000DD5 00<rep 5h>              	times	5 db 0
 45356                                  UmbSaveFlag:
 45357 00000DDA 00                      	db	0		; M062
 45358                                  
 45359                                  ; DOSDATA:0DDBh
 45360                                  
 45361                                  Mark2:	; label byte
 45362                                  
 45363                                  ;IF2
 45364                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45365                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45366                                  ;	ENDIF
 45367                                  ;ENDIF
 45368                                  
 45369                                  ;############################################################################
 45370                                  ;
 45371                                  ; ** HACK FOR DOS 4.0 REDIR **
 45372                                  ; 
 45373                                  ; The redir requires the following:
 45374                                  ;
 45375                                  ;	ERR_TABLE_21	offset DDBH
 45376                                  ;	ERR_TABLE_24	offset E5BH
 45377                                  ; 	ErrMap24	offset EABH
 45378                                  ;
 45379                                  ; WARNING! WARNING!
 45380                                  ;
 45381                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45382                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45383                                  ;
 45384                                  ; CURRENTLY MARK2 = 0DD0H
 45385                                  ;
 45386                                  ;############################################################################
 45387                                  
 45388                                  	;ORG	0DDBh
 45389                                  
 45390                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45391                                  
 45392                                  ; ---------------------------------------------------------------------------
 45393                                  ;
 45394                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45395                                  ; errors. Each entry is 4 bytes long:
 45396                                  ;
 45397                                  ;       Err#,Class,Action,Locus
 45398                                  ;
 45399                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45400                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45401                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45402                                  ;
 45403                                  ; ---------------------------------------------------------------------------
 45404                                  
 45405                                  ;ErrTab  Macro   err,class,action,locus
 45406                                  ;ifidn <locus>,<0FFh>
 45407                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45408                                  ;ELSE
 45409                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45410                                  ;ENDIF
 45411                                  ;ENDM
 45412                                  
 45413                                  ERR_TABLE_21: ; LABEL   BYTE
 45414 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45415 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45416 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45417 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45418 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45419 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45420 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45421 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45422 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45423 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45424 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45425 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45426 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45427 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45428 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45429 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45430 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45431 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45432 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45433 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45434 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45435 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45436 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45437 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45438 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45439 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45440 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45441 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45442                                      ; MSDOS 6.0
 45443 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45444 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45445 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45446 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45447                                  
 45448                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45449                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45450                                  ;		db 2,8,3,2
 45451                                  ;		db 3,8,3,2
 45452                                  ;		db 4,1,4,1
 45453                                  ;		db 5,3,3,0FFh
 45454                                  ;		db 6,7,4,1
 45455                                  ;		db 7,7,5,5
 45456                                  ;		db 8,1,4,5
 45457                                  ;		db 9,7,4,5
 45458                                  ;		db 0Ah,7,4,5
 45459                                  ;		db 0Bh,9,3,1
 45460                                  ;		db 0Ch,7,4,1
 45461                                  ;		db 0Dh,9,4,1
 45462                                  ;		db 0Fh,8,3,2
 45463                                  ;		db 10h,3,3,2
 45464                                  ;		db 11h,0Dh,3,2
 45465                                  ;		db 12h,8,3,2
 45466                                  ;		db 50h,0Ch,3,2
 45467                                  ;		db 20h,0Ah,2,2
 45468                                  ;		db 21h,0Ah,2,2
 45469                                  ;		db 54h,1,4,0FFh
 45470                                  ;		db 56h,3,3,1
 45471                                  ;		db 52h,1,4,2
 45472                                  ;		db 32h,9,3,3
 45473                                  ;		db 55h,0Ch,3,3
 45474                                  ;		db 57h,9,3,1
 45475                                  ;		db 53h,0Dh,4,1
 45476                                  ;		db 24h,1,4,5
 45477                                  ; MSDOS 6.0 (MSDOS 6.21)
 45478                                  ;		db 26h,1,4,1
 45479                                  ;		db 27h,1,4,1
 45480                                  ;		db 5Ah,0Dh,4,2
 45481                                  ; MSDOS 6.0 & MSDOS 3.3
 45482                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45483                                  
 45484                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45485                                  
 45486                                  ; ---------------------------------------------------------------------------
 45487                                  ;
 45488                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45489                                  ; errors. Each entry is 4 bytes long:
 45490                                  ;
 45491                                  ;       Err#,Class,Action,Locus
 45492                                  ;
 45493                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45494                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45495                                  ; THE END.
 45496                                  ;
 45497                                  ; ---------------------------------------------------------------------------
 45498                                  
 45499                                  ERR_TABLE_24: ; LABEL   BYTE
 45500 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45501 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45502 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45503 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45504 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45505 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45506 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45507 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45508 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45509 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45510 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45511 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45512 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45513 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45514 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45515 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45516 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45517 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45518 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45519 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45520                                  
 45521                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45522                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45523                                  ;		db 14h,4,5,1
 45524                                  ;		db 15h,5,7,0FFh
 45525                                  ;		db 16h,4,5,1
 45526                                  ;		db 17h,0Bh,4,2
 45527                                  ;		db 18h,4,5,1
 45528                                  ;		db 19h,5,1,2
 45529                                  ;		db 1Ah,0Bh,7,2
 45530                                  ;		db 1Bh,0Bh,4,2
 45531                                  ;		db 1Ch,2,7,4
 45532                                  ;		db 1Dh,5,4,0FFh
 45533                                  ;		db 1Eh,5,4,0FFh
 45534                                  ;		db 1Fh,0Dh,4,0FFh
 45535                                  ;		db 20h,0Ah,2,2
 45536                                  ;		db 21h,0Ah,2,2
 45537                                  ;		db 22h,0Bh,7,2
 45538                                  ;		db 32h,9,3,3
 45539                                  ;		db 23h,7,4,1
 45540                                  ;		db 24h,1,4,5
 45541                                  ;		db 0FFh,0Dh,5,0FFh
 45542                                  
 45543                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45544                                  
 45545                                  ; ---------------------------------------------------------------------------
 45546                                  ;
 45547                                  ; We need to map old int 24 errors and device driver errors into the new set
 45548                                  ; of errors. The following table is indexed by the new errors
 45549                                  ;
 45550                                  ; ---------------------------------------------------------------------------
 45551                                  
 45552                                  ;Public  ErrMap24
 45553                                  ErrMap24: ; Label   BYTE
 45554 00000EAB 13                          DB  error_write_protect	; 0
 45555 00000EAC 14                          DB  error_bad_unit		; 1
 45556 00000EAD 15                          DB  error_not_ready		; 2
 45557 00000EAE 16                          DB  error_bad_command	; 3
 45558 00000EAF 17                          DB  error_CRC		; 4
 45559 00000EB0 18                          DB  error_bad_length	; 5
 45560 00000EB1 19                          DB  error_seek		; 6
 45561 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45562 00000EB3 1B                          DB  error_sector_not_found	; 8
 45563 00000EB4 1C                          DB  error_out_of_paper	; 9
 45564 00000EB5 1D                          DB  error_write_fault	; A
 45565 00000EB6 1E                          DB  error_read_fault	; B
 45566 00000EB7 1F                          DB  error_gen_failure	; C
 45567 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45568 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45569 00000EBA 22                          DB  error_wrong_disk	; F
 45570                                  
 45571                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45572                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45573                                  	
 45574                                  ErrMap24End: ; LABEL   BYTE
 45575                                  
 45576                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45577                                  
 45578                                  ; ---------------------------------------------------------------------------
 45579                                  
 45580                                  ; 27/04/2019 - Retro DOS v4.0
 45581                                  
 45582                                  FIRST_BUFF_ADDR:
 45583 00000EBB 0000                    	dw	0			; first buffer address               
 45584                                  SPECIAL_VERSION:
 45585 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45586                                  FAKE_COUNT:
 45587 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45588                                  OLD_FIRSTCLUS:
 45589 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45590                                  
 45591                                  ; ---------------------------------------------------------------------------
 45592                                  
 45593                                  ;smr; moved from TABLE segment in exec.asm
 45594                                  
 45595 00000FC0 0000                    exec_init_SP: dw 0
 45596 00000FC2 0000                    exec_init_SS: dw 0
 45597 00000FC4 0000                    exec_init_IP: dw 0
 45598 00000FC6 0000                    exec_init_CS: dw 0
 45599                                  
 45600                                  exec_signature:
 45601 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45602                                  exec_len_mod_512:
 45603 00000FCA 0000                    	dw	0	; low 9 bits of length
 45604                                  exec_pages:
 45605 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45606                                  exec_rle_count:
 45607 00000FCE 0000                    	dw	0	; count of reloc entries
 45608                                  exec_par_dir:
 45609 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45610                                  exec_min_BSS:
 45611 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45612                                  exec_max_BSS:
 45613 00000FD4 0000                    	dw	0	; max number of para of BSS
 45614                                  exec_SS:
 45615 00000FD6 0000                    	dw	0	; stack of image
 45616                                  exec_SP:
 45617 00000FD8 0000                    	dw	0	; SP of image
 45618                                  exec_chksum:
 45619 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45620                                  exec_IP:
 45621 00000FDC 0000                    	dw	0	; IP of entry
 45622                                  exec_CS:
 45623 00000FDE 0000                    	dw	0	; CS of entry
 45624                                  exec_rle_table:
 45625 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45626                                  
 45627                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45628                                  
 45629                                  ;smr; eom
 45630                                  
 45631                                  ; ---------------------------------------------------------------------------
 45632                                  
 45633                                  ;SR;
 45634                                  ; WIN386 instance table for DOS
 45635                                  
 45636                                  Win386_Info:
 45637 00000FE2 0300                    	db	3, 0
 45638 00000FE4 000000000000000000-     	dd	0, 0, 0
 45638 00000FED 000000             
 45639 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45640                                  
 45641                                  Instance_Table:
 45642 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45643 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45644 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45645 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45646 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45647 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45648 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45649 0000101E 00000000                	dw	0, 0
 45650                                  
 45651                                  ; M001; SR;
 45652                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45653                                  ; M001; some DOS variables. Note that the only really important variable in 
 45654                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45655                                  ; M001; which does not need to be done in DOS 5.0. 
 45656                                  
 45657                                  ; 29/12/2022
 45658                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45659                                  
 45660                                  Win386_DOSVars:
 45661 00001022 05                      	db	5	;Major version 5 ; M001
 45662 00001023 00                      	db	0	;Minor version 0 ; M001
 45663 00001024 [EC05]                  	dw	SAVEDS	; M001
 45664 00001026 [EA05]                  	dw	SAVEBX	; M001
 45665 00001028 [2103]                  	dw	INDOS	; M001
 45666 0000102A [3E03]                  	dw	USER_ID	; M001
 45667 0000102C [1503]                  	dw	CritPatch ; M001
 45668 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45669                                  
 45670                                  ;SR;
 45671                                  ; Flag to indicate whether WIN386 is running or not
 45672                                  
 45673 00001030 00                      IsWin386: db	0
 45674                                  
 45675                                  ;M018
 45676                                  ; This variable contains the path to the VxD device needed for Win386
 45677                                  
 45678 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45678 0000103A 2E33383600         
 45679                                  
 45680                                  ;End WIN386 support
 45681                                  
 45682                                  ; ---------------------------------------------------------------------------
 45683                                  
 45684                                  ;SR;
 45685                                  ; These variables have been added for the special lie support for device
 45686                                  ;drivers.
 45687                                  ;
 45688                                  
 45689                                  DriverLoad:	
 45690 0000103F 01                      	db	1	;initialized to do special handling
 45691                                  BiosDataPtr:
 45692 00001040 00000000                	dd	0
 45693                                  
 45694                                  ; 29/12/2022 - Retro DOS v4.1
 45695                                  %if 0
 45696                                  
 45697                                  ; 27/04/2019 - Retro DOS v4.0
 45698                                  ; 04/11/2022
 45699                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45700                                  
 45701                                  ;------------------------------------------------------------------------
 45702                                  ; Patch for Sidekick
 45703                                  ;
 45704                                  ; A documented method for finding the offset of the Errormode flag in the 
 45705                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45706                                  ; for the following sequence of instructions.
 45707                                  ;
 45708                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45709                                  ;
 45710                                  ; The Offset of Errormode flag is 0320h
 45711                                  ;
 45712                                  ;------------------------------------------------------------------------
 45713                                  
 45714                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45715                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45716                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45717                                  	db	0CDh, 028h			 ; int  28h
 45718                                  
 45719                                  ;--------------------------------------------------------------------------
 45720                                  ; Patch for PortOfEntry - M036
 45721                                  ;
 45722                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45723                                  ; the offset of Errormode flag. The following patch is to support them in 
 45724                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45725                                  ;
 45726                                  ;---------------------------------------------------------------------------
 45727                                  
 45728                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45729                                  	db	075h, 037h			 ; jnz	NearLabel
 45730                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45731                                  
 45732                                  %endif ; 29/12/2022
 45733                                  
 45734                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45735                                  
 45736                                  ;--------------------------------------------------------------------------
 45737                                  
 45738                                  ;*** New FCB Implementation
 45739                                  ; This variable is used as a cache in the new FCB implementation to remember
 45740                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45741                                  
 45742 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45743                                  
 45744                                  ;DOSDATA ENDS
 45745                                  
 45746                                  ;============================================================================
 45747                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45748                                  ;============================================================================
 45749                                  ; 27/04/2019 - Retro DOS 4.0
 45750                                  
 45751                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45752                                  
 45753                                  ;---------------------------------------------------------------------------
 45754                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45755                                  ;----------------------------------------------------------------------------
 45756                                  	
 45757                                  	;db	90h
 45758                                  
 45759                                  	;EVEN
 45760                                  align 2
 45761                                  
 45762                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45763                                  
 45764                                  DOSINTTABLE:	; LABEL	DWORD
 45765                                  
 45766                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45767                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45768                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45769                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45770                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45771                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45772                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45773                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45774                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45775                                  	
 45776 00001048 [0352]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45777 0000104C [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45778 00001050 [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45779 00001054 [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45780 00001058 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45781 0000105C [3D61]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45782 00001060 [0307]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45783 00001064 [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45784 00001068 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45785                                  
 45786 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45787 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45788                                  
 45789                                  ;-------------------------------------------------------------------------
 45790                                  ;
 45791                                  ; LOW MEM STUB:
 45792                                  ;
 45793                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45794                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45795                                  ; DOS load in HIMEM. Each entry point does this.
 45796                                  ;
 45797                                  ; 	1. if jmp to 8 has been patched out
 45798                                  ;	   2. if A20 OFF
 45799                                  ;	      3. Enable A20
 45800                                  ;	   4. else 
 45801                                  ;	      5. just go to dos entry
 45802                                  ;	   6. endif
 45803                                  ;	7. else
 45804                                  ;	   8. just go to dos entry
 45805                                  ;	9. endif
 45806                                  ;
 45807                                  ;--------------------------------------------------------------------------
 45808                                  
 45809                                  ; 27/04/2019 - Retro DOS v4.0
 45810                                  
 45811                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45812                                  
 45813                                  ;--------------------------------------------------------------------------
 45814                                  ;
 45815                                  ; DIVIDE BY 0 handler
 45816                                  ;
 45817                                  ;--------------------------------------------------------------------------
 45818                                  
 45819                                  ldivov:
 45820                                  	; The following jump, skipping the XMS calls will be patched to 
 45821                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45822                                  	; needed because the stub is installed even before the XMS driver
 45823                                  	; is loaded if the user specifies dos=high in the config.sys
 45824                                  i0patch:
 45825 00001070 EB03                    	jmp	short divov_cont	
 45826                                  
 45827 00001072 E8D800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45828                                  divov_cont:
 45829 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45830                                  
 45831                                  ;------------------------------------------------------------------------
 45832                                  ;
 45833                                  ; INT 20 Handler
 45834                                  ;
 45835                                  ; Here we do not have to set up the stack to return here as the abort call
 45836                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45837                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45838                                  ; will be restored then.
 45839                                  ;
 45840                                  ;-------------------------------------------------------------------------
 45841                                  
 45842                                  lquit:
 45843                                  	; The following jump, skipping the XMS calls will be patched to 
 45844                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45845                                  	; needed because the stub is installed even before the XMS driver
 45846                                  	; is loaded if the user specifies dos=high in the config.sys
 45847                                  i20patch:
 45848 0000107A EB03                    	jmp	short quit_cont	
 45849                                  
 45850 0000107C E8CE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45851                                  quit_cont:
 45852 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45853                                  
 45854                                  ;--------------------------------------------------------------------------
 45855                                  ;
 45856                                  ; INT 21 Handler
 45857                                  ;
 45858                                  ;--------------------------------------------------------------------------
 45859                                  
 45860                                  lcommand:
 45861                                  	; The following jump, skipping the XMS calls will be patched to 
 45862                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45863                                  	; needed because the stub is installed even before the XMS driver
 45864                                  	; is loaded if the user specifies dos=high in the config.sys
 45865                                  i21patch:
 45866 00001084 EB03                    	jmp	short command_cont	
 45867                                  
 45868 00001086 E8C400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45869                                  command_cont:
 45870 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45871                                  
 45872                                  ;------------------------------------------------------------------------
 45873                                  ;
 45874                                  ; INT 25 
 45875                                  ;
 45876                                  ;----------------------------------------------------------------------------
 45877                                  
 45878                                  labsdrd:
 45879                                  	; The following jump, skipping the XMS calls will be patched to 
 45880                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45881                                  	; needed because the stub is installed even before the XMS driver
 45882                                  	; is loaded if the user specifies dos=high in the config.sys
 45883                                  i25patch:
 45884 0000108E EB03                    	jmp	short absdrd_cont	
 45885                                  
 45886 00001090 E8BA00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45887                                  absdrd_cont:
 45888 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45889                                  
 45890                                  ;-------------------------------------------------------------------------
 45891                                  ;
 45892                                  ; INT 26
 45893                                  ;
 45894                                  ;-----------------------------------------------------------------------
 45895                                  
 45896                                  labsdwrt:
 45897                                  	; The following jump, skipping the XMS calls will be patched to 
 45898                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45899                                  	; needed because the stub is installed even before the XMS driver
 45900                                  	; is loaded if the user specifies dos=high in the config.sys
 45901                                  i26patch:
 45902 00001098 EB03                    	jmp	short absdwrt_cont	
 45903                                  
 45904 0000109A E8B000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45905                                  absdwrt_cont:
 45906 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45907                                  
 45908                                  ;------------------------------------------------------------------------
 45909                                  ;
 45910                                  ; INT 27
 45911                                  ;
 45912                                  ;-----------------------------------------------------------------------
 45913                                  
 45914                                  lstay_resident:
 45915                                  	; The following jump, skipping the XMS calls will be patched to 
 45916                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45917                                  	; needed because the stub is installed even before the XMS driver
 45918                                  	; is loaded if the user specifies dos=high in the config.sys
 45919                                  i27patch:
 45920 000010A2 EB03                    	jmp	short sr_cont	
 45921                                  
 45922 000010A4 E8A600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45923                                  sr_cont:
 45924 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45925                                  
 45926                                  ;-----------------------------------------------------------------------------
 45927                                  ;
 45928                                  ; INT 2f
 45929                                  ;
 45930                                  ;-------------------------------------------------------------------------
 45931                                  
 45932                                  lint2f:
 45933                                  	; The following jump, skipping the XMS calls will be patched to 
 45934                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45935                                  	; needed because the stub is installed even before the XMS driver
 45936                                  	; is loaded if the user specifies dos=high in the config.sys
 45937                                  i2fpatch:
 45938 000010AC EB03                    	jmp	short int2f_cont	
 45939                                  
 45940 000010AE E89C00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45941                                  int2f_cont:
 45942 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45943                                  
 45944                                  ;-----------------------------------------------------------------------------
 45945                                  ;
 45946                                  ; CPM entry
 45947                                  ;
 45948                                  ;------------------------------------------------------------------------
 45949                                  
 45950                                  lcall_entry:
 45951                                  	; The following jump, skipping the XMS calls will be patched to 
 45952                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45953                                  	; needed because the stub is installed even before the XMS driver
 45954                                  	; is loaded if the user specifies dos=high in the config.sys
 45955                                  cpmpatch:
 45956 000010B6 EB03                    	jmp	short callentry_cont	
 45957                                  
 45958 000010B8 E89200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45959                                  callentry_cont:
 45960 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45961                                  
 45962                                  ;--------------------------------------------------------------------------
 45963                                  
 45964                                  lirett:
 45965 000010C0 CF                      	iret
 45966                                  
 45967                                  ;---------------------------------------------------------------------------
 45968                                  ;
 45969                                  ; LowIntXX:
 45970                                  ;
 45971                                  ; Interrupts from DOS that pass control to a user program must be done from
 45972                                  ; low memory, as the user program may change the state of the A20 line or
 45973                                  ; they may require that the A20 line be OFF. The following piece of code is
 45974                                  ; far call'd from the following places in DOS:
 45975                                  ;
 45976                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45977                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45978                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45979                                  ;
 45980                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45981                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45982                                  ; before doing the ints and then do a far junp back into DOS.
 45983                                  ;
 45984                                  ;---------------------------------------------------------------------------
 45985                                  
 45986 000010C1 00000000                DosRetAddr23:	dd	0
 45987 000010C5 00000000                DosRetAddr24:	dd	0
 45988 000010C9 00000000                DosRetAddr28:	dd	0
 45989                                  
 45990                                  	; Execute int 23h from low memory
 45991                                  LowInt23:
 45992                                  					; save the return address that is on
 45993                                  					; the stack
 45994 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45995 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45996                                  
 45997 000010D7 CD23                    	int	23h			; ctrl C
 45998                                  					; turn on A20 it has been turned OFF
 45999                                  					; by int 28/23/24 handler.
 46000                                  
 46001 000010D9 E87100                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46002                                  
 46003 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46004                                  
 46005                                  
 46006                                  	; Execute int 24h from low memory
 46007                                  LowInt24:
 46008                                  					; save the return address that is on
 46009                                  					; the stack
 46010 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46011 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46012                                  
 46013 000010EB CD24                    	int	24h			; crit error
 46014                                  					; turn on A20 it has been turned OFF
 46015                                  					; by int 28/23/24 handler.
 46016                                  
 46017 000010ED E85D00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46018                                  
 46019 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46020                                  
 46021                                  
 46022                                   
 46023                                  	; Execute int 28h from low memory
 46024                                  LowInt28:
 46025 000010F5 CD28                    	int	28h			; idle int
 46026                                  					; turn on A20 it has been turned OFF
 46027                                  					; by int 28/23/24 handler.
 46028                                  
 46029 000010F7 E85300                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46030                                  
 46031 000010FA CB                      	retf
 46032                                  
 46033                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46034                                  
 46035                                  ;-------------------------------------------------------------------------
 46036                                  ;
 46037                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46038                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46039                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46040                                  ; This is so because exepac'd programs rely on address wrap.
 46041                                  ;
 46042                                  ;------------------------------------------------------------------------- 
 46043                                  
 46044                                  disa20_xfer:
 46045 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46046                                  
 46047                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46048                                  
 46049                                  	; DS:SI points to entry point
 46050                                  	; AX:DI points to initial stack
 46051                                  	; DX has PDB pointer
 46052                                  	; BX has initial AX value
 46053                                  
 46054 000010FE FA                      	cli
 46055 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46056                                  
 46057 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46058 00001107 89FC                    	mov	SP,DI			; and SP
 46059 00001109 FB                      	sti
 46060                                  
 46061 0000110A 1E                      	push	DS			; fake long call to entry
 46062 0000110B 56                      	push	SI
 46063 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46064 0000110E 8EDA                    	mov	DS,DX
 46065 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46066 00001112 CB                      	retf
 46067                                  
 46068                                  ;-------------------------------------------------------------------------
 46069                                  ;
 46070                                  ; M003:
 46071                                  ;
 46072                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46073                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46074                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46075                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46076                                  ; more info.	
 46077                                  ;
 46078                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46079                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46080                                  ; stack to avoid additional stack overhead for the user.
 46081                                  ;
 46082                                  ; -------------------------------------------------------------------------
 46083                                  
 46084                                  disa20_iret:
 46085 00001113 E82700                  	call	XMMDisableA20
 46086 00001116 FE0E[2103]              	dec	byte [INDOS]
 46087 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46088 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46089 00001122 89E5                    	mov	BP,SP
 46090                                  	;mov	[BP+user_env.user_AX],AL
 46091 00001124 884600                  	mov	[bp],al
 46092 00001127 A1[F205]                	mov	AX,[NSP]
 46093 0000112A A3[8405]                	mov	[USER_SP],AX
 46094 0000112D A1[F005]                	mov	AX,[NSS]
 46095 00001130 A3[8605]                	mov	[USER_SS],AX
 46096                                  
 46097 00001133 58                      	pop	AX			; restore user regs
 46098 00001134 5B                      	pop	BX
 46099 00001135 59                      	pop	CX
 46100 00001136 5A                      	pop	DX
 46101 00001137 5E                      	pop	SI
 46102 00001138 5F                      	pop	DI
 46103 00001139 5D                      	pop	BP
 46104 0000113A 1F                      	pop	DS
 46105 0000113B 07                      	pop	ES
 46106 0000113C CF                      	iret
 46107                                  
 46108                                  ;**************************************************************************
 46109                                  ;***	XMMDisableA20 - switch 20th address line			      
 46110                                  ;									      
 46111                                  ;	This routine is used to disable the 20th address line in 	      
 46112                                  ;	the system using XMM calls.					      
 46113                                  ;									      
 46114                                  ;	ENTRY	none		;ds = _DATA				      
 46115                                  ;	EXIT	A20 line disabled					      
 46116                                  ;	USES	NOTHING					      
 46117                                  ;									      
 46118                                  ;**************************************************************************
 46119                                  
 46120                                  XMMDisableA20:
 46121 0000113D 53                      	push	bx
 46122 0000113E 50                      	push	ax
 46123                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46124 0000113F B406                    	mov	ah,6
 46125 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46126 00001146 58                      	pop	ax
 46127 00001147 5B                      	pop	bx
 46128 00001148 C3                      	retn
 46129                                  
 46130                                  ; The entry point in the BIOS XMS driver is defined here.
 46131                                  
 46132                                  XMMcontrol:
 46133 00001149 00000000                	dd	0
 46134                                  
 46135                                  ;--------------------------------------------------------------------------
 46136                                  ;
 46137                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46138                                  ;									      
 46139                                  ;	This routine is used to query the A20 state in		 	      
 46140                                  ;	the system using XMM calls.					      
 46141                                  ;									      
 46142                                  ;	ENTRY: none		
 46143                                  ;
 46144                                  ;	EXIT : A20 will be ON
 46145                                  ;		
 46146                                  ; 	USES : NONE								      
 46147                                  ;									      
 46148                                  ;--------------------------------------------------------------------------
 46149                                  
 46150                                  ; 19/09/2023
 46151                                  ;LowMemory:	; label dword		; Set equal to 0000:0080
 46152                                  ;	dw	00080h
 46153                                  ;	dw	00000h
 46154                                  ;
 46155                                  ;HighMemory:	; label dword
 46156                                  ;	dw	00090h			; Set equal to FFFF:0090
 46157                                  ;	dw	0FFFFh
 46158                                  
 46159                                  EnsureA20ON:
 46160 0000114D 9C                      	pushf
 46161 0000114E 1E                      	push    ds
 46162 0000114F 06                      	push	es
 46163 00001150 51                      	push	cx
 46164 00001151 56                      	push	si
 46165 00001152 57                      	push	di
 46166                                  
 46167                                  	; 19/09/2023
 46168                                  	;lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46169                                  	;les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46170                                  
 46171 00001153 31FF                    	xor	di,di
 46172 00001155 8EC7                    	mov	es,di
 46173 00001157 4F                      	dec	di
 46174 00001158 BE9000                  	mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46175 0000115B 8EDF                    	mov	ds,di
 46176 0000115D BF8000                  	mov	di,80h ; 0000h:0080h	; LowMemory
 46177                                  	
 46178 00001160 B90400                  	mov	cx,4
 46179 00001163 FC                      	cld
 46180 00001164 F3A7                    	repe    cmpsw
 46181                                  
 46182 00001166 7407                    	jz	short EA20_OFF
 46183                                  EA20_RET:
 46184 00001168 5F                      	pop	di
 46185 00001169 5E                      	pop	si
 46186 0000116A 59                      	pop	cx
 46187 0000116B 07                      	pop	es
 46188 0000116C 1F                      	pop	ds
 46189 0000116D 9D                      	popf
 46190 0000116E C3                      	retn
 46191                                  
 46192                                  EA20_OFF:
 46193                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46194                                  	; NOTE: ints are disabled at this point.
 46195                                  
 46196 0000116F 53                      	push	bx
 46197 00001170 50                      	push	ax
 46198                                  
 46199 00001171 8CD0                    	mov	ax,ss			; save user's stack pointer
 46200 00001173 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46201 00001177 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46202 0000117C 8CC8                    	mov	ax,cs
 46203 0000117E 8ED0                    	mov	ss,ax
 46204 00001180 BC[A007]                	mov	sp,AUXSTACK
 46205                                  					; ss:sp -> DOSDATA:AuxStack
 46206                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46207 00001183 B405                    	mov	ah,5
 46208 00001185 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46209 0000118A 09C0                    	or	ax,ax
 46210 0000118C 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46211                                  
 46212 0000118E 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46213 00001192 8ED0                    	mov	ss,ax
 46214 00001194 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46215                                  
 46216 00001199 58                      	pop	ax
 46217 0000119A 5B                      	pop	bx
 46218                                  
 46219 0000119B EBCB                    	jmp	short EA20_RET
 46220                                  
 46221                                  XMMerror:				; M006 - Start
 46222 0000119D B40F                    	mov	ah,0Fh			; get video mode
 46223 0000119F CD10                    	int	10h
 46224 000011A1 3C07                    	cmp	al,7			; Q: are we an MDA
 46225 000011A3 7406                    	je	short XMMcont			; Y: do not change mode
 46226 000011A5 30E4                    	xor	ah,ah ; 0			; set video mode
 46227 000011A7 B002                    	mov	al,02h			; 80 X 25 text
 46228 000011A9 CD10                    	int	10h
 46229                                  XMMcont:
 46230 000011AB B405                    	mov	ah,05h			; set display page
 46231 000011AD 30C0                    	xor	al,al			; page 0
 46232 000011AF CD10                    	int	10h
 46233                                  	
 46234 000011B1 BE[8E12]                	mov	si,XMMERRMSG
 46235 000011B4 0E                      	push	cs
 46236 000011B5 1F                      	pop	ds
 46237 000011B6 FC                      	cld				; clear direction flag
 46238                                  XMMprnt:
 46239 000011B7 AC                      	lodsb
 46240 000011B8 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46241 000011BA 7409                    	jz	short XMMStall		; function 0Eh	
 46242 000011BC B40E                    	mov	ah,0Eh
 46243 000011BE BB0700                  	mov	bx,7
 46244 000011C1 CD10                    	int	10h
 46245 000011C3 EBF2                    	jmp	short XMMprnt
 46246                                  
 46247                                  XMMStall:
 46248 000011C5 FB                      	sti				; allow the user to warm boot
 46249 000011C6 EBFD                    	jmp	short XMMStall		; M006 - End
 46250                                  
 46251                                  ;---------------------------------------------------------------------------
 46252                                  
 46253                                  ; 27/04/2019 - Retro DOS v4.0
 46254                                  
 46255                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46256                                  ALTAH	equ 0Ch
 46257                                  
 46258                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46259                                  ;table was different for this. Segments will be patched in at init time.
 46260                                  
 46261                                  OldInstanceJunk:
 46262 000011C8 7000                    	dw	70h	;segment of BIOS
 46263 000011CA 0000                    	dw	0	;indicate stacks in SYSINIT area
 46264 000011CC 0600                    	dw	6	;5 instance items
 46265                                  
 46266                                  	;dw	0,offset dosdata:contpos, 2
 46267                                  	;dw	0,offset dosdata:bcon, 4
 46268                                  	;dw	0,offset dosdata:carpos,106h
 46269                                  	;dw	0,offset dosdata:charco, 1
 46270                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46271                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46272                                  
 46273 000011CE 0000[2200]0200          	dw	0,CONTPOS,2
 46274 000011D4 0000[3200]0400          	dw	0,BCON,4
 46275 000011DA 0000[F901]0601          	dw	0,CARPOS,106h
 46276 000011E0 0000[0003]0100          	dw	0,CHARCO,1
 46277 000011E6 0000[C00F]2200          	dw	0,exec_init_SP,34
 46278 000011EC 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46279                                  
 46280                                  ;---------------------------------------------------------------------------
 46281                                  
 46282                                  ; M021-
 46283                                  ;
 46284                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46285                                  ; 	takes control of the HMA. When running, this word is a reliable
 46286                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46287                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46288                                  
 46289                                  DosHasHMA:
 46290 000011F2 00                      	db	0
 46291                                  FixExePatch:
 46292 000011F3 0000                    	dw	0		; M012
 46293                                  
 46294                                  ; 28/12/2022 - Retro DOS v4.1
 46295                                  ;RationalPatchPtr:
 46296                                  ;	dw	0		; M012
 46297                                  
 46298                                  ; End M021
 46299                                  
 46300                                  ;---------------------------------------------------------------------------
 46301                                  
 46302                                  ; 28/12/2022 - Retro DOS v4.1
 46303                                  %if 0
 46304                                  
 46305                                  ; M020 Begin
 46306                                  
 46307                                  RatBugCode:	; proc	far
 46308                                  	push	cx
 46309                                  	mov	cx,[10h]
 46310                                  rbc_loop:
 46311                                  	;loop	$
 46312                                  	loop	rbc_loop
 46313                                  	pop	cx
 46314                                  	retf
 46315                                  		
 46316                                  ; M020 End
 46317                                  
 46318                                  %endif
 46319                                  
 46320                                  ;---------------------------------------------------------------------------
 46321                                  	
 46322                                  UmbSave1:
 46323                                  	;db	11 dup (?)	; M023
 46324 000011F5 00<rep Bh>              	times	11 db 0	
 46325                                  
 46326                                  ; DOSDATA:122Ah
 46327                                  
 46328                                  Mark3:	; label byte
 46329                                  
 46330                                  ;IF2
 46331                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46332                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46333                                  ;	ENDIF
 46334                                  ;ENDIF
 46335                                  
 46336                                  ;############################################################################
 46337                                  ;
 46338                                  ; ** HACK FOR DOS 4.0 REDIR **
 46339                                  ;
 46340                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46341                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46342                                  ; COUNTRY_CDPG if it can. 
 46343                                  ;
 46344                                  ; MARK3 SHOULD NOT BE > 122AH 
 46345                                  ;
 46346                                  ; As of 9/6/90, this area is FULL!
 46347                                  ;
 46348                                  ;############################################################################
 46349                                   
 46350                                  	;ORG	0122Ah
 46351                                  
 46352                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46353                                  
 46354                                  ; The following table is used for DOS 3.3
 46355                                  ;DOS country and code page information is defined here for DOS 3.3.
 46356                                  ;The initial value for ccDosCountry is 1 (USA).
 46357                                  ;The initial value for ccDosCodepage is 850.
 46358                                  
 46359                                  ; country and code page information
 46360                                  ; ---------------------------------------------------------------------------
 46361                                  COUNTRY_CDPG:	; label  byte
 46362 00001200 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46363 00001208 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46363 00001211 53595300           
 46364                                  	;db   51 dup (?)
 46365 00001215 00<rep 33h>             	times 51 db 0
 46366                                  ; ------------------------------------------------<MSKK01>-------------------
 46367                                  ;ifdef	DBCS
 46368                                  ;  ifdef JAPAN
 46369                                  ;	dw   932			; system code page id (JAPAN)
 46370                                  ;  endif
 46371                                  ;  ifdef TAIWAN
 46372                                  ;	dw   938			; system code page id (TAIWAN)
 46373                                  ;  endif
 46374                                  ;  ifdef KOREA
 46375                                  ;	dw   934			; system code page id (KOREA IBM)
 46376                                  ;  endif
 46377                                  ;else
 46378 00001248 B501                    	dw   437			; system code page id
 46379                                  ;endif
 46380                                  ; ------------------------------------------------<MSKK01>-------------------
 46381 0000124A 0600                    	dw   6				; number of entries
 46382 0000124C 02                      	db   SetUcase  ; 2		; Ucase type
 46383 0000124D [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46384 0000124F 0000                    	dw   0				; segment of poiter
 46385 00001251 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46386 00001252 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46387 00001254 0000                    	dw   0				; segment of poiter
 46388 00001256 05                      	db   SetFileList ; 5		; valid file chars type
 46389 00001257 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46390 00001259 0000                    	dw   0				; segment of poiter
 46391 0000125B 06                      	db   SetCollate	; 6		; collate type
 46392 0000125C [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46393 0000125E 0000                    	dw   0				; segment of poiter
 46394 00001260 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46395 00001261 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46396 00001263 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46397 00001265 01                      	db   SetCountryInfo  ; 1	; country info type
 46398 00001266 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46399                                  ; ------------------------------------------------<MSKK01>-------------------
 46400                                  ;ifdef	DBCS
 46401                                  ;	...... 
 46402                                  ;else
 46403 00001268 0100                    	dw   1				; USA country id
 46404 0000126A B501                    	dw   437			; USA system code page id
 46405 0000126C 0000                    	dw   0 				; date format
 46406 0000126E 2400000000              	db   '$',0,0,0,0		; currency symbol
 46407 00001273 2C00                    	db   ',',0			; thousand separator
 46408 00001275 2E00                    	db   '.',0			; decimal separator
 46409 00001277 2D00                    	db   '-',0			; date separator
 46410 00001279 3A00                    	db   ':',0			; time separator
 46411 0000127B 00                      	db   0				; currency format flag
 46412 0000127C 02                      	db   2				; # of digits in currency
 46413 0000127D 00                      	db   0 				; time format
 46414 0000127E [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46415 00001280 0000                    	dw   0				; segment of entry point
 46416 00001282 2C00                    	db   ',',0			; data list separator
 46417 00001284 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46417 0000128D 00                 
 46418                                  ;endif
 46419                                  ; ------------------------------------------------<MSKK01>-------------------
 46420                                  
 46421                                  ; 27/04/2019 - Retro DOS v4.0
 46422                                  
 46423                                  ;include msdos.cl2			; XMMERRMSG
 46424                                  
 46425                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 46426                                  
 46427                                  XMMERRMSG:
 46428 0000128E 0D0A                    	db	0Dh,0Ah
 46429 00001290 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46429 00001299 617265204572726F72-
 46429 000012A2 0D0A24             
 46430                                  
 46431                                  ; DOSDATA ends
 46432                                  
 46433                                  ; 05/11/2022
 46434                                  ;----------------------------------------------------------------------------
 46435                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46436                                  ;----------------------------------------------------------------------------
 46437                                  
 46438                                  ; 28/12/2022 - Retro DOS v4.1
 46439                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46440                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46441                                  ;----------------------------------------------------------------------------
 46442                                  %if 0
 46443                                  
 46444                                  ;----------------------------------------------------------------------------
 46445                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46446                                  
 46447                                  ;============================================================================
 46448                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46449                                  ;============================================================================
 46450                                  ; 27/04/2019 - Retro DOS 4.0
 46451                                  
 46452                                  ;DOSDATA Segment
 46453                                  
 46454                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46455                                  
 46456                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46457                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46458                                  
 46459                                  ; first and second DOS patches
 46460                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46461                                  ;
 46462                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46463                                  ;	DVRDLP:
 46464                                  ;	DVWRTLP:
 46465                                  ;
 46466                                  ;
 46467                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46468                                  ;	lds	si,si+7 				  ; sf_devptr
 46469                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46470                                  
 46471                                  DOSP1_ID:	db	036h,0C5h,036h
 46472                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46473                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46474                                  
 46475                                  		db	90h, 90h
 46476                                  
 46477                                  DOSP12_ID:	db	036h,0C5h,036h
 46478                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46479                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46480                                  
 46481                                  ; DOSDATA:12E3h
 46482                                  
 46483                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46484                                  ;
 46485                                  ; Code in disk.asm, 1 location
 46486                                  ;	GETBUF:
 46487                                  ;
 46488                                  ; 051h	push	cx	<- begin special int28 mode
 46489                                  ;	push	es
 46490                                  ;	push	di
 46491                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46492                                  ;	call	????	; $STD_CON_STRING_INPUT
 46493                                  ;	pop	di
 46494                                  ;	pop	es
 46495                                  ; 059h	pop	cx	<- end special int28 mode
 46496                                  
 46497                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46498                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46499                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46500                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46501                                  DOSP4_ID:	db	059h			; pop cx
 46502                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46503                                  	
 46504                                  ; DOSDATA:12EFh
 46505                                  
 46506                                  ; Fifth DOS patch - System call 40h (Write) to console
 46507                                  ;
 46508                                  ; Code in disk.asm, 1 location
 46509                                  ;
 46510                                  ;		push	cx
 46511                                  ;      WRCONLP: lodsb
 46512                                  ;		cmp	al,1Ah
 46513                                  ;		jz	????
 46514                                  ;		call	????	<- "simulate" int28 event
 46515                                  ;		loop	WRCONLP
 46516                                  ;      CONEOF:	pop	ax
 46517                                  
 46518                                  DOSP5_ID:	db	051h			; push cx
 46519                                  		db	0ACh,03Ch,01Ah,074h,005h
 46520                                  		db	0E8h			; call
 46521                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46522                                  
 46523                                  ; DOSDATA:12F6h
 46524                                  
 46525                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46526                                  ;
 46527                                  ; Code in disp.asm, 1 location
 46528                                  ;
 46529                                  ;
 46530                                  ;	mov [SaveDS],ds
 46531                                  ;	mov [SaveBX],bx
 46532                                  ;	mov bx,cs
 46533                                  ;	mov ds,bx
 46534                                  ;	inc [indos]
 46535                                  ;	xor ax,ax
 46536                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46537                                  
 46538                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46539                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46540                                  		db	02Eh,089h,01Eh
 46541                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46542                                  		db	08Ch,0CBh		; mov bx,cs
 46543                                  		db	08Eh,0DBh		; mov ds,bx
 46544                                  		db	0FEh,006h
 46545                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46546                                  		db	033h,0C0h		; xor ax,ax
 46547                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46548                                  
 46549                                  ; DOSDATA:130Ah
 46550                                  
 46551                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46552                                  ;
 46553                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46554                                  ;
 46555                                  ;
 46556                                  ;
 46557                                  ;	push	ax
 46558                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46559                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46560                                  ;	pop	ax
 46561                                  ;	jz	????
 46562                                  
 46563                                  DOSP8_ID:	db	050h			; push ax
 46564                                  		db	036h,0A1h
 46565                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46566                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46567                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46568                                  		db	02Fh,058h		; pop  ax
 46569                                  
 46570                                  ; DOSDATA:1314h
 46571                                  
 46572                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46573                                  ;
 46574                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46575                                  ;   a yeild when a character is not ready to be read.
 46576                                  ;
 46577                                  ; Code in disk.asm, 3 locations
 46578                                  ;
 46579                                  ;   DVRDRAW:
 46580                                  ;	    PUSH    ES
 46581                                  ;	    POP     DS
 46582                                  ;   ReadRawRetry:				<- Patch 10
 46583                                  ;	    MOV     BX,DI
 46584                                  ;	    XOR     AX,AX			<- Reenter #2
 46585                                  ;	    MOV     DX,AX
 46586                                  ;	    call    SETREAD
 46587                                  ;	    PUSH    DS				<- Reenter #1
 46588                                  ;	    LDS     SI,[THISSFT]
 46589                                  ;	    call    DEVIOCALL
 46590                                  ;	    MOV     DX,DI
 46591                                  ;	    MOV     AH,86H
 46592                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46593                                  ;	    TEST    DI,STERR
 46594                                  ;	    JZ	    CRDROK
 46595                                  ;	    call    CHARHARD
 46596                                  ;	    MOV     DI,DX
 46597                                  ;	    OR	    AL,AL
 46598                                  ;	    JZ	    CRDROK
 46599                                  ;	    CMP     AL,3
 46600                                  ;	    JZ	    CRDFERR
 46601                                  ;	    POP     DS
 46602                                  ;	    JMP     ReadRawRetry
 46603                                  ;
 46604                                  ;   CRDFERR:
 46605                                  ;	    POP     DI				<- Patch 11
 46606                                  ;   DEVIOFERR:
 46607                                  ;	    LES     DI,[THISSFT]
 46608                                  ;	    jmp     SET_ACC_ERR_DS
 46609                                  ;
 46610                                  ;   CRDROK:
 46611                                  ;	    POP     DI				<- Patch 12
 46612                                  ;	    MOV     DI,DX
 46613                                  ;	    ADD     DI,[CALLSCNT]
 46614                                  ;	    JMP     SHORT ENDRDDEVJ3
 46615                                  
 46616                                  DOSP10_ID:		db	006H,01FH
 46617                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46618                                  DOSP10_LOC:		db	08BH,0DFH
 46619                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46620                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46621                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46622                                  			db	0DFH,00EH
 46623                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46624                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46625                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46626                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46627                                  			db	009H,003H
 46628                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46629                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46630                                  			db	01FH,0EBH,0CFH
 46631                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46632                                  			db	05FH
 46633                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46634                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46635                                  
 46636                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46637                                  			db	05FH,08BH,0FAH
 46638                                  ; DOSDATA:1353h
 46639                                  
 46640                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46641                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46642                                  ;
 46643                                  ;	    Sets focus to current VM so user can see fatal message.
 46644                                  ;
 46645                                  ;
 46646                                  ;	l0: lodsb		<- Setfocus here
 46647                                  ;	    cmp al, '$'
 46648                                  ;	    je l1
 46649                                  ;	    mov bl, 7
 46650                                  ;	    mov ah, 0Eh
 46651                                  ;	    int 10h
 46652                                  ;	    jmp l0
 46653                                  ;	l1: jmp $
 46654                                  
 46655                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46656                                  		db	03Ch,024h		;     cmp al, '$'
 46657                                  		db	074h,008h		;     je l1
 46658                                  		db	0B3h,007h		;     mov bl, 7
 46659                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46660                                  		db	0CDh,010h		;     int 10h
 46661                                  		db	0EBh,0F3h		;     jmp l0
 46662                                  		db	0EBh,0FEh		; l1: jmp $
 46663                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46664                                  
 46665                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46666                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46667                                  
 46668                                  ; 06/12/2022
 46669                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46670                                  
 46671                                  ; DOSDATA ends
 46672                                  
 46673                                  ;============================================================================
 46674                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46675                                  ;============================================================================
 46676                                  ; 27/04/2019 - Retro DOS 4.0
 46677                                  
 46678                                  ;mpatch.asm -- holds data patch location for callouts 
 46679                                  ; -- allocate cluster in rom.asm
 46680                                  ;
 46681                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46682                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46683                                  ; cluster allocation, however it can be expanded to be used by other
 46684                                  ; patches. This is important since we have an easy-access pointer to
 46685                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46686                                  ; only patch out a far call/retf, so any space after that could be
 46687                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46688                                  ; to call out here.
 46689                                  ;
 46690                                  ; Currently, we allocate only the minimum space required for the 6
 46691                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46692                                  ; to reserve space here if your new data will be position dependent
 46693                                  ; and would prohibit growing of this table.
 46694                                  ;       
 46695                                  ;history	-	created 8-7-92 by scottq
 46696                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46697                                  ;
 46698                                  ;Exported Functions
 46699                                  ;==================
 46700                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46701                                  
 46702                                  ; DosData Segment
 46703                                  
 46704                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46705                                  
 46706                                  ; ---------------------------------------------------------------------------
 46707                                  
 46708                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46709                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46710                                  ; greater). Added to this file because it needed to be somewhere and is
 46711                                  ; 'patch' related.
 46712                                  
 46713                                  Rational386PatchPtr:
 46714                                  	dw	0	; points to patch routine or RET instr.
 46715                                  ; ---------------------------------------------------------------------------
 46716                                  
 46717                                  MagicPatch:
 46718                                  ;MagicPatch proc far
 46719                                          retf            ;default is to just return to allocate
 46720                                          nop             ;however, this code will be patched
 46721                                          nop             ;by magicdrv.sys to
 46722                                          nop             ; call far ?:?     
 46723                                          nop             ; retf or perhaps just jmp far
 46724                                          nop             ;retf/nop take one byte, so we need six instructions
 46725                                                          ;for 6 byte patch
 46726                                  ;MagicPatch endp
 46727                                  
 46728                                  ; ---------------------------------------------------------------------------
 46729                                  
 46730                                  ;DosData Ends
 46731                                  
 46732                                  ; DOSDATA:136Ah
 46733                                  
 46734                                  ;----------------------------------------------------------------------------
 46735                                  
 46736                                  ;DOSDATALAST SEGMENT
 46737                                  
 46738                                  ; 29/04/2019 - Retro DOS v4.0
 46739                                  
 46740                                  ;----------------------------------------------------------------------------
 46741                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46742                                  
 46743                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 46744                                  
 46745                                  ;align 16
 46746                                  
 46747                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46748                                  
 46749                                  ;----------------------------------------------------------------------------
 46750                                  
 46751                                  %endif	; 05/11/2022
 46752                                  
 46753                                  ; 05/12/2022
 46754                                  ;MSDAT001E:	; label byte
 46755                                  
 46756                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46757                                  DOSDATAEND equ $
 46758                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46759                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46760                                  
 46761                                  ;DOSDATALAST ENDS
 46762                                  
 46763                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46764                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46765                                  ;============================================================================
 46766                                  ;	END
 46767                                  ;============================================================================
 46768                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46769                                  ; -----------------------------
 46770                                  ; MAY 2019, ISTANBUL - TURKIYE.
